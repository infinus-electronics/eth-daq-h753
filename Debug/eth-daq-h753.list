
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024948  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003958  08024be8  08024be8  00025be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08028540  08028540  00029540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08028548  08028548  00029548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802854c  0802854c  0002954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08028550  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002818  20000088  080285d8  0002a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200028a0  080285d8  0002a8a0  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002ea0  080285d8  0002aea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00043000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d5000  2**0
                  CONTENTS, READONLY
 14 .debug_info   00063d86  00000000  00000000  000d502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c21d  00000000  00000000  00138db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003240  00000000  00000000  00144fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002849  00000000  00000000  00148218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004fc64  00000000  00000000  0014aa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005df32  00000000  00000000  0019a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001927a6  00000000  00000000  001f85f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0038ad9d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000da98  00000000  00000000  0038ade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00398878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024bd0 	.word	0x08024bd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08024bd0 	.word	0x08024bd0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 ff09 	bl	80024bc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f01a f857 	bl	801a828 <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba8      	ldr	r3, [pc, #672]	@ (8000a1c <main+0x37c>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usHSADCData0, 0x41, sizeof(usHSADCData0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a6      	ldr	r0, [pc, #664]	@ (8000a20 <main+0x380>)
 8000788:	f022 fc6f 	bl	802306a <memset>
  memset(usHSADCData1, 0x42, sizeof(usHSADCData1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a4      	ldr	r0, [pc, #656]	@ (8000a24 <main+0x384>)
 8000794:	f022 fc69 	bl	802306a <memset>
  memset(usGADCData0, 0x43, sizeof(usGADCData0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a2      	ldr	r0, [pc, #648]	@ (8000a28 <main+0x388>)
 80007a0:	f022 fc63 	bl	802306a <memset>
  memset(usGADCData1, 0x44, sizeof(usGADCData1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	48a0      	ldr	r0, [pc, #640]	@ (8000a2c <main+0x38c>)
 80007ac:	f022 fc5d 	bl	802306a <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fc1d 	bl	8000ff4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fccb 	bl	8001154 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f947 	bl	8001a50 <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f022 fa71 	bl	8022ca8 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f001 f86b 	bl	80018a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f001 f811 	bl	80017f0 <MX_DMA_Init>
  //  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ffc3 	bl	8001758 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fd45 	bl	8001260 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd9b 	bl	8001310 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fdef 	bl	80013bc <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fe45 	bl	800146c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fe95 	bl	8001510 <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fce5 	bl	80011b4 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fedf 	bl	80015ac <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 ff63 	bl	80016b8 <MX_TIM5_Init>
  MX_RNG_Init();
 80007f2:	f000 fd1f 	bl	8001234 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  //RNG Setup and Seeding
  RNG->CR &= ~RNG_CR_IE;
 80007f6:	4b8e      	ldr	r3, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a8d      	ldr	r2, [pc, #564]	@ (8000a30 <main+0x390>)
 80007fc:	f023 0308 	bic.w	r3, r3, #8
 8000800:	6013      	str	r3, [r2, #0]
  RNG->CR |= RNG_CR_RNGEN;
 8000802:	4b8b      	ldr	r3, [pc, #556]	@ (8000a30 <main+0x390>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a8a      	ldr	r2, [pc, #552]	@ (8000a30 <main+0x390>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6013      	str	r3, [r2, #0]
  while((RNG->SR & RNG_SR_DRDY) == 0){};
 800080e:	bf00      	nop
 8000810:	4b87      	ldr	r3, [pc, #540]	@ (8000a30 <main+0x390>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f9      	beq.n	8000810 <main+0x170>
  while(RNG->DR == 0); //wait for valid data
 800081c:	bf00      	nop
 800081e:	4b84      	ldr	r3, [pc, #528]	@ (8000a30 <main+0x390>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fb      	beq.n	800081e <main+0x17e>
  ulSeed = RNG->DR;
 8000826:	4b82      	ldr	r3, [pc, #520]	@ (8000a30 <main+0x390>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a82      	ldr	r2, [pc, #520]	@ (8000a34 <main+0x394>)
 800082c:	6013      	str	r3, [r2, #0]
  srand(ulSeed);
 800082e:	4b81      	ldr	r3, [pc, #516]	@ (8000a34 <main+0x394>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f023 f95e 	bl	8023af4 <srand>
  // 7 Segment Setup
  // TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 8000838:	4b7f      	ldr	r3, [pc, #508]	@ (8000a38 <main+0x398>)
 800083a:	4a80      	ldr	r2, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083c:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); // top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 800083e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a38 <main+0x398>)
 8000840:	4a7f      	ldr	r2, [pc, #508]	@ (8000a40 <main+0x3a0>)
 8000842:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 8000844:	4b7c      	ldr	r3, [pc, #496]	@ (8000a38 <main+0x398>)
 8000846:	2201      	movs	r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800084a:	f3bf 8f4f 	dsb	sy
}
 800084e:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 8000850:	4b79      	ldr	r3, [pc, #484]	@ (8000a38 <main+0x398>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a78      	ldr	r2, [pc, #480]	@ (8000a38 <main+0x398>)
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	6013      	str	r3, [r2, #0]
  // TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 800085c:	4b79      	ldr	r3, [pc, #484]	@ (8000a44 <main+0x3a4>)
 800085e:	4a7a      	ldr	r2, [pc, #488]	@ (8000a48 <main+0x3a8>)
 8000860:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 8000862:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000864:	4a76      	ldr	r2, [pc, #472]	@ (8000a40 <main+0x3a0>)
 8000866:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000868:	4b76      	ldr	r3, [pc, #472]	@ (8000a44 <main+0x3a4>)
 800086a:	2201      	movs	r2, #1
 800086c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800086e:	f3bf 8f4f 	dsb	sy
}
 8000872:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 8000874:	4b73      	ldr	r3, [pc, #460]	@ (8000a44 <main+0x3a4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a72      	ldr	r2, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF0000;
 8000880:	4b71      	ldr	r3, [pc, #452]	@ (8000a48 <main+0x3a8>)
 8000882:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000886:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF0000;
 8000888:	4b6c      	ldr	r3, [pc, #432]	@ (8000a3c <main+0x39c>)
 800088a:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 800088e:	601a      	str	r2, [r3, #0]
  // TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000890:	4b6e      	ldr	r3, [pc, #440]	@ (8000a4c <main+0x3ac>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a6d      	ldr	r2, [pc, #436]	@ (8000a4c <main+0x3ac>)
 8000896:	f043 0304 	orr.w	r3, r3, #4
 800089a:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 800089c:	4b6b      	ldr	r3, [pc, #428]	@ (8000a4c <main+0x3ac>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a6a      	ldr	r2, [pc, #424]	@ (8000a4c <main+0x3ac>)
 80008a2:	f023 0302 	bic.w	r3, r3, #2
 80008a6:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 80008a8:	4b68      	ldr	r3, [pc, #416]	@ (8000a4c <main+0x3ac>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a67      	ldr	r2, [pc, #412]	@ (8000a4c <main+0x3ac>)
 80008ae:	f023 0308 	bic.w	r3, r3, #8
 80008b2:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 80008b4:	4b65      	ldr	r3, [pc, #404]	@ (8000a4c <main+0x3ac>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	4a64      	ldr	r2, [pc, #400]	@ (8000a4c <main+0x3ac>)
 80008ba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80008be:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 80008c0:	4b62      	ldr	r3, [pc, #392]	@ (8000a4c <main+0x3ac>)
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4a61      	ldr	r2, [pc, #388]	@ (8000a4c <main+0x3ac>)
 80008c6:	f043 0311 	orr.w	r3, r3, #17
 80008ca:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a5e      	ldr	r2, [pc, #376]	@ (8000a4c <main+0x3ac>)
 80008d2:	f043 0303 	orr.w	r3, r3, #3
 80008d6:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 80008d8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a4c <main+0x3ac>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a5b      	ldr	r2, [pc, #364]	@ (8000a4c <main+0x3ac>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

  // DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008ea:	4859      	ldr	r0, [pc, #356]	@ (8000a50 <main+0x3b0>)
 80008ec:	f01c fab2 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008f6:	4856      	ldr	r0, [pc, #344]	@ (8000a50 <main+0x3b0>)
 80008f8:	f01c faac 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008fc:	2032      	movs	r0, #50	@ 0x32
 80008fe:	f01a f825 	bl	801a94c <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000908:	4851      	ldr	r0, [pc, #324]	@ (8000a50 <main+0x3b0>)
 800090a:	f01c faa3 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800090e:	2032      	movs	r0, #50	@ 0x32
 8000910:	f01a f81c 	bl	801a94c <HAL_Delay>

  I2C4->CR2 = ((0b0001100 << 1) & 0xFFFE) // 7-bit address
 8000914:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <main+0x3b4>)
 8000916:	4a50      	ldr	r2, [pc, #320]	@ (8000a58 <main+0x3b8>)
 8000918:	605a      	str	r2, [r3, #4]
              | (3 << 16)                 // NBYTES = 2
              | (0 << 10)                 // Write direction (0 = write)
              | I2C_CR2_AUTOEND           // Auto generate STOP
              | I2C_CR2_START;            // Generate START
  while ((I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0)
 800091a:	bf00      	nop
 800091c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a54 <main+0x3b4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0312 	and.w	r3, r3, #18
 8000924:	2b00      	cmp	r3, #0
 8000926:	d0f9      	beq.n	800091c <main+0x27c>
    ;
  //      if (I2C4->ISR & I2C_ISR_NACKF) {
  //          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
  //          return;  // Abort on failure
  //      }
  I2C4->TXDR = 0b00110001; // write 2V = 3276 to DAC A, left justified 12 bit to 16 bit
 8000928:	4b4a      	ldr	r3, [pc, #296]	@ (8000a54 <main+0x3b4>)
 800092a:	2231      	movs	r2, #49	@ 0x31
 800092c:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 800092e:	bf00      	nop
 8000930:	4b48      	ldr	r3, [pc, #288]	@ (8000a54 <main+0x3b4>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f9      	beq.n	8000930 <main+0x290>
    ;
  I2C4->TXDR = 0x66; // MSB
 800093c:	4b45      	ldr	r3, [pc, #276]	@ (8000a54 <main+0x3b4>)
 800093e:	2266      	movs	r2, #102	@ 0x66
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 8000942:	bf00      	nop
 8000944:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0302 	and.w	r3, r3, #2
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <main+0x2a4>
    ;
  I2C4->TXDR = 0x60; // LSB
 8000950:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <main+0x3b4>)
 8000952:	2260      	movs	r2, #96	@ 0x60
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXE)) == 0)
 8000956:	bf00      	nop
 8000958:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <main+0x3b4>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <main+0x2b8>
    ;
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF)
 8000964:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <main+0x3b4>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0310 	and.w	r3, r3, #16
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <main+0x2dc>
  {
    // Handle error (e.g., reset I2C)
    I2C4->ICR |= I2C_ICR_NACKCF; // Clear NACK flag
 8000970:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <main+0x3b4>)
 8000972:	69db      	ldr	r3, [r3, #28]
 8000974:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <main+0x3b4>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	61d3      	str	r3, [r2, #28]
  }

  I2C4->CR2 = ((0b0001100 << 1) & 0xFFFE) // 7-bit address
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <main+0x3b4>)
 800097e:	4a36      	ldr	r2, [pc, #216]	@ (8000a58 <main+0x3b8>)
 8000980:	605a      	str	r2, [r3, #4]
              | (3 << 16)                 // NBYTES = 2
              | (0 << 10)                 // Write direction (0 = write)
              | I2C_CR2_AUTOEND           // Auto generate STOP
              | I2C_CR2_START;            // Generate START
  while ((I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0)
 8000982:	bf00      	nop
 8000984:	4b33      	ldr	r3, [pc, #204]	@ (8000a54 <main+0x3b4>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0312 	and.w	r3, r3, #18
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <main+0x2e4>
    ;
  //      if (I2C4->ISR & I2C_ISR_NACKF) {
  //          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
  //          return;  // Abort on failure
  //      }
  I2C4->TXDR = 0b00111000; // write 0.4V = 656 to DAC B, left justified 12 bit to 16 bit
 8000990:	4b30      	ldr	r3, [pc, #192]	@ (8000a54 <main+0x3b4>)
 8000992:	2238      	movs	r2, #56	@ 0x38
 8000994:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 8000996:	bf00      	nop
 8000998:	4b2e      	ldr	r3, [pc, #184]	@ (8000a54 <main+0x3b4>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f9      	beq.n	8000998 <main+0x2f8>
    ;
  I2C4->TXDR = 0x29; // MSB
 80009a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a54 <main+0x3b4>)
 80009a6:	2229      	movs	r2, #41	@ 0x29
 80009a8:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXIS)) == 0)
 80009aa:	bf00      	nop
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <main+0x3b4>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d0f9      	beq.n	80009ac <main+0x30c>
    ;
  I2C4->TXDR = 0x00; // LSB
 80009b8:	4b26      	ldr	r3, [pc, #152]	@ (8000a54 <main+0x3b4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  while ((I2C4->ISR & (I2C_ISR_TXE)) == 0)
 80009be:	bf00      	nop
 80009c0:	4b24      	ldr	r3, [pc, #144]	@ (8000a54 <main+0x3b4>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d0f9      	beq.n	80009c0 <main+0x320>
    ;
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF)
 80009cc:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <main+0x3b4>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0310 	and.w	r3, r3, #16
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <main+0x344>
  {
    // Handle error (e.g., reset I2C)
    I2C4->ICR |= I2C_ICR_NACKCF; // Clear NACK flag
 80009d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <main+0x3b4>)
 80009da:	69db      	ldr	r3, [r3, #28]
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <main+0x3b4>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	61d3      	str	r3, [r2, #28]
  }

  // SPI1 RX Stream
  DMA1_Stream0->M0AR = usHSADCData0;
 80009e4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a5c <main+0x3bc>)
 80009e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a20 <main+0x380>)
 80009e8:	60da      	str	r2, [r3, #12]
  DMA1_Stream0->M1AR = usHSADCData1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	@ (8000a5c <main+0x3bc>)
 80009ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000a24 <main+0x384>)
 80009ee:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->PAR = &(SPI1->RXDR);
 80009f0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a5c <main+0x3bc>)
 80009f2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a60 <main+0x3c0>)
 80009f4:	609a      	str	r2, [r3, #8]
  DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 80009f6:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <main+0x3bc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <main+0x3bc>)
 80009fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a00:	6013      	str	r3, [r2, #0]
  DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <main+0x3bc>)
 8000a04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a08:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <main+0x3bc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a13      	ldr	r2, [pc, #76]	@ (8000a5c <main+0x3bc>)
 8000a10:	f043 0310 	orr.w	r3, r3, #16
 8000a14:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a16:	f3bf 8f4f 	dsb	sy
 8000a1a:	e023      	b.n	8000a64 <main+0x3c4>
 8000a1c:	30000000 	.word	0x30000000
 8000a20:	30000004 	.word	0x30000004
 8000a24:	30010004 	.word	0x30010004
 8000a28:	30020004 	.word	0x30020004
 8000a2c:	30028004 	.word	0x30028004
 8000a30:	48021800 	.word	0x48021800
 8000a34:	20000d44 	.word	0x20000d44
 8000a38:	40020070 	.word	0x40020070
 8000a3c:	30030108 	.word	0x30030108
 8000a40:	58020c18 	.word	0x58020c18
 8000a44:	40020088 	.word	0x40020088
 8000a48:	3003010c 	.word	0x3003010c
 8000a4c:	40000800 	.word	0x40000800
 8000a50:	58020c00 	.word	0x58020c00
 8000a54:	58001c00 	.word	0x58001c00
 8000a58:	02032018 	.word	0x02032018
 8000a5c:	40020010 	.word	0x40020010
 8000a60:	40013030 	.word	0x40013030
}
 8000a64:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000a66:	4ba3      	ldr	r3, [pc, #652]	@ (8000cf4 <main+0x654>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4aa2      	ldr	r2, [pc, #648]	@ (8000cf4 <main+0x654>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6013      	str	r3, [r2, #0]

  // SPI2 RX Stream
  DMA1_Stream1->M0AR = usGADCData0;
 8000a72:	4ba1      	ldr	r3, [pc, #644]	@ (8000cf8 <main+0x658>)
 8000a74:	4aa1      	ldr	r2, [pc, #644]	@ (8000cfc <main+0x65c>)
 8000a76:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usGADCData1;
 8000a78:	4b9f      	ldr	r3, [pc, #636]	@ (8000cf8 <main+0x658>)
 8000a7a:	4aa1      	ldr	r2, [pc, #644]	@ (8000d00 <main+0x660>)
 8000a7c:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8000cf8 <main+0x658>)
 8000a80:	4aa0      	ldr	r2, [pc, #640]	@ (8000d04 <main+0x664>)
 8000a82:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000a84:	4b9c      	ldr	r3, [pc, #624]	@ (8000cf8 <main+0x658>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a9b      	ldr	r2, [pc, #620]	@ (8000cf8 <main+0x658>)
 8000a8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a8e:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000a90:	4b99      	ldr	r3, [pc, #612]	@ (8000cf8 <main+0x658>)
 8000a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a96:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 8000a98:	4b97      	ldr	r3, [pc, #604]	@ (8000cf8 <main+0x658>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a96      	ldr	r2, [pc, #600]	@ (8000cf8 <main+0x658>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa4:	f3bf 8f4f 	dsb	sy
}
 8000aa8:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 8000aaa:	4b93      	ldr	r3, [pc, #588]	@ (8000cf8 <main+0x658>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a92      	ldr	r2, [pc, #584]	@ (8000cf8 <main+0x658>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]

  // TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000ab6:	4b94      	ldr	r3, [pc, #592]	@ (8000d08 <main+0x668>)
 8000ab8:	4a94      	ldr	r2, [pc, #592]	@ (8000d0c <main+0x66c>)
 8000aba:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 8000abc:	4b92      	ldr	r3, [pc, #584]	@ (8000d08 <main+0x668>)
 8000abe:	4a94      	ldr	r2, [pc, #592]	@ (8000d10 <main+0x670>)
 8000ac0:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000ac2:	4b91      	ldr	r3, [pc, #580]	@ (8000d08 <main+0x668>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
}
 8000acc:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 8000ace:	4b8e      	ldr	r3, [pc, #568]	@ (8000d08 <main+0x668>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a8d      	ldr	r2, [pc, #564]	@ (8000d08 <main+0x668>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6013      	str	r3, [r2, #0]

  // TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 8000ada:	4b8e      	ldr	r3, [pc, #568]	@ (8000d14 <main+0x674>)
 8000adc:	4a8b      	ldr	r2, [pc, #556]	@ (8000d0c <main+0x66c>)
 8000ade:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 8000ae0:	4b8c      	ldr	r3, [pc, #560]	@ (8000d14 <main+0x674>)
 8000ae2:	4a8d      	ldr	r2, [pc, #564]	@ (8000d18 <main+0x678>)
 8000ae4:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8000d14 <main+0x674>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aec:	f3bf 8f4f 	dsb	sy
}
 8000af0:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 8000af2:	4b88      	ldr	r3, [pc, #544]	@ (8000d14 <main+0x674>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a87      	ldr	r2, [pc, #540]	@ (8000d14 <main+0x674>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6013      	str	r3, [r2, #0]

  // initialize high speed ADC here
  SPI1->CR2 = 0; // reinitialize tsize
 8000afe:	4b87      	ldr	r3, [pc, #540]	@ (8000d1c <main+0x67c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000b04:	4b85      	ldr	r3, [pc, #532]	@ (8000d1c <main+0x67c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a84      	ldr	r2, [pc, #528]	@ (8000d1c <main+0x67c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000b10:	4b82      	ldr	r3, [pc, #520]	@ (8000d1c <main+0x67c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a81      	ldr	r2, [pc, #516]	@ (8000d1c <main+0x67c>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b22:	487f      	ldr	r0, [pc, #508]	@ (8000d20 <main+0x680>)
 8000b24:	f01c f996 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b28:	2064      	movs	r0, #100	@ 0x64
 8000b2a:	f019 ff0f 	bl	801a94c <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b34:	487a      	ldr	r0, [pc, #488]	@ (8000d20 <main+0x680>)
 8000b36:	f01c f98d 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b3a:	2064      	movs	r0, #100	@ 0x64
 8000b3c:	f019 ff06 	bl	801a94c <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80 + 0x05}; // low reference, low input, vcm on, refpbuf on, input buf on
 8000b40:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000b44:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b46:	7a7b      	ldrb	r3, [r7, #9]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	7a3a      	ldrb	r2, [r7, #8]
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	4b73      	ldr	r3, [pc, #460]	@ (8000d1c <main+0x67c>)
 8000b50:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b52:	bf00      	nop
 8000b54:	4b71      	ldr	r3, [pc, #452]	@ (8000d1c <main+0x67c>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d0f9      	beq.n	8000b54 <main+0x4b4>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	3301      	adds	r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; // sync control mode
 8000b68:	2310      	movs	r3, #16
 8000b6a:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	7a3a      	ldrb	r2, [r7, #8]
 8000b72:	431a      	orrs	r2, r3
 8000b74:	4b69      	ldr	r3, [pc, #420]	@ (8000d1c <main+0x67c>)
 8000b76:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b78:	bf00      	nop
 8000b7a:	4b68      	ldr	r3, [pc, #416]	@ (8000d1c <main+0x67c>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d0f9      	beq.n	8000b7a <main+0x4da>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000b86:	7a7b      	ldrb	r3, [r7, #9]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; // sinc4 osr16
 8000b8e:	2309      	movs	r3, #9
 8000b90:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b92:	7a7b      	ldrb	r3, [r7, #9]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	7a3a      	ldrb	r2, [r7, #8]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	4b60      	ldr	r3, [pc, #384]	@ (8000d1c <main+0x67c>)
 8000b9c:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000b9e:	bf00      	nop
 8000ba0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d1c <main+0x67c>)
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d0f9      	beq.n	8000ba0 <main+0x500>
  {
  }; // wait for enough space to become available
  spi_data[1]++;
 8000bac:	7a7b      	ldrb	r3, [r7, #9]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b10000000; // external clock
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000bb8:	7a7b      	ldrb	r3, [r7, #9]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	7a3a      	ldrb	r2, [r7, #8]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <main+0x67c>)
 8000bc2:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000bc4:	bf00      	nop
 8000bc6:	4b55      	ldr	r3, [pc, #340]	@ (8000d1c <main+0x67c>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <main+0x526>
  {
  }; // wait for enough space to become available
  spi_data[1] = 0x80 + 0x03; // start conversion
 8000bd2:	2383      	movs	r3, #131	@ 0x83
 8000bd4:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00000010;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000bda:	7a7b      	ldrb	r3, [r7, #9]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	7a3a      	ldrb	r2, [r7, #8]
 8000be0:	431a      	orrs	r2, r3
 8000be2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d1c <main+0x67c>)
 8000be4:	621a      	str	r2, [r3, #32]
  while ((SPI1->SR & SPI_SR_TXC) == 0)
 8000be6:	bf00      	nop
 8000be8:	4b4c      	ldr	r3, [pc, #304]	@ (8000d1c <main+0x67c>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <main+0x548>
  {
  }; // wait for enough space to become available
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000bf4:	4b49      	ldr	r3, [pc, #292]	@ (8000d1c <main+0x67c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a48      	ldr	r2, [pc, #288]	@ (8000d1c <main+0x67c>)
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6013      	str	r3, [r2, #0]

  // GADC Setup
  SPI2->CR2 = 0;         // reinitialize tsize
 8000c00:	4b48      	ldr	r3, [pc, #288]	@ (8000d24 <main+0x684>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; // use 32 bit mode for config
 8000c06:	4b47      	ldr	r3, [pc, #284]	@ (8000d24 <main+0x684>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	4a46      	ldr	r2, [pc, #280]	@ (8000d24 <main+0x684>)
 8000c0c:	f043 031f 	orr.w	r3, r3, #31
 8000c10:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000c12:	4b44      	ldr	r3, [pc, #272]	@ (8000d24 <main+0x684>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a43      	ldr	r2, [pc, #268]	@ (8000d24 <main+0x684>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000c1e:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <main+0x684>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a40      	ldr	r2, [pc, #256]	@ (8000d24 <main+0x684>)
 8000c24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c28:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c30:	483d      	ldr	r0, [pc, #244]	@ (8000d28 <main+0x688>)
 8000c32:	f01c f90f 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c36:	2064      	movs	r0, #100	@ 0x64
 8000c38:	f019 fe88 	bl	801a94c <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c42:	4839      	ldr	r0, [pc, #228]	@ (8000d28 <main+0x688>)
 8000c44:	f01c f906 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000c48:	2064      	movs	r0, #100	@ 0x64
 8000c4a:	f019 fe7f 	bl	801a94c <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1 << 5) | (1 << 4)}; // disable alarms
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <main+0x68c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	041b      	lsls	r3, r3, #16
 8000c58:	88fa      	ldrh	r2, [r7, #6]
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <main+0x684>)
 8000c5e:	621a      	str	r2, [r3, #32]
  while ((SPI2->SR & SPI_SR_TXC) == 0)
 8000c60:	bf00      	nop
 8000c62:	4b30      	ldr	r3, [pc, #192]	@ (8000d24 <main+0x684>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f9      	beq.n	8000c62 <main+0x5c2>
  {
  }; // wait for enough space to become available
  ucGADCSPIData[0] = 0b1101000000010100; // 14h
 8000c6e:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000c72:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10;               // range select +-1.5x VREF
 8000c74:	2302      	movs	r3, #2
 8000c76:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	88fa      	ldrh	r2, [r7, #6]
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	4b28      	ldr	r3, [pc, #160]	@ (8000d24 <main+0x684>)
 8000c82:	621a      	str	r2, [r3, #32]
  while ((SPI2->SR & SPI_SR_TXC) == 0)
 8000c84:	bf00      	nop
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <main+0x684>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f9      	beq.n	8000c86 <main+0x5e6>
  {
  };
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000c92:	4b24      	ldr	r3, [pc, #144]	@ (8000d24 <main+0x684>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <main+0x684>)
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <main+0x684>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	4a20      	ldr	r2, [pc, #128]	@ (8000d24 <main+0x684>)
 8000ca4:	f023 031f 	bic.w	r3, r3, #31
 8000ca8:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; // switch back to 16 bit transfers
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <main+0x684>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <main+0x684>)
 8000cb0:	f043 030f 	orr.w	r3, r3, #15
 8000cb4:	6093      	str	r3, [r2, #8]

  // TC ADC SETUP
  // interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; // FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <main+0x690>)
 8000cb8:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000cbc:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; // same as above, use internal temp sensor
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <main+0x690>)
 8000cc0:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000cc4:	805a      	strh	r2, [r3, #2]
  // TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <main+0x694>)
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <main+0x690>)
 8000cca:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <main+0x694>)
 8000cce:	4a1a      	ldr	r2, [pc, #104]	@ (8000d38 <main+0x698>)
 8000cd0:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <main+0x694>)
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd8:	f3bf 8f4f 	dsb	sy
}
 8000cdc:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <main+0x694>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <main+0x694>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6013      	str	r3, [r2, #0]
  // SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <main+0x69c>)
 8000cec:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <main+0x6a0>)
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	e028      	b.n	8000d44 <main+0x6a4>
 8000cf2:	bf00      	nop
 8000cf4:	40020010 	.word	0x40020010
 8000cf8:	40020028 	.word	0x40020028
 8000cfc:	30020004 	.word	0x30020004
 8000d00:	30028004 	.word	0x30028004
 8000d04:	40003830 	.word	0x40003830
 8000d08:	40020040 	.word	0x40020040
 8000d0c:	30000000 	.word	0x30000000
 8000d10:	40013020 	.word	0x40013020
 8000d14:	40020058 	.word	0x40020058
 8000d18:	40003820 	.word	0x40003820
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	58020000 	.word	0x58020000
 8000d24:	40003800 	.word	0x40003800
 8000d28:	58020c00 	.word	0x58020c00
 8000d2c:	08024c24 	.word	0x08024c24
 8000d30:	30030004 	.word	0x30030004
 8000d34:	400200a0 	.word	0x400200a0
 8000d38:	40003c20 	.word	0x40003c20
 8000d3c:	400200b8 	.word	0x400200b8
 8000d40:	30030008 	.word	0x30030008
  DMA1_Stream7->M1AR = usTCADCData1;
 8000d44:	4b8b      	ldr	r3, [pc, #556]	@ (8000f74 <main+0x8d4>)
 8000d46:	4a8c      	ldr	r2, [pc, #560]	@ (8000f78 <main+0x8d8>)
 8000d48:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000d4a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <main+0x8d4>)
 8000d4c:	4a8b      	ldr	r2, [pc, #556]	@ (8000f7c <main+0x8dc>)
 8000d4e:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000d50:	4b88      	ldr	r3, [pc, #544]	@ (8000f74 <main+0x8d4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a87      	ldr	r2, [pc, #540]	@ (8000f74 <main+0x8d4>)
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000d5c:	4b85      	ldr	r3, [pc, #532]	@ (8000f74 <main+0x8d4>)
 8000d5e:	2240      	movs	r2, #64	@ 0x40
 8000d60:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000d62:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <main+0x8d4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a83      	ldr	r2, [pc, #524]	@ (8000f74 <main+0x8d4>)
 8000d68:	f043 0310 	orr.w	r3, r3, #16
 8000d6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6e:	f3bf 8f4f 	dsb	sy
}
 8000d72:	bf00      	nop
  __DSB(); // required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000d74:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <main+0x8d4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a7e      	ldr	r2, [pc, #504]	@ (8000f74 <main+0x8d4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
  // SPI3 Config
  SPI3->CR2 = 0; // reinitialize tsize
 8000d80:	4b7f      	ldr	r3, [pc, #508]	@ (8000f80 <main+0x8e0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d86:	4b7e      	ldr	r3, [pc, #504]	@ (8000f80 <main+0x8e0>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8000f80 <main+0x8e0>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000d92:	4b7b      	ldr	r3, [pc, #492]	@ (8000f80 <main+0x8e0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7a      	ldr	r2, [pc, #488]	@ (8000f80 <main+0x8e0>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000d9e:	4b78      	ldr	r3, [pc, #480]	@ (8000f80 <main+0x8e0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a77      	ldr	r2, [pc, #476]	@ (8000f80 <main+0x8e0>)
 8000da4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da8:	6013      	str	r3, [r2, #0]
  // enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000daa:	4b76      	ldr	r3, [pc, #472]	@ (8000f84 <main+0x8e4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a75      	ldr	r2, [pc, #468]	@ (8000f84 <main+0x8e4>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000db6:	4b73      	ldr	r3, [pc, #460]	@ (8000f84 <main+0x8e4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a72      	ldr	r2, [pc, #456]	@ (8000f84 <main+0x8e4>)
 8000dbc:	f023 0302 	bic.w	r3, r3, #2
 8000dc0:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000dc2:	4b70      	ldr	r3, [pc, #448]	@ (8000f84 <main+0x8e4>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	4a6f      	ldr	r2, [pc, #444]	@ (8000f84 <main+0x8e4>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dcc:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000dce:	4b6d      	ldr	r3, [pc, #436]	@ (8000f84 <main+0x8e4>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	4a6c      	ldr	r2, [pc, #432]	@ (8000f84 <main+0x8e4>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000dda:	4b6a      	ldr	r3, [pc, #424]	@ (8000f84 <main+0x8e4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a69      	ldr	r2, [pc, #420]	@ (8000f84 <main+0x8e4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2120      	movs	r1, #32
 8000dea:	4867      	ldr	r0, [pc, #412]	@ (8000f88 <main+0x8e8>)
 8000dec:	f01c f832 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	4864      	ldr	r0, [pc, #400]	@ (8000f88 <main+0x8e8>)
 8000df6:	f01c f82d 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	4862      	ldr	r0, [pc, #392]	@ (8000f88 <main+0x8e8>)
 8000e00:	f01c f828 	bl	801ce54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2108      	movs	r1, #8
 8000e08:	485f      	ldr	r0, [pc, #380]	@ (8000f88 <main+0x8e8>)
 8000e0a:	f01c f823 	bl	801ce54 <HAL_GPIO_WritePin>

  // Enable SPI1
  //  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; // reinitialize tsize
 8000e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000f8c <main+0x8ec>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000e14:	4b5d      	ldr	r3, [pc, #372]	@ (8000f8c <main+0x8ec>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4a5c      	ldr	r2, [pc, #368]	@ (8000f8c <main+0x8ec>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e1e:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000e20:	4b5a      	ldr	r3, [pc, #360]	@ (8000f8c <main+0x8ec>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a59      	ldr	r2, [pc, #356]	@ (8000f8c <main+0x8ec>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000e2c:	4b57      	ldr	r3, [pc, #348]	@ (8000f8c <main+0x8ec>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a56      	ldr	r2, [pc, #344]	@ (8000f8c <main+0x8ec>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e36:	6013      	str	r3, [r2, #0]

  // Enable SPI2
  SPI2->CR2 = 0; // reinitialize tsize
 8000e38:	4b55      	ldr	r3, [pc, #340]	@ (8000f90 <main+0x8f0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000e3e:	4b54      	ldr	r3, [pc, #336]	@ (8000f90 <main+0x8f0>)
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	4a53      	ldr	r2, [pc, #332]	@ (8000f90 <main+0x8f0>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e48:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000e4a:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <main+0x8f0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <main+0x8f0>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000e56:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <main+0x8f0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f90 <main+0x8f0>)
 8000e5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e60:	6013      	str	r3, [r2, #0]

  // Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000e62:	4b4c      	ldr	r3, [pc, #304]	@ (8000f94 <main+0x8f4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a4b      	ldr	r2, [pc, #300]	@ (8000f94 <main+0x8f4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000e6e:	4b49      	ldr	r3, [pc, #292]	@ (8000f94 <main+0x8f4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a48      	ldr	r2, [pc, #288]	@ (8000f94 <main+0x8f4>)
 8000e74:	f023 0302 	bic.w	r3, r3, #2
 8000e78:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000e7a:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <main+0x8f4>)
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <main+0x8f4>)
 8000e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e84:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000e86:	4b43      	ldr	r3, [pc, #268]	@ (8000f94 <main+0x8f4>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a42      	ldr	r2, [pc, #264]	@ (8000f94 <main+0x8f4>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000e92:	4b40      	ldr	r3, [pc, #256]	@ (8000f94 <main+0x8f4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a3f      	ldr	r2, [pc, #252]	@ (8000f94 <main+0x8f4>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6013      	str	r3, [r2, #0]

  // Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <main+0x8f8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8000f98 <main+0x8f8>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <main+0x8f8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a3a      	ldr	r2, [pc, #232]	@ (8000f98 <main+0x8f8>)
 8000eb0:	f023 0302 	bic.w	r3, r3, #2
 8000eb4:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <main+0x8f8>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	4a37      	ldr	r2, [pc, #220]	@ (8000f98 <main+0x8f8>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec0:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <main+0x8f8>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <main+0x8f8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <main+0x8f8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a31      	ldr	r2, [pc, #196]	@ (8000f98 <main+0x8f8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
  pxSTM32H_FillInterfaceDescriptor(0, &(xInterfaces[0]));
 8000eda:	4930      	ldr	r1, [pc, #192]	@ (8000f9c <main+0x8fc>)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f017 fdd7 	bl	8018a90 <pxSTM32H_FillInterfaceDescriptor>

  FreeRTOS_FillEndPoint(&(xInterfaces[0]), &(xEndPoints[0]), ucIPAddress,
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <main+0x900>)
 8000ee4:	9302      	str	r3, [sp, #8]
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <main+0x904>)
 8000ee8:	9301      	str	r3, [sp, #4]
 8000eea:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa8 <main+0x908>)
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <main+0x90c>)
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb0 <main+0x910>)
 8000ef2:	4930      	ldr	r1, [pc, #192]	@ (8000fb4 <main+0x914>)
 8000ef4:	4829      	ldr	r0, [pc, #164]	@ (8000f9c <main+0x8fc>)
 8000ef6:	f00c fd8b 	bl	800da10 <FreeRTOS_FillEndPoint>
#endif /* ( ipconfigUSE_DHCP != 0 ) */

  /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
     are created in the vApplicationIPNetworkEventHook() hook function
     below.  The hook function is called when the network connects. */
  FreeRTOS_IPInit_Multi();
 8000efa:	f008 fed9 	bl	8009cb0 <FreeRTOS_IPInit_Multi>

  xTaskCreate(prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle);
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <main+0x918>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f0c:	492b      	ldr	r1, [pc, #172]	@ (8000fbc <main+0x91c>)
 8000f0e:	482c      	ldr	r0, [pc, #176]	@ (8000fc0 <main+0x920>)
 8000f10:	f003 fc0a 	bl	8004728 <xTaskCreate>
  //      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
  xTaskCreate(vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <main+0x924>)
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f22:	4929      	ldr	r1, [pc, #164]	@ (8000fc8 <main+0x928>)
 8000f24:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <main+0x92c>)
 8000f26:	f003 fbff 	bl	8004728 <xTaskCreate>
  xTaskCreate(vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000f2a:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <main+0x930>)
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f38:	4926      	ldr	r1, [pc, #152]	@ (8000fd4 <main+0x934>)
 8000f3a:	4827      	ldr	r0, [pc, #156]	@ (8000fd8 <main+0x938>)
 8000f3c:	f003 fbf4 	bl	8004728 <xTaskCreate>
  xTaskCreate(vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000f40:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <main+0x93c>)
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f4e:	4924      	ldr	r1, [pc, #144]	@ (8000fe0 <main+0x940>)
 8000f50:	4824      	ldr	r0, [pc, #144]	@ (8000fe4 <main+0x944>)
 8000f52:	f003 fbe9 	bl	8004728 <xTaskCreate>
  xTaskCreate(vCommandServerTask, "CommandServer", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &vCommandServerTaskHandle);
 8000f56:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <main+0x948>)
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000f64:	4921      	ldr	r1, [pc, #132]	@ (8000fec <main+0x94c>)
 8000f66:	4822      	ldr	r0, [pc, #136]	@ (8000ff0 <main+0x950>)
 8000f68:	f003 fbde 	bl	8004728 <xTaskCreate>
  vTaskStartScheduler();
 8000f6c:	f003 fe36 	bl	8004bdc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <main+0x8d0>
 8000f74:	400200b8 	.word	0x400200b8
 8000f78:	30030088 	.word	0x30030088
 8000f7c:	40003c30 	.word	0x40003c30
 8000f80:	40003c00 	.word	0x40003c00
 8000f84:	40000c00 	.word	0x40000c00
 8000f88:	58021000 	.word	0x58021000
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	40003800 	.word	0x40003800
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40000400 	.word	0x40000400
 8000f9c:	20000874 	.word	0x20000874
 8000fa0:	080281dc 	.word	0x080281dc
 8000fa4:	080281d8 	.word	0x080281d8
 8000fa8:	080281d4 	.word	0x080281d4
 8000fac:	080281d0 	.word	0x080281d0
 8000fb0:	080281cc 	.word	0x080281cc
 8000fb4:	2000089c 	.word	0x2000089c
 8000fb8:	20000d48 	.word	0x20000d48
 8000fbc:	08024be8 	.word	0x08024be8
 8000fc0:	08001c91 	.word	0x08001c91
 8000fc4:	20000d4c 	.word	0x20000d4c
 8000fc8:	08024bf0 	.word	0x08024bf0
 8000fcc:	08001cb9 	.word	0x08001cb9
 8000fd0:	20000d50 	.word	0x20000d50
 8000fd4:	08024bfc 	.word	0x08024bfc
 8000fd8:	08001e6d 	.word	0x08001e6d
 8000fdc:	20000d54 	.word	0x20000d54
 8000fe0:	08024c08 	.word	0x08024c08
 8000fe4:	08002021 	.word	0x08002021
 8000fe8:	20000d58 	.word	0x20000d58
 8000fec:	08024c14 	.word	0x08024c14
 8000ff0:	080021d1 	.word	0x080021d1

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09e      	sub	sp, #120	@ 0x78
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ffe:	224c      	movs	r2, #76	@ 0x4c
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f022 f831 	bl	802306a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f022 f82a 	bl	802306a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001016:	2002      	movs	r0, #2
 8001018:	f01c f86a 	bl	801d0f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b49      	ldr	r3, [pc, #292]	@ (8001148 <SystemClock_Config+0x154>)
 8001022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001024:	4a48      	ldr	r2, [pc, #288]	@ (8001148 <SystemClock_Config+0x154>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800102c:	4b46      	ldr	r3, [pc, #280]	@ (8001148 <SystemClock_Config+0x154>)
 800102e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b45      	ldr	r3, [pc, #276]	@ (800114c <SystemClock_Config+0x158>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	4a44      	ldr	r2, [pc, #272]	@ (800114c <SystemClock_Config+0x158>)
 800103c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001040:	6193      	str	r3, [r2, #24]
 8001042:	4b42      	ldr	r3, [pc, #264]	@ (800114c <SystemClock_Config+0x158>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104e:	bf00      	nop
 8001050:	4b3e      	ldr	r3, [pc, #248]	@ (800114c <SystemClock_Config+0x158>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800105c:	d1f8      	bne.n	8001050 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b3c      	ldr	r3, [pc, #240]	@ (8001150 <SystemClock_Config+0x15c>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001064:	4a3a      	ldr	r2, [pc, #232]	@ (8001150 <SystemClock_Config+0x15c>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800106e:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <SystemClock_Config+0x15c>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <SystemClock_Config+0x158>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a31      	ldr	r2, [pc, #196]	@ (800114c <SystemClock_Config+0x158>)
 8001086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <SystemClock_Config+0x158>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <SystemClock_Config+0x154>)
 8001098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109a:	4a2b      	ldr	r2, [pc, #172]	@ (8001148 <SystemClock_Config+0x154>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010a2:	4b29      	ldr	r3, [pc, #164]	@ (8001148 <SystemClock_Config+0x154>)
 80010a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010ae:	bf00      	nop
 80010b0:	4b26      	ldr	r3, [pc, #152]	@ (800114c <SystemClock_Config+0x158>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010bc:	d1f8      	bne.n	80010b0 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010be:	2321      	movs	r3, #33	@ 0x21
 80010c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010c2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80010c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010cc:	2302      	movs	r3, #2
 80010ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d0:	2302      	movs	r3, #2
 80010d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 80010d8:	2340      	movs	r3, #64	@ 0x40
 80010da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010dc:	2302      	movs	r3, #2
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010e8:	230c      	movs	r3, #12
 80010ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f8:	4618      	mov	r0, r3
 80010fa:	f01c f833 	bl	801d164 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8001104:	f001 fa10 	bl	8002528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	233f      	movs	r3, #63	@ 0x3f
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2303      	movs	r3, #3
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001114:	2308      	movs	r3, #8
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001118:	2340      	movs	r3, #64	@ 0x40
 800111a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800111c:	2340      	movs	r3, #64	@ 0x40
 800111e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001126:	2340      	movs	r3, #64	@ 0x40
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f01c fc71 	bl	801da18 <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 800113c:	f001 f9f4 	bl	8002528 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3778      	adds	r7, #120	@ 0x78
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58000400 	.word	0x58000400
 800114c:	58024800 	.word	0x58024800
 8001150:	58024400 	.word	0x58024400

08001154 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0b0      	sub	sp, #192	@ 0xc0
 8001158:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115a:	463b      	mov	r3, r7
 800115c:	22c0      	movs	r2, #192	@ 0xc0
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f021 ff82 	bl	802306a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8001166:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8001172:	2308      	movs	r3, #8
 8001174:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8001176:	2340      	movs	r3, #64	@ 0x40
 8001178:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800117a:	2302      	movs	r3, #2
 800117c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001186:	2340      	movs	r3, #64	@ 0x40
 8001188:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001192:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001196:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4618      	mov	r0, r3
 800119c:	f01c ffc8 	bl	801e130 <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011a6:	f001 f9bf 	bl	8002528 <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	37c0      	adds	r7, #192	@ 0xc0
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	@ (800122c <MX_I2C4_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001230 <MX_I2C4_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	@ (8001228 <MX_I2C4_Init+0x74>)
 80011f0:	f01b fe4a 	bl	801ce88 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f001 f995 	bl	8002528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	@ (8001228 <MX_I2C4_Init+0x74>)
 8001202:	f01b fedd 	bl	801cfc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800120c:	f001 f98c 	bl	8002528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_I2C4_Init+0x74>)
 8001214:	f01b ff1f 	bl	801d056 <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800121e:	f001 f983 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000a4 	.word	0x200000a4
 800122c:	58001c00 	.word	0x58001c00
 8001230:	10c0ecff 	.word	0x10c0ecff

08001234 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <MX_RNG_Init+0x24>)
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <MX_RNG_Init+0x28>)
 800123c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_RNG_Init+0x24>)
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_RNG_Init+0x24>)
 8001246:	f01e fd9f 	bl	801fd88 <HAL_RNG_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001250:	f001 f96a 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000f8 	.word	0x200000f8
 800125c:	48021800 	.word	0x48021800

08001260 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001264:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <MX_SPI1_Init+0xa8>)
 8001266:	4a29      	ldr	r2, [pc, #164]	@ (800130c <MX_SPI1_Init+0xac>)
 8001268:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126a:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <MX_SPI1_Init+0xa8>)
 800126c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001270:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001272:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <MX_SPI1_Init+0xa8>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_SPI1_Init+0xa8>)
 800127a:	220f      	movs	r2, #15
 800127c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <MX_SPI1_Init+0xa8>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001284:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <MX_SPI1_Init+0xa8>)
 8001286:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800128a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_SPI1_Init+0xa8>)
 800128e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001292:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_SPI1_Init+0xa8>)
 8001296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800129a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_SPI1_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a8:	4b17      	ldr	r3, [pc, #92]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012ae:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b4:	4b14      	ldr	r3, [pc, #80]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012dc:	2230      	movs	r2, #48	@ 0x30
 80012de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_SPI1_Init+0xa8>)
 80012f4:	f01e fdaa 	bl	801fe4c <HAL_SPI_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80012fe:	f001 f913 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000010c 	.word	0x2000010c
 800130c:	40013000 	.word	0x40013000

08001310 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001316:	4a28      	ldr	r2, [pc, #160]	@ (80013b8 <MX_SPI2_Init+0xa8>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800131c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001320:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001328:	4b22      	ldr	r3, [pc, #136]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800132a:	220f      	movs	r2, #15
 800132c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800133a:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800133c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001340:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001344:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001348:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001358:	2200      	movs	r2, #0
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800135e:	2200      	movs	r2, #0
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001364:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001372:	2200      	movs	r2, #0
 8001374:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001378:	2200      	movs	r2, #0
 800137a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800137c:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001384:	2203      	movs	r2, #3
 8001386:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800138a:	2230      	movs	r2, #48	@ 0x30
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001390:	2200      	movs	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 800139c:	2200      	movs	r2, #0
 800139e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_SPI2_Init+0xa4>)
 80013a2:	f01e fd53 	bl	801fe4c <HAL_SPI_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80013ac:	f001 f8bc 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000194 	.word	0x20000194
 80013b8:	40003800 	.word	0x40003800

080013bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013c0:	4b28      	ldr	r3, [pc, #160]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013c2:	4a29      	ldr	r2, [pc, #164]	@ (8001468 <MX_SPI3_Init+0xac>)
 80013c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013c6:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013d6:	220f      	movs	r2, #15
 80013d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013ea:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80013ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_SPI3_Init+0xa8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_SPI3_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001412:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001416:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_SPI3_Init+0xa8>)
 800141a:	2200      	movs	r2, #0
 800141c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <MX_SPI3_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001432:	2202      	movs	r2, #2
 8001434:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001438:	2220      	movs	r2, #32
 800143a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <MX_SPI3_Init+0xa8>)
 800143e:	2200      	movs	r2, #0
 8001440:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001444:	2200      	movs	r2, #0
 8001446:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <MX_SPI3_Init+0xa8>)
 800144a:	2200      	movs	r2, #0
 800144c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <MX_SPI3_Init+0xa8>)
 8001450:	f01e fcfc 	bl	801fe4c <HAL_SPI_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800145a:	f001 f865 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000021c 	.word	0x2000021c
 8001468:	40003c00 	.word	0x40003c00

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148a:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <MX_TIM1_Init+0x9c>)
 800148c:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <MX_TIM1_Init+0xa0>)
 800148e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001490:	4b1d      	ldr	r3, [pc, #116]	@ (8001508 <MX_TIM1_Init+0x9c>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <MX_TIM1_Init+0x9c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800149c:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_TIM1_Init+0x9c>)
 800149e:	22ff      	movs	r2, #255	@ 0xff
 80014a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a8:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b4:	4814      	ldr	r0, [pc, #80]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014b6:	f01f f8c2 	bl	802063e <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014c0:	f001 f832 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	480d      	ldr	r0, [pc, #52]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014d2:	f01f faf9 	bl	8020ac8 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014dc:	f001 f824 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e0:	2320      	movs	r3, #32
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_TIM1_Init+0x9c>)
 80014f2:	f01f fffb 	bl	80214ec <HAL_TIMEx_MasterConfigSynchronization>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80014fc:	f001 f814 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000040c 	.word	0x2000040c
 800150c:	40010000 	.word	0x40010000

08001510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001530:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <MX_TIM3_Init+0x98>)
 8001532:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001536:	22c7      	movs	r2, #199	@ 0xc7
 8001538:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153a:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <MX_TIM3_Init+0x94>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001542:	2209      	movs	r2, #9
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <MX_TIM3_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001552:	4814      	ldr	r0, [pc, #80]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001554:	f01f f873 	bl	802063e <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 ffe3 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	480d      	ldr	r0, [pc, #52]	@ (80015a4 <MX_TIM3_Init+0x94>)
 8001570:	f01f faaa 	bl	8020ac8 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800157a:	f000 ffd5 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4806      	ldr	r0, [pc, #24]	@ (80015a4 <MX_TIM3_Init+0x94>)
 800158c:	f01f ffae 	bl	80214ec <HAL_TIMEx_MasterConfigSynchronization>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001596:	f000 ffc7 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200004a4 	.word	0x200004a4
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	@ 0x38
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015de:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80015e0:	4a34      	ldr	r2, [pc, #208]	@ (80016b4 <MX_TIM4_Init+0x108>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80015e4:	4b32      	ldr	r3, [pc, #200]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80015e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80015f2:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80015f4:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80015f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001606:	482a      	ldr	r0, [pc, #168]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001608:	f01f f819 	bl	802063e <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001612:	f000 ff89 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001620:	4619      	mov	r1, r3
 8001622:	4823      	ldr	r0, [pc, #140]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001624:	f01f fa50 	bl	8020ac8 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800162e:	f000 ff7b 	bl	8002528 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001632:	481f      	ldr	r0, [pc, #124]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001634:	f01f f8d2 	bl	80207dc <HAL_TIM_PWM_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800163e:	f000 ff73 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001652:	f01f ff4b 	bl	80214ec <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800165c:	f000 ff64 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001660:	2360      	movs	r3, #96	@ 0x60
 8001662:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001664:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001668:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_TIM4_Init+0x104>)
 800167a:	f01f f911 	bl	80208a0 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001684:	f000 ff50 	bl	8002528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001688:	2370      	movs	r3, #112	@ 0x70
 800168a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2204      	movs	r2, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <MX_TIM4_Init+0x104>)
 8001694:	f01f f904 	bl	80208a0 <HAL_TIM_PWM_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800169e:	f000 ff43 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016a2:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <MX_TIM4_Init+0x104>)
 80016a4:	f001 fc2a 	bl	8002efc <HAL_TIM_MspPostInit>

}
 80016a8:	bf00      	nop
 80016aa:	3738      	adds	r7, #56	@ 0x38
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200004f0 	.word	0x200004f0
 80016b4:	40000800 	.word	0x40000800

080016b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016be:	f107 0310 	add.w	r3, r7, #16
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001754 <MX_TIM5_Init+0x9c>)
 80016da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016ec:	f640 4234 	movw	r2, #3124	@ 0xc34
 80016f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <MX_TIM5_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016fe:	4814      	ldr	r0, [pc, #80]	@ (8001750 <MX_TIM5_Init+0x98>)
 8001700:	f01e ff9d 	bl	802063e <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800170a:	f000 ff0d 	bl	8002528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	@ (8001750 <MX_TIM5_Init+0x98>)
 800171c:	f01f f9d4 	bl	8020ac8 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001726:	f000 feff 	bl	8002528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <MX_TIM5_Init+0x98>)
 8001738:	f01f fed8 	bl	80214ec <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001742:	f000 fef1 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000053c 	.word	0x2000053c
 8001754:	40000c00 	.word	0x40000c00

08001758 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800175c:	4b22      	ldr	r3, [pc, #136]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 800175e:	4a23      	ldr	r2, [pc, #140]	@ (80017ec <MX_USART3_UART_Init+0x94>)
 8001760:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179a:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a0:	4811      	ldr	r0, [pc, #68]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 80017a2:	f01f ff31 	bl	8021608 <HAL_UART_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017ac:	f000 febc 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b0:	2100      	movs	r1, #0
 80017b2:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 80017b4:	f020 ff39 	bl	802262a <HAL_UARTEx_SetTxFifoThreshold>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017be:	f000 feb3 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 80017c6:	f020 ff6e 	bl	80226a6 <HAL_UARTEx_SetRxFifoThreshold>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017d0:	f000 feaa 	bl	8002528 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <MX_USART3_UART_Init+0x90>)
 80017d6:	f020 feef 	bl	80225b8 <HAL_UARTEx_DisableFifoMode>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017e0:	f000 fea2 	bl	8002528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200007e0 	.word	0x200007e0
 80017ec:	40004800 	.word	0x40004800

080017f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017f6:	4b29      	ldr	r3, [pc, #164]	@ (800189c <MX_DMA_Init+0xac>)
 80017f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <MX_DMA_Init+0xac>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001806:	4b25      	ldr	r3, [pc, #148]	@ (800189c <MX_DMA_Init+0xac>)
 8001808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2106      	movs	r1, #6
 8001818:	200b      	movs	r0, #11
 800181a:	f019 f9b6 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800181e:	200b      	movs	r0, #11
 8001820:	f019 f9cd 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2106      	movs	r1, #6
 8001828:	200c      	movs	r0, #12
 800182a:	f019 f9ae 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800182e:	200c      	movs	r0, #12
 8001830:	f019 f9c5 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2107      	movs	r1, #7
 8001838:	200d      	movs	r0, #13
 800183a:	f019 f9a6 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800183e:	200d      	movs	r0, #13
 8001840:	f019 f9bd 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2107      	movs	r1, #7
 8001848:	200e      	movs	r0, #14
 800184a:	f019 f99e 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800184e:	200e      	movs	r0, #14
 8001850:	f019 f9b5 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2107      	movs	r1, #7
 8001858:	200f      	movs	r0, #15
 800185a:	f019 f996 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800185e:	200f      	movs	r0, #15
 8001860:	f019 f9ad 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2107      	movs	r1, #7
 8001868:	2010      	movs	r0, #16
 800186a:	f019 f98e 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800186e:	2010      	movs	r0, #16
 8001870:	f019 f9a5 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2107      	movs	r1, #7
 8001878:	2011      	movs	r0, #17
 800187a:	f019 f986 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800187e:	2011      	movs	r0, #17
 8001880:	f019 f99d 	bl	801abbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2107      	movs	r1, #7
 8001888:	202f      	movs	r0, #47	@ 0x2f
 800188a:	f019 f97e 	bl	801ab8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800188e:	202f      	movs	r0, #47	@ 0x2f
 8001890:	f019 f995 	bl	801abbe <HAL_NVIC_EnableIRQ>

}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	58024400 	.word	0x58024400

080018a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b6:	4b61      	ldr	r3, [pc, #388]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	4a5f      	ldr	r2, [pc, #380]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d4:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018da:	4a58      	ldr	r2, [pc, #352]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e4:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f2:	4b52      	ldr	r3, [pc, #328]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f8:	4a50      	ldr	r2, [pc, #320]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001902:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001910:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001916:	4a49      	ldr	r2, [pc, #292]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001920:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b43      	ldr	r3, [pc, #268]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001934:	4a41      	ldr	r2, [pc, #260]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001952:	4a3a      	ldr	r2, [pc, #232]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800195c:	4b37      	ldr	r3, [pc, #220]	@ (8001a3c <MX_GPIO_Init+0x19c>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	213c      	movs	r1, #60	@ 0x3c
 800196e:	4834      	ldr	r0, [pc, #208]	@ (8001a40 <MX_GPIO_Init+0x1a0>)
 8001970:	f01b fa70 	bl	801ce54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001974:	2200      	movs	r2, #0
 8001976:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 800197a:	4832      	ldr	r0, [pc, #200]	@ (8001a44 <MX_GPIO_Init+0x1a4>)
 800197c:	f01b fa6a 	bl	801ce54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001986:	4830      	ldr	r0, [pc, #192]	@ (8001a48 <MX_GPIO_Init+0x1a8>)
 8001988:	f01b fa64 	bl	801ce54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ENABLE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 800198c:	233c      	movs	r3, #60	@ 0x3c
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4827      	ldr	r0, [pc, #156]	@ (8001a40 <MX_GPIO_Init+0x1a0>)
 80019a4:	f01b f8a6 	bl	801caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 80019a8:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 80019ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4820      	ldr	r0, [pc, #128]	@ (8001a44 <MX_GPIO_Init+0x1a4>)
 80019c2:	f01b f897 	bl	801caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80019c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	481a      	ldr	r0, [pc, #104]	@ (8001a44 <MX_GPIO_Init+0x1a4>)
 80019dc:	f01b f88a 	bl	801caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80019e0:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <MX_GPIO_Init+0x1a8>)
 80019fa:	f01b f87b 	bl	801caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80019fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	@ (8001a48 <MX_GPIO_Init+0x1a8>)
 8001a14:	f01b f86e 	bl	801caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 8001a18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <MX_GPIO_Init+0x1ac>)
 8001a2e:	f01b f861 	bl	801caf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	58024400 	.word	0x58024400
 8001a40:	58021000 	.word	0x58021000
 8001a44:	58020c00 	.word	0x58020c00
 8001a48:	58020000 	.word	0x58020000
 8001a4c:	58020400 	.word	0x58020400

08001a50 <vHeapInit>:
static uint8_t ucRAM_3[32 * 1024] __attribute__((section(".ram3_data")));

#define mainMEM_REGION(REGION) REGION, sizeof(REGION)

static void vHeapInit()
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
  /* Note: the memories must be sorted on their physical address. */
  HeapRegion_t xHeapRegions[] = {
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <vHeapInit+0x28>)
 8001a58:	463c      	mov	r4, r7
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      {mainMEM_REGION(ucRAM_1)},
      //		{ mainMEM_REGION( ucRAM_2 ) },
      {mainMEM_REGION(ucRAM_3)},
      {NULL, 0}};

  vPortDefineHeapRegions(xHeapRegions);
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f005 fa0a 	bl	8006e84 <vPortDefineHeapRegions>
}
 8001a70:	bf00      	nop
 8001a72:	3720      	adds	r7, #32
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	08024c28 	.word	0x08024c28

08001a7c <ulGetRunTimeCounterValue>:

// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return 0U;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <vAssertCalled>:

void vAssertCalled(const char *pcFile, uint32_t ulLine)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  volatile unsigned long ul = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]

  (void)pcFile;
  (void)ulLine;

  taskENTER_CRITICAL();
 8001a9a:	f004 ff59 	bl	8006950 <vPortEnterCritical>
  {
    /* Set ul to a non-zero value using the debugger to step out of this
    function. */
    while (ul == 0)
 8001a9e:	e000      	b.n	8001aa2 <vAssertCalled+0x16>
    {
      __NOP();
 8001aa0:	bf00      	nop
    while (ul == 0)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0fb      	beq.n	8001aa0 <vAssertCalled+0x14>
    }
  }
  taskEXIT_CRITICAL();
 8001aa8:	f004 ff7e 	bl	80069a8 <vPortExitCritical>
}
 8001aac:	bf00      	nop
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  internally by FreeRTOS API functions that create tasks, queues, software
  timers, and semaphores.  The size of the FreeRTOS heap is set by the
  configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

  /* Force an assert. */
  configASSERT((volatile void *)NULL);
 8001ab8:	f240 516e 	movw	r1, #1390	@ 0x56e
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <vApplicationMallocFailedHook+0x14>)
 8001abe:	f7ff ffe5 	bl	8001a8c <vAssertCalled>
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08024c48 	.word	0x08024c48

08001acc <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	460b      	mov	r3, r1
 8001ada:	817b      	strh	r3, [r7, #10]
 8001adc:	4613      	mov	r3, r2
 8001ade:	813b      	strh	r3, [r7, #8]
  uint32_t ulReturn;
  (void)ulSourceAddress;
  (void)usSourcePort;
  (void)ulDestinationAddress;
  (void)usDestinationPort;
  xApplicationGetRandomNumber(&ulReturn);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8a5 	bl	8001c34 <xApplicationGetRandomNumber>

  return ulReturn;
 8001aea:	697b      	ldr	r3, [r7, #20]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook(eIPCallbackEvent_t eNetworkEvent)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	@ 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  /* If the network has just come up...*/
  if (eNetworkEvent == eNetworkUp)
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d14d      	bne.n	8001ba0 <vApplicationIPNetworkEventHook+0xac>
    uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
    char cBuffer[16];

    /* Create the tasks that use the IP stack if they have not already been
    created. */
    if (xTasksAlreadyCreated == pdFALSE)
 8001b04:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <vApplicationIPNetworkEventHook+0xb4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <vApplicationIPNetworkEventHook+0x24>
    {
      xTasksAlreadyCreated = pdTRUE;
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <vApplicationIPNetworkEventHook+0xb4>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]
      /* Sockets, and tasks that use the TCP/IP stack can be created here. */
      //
      xDoCreateSockets = pdTRUE;
 8001b12:	4b26      	ldr	r3, [pc, #152]	@ (8001bac <vApplicationIPNetworkEventHook+0xb8>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
    }
    /* Print out the network configuration, which may have come from a DHCP
    server. */
    FreeRTOS_GetAddressConfiguration(&ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	f107 021c 	add.w	r2, r7, #28
 8001b20:	f107 0120 	add.w	r1, r7, #32
 8001b24:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b28:	f008 f95a 	bl	8009de0 <FreeRTOS_GetAddressConfiguration>
    FreeRTOS_inet_ntoa(ulIPAddress, cBuffer);
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f107 0208 	add.w	r2, r7, #8
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00d ff57 	bl	800f9e8 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("IP Address: %s\n", cBuffer));
 8001b3a:	f107 0308 	add.w	r3, r7, #8
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481b      	ldr	r0, [pc, #108]	@ (8001bb0 <vApplicationIPNetworkEventHook+0xbc>)
 8001b42:	f020 ff69 	bl	8022a18 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulNetMask, cBuffer);
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	f107 0208 	add.w	r2, r7, #8
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00d ff4a 	bl	800f9e8 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("Subnet Mask: %s\n", cBuffer));
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4816      	ldr	r0, [pc, #88]	@ (8001bb4 <vApplicationIPNetworkEventHook+0xc0>)
 8001b5c:	f020 ff5c 	bl	8022a18 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulGatewayAddress, cBuffer);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f107 0208 	add.w	r2, r7, #8
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00d ff3d 	bl	800f9e8 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("Gateway Address: %s\n", cBuffer));
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	4810      	ldr	r0, [pc, #64]	@ (8001bb8 <vApplicationIPNetworkEventHook+0xc4>)
 8001b76:	f020 ff4f 	bl	8022a18 <lUDPLoggingPrintf>

    FreeRTOS_inet_ntoa(ulDNSServerAddress, cBuffer);
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f107 0208 	add.w	r2, r7, #8
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00d ff30 	bl	800f9e8 <FreeRTOS_inet_ntoa>
    FreeRTOS_printf(("DNS Server Address: %s\n", cBuffer));
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480b      	ldr	r0, [pc, #44]	@ (8001bbc <vApplicationIPNetworkEventHook+0xc8>)
 8001b90:	f020 ff42 	bl	8022a18 <lUDPLoggingPrintf>

    FreeRTOS_printf(("RNG Seed: %lu\n", ulSeed));
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <vApplicationIPNetworkEventHook+0xcc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480a      	ldr	r0, [pc, #40]	@ (8001bc4 <vApplicationIPNetworkEventHook+0xd0>)
 8001b9c:	f020 ff3c 	bl	8022a18 <lUDPLoggingPrintf>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	@ 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000d3c 	.word	0x20000d3c
 8001bac:	20000d40 	.word	0x20000d40
 8001bb0:	08024c5c 	.word	0x08024c5c
 8001bb4:	08024c6c 	.word	0x08024c6c
 8001bb8:	08024c80 	.word	0x08024c80
 8001bbc:	08024c98 	.word	0x08024c98
 8001bc0:	20000d44 	.word	0x20000d44
 8001bc4:	08024cb0 	.word	0x08024cb0

08001bc8 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook(const char *pcName)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  BaseType_t xReturn = pdFAIL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Determine if a name lookup is for this node.  Two names are given
  to this node: that returned by pcApplicationHostnameHook() and that set
  by mainDEVICE_NICK_NAME. */
  if (strcasecmp(pcName, pcApplicationHostnameHook()) == 0)
 8001bd4:	f000 f810 	bl	8001bf8 <pcApplicationHostnameHook>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f022 f925 	bl	8023e2c <strcasecmp>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <xApplicationDNSQueryHook+0x24>
  {
    xReturn = pdPASS;
 8001be8:	2301      	movs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
  }
  return xReturn;
 8001bec:	68fb      	ldr	r3, [r7, #12]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* Assign the name "STM32H7" to this network node.  This function will be
  called during the DHCP: the machine will be registered with an IP address
  plus this name. */
  return "STM32H7";
 8001bfc:	4b02      	ldr	r3, [pc, #8]	@ (8001c08 <pcApplicationHostnameHook+0x10>)
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	08024cc0 	.word	0x08024cc0

08001c0c <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if (ipconfigSUPPORT_OUTGOING_PINGS == 1)
void vApplicationPingReplyHook(ePingReplyStatus_t eStatus, uint16_t usIdentifier)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	460a      	mov	r2, r1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80bb      	strh	r3, [r7, #4]
  FreeRTOS_printf(("Received ping ID %04X\n", usIdentifier));
 8001c1c:	88bb      	ldrh	r3, [r7, #4]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <vApplicationPingReplyHook+0x24>)
 8001c22:	f020 fef9 	bl	8022a18 <lUDPLoggingPrintf>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	08024cc8 	.word	0x08024cc8

08001c34 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber(uint32_t *pulNumber)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  *pulNumber = rand();
 8001c3c:	f021 ff88 	bl	8023b50 <rand>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	601a      	str	r2, [r3, #0]
  return pdTRUE;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack(uint32_t *pulFaultStackAddress)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* When the debuggger stops here, you can inspect the registeers of the
  application by looking at *pxRegisterStack. */
  pxRegisterStack = (volatile struct xREGISTER_STACK *)(pulFaultStackAddress - ARRAY_SIZE(pxRegisterStack->spare0));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b20      	subs	r3, #32
 8001c60:	4a01      	ldr	r2, [pc, #4]	@ (8001c68 <prvGetRegistersFromStack+0x14>)
 8001c62:	6013      	str	r3, [r2, #0]

  /* When the following line is hit, the variables contain the register values. */
  for (;;)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <prvGetRegistersFromStack+0x10>
 8001c68:	20000d5c 	.word	0x20000d5c

08001c6c <HardFault_Handler>:
    ;
}

void HardFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  __asm volatile(
 8001c70:	f01e 0f04 	tst.w	lr, #4
 8001c74:	bf0c      	ite	eq
 8001c76:	f3ef 8008 	mrseq	r0, MSP
 8001c7a:	f3ef 8009 	mrsne	r0, PSP
 8001c7e:	6981      	ldr	r1, [r0, #24]
 8001c80:	f7ff ffe8 	bl	8001c54 <prvGetRegistersFromStack>
      " ite eq                                                    \n"
      " mrseq r0, msp                                             \n"
      " mrsne r0, psp                                             \n"
      " ldr r1, [r0, #24]                                         \n"
      " bl prvGetRegistersFromStack                               \n");
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <prvServerWorkTask>:

static void prvServerWorkTask(void *pvParameters)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS(100U);
#endif /* ( CONTINUOUS_PING != 0 ) */

  for (;;)
  {
    vTaskDelay(10U);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f002 ff23 	bl	8004ae4 <vTaskDelay>
    if (xDoCreateSockets != pdFALSE)
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <prvServerWorkTask+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f8      	beq.n	8001c98 <prvServerWorkTask+0x8>
    {
      xDoCreateSockets = pdFALSE;
 8001ca6:	4b03      	ldr	r3, [pc, #12]	@ (8001cb4 <prvServerWorkTask+0x24>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
      /* Start a new task to fetch logging lines and send them out.
      See FreeRTOSConfig.h for the configuration of UDP logging. */
      vUDPLoggingTaskCreate();
 8001cac:	f020 fed0 	bl	8022a50 <vUDPLoggingTaskCreate>
    vTaskDelay(10U);
 8001cb0:	e7f2      	b.n	8001c98 <prvServerWorkTask+0x8>
 8001cb2:	bf00      	nop
 8001cb4:	20000d40 	.word	0x20000d40

08001cb8 <vADCTCPTask>:
  }
}

//thanks Deepseek R1
static void vADCTCPTask(void *pvParameters)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b098      	sub	sp, #96	@ 0x60
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	6078      	str	r0, [r7, #4]
  Socket_t xSocket = FREERTOS_INVALID_SOCKET;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usHSADCData0);
 8001cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd0:	2218      	movs	r2, #24
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f021 f9c8 	bl	802306a <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001cda:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	b21a      	sxth	r2, r3
 8001ce2:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	061a      	lsls	r2, r3, #24
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	041b      	lsls	r3, r3, #16
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	23a8      	movs	r3, #168	@ 0xa8
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	4313      	orrs	r3, r2
 8001d04:	22c0      	movs	r2, #192	@ 0xc0
 8001d06:	4313      	orrs	r3, r2
 8001d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create socket and connect if not already connected */
    if (xSocket == FREERTOS_INVALID_SOCKET)
 8001d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d16:	d14b      	bne.n	8001db0 <vADCTCPTask+0xf8>
    {
      /* Create new socket */
      xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001d18:	2206      	movs	r2, #6
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f00c fd57 	bl	800e7d0 <FreeRTOS_socket>
 8001d22:	6578      	str	r0, [r7, #84]	@ 0x54
      if (xSocket == FREERTOS_INVALID_SOCKET)
 8001d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2a:	d103      	bne.n	8001d34 <vADCTCPTask+0x7c>
      {
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 8001d2c:	2064      	movs	r0, #100	@ 0x64
 8001d2e:	f002 fed9 	bl	8004ae4 <vTaskDelay>
        continue;
 8001d32:	e093      	b.n	8001e5c <vADCTCPTask+0x1a4>
      }

      /* Configure socket options */
      WinProperties_t xWinProperties;
      memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	2210      	movs	r2, #16
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f021 f994 	bl	802306a <memset>
      xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE;
 8001d42:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001d46:	613b      	str	r3, [r7, #16]
      xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE;
 8001d48:	230c      	movs	r3, #12
 8001d4a:	617b      	str	r3, [r7, #20]
      xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE;
 8001d4c:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001d50:	61bb      	str	r3, [r7, #24]
      xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE;
 8001d52:	230c      	movs	r3, #12
 8001d54:	61fb      	str	r3, [r7, #28]

      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_RCVTIMEO, &xTimeOut, sizeof(xTimeOut));
 8001d56:	2304      	movs	r3, #4
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	4b41      	ldr	r3, [pc, #260]	@ (8001e60 <vADCTCPTask+0x1a8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d62:	f00d fcef 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_SNDTIMEO, &xTimeOut, sizeof(xTimeOut));
 8001d66:	2304      	movs	r3, #4
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e60 <vADCTCPTask+0x1a8>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2100      	movs	r1, #0
 8001d70:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d72:	f00d fce7 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, &xWinProperties, sizeof(xWinProperties));
 8001d76:	f107 0310 	add.w	r3, r7, #16
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	9200      	str	r2, [sp, #0]
 8001d7e:	220d      	movs	r2, #13
 8001d80:	2100      	movs	r1, #0
 8001d82:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d84:	f00d fcde 	bl	800f744 <FreeRTOS_setsockopt>

      /* Attempt connection */
      if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) != 0)
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	2218      	movs	r2, #24
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d92:	f00e f875 	bl	800fe80 <FreeRTOS_connect>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d009      	beq.n	8001db0 <vADCTCPTask+0xf8>
      {
        FreeRTOS_closesocket(xSocket);
 8001d9c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d9e:	f00d f8db 	bl	800ef58 <FreeRTOS_closesocket>
        xSocket = FREERTOS_INVALID_SOCKET;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	657b      	str	r3, [r7, #84]	@ 0x54
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 8001da8:	2064      	movs	r0, #100	@ 0x64
 8001daa:	f002 fe9b 	bl	8004ae4 <vTaskDelay>
        continue;
 8001dae:	e055      	b.n	8001e5c <vADCTCPTask+0x1a4>
      }
    }

    /* Wait for data notification */
    xTaskNotifyWait(0x00, 0xffffffff, &ulCurrBuf, portMAX_DELAY);
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	9200      	str	r2, [sp, #0]
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f004 f819 	bl	8005df8 <xTaskGenericNotifyWait>

    /* Select buffer based on notification */
    pcBufferToTransmit = (ulCurrBuf & 1) ? usHSADCData1 : usHSADCData0;
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <vADCTCPTask+0x11c>
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <vADCTCPTask+0x1ac>)
 8001dd2:	e000      	b.n	8001dd6 <vADCTCPTask+0x11e>
 8001dd4:	4b24      	ldr	r3, [pc, #144]	@ (8001e68 <vADCTCPTask+0x1b0>)
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Send data through persistent connection */
    xAlreadyTransmitted = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 8001ddc:	e02b      	b.n	8001e36 <vADCTCPTask+0x17e>
    {
      BaseType_t xAvlSpace = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
      BaseType_t xBytesToSend = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	647b      	str	r3, [r7, #68]	@ 0x44
      uint8_t *pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4619      	mov	r1, r3
 8001dec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001dee:	f00e fb4e 	bl	801048e <FreeRTOS_get_tx_head>
 8001df2:	6438      	str	r0, [r7, #64]	@ 0x40

      if (!pucTCPZeroCopyStrmBuffer)
 8001df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d022      	beq.n	8001e40 <vADCTCPTask+0x188>
        break;

      xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace ? xAvlSpace : (xTotalLengthToSend - xAlreadyTransmitted);
 8001dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4293      	cmp	r3, r2
 8001e04:	bf28      	it	cs
 8001e06:	4613      	movcs	r3, r2
 8001e08:	647b      	str	r3, [r7, #68]	@ 0x44

      memcpy(pucTCPZeroCopyStrmBuffer,
 8001e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e0e:	4413      	add	r3, r2
 8001e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001e16:	f021 f81b 	bl	8022e50 <memcpy>
             (uint8_t *)pcBufferToTransmit + xAlreadyTransmitted,
             xBytesToSend);

      xBytesSent = FreeRTOS_send(xSocket, NULL, xBytesToSend, 0);
 8001e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001e22:	f00e fc3f 	bl	80106a4 <FreeRTOS_send>
 8001e26:	63f8      	str	r0, [r7, #60]	@ 0x3c

      if (xBytesSent >= 0)
 8001e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0a      	blt.n	8001e44 <vADCTCPTask+0x18c>
      {
        xAlreadyTransmitted += xBytesSent;
 8001e2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e32:	4413      	add	r3, r2
 8001e34:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 8001e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d8cf      	bhi.n	8001dde <vADCTCPTask+0x126>
 8001e3e:	e002      	b.n	8001e46 <vADCTCPTask+0x18e>
        break;
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <vADCTCPTask+0x18e>
      }
      else
      {
        break; // Send error occurred
 8001e44:	bf00      	nop
      }
    }

    /* Handle partial/failed transmission */
    if (xAlreadyTransmitted < xTotalLengthToSend)
 8001e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	f67f af60 	bls.w	8001d10 <vADCTCPTask+0x58>
    {
      FreeRTOS_closesocket(xSocket);
 8001e50:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001e52:	f00d f881 	bl	800ef58 <FreeRTOS_closesocket>
      xSocket = FREERTOS_INVALID_SOCKET;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (xSocket == FREERTOS_INVALID_SOCKET)
 8001e5c:	e758      	b.n	8001d10 <vADCTCPTask+0x58>
 8001e5e:	bf00      	nop
 8001e60:	080281e4 	.word	0x080281e4
 8001e64:	30010004 	.word	0x30010004
 8001e68:	30000004 	.word	0x30000004

08001e6c <vAuxADCTCPTask>:
    }
  }
}

static void vAuxADCTCPTask(void *pvParameters)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b098      	sub	sp, #96	@ 0x60
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
  Socket_t xSocket = FREERTOS_INVALID_SOCKET;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295
 8001e78:	657b      	str	r3, [r7, #84]	@ 0x54
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usGADCData0);
 8001e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e84:	2218      	movs	r2, #24
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f021 f8ee 	bl	802306a <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001e8e:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	061a      	lsls	r2, r3, #24
 8001eac:	2301      	movs	r3, #1
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	23a8      	movs	r3, #168	@ 0xa8
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	22c0      	movs	r2, #192	@ 0xc0
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create socket and connect if not already connected */
    if (xSocket == FREERTOS_INVALID_SOCKET)
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d14b      	bne.n	8001f64 <vAuxADCTCPTask+0xf8>
    {
      /* Create new socket */
      xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001ecc:	2206      	movs	r2, #6
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f00c fc7d 	bl	800e7d0 <FreeRTOS_socket>
 8001ed6:	6578      	str	r0, [r7, #84]	@ 0x54
      if (xSocket == FREERTOS_INVALID_SOCKET)
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d103      	bne.n	8001ee8 <vAuxADCTCPTask+0x7c>
      {
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 8001ee0:	2064      	movs	r0, #100	@ 0x64
 8001ee2:	f002 fdff 	bl	8004ae4 <vTaskDelay>
        continue;
 8001ee6:	e093      	b.n	8002010 <vAuxADCTCPTask+0x1a4>
      }

      /* Configure socket options */
      WinProperties_t xWinProperties;
      memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2210      	movs	r2, #16
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f021 f8ba 	bl	802306a <memset>
      xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE;
 8001ef6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001efa:	613b      	str	r3, [r7, #16]
      xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE;
 8001efc:	230c      	movs	r3, #12
 8001efe:	617b      	str	r3, [r7, #20]
      xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE;
 8001f00:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f04:	61bb      	str	r3, [r7, #24]
      xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE;
 8001f06:	230c      	movs	r3, #12
 8001f08:	61fb      	str	r3, [r7, #28]

      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_RCVTIMEO, &xTimeOut, sizeof(xTimeOut));
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	4b41      	ldr	r3, [pc, #260]	@ (8002014 <vAuxADCTCPTask+0x1a8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f16:	f00d fc15 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_SNDTIMEO, &xTimeOut, sizeof(xTimeOut));
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002014 <vAuxADCTCPTask+0x1a8>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	2100      	movs	r1, #0
 8001f24:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f26:	f00d fc0d 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, &xWinProperties, sizeof(xWinProperties));
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	2210      	movs	r2, #16
 8001f30:	9200      	str	r2, [sp, #0]
 8001f32:	220d      	movs	r2, #13
 8001f34:	2100      	movs	r1, #0
 8001f36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f38:	f00d fc04 	bl	800f744 <FreeRTOS_setsockopt>

      /* Attempt connection */
      if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) != 0)
 8001f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f40:	2218      	movs	r2, #24
 8001f42:	4619      	mov	r1, r3
 8001f44:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f46:	f00d ff9b 	bl	800fe80 <FreeRTOS_connect>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d009      	beq.n	8001f64 <vAuxADCTCPTask+0xf8>
      {
        FreeRTOS_closesocket(xSocket);
 8001f50:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f52:	f00d f801 	bl	800ef58 <FreeRTOS_closesocket>
        xSocket = FREERTOS_INVALID_SOCKET;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	657b      	str	r3, [r7, #84]	@ 0x54
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 8001f5c:	2064      	movs	r0, #100	@ 0x64
 8001f5e:	f002 fdc1 	bl	8004ae4 <vTaskDelay>
        continue;
 8001f62:	e055      	b.n	8002010 <vAuxADCTCPTask+0x1a4>
      }
    }

    /* Wait for data notification */
    xTaskNotifyWait(0x00, 0xffffffff, &ulCurrBuf, portMAX_DELAY);
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	9200      	str	r2, [sp, #0]
 8001f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f72:	2100      	movs	r1, #0
 8001f74:	2000      	movs	r0, #0
 8001f76:	f003 ff3f 	bl	8005df8 <xTaskGenericNotifyWait>

    /* Select buffer based on notification */
    pcBufferToTransmit = (ulCurrBuf & 1) ? usGADCData1 : usGADCData0;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <vAuxADCTCPTask+0x11c>
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <vAuxADCTCPTask+0x1ac>)
 8001f86:	e000      	b.n	8001f8a <vAuxADCTCPTask+0x11e>
 8001f88:	4b24      	ldr	r3, [pc, #144]	@ (800201c <vAuxADCTCPTask+0x1b0>)
 8001f8a:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Send data through persistent connection */
    xAlreadyTransmitted = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 8001f90:	e02b      	b.n	8001fea <vAuxADCTCPTask+0x17e>
    {
      BaseType_t xAvlSpace = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
      BaseType_t xBytesToSend = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	647b      	str	r3, [r7, #68]	@ 0x44
      uint8_t *pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fa2:	f00e fa74 	bl	801048e <FreeRTOS_get_tx_head>
 8001fa6:	6438      	str	r0, [r7, #64]	@ 0x40

      if (!pucTCPZeroCopyStrmBuffer)
 8001fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d022      	beq.n	8001ff4 <vAuxADCTCPTask+0x188>
        break;

      xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace ? xAvlSpace : (xTotalLengthToSend - xAlreadyTransmitted);
 8001fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	bf28      	it	cs
 8001fba:	4613      	movcs	r3, r2
 8001fbc:	647b      	str	r3, [r7, #68]	@ 0x44

      memcpy(pucTCPZeroCopyStrmBuffer,
 8001fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001fc2:	4413      	add	r3, r2
 8001fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001fca:	f020 ff41 	bl	8022e50 <memcpy>
             (uint8_t *)pcBufferToTransmit + xAlreadyTransmitted,
             xBytesToSend);

      xBytesSent = FreeRTOS_send(xSocket, NULL, xBytesToSend, 0);
 8001fce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001fd6:	f00e fb65 	bl	80106a4 <FreeRTOS_send>
 8001fda:	63f8      	str	r0, [r7, #60]	@ 0x3c

      if (xBytesSent >= 0)
 8001fdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0a      	blt.n	8001ff8 <vAuxADCTCPTask+0x18c>
      {
        xAlreadyTransmitted += xBytesSent;
 8001fe2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe6:	4413      	add	r3, r2
 8001fe8:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 8001fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d8cf      	bhi.n	8001f92 <vAuxADCTCPTask+0x126>
 8001ff2:	e002      	b.n	8001ffa <vAuxADCTCPTask+0x18e>
        break;
 8001ff4:	bf00      	nop
 8001ff6:	e000      	b.n	8001ffa <vAuxADCTCPTask+0x18e>
      }
      else
      {
        break; // Send error occurred
 8001ff8:	bf00      	nop
      }
    }

    /* Handle partial/failed transmission */
    if (xAlreadyTransmitted < xTotalLengthToSend)
 8001ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ffe:	429a      	cmp	r2, r3
 8002000:	f67f af60 	bls.w	8001ec4 <vAuxADCTCPTask+0x58>
    {
      FreeRTOS_closesocket(xSocket);
 8002004:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002006:	f00c ffa7 	bl	800ef58 <FreeRTOS_closesocket>
      xSocket = FREERTOS_INVALID_SOCKET;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (xSocket == FREERTOS_INVALID_SOCKET)
 8002010:	e758      	b.n	8001ec4 <vAuxADCTCPTask+0x58>
 8002012:	bf00      	nop
 8002014:	080281e8 	.word	0x080281e8
 8002018:	30028004 	.word	0x30028004
 800201c:	30020004 	.word	0x30020004

08002020 <vTCADCTCPTask>:
    }
  }
}

static void vTCADCTCPTask(void *pvParameters)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b098      	sub	sp, #96	@ 0x60
 8002024:	af02      	add	r7, sp, #8
 8002026:	6078      	str	r0, [r7, #4]
  Socket_t xSocket = FREERTOS_INVALID_SOCKET;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	657b      	str	r3, [r7, #84]	@ 0x54
  static const TickType_t xTimeOut = pdMS_TO_TICKS(500);
  struct freertos_sockaddr xRemoteAddress;
  BaseType_t xAlreadyTransmitted, xBytesSent;
  char *pcBufferToTransmit;
  const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t ulCurrBuf;

  /* Remote address setup */
  memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8002032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002036:	2218      	movs	r2, #24
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f021 f815 	bl	802306a <memset>
  xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8002040:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b21b      	sxth	r3, r3
 8002052:	4313      	orrs	r3, r2
 8002054:	b21b      	sxth	r3, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	84fb      	strh	r3, [r7, #38]	@ 0x26
  xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 800205a:	2303      	movs	r3, #3
 800205c:	061a      	lsls	r2, r3, #24
 800205e:	2301      	movs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	431a      	orrs	r2, r3
 8002064:	23a8      	movs	r3, #168	@ 0xa8
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4313      	orrs	r3, r2
 800206a:	22c0      	movs	r2, #192	@ 0xc0
 800206c:	4313      	orrs	r3, r2
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8002070:	2302      	movs	r3, #2
 8002072:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  for (;;)
  {
    /* Create socket and connect if not already connected */
    if (xSocket == FREERTOS_INVALID_SOCKET)
 8002076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d14b      	bne.n	8002116 <vTCADCTCPTask+0xf6>
    {
      /* Create new socket */
      xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 800207e:	2206      	movs	r2, #6
 8002080:	2101      	movs	r1, #1
 8002082:	2002      	movs	r0, #2
 8002084:	f00c fba4 	bl	800e7d0 <FreeRTOS_socket>
 8002088:	6578      	str	r0, [r7, #84]	@ 0x54
      if (xSocket == FREERTOS_INVALID_SOCKET)
 800208a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d103      	bne.n	800209a <vTCADCTCPTask+0x7a>
      {
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 8002092:	2064      	movs	r0, #100	@ 0x64
 8002094:	f002 fd26 	bl	8004ae4 <vTaskDelay>
        continue;
 8002098:	e093      	b.n	80021c2 <vTCADCTCPTask+0x1a2>
      }

      /* Configure socket options */
      WinProperties_t xWinProperties;
      memset(&xWinProperties, '\0', sizeof xWinProperties);
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2210      	movs	r2, #16
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f020 ffe1 	bl	802306a <memset>
      xWinProperties.lTxBufSize = ipconfigIPERF_TX_BUFSIZE;
 80020a8:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80020ac:	613b      	str	r3, [r7, #16]
      xWinProperties.lTxWinSize = ipconfigIPERF_TX_WINSIZE;
 80020ae:	230c      	movs	r3, #12
 80020b0:	617b      	str	r3, [r7, #20]
      xWinProperties.lRxBufSize = ipconfigIPERF_RX_BUFSIZE;
 80020b2:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80020b6:	61bb      	str	r3, [r7, #24]
      xWinProperties.lRxWinSize = ipconfigIPERF_RX_WINSIZE;
 80020b8:	230c      	movs	r3, #12
 80020ba:	61fb      	str	r3, [r7, #28]

      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_RCVTIMEO, &xTimeOut, sizeof(xTimeOut));
 80020bc:	2304      	movs	r3, #4
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <vTCADCTCPTask+0x1a4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80020c8:	f00d fb3c 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_SNDTIMEO, &xTimeOut, sizeof(xTimeOut));
 80020cc:	2304      	movs	r3, #4
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4b3c      	ldr	r3, [pc, #240]	@ (80021c4 <vTCADCTCPTask+0x1a4>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	2100      	movs	r1, #0
 80020d6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80020d8:	f00d fb34 	bl	800f744 <FreeRTOS_setsockopt>
      FreeRTOS_setsockopt(xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, &xWinProperties, sizeof(xWinProperties));
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2210      	movs	r2, #16
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	220d      	movs	r2, #13
 80020e6:	2100      	movs	r1, #0
 80020e8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80020ea:	f00d fb2b 	bl	800f744 <FreeRTOS_setsockopt>

      /* Attempt connection */
      if (FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) != 0)
 80020ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f2:	2218      	movs	r2, #24
 80020f4:	4619      	mov	r1, r3
 80020f6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80020f8:	f00d fec2 	bl	800fe80 <FreeRTOS_connect>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <vTCADCTCPTask+0xf6>
      {
        FreeRTOS_closesocket(xSocket);
 8002102:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002104:	f00c ff28 	bl	800ef58 <FreeRTOS_closesocket>
        xSocket = FREERTOS_INVALID_SOCKET;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	657b      	str	r3, [r7, #84]	@ 0x54
        vTaskDelay(pdMS_TO_TICKS(100)); // Wait before retry
 800210e:	2064      	movs	r0, #100	@ 0x64
 8002110:	f002 fce8 	bl	8004ae4 <vTaskDelay>
        continue;
 8002114:	e055      	b.n	80021c2 <vTCADCTCPTask+0x1a2>
      }
    }

    /* Wait for data notification */
    xTaskNotifyWait(0x00, 0xffffffff, &ulCurrBuf, portMAX_DELAY);
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	f04f 32ff 	mov.w	r2, #4294967295
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	2100      	movs	r1, #0
 8002126:	2000      	movs	r0, #0
 8002128:	f003 fe66 	bl	8005df8 <xTaskGenericNotifyWait>

    /* Select buffer based on notification */
    pcBufferToTransmit = (ulCurrBuf & 1) ? usTCADCData1 : usTCADCData0;
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <vTCADCTCPTask+0x11a>
 8002136:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <vTCADCTCPTask+0x1a8>)
 8002138:	e000      	b.n	800213c <vTCADCTCPTask+0x11c>
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <vTCADCTCPTask+0x1ac>)
 800213c:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Send data through persistent connection */
    xAlreadyTransmitted = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 8002142:	e02b      	b.n	800219c <vTCADCTCPTask+0x17c>
    {
      BaseType_t xAvlSpace = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
      BaseType_t xBytesToSend = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	647b      	str	r3, [r7, #68]	@ 0x44
      uint8_t *pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head(xSocket, &xAvlSpace);
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	4619      	mov	r1, r3
 8002152:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002154:	f00e f99b 	bl	801048e <FreeRTOS_get_tx_head>
 8002158:	6438      	str	r0, [r7, #64]	@ 0x40

      if (!pucTCPZeroCopyStrmBuffer)
 800215a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800215c:	2b00      	cmp	r3, #0
 800215e:	d022      	beq.n	80021a6 <vTCADCTCPTask+0x186>
        break;

      xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace ? xAvlSpace : (xTotalLengthToSend - xAlreadyTransmitted);
 8002160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4293      	cmp	r3, r2
 800216a:	bf28      	it	cs
 800216c:	4613      	movcs	r3, r2
 800216e:	647b      	str	r3, [r7, #68]	@ 0x44

      memcpy(pucTCPZeroCopyStrmBuffer,
 8002170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002172:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002174:	4413      	add	r3, r2
 8002176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002178:	4619      	mov	r1, r3
 800217a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800217c:	f020 fe68 	bl	8022e50 <memcpy>
             (uint8_t *)pcBufferToTransmit + xAlreadyTransmitted,
             xBytesToSend);

      xBytesSent = FreeRTOS_send(xSocket, NULL, xBytesToSend, 0);
 8002180:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002182:	2300      	movs	r3, #0
 8002184:	2100      	movs	r1, #0
 8002186:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002188:	f00e fa8c 	bl	80106a4 <FreeRTOS_send>
 800218c:	63f8      	str	r0, [r7, #60]	@ 0x3c

      if (xBytesSent >= 0)
 800218e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <vTCADCTCPTask+0x18a>
      {
        xAlreadyTransmitted += xBytesSent;
 8002194:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002198:	4413      	add	r3, r2
 800219a:	653b      	str	r3, [r7, #80]	@ 0x50
    while (xAlreadyTransmitted < xTotalLengthToSend)
 800219c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800219e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8cf      	bhi.n	8002144 <vTCADCTCPTask+0x124>
 80021a4:	e002      	b.n	80021ac <vTCADCTCPTask+0x18c>
        break;
 80021a6:	bf00      	nop
 80021a8:	e000      	b.n	80021ac <vTCADCTCPTask+0x18c>
      }
      else
      {
        break; // Send error occurred
 80021aa:	bf00      	nop
      }
    }

    /* Handle partial/failed transmission */
    if (xAlreadyTransmitted < xTotalLengthToSend)
 80021ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021b0:	429a      	cmp	r2, r3
 80021b2:	f67f af60 	bls.w	8002076 <vTCADCTCPTask+0x56>
    {
      FreeRTOS_closesocket(xSocket);
 80021b6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80021b8:	f00c fece 	bl	800ef58 <FreeRTOS_closesocket>
      xSocket = FREERTOS_INVALID_SOCKET;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295
 80021c0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (xSocket == FREERTOS_INVALID_SOCKET)
 80021c2:	e758      	b.n	8002076 <vTCADCTCPTask+0x56>
 80021c4:	080281ec 	.word	0x080281ec
 80021c8:	30030088 	.word	0x30030088
 80021cc:	30030008 	.word	0x30030008

080021d0 <vCommandServerTask>:
    }
  }
}

void vCommandServerTask(void *pvParameters)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b094      	sub	sp, #80	@ 0x50
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	6078      	str	r0, [r7, #4]
  struct freertos_sockaddr xClient, xBindAddress;
  Socket_t xListeningSocket, xConnectedSocket;
  socklen_t xSize = sizeof(xClient);
 80021d8:	2318      	movs	r3, #24
 80021da:	60bb      	str	r3, [r7, #8]
  static const TickType_t xReceiveTimeOut = pdMS_TO_TICKS(500);
  const BaseType_t xBacklog = 20;
 80021dc:	2314      	movs	r3, #20
 80021de:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Attempt to open the socket. */
  xListeningSocket = FreeRTOS_socket(FREERTOS_AF_INET4,    /* Or FREERTOS_AF_INET6 for IPv6. */
 80021e0:	2206      	movs	r2, #6
 80021e2:	2101      	movs	r1, #1
 80021e4:	2002      	movs	r0, #2
 80021e6:	f00c faf3 	bl	800e7d0 <FreeRTOS_socket>
 80021ea:	6438      	str	r0, [r7, #64]	@ 0x40
                                     FREERTOS_SOCK_STREAM, /* SOCK_STREAM for TCP. */
                                     FREERTOS_IPPROTO_TCP);

  /* Check the socket was created. */
  configASSERT(xListeningSocket != FREERTOS_INVALID_SOCKET);
 80021ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d104      	bne.n	80021fe <vCommandServerTask+0x2e>
 80021f4:	f240 7192 	movw	r1, #1938	@ 0x792
 80021f8:	4825      	ldr	r0, [pc, #148]	@ (8002290 <vCommandServerTask+0xc0>)
 80021fa:	f7ff fc47 	bl	8001a8c <vAssertCalled>
be used with FreeRTOS_setsockopt() to change the sliding window size from
its default then do it here! (see the FreeRTOS_setsockopt()
documentation. */

  /* Set a time out so accept() will just wait for a connection. */
  FreeRTOS_setsockopt(xListeningSocket,
 80021fe:	2304      	movs	r3, #4
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4b24      	ldr	r3, [pc, #144]	@ (8002294 <vCommandServerTask+0xc4>)
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800220a:	f00d fa9b 	bl	800f744 <FreeRTOS_setsockopt>
                      FREERTOS_SO_RCVTIMEO,
                      &xReceiveTimeOut,
                      sizeof(xReceiveTimeOut));

  /* Set the listening port to 10000. */
  memset(&xBindAddress, 0, sizeof(xBindAddress));
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2218      	movs	r2, #24
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f020 ff27 	bl	802306a <memset>
  xBindAddress.sin_port = usCommandPort;
 800221c:	f241 3389 	movw	r3, #5001	@ 0x1389
 8002220:	81fb      	strh	r3, [r7, #14]
  xBindAddress.sin_port = FreeRTOS_htons(xBindAddress.sin_port);
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	b21a      	sxth	r2, r3
 8002228:	89fb      	ldrh	r3, [r7, #14]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	b29b      	uxth	r3, r3
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21b      	sxth	r3, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	81fb      	strh	r3, [r7, #14]
  xBindAddress.sin_family = FREERTOS_AF_INET4; /* FREERTOS_AF_INET6 to be used for IPv6 */
 8002238:	2302      	movs	r3, #2
 800223a:	737b      	strb	r3, [r7, #13]

  /* Bind the socket to the port that the client RTOS task will send to. */
  FreeRTOS_bind(xListeningSocket, &xBindAddress, sizeof(xBindAddress));
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2218      	movs	r2, #24
 8002242:	4619      	mov	r1, r3
 8002244:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002246:	f00c fcb3 	bl	800ebb0 <FreeRTOS_bind>

  /* Set the socket into a listening state so it can accept connections.
The maximum number of simultaneous connections is limited to 20. */
  FreeRTOS_listen(xListeningSocket, xBacklog);
 800224a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800224c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800224e:	f00e fa67 	bl	8010720 <FreeRTOS_listen>

  for (;;)
  {
    /* Wait for incoming connections. */
    xConnectedSocket = FreeRTOS_accept(xListeningSocket, &xClient, &xSize);
 8002252:	f107 0208 	add.w	r2, r7, #8
 8002256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800225a:	4619      	mov	r1, r3
 800225c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800225e:	f00d ff31 	bl	80100c4 <FreeRTOS_accept>
 8002262:	63f8      	str	r0, [r7, #60]	@ 0x3c
    configASSERT(xConnectedSocket != FREERTOS_INVALID_SOCKET);
 8002264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d104      	bne.n	8002276 <vCommandServerTask+0xa6>
 800226c:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8002270:	4807      	ldr	r0, [pc, #28]	@ (8002290 <vCommandServerTask+0xc0>)
 8002272:	f7ff fc0b 	bl	8001a8c <vAssertCalled>

    /* Spawn a RTOS task to handle the connection. */
    xTaskCreate(prvCommandHandlerTask,
 8002276:	2300      	movs	r3, #0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002280:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8002284:	4904      	ldr	r1, [pc, #16]	@ (8002298 <vCommandServerTask+0xc8>)
 8002286:	4805      	ldr	r0, [pc, #20]	@ (800229c <vCommandServerTask+0xcc>)
 8002288:	f002 fa4e 	bl	8004728 <xTaskCreate>
    xConnectedSocket = FreeRTOS_accept(xListeningSocket, &xClient, &xSize);
 800228c:	e7e1      	b.n	8002252 <vCommandServerTask+0x82>
 800228e:	bf00      	nop
 8002290:	08024c48 	.word	0x08024c48
 8002294:	080281f0 	.word	0x080281f0
 8002298:	08024ce0 	.word	0x08024ce0
 800229c:	080022a1 	.word	0x080022a1

080022a0 <prvCommandHandlerTask>:
                NULL);
  }
}

static void prvCommandHandlerTask(void *pvParameters)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  static char cRxedData[CMD_BUFFER_SIZE];
  BaseType_t lBytesReceived;

  /* It is assumed the socket has already been created and connected before
being passed into this RTOS task using the RTOS task's parameter. */
  xSocket = (Socket_t)pvParameters;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60fb      	str	r3, [r7, #12]

  for (;;)
  {
    /* Receive another block of data into the cRxedData buffer. */
    lBytesReceived = FreeRTOS_recv(xSocket, &cRxedData, CMD_BUFFER_SIZE, 0);
 80022ac:	2300      	movs	r3, #0
 80022ae:	2280      	movs	r2, #128	@ 0x80
 80022b0:	4973      	ldr	r1, [pc, #460]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f00e f856 	bl	8010364 <FreeRTOS_recv>
 80022b8:	60b8      	str	r0, [r7, #8]

    if (lBytesReceived > 0)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f340 80bf 	ble.w	8002440 <prvCommandHandlerTask+0x1a0>
    {
      /* Data was received, process it here. */
      // prvProcessData( cRxedData, lBytesReceived );
      cRxedData[lBytesReceived] = 0; // ensure null terminated string
 80022c2:	4a6f      	ldr	r2, [pc, #444]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4413      	add	r3, r2
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
      if (strncmp(cRxedData, "INIT", 4) == 0)
 80022cc:	2204      	movs	r2, #4
 80022ce:	496d      	ldr	r1, [pc, #436]	@ (8002484 <prvCommandHandlerTask+0x1e4>)
 80022d0:	486b      	ldr	r0, [pc, #428]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 80022d2:	f021 fdc5 	bl	8023e60 <strncmp>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d116      	bne.n	800230a <prvCommandHandlerTask+0x6a>
      {
        FreeRTOS_printf(("Received Init Command\n"));
 80022dc:	486a      	ldr	r0, [pc, #424]	@ (8002488 <prvCommandHandlerTask+0x1e8>)
 80022de:	f020 fb9b 	bl	8022a18 <lUDPLoggingPrintf>
        HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2120      	movs	r1, #32
 80022e6:	4869      	ldr	r0, [pc, #420]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80022e8:	f01a fdb4 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2104      	movs	r1, #4
 80022f0:	4866      	ldr	r0, [pc, #408]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80022f2:	f01a fdaf 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2110      	movs	r1, #16
 80022fa:	4864      	ldr	r0, [pc, #400]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80022fc:	f01a fdaa 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2108      	movs	r1, #8
 8002304:	4861      	ldr	r0, [pc, #388]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002306:	f01a fda5 	bl	801ce54 <HAL_GPIO_WritePin>
      }
      if (strncmp(cRxedData, "STOP", 4) == 0)
 800230a:	2204      	movs	r2, #4
 800230c:	4960      	ldr	r1, [pc, #384]	@ (8002490 <prvCommandHandlerTask+0x1f0>)
 800230e:	485c      	ldr	r0, [pc, #368]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 8002310:	f021 fda6 	bl	8023e60 <strncmp>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <prvCommandHandlerTask+0xa8>
      {
        FreeRTOS_printf(("Received Stop Command\n"));
 800231a:	485e      	ldr	r0, [pc, #376]	@ (8002494 <prvCommandHandlerTask+0x1f4>)
 800231c:	f020 fb7c 	bl	8022a18 <lUDPLoggingPrintf>
        HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2120      	movs	r1, #32
 8002324:	4859      	ldr	r0, [pc, #356]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002326:	f01a fd95 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2104      	movs	r1, #4
 800232e:	4857      	ldr	r0, [pc, #348]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002330:	f01a fd90 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2110      	movs	r1, #16
 8002338:	4854      	ldr	r0, [pc, #336]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 800233a:	f01a fd8b 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2108      	movs	r1, #8
 8002342:	4852      	ldr	r0, [pc, #328]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002344:	f01a fd86 	bl	801ce54 <HAL_GPIO_WritePin>
      }
      if (strncmp(cRxedData, "HEAT", 4) == 0)
 8002348:	2204      	movs	r2, #4
 800234a:	4953      	ldr	r1, [pc, #332]	@ (8002498 <prvCommandHandlerTask+0x1f8>)
 800234c:	484c      	ldr	r0, [pc, #304]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 800234e:	f021 fd87 	bl	8023e60 <strncmp>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d117      	bne.n	8002388 <prvCommandHandlerTask+0xe8>
      {
        FreeRTOS_printf(("Received Heat Command\n"));
 8002358:	4850      	ldr	r0, [pc, #320]	@ (800249c <prvCommandHandlerTask+0x1fc>)
 800235a:	f020 fb5d 	bl	8022a18 <lUDPLoggingPrintf>
//        GPIOE->BSRR = DUT_GATE_SEL_Pin << 16 | DUT_VICTRL_SEL_Pin << 16 | DUT_HVDC_ENABLE_Pin;
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2104      	movs	r1, #4
 8002362:	484a      	ldr	r0, [pc, #296]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002364:	f01a fd76 	bl	801ce54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2110      	movs	r1, #16
 800236c:	4847      	ldr	r0, [pc, #284]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 800236e:	f01a fd71 	bl	801ce54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8002372:	2200      	movs	r2, #0
 8002374:	2120      	movs	r1, #32
 8002376:	4845      	ldr	r0, [pc, #276]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002378:	f01a fd6c 	bl	801ce54 <HAL_GPIO_WritePin>
	ulSevenSegD1 |= 1 << 5; // turn first digit DP on
 800237c:	4b48      	ldr	r3, [pc, #288]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f043 0320 	orr.w	r3, r3, #32
 8002384:	4a46      	ldr	r2, [pc, #280]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 8002386:	6013      	str	r3, [r2, #0]
      }
      if (strncmp(cRxedData, "COOLA", 5) == 0)
 8002388:	2205      	movs	r2, #5
 800238a:	4946      	ldr	r1, [pc, #280]	@ (80024a4 <prvCommandHandlerTask+0x204>)
 800238c:	483c      	ldr	r0, [pc, #240]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 800238e:	f021 fd67 	bl	8023e60 <strncmp>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d13d      	bne.n	8002414 <prvCommandHandlerTask+0x174>
      {
        FreeRTOS_printf(("Received Advanced Cool Command\n"));
 8002398:	4843      	ldr	r0, [pc, #268]	@ (80024a8 <prvCommandHandlerTask+0x208>)
 800239a:	f020 fb3d 	bl	8022a18 <lUDPLoggingPrintf>
//        GPIOE->BSRR = DUT_GATE_SEL_Pin | DUT_VICTRL_SEL_Pin | DUT_HVDC_ENABLE_Pin << 16;
        //this sequence helps to get better results in terms of charge injection
        taskENTER_CRITICAL();
 800239e:	f004 fad7 	bl	8006950 <vPortEnterCritical>
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2104      	movs	r1, #4
 80023a6:	4839      	ldr	r0, [pc, #228]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80023a8:	f01a fd54 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2120      	movs	r1, #32
 80023b0:	4836      	ldr	r0, [pc, #216]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80023b2:	f01a fd4f 	bl	801ce54 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2110      	movs	r1, #16
 80023ba:	4834      	ldr	r0, [pc, #208]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80023bc:	f01a fd4a 	bl	801ce54 <HAL_GPIO_WritePin>
        for(int i = 0; i < 5000; i++){
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e003      	b.n	80023ce <prvCommandHandlerTask+0x12e>
	    asm("nop");
 80023c6:	bf00      	nop
        for(int i = 0; i < 5000; i++){
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	3301      	adds	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80023d4:	4293      	cmp	r3, r2
 80023d6:	ddf6      	ble.n	80023c6 <prvCommandHandlerTask+0x126>
	}
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_SET);
 80023d8:	2201      	movs	r2, #1
 80023da:	2104      	movs	r1, #4
 80023dc:	482b      	ldr	r0, [pc, #172]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 80023de:	f01a fd39 	bl	801ce54 <HAL_GPIO_WritePin>
        for(int i = 0; i < 5000; i++){
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e003      	b.n	80023f0 <prvCommandHandlerTask+0x150>
            asm("nop");
 80023e8:	bf00      	nop
        for(int i = 0; i < 5000; i++){
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	3301      	adds	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80023f6:	4293      	cmp	r3, r2
 80023f8:	ddf6      	ble.n	80023e8 <prvCommandHandlerTask+0x148>
        }
        HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2104      	movs	r1, #4
 80023fe:	4823      	ldr	r0, [pc, #140]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 8002400:	f01a fd28 	bl	801ce54 <HAL_GPIO_WritePin>
        taskEXIT_CRITICAL();
 8002404:	f004 fad0 	bl	80069a8 <vPortExitCritical>
        ulSevenSegD1 &= ~(1 << 5); // turn first digit DP off
 8002408:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 0320 	bic.w	r3, r3, #32
 8002410:	4a23      	ldr	r2, [pc, #140]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 8002412:	6013      	str	r3, [r2, #0]
      }
      if (strncmp(cRxedData, "COOLB", 5) == 0)
 8002414:	2205      	movs	r2, #5
 8002416:	4925      	ldr	r1, [pc, #148]	@ (80024ac <prvCommandHandlerTask+0x20c>)
 8002418:	4819      	ldr	r0, [pc, #100]	@ (8002480 <prvCommandHandlerTask+0x1e0>)
 800241a:	f021 fd21 	bl	8023e60 <strncmp>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f af43 	bne.w	80022ac <prvCommandHandlerTask+0xc>
      {
	FreeRTOS_printf(("Received Basic Cool Command\n"));
 8002426:	4822      	ldr	r0, [pc, #136]	@ (80024b0 <prvCommandHandlerTask+0x210>)
 8002428:	f020 faf6 	bl	8022a18 <lUDPLoggingPrintf>
        GPIOE->BSRR = DUT_GATE_SEL_Pin | DUT_VICTRL_SEL_Pin | DUT_HVDC_ENABLE_Pin << 16;
 800242c:	4b17      	ldr	r3, [pc, #92]	@ (800248c <prvCommandHandlerTask+0x1ec>)
 800242e:	4a21      	ldr	r2, [pc, #132]	@ (80024b4 <prvCommandHandlerTask+0x214>)
 8002430:	619a      	str	r2, [r3, #24]
	ulSevenSegD1 &= ~(1 << 5); // turn first digit DP off
 8002432:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0320 	bic.w	r3, r3, #32
 800243a:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <prvCommandHandlerTask+0x200>)
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e735      	b.n	80022ac <prvCommandHandlerTask+0xc>
      }
    }
    else if (lBytesReceived == 0)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f43f af32 	beq.w	80022ac <prvCommandHandlerTask+0xc>
    }
    else
    {
      /* Error (maybe the connected socket already shut down the socket?).
   Attempt graceful shutdown. */
      FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8002448:	2102      	movs	r1, #2
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f00e f9d9 	bl	8010802 <FreeRTOS_shutdown>
      break;
 8002450:	bf00      	nop

  /* The RTOS task will get here if an error is received on a read. Ensure the
socket has shut down (indicated by FreeRTOS\_recv() returning a -pdFREERTOS\_ERRNO\_EINVAL
error before closing the socket). */

  while (FreeRTOS_recv(xSocket, &usZero, 1, 0) >= 0)
 8002452:	e002      	b.n	800245a <prvCommandHandlerTask+0x1ba>
  {
    /* Wait for shutdown to complete. If a receive block time is used then
       this delay will not be necessary as FreeRTOS\_recv() will place the RTOS task
       into the Blocked state anyway. */
    vTaskDelay(pdTICKS_TO_MS(1));
 8002454:	2001      	movs	r0, #1
 8002456:	f002 fb45 	bl	8004ae4 <vTaskDelay>
  while (FreeRTOS_recv(xSocket, &usZero, 1, 0) >= 0)
 800245a:	2300      	movs	r3, #0
 800245c:	2201      	movs	r2, #1
 800245e:	4916      	ldr	r1, [pc, #88]	@ (80024b8 <prvCommandHandlerTask+0x218>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f00d ff7f 	bl	8010364 <FreeRTOS_recv>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	daf3      	bge.n	8002454 <prvCommandHandlerTask+0x1b4>
    /* Note - real applications should implement a timeout here, not just
       loop forever. */
  }

  /* Shutdown is complete and the socket can be safely closed. */
  FreeRTOS_closesocket(xSocket);
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f00c fd73 	bl	800ef58 <FreeRTOS_closesocket>

  /* Must not drop off the end of the RTOS task - delete the RTOS task. */
  vTaskDelete(NULL);
 8002472:	2000      	movs	r0, #0
 8002474:	f002 fa98 	bl	80049a8 <vTaskDelete>
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000d60 	.word	0x20000d60
 8002484:	08024cf0 	.word	0x08024cf0
 8002488:	08024cf8 	.word	0x08024cf8
 800248c:	58021000 	.word	0x58021000
 8002490:	08024d10 	.word	0x08024d10
 8002494:	08024d18 	.word	0x08024d18
 8002498:	08024d30 	.word	0x08024d30
 800249c:	08024d38 	.word	0x08024d38
 80024a0:	30030108 	.word	0x30030108
 80024a4:	08024d50 	.word	0x08024d50
 80024a8:	08024d58 	.word	0x08024d58
 80024ac:	08024d78 	.word	0x08024d78
 80024b0:	08024d80 	.word	0x08024d80
 80024b4:	00040030 	.word	0x00040030
 80024b8:	30000000 	.word	0x30000000

080024bc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024c2:	463b      	mov	r3, r7
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80024ce:	f018 fb91 	bl	801abf4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 80024da:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 80024de:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80024e0:	2312      	movs	r3, #18
 80024e2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80024ec:	2303      	movs	r3, #3
 80024ee:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002500:	463b      	mov	r3, r7
 8002502:	4618      	mov	r0, r3
 8002504:	f018 fbae 	bl	801ac64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002508:	2301      	movs	r3, #1
 800250a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800250c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002510:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002512:	463b      	mov	r3, r7
 8002514:	4618      	mov	r0, r3
 8002516:	f018 fba5 	bl	801ac64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800251a:	2004      	movs	r0, #4
 800251c:	f018 fb82 	bl	801ac24 <HAL_MPU_Enable>

}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
}
 800252e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <Error_Handler+0x8>

08002534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_MspInit+0x30>)
 800253c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002540:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <HAL_MspInit+0x30>)
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_MspInit+0x30>)
 800254c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	58024400 	.word	0x58024400

08002568 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08e      	sub	sp, #56	@ 0x38
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a61      	ldr	r2, [pc, #388]	@ (800270c <HAL_ETH_MspInit+0x1a4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	f040 80bb 	bne.w	8002702 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800258c:	4b60      	ldr	r3, [pc, #384]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 800258e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002592:	4a5f      	ldr	r2, [pc, #380]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 8002594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002598:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800259c:	4b5c      	ldr	r3, [pc, #368]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 800259e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80025aa:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025b0:	4a57      	ldr	r2, [pc, #348]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80025ba:	4b55      	ldr	r3, [pc, #340]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	61fb      	str	r3, [r7, #28]
 80025c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80025c8:	4b51      	ldr	r3, [pc, #324]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025ce:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80025d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ec:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025f6:	4b46      	ldr	r3, [pc, #280]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 80025f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b42      	ldr	r3, [pc, #264]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800260a:	4a41      	ldr	r2, [pc, #260]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002614:	4b3e      	ldr	r3, [pc, #248]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 8002616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b3b      	ldr	r3, [pc, #236]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 8002624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002628:	4a39      	ldr	r2, [pc, #228]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002632:	4b37      	ldr	r3, [pc, #220]	@ (8002710 <HAL_ETH_MspInit+0x1a8>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002640:	2302      	movs	r3, #2
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264c:	2303      	movs	r3, #3
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002650:	230b      	movs	r3, #11
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	482e      	ldr	r0, [pc, #184]	@ (8002714 <HAL_ETH_MspInit+0x1ac>)
 800265c:	f01a fa4a 	bl	801caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002660:	2306      	movs	r3, #6
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002670:	230b      	movs	r3, #11
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002678:	4619      	mov	r1, r3
 800267a:	4827      	ldr	r0, [pc, #156]	@ (8002718 <HAL_ETH_MspInit+0x1b0>)
 800267c:	f01a fa3a 	bl	801caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002690:	230b      	movs	r3, #11
 8002692:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	481f      	ldr	r0, [pc, #124]	@ (8002718 <HAL_ETH_MspInit+0x1b0>)
 800269c:	f01a fa2a 	bl	801caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80026a0:	2330      	movs	r3, #48	@ 0x30
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026b0:	230b      	movs	r3, #11
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4816      	ldr	r0, [pc, #88]	@ (8002714 <HAL_ETH_MspInit+0x1ac>)
 80026bc:	f01a fa1a 	bl	801caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80026c0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80026c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026d2:	230b      	movs	r3, #11
 80026d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	480f      	ldr	r0, [pc, #60]	@ (800271c <HAL_ETH_MspInit+0x1b4>)
 80026de:	f01a fa09 	bl	801caf4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2105      	movs	r1, #5
 80026e6:	203d      	movs	r0, #61	@ 0x3d
 80026e8:	f018 fa4f 	bl	801ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80026ec:	203d      	movs	r0, #61	@ 0x3d
 80026ee:	f018 fa66 	bl	801abbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2105      	movs	r1, #5
 80026f6:	203e      	movs	r0, #62	@ 0x3e
 80026f8:	f018 fa47 	bl	801ab8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80026fc:	203e      	movs	r0, #62	@ 0x3e
 80026fe:	f018 fa5e 	bl	801abbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002702:	bf00      	nop
 8002704:	3738      	adds	r7, #56	@ 0x38
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40028000 	.word	0x40028000
 8002710:	58024400 	.word	0x58024400
 8002714:	58020800 	.word	0x58020800
 8002718:	58020000 	.word	0x58020000
 800271c:	58020400 	.word	0x58020400

08002720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b0ba      	sub	sp, #232	@ 0xe8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	22c0      	movs	r2, #192	@ 0xc0
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f020 fc92 	bl	802306a <memset>
  if(hi2c->Instance==I2C4)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_I2C_MspInit+0xc8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d146      	bne.n	80027de <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002750:	f04f 0210 	mov.w	r2, #16
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f01b fce2 	bl	801e130 <HAL_RCCEx_PeriphCLKConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002772:	f7ff fed9 	bl	8002528 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002776:	4b1d      	ldr	r3, [pc, #116]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 8002778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002786:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002794:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002798:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80027ae:	2304      	movs	r3, #4
 80027b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027b8:	4619      	mov	r1, r3
 80027ba:	480d      	ldr	r0, [pc, #52]	@ (80027f0 <HAL_I2C_MspInit+0xd0>)
 80027bc:	f01a f99a 	bl	801caf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 80027c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_I2C_MspInit+0xcc>)
 80027d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80027de:	bf00      	nop
 80027e0:	37e8      	adds	r7, #232	@ 0xe8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58001c00 	.word	0x58001c00
 80027ec:	58024400 	.word	0x58024400
 80027f0:	58020c00 	.word	0x58020c00

080027f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0b4      	sub	sp, #208	@ 0xd0
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027fc:	f107 0310 	add.w	r3, r7, #16
 8002800:	22c0      	movs	r2, #192	@ 0xc0
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f020 fc30 	bl	802306a <memset>
  if(hrng->Instance==RNG)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <HAL_RNG_MspInit+0x6c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d121      	bne.n	8002858 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002814:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	f107 0310 	add.w	r3, r7, #16
 800282a:	4618      	mov	r0, r3
 800282c:	f01b fc80 	bl	801e130 <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002836:	f7ff fe77 	bl	8002528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <HAL_RNG_MspInit+0x70>)
 800283c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002840:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <HAL_RNG_MspInit+0x70>)
 8002842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002846:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RNG_MspInit+0x70>)
 800284c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002858:	bf00      	nop
 800285a:	37d0      	adds	r7, #208	@ 0xd0
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	48021800 	.word	0x48021800
 8002864:	58024400 	.word	0x58024400

08002868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b090      	sub	sp, #64	@ 0x40
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a88      	ldr	r2, [pc, #544]	@ (8002aa8 <HAL_SPI_MspInit+0x240>)
 8002886:	4293      	cmp	r3, r2
 8002888:	f040 8083 	bne.w	8002992 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800288c:	4b87      	ldr	r3, [pc, #540]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 800288e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002892:	4a86      	ldr	r2, [pc, #536]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 8002894:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002898:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800289c:	4b83      	ldr	r3, [pc, #524]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 800289e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b80      	ldr	r3, [pc, #512]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b0:	4a7e      	ldr	r2, [pc, #504]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b78      	ldr	r3, [pc, #480]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ce:	4a77      	ldr	r2, [pc, #476]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028d8:	4b74      	ldr	r3, [pc, #464]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028e6:	2370      	movs	r3, #112	@ 0x70
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ea:	2302      	movs	r3, #2
 80028ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028f6:	2305      	movs	r3, #5
 80028f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028fe:	4619      	mov	r1, r3
 8002900:	486b      	ldr	r0, [pc, #428]	@ (8002ab0 <HAL_SPI_MspInit+0x248>)
 8002902:	f01a f8f7 	bl	801caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002906:	2320      	movs	r3, #32
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290a:	2302      	movs	r3, #2
 800290c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002916:	2305      	movs	r3, #5
 8002918:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800291e:	4619      	mov	r1, r3
 8002920:	4864      	ldr	r0, [pc, #400]	@ (8002ab4 <HAL_SPI_MspInit+0x24c>)
 8002922:	f01a f8e7 	bl	801caf4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002926:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002928:	4a64      	ldr	r2, [pc, #400]	@ (8002abc <HAL_SPI_MspInit+0x254>)
 800292a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800292c:	4b62      	ldr	r3, [pc, #392]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 800292e:	2225      	movs	r2, #37	@ 0x25
 8002930:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002938:	4b5f      	ldr	r3, [pc, #380]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800293e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002944:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002946:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800294c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800294e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002954:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002956:	4b58      	ldr	r3, [pc, #352]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800295c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800295e:	4b56      	ldr	r3, [pc, #344]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002964:	4b54      	ldr	r3, [pc, #336]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002966:	2200      	movs	r2, #0
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800296a:	4853      	ldr	r0, [pc, #332]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 800296c:	f018 f9ba 	bl	801ace4 <HAL_DMA_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8002976:	f7ff fdd7 	bl	8002528 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 800297e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002980:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab8 <HAL_SPI_MspInit+0x250>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	2023      	movs	r0, #35	@ 0x23
 800298c:	f018 f8fd 	bl	801ab8a <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002990:	e126      	b.n	8002be0 <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a4a      	ldr	r2, [pc, #296]	@ (8002ac0 <HAL_SPI_MspInit+0x258>)
 8002998:	4293      	cmp	r3, r2
 800299a:	f040 8097 	bne.w	8002acc <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800299e:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029a4:	4a41      	ldr	r2, [pc, #260]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029ae:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029bc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c2:	4a3a      	ldr	r2, [pc, #232]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029cc:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e0:	4a32      	ldr	r2, [pc, #200]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029ea:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <HAL_SPI_MspInit+0x244>)
 80029ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80029f8:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4827      	ldr	r0, [pc, #156]	@ (8002ab4 <HAL_SPI_MspInit+0x24c>)
 8002a16:	f01a f86d 	bl	801caf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a2c:	2305      	movs	r3, #5
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a34:	4619      	mov	r1, r3
 8002a36:	481e      	ldr	r0, [pc, #120]	@ (8002ab0 <HAL_SPI_MspInit+0x248>)
 8002a38:	f01a f85c 	bl	801caf4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002a3c:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a3e:	4a22      	ldr	r2, [pc, #136]	@ (8002ac8 <HAL_SPI_MspInit+0x260>)
 8002a40:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a42:	4b20      	ldr	r3, [pc, #128]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a44:	2227      	movs	r2, #39	@ 0x27
 8002a46:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a5a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a72:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a74:	4b13      	ldr	r3, [pc, #76]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a7a:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a80:	4810      	ldr	r0, [pc, #64]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a82:	f018 f92f 	bl	801ace4 <HAL_DMA_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8002a8c:	f7ff fd4c 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a94:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a96:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac4 <HAL_SPI_MspInit+0x25c>)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	2024      	movs	r0, #36	@ 0x24
 8002aa2:	f018 f872 	bl	801ab8a <HAL_NVIC_SetPriority>
}
 8002aa6:	e09b      	b.n	8002be0 <HAL_SPI_MspInit+0x378>
 8002aa8:	40013000 	.word	0x40013000
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	58020000 	.word	0x58020000
 8002ab4:	58020400 	.word	0x58020400
 8002ab8:	200002a4 	.word	0x200002a4
 8002abc:	40020010 	.word	0x40020010
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	2000031c 	.word	0x2000031c
 8002ac8:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a45      	ldr	r2, [pc, #276]	@ (8002be8 <HAL_SPI_MspInit+0x380>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	f040 8084 	bne.w	8002be0 <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002ad8:	4b44      	ldr	r3, [pc, #272]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ade:	4a43      	ldr	r2, [pc, #268]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ae8:	4b40      	ldr	r3, [pc, #256]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002afc:	4a3b      	ldr	r2, [pc, #236]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b06:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b14:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	4a34      	ldr	r2, [pc, #208]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_SPI_MspInit+0x384>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b44:	2306      	movs	r3, #6
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4828      	ldr	r0, [pc, #160]	@ (8002bf0 <HAL_SPI_MspInit+0x388>)
 8002b50:	f019 ffd0 	bl	801caf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b54:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2300      	movs	r3, #0
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b66:	2306      	movs	r3, #6
 8002b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4820      	ldr	r0, [pc, #128]	@ (8002bf4 <HAL_SPI_MspInit+0x38c>)
 8002b72:	f019 ffbf 	bl	801caf4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 8002b76:	4b20      	ldr	r3, [pc, #128]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <HAL_SPI_MspInit+0x394>)
 8002b7a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b7e:	223d      	movs	r2, #61	@ 0x3d
 8002b80:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b94:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b96:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002b98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b9c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b9e:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002ba0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ba4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002ba6:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bac:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bb4:	4b10      	ldr	r3, [pc, #64]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8002bba:	480f      	ldr	r0, [pc, #60]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002bbc:	f018 f892 	bl	801ace4 <HAL_DMA_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_SPI_MspInit+0x362>
      Error_Handler();
 8002bc6:	f7ff fcaf 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002bce:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002bd0:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_SPI_MspInit+0x390>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2033      	movs	r0, #51	@ 0x33
 8002bdc:	f017 ffd5 	bl	801ab8a <HAL_NVIC_SetPriority>
}
 8002be0:	bf00      	nop
 8002be2:	3740      	adds	r7, #64	@ 0x40
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40003c00 	.word	0x40003c00
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	58020000 	.word	0x58020000
 8002bf4:	58020800 	.word	0x58020800
 8002bf8:	20000394 	.word	0x20000394
 8002bfc:	400200b8 	.word	0x400200b8

08002c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a87      	ldr	r2, [pc, #540]	@ (8002e2c <HAL_TIM_Base_MspInit+0x22c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d13e      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c12:	4b87      	ldr	r3, [pc, #540]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c18:	4a85      	ldr	r2, [pc, #532]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c22:	4b83      	ldr	r3, [pc, #524]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002c30:	4b80      	ldr	r3, [pc, #512]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c32:	4a81      	ldr	r2, [pc, #516]	@ (8002e38 <HAL_TIM_Base_MspInit+0x238>)
 8002c34:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002c36:	4b7f      	ldr	r3, [pc, #508]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c38:	220f      	movs	r2, #15
 8002c3a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c3c:	4b7d      	ldr	r3, [pc, #500]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c3e:	2240      	movs	r2, #64	@ 0x40
 8002c40:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c42:	4b7c      	ldr	r3, [pc, #496]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002c48:	4b7a      	ldr	r3, [pc, #488]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c4e:	4b79      	ldr	r3, [pc, #484]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c54:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c56:	4b77      	ldr	r3, [pc, #476]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002c5e:	4b75      	ldr	r3, [pc, #468]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c64:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002c66:	4b73      	ldr	r3, [pc, #460]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6c:	4b71      	ldr	r3, [pc, #452]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002c72:	4870      	ldr	r0, [pc, #448]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c74:	f018 f836 	bl	801ace4 <HAL_DMA_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002c7e:	f7ff fc53 	bl	8002528 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a6b      	ldr	r2, [pc, #428]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c86:	621a      	str	r2, [r3, #32]
 8002c88:	4a6a      	ldr	r2, [pc, #424]	@ (8002e34 <HAL_TIM_Base_MspInit+0x234>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c8e:	e129      	b.n	8002ee4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c98:	d10f      	bne.n	8002cba <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9a:	4b65      	ldr	r3, [pc, #404]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca0:	4a63      	ldr	r2, [pc, #396]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002caa:	4b61      	ldr	r3, [pc, #388]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
}
 8002cb8:	e114      	b.n	8002ee4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002e3c <HAL_TIM_Base_MspInit+0x23c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d13e      	bne.n	8002d42 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cca:	4a59      	ldr	r2, [pc, #356]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cd4:	4b56      	ldr	r3, [pc, #344]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002ce2:	4b57      	ldr	r3, [pc, #348]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002ce4:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_TIM_Base_MspInit+0x244>)
 8002ce6:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002ce8:	4b55      	ldr	r3, [pc, #340]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002cea:	221b      	movs	r2, #27
 8002cec:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cee:	4b54      	ldr	r3, [pc, #336]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002cf0:	2240      	movs	r2, #64	@ 0x40
 8002cf2:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf4:	4b52      	ldr	r3, [pc, #328]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002cfa:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d00:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d06:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d08:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0e:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002d10:	4b4b      	ldr	r3, [pc, #300]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d16:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002d18:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d1e:	4b48      	ldr	r3, [pc, #288]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002d24:	4846      	ldr	r0, [pc, #280]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d26:	f017 ffdd 	bl	801ace4 <HAL_DMA_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002d30:	f7ff fbfa 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a42      	ldr	r2, [pc, #264]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d38:	621a      	str	r2, [r3, #32]
 8002d3a:	4a41      	ldr	r2, [pc, #260]	@ (8002e40 <HAL_TIM_Base_MspInit+0x240>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002d40:	e0d0      	b.n	8002ee4 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a40      	ldr	r2, [pc, #256]	@ (8002e48 <HAL_TIM_Base_MspInit+0x248>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	f040 8087 	bne.w	8002e5c <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d4e:	4b38      	ldr	r3, [pc, #224]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d54:	4a36      	ldr	r2, [pc, #216]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d5e:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <HAL_TIM_Base_MspInit+0x230>)
 8002d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002d6c:	4b37      	ldr	r3, [pc, #220]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d6e:	4a38      	ldr	r2, [pc, #224]	@ (8002e50 <HAL_TIM_Base_MspInit+0x250>)
 8002d70:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002d72:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d74:	221d      	movs	r2, #29
 8002d76:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d78:	4b34      	ldr	r3, [pc, #208]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d7a:	2240      	movs	r2, #64	@ 0x40
 8002d7c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d7e:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002d84:	4b31      	ldr	r3, [pc, #196]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d8a:	4b30      	ldr	r3, [pc, #192]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d90:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d92:	4b2e      	ldr	r3, [pc, #184]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d98:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002da0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002da2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002da4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002da8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002daa:	4b28      	ldr	r3, [pc, #160]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002db0:	4826      	ldr	r0, [pc, #152]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002db2:	f017 ff97 	bl	801ace4 <HAL_DMA_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002dbc:	f7ff fbb4 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dc6:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <HAL_TIM_Base_MspInit+0x24c>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002dce:	4a22      	ldr	r2, [pc, #136]	@ (8002e58 <HAL_TIM_Base_MspInit+0x258>)
 8002dd0:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002dda:	2240      	movs	r2, #64	@ 0x40
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002dec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002df0:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002df4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002df8:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e00:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002e02:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e08:	4b12      	ldr	r3, [pc, #72]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002e0e:	4811      	ldr	r0, [pc, #68]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002e10:	f017 ff68 	bl	801ace4 <HAL_DMA_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002e1a:	f7ff fb85 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002e22:	621a      	str	r2, [r3, #32]
 8002e24:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <HAL_TIM_Base_MspInit+0x254>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e2a:	e05b      	b.n	8002ee4 <HAL_TIM_Base_MspInit+0x2e4>
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	58024400 	.word	0x58024400
 8002e34:	20000588 	.word	0x20000588
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	20000600 	.word	0x20000600
 8002e44:	40020058 	.word	0x40020058
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	20000678 	.word	0x20000678
 8002e50:	40020070 	.word	0x40020070
 8002e54:	200006f0 	.word	0x200006f0
 8002e58:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a22      	ldr	r2, [pc, #136]	@ (8002eec <HAL_TIM_Base_MspInit+0x2ec>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d13e      	bne.n	8002ee4 <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e66:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e6c:	4a20      	ldr	r2, [pc, #128]	@ (8002ef0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002e6e:	f043 0308 	orr.w	r3, r3, #8
 8002e72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_TIM_Base_MspInit+0x2f0>)
 8002e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002e86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <HAL_TIM_Base_MspInit+0x2f8>)
 8002e88:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002e8c:	223b      	movs	r2, #59	@ 0x3b
 8002e8e:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e90:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002e92:	2240      	movs	r2, #64	@ 0x40
 8002e94:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e96:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ea4:	4b13      	ldr	r3, [pc, #76]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002eaa:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eac:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002eae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eb2:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eba:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002ec8:	480a      	ldr	r0, [pc, #40]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002eca:	f017 ff0b 	bl	801ace4 <HAL_DMA_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002ed4:	f7ff fb28 	bl	8002528 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a06      	ldr	r2, [pc, #24]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002edc:	621a      	str	r2, [r3, #32]
 8002ede:	4a05      	ldr	r2, [pc, #20]	@ (8002ef4 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ee4:	bf00      	nop
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	20000768 	.word	0x20000768
 8002ef8:	400200a0 	.word	0x400200a0

08002efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <HAL_TIM_MspPostInit+0x68>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d11e      	bne.n	8002f5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f24:	4a10      	ldr	r2, [pc, #64]	@ (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f26:	f043 0302 	orr.w	r3, r3, #2
 8002f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <HAL_TIM_MspPostInit+0x6c>)
 8002f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f3c:	23c0      	movs	r3, #192	@ 0xc0
 8002f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <HAL_TIM_MspPostInit+0x70>)
 8002f58:	f019 fdcc 	bl	801caf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40000800 	.word	0x40000800
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	58020400 	.word	0x58020400

08002f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b0ba      	sub	sp, #232	@ 0xe8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f88:	f107 0310 	add.w	r3, r7, #16
 8002f8c:	22c0      	movs	r2, #192	@ 0xc0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f020 f86a 	bl	802306a <memset>
  if(huart->Instance==USART3)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a27      	ldr	r2, [pc, #156]	@ (8003038 <HAL_UART_MspInit+0xc8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d146      	bne.n	800302e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002fa0:	f04f 0202 	mov.w	r2, #2
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002fac:	2300      	movs	r3, #0
 8002fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f01b f8ba 	bl	801e130 <HAL_RCCEx_PeriphCLKConfig>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fc2:	f7ff fab1 	bl	8002528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002fd6:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe4:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fea:	4a14      	ldr	r2, [pc, #80]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <HAL_UART_MspInit+0xcc>)
 8002ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003002:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800301c:	2307      	movs	r3, #7
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003022:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	@ (8003040 <HAL_UART_MspInit+0xd0>)
 800302a:	f019 fd63 	bl	801caf4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800302e:	bf00      	nop
 8003030:	37e8      	adds	r7, #232	@ 0xe8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40004800 	.word	0x40004800
 800303c:	58024400 	.word	0x58024400
 8003040:	58020c00 	.word	0x58020c00

08003044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <NMI_Handler+0x4>

0800304c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <MemManage_Handler+0x4>

08003054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <BusFault_Handler+0x4>

0800305c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <UsageFault_Handler+0x4>

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003076:	f017 fc49 	bl	801a90c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800307a:	f002 fc09 	bl	8005890 <xTaskGetSchedulerState>
 800307e:	4603      	mov	r3, r0
 8003080:	2b02      	cmp	r3, #2
 8003082:	d101      	bne.n	8003088 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8003084:	f003 fce8 	bl	8006a58 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8003096:	4b19      	ldr	r3, [pc, #100]	@ (80030fc <DMA1_Stream0_IRQHandler+0x70>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 80030a2:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <DMA1_Stream0_IRQHandler+0x74>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e001      	b.n	80030bc <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80030bc:	4811      	ldr	r0, [pc, #68]	@ (8003104 <DMA1_Stream0_IRQHandler+0x78>)
 80030be:	f018 fbb3 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <DMA1_Stream0_IRQHandler+0x7c>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	1d3b      	adds	r3, r7, #4
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2301      	movs	r3, #1
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	2100      	movs	r1, #0
 80030d8:	f003 f832 	bl	8006140 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <DMA1_Stream0_IRQHandler+0x66>
 80030e2:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <DMA1_Stream0_IRQHandler+0x80>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40020000 	.word	0x40020000
 8003100:	40020010 	.word	0x40020010
 8003104:	200002a4 	.word	0x200002a4
 8003108:	20000d4c 	.word	0x20000d4c
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 800311a:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <DMA1_Stream1_IRQHandler+0x70>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8003126:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <DMA1_Stream1_IRQHandler+0x74>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e001      	b.n	8003140 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 800313c:	2301      	movs	r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003140:	4811      	ldr	r0, [pc, #68]	@ (8003188 <DMA1_Stream1_IRQHandler+0x78>)
 8003142:	f018 fb71 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <DMA1_Stream1_IRQHandler+0x7c>)
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	2300      	movs	r3, #0
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	2100      	movs	r1, #0
 800315c:	f002 fff0 	bl	8006140 <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <DMA1_Stream1_IRQHandler+0x66>
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <DMA1_Stream1_IRQHandler+0x80>)
 8003168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316c:	601a      	str	r2, [r3, #0]
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40020000 	.word	0x40020000
 8003184:	40020028 	.word	0x40020028
 8003188:	2000031c 	.word	0x2000031c
 800318c:	20000d50 	.word	0x20000d50
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003198:	4802      	ldr	r0, [pc, #8]	@ (80031a4 <DMA1_Stream2_IRQHandler+0x10>)
 800319a:	f018 fb45 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000588 	.word	0x20000588

080031a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 80031ac:	4802      	ldr	r0, [pc, #8]	@ (80031b8 <DMA1_Stream3_IRQHandler+0x10>)
 80031ae:	f018 fb3b 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000600 	.word	0x20000600

080031bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80031c0:	4802      	ldr	r0, [pc, #8]	@ (80031cc <DMA1_Stream4_IRQHandler+0x10>)
 80031c2:	f018 fb31 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000678 	.word	0x20000678

080031d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 80031d4:	4802      	ldr	r0, [pc, #8]	@ (80031e0 <DMA1_Stream5_IRQHandler+0x10>)
 80031d6:	f018 fb27 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200006f0 	.word	0x200006f0

080031e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 80031e8:	4802      	ldr	r0, [pc, #8]	@ (80031f4 <DMA1_Stream6_IRQHandler+0x10>)
 80031ea:	f018 fb1d 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000768 	.word	0x20000768

080031f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80031fc:	4802      	ldr	r0, [pc, #8]	@ (8003208 <SPI1_IRQHandler+0x10>)
 80031fe:	f01c ff49 	bl	8020094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	2000010c 	.word	0x2000010c

0800320c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003210:	4802      	ldr	r0, [pc, #8]	@ (800321c <SPI2_IRQHandler+0x10>)
 8003212:	f01c ff3f 	bl	8020094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000194 	.word	0x20000194

08003220 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 800322a:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <DMA1_Stream7_IRQHandler+0x70>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00c      	beq.n	8003250 <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 8003236:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <DMA1_Stream7_IRQHandler+0x74>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e001      	b.n	8003250 <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 800324c:	2301      	movs	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8003250:	4811      	ldr	r0, [pc, #68]	@ (8003298 <DMA1_Stream7_IRQHandler+0x78>)
 8003252:	f018 fae9 	bl	801b828 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <DMA1_Stream7_IRQHandler+0x7c>)
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2301      	movs	r3, #1
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	2100      	movs	r1, #0
 800326c:	f002 ff68 	bl	8006140 <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <DMA1_Stream7_IRQHandler+0x66>
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <DMA1_Stream7_IRQHandler+0x80>)
 8003278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40020000 	.word	0x40020000
 8003294:	400200b8 	.word	0x400200b8
 8003298:	20000394 	.word	0x20000394
 800329c:	20000d54 	.word	0x20000d54
 80032a0:	e000ed04 	.word	0xe000ed04

080032a4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80032a8:	4802      	ldr	r0, [pc, #8]	@ (80032b4 <SPI3_IRQHandler+0x10>)
 80032aa:	f01c fef3 	bl	8020094 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000021c 	.word	0x2000021c

080032b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return 1;
 80032bc:	2301      	movs	r3, #1
}
 80032be:	4618      	mov	r0, r3
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <_kill>:

int _kill(int pid, int sig)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032d2:	f020 fe31 	bl	8023f38 <__errno>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2216      	movs	r2, #22
 80032da:	601a      	str	r2, [r3, #0]
  return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_exit>:

void _exit (int status)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032f0:	f04f 31ff 	mov.w	r1, #4294967295
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffe7 	bl	80032c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032fa:	bf00      	nop
 80032fc:	e7fd      	b.n	80032fa <_exit+0x12>

080032fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e00a      	b.n	8003326 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003310:	f3af 8000 	nop.w
 8003314:	4601      	mov	r1, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	60ba      	str	r2, [r7, #8]
 800331c:	b2ca      	uxtb	r2, r1
 800331e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	dbf0      	blt.n	8003310 <_read+0x12>
  }

  return len;
 800332e:	687b      	ldr	r3, [r7, #4]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e009      	b.n	800335e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	60ba      	str	r2, [r7, #8]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3301      	adds	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	dbf1      	blt.n	800334a <_write+0x12>
  }
  return len;
 8003366:	687b      	ldr	r3, [r7, #4]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <_close>:

int _close(int file)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003398:	605a      	str	r2, [r3, #4]
  return 0;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <_isatty>:

int _isatty(int file)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e0:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <_sbrk+0x5c>)
 80033e2:	4b15      	ldr	r3, [pc, #84]	@ (8003438 <_sbrk+0x60>)
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ec:	4b13      	ldr	r3, [pc, #76]	@ (800343c <_sbrk+0x64>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d102      	bne.n	80033fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <_sbrk+0x64>)
 80033f6:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <_sbrk+0x68>)
 80033f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fa:	4b10      	ldr	r3, [pc, #64]	@ (800343c <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	429a      	cmp	r2, r3
 8003406:	d207      	bcs.n	8003418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003408:	f020 fd96 	bl	8023f38 <__errno>
 800340c:	4603      	mov	r3, r0
 800340e:	220c      	movs	r2, #12
 8003410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	e009      	b.n	800342c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003418:	4b08      	ldr	r3, [pc, #32]	@ (800343c <_sbrk+0x64>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800341e:	4b07      	ldr	r3, [pc, #28]	@ (800343c <_sbrk+0x64>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	4a05      	ldr	r2, [pc, #20]	@ (800343c <_sbrk+0x64>)
 8003428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342a:	68fb      	ldr	r3, [r7, #12]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	24080000 	.word	0x24080000
 8003438:	00000400 	.word	0x00000400
 800343c:	20000de0 	.word	0x20000de0
 8003440:	200028a0 	.word	0x200028a0

08003444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800344a:	4b3f      	ldr	r3, [pc, #252]	@ (8003548 <SystemInit+0x104>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003450:	4a3d      	ldr	r2, [pc, #244]	@ (8003548 <SystemInit+0x104>)
 8003452:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003456:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800345a:	4b3c      	ldr	r3, [pc, #240]	@ (800354c <SystemInit+0x108>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	2b06      	cmp	r3, #6
 8003464:	d807      	bhi.n	8003476 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003466:	4b39      	ldr	r3, [pc, #228]	@ (800354c <SystemInit+0x108>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	4a37      	ldr	r2, [pc, #220]	@ (800354c <SystemInit+0x108>)
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003476:	4b36      	ldr	r3, [pc, #216]	@ (8003550 <SystemInit+0x10c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a35      	ldr	r2, [pc, #212]	@ (8003550 <SystemInit+0x10c>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003482:	4b33      	ldr	r3, [pc, #204]	@ (8003550 <SystemInit+0x10c>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003488:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <SystemInit+0x10c>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4930      	ldr	r1, [pc, #192]	@ (8003550 <SystemInit+0x10c>)
 800348e:	4b31      	ldr	r3, [pc, #196]	@ (8003554 <SystemInit+0x110>)
 8003490:	4013      	ands	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003494:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <SystemInit+0x108>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80034a0:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <SystemInit+0x108>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f023 030f 	bic.w	r3, r3, #15
 80034a8:	4a28      	ldr	r2, [pc, #160]	@ (800354c <SystemInit+0x108>)
 80034aa:	f043 0307 	orr.w	r3, r3, #7
 80034ae:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80034b0:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <SystemInit+0x10c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80034b6:	4b26      	ldr	r3, [pc, #152]	@ (8003550 <SystemInit+0x10c>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80034bc:	4b24      	ldr	r3, [pc, #144]	@ (8003550 <SystemInit+0x10c>)
 80034be:	2200      	movs	r2, #0
 80034c0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80034c2:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <SystemInit+0x10c>)
 80034c4:	4a24      	ldr	r2, [pc, #144]	@ (8003558 <SystemInit+0x114>)
 80034c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80034c8:	4b21      	ldr	r3, [pc, #132]	@ (8003550 <SystemInit+0x10c>)
 80034ca:	4a24      	ldr	r2, [pc, #144]	@ (800355c <SystemInit+0x118>)
 80034cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80034ce:	4b20      	ldr	r3, [pc, #128]	@ (8003550 <SystemInit+0x10c>)
 80034d0:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <SystemInit+0x11c>)
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80034d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <SystemInit+0x10c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80034da:	4b1d      	ldr	r3, [pc, #116]	@ (8003550 <SystemInit+0x10c>)
 80034dc:	4a20      	ldr	r2, [pc, #128]	@ (8003560 <SystemInit+0x11c>)
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <SystemInit+0x10c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80034e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <SystemInit+0x10c>)
 80034e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003560 <SystemInit+0x11c>)
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80034ec:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <SystemInit+0x10c>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80034f2:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <SystemInit+0x10c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <SystemInit+0x10c>)
 80034f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <SystemInit+0x10c>)
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003504:	4b17      	ldr	r3, [pc, #92]	@ (8003564 <SystemInit+0x120>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <SystemInit+0x124>)
 800350a:	4013      	ands	r3, r2
 800350c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003510:	d202      	bcs.n	8003518 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003512:	4b16      	ldr	r3, [pc, #88]	@ (800356c <SystemInit+0x128>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003518:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <SystemInit+0x10c>)
 800351a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800351e:	4a0c      	ldr	r2, [pc, #48]	@ (8003550 <SystemInit+0x10c>)
 8003520:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8003524:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003528:	4b09      	ldr	r3, [pc, #36]	@ (8003550 <SystemInit+0x10c>)
 800352a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800352e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003530:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003532:	4b0f      	ldr	r3, [pc, #60]	@ (8003570 <SystemInit+0x12c>)
 8003534:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003538:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00
 800354c:	52002000 	.word	0x52002000
 8003550:	58024400 	.word	0x58024400
 8003554:	eaf6ed7f 	.word	0xeaf6ed7f
 8003558:	02020200 	.word	0x02020200
 800355c:	01ff0000 	.word	0x01ff0000
 8003560:	01010280 	.word	0x01010280
 8003564:	5c001000 	.word	0x5c001000
 8003568:	ffff0000 	.word	0xffff0000
 800356c:	51008108 	.word	0x51008108
 8003570:	52004000 	.word	0x52004000

08003574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003574:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003578:	f7ff ff64 	bl	8003444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800357c:	480c      	ldr	r0, [pc, #48]	@ (80035b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800357e:	490d      	ldr	r1, [pc, #52]	@ (80035b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003580:	4a0d      	ldr	r2, [pc, #52]	@ (80035b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003584:	e002      	b.n	800358c <LoopCopyDataInit>

08003586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800358a:	3304      	adds	r3, #4

0800358c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800358c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003590:	d3f9      	bcc.n	8003586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003594:	4c0a      	ldr	r4, [pc, #40]	@ (80035c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003598:	e001      	b.n	800359e <LoopFillZerobss>

0800359a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800359a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800359c:	3204      	adds	r2, #4

0800359e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a0:	d3fb      	bcc.n	800359a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035a2:	f020 fccf 	bl	8023f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035a6:	f7fd f87b 	bl	80006a0 <main>
  bx  lr
 80035aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80035b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80035b8:	08028550 	.word	0x08028550
  ldr r2, =_sbss
 80035bc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80035c0:	200028a0 	.word	0x200028a0

080035c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c4:	e7fe      	b.n	80035c4 <ADC3_IRQHandler>

080035c6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80035cc:	201c      	movs	r0, #28
 80035ce:	f003 fac1 	bl	8006b54 <pvPortMalloc>
 80035d2:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f9c3 	bl	8003970 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80035ea:	687b      	ldr	r3, [r7, #4]
        }
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	@ 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <xEventGroupWaitBits+0x2a>
 8003614:	f240 1147 	movw	r1, #327	@ 0x147
 8003618:	4850      	ldr	r0, [pc, #320]	@ (800375c <xEventGroupWaitBits+0x168>)
 800361a:	f7fe fa37 	bl	8001a8c <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003624:	d304      	bcc.n	8003630 <xEventGroupWaitBits+0x3c>
 8003626:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800362a:	484c      	ldr	r0, [pc, #304]	@ (800375c <xEventGroupWaitBits+0x168>)
 800362c:	f7fe fa2e 	bl	8001a8c <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <xEventGroupWaitBits+0x4c>
 8003636:	f240 1149 	movw	r1, #329	@ 0x149
 800363a:	4848      	ldr	r0, [pc, #288]	@ (800375c <xEventGroupWaitBits+0x168>)
 800363c:	f7fe fa26 	bl	8001a8c <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003640:	f002 f926 	bl	8005890 <xTaskGetSchedulerState>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <xEventGroupWaitBits+0x5c>
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <xEventGroupWaitBits+0x60>
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <xEventGroupWaitBits+0x62>
 8003654:	2300      	movs	r3, #0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d104      	bne.n	8003664 <xEventGroupWaitBits+0x70>
 800365a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800365e:	483f      	ldr	r0, [pc, #252]	@ (800375c <xEventGroupWaitBits+0x168>)
 8003660:	f7fe fa14 	bl	8001a8c <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8003664:	f001 faf6 	bl	8004c54 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	69f8      	ldr	r0, [r7, #28]
 8003674:	f000 f95a 	bl	800392c <prvTestWaitCondition>
 8003678:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8003684:	2300      	movs	r3, #0
 8003686:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d028      	beq.n	80036e0 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e020      	b.n	80036e0 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800369e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	e018      	b.n	80036e0 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80036c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	1d18      	adds	r0, r3, #4
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	4313      	orrs	r3, r2
 80036d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036d6:	4619      	mov	r1, r3
 80036d8:	f001 fda4 	bl	8005224 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80036e0:	f001 fac6 	bl	8004c70 <xTaskResumeAll>
 80036e4:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d031      	beq.n	8003750 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80036f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <xEventGroupWaitBits+0x16c>)
 80036f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8003702:	f002 facf 	bl	8005ca4 <uxTaskResetEventItemValue>
 8003706:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11a      	bne.n	8003748 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 8003712:	f003 f91d 	bl	8006950 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003722:	f000 f903 	bl	800392c <prvTestWaitCondition>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	43db      	mvns	r3, r3
 800373a:	401a      	ands	r2, r3
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8003744:	f003 f930 	bl	80069a8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003752:	4618      	mov	r0, r3
 8003754:	3730      	adds	r7, #48	@ 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	08024da0 	.word	0x08024da0
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d104      	bne.n	8003782 <xEventGroupClearBits+0x1e>
 8003778:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800377c:	480f      	ldr	r0, [pc, #60]	@ (80037bc <xEventGroupClearBits+0x58>)
 800377e:	f7fe f985 	bl	8001a8c <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003788:	d304      	bcc.n	8003794 <xEventGroupClearBits+0x30>
 800378a:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800378e:	480b      	ldr	r0, [pc, #44]	@ (80037bc <xEventGroupClearBits+0x58>)
 8003790:	f7fe f97c 	bl	8001a8c <vAssertCalled>

        taskENTER_CRITICAL();
 8003794:	f003 f8dc 	bl	8006950 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80037ac:	f003 f8fc 	bl	80069a8 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80037b0:	68bb      	ldr	r3, [r7, #8]
    }
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	08024da0 	.word	0x08024da0

080037c0 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	@ 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <xEventGroupSetBits+0x26>
 80037dc:	f240 2132 	movw	r1, #562	@ 0x232
 80037e0:	4836      	ldr	r0, [pc, #216]	@ (80038bc <xEventGroupSetBits+0xfc>)
 80037e2:	f7fe f953 	bl	8001a8c <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ec:	d304      	bcc.n	80037f8 <xEventGroupSetBits+0x38>
 80037ee:	f240 2133 	movw	r1, #563	@ 0x233
 80037f2:	4832      	ldr	r0, [pc, #200]	@ (80038bc <xEventGroupSetBits+0xfc>)
 80037f4:	f7fe f94a 	bl	8001a8c <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	3304      	adds	r3, #4
 80037fc:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3308      	adds	r3, #8
 8003802:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8003804:	f001 fa26 	bl	8004c54 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	431a      	orrs	r2, r3
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 800381a:	e03c      	b.n	8003896 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003832:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800383a:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8003852:	2301      	movs	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
 8003856:	e008      	b.n	800386a <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	429a      	cmp	r2, r3
 8003864:	d101      	bne.n	800386a <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8003866:	2301      	movs	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 800387a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800388a:	4619      	mov	r1, r3
 800388c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800388e:	f001 fde7 	bl	8005460 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8003896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d1be      	bne.n	800381c <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	43db      	mvns	r3, r3
 80038a6:	401a      	ands	r2, r3
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80038ac:	f001 f9e0 	bl	8004c70 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	681b      	ldr	r3, [r3, #0]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	3730      	adds	r7, #48	@ 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	08024da0 	.word	0x08024da0

080038c0 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <vEventGroupDelete+0x1c>
 80038d2:	f240 218e 	movw	r1, #654	@ 0x28e
 80038d6:	4814      	ldr	r0, [pc, #80]	@ (8003928 <vEventGroupDelete+0x68>)
 80038d8:	f7fe f8d8 	bl	8001a8c <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3304      	adds	r3, #4
 80038e0:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 80038e2:	f001 f9b7 	bl	8004c54 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80038e6:	e011      	b.n	800390c <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3308      	adds	r3, #8
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d104      	bne.n	80038fe <vEventGroupDelete+0x3e>
 80038f4:	f240 219a 	movw	r1, #666	@ 0x29a
 80038f8:	480b      	ldr	r0, [pc, #44]	@ (8003928 <vEventGroupDelete+0x68>)
 80038fa:	f7fe f8c7 	bl	8001a8c <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fdaa 	bl	8005460 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e9      	bne.n	80038e8 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8003914:	f001 f9ac 	bl	8004c70 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f003 f9ef 	bl	8006cfc <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	08024da0 	.word	0x08024da0

0800392c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e007      	b.n	8003962 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4013      	ands	r3, r2
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d101      	bne.n	8003962 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8003962:	697b      	ldr	r3, [r7, #20]
    }
 8003964:	4618      	mov	r0, r3
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f103 0208 	add.w	r2, r3, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f04f 32ff 	mov.w	r2, #4294967295
 8003988:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f103 0208 	add.w	r2, r3, #8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f103 0208 	add.w	r2, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d103      	bne.n	8003a32 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e00c      	b.n	8003a4c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3308      	adds	r3, #8
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e002      	b.n	8003a40 <vListInsert+0x2e>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d2f6      	bcs.n	8003a3a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6892      	ldr	r2, [r2, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6852      	ldr	r2, [r2, #4]
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d103      	bne.n	8003ab8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d104      	bne.n	8003afa <xQueueGenericReset+0x22>
 8003af0:	f240 1137 	movw	r1, #311	@ 0x137
 8003af4:	4839      	ldr	r0, [pc, #228]	@ (8003bdc <xQueueGenericReset+0x104>)
 8003af6:	f7fd ffc9 	bl	8001a8c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05d      	beq.n	8003bbc <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d059      	beq.n	8003bbc <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	2100      	movs	r1, #0
 8003b12:	fba3 2302 	umull	r2, r3, r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d000      	beq.n	8003b1c <xQueueGenericReset+0x44>
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d14c      	bne.n	8003bbc <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8003b22:	f002 ff15 	bl	8006950 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	441a      	add	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	3b01      	subs	r3, #1
 8003b54:	68b9      	ldr	r1, [r7, #8]
 8003b56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	22ff      	movs	r2, #255	@ 0xff
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	22ff      	movs	r2, #255	@ 0xff
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d114      	bne.n	8003ba2 <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01a      	beq.n	8003bb6 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3310      	adds	r3, #16
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fb99 	bl	80052bc <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d012      	beq.n	8003bb6 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <xQueueGenericReset+0x108>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	e009      	b.n	8003bb6 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3310      	adds	r3, #16
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fee2 	bl	8003970 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3324      	adds	r3, #36	@ 0x24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fedd 	bl	8003970 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003bb6:	f002 fef7 	bl	80069a8 <vPortExitCritical>
 8003bba:	e001      	b.n	8003bc0 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <xQueueGenericReset+0xf8>
 8003bc6:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8003bca:	4804      	ldr	r0, [pc, #16]	@ (8003bdc <xQueueGenericReset+0x104>)
 8003bcc:	f7fd ff5e 	bl	8001a8c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08024dcc 	.word	0x08024dcc
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02e      	beq.n	8003c5a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d000      	beq.n	8003c0c <xQueueGenericCreate+0x28>
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d123      	bne.n	8003c5a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003c1a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003c1e:	d81c      	bhi.n	8003c5a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	3350      	adds	r3, #80	@ 0x50
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 ff90 	bl	8006b54 <pvPortMalloc>
 8003c34:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3350      	adds	r3, #80	@ 0x50
 8003c44:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c46:	79fa      	ldrb	r2, [r7, #7]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	68b9      	ldr	r1, [r7, #8]
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 f810 	bl	8003c78 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003c58:	e007      	b.n	8003c6a <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <xQueueGenericCreate+0x86>
 8003c60:	f240 212a 	movw	r1, #554	@ 0x22a
 8003c64:	4803      	ldr	r0, [pc, #12]	@ (8003c74 <xQueueGenericCreate+0x90>)
 8003c66:	f7fd ff11 	bl	8001a8c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
    }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	08024dcc 	.word	0x08024dcc

08003c78 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e002      	b.n	8003c9a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	69b8      	ldr	r0, [r7, #24]
 8003caa:	f7ff ff15 	bl	8003ad8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f847 	bl	8003d78 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6939      	ldr	r1, [r7, #16]
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f7ff ff6a 	bl	8003be4 <xQueueGenericCreate>
 8003d10:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff ffd3 	bl	8003cbe <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003d18:	68fb      	ldr	r3, [r7, #12]
    }
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d010      	beq.n	8003d5a <xQueueCreateCountingSemaphore+0x36>
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d80c      	bhi.n	8003d5a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003d40:	2202      	movs	r2, #2
 8003d42:	2100      	movs	r1, #0
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff4d 	bl	8003be4 <xQueueGenericCreate>
 8003d4a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003d58:	e007      	b.n	8003d6a <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <xQueueCreateCountingSemaphore+0x46>
 8003d60:	f240 319f 	movw	r1, #927	@ 0x39f
 8003d64:	4803      	ldr	r0, [pc, #12]	@ (8003d74 <xQueueCreateCountingSemaphore+0x50>)
 8003d66:	f7fd fe91 	bl	8001a8c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08024dcc 	.word	0x08024dcc

08003d78 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <xQueueGenericSend+0x26>
 8003d94:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003d98:	4869      	ldr	r0, [pc, #420]	@ (8003f40 <xQueueGenericSend+0x1c8>)
 8003d9a:	f7fd fe77 	bl	8001a8c <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d103      	bne.n	8003dac <xQueueGenericSend+0x34>
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <xQueueGenericSend+0x38>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <xQueueGenericSend+0x3a>
 8003db0:	2300      	movs	r3, #0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <xQueueGenericSend+0x48>
 8003db6:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003dba:	4861      	ldr	r0, [pc, #388]	@ (8003f40 <xQueueGenericSend+0x1c8>)
 8003dbc:	f7fd fe66 	bl	8001a8c <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d103      	bne.n	8003dce <xQueueGenericSend+0x56>
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <xQueueGenericSend+0x5a>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <xQueueGenericSend+0x5c>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <xQueueGenericSend+0x6a>
 8003dd8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003ddc:	4858      	ldr	r0, [pc, #352]	@ (8003f40 <xQueueGenericSend+0x1c8>)
 8003dde:	f7fd fe55 	bl	8001a8c <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003de2:	f001 fd55 	bl	8005890 <xTaskGetSchedulerState>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <xQueueGenericSend+0x7a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <xQueueGenericSend+0x7e>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <xQueueGenericSend+0x80>
 8003df6:	2300      	movs	r3, #0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <xQueueGenericSend+0x8e>
 8003dfc:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003e00:	484f      	ldr	r0, [pc, #316]	@ (8003f40 <xQueueGenericSend+0x1c8>)
 8003e02:	f7fd fe43 	bl	8001a8c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003e06:	f002 fda3 	bl	8006950 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <xQueueGenericSend+0xa4>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d129      	bne.n	8003e70 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	6a38      	ldr	r0, [r7, #32]
 8003e22:	f000 fabb 	bl	800439c <prvCopyDataToQueue>
 8003e26:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	3324      	adds	r3, #36	@ 0x24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fa41 	bl	80052bc <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003e40:	4b40      	ldr	r3, [pc, #256]	@ (8003f44 <xQueueGenericSend+0x1cc>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e00a      	b.n	8003e68 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003e58:	4b3a      	ldr	r3, [pc, #232]	@ (8003f44 <xQueueGenericSend+0x1cc>)
 8003e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003e68:	f002 fd9e 	bl	80069a8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e063      	b.n	8003f38 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e76:	f002 fd97 	bl	80069a8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e05c      	b.n	8003f38 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e84:	f107 0314 	add.w	r3, r7, #20
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fbc1 	bl	8005610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e92:	f002 fd89 	bl	80069a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e96:	f000 fedd 	bl	8004c54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e9a:	f002 fd59 	bl	8006950 <vPortEnterCritical>
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d103      	bne.n	8003eb4 <xQueueGenericSend+0x13c>
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d103      	bne.n	8003eca <xQueueGenericSend+0x152>
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eca:	f002 fd6d 	bl	80069a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ece:	1d3a      	adds	r2, r7, #4
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f001 fbb0 	bl	800563c <xTaskCheckForTimeOut>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d124      	bne.n	8003f2c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ee2:	6a38      	ldr	r0, [r7, #32]
 8003ee4:	f000 fb52 	bl	800458c <prvIsQueueFull>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 f974 	bl	80051e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003efc:	6a38      	ldr	r0, [r7, #32]
 8003efe:	f000 fadd 	bl	80044bc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003f02:	f000 feb5 	bl	8004c70 <xTaskResumeAll>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f47f af7c 	bne.w	8003e06 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <xQueueGenericSend+0x1cc>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	e772      	b.n	8003e06 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003f20:	6a38      	ldr	r0, [r7, #32]
 8003f22:	f000 facb 	bl	80044bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003f26:	f000 fea3 	bl	8004c70 <xTaskResumeAll>
 8003f2a:	e76c      	b.n	8003e06 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003f2c:	6a38      	ldr	r0, [r7, #32]
 8003f2e:	f000 fac5 	bl	80044bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003f32:	f000 fe9d 	bl	8004c70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003f36:	2300      	movs	r3, #0
        }
    }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3728      	adds	r7, #40	@ 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	08024dcc 	.word	0x08024dcc
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <xQueueReceive+0x24>
 8003f62:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003f66:	485e      	ldr	r0, [pc, #376]	@ (80040e0 <xQueueReceive+0x198>)
 8003f68:	f7fd fd90 	bl	8001a8c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <xQueueReceive+0x32>
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <xQueueReceive+0x36>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xQueueReceive+0x38>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d104      	bne.n	8003f8e <xQueueReceive+0x46>
 8003f84:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003f88:	4855      	ldr	r0, [pc, #340]	@ (80040e0 <xQueueReceive+0x198>)
 8003f8a:	f7fd fd7f 	bl	8001a8c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f8e:	f001 fc7f 	bl	8005890 <xTaskGetSchedulerState>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <xQueueReceive+0x56>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <xQueueReceive+0x5a>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueReceive+0x5c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <xQueueReceive+0x6a>
 8003fa8:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003fac:	484c      	ldr	r0, [pc, #304]	@ (80040e0 <xQueueReceive+0x198>)
 8003fae:	f7fd fd6d 	bl	8001a8c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003fb2:	f002 fccd 	bl	8006950 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fba:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01f      	beq.n	8004002 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	6a38      	ldr	r0, [r7, #32]
 8003fc6:	f000 fa53 	bl	8004470 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00f      	beq.n	8003ffa <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	3310      	adds	r3, #16
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f96c 	bl	80052bc <xTaskRemoveFromEventList>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003fea:	4b3e      	ldr	r3, [pc, #248]	@ (80040e4 <xQueueReceive+0x19c>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ffa:	f002 fcd5 	bl	80069a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e069      	b.n	80040d6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004008:	f002 fcce 	bl	80069a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800400c:	2300      	movs	r3, #0
 800400e:	e062      	b.n	80040d6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004016:	f107 0314 	add.w	r3, r7, #20
 800401a:	4618      	mov	r0, r3
 800401c:	f001 faf8 	bl	8005610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004024:	f002 fcc0 	bl	80069a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004028:	f000 fe14 	bl	8004c54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800402c:	f002 fc90 	bl	8006950 <vPortEnterCritical>
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004036:	b25b      	sxtb	r3, r3
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403c:	d103      	bne.n	8004046 <xQueueReceive+0xfe>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404c:	b25b      	sxtb	r3, r3
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d103      	bne.n	800405c <xQueueReceive+0x114>
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800405c:	f002 fca4 	bl	80069a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004060:	1d3a      	adds	r2, r7, #4
 8004062:	f107 0314 	add.w	r3, r7, #20
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fae7 	bl	800563c <xTaskCheckForTimeOut>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d123      	bne.n	80040bc <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004074:	6a38      	ldr	r0, [r7, #32]
 8004076:	f000 fa73 	bl	8004560 <prvIsQueueEmpty>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	3324      	adds	r3, #36	@ 0x24
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 f8ab 	bl	80051e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800408e:	6a38      	ldr	r0, [r7, #32]
 8004090:	f000 fa14 	bl	80044bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004094:	f000 fdec 	bl	8004c70 <xTaskResumeAll>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d189      	bne.n	8003fb2 <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 800409e:	4b11      	ldr	r3, [pc, #68]	@ (80040e4 <xQueueReceive+0x19c>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	e780      	b.n	8003fb2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80040b0:	6a38      	ldr	r0, [r7, #32]
 80040b2:	f000 fa03 	bl	80044bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040b6:	f000 fddb 	bl	8004c70 <xTaskResumeAll>
 80040ba:	e77a      	b.n	8003fb2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80040bc:	6a38      	ldr	r0, [r7, #32]
 80040be:	f000 f9fd 	bl	80044bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040c2:	f000 fdd5 	bl	8004c70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040c6:	6a38      	ldr	r0, [r7, #32]
 80040c8:	f000 fa4a 	bl	8004560 <prvIsQueueEmpty>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f43f af6f 	beq.w	8003fb2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80040d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3728      	adds	r7, #40	@ 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	08024dcc 	.word	0x08024dcc
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b08a      	sub	sp, #40	@ 0x28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d104      	bne.n	800410e <xQueueSemaphoreTake+0x26>
 8004104:	f240 6182 	movw	r1, #1666	@ 0x682
 8004108:	486c      	ldr	r0, [pc, #432]	@ (80042bc <xQueueSemaphoreTake+0x1d4>)
 800410a:	f7fd fcbf 	bl	8001a8c <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <xQueueSemaphoreTake+0x38>
 8004116:	f240 6186 	movw	r1, #1670	@ 0x686
 800411a:	4868      	ldr	r0, [pc, #416]	@ (80042bc <xQueueSemaphoreTake+0x1d4>)
 800411c:	f7fd fcb6 	bl	8001a8c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004120:	f001 fbb6 	bl	8005890 <xTaskGetSchedulerState>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <xQueueSemaphoreTake+0x48>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <xQueueSemaphoreTake+0x4c>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xQueueSemaphoreTake+0x4e>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <xQueueSemaphoreTake+0x5c>
 800413a:	f240 618b 	movw	r1, #1675	@ 0x68b
 800413e:	485f      	ldr	r0, [pc, #380]	@ (80042bc <xQueueSemaphoreTake+0x1d4>)
 8004140:	f7fd fca4 	bl	8001a8c <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004144:	f002 fc04 	bl	8006950 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d024      	beq.n	800419e <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1e5a      	subs	r2, r3, #1
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004164:	f001 fdb6 	bl	8005cd4 <pvTaskIncrementMutexHeldCount>
 8004168:	4602      	mov	r2, r0
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00f      	beq.n	8004196 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	3310      	adds	r3, #16
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f89e 	bl	80052bc <xTaskRemoveFromEventList>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004186:	4b4e      	ldr	r3, [pc, #312]	@ (80042c0 <xQueueSemaphoreTake+0x1d8>)
 8004188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004196:	f002 fc07 	bl	80069a8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 800419a:	2301      	movs	r3, #1
 800419c:	e089      	b.n	80042b2 <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80041a4:	f002 fc00 	bl	80069a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e082      	b.n	80042b2 <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 80041ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80041b2:	f107 030c 	add.w	r3, r7, #12
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fa2a 	bl	8005610 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80041c0:	f002 fbf2 	bl	80069a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80041c4:	f000 fd46 	bl	8004c54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80041c8:	f002 fbc2 	bl	8006950 <vPortEnterCritical>
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d103      	bne.n	80041e2 <xQueueSemaphoreTake+0xfa>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ee:	d103      	bne.n	80041f8 <xQueueSemaphoreTake+0x110>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f8:	f002 fbd6 	bl	80069a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041fc:	463a      	mov	r2, r7
 80041fe:	f107 030c 	add.w	r3, r7, #12
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fa19 	bl	800563c <xTaskCheckForTimeOut>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d132      	bne.n	8004276 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004210:	69f8      	ldr	r0, [r7, #28]
 8004212:	f000 f9a5 	bl	8004560 <prvIsQueueEmpty>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d026      	beq.n	800426a <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8004224:	f002 fb94 	bl	8006950 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fb4d 	bl	80058cc <xTaskPriorityInherit>
 8004232:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8004234:	f002 fbb8 	bl	80069a8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3324      	adds	r3, #36	@ 0x24
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 ffcf 	bl	80051e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004246:	69f8      	ldr	r0, [r7, #28]
 8004248:	f000 f938 	bl	80044bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800424c:	f000 fd10 	bl	8004c70 <xTaskResumeAll>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	f47f af76 	bne.w	8004144 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8004258:	4b19      	ldr	r3, [pc, #100]	@ (80042c0 <xQueueSemaphoreTake+0x1d8>)
 800425a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	e76c      	b.n	8004144 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800426a:	69f8      	ldr	r0, [r7, #28]
 800426c:	f000 f926 	bl	80044bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004270:	f000 fcfe 	bl	8004c70 <xTaskResumeAll>
 8004274:	e766      	b.n	8004144 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004276:	69f8      	ldr	r0, [r7, #28]
 8004278:	f000 f920 	bl	80044bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800427c:	f000 fcf8 	bl	8004c70 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	f000 f96d 	bl	8004560 <prvIsQueueEmpty>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f43f af5b 	beq.w	8004144 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00d      	beq.n	80042b0 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8004294:	f002 fb5c 	bl	8006950 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004298:	69f8      	ldr	r0, [r7, #28]
 800429a:	f000 f867 	bl	800436c <prvGetDisinheritPriorityAfterTimeout>
 800429e:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	6979      	ldr	r1, [r7, #20]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fc4c 	bl	8005b44 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80042ac:	f002 fb7c 	bl	80069a8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80042b0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3728      	adds	r7, #40	@ 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	08024dcc 	.word	0x08024dcc
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <uxQueueMessagesWaiting+0x18>
 80042d2:	f640 019b 	movw	r1, #2203	@ 0x89b
 80042d6:	4807      	ldr	r0, [pc, #28]	@ (80042f4 <uxQueueMessagesWaiting+0x30>)
 80042d8:	f7fd fbd8 	bl	8001a8c <vAssertCalled>

    taskENTER_CRITICAL();
 80042dc:	f002 fb38 	bl	8006950 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80042e6:	f002 fb5f 	bl	80069a8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	08024dcc 	.word	0x08024dcc

080042f8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <uxQueueSpacesAvailable+0x1c>
 800430a:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 800430e:	4809      	ldr	r0, [pc, #36]	@ (8004334 <uxQueueSpacesAvailable+0x3c>)
 8004310:	f7fd fbbc 	bl	8001a8c <vAssertCalled>

    taskENTER_CRITICAL();
 8004314:	f002 fb1c 	bl	8006950 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8004324:	f002 fb40 	bl	80069a8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8004328:	68bb      	ldr	r3, [r7, #8]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08024dcc 	.word	0x08024dcc

08004338 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <vQueueDelete+0x1c>
 800434a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800434e:	4806      	ldr	r0, [pc, #24]	@ (8004368 <vQueueDelete+0x30>)
 8004350:	f7fd fb9c 	bl	8001a8c <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f979 	bl	800464c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f002 fcce 	bl	8006cfc <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8004360:	bf00      	nop
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	08024dcc 	.word	0x08024dcc

0800436c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	e001      	b.n	800438e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800438e:	68fb      	ldr	r3, [r7, #12]
    }
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d14d      	bne.n	800445e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fb20 	bl	8005a0c <xTaskPriorityDisinherit>
 80043cc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e043      	b.n	800445e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d119      	bne.n	8004410 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6858      	ldr	r0, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	461a      	mov	r2, r3
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	f01e fd32 	bl	8022e50 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f4:	441a      	add	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d32b      	bcc.n	800445e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e026      	b.n	800445e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	68d8      	ldr	r0, [r3, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	461a      	mov	r2, r3
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	f01e fd18 	bl	8022e50 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	425b      	negs	r3, r3
 800442a:	441a      	add	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d207      	bcs.n	800444c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	425b      	negs	r3, r3
 8004446:	441a      	add	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d105      	bne.n	800445e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	3b01      	subs	r3, #1
 800445c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004466:	697b      	ldr	r3, [r7, #20]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	d303      	bcc.n	80044a4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68d9      	ldr	r1, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	461a      	mov	r2, r3
 80044ae:	6838      	ldr	r0, [r7, #0]
 80044b0:	f01e fcce 	bl	8022e50 <memcpy>
    }
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80044c4:	f002 fa44 	bl	8006950 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ce:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d0:	e011      	b.n	80044f6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d012      	beq.n	8004500 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3324      	adds	r3, #36	@ 0x24
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 feec 	bl	80052bc <xTaskRemoveFromEventList>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80044ea:	f001 f903 	bl	80056f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dce9      	bgt.n	80044d2 <prvUnlockQueue+0x16>
 80044fe:	e000      	b.n	8004502 <prvUnlockQueue+0x46>
                    break;
 8004500:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	22ff      	movs	r2, #255	@ 0xff
 8004506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800450a:	f002 fa4d 	bl	80069a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800450e:	f002 fa1f 	bl	8006950 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004518:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800451a:	e011      	b.n	8004540 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3310      	adds	r3, #16
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fec7 	bl	80052bc <xTaskRemoveFromEventList>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004534:	f001 f8de 	bl	80056f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004538:	7bbb      	ldrb	r3, [r7, #14]
 800453a:	3b01      	subs	r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004544:	2b00      	cmp	r3, #0
 8004546:	dce9      	bgt.n	800451c <prvUnlockQueue+0x60>
 8004548:	e000      	b.n	800454c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800454a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	22ff      	movs	r2, #255	@ 0xff
 8004550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004554:	f002 fa28 	bl	80069a8 <vPortExitCritical>
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004568:	f002 f9f2 	bl	8006950 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e001      	b.n	800457e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800457e:	f002 fa13 	bl	80069a8 <vPortExitCritical>

    return xReturn;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004594:	f002 f9dc 	bl	8006950 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d102      	bne.n	80045aa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80045a4:	2301      	movs	r3, #1
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e001      	b.n	80045ae <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80045ae:	f002 f9fb 	bl	80069a8 <vPortExitCritical>

    return xReturn;
 80045b2:	68fb      	ldr	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <vQueueAddToRegistry+0x1e>
 80045d0:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80045d4:	481b      	ldr	r0, [pc, #108]	@ (8004644 <vQueueAddToRegistry+0x88>)
 80045d6:	f7fd fa59 	bl	8001a8c <vAssertCalled>

        if( pcQueueName != NULL )
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d024      	beq.n	800462a <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e01e      	b.n	8004624 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80045e6:	4a18      	ldr	r2, [pc, #96]	@ (8004648 <vQueueAddToRegistry+0x8c>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d105      	bne.n	8004602 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4a13      	ldr	r2, [pc, #76]	@ (8004648 <vQueueAddToRegistry+0x8c>)
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
                    break;
 8004600:	e013      	b.n	800462a <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <vQueueAddToRegistry+0x62>
 8004608:	4a0f      	ldr	r2, [pc, #60]	@ (8004648 <vQueueAddToRegistry+0x8c>)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4a0b      	ldr	r2, [pc, #44]	@ (8004648 <vQueueAddToRegistry+0x8c>)
 800461a:	4413      	add	r3, r2
 800461c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b07      	cmp	r3, #7
 8004628:	d9dd      	bls.n	80045e6 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	08024dcc 	.word	0x08024dcc
 8004648:	20000de4 	.word	0x20000de4

0800464c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <vQueueUnregisterQueue+0x18>
 800465a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800465e:	4812      	ldr	r0, [pc, #72]	@ (80046a8 <vQueueUnregisterQueue+0x5c>)
 8004660:	f7fd fa14 	bl	8001a8c <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	e016      	b.n	8004698 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800466a:	4a10      	ldr	r2, [pc, #64]	@ (80046ac <vQueueUnregisterQueue+0x60>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d10b      	bne.n	8004692 <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800467a:	4a0c      	ldr	r2, [pc, #48]	@ (80046ac <vQueueUnregisterQueue+0x60>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2100      	movs	r1, #0
 8004680:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004684:	4a09      	ldr	r2, [pc, #36]	@ (80046ac <vQueueUnregisterQueue+0x60>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
                break;
 8004690:	e006      	b.n	80046a0 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b07      	cmp	r3, #7
 800469c:	d9e5      	bls.n	800466a <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	08024dcc 	.word	0x08024dcc
 80046ac:	20000de4 	.word	0x20000de4

080046b0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	@ 0x28
 80046b4:	af04      	add	r7, sp, #16
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f002 fa46 	bl	8006b54 <pvPortMalloc>
 80046c8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80046d0:	206c      	movs	r0, #108	@ 0x6c
 80046d2:	f002 fa3f 	bl	8006b54 <pvPortMalloc>
 80046d6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80046de:	226c      	movs	r2, #108	@ 0x6c
 80046e0:	2100      	movs	r1, #0
 80046e2:	6978      	ldr	r0, [r7, #20]
 80046e4:	f01e fcc1 	bl	802306a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ee:	e005      	b.n	80046fc <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80046f0:	6938      	ldr	r0, [r7, #16]
 80046f2:	f002 fb03 	bl	8006cfc <vPortFree>
 80046f6:	e001      	b.n	80046fc <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00d      	beq.n	800471e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004702:	2300      	movs	r3, #0
 8004704:	9303      	str	r3, [sp, #12]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	9302      	str	r3, [sp, #8]
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	68b9      	ldr	r1, [r7, #8]
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f829 	bl	8004770 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800471e:	697b      	ldr	r3, [r7, #20]
    }
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	9301      	str	r3, [sp, #4]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ffb3 	bl	80046b0 <prvCreateTask>
 800474a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d005      	beq.n	800475e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004752:	6938      	ldr	r0, [r7, #16]
 8004754:	f000 f890 	bl	8004878 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004758:	2301      	movs	r3, #1
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	e002      	b.n	8004764 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004764:	697b      	ldr	r3, [r7, #20]
    }
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800477e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004780:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	21a5      	movs	r1, #165	@ 0xa5
 800478a:	f01e fc6e 	bl	802306a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004798:	440b      	add	r3, r1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <prvInitialiseNewTask+0x4c>
 80047b2:	f240 712e 	movw	r1, #1838	@ 0x72e
 80047b6:	482f      	ldr	r0, [pc, #188]	@ (8004874 <prvInitialiseNewTask+0x104>)
 80047b8:	f7fd f968 	bl	8001a8c <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01e      	beq.n	8004800 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e012      	b.n	80047ee <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	4413      	add	r3, r2
 80047ce:	7819      	ldrb	r1, [r3, #0]
 80047d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	3334      	adds	r3, #52	@ 0x34
 80047d8:	460a      	mov	r2, r1
 80047da:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	4413      	add	r3, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d9e9      	bls.n	80047c8 <prvInitialiseNewTask+0x58>
 80047f4:	e000      	b.n	80047f8 <prvInitialiseNewTask+0x88>
            {
                break;
 80047f6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	2b06      	cmp	r3, #6
 8004804:	d904      	bls.n	8004810 <prvInitialiseNewTask+0xa0>
 8004806:	f240 7164 	movw	r1, #1892	@ 0x764
 800480a:	481a      	ldr	r0, [pc, #104]	@ (8004874 <prvInitialiseNewTask+0x104>)
 800480c:	f7fd f93e 	bl	8001a8c <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b06      	cmp	r3, #6
 8004814:	d901      	bls.n	800481a <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004816:	2306      	movs	r3, #6
 8004818:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f8c0 	bl	80039b0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004832:	3318      	adds	r3, #24
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f8bb 	bl	80039b0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800483e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f1c3 0207 	rsb	r2, r3, #7
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	6938      	ldr	r0, [r7, #16]
 8004856:	f001 ff43 	bl	80066e0 <pxPortInitialiseStack>
 800485a:	4602      	mov	r2, r0
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800486a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800486c:	bf00      	nop
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08024df0 	.word	0x08024df0

08004878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004880:	f002 f866 	bl	8006950 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004884:	4b41      	ldr	r3, [pc, #260]	@ (800498c <prvAddNewTaskToReadyList+0x114>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a40      	ldr	r2, [pc, #256]	@ (800498c <prvAddNewTaskToReadyList+0x114>)
 800488c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800488e:	4b40      	ldr	r3, [pc, #256]	@ (8004990 <prvAddNewTaskToReadyList+0x118>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004896:	4a3e      	ldr	r2, [pc, #248]	@ (8004990 <prvAddNewTaskToReadyList+0x118>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800489c:	4b3b      	ldr	r3, [pc, #236]	@ (800498c <prvAddNewTaskToReadyList+0x114>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80048a4:	f000 ff4a 	bl	800573c <prvInitialiseTaskLists>
 80048a8:	e00d      	b.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80048aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004994 <prvAddNewTaskToReadyList+0x11c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <prvAddNewTaskToReadyList+0x118>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	429a      	cmp	r2, r3
 80048be:	d802      	bhi.n	80048c6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80048c0:	4a33      	ldr	r2, [pc, #204]	@ (8004990 <prvAddNewTaskToReadyList+0x118>)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80048c6:	4b34      	ldr	r3, [pc, #208]	@ (8004998 <prvAddNewTaskToReadyList+0x120>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3301      	adds	r3, #1
 80048cc:	4a32      	ldr	r2, [pc, #200]	@ (8004998 <prvAddNewTaskToReadyList+0x120>)
 80048ce:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048d0:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <prvAddNewTaskToReadyList+0x120>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	2201      	movs	r2, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	4b2e      	ldr	r3, [pc, #184]	@ (800499c <prvAddNewTaskToReadyList+0x124>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	4a2d      	ldr	r2, [pc, #180]	@ (800499c <prvAddNewTaskToReadyList+0x124>)
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	492c      	ldr	r1, [pc, #176]	@ (80049a0 <prvAddNewTaskToReadyList+0x128>)
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	3304      	adds	r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	609a      	str	r2, [r3, #8]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	3204      	adds	r2, #4
 8004916:	605a      	str	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4a1c      	ldr	r2, [pc, #112]	@ (80049a0 <prvAddNewTaskToReadyList+0x128>)
 800492e:	441a      	add	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	615a      	str	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004938:	4919      	ldr	r1, [pc, #100]	@ (80049a0 <prvAddNewTaskToReadyList+0x128>)
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	4814      	ldr	r0, [pc, #80]	@ (80049a0 <prvAddNewTaskToReadyList+0x128>)
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4403      	add	r3, r0
 8004958:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800495a:	f002 f825 	bl	80069a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800495e:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <prvAddNewTaskToReadyList+0x11c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00e      	beq.n	8004984 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004966:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <prvAddNewTaskToReadyList+0x118>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	429a      	cmp	r2, r3
 8004972:	d207      	bcs.n	8004984 <prvAddNewTaskToReadyList+0x10c>
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <prvAddNewTaskToReadyList+0x12c>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000f24 	.word	0x20000f24
 8004990:	20000e24 	.word	0x20000e24
 8004994:	20000f30 	.word	0x20000f30
 8004998:	20000f40 	.word	0x20000f40
 800499c:	20000f2c 	.word	0x20000f2c
 80049a0:	20000e28 	.word	0x20000e28
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80049b4:	f001 ffcc 	bl	8006950 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d102      	bne.n	80049c4 <vTaskDelete+0x1c>
 80049be:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab8 <vTaskDelete+0x110>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	e000      	b.n	80049c6 <vTaskDelete+0x1e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff f859 	bl	8003a84 <uxListRemove>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d115      	bne.n	8004a04 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4937      	ldr	r1, [pc, #220]	@ (8004abc <vTaskDelete+0x114>)
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10a      	bne.n	8004a04 <vTaskDelete+0x5c>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	2201      	movs	r2, #1
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43da      	mvns	r2, r3
 80049fa:	4b31      	ldr	r3, [pc, #196]	@ (8004ac0 <vTaskDelete+0x118>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4013      	ands	r3, r2
 8004a00:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac0 <vTaskDelete+0x118>)
 8004a02:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	3318      	adds	r3, #24
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f837 	bl	8003a84 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8004a16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <vTaskDelete+0x11c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <vTaskDelete+0x11c>)
 8004a1e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8004a20:	4b25      	ldr	r3, [pc, #148]	@ (8004ab8 <vTaskDelete+0x110>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d101      	bne.n	8004a2e <vTaskDelete+0x86>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <vTaskDelete+0x88>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8004a32:	4b25      	ldr	r3, [pc, #148]	@ (8004ac8 <vTaskDelete+0x120>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <vTaskDelete+0xb4>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4619      	mov	r1, r3
 8004a46:	4821      	ldr	r0, [pc, #132]	@ (8004acc <vTaskDelete+0x124>)
 8004a48:	f7fe ffbf 	bl	80039ca <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8004a4c:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <vTaskDelete+0x128>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad0 <vTaskDelete+0x128>)
 8004a54:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8004a56:	2301      	movs	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	e006      	b.n	8004a6a <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <vTaskDelete+0x12c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	4a1c      	ldr	r2, [pc, #112]	@ (8004ad4 <vTaskDelete+0x12c>)
 8004a64:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8004a66:	f000 fee7 	bl	8005838 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004a6a:	f001 ff9d 	bl	80069a8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8004a74:	6938      	ldr	r0, [r7, #16]
 8004a76:	f000 fecf 	bl	8005818 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <vTaskDelete+0x120>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d015      	beq.n	8004aae <vTaskDelete+0x106>
            {
                if( pxTCB == pxCurrentTCB )
 8004a82:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab8 <vTaskDelete+0x110>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d110      	bne.n	8004aae <vTaskDelete+0x106>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8004a8c:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <vTaskDelete+0x130>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <vTaskDelete+0xf6>
 8004a94:	f640 1114 	movw	r1, #2324	@ 0x914
 8004a98:	4810      	ldr	r0, [pc, #64]	@ (8004adc <vTaskDelete+0x134>)
 8004a9a:	f7fc fff7 	bl	8001a8c <vAssertCalled>
                    taskYIELD_WITHIN_API();
 8004a9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <vTaskDelete+0x138>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000e24 	.word	0x20000e24
 8004abc:	20000e28 	.word	0x20000e28
 8004ac0:	20000f2c 	.word	0x20000f2c
 8004ac4:	20000f40 	.word	0x20000f40
 8004ac8:	20000f30 	.word	0x20000f30
 8004acc:	20000ef8 	.word	0x20000ef8
 8004ad0:	20000f0c 	.word	0x20000f0c
 8004ad4:	20000f24 	.word	0x20000f24
 8004ad8:	20000f4c 	.word	0x20000f4c
 8004adc:	08024df0 	.word	0x08024df0
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d011      	beq.n	8004b1a <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8004af6:	f000 f8ad 	bl	8004c54 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8004afa:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <vTaskDelay+0x54>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d004      	beq.n	8004b0c <vTaskDelay+0x28>
 8004b02:	f640 118e 	movw	r1, #2446	@ 0x98e
 8004b06:	480d      	ldr	r0, [pc, #52]	@ (8004b3c <vTaskDelay+0x58>)
 8004b08:	f7fc ffc0 	bl	8001a8c <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 fd64 	bl	80065dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004b14:	f000 f8ac 	bl	8004c70 <xTaskResumeAll>
 8004b18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d107      	bne.n	8004b30 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8004b20:	4b07      	ldr	r3, [pc, #28]	@ (8004b40 <vTaskDelay+0x5c>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000f4c 	.word	0x20000f4c
 8004b3c:	08024df0 	.word	0x08024df0
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	@ 0x28
 8004b48:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e011      	b.n	8004b7c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004b58:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <prvCreateIdleTasks+0x8c>)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	7819      	ldrb	r1, [r3, #0]
 8004b60:	463a      	mov	r2, r7
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	4413      	add	r3, r2
 8004b66:	460a      	mov	r2, r1
 8004b68:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	ddea      	ble.n	8004b58 <prvCreateIdleTasks+0x14>
 8004b82:	e000      	b.n	8004b86 <prvCreateIdleTasks+0x42>
        {
            break;
 8004b84:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004b86:	2300      	movs	r3, #0
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	e016      	b.n	8004bba <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	@ (8004bd4 <prvCreateIdleTasks+0x90>)
 8004b8e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4a10      	ldr	r2, [pc, #64]	@ (8004bd8 <prvCreateIdleTasks+0x94>)
 8004b96:	4413      	add	r3, r2
 8004b98:	4639      	mov	r1, r7
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ba6:	6938      	ldr	r0, [r7, #16]
 8004ba8:	f7ff fdbe 	bl	8004728 <xTaskCreate>
 8004bac:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dde5      	ble.n	8004b8c <prvCreateIdleTasks+0x48>
 8004bc0:	e000      	b.n	8004bc4 <prvCreateIdleTasks+0x80>
        {
            break;
 8004bc2:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	08024e14 	.word	0x08024e14
 8004bd4:	0800570d 	.word	0x0800570d
 8004bd8:	20000f48 	.word	0x20000f48

08004bdc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8004be2:	f7ff ffaf 	bl	8004b44 <prvCreateIdleTasks>
 8004be6:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d118      	bne.n	8004c20 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8004bee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004bf2:	b672      	cpsid	i
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	b662      	cpsie	i
 8004c02:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004c04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <vTaskStartScheduler+0x64>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <vTaskStartScheduler+0x68>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <vTaskStartScheduler+0x6c>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004c1a:	f001 fdeb 	bl	80067f4 <xPortStartScheduler>
 8004c1e:	e008      	b.n	8004c32 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d104      	bne.n	8004c32 <vTaskStartScheduler+0x56>
 8004c28:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004c2c:	4807      	ldr	r0, [pc, #28]	@ (8004c4c <vTaskStartScheduler+0x70>)
 8004c2e:	f7fc ff2d 	bl	8001a8c <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004c32:	4b07      	ldr	r3, [pc, #28]	@ (8004c50 <vTaskStartScheduler+0x74>)
 8004c34:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000f44 	.word	0x20000f44
 8004c44:	20000f30 	.word	0x20000f30
 8004c48:	20000f28 	.word	0x20000f28
 8004c4c:	08024df0 	.word	0x08024df0
 8004c50:	20000008 	.word	0x20000008

08004c54 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <vTaskSuspendAll+0x18>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a03      	ldr	r2, [pc, #12]	@ (8004c6c <vTaskSuspendAll+0x18>)
 8004c60:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000f4c 	.word	0x20000f4c

08004c70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004c7e:	f001 fe67 	bl	8006950 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004c86:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <xTaskResumeAll+0x1e0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d104      	bne.n	8004c98 <xTaskResumeAll+0x28>
 8004c8e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004c92:	4870      	ldr	r0, [pc, #448]	@ (8004e54 <xTaskResumeAll+0x1e4>)
 8004c94:	f7fc fefa 	bl	8001a8c <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004c98:	4b6d      	ldr	r3, [pc, #436]	@ (8004e50 <xTaskResumeAll+0x1e0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8004e50 <xTaskResumeAll+0x1e0>)
 8004ca0:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <xTaskResumeAll+0x1e0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f040 80ca 	bne.w	8004e40 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cac:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <xTaskResumeAll+0x1e8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80c5 	beq.w	8004e40 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cb6:	e08e      	b.n	8004dd6 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cb8:	4b68      	ldr	r3, [pc, #416]	@ (8004e5c <xTaskResumeAll+0x1ec>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	6a12      	ldr	r2, [r2, #32]
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	69d2      	ldr	r2, [r2, #28]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3318      	adds	r3, #24
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d103      	bne.n	8004cee <xTaskResumeAll+0x7e>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	1e5a      	subs	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	68d2      	ldr	r2, [r2, #12]
 8004d0c:	609a      	str	r2, [r3, #8]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	69fa      	ldr	r2, [r7, #28]
 8004d14:	6892      	ldr	r2, [r2, #8]
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d103      	bne.n	8004d2c <xTaskResumeAll+0xbc>
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	615a      	str	r2, [r3, #20]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1e5a      	subs	r2, r3, #1
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	2201      	movs	r2, #1
 8004d42:	409a      	lsls	r2, r3
 8004d44:	4b46      	ldr	r3, [pc, #280]	@ (8004e60 <xTaskResumeAll+0x1f0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	4a45      	ldr	r2, [pc, #276]	@ (8004e60 <xTaskResumeAll+0x1f0>)
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d52:	4944      	ldr	r1, [pc, #272]	@ (8004e64 <xTaskResumeAll+0x1f4>)
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3304      	adds	r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	3204      	adds	r2, #4
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4a34      	ldr	r2, [pc, #208]	@ (8004e64 <xTaskResumeAll+0x1f4>)
 8004d92:	441a      	add	r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	615a      	str	r2, [r3, #20]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9c:	4931      	ldr	r1, [pc, #196]	@ (8004e64 <xTaskResumeAll+0x1f4>)
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dae:	1c59      	adds	r1, r3, #1
 8004db0:	482c      	ldr	r0, [pc, #176]	@ (8004e64 <xTaskResumeAll+0x1f4>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4403      	add	r3, r0
 8004dbc:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	4b29      	ldr	r3, [pc, #164]	@ (8004e68 <xTaskResumeAll+0x1f8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d904      	bls.n	8004dd6 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004dcc:	4a27      	ldr	r2, [pc, #156]	@ (8004e6c <xTaskResumeAll+0x1fc>)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd6:	4b21      	ldr	r3, [pc, #132]	@ (8004e5c <xTaskResumeAll+0x1ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f47f af6c 	bne.w	8004cb8 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004de6:	f000 fd27 	bl	8005838 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004dea:	4b21      	ldr	r3, [pc, #132]	@ (8004e70 <xTaskResumeAll+0x200>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004df6:	f000 f86d 	bl	8004ed4 <xTaskIncrementTick>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d004      	beq.n	8004e0a <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004e00:	4a1a      	ldr	r2, [pc, #104]	@ (8004e6c <xTaskResumeAll+0x1fc>)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2101      	movs	r1, #1
 8004e06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ef      	bne.n	8004df6 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004e16:	4b16      	ldr	r3, [pc, #88]	@ (8004e70 <xTaskResumeAll+0x200>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004e1c:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <xTaskResumeAll+0x1fc>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e68 <xTaskResumeAll+0x1f8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <xTaskResumeAll+0x204>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e40:	f001 fdb2 	bl	80069a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004e44:	69bb      	ldr	r3, [r7, #24]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000f4c 	.word	0x20000f4c
 8004e54:	08024df0 	.word	0x08024df0
 8004e58:	20000f24 	.word	0x20000f24
 8004e5c:	20000ee4 	.word	0x20000ee4
 8004e60:	20000f2c 	.word	0x20000f2c
 8004e64:	20000e28 	.word	0x20000e28
 8004e68:	20000e24 	.word	0x20000e24
 8004e6c:	20000f38 	.word	0x20000f38
 8004e70:	20000f34 	.word	0x20000f34
 8004e74:	e000ed04 	.word	0xe000ed04

08004e78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004e7e:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <xTaskGetTickCount+0x1c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004e84:	687b      	ldr	r3, [r7, #4]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000f28 	.word	0x20000f28

08004e98 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <pcTaskGetName+0x14>
 8004ea6:	4b09      	ldr	r3, [pc, #36]	@ (8004ecc <pcTaskGetName+0x34>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	e000      	b.n	8004eae <pcTaskGetName+0x16>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <pcTaskGetName+0x28>
 8004eb6:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004eba:	4805      	ldr	r0, [pc, #20]	@ (8004ed0 <pcTaskGetName+0x38>)
 8004ebc:	f7fc fde6 	bl	8001a8c <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3334      	adds	r3, #52	@ 0x34
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000e24 	.word	0x20000e24
 8004ed0:	08024df0 	.word	0x08024df0

08004ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004ede:	4b7b      	ldr	r3, [pc, #492]	@ (80050cc <xTaskIncrementTick+0x1f8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 80e8 	bne.w	80050b8 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ee8:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <xTaskIncrementTick+0x1fc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004ef0:	4a77      	ldr	r2, [pc, #476]	@ (80050d0 <xTaskIncrementTick+0x1fc>)
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11a      	bne.n	8004f32 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004efc:	4b75      	ldr	r3, [pc, #468]	@ (80050d4 <xTaskIncrementTick+0x200>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <xTaskIncrementTick+0x3c>
 8004f06:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004f0a:	4873      	ldr	r0, [pc, #460]	@ (80050d8 <xTaskIncrementTick+0x204>)
 8004f0c:	f7fc fdbe 	bl	8001a8c <vAssertCalled>
 8004f10:	4b70      	ldr	r3, [pc, #448]	@ (80050d4 <xTaskIncrementTick+0x200>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	4b71      	ldr	r3, [pc, #452]	@ (80050dc <xTaskIncrementTick+0x208>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80050d4 <xTaskIncrementTick+0x200>)
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4a6f      	ldr	r2, [pc, #444]	@ (80050dc <xTaskIncrementTick+0x208>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b6e      	ldr	r3, [pc, #440]	@ (80050e0 <xTaskIncrementTick+0x20c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80050e0 <xTaskIncrementTick+0x20c>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	f000 fc83 	bl	8005838 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <xTaskIncrementTick+0x210>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	f0c0 80a8 	bcc.w	800508e <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f3e:	4b65      	ldr	r3, [pc, #404]	@ (80050d4 <xTaskIncrementTick+0x200>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <xTaskIncrementTick+0x210>)
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	601a      	str	r2, [r3, #0]
                    break;
 8004f50:	e09d      	b.n	800508e <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f52:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <xTaskIncrementTick+0x200>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d203      	bcs.n	8004f72 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004f6a:	4a5e      	ldr	r2, [pc, #376]	@ (80050e4 <xTaskIncrementTick+0x210>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6013      	str	r3, [r2, #0]
                        break;
 8004f70:	e08d      	b.n	800508e <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	68d2      	ldr	r2, [r2, #12]
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	6892      	ldr	r2, [r2, #8]
 8004f8a:	605a      	str	r2, [r3, #4]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3304      	adds	r3, #4
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d103      	bne.n	8004fa0 <xTaskIncrementTick+0xcc>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	615a      	str	r2, [r3, #20]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01e      	beq.n	8004ff6 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fbc:	607b      	str	r3, [r7, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	6a12      	ldr	r2, [r2, #32]
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	69d2      	ldr	r2, [r2, #28]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3318      	adds	r3, #24
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d103      	bne.n	8004fe6 <xTaskIncrementTick+0x112>
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1e5a      	subs	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80050e8 <xTaskIncrementTick+0x214>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	4a38      	ldr	r2, [pc, #224]	@ (80050e8 <xTaskIncrementTick+0x214>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4937      	ldr	r1, [pc, #220]	@ (80050ec <xTaskIncrementTick+0x218>)
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3304      	adds	r3, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	3204      	adds	r2, #4
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	609a      	str	r2, [r3, #8]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <xTaskIncrementTick+0x218>)
 800504c:	441a      	add	r2, r3
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	615a      	str	r2, [r3, #20]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005056:	4925      	ldr	r1, [pc, #148]	@ (80050ec <xTaskIncrementTick+0x218>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005068:	1c59      	adds	r1, r3, #1
 800506a:	4820      	ldr	r0, [pc, #128]	@ (80050ec <xTaskIncrementTick+0x218>)
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4403      	add	r3, r0
 8005076:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800507c:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <xTaskIncrementTick+0x21c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	429a      	cmp	r2, r3
 8005084:	f67f af5b 	bls.w	8004f3e <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800508c:	e757      	b.n	8004f3e <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800508e:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <xTaskIncrementTick+0x21c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005094:	4915      	ldr	r1, [pc, #84]	@ (80050ec <xTaskIncrementTick+0x218>)
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d901      	bls.n	80050aa <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80050aa:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <xTaskIncrementTick+0x220>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e004      	b.n	80050c2 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80050b8:	4b0f      	ldr	r3, [pc, #60]	@ (80050f8 <xTaskIncrementTick+0x224>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a0e      	ldr	r2, [pc, #56]	@ (80050f8 <xTaskIncrementTick+0x224>)
 80050c0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80050c2:	69fb      	ldr	r3, [r7, #28]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000f4c 	.word	0x20000f4c
 80050d0:	20000f28 	.word	0x20000f28
 80050d4:	20000edc 	.word	0x20000edc
 80050d8:	08024df0 	.word	0x08024df0
 80050dc:	20000ee0 	.word	0x20000ee0
 80050e0:	20000f3c 	.word	0x20000f3c
 80050e4:	20000f44 	.word	0x20000f44
 80050e8:	20000f2c 	.word	0x20000f2c
 80050ec:	20000e28 	.word	0x20000e28
 80050f0:	20000e24 	.word	0x20000e24
 80050f4:	20000f38 	.word	0x20000f38
 80050f8:	20000f34 	.word	0x20000f34

080050fc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005102:	4b30      	ldr	r3, [pc, #192]	@ (80051c4 <vTaskSwitchContext+0xc8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800510a:	4b2f      	ldr	r3, [pc, #188]	@ (80051c8 <vTaskSwitchContext+0xcc>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005110:	e053      	b.n	80051ba <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8005112:	4b2d      	ldr	r3, [pc, #180]	@ (80051c8 <vTaskSwitchContext+0xcc>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8005118:	f7fc fcb0 	bl	8001a7c <ulGetRunTimeCounterValue>
 800511c:	4603      	mov	r3, r0
 800511e:	4a2b      	ldr	r2, [pc, #172]	@ (80051cc <vTaskSwitchContext+0xd0>)
 8005120:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8005122:	4b2a      	ldr	r3, [pc, #168]	@ (80051cc <vTaskSwitchContext+0xd0>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b2a      	ldr	r3, [pc, #168]	@ (80051d0 <vTaskSwitchContext+0xd4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d909      	bls.n	8005142 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800512e:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <vTaskSwitchContext+0xd0>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <vTaskSwitchContext+0xd4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	1ad1      	subs	r1, r2, r3
 8005138:	4b26      	ldr	r3, [pc, #152]	@ (80051d4 <vTaskSwitchContext+0xd8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800513e:	440a      	add	r2, r1
 8005140:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8005142:	4b22      	ldr	r3, [pc, #136]	@ (80051cc <vTaskSwitchContext+0xd0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a22      	ldr	r2, [pc, #136]	@ (80051d0 <vTaskSwitchContext+0xd4>)
 8005148:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800514a:	4b23      	ldr	r3, [pc, #140]	@ (80051d8 <vTaskSwitchContext+0xdc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f1c3 031f 	rsb	r3, r3, #31
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	491e      	ldr	r1, [pc, #120]	@ (80051dc <vTaskSwitchContext+0xe0>)
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4613      	mov	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <vTaskSwitchContext+0x82>
 8005174:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8005178:	4819      	ldr	r0, [pc, #100]	@ (80051e0 <vTaskSwitchContext+0xe4>)
 800517a:	f7fc fc87 	bl	8001a8c <vAssertCalled>
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4a14      	ldr	r2, [pc, #80]	@ (80051dc <vTaskSwitchContext+0xe0>)
 800518a:	4413      	add	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	605a      	str	r2, [r3, #4]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	3308      	adds	r3, #8
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d103      	bne.n	80051ac <vTaskSwitchContext+0xb0>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	4a08      	ldr	r2, [pc, #32]	@ (80051d4 <vTaskSwitchContext+0xd8>)
 80051b4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80051b6:	4b07      	ldr	r3, [pc, #28]	@ (80051d4 <vTaskSwitchContext+0xd8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
    }
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000f4c 	.word	0x20000f4c
 80051c8:	20000f38 	.word	0x20000f38
 80051cc:	20000f54 	.word	0x20000f54
 80051d0:	20000f50 	.word	0x20000f50
 80051d4:	20000e24 	.word	0x20000e24
 80051d8:	20000f2c 	.word	0x20000f2c
 80051dc:	20000e28 	.word	0x20000e28
 80051e0:	08024df0 	.word	0x08024df0

080051e4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <vTaskPlaceOnEventList+0x1a>
 80051f4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 80051f8:	4808      	ldr	r0, [pc, #32]	@ (800521c <vTaskPlaceOnEventList+0x38>)
 80051fa:	f7fc fc47 	bl	8001a8c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051fe:	4b08      	ldr	r3, [pc, #32]	@ (8005220 <vTaskPlaceOnEventList+0x3c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3318      	adds	r3, #24
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fe fc03 	bl	8003a12 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800520c:	2101      	movs	r1, #1
 800520e:	6838      	ldr	r0, [r7, #0]
 8005210:	f001 f9e4 	bl	80065dc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	08024df0 	.word	0x08024df0
 8005220:	20000e24 	.word	0x20000e24

08005224 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <vTaskPlaceOnUnorderedEventList+0x1c>
 8005236:	f241 419e 	movw	r1, #5278	@ 0x149e
 800523a:	481d      	ldr	r0, [pc, #116]	@ (80052b0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 800523c:	f7fc fc26 	bl	8001a8c <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8005240:	4b1c      	ldr	r3, [pc, #112]	@ (80052b4 <vTaskPlaceOnUnorderedEventList+0x90>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <vTaskPlaceOnUnorderedEventList+0x2e>
 8005248:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 800524c:	4818      	ldr	r0, [pc, #96]	@ (80052b0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 800524e:	f7fc fc1d 	bl	8001a8c <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005252:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800525c:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	61da      	str	r2, [r3, #28]
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	6892      	ldr	r2, [r2, #8]
 8005274:	621a      	str	r2, [r3, #32]
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	3218      	adds	r2, #24
 8005280:	605a      	str	r2, [r3, #4]
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f103 0218 	add.w	r2, r3, #24
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	609a      	str	r2, [r3, #8]
 800528e:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	629a      	str	r2, [r3, #40]	@ 0x28
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052a0:	2101      	movs	r1, #1
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 f99a 	bl	80065dc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 80052a8:	bf00      	nop
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	08024df0 	.word	0x08024df0
 80052b4:	20000f4c 	.word	0x20000f4c
 80052b8:	20000e24 	.word	0x20000e24

080052bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <xTaskRemoveFromEventList+0x20>
 80052d2:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 80052d6:	485b      	ldr	r0, [pc, #364]	@ (8005444 <xTaskRemoveFromEventList+0x188>)
 80052d8:	f7fc fbd8 	bl	8001a8c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	6a12      	ldr	r2, [r2, #32]
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	69d2      	ldr	r2, [r2, #28]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	3318      	adds	r3, #24
 80052fe:	429a      	cmp	r2, r3
 8005300:	d103      	bne.n	800530a <xTaskRemoveFromEventList+0x4e>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	2200      	movs	r2, #0
 800530e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800531a:	4b4b      	ldr	r3, [pc, #300]	@ (8005448 <xTaskRemoveFromEventList+0x18c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d160      	bne.n	80053e4 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	68d2      	ldr	r2, [r2, #12]
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	69ba      	ldr	r2, [r7, #24]
 8005338:	6892      	ldr	r2, [r2, #8]
 800533a:	605a      	str	r2, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	3304      	adds	r3, #4
 8005344:	429a      	cmp	r2, r3
 8005346:	d103      	bne.n	8005350 <xTaskRemoveFromEventList+0x94>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2200      	movs	r2, #0
 8005354:	615a      	str	r2, [r3, #20]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	1e5a      	subs	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	2201      	movs	r2, #1
 8005366:	409a      	lsls	r2, r3
 8005368:	4b38      	ldr	r3, [pc, #224]	@ (800544c <xTaskRemoveFromEventList+0x190>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4313      	orrs	r3, r2
 800536e:	4a37      	ldr	r2, [pc, #220]	@ (800544c <xTaskRemoveFromEventList+0x190>)
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	4936      	ldr	r1, [pc, #216]	@ (8005450 <xTaskRemoveFromEventList+0x194>)
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	3304      	adds	r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	609a      	str	r2, [r3, #8]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	3204      	adds	r2, #4
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4a26      	ldr	r2, [pc, #152]	@ (8005450 <xTaskRemoveFromEventList+0x194>)
 80053b6:	441a      	add	r2, r3
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	615a      	str	r2, [r3, #20]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c0:	4923      	ldr	r1, [pc, #140]	@ (8005450 <xTaskRemoveFromEventList+0x194>)
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	440b      	add	r3, r1
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69ba      	ldr	r2, [r7, #24]
 80053d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053d2:	1c59      	adds	r1, r3, #1
 80053d4:	481e      	ldr	r0, [pc, #120]	@ (8005450 <xTaskRemoveFromEventList+0x194>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4403      	add	r3, r0
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	e01b      	b.n	800541c <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <xTaskRemoveFromEventList+0x198>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	61da      	str	r2, [r3, #28]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	621a      	str	r2, [r3, #32]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	3218      	adds	r2, #24
 8005400:	605a      	str	r2, [r3, #4]
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	f103 0218 	add.w	r2, r3, #24
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	4a11      	ldr	r2, [pc, #68]	@ (8005454 <xTaskRemoveFromEventList+0x198>)
 8005410:	629a      	str	r2, [r3, #40]	@ 0x28
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <xTaskRemoveFromEventList+0x198>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	4a0e      	ldr	r2, [pc, #56]	@ (8005454 <xTaskRemoveFromEventList+0x198>)
 800541a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005420:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <xTaskRemoveFromEventList+0x19c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005426:	429a      	cmp	r2, r3
 8005428:	d905      	bls.n	8005436 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800542e:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <xTaskRemoveFromEventList+0x1a0>)
 8005430:	2201      	movs	r2, #1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	e001      	b.n	800543a <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800543a:	69fb      	ldr	r3, [r7, #28]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	08024df0 	.word	0x08024df0
 8005448:	20000f4c 	.word	0x20000f4c
 800544c:	20000f2c 	.word	0x20000f2c
 8005450:	20000e28 	.word	0x20000e28
 8005454:	20000ee4 	.word	0x20000ee4
 8005458:	20000e24 	.word	0x20000e24
 800545c:	20000f38 	.word	0x20000f38

08005460 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800546a:	4b52      	ldr	r3, [pc, #328]	@ (80055b4 <vTaskRemoveFromUnorderedEventList+0x154>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d104      	bne.n	800547c <vTaskRemoveFromUnorderedEventList+0x1c>
 8005472:	f241 5143 	movw	r1, #5443	@ 0x1543
 8005476:	4850      	ldr	r0, [pc, #320]	@ (80055b8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005478:	f7fc fb08 	bl	8001a8c <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <vTaskRemoveFromUnorderedEventList+0x3c>
 8005492:	f241 514e 	movw	r1, #5454	@ 0x154e
 8005496:	4848      	ldr	r0, [pc, #288]	@ (80055b8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005498:	f7fc faf8 	bl	8001a8c <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6892      	ldr	r2, [r2, #8]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6852      	ldr	r2, [r2, #4]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d103      	bne.n	80054c8 <vTaskRemoveFromUnorderedEventList+0x68>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	611a      	str	r2, [r3, #16]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	1e5a      	subs	r2, r3, #1
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	68d2      	ldr	r2, [r2, #12]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	6892      	ldr	r2, [r2, #8]
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	3304      	adds	r3, #4
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d103      	bne.n	8005506 <vTaskRemoveFromUnorderedEventList+0xa6>
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2200      	movs	r2, #0
 800550a:	615a      	str	r2, [r3, #20]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551a:	2201      	movs	r2, #1
 800551c:	409a      	lsls	r2, r3
 800551e:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552c:	4924      	ldr	r1, [pc, #144]	@ (80055c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	3304      	adds	r3, #4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	3204      	adds	r2, #4
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1d1a      	adds	r2, r3, #4
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	609a      	str	r2, [r3, #8]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	615a      	str	r2, [r3, #20]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005576:	4912      	ldr	r1, [pc, #72]	@ (80055c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005588:	1c59      	adds	r1, r3, #1
 800558a:	480d      	ldr	r0, [pc, #52]	@ (80055c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4403      	add	r3, r0
 8005596:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559c:	4b09      	ldr	r3, [pc, #36]	@ (80055c4 <vTaskRemoveFromUnorderedEventList+0x164>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d902      	bls.n	80055ac <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 80055a6:	4b08      	ldr	r3, [pc, #32]	@ (80055c8 <vTaskRemoveFromUnorderedEventList+0x168>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000f4c 	.word	0x20000f4c
 80055b8:	08024df0 	.word	0x08024df0
 80055bc:	20000f2c 	.word	0x20000f2c
 80055c0:	20000e28 	.word	0x20000e28
 80055c4:	20000e24 	.word	0x20000e24
 80055c8:	20000f38 	.word	0x20000f38

080055cc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <vTaskSetTimeOutState+0x18>
 80055da:	f241 5186 	movw	r1, #5510	@ 0x1586
 80055de:	4809      	ldr	r0, [pc, #36]	@ (8005604 <vTaskSetTimeOutState+0x38>)
 80055e0:	f7fc fa54 	bl	8001a8c <vAssertCalled>
    taskENTER_CRITICAL();
 80055e4:	f001 f9b4 	bl	8006950 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055e8:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <vTaskSetTimeOutState+0x3c>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80055f0:	4b06      	ldr	r3, [pc, #24]	@ (800560c <vTaskSetTimeOutState+0x40>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80055f8:	f001 f9d6 	bl	80069a8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	08024df0 	.word	0x08024df0
 8005608:	20000f3c 	.word	0x20000f3c
 800560c:	20000f28 	.word	0x20000f28

08005610 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <vTaskInternalSetTimeOutState+0x24>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <vTaskInternalSetTimeOutState+0x28>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000f3c 	.word	0x20000f3c
 8005638:	20000f28 	.word	0x20000f28

0800563c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <xTaskCheckForTimeOut+0x1a>
 800564c:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8005650:	4825      	ldr	r0, [pc, #148]	@ (80056e8 <xTaskCheckForTimeOut+0xac>)
 8005652:	f7fc fa1b 	bl	8001a8c <vAssertCalled>
    configASSERT( pxTicksToWait );
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <xTaskCheckForTimeOut+0x2a>
 800565c:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8005660:	4821      	ldr	r0, [pc, #132]	@ (80056e8 <xTaskCheckForTimeOut+0xac>)
 8005662:	f7fc fa13 	bl	8001a8c <vAssertCalled>

    taskENTER_CRITICAL();
 8005666:	f001 f973 	bl	8006950 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800566a:	4b20      	ldr	r3, [pc, #128]	@ (80056ec <xTaskCheckForTimeOut+0xb0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d102      	bne.n	800568a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e026      	b.n	80056d8 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b18      	ldr	r3, [pc, #96]	@ (80056f0 <xTaskCheckForTimeOut+0xb4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d00a      	beq.n	80056ac <xTaskCheckForTimeOut+0x70>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d305      	bcc.n	80056ac <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e015      	b.n	80056d8 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d20b      	bcs.n	80056ce <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad2      	subs	r2, r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff ffa4 	bl	8005610 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e004      	b.n	80056d8 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80056d8:	f001 f966 	bl	80069a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80056dc:	697b      	ldr	r3, [r7, #20]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	08024df0 	.word	0x08024df0
 80056ec:	20000f28 	.word	0x20000f28
 80056f0:	20000f3c 	.word	0x20000f3c

080056f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <vTaskMissedYield+0x14>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20000f38 	.word	0x20000f38

0800570c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005714:	f000 f852 	bl	80057bc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005718:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <prvIdleTask+0x28>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d9f9      	bls.n	8005714 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <prvIdleTask+0x2c>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005730:	e7f0      	b.n	8005714 <prvIdleTask+0x8>
 8005732:	bf00      	nop
 8005734:	20000e28 	.word	0x20000e28
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	e00c      	b.n	8005762 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4a12      	ldr	r2, [pc, #72]	@ (800579c <prvInitialiseTaskLists+0x60>)
 8005754:	4413      	add	r3, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f7fe f90a 	bl	8003970 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3301      	adds	r3, #1
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d9ef      	bls.n	8005748 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005768:	480d      	ldr	r0, [pc, #52]	@ (80057a0 <prvInitialiseTaskLists+0x64>)
 800576a:	f7fe f901 	bl	8003970 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800576e:	480d      	ldr	r0, [pc, #52]	@ (80057a4 <prvInitialiseTaskLists+0x68>)
 8005770:	f7fe f8fe 	bl	8003970 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005774:	480c      	ldr	r0, [pc, #48]	@ (80057a8 <prvInitialiseTaskLists+0x6c>)
 8005776:	f7fe f8fb 	bl	8003970 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800577a:	480c      	ldr	r0, [pc, #48]	@ (80057ac <prvInitialiseTaskLists+0x70>)
 800577c:	f7fe f8f8 	bl	8003970 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005780:	480b      	ldr	r0, [pc, #44]	@ (80057b0 <prvInitialiseTaskLists+0x74>)
 8005782:	f7fe f8f5 	bl	8003970 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005786:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <prvInitialiseTaskLists+0x78>)
 8005788:	4a05      	ldr	r2, [pc, #20]	@ (80057a0 <prvInitialiseTaskLists+0x64>)
 800578a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <prvInitialiseTaskLists+0x7c>)
 800578e:	4a05      	ldr	r2, [pc, #20]	@ (80057a4 <prvInitialiseTaskLists+0x68>)
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000e28 	.word	0x20000e28
 80057a0:	20000eb4 	.word	0x20000eb4
 80057a4:	20000ec8 	.word	0x20000ec8
 80057a8:	20000ee4 	.word	0x20000ee4
 80057ac:	20000ef8 	.word	0x20000ef8
 80057b0:	20000f10 	.word	0x20000f10
 80057b4:	20000edc 	.word	0x20000edc
 80057b8:	20000ee0 	.word	0x20000ee0

080057bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057c2:	e019      	b.n	80057f8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80057c4:	f001 f8c4 	bl	8006950 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057c8:	4b10      	ldr	r3, [pc, #64]	@ (800580c <prvCheckTasksWaitingTermination+0x50>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3304      	adds	r3, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f955 	bl	8003a84 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <prvCheckTasksWaitingTermination+0x54>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3b01      	subs	r3, #1
 80057e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005810 <prvCheckTasksWaitingTermination+0x54>)
 80057e2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80057e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005814 <prvCheckTasksWaitingTermination+0x58>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	4a0a      	ldr	r2, [pc, #40]	@ (8005814 <prvCheckTasksWaitingTermination+0x58>)
 80057ec:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80057ee:	f001 f8db 	bl	80069a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f810 	bl	8005818 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057f8:	4b06      	ldr	r3, [pc, #24]	@ (8005814 <prvCheckTasksWaitingTermination+0x58>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e1      	bne.n	80057c4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000ef8 	.word	0x20000ef8
 8005810:	20000f24 	.word	0x20000f24
 8005814:	20000f0c 	.word	0x20000f0c

08005818 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	4618      	mov	r0, r3
 8005826:	f001 fa69 	bl	8006cfc <vPortFree>
            vPortFree( pxTCB );
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 fa66 	bl	8006cfc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005830:	bf00      	nop
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <prvResetNextTaskUnblockTime+0x30>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005846:	4b09      	ldr	r3, [pc, #36]	@ (800586c <prvResetNextTaskUnblockTime+0x34>)
 8005848:	f04f 32ff 	mov.w	r2, #4294967295
 800584c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800584e:	e005      	b.n	800585c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005850:	4b05      	ldr	r3, [pc, #20]	@ (8005868 <prvResetNextTaskUnblockTime+0x30>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a04      	ldr	r2, [pc, #16]	@ (800586c <prvResetNextTaskUnblockTime+0x34>)
 800585a:	6013      	str	r3, [r2, #0]
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000edc 	.word	0x20000edc
 800586c:	20000f44 	.word	0x20000f44

08005870 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8005876:	4b05      	ldr	r3, [pc, #20]	@ (800588c <xTaskGetCurrentTaskHandle+0x1c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800587c:	687b      	ldr	r3, [r7, #4]
        }
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000e24 	.word	0x20000e24

08005890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005896:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <xTaskGetSchedulerState+0x34>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800589e:	2301      	movs	r3, #1
 80058a0:	607b      	str	r3, [r7, #4]
 80058a2:	e008      	b.n	80058b6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <xTaskGetSchedulerState+0x38>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80058ac:	2302      	movs	r3, #2
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e001      	b.n	80058b6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80058b6:	687b      	ldr	r3, [r7, #4]
    }
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	20000f30 	.word	0x20000f30
 80058c8:	20000f4c 	.word	0x20000f4c

080058cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8089 	beq.w	80059f6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e8:	4b45      	ldr	r3, [pc, #276]	@ (8005a00 <xTaskPriorityInherit+0x134>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d278      	bcs.n	80059e4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	db06      	blt.n	8005908 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80058fa:	4b41      	ldr	r3, [pc, #260]	@ (8005a00 <xTaskPriorityInherit+0x134>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f1c3 0207 	rsb	r2, r3, #7
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	6959      	ldr	r1, [r3, #20]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a3a      	ldr	r2, [pc, #232]	@ (8005a04 <xTaskPriorityInherit+0x138>)
 800591a:	4413      	add	r3, r2
 800591c:	4299      	cmp	r1, r3
 800591e:	d159      	bne.n	80059d4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3304      	adds	r3, #4
 8005924:	4618      	mov	r0, r3
 8005926:	f7fe f8ad 	bl	8003a84 <uxListRemove>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	2201      	movs	r2, #1
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	4b32      	ldr	r3, [pc, #200]	@ (8005a08 <xTaskPriorityInherit+0x13c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4013      	ands	r3, r2
 8005942:	4a31      	ldr	r2, [pc, #196]	@ (8005a08 <xTaskPriorityInherit+0x13c>)
 8005944:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005946:	4b2e      	ldr	r3, [pc, #184]	@ (8005a00 <xTaskPriorityInherit+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	2201      	movs	r2, #1
 8005956:	409a      	lsls	r2, r3
 8005958:	4b2b      	ldr	r3, [pc, #172]	@ (8005a08 <xTaskPriorityInherit+0x13c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4313      	orrs	r3, r2
 800595e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <xTaskPriorityInherit+0x13c>)
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005966:	4927      	ldr	r1, [pc, #156]	@ (8005a04 <xTaskPriorityInherit+0x138>)
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	440b      	add	r3, r1
 8005972:	3304      	adds	r3, #4
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	609a      	str	r2, [r3, #8]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	3204      	adds	r2, #4
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1d1a      	adds	r2, r3, #4
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <xTaskPriorityInherit+0x138>)
 80059a6:	441a      	add	r2, r3
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b0:	4914      	ldr	r1, [pc, #80]	@ (8005a04 <xTaskPriorityInherit+0x138>)
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80059c2:	1c59      	adds	r1, r3, #1
 80059c4:	480f      	ldr	r0, [pc, #60]	@ (8005a04 <xTaskPriorityInherit+0x138>)
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4403      	add	r3, r0
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	e004      	b.n	80059de <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <xTaskPriorityInherit+0x134>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	e008      	b.n	80059f6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <xTaskPriorityInherit+0x134>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d201      	bcs.n	80059f6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80059f6:	697b      	ldr	r3, [r7, #20]
    }
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20000e24 	.word	0x20000e24
 8005a04:	20000e28 	.word	0x20000e28
 8005a08:	20000f2c 	.word	0x20000f2c

08005a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8082 	beq.w	8005b28 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005a24:	4b43      	ldr	r3, [pc, #268]	@ (8005b34 <xTaskPriorityDisinherit+0x128>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d004      	beq.n	8005a38 <xTaskPriorityDisinherit+0x2c>
 8005a2e:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8005a32:	4841      	ldr	r0, [pc, #260]	@ (8005b38 <xTaskPriorityDisinherit+0x12c>)
 8005a34:	f7fc f82a 	bl	8001a8c <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <xTaskPriorityDisinherit+0x3e>
 8005a40:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8005a44:	483c      	ldr	r0, [pc, #240]	@ (8005b38 <xTaskPriorityDisinherit+0x12c>)
 8005a46:	f7fc f821 	bl	8001a8c <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a4e:	1e5a      	subs	r2, r3, #1
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d063      	beq.n	8005b28 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d15f      	bne.n	8005b28 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe f809 	bl	8003a84 <uxListRemove>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43da      	mvns	r2, r3
 8005a84:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <xTaskPriorityDisinherit+0x130>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <xTaskPriorityDisinherit+0x130>)
 8005a8c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9a:	f1c3 0207 	rsb	r2, r3, #7
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	4b24      	ldr	r3, [pc, #144]	@ (8005b3c <xTaskPriorityDisinherit+0x130>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	4a22      	ldr	r2, [pc, #136]	@ (8005b3c <xTaskPriorityDisinherit+0x130>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab8:	4921      	ldr	r1, [pc, #132]	@ (8005b40 <xTaskPriorityDisinherit+0x134>)
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	3204      	adds	r2, #4
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1d1a      	adds	r2, r3, #4
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4a12      	ldr	r2, [pc, #72]	@ (8005b40 <xTaskPriorityDisinherit+0x134>)
 8005af8:	441a      	add	r2, r3
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	615a      	str	r2, [r3, #20]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b02:	490f      	ldr	r1, [pc, #60]	@ (8005b40 <xTaskPriorityDisinherit+0x134>)
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	480a      	ldr	r0, [pc, #40]	@ (8005b40 <xTaskPriorityDisinherit+0x134>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4403      	add	r3, r0
 8005b22:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005b24:	2301      	movs	r3, #1
 8005b26:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005b28:	697b      	ldr	r3, [r7, #20]
    }
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000e24 	.word	0x20000e24
 8005b38:	08024df0 	.word	0x08024df0
 8005b3c:	20000f2c 	.word	0x20000f2c
 8005b40:	20000e28 	.word	0x20000e28

08005b44 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8096 	beq.w	8005c8a <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8005b66:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8005b6a:	484a      	ldr	r0, [pc, #296]	@ (8005c94 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005b6c:	f7fb ff8e 	bl	8001a8c <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d902      	bls.n	8005b80 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e002      	b.n	8005b86 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b84:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d07c      	beq.n	8005c8a <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d177      	bne.n	8005c8a <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c98 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d104      	bne.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8005ba4:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8005ba8:	483a      	ldr	r0, [pc, #232]	@ (8005c94 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005baa:	f7fb ff6f 	bl	8001a8c <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb2:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db04      	blt.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f1c3 0207 	rsb	r2, r3, #7
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	6959      	ldr	r1, [r3, #20]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4a30      	ldr	r2, [pc, #192]	@ (8005c9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	4299      	cmp	r1, r3
 8005be0:	d153      	bne.n	8005c8a <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fd ff4c 	bl	8003a84 <uxListRemove>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	43da      	mvns	r2, r3
 8005bfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4013      	ands	r3, r2
 8005c04:	4a26      	ldr	r2, [pc, #152]	@ (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005c06:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	4b23      	ldr	r3, [pc, #140]	@ (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	4a22      	ldr	r2, [pc, #136]	@ (8005ca0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	491f      	ldr	r1, [pc, #124]	@ (8005c9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	609a      	str	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	60da      	str	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	3204      	adds	r2, #4
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	609a      	str	r2, [r3, #8]
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005c5e:	441a      	add	r2, r3
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	615a      	str	r2, [r3, #20]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c68:	490c      	ldr	r1, [pc, #48]	@ (8005c9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c7a:	1c59      	adds	r1, r3, #1
 8005c7c:	4807      	ldr	r0, [pc, #28]	@ (8005c9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4403      	add	r3, r0
 8005c88:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005c8a:	bf00      	nop
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	08024df0 	.word	0x08024df0
 8005c98:	20000e24 	.word	0x20000e24
 8005c9c:	20000e28 	.word	0x20000e28
 8005ca0:	20000f2c 	.word	0x20000f2c

08005ca4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005caa:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <uxTaskResetEventItemValue+0x2c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8005cb2:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <uxTaskResetEventItemValue+0x2c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <uxTaskResetEventItemValue+0x2c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f1c2 0207 	rsb	r2, r2, #7
 8005cc0:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8005cc2:	687b      	ldr	r3, [r7, #4]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000e24 	.word	0x20000e24

08005cd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8005cda:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <pvTaskIncrementMutexHeldCount+0x2c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8005cf0:	687b      	ldr	r3, [r7, #4]
    }
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000e24 	.word	0x20000e24

08005d04 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <ulTaskGenericNotifyTake+0x20>
 8005d1a:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005d1e:	4833      	ldr	r0, [pc, #204]	@ (8005dec <ulTaskGenericNotifyTake+0xe8>)
 8005d20:	f7fb feb4 	bl	8001a8c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005d24:	f7fe ff96 	bl	8004c54 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005d28:	f000 fe12 	bl	8006950 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005d2c:	4b30      	ldr	r3, [pc, #192]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	3318      	adds	r3, #24
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	3368      	adds	r3, #104	@ 0x68
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005d52:	2301      	movs	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005d56:	f000 fe27 	bl	80069a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d103      	bne.n	8005d68 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d60:	2101      	movs	r1, #1
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc3a 	bl	80065dc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005d68:	f7fe ff82 	bl	8004c70 <xTaskResumeAll>
 8005d6c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10a      	bne.n	8005d8a <ulTaskGenericNotifyTake+0x86>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005df4 <ulTaskGenericNotifyTake+0xf0>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005d8a:	f000 fde1 	bl	8006950 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005d8e:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3318      	adds	r3, #24
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d014      	beq.n	8005dce <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d008      	beq.n	8005dbc <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005daa:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3318      	adds	r3, #24
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	e008      	b.n	8005dce <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1e5a      	subs	r2, r3, #1
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3318      	adds	r3, #24
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005dce:	4b08      	ldr	r3, [pc, #32]	@ (8005df0 <ulTaskGenericNotifyTake+0xec>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3368      	adds	r3, #104	@ 0x68
 8005dd8:	2200      	movs	r2, #0
 8005dda:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005ddc:	f000 fde4 	bl	80069a8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005de0:	697b      	ldr	r3, [r7, #20]
    }
 8005de2:	4618      	mov	r0, r3
 8005de4:	3720      	adds	r7, #32
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	08024df0 	.word	0x08024df0
 8005df0:	20000e24 	.word	0x20000e24
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <xTaskGenericNotifyWait+0x22>
 8005e10:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005e14:	483e      	ldr	r0, [pc, #248]	@ (8005f10 <xTaskGenericNotifyWait+0x118>)
 8005e16:	f7fb fe39 	bl	8001a8c <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005e1a:	f7fe ff1b 	bl	8004c54 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005e1e:	f000 fd97 	bl	8006950 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005e22:	4b3c      	ldr	r3, [pc, #240]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3368      	adds	r3, #104	@ 0x68
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d01a      	beq.n	8005e6a <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005e34:	4b37      	ldr	r3, [pc, #220]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3318      	adds	r3, #24
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	6859      	ldr	r1, [r3, #4]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	4019      	ands	r1, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3318      	adds	r3, #24
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005e52:	4b30      	ldr	r3, [pc, #192]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	3368      	adds	r3, #104	@ 0x68
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005e66:	2301      	movs	r3, #1
 8005e68:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005e6a:	f000 fd9d 	bl	80069a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d103      	bne.n	8005e7c <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e74:	2101      	movs	r1, #1
 8005e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e78:	f000 fbb0 	bl	80065dc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005e7c:	f7fe fef8 	bl	8004c70 <xTaskResumeAll>
 8005e80:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d10a      	bne.n	8005e9e <xTaskGenericNotifyWait+0xa6>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005e8e:	4b22      	ldr	r3, [pc, #136]	@ (8005f18 <xTaskGenericNotifyWait+0x120>)
 8005e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005e9e:	f000 fd57 	bl	8006950 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d008      	beq.n	8005eba <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3318      	adds	r3, #24
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005eba:	4b16      	ldr	r3, [pc, #88]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3368      	adds	r3, #104	@ 0x68
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d002      	beq.n	8005ed2 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e010      	b.n	8005ef4 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005ed2:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	6859      	ldr	r1, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	43db      	mvns	r3, r3
 8005ee4:	4019      	ands	r1, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3318      	adds	r3, #24
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005ef4:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <xTaskGenericNotifyWait+0x11c>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	3368      	adds	r3, #104	@ 0x68
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005f02:	f000 fd51 	bl	80069a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005f06:	69fb      	ldr	r3, [r7, #28]
    }
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	08024df0 	.word	0x08024df0
 8005f14:	20000e24 	.word	0x20000e24
 8005f18:	e000ed04 	.word	0xe000ed04

08005f1c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	@ 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <xTaskGenericNotify+0x22>
 8005f34:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005f38:	487b      	ldr	r0, [pc, #492]	@ (8006128 <xTaskGenericNotify+0x20c>)
 8005f3a:	f7fb fda7 	bl	8001a8c <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d104      	bne.n	8005f4e <xTaskGenericNotify+0x32>
 8005f44:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005f48:	4877      	ldr	r0, [pc, #476]	@ (8006128 <xTaskGenericNotify+0x20c>)
 8005f4a:	f7fb fd9f 	bl	8001a8c <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005f52:	f000 fcfd 	bl	8006950 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	3318      	adds	r3, #24
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005f6c:	6a3a      	ldr	r2, [r7, #32]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	3368      	adds	r3, #104	@ 0x68
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	3368      	adds	r3, #104	@ 0x68
 8005f80:	2202      	movs	r2, #2
 8005f82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	d83f      	bhi.n	800600a <xTaskGenericNotify+0xee>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <xTaskGenericNotify+0x74>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	0800601f 	.word	0x0800601f
 8005f94:	08005fa5 	.word	0x08005fa5
 8005f98:	08005fc3 	.word	0x08005fc3
 8005f9c:	08005fdf 	.word	0x08005fdf
 8005fa0:	08005fef 	.word	0x08005fef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3318      	adds	r3, #24
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	6a39      	ldr	r1, [r7, #32]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3318      	adds	r3, #24
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	605a      	str	r2, [r3, #4]
                    break;
 8005fc0:	e030      	b.n	8006024 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3318      	adds	r3, #24
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	6a39      	ldr	r1, [r7, #32]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3318      	adds	r3, #24
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	605a      	str	r2, [r3, #4]
                    break;
 8005fdc:	e022      	b.n	8006024 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	605a      	str	r2, [r3, #4]
                    break;
 8005fec:	e01a      	b.n	8006024 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005fee:	7ffb      	ldrb	r3, [r7, #31]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d007      	beq.n	8006004 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ff4:	6a3a      	ldr	r2, [r7, #32]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	3318      	adds	r3, #24
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006002:	e00f      	b.n	8006024 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8006004:	2300      	movs	r3, #0
 8006006:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8006008:	e00c      	b.n	8006024 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800600a:	4b48      	ldr	r3, [pc, #288]	@ (800612c <xTaskGenericNotify+0x210>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <xTaskGenericNotify+0x106>
 8006012:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8006016:	4844      	ldr	r0, [pc, #272]	@ (8006128 <xTaskGenericNotify+0x20c>)
 8006018:	f7fb fd38 	bl	8001a8c <vAssertCalled>

                    break;
 800601c:	e001      	b.n	8006022 <xTaskGenericNotify+0x106>
                    break;
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <xTaskGenericNotify+0x108>
                    break;
 8006022:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006024:	7ffb      	ldrb	r3, [r7, #31]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d177      	bne.n	800611a <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	68d2      	ldr	r2, [r2, #12]
 8006038:	609a      	str	r2, [r3, #8]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	6892      	ldr	r2, [r2, #8]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	3304      	adds	r3, #4
 800604c:	429a      	cmp	r2, r3
 800604e:	d103      	bne.n	8006058 <xTaskGenericNotify+0x13c>
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2200      	movs	r2, #0
 800605c:	615a      	str	r2, [r3, #20]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	1e5a      	subs	r2, r3, #1
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	2201      	movs	r2, #1
 800606e:	409a      	lsls	r2, r3
 8006070:	4b2f      	ldr	r3, [pc, #188]	@ (8006130 <xTaskGenericNotify+0x214>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4313      	orrs	r3, r2
 8006076:	4a2e      	ldr	r2, [pc, #184]	@ (8006130 <xTaskGenericNotify+0x214>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	492d      	ldr	r1, [pc, #180]	@ (8006134 <xTaskGenericNotify+0x218>)
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3304      	adds	r3, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	6a3a      	ldr	r2, [r7, #32]
 80060a4:	3204      	adds	r2, #4
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	1d1a      	adds	r2, r3, #4
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006134 <xTaskGenericNotify+0x218>)
 80060be:	441a      	add	r2, r3
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	615a      	str	r2, [r3, #20]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c8:	491a      	ldr	r1, [pc, #104]	@ (8006134 <xTaskGenericNotify+0x218>)
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80060da:	1c59      	adds	r1, r3, #1
 80060dc:	4815      	ldr	r0, [pc, #84]	@ (8006134 <xTaskGenericNotify+0x218>)
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4403      	add	r3, r0
 80060e8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d004      	beq.n	80060fc <xTaskGenericNotify+0x1e0>
 80060f2:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 80060f6:	480c      	ldr	r0, [pc, #48]	@ (8006128 <xTaskGenericNotify+0x20c>)
 80060f8:	f7fb fcc8 	bl	8001a8c <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80060fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006138 <xTaskGenericNotify+0x21c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	429a      	cmp	r2, r3
 8006108:	d207      	bcs.n	800611a <xTaskGenericNotify+0x1fe>
 800610a:	4b0c      	ldr	r3, [pc, #48]	@ (800613c <xTaskGenericNotify+0x220>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800611a:	f000 fc45 	bl	80069a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	@ 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	08024df0 	.word	0x08024df0
 800612c:	20000f28 	.word	0x20000f28
 8006130:	20000f2c 	.word	0x20000f2c
 8006134:	20000e28 	.word	0x20000e28
 8006138:	20000e24 	.word	0x20000e24
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	@ 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800614e:	2301      	movs	r3, #1
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d104      	bne.n	8006162 <xTaskGenericNotifyFromISR+0x22>
 8006158:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 800615c:	4899      	ldr	r0, [pc, #612]	@ (80063c4 <xTaskGenericNotifyFromISR+0x284>)
 800615e:	f7fb fc95 	bl	8001a8c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <xTaskGenericNotifyFromISR+0x32>
 8006168:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 800616c:	4895      	ldr	r0, [pc, #596]	@ (80063c4 <xTaskGenericNotifyFromISR+0x284>)
 800616e:	f7fb fc8d 	bl	8001a8c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006172:	f000 fcbb 	bl	8006aec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800617a:	f3ef 8211 	mrs	r2, BASEPRI
 800617e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006182:	b672      	cpsid	i
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	b662      	cpsie	i
 8006192:	61ba      	str	r2, [r7, #24]
 8006194:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8006196:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006198:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 800619a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80061a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3318      	adds	r3, #24
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ae:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80061b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	3368      	adds	r3, #104	@ 0x68
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4413      	add	r3, r2
 80061c4:	3368      	adds	r3, #104	@ 0x68
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d841      	bhi.n	8006254 <xTaskGenericNotifyFromISR+0x114>
 80061d0:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <xTaskGenericNotifyFromISR+0x98>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006269 	.word	0x08006269
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	08006227 	.word	0x08006227
 80061e8:	08006237 	.word	0x08006237
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80061ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	3318      	adds	r3, #24
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	3318      	adds	r3, #24
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	605a      	str	r2, [r3, #4]
                    break;
 8006208:	e031      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800620a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	3318      	adds	r3, #24
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	3318      	adds	r3, #24
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	605a      	str	r2, [r3, #4]
                    break;
 8006224:	e023      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3318      	adds	r3, #24
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	605a      	str	r2, [r3, #4]
                    break;
 8006234:	e01b      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006236:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800623a:	2b02      	cmp	r3, #2
 800623c:	d007      	beq.n	800624e <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800623e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3318      	adds	r3, #24
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800624c:	e00f      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 800624e:	2300      	movs	r3, #0
 8006250:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8006252:	e00c      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006254:	4b5c      	ldr	r3, [pc, #368]	@ (80063c8 <xTaskGenericNotifyFromISR+0x288>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <xTaskGenericNotifyFromISR+0x12c>
 800625c:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8006260:	4858      	ldr	r0, [pc, #352]	@ (80063c4 <xTaskGenericNotifyFromISR+0x284>)
 8006262:	f7fb fc13 	bl	8001a8c <vAssertCalled>
                    break;
 8006266:	e001      	b.n	800626c <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8006268:	bf00      	nop
 800626a:	e000      	b.n	800626e <xTaskGenericNotifyFromISR+0x12e>
                    break;
 800626c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800626e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006272:	2b01      	cmp	r3, #1
 8006274:	f040 809a 	bne.w	80063ac <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <xTaskGenericNotifyFromISR+0x14a>
 8006280:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8006284:	484f      	ldr	r0, [pc, #316]	@ (80063c4 <xTaskGenericNotifyFromISR+0x284>)
 8006286:	f7fb fc01 	bl	8001a8c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800628a:	4b50      	ldr	r3, [pc, #320]	@ (80063cc <xTaskGenericNotifyFromISR+0x28c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d160      	bne.n	8006354 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629e:	68d2      	ldr	r2, [r2, #12]
 80062a0:	609a      	str	r2, [r3, #8]
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	605a      	str	r2, [r3, #4]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b2:	3304      	adds	r3, #4
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d103      	bne.n	80062c0 <xTaskGenericNotifyFromISR+0x180>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	2200      	movs	r2, #0
 80062c4:	615a      	str	r2, [r3, #20]
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	1e5a      	subs	r2, r3, #1
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	2201      	movs	r2, #1
 80062d6:	409a      	lsls	r2, r3
 80062d8:	4b3d      	ldr	r3, [pc, #244]	@ (80063d0 <xTaskGenericNotifyFromISR+0x290>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	4a3c      	ldr	r2, [pc, #240]	@ (80063d0 <xTaskGenericNotifyFromISR+0x290>)
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e6:	493b      	ldr	r1, [pc, #236]	@ (80063d4 <xTaskGenericNotifyFromISR+0x294>)
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	440b      	add	r3, r1
 80062f2:	3304      	adds	r3, #4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800630c:	3204      	adds	r2, #4
 800630e:	605a      	str	r2, [r3, #4]
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	1d1a      	adds	r2, r3, #4
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4a2b      	ldr	r2, [pc, #172]	@ (80063d4 <xTaskGenericNotifyFromISR+0x294>)
 8006326:	441a      	add	r2, r3
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	615a      	str	r2, [r3, #20]
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006330:	4928      	ldr	r1, [pc, #160]	@ (80063d4 <xTaskGenericNotifyFromISR+0x294>)
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	440b      	add	r3, r1
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006340:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	4823      	ldr	r0, [pc, #140]	@ (80063d4 <xTaskGenericNotifyFromISR+0x294>)
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4403      	add	r3, r0
 8006350:	6019      	str	r1, [r3, #0]
 8006352:	e01b      	b.n	800638c <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006354:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <xTaskGenericNotifyFromISR+0x298>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635e:	61da      	str	r2, [r3, #28]
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	621a      	str	r2, [r3, #32]
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800636e:	3218      	adds	r2, #24
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006374:	f103 0218 	add.w	r2, r3, #24
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	609a      	str	r2, [r3, #8]
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <xTaskGenericNotifyFromISR+0x298>)
 8006380:	629a      	str	r2, [r3, #40]	@ 0x28
 8006382:	4b15      	ldr	r3, [pc, #84]	@ (80063d8 <xTaskGenericNotifyFromISR+0x298>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3301      	adds	r3, #1
 8006388:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <xTaskGenericNotifyFromISR+0x298>)
 800638a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006390:	4b12      	ldr	r3, [pc, #72]	@ (80063dc <xTaskGenericNotifyFromISR+0x29c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006396:	429a      	cmp	r2, r3
 8006398:	d908      	bls.n	80063ac <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800639a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80063a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80063a6:	4b0e      	ldr	r3, [pc, #56]	@ (80063e0 <xTaskGenericNotifyFromISR+0x2a0>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80063b6:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80063b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80063ba:	4618      	mov	r0, r3
 80063bc:	3738      	adds	r7, #56	@ 0x38
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	08024df0 	.word	0x08024df0
 80063c8:	20000f28 	.word	0x20000f28
 80063cc:	20000f4c 	.word	0x20000f4c
 80063d0:	20000f2c 	.word	0x20000f2c
 80063d4:	20000e28 	.word	0x20000e28
 80063d8:	20000ee4 	.word	0x20000ee4
 80063dc:	20000e24 	.word	0x20000e24
 80063e0:	20000f38 	.word	0x20000f38

080063e4 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08e      	sub	sp, #56	@ 0x38
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <vTaskGenericNotifyGiveFromISR+0x1c>
 80063f6:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80063fa:	4871      	ldr	r0, [pc, #452]	@ (80065c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80063fc:	f7fb fb46 	bl	8001a8c <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <vTaskGenericNotifyGiveFromISR+0x2c>
 8006406:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 800640a:	486d      	ldr	r0, [pc, #436]	@ (80065c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800640c:	f7fb fb3e 	bl	8001a8c <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006410:	f000 fb6c 	bl	8006aec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006418:	f3ef 8211 	mrs	r2, BASEPRI
 800641c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006420:	b672      	cpsid	i
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	b662      	cpsie	i
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006434:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006436:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006438:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	3368      	adds	r3, #104	@ 0x68
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	4413      	add	r3, r2
 800644c:	3368      	adds	r3, #104	@ 0x68
 800644e:	2202      	movs	r2, #2
 8006450:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	3318      	adds	r3, #24
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	3318      	adds	r3, #24
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800646c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 809a 	bne.w	80065aa <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <vTaskGenericNotifyGiveFromISR+0xa4>
 800647e:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8006482:	484f      	ldr	r0, [pc, #316]	@ (80065c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006484:	f7fb fb02 	bl	8001a8c <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006488:	4b4e      	ldr	r3, [pc, #312]	@ (80065c4 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d160      	bne.n	8006552 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	627b      	str	r3, [r7, #36]	@ 0x24
 8006496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800649c:	68d2      	ldr	r2, [r2, #12]
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064a6:	6892      	ldr	r2, [r2, #8]
 80064a8:	605a      	str	r2, [r3, #4]
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b0:	3304      	adds	r3, #4
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d103      	bne.n	80064be <vTaskGenericNotifyGiveFromISR+0xda>
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	1e5a      	subs	r2, r3, #1
 80064ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064cc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80064ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	2201      	movs	r2, #1
 80064d4:	409a      	lsls	r2, r3
 80064d6:	4b3c      	ldr	r3, [pc, #240]	@ (80065c8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4313      	orrs	r3, r2
 80064dc:	4a3a      	ldr	r2, [pc, #232]	@ (80065c8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e4:	4939      	ldr	r1, [pc, #228]	@ (80065cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3304      	adds	r3, #4
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800650a:	3204      	adds	r2, #4
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	1d1a      	adds	r2, r3, #4
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	609a      	str	r2, [r3, #8]
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a2a      	ldr	r2, [pc, #168]	@ (80065cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006524:	441a      	add	r2, r3
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006528:	615a      	str	r2, [r3, #20]
 800652a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800652e:	4927      	ldr	r1, [pc, #156]	@ (80065cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006530:	4613      	mov	r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800653e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006540:	1c59      	adds	r1, r3, #1
 8006542:	4822      	ldr	r0, [pc, #136]	@ (80065cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4403      	add	r3, r0
 800654e:	6019      	str	r1, [r3, #0]
 8006550:	e01b      	b.n	800658a <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006552:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800655c:	61da      	str	r2, [r3, #28]
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800656c:	3218      	adds	r2, #24
 800656e:	605a      	str	r2, [r3, #4]
 8006570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006572:	f103 0218 	add.w	r2, r3, #24
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	609a      	str	r2, [r3, #8]
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	4a14      	ldr	r2, [pc, #80]	@ (80065d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800657e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006580:	4b13      	ldr	r3, [pc, #76]	@ (80065d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3301      	adds	r3, #1
 8006586:	4a12      	ldr	r2, [pc, #72]	@ (80065d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006588:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800658a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658e:	4b11      	ldr	r3, [pc, #68]	@ (80065d4 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80065a4:	4b0c      	ldr	r3, [pc, #48]	@ (80065d8 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	617b      	str	r3, [r7, #20]
    __asm volatile
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f383 8811 	msr	BASEPRI, r3
}
 80065b4:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80065b6:	bf00      	nop
 80065b8:	3738      	adds	r7, #56	@ 0x38
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	08024df0 	.word	0x08024df0
 80065c4:	20000f4c 	.word	0x20000f4c
 80065c8:	20000f2c 	.word	0x20000f2c
 80065cc:	20000e28 	.word	0x20000e28
 80065d0:	20000ee4 	.word	0x20000ee4
 80065d4:	20000e24 	.word	0x20000e24
 80065d8:	20000f38 	.word	0x20000f38

080065dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80065e6:	4b37      	ldr	r3, [pc, #220]	@ (80066c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80065ec:	4b36      	ldr	r3, [pc, #216]	@ (80066c8 <prvAddCurrentTaskToDelayedList+0xec>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <prvAddCurrentTaskToDelayedList+0xf0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065f8:	4b35      	ldr	r3, [pc, #212]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd fa40 	bl	8003a84 <uxListRemove>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10b      	bne.n	8006622 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800660a:	4b31      	ldr	r3, [pc, #196]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	2201      	movs	r2, #1
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43da      	mvns	r2, r3
 8006618:	4b2e      	ldr	r3, [pc, #184]	@ (80066d4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4013      	ands	r3, r2
 800661e:	4a2d      	ldr	r2, [pc, #180]	@ (80066d4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006620:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d124      	bne.n	8006674 <prvAddCurrentTaskToDelayedList+0x98>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d021      	beq.n	8006674 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006630:	4b29      	ldr	r3, [pc, #164]	@ (80066d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	4b26      	ldr	r3, [pc, #152]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	609a      	str	r2, [r3, #8]
 800663e:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	6892      	ldr	r2, [r2, #8]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	4b21      	ldr	r3, [pc, #132]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	3204      	adds	r2, #4
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1d1a      	adds	r2, r3, #4
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	609a      	str	r2, [r3, #8]
 800665e:	4b1c      	ldr	r3, [pc, #112]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1d      	ldr	r2, [pc, #116]	@ (80066d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006664:	615a      	str	r2, [r3, #20]
 8006666:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	4a1a      	ldr	r2, [pc, #104]	@ (80066d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006672:	e022      	b.n	80066ba <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006674:	69fa      	ldr	r2, [r7, #28]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4413      	add	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800667c:	4b14      	ldr	r3, [pc, #80]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	429a      	cmp	r2, r3
 800668a:	d207      	bcs.n	800669c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800668c:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	6978      	ldr	r0, [r7, #20]
 8006696:	f7fd f9bc 	bl	8003a12 <vListInsert>
}
 800669a:	e00e      	b.n	80066ba <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4619      	mov	r1, r3
 80066a4:	69b8      	ldr	r0, [r7, #24]
 80066a6:	f7fd f9b4 	bl	8003a12 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <prvAddCurrentTaskToDelayedList+0x100>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d202      	bcs.n	80066ba <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80066b4:	4a09      	ldr	r2, [pc, #36]	@ (80066dc <prvAddCurrentTaskToDelayedList+0x100>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6013      	str	r3, [r2, #0]
}
 80066ba:	bf00      	nop
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000f28 	.word	0x20000f28
 80066c8:	20000edc 	.word	0x20000edc
 80066cc:	20000ee0 	.word	0x20000ee0
 80066d0:	20000e24 	.word	0x20000e24
 80066d4:	20000f2c 	.word	0x20000f2c
 80066d8:	20000f10 	.word	0x20000f10
 80066dc:	20000f44 	.word	0x20000f44

080066e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3b04      	subs	r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80066f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b04      	subs	r3, #4
 80066fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f023 0201 	bic.w	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b04      	subs	r3, #4
 800670e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006710:	4a0c      	ldr	r2, [pc, #48]	@ (8006744 <pxPortInitialiseStack+0x64>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b14      	subs	r3, #20
 800671a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b04      	subs	r3, #4
 8006726:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f06f 0202 	mvn.w	r2, #2
 800672e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	3b20      	subs	r3, #32
 8006734:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006736:	68fb      	ldr	r3, [r7, #12]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	08006749 	.word	0x08006749

08006748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006752:	4b0f      	ldr	r3, [pc, #60]	@ (8006790 <prvTaskExitError+0x48>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675a:	d003      	beq.n	8006764 <prvTaskExitError+0x1c>
 800675c:	21ee      	movs	r1, #238	@ 0xee
 800675e:	480d      	ldr	r0, [pc, #52]	@ (8006794 <prvTaskExitError+0x4c>)
 8006760:	f7fb f994 	bl	8001a8c <vAssertCalled>
    __asm volatile
 8006764:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006768:	b672      	cpsid	i
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	b662      	cpsie	i
 8006778:	607b      	str	r3, [r7, #4]
}
 800677a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800677c:	bf00      	nop
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0fc      	beq.n	800677e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	2000000c 	.word	0x2000000c
 8006794:	08024e1c 	.word	0x08024e1c
	...

080067a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80067a0:	4b07      	ldr	r3, [pc, #28]	@ (80067c0 <pxCurrentTCBConst2>)
 80067a2:	6819      	ldr	r1, [r3, #0]
 80067a4:	6808      	ldr	r0, [r1, #0]
 80067a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	f380 8809 	msr	PSP, r0
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8811 	msr	BASEPRI, r0
 80067ba:	4770      	bx	lr
 80067bc:	f3af 8000 	nop.w

080067c0 <pxCurrentTCBConst2>:
 80067c0:	20000e24 	.word	0x20000e24
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop

080067c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80067c8:	4808      	ldr	r0, [pc, #32]	@ (80067ec <prvPortStartFirstTask+0x24>)
 80067ca:	6800      	ldr	r0, [r0, #0]
 80067cc:	6800      	ldr	r0, [r0, #0]
 80067ce:	f380 8808 	msr	MSP, r0
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8814 	msr	CONTROL, r0
 80067da:	b662      	cpsie	i
 80067dc:	b661      	cpsie	f
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	df00      	svc	0
 80067e8:	bf00      	nop
 80067ea:	0000      	.short	0x0000
 80067ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop

080067f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80067fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006924 <xPortStartScheduler+0x130>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	332c      	adds	r3, #44	@ 0x2c
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a48      	ldr	r2, [pc, #288]	@ (8006928 <xPortStartScheduler+0x134>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d004      	beq.n	8006816 <xPortStartScheduler+0x22>
 800680c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006810:	4846      	ldr	r0, [pc, #280]	@ (800692c <xPortStartScheduler+0x138>)
 8006812:	f7fb f93b 	bl	8001a8c <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3338      	adds	r3, #56	@ 0x38
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a44      	ldr	r2, [pc, #272]	@ (8006930 <xPortStartScheduler+0x13c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <xPortStartScheduler+0x38>
 8006822:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006826:	4841      	ldr	r0, [pc, #260]	@ (800692c <xPortStartScheduler+0x138>)
 8006828:	f7fb f930 	bl	8001a8c <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006830:	4b40      	ldr	r3, [pc, #256]	@ (8006934 <xPortStartScheduler+0x140>)
 8006832:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	22ff      	movs	r2, #255	@ 0xff
 8006840:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006852:	b2da      	uxtb	r2, r3
 8006854:	4b38      	ldr	r3, [pc, #224]	@ (8006938 <xPortStartScheduler+0x144>)
 8006856:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006858:	4b37      	ldr	r3, [pc, #220]	@ (8006938 <xPortStartScheduler+0x144>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <xPortStartScheduler+0x76>
 8006860:	f240 116f 	movw	r1, #367	@ 0x16f
 8006864:	4831      	ldr	r0, [pc, #196]	@ (800692c <xPortStartScheduler+0x138>)
 8006866:	f7fb f911 	bl	8001a8c <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00d      	beq.n	8006894 <xPortStartScheduler+0xa0>
 8006878:	f240 1173 	movw	r1, #371	@ 0x173
 800687c:	482b      	ldr	r0, [pc, #172]	@ (800692c <xPortStartScheduler+0x138>)
 800687e:	f7fb f905 	bl	8001a8c <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006882:	e007      	b.n	8006894 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	3301      	adds	r3, #1
 8006888:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	b2db      	uxtb	r3, r3
 8006892:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689c:	2b80      	cmp	r3, #128	@ 0x80
 800689e:	d0f1      	beq.n	8006884 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d103      	bne.n	80068ae <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80068a6:	4b25      	ldr	r3, [pc, #148]	@ (800693c <xPortStartScheduler+0x148>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	e004      	b.n	80068b8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f1c3 0307 	rsb	r3, r3, #7
 80068b4:	4a21      	ldr	r2, [pc, #132]	@ (800693c <xPortStartScheduler+0x148>)
 80068b6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068b8:	4b20      	ldr	r3, [pc, #128]	@ (800693c <xPortStartScheduler+0x148>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <xPortStartScheduler+0x148>)
 80068c0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068c2:	4b1e      	ldr	r3, [pc, #120]	@ (800693c <xPortStartScheduler+0x148>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068ca:	4a1c      	ldr	r2, [pc, #112]	@ (800693c <xPortStartScheduler+0x148>)
 80068cc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80068d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006940 <xPortStartScheduler+0x14c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a19      	ldr	r2, [pc, #100]	@ (8006940 <xPortStartScheduler+0x14c>)
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068e0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80068e2:	4b17      	ldr	r3, [pc, #92]	@ (8006940 <xPortStartScheduler+0x14c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <xPortStartScheduler+0x14c>)
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ec:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80068ee:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <xPortStartScheduler+0x150>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80068f4:	f000 f8d4 	bl	8006aa0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80068f8:	4b13      	ldr	r3, [pc, #76]	@ (8006948 <xPortStartScheduler+0x154>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80068fe:	f000 f8e9 	bl	8006ad4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006902:	4b12      	ldr	r3, [pc, #72]	@ (800694c <xPortStartScheduler+0x158>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a11      	ldr	r2, [pc, #68]	@ (800694c <xPortStartScheduler+0x158>)
 8006908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800690c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800690e:	f7ff ff5b 	bl	80067c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006912:	f7fe fbf3 	bl	80050fc <vTaskSwitchContext>
    prvTaskExitError();
 8006916:	f7ff ff17 	bl	8006748 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed08 	.word	0xe000ed08
 8006928:	080067a1 	.word	0x080067a1
 800692c:	08024e1c 	.word	0x08024e1c
 8006930:	080069f1 	.word	0x080069f1
 8006934:	e000e400 	.word	0xe000e400
 8006938:	20000f58 	.word	0x20000f58
 800693c:	20000f5c 	.word	0x20000f5c
 8006940:	e000ed20 	.word	0xe000ed20
 8006944:	e000ed1c 	.word	0xe000ed1c
 8006948:	2000000c 	.word	0x2000000c
 800694c:	e000ef34 	.word	0xe000ef34

08006950 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
    __asm volatile
 8006956:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800695a:	b672      	cpsid	i
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	b662      	cpsie	i
 800696a:	607b      	str	r3, [r7, #4]
}
 800696c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <vPortEnterCritical+0x4c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	4a09      	ldr	r2, [pc, #36]	@ (800699c <vPortEnterCritical+0x4c>)
 8006976:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006978:	4b08      	ldr	r3, [pc, #32]	@ (800699c <vPortEnterCritical+0x4c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d109      	bne.n	8006994 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006980:	4b07      	ldr	r3, [pc, #28]	@ (80069a0 <vPortEnterCritical+0x50>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <vPortEnterCritical+0x44>
 800698a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800698e:	4805      	ldr	r0, [pc, #20]	@ (80069a4 <vPortEnterCritical+0x54>)
 8006990:	f7fb f87c 	bl	8001a8c <vAssertCalled>
    }
}
 8006994:	bf00      	nop
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	e000ed04 	.word	0xe000ed04
 80069a4:	08024e1c 	.word	0x08024e1c

080069a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80069ae:	4b0e      	ldr	r3, [pc, #56]	@ (80069e8 <vPortExitCritical+0x40>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <vPortExitCritical+0x18>
 80069b6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80069ba:	480c      	ldr	r0, [pc, #48]	@ (80069ec <vPortExitCritical+0x44>)
 80069bc:	f7fb f866 	bl	8001a8c <vAssertCalled>
    uxCriticalNesting--;
 80069c0:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <vPortExitCritical+0x40>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4a08      	ldr	r2, [pc, #32]	@ (80069e8 <vPortExitCritical+0x40>)
 80069c8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <vPortExitCritical+0x40>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <vPortExitCritical+0x36>
 80069d2:	2300      	movs	r3, #0
 80069d4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f383 8811 	msr	BASEPRI, r3
}
 80069dc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c
 80069ec:	08024e1c 	.word	0x08024e1c

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	@ (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006a14:	b672      	cpsid	i
 8006a16:	f380 8811 	msr	BASEPRI, r0
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	b662      	cpsie	i
 8006a24:	f7fe fb6a 	bl	80050fc <vTaskSwitchContext>
 8006a28:	f04f 0000 	mov.w	r0, #0
 8006a2c:	f380 8811 	msr	BASEPRI, r0
 8006a30:	bc09      	pop	{r0, r3}
 8006a32:	6819      	ldr	r1, [r3, #0]
 8006a34:	6808      	ldr	r0, [r1, #0]
 8006a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	f01e 0f10 	tst.w	lr, #16
 8006a3e:	bf08      	it	eq
 8006a40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a44:	f380 8809 	msr	PSP, r0
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop

08006a50 <pxCurrentTCBConst>:
 8006a50:	20000e24 	.word	0x20000e24
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
    __asm volatile
 8006a5e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006a62:	b672      	cpsid	i
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	b662      	cpsie	i
 8006a72:	607b      	str	r3, [r7, #4]
}
 8006a74:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006a76:	f7fe fa2d 	bl	8004ed4 <xTaskIncrementTick>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a80:	4b06      	ldr	r3, [pc, #24]	@ (8006a9c <xPortSysTickHandler+0x44>)
 8006a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	f383 8811 	msr	BASEPRI, r3
}
 8006a92:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006aa4:	4b08      	ldr	r3, [pc, #32]	@ (8006ac8 <vPortSetupTimerInterrupt+0x28>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aaa:	4b08      	ldr	r3, [pc, #32]	@ (8006acc <vPortSetupTimerInterrupt+0x2c>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <vPortSetupTimerInterrupt+0x30>)
 8006ab2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8006ab6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ab8:	4b03      	ldr	r3, [pc, #12]	@ (8006ac8 <vPortSetupTimerInterrupt+0x28>)
 8006aba:	2203      	movs	r2, #3
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000e010 	.word	0xe000e010
 8006acc:	e000e018 	.word	0xe000e018
 8006ad0:	e000e014 	.word	0xe000e014

08006ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ae4 <vPortEnableVFP+0x10>
 8006ad8:	6801      	ldr	r1, [r0, #0]
 8006ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006ade:	6001      	str	r1, [r0, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	0000      	.short	0x0000
 8006ae4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop

08006aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006af2:	f3ef 8305 	mrs	r3, IPSR
 8006af6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b0f      	cmp	r3, #15
 8006afc:	d90e      	bls.n	8006b1c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006afe:	4a10      	ldr	r2, [pc, #64]	@ (8006b40 <vPortValidateInterruptPriority+0x54>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b08:	4b0e      	ldr	r3, [pc, #56]	@ (8006b44 <vPortValidateInterruptPriority+0x58>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d204      	bcs.n	8006b1c <vPortValidateInterruptPriority+0x30>
 8006b12:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006b16:	480c      	ldr	r0, [pc, #48]	@ (8006b48 <vPortValidateInterruptPriority+0x5c>)
 8006b18:	f7fa ffb8 	bl	8001a8c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <vPortValidateInterruptPriority+0x60>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b24:	4b0a      	ldr	r3, [pc, #40]	@ (8006b50 <vPortValidateInterruptPriority+0x64>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d904      	bls.n	8006b36 <vPortValidateInterruptPriority+0x4a>
 8006b2c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006b30:	4805      	ldr	r0, [pc, #20]	@ (8006b48 <vPortValidateInterruptPriority+0x5c>)
 8006b32:	f7fa ffab 	bl	8001a8c <vAssertCalled>
    }
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	e000e3f0 	.word	0xe000e3f0
 8006b44:	20000f58 	.word	0x20000f58
 8006b48:	08024e1c 	.word	0x08024e1c
 8006b4c:	e000ed0c 	.word	0xe000ed0c
 8006b50:	20000f5c 	.word	0x20000f5c

08006b54 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006b60:	4b60      	ldr	r3, [pc, #384]	@ (8006ce4 <pvPortMalloc+0x190>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d103      	bne.n	8006b70 <pvPortMalloc+0x1c>
 8006b68:	21da      	movs	r1, #218	@ 0xda
 8006b6a:	485f      	ldr	r0, [pc, #380]	@ (8006ce8 <pvPortMalloc+0x194>)
 8006b6c:	f7fa ff8e 	bl	8001a8c <vAssertCalled>

    if( xWantedSize > 0 )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d022      	beq.n	8006bbc <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006b76:	2308      	movs	r3, #8
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d81b      	bhi.n	8006bb8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d014      	beq.n	8006bbc <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	f1c3 0308 	rsb	r3, r3, #8
 8006b9c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d804      	bhi.n	8006bb2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4413      	add	r3, r2
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	e004      	b.n	8006bbc <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	e001      	b.n	8006bbc <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006bbc:	f7fe f84a 	bl	8004c54 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db78      	blt.n	8006cb8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d075      	beq.n	8006cb8 <pvPortMalloc+0x164>
 8006bcc:	4b47      	ldr	r3, [pc, #284]	@ (8006cec <pvPortMalloc+0x198>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d870      	bhi.n	8006cb8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006bd6:	4b46      	ldr	r3, [pc, #280]	@ (8006cf0 <pvPortMalloc+0x19c>)
 8006bd8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006bda:	4b45      	ldr	r3, [pc, #276]	@ (8006cf0 <pvPortMalloc+0x19c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006be0:	e004      	b.n	8006bec <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d903      	bls.n	8006bfe <pvPortMalloc+0xaa>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f1      	bne.n	8006be2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006bfe:	4b39      	ldr	r3, [pc, #228]	@ (8006ce4 <pvPortMalloc+0x190>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d057      	beq.n	8006cb8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	4413      	add	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d904      	bls.n	8006c2e <pvPortMalloc+0xda>
 8006c24:	f240 1129 	movw	r1, #297	@ 0x129
 8006c28:	482f      	ldr	r0, [pc, #188]	@ (8006ce8 <pvPortMalloc+0x194>)
 8006c2a:	f7fa ff2f 	bl	8001a8c <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	2308      	movs	r3, #8
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d91d      	bls.n	8006c7a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <pvPortMalloc+0x106>
 8006c50:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006c54:	4824      	ldr	r0, [pc, #144]	@ (8006ce8 <pvPortMalloc+0x194>)
 8006c56:	f7fa ff19 	bl	8001a8c <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cec <pvPortMalloc+0x198>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	4a19      	ldr	r2, [pc, #100]	@ (8006cec <pvPortMalloc+0x198>)
 8006c86:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c88:	4b18      	ldr	r3, [pc, #96]	@ (8006cec <pvPortMalloc+0x198>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <pvPortMalloc+0x1a0>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d203      	bcs.n	8006c9c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c94:	4b15      	ldr	r3, [pc, #84]	@ (8006cec <pvPortMalloc+0x198>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a16      	ldr	r2, [pc, #88]	@ (8006cf4 <pvPortMalloc+0x1a0>)
 8006c9a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006cae:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <pvPortMalloc+0x1a4>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	4a10      	ldr	r2, [pc, #64]	@ (8006cf8 <pvPortMalloc+0x1a4>)
 8006cb6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006cb8:	f7fd ffda 	bl	8004c70 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8006cc2:	f7fa fef7 	bl	8001ab4 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d004      	beq.n	8006cda <pvPortMalloc+0x186>
 8006cd0:	f240 1173 	movw	r1, #371	@ 0x173
 8006cd4:	4804      	ldr	r0, [pc, #16]	@ (8006ce8 <pvPortMalloc+0x194>)
 8006cd6:	f7fa fed9 	bl	8001a8c <vAssertCalled>
    return pvReturn;
 8006cda:	697b      	ldr	r3, [r7, #20]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3720      	adds	r7, #32
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000f68 	.word	0x20000f68
 8006ce8:	08024e58 	.word	0x08024e58
 8006cec:	20000f6c 	.word	0x20000f6c
 8006cf0:	20000f60 	.word	0x20000f60
 8006cf4:	20000f70 	.word	0x20000f70
 8006cf8:	20000f74 	.word	0x20000f74

08006cfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d03d      	beq.n	8006d8a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006d0e:	2308      	movs	r3, #8
 8006d10:	425b      	negs	r3, r3
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db04      	blt.n	8006d2e <vPortFree+0x32>
 8006d24:	f240 1187 	movw	r1, #391	@ 0x187
 8006d28:	481a      	ldr	r0, [pc, #104]	@ (8006d94 <vPortFree+0x98>)
 8006d2a:	f7fa feaf 	bl	8001a8c <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <vPortFree+0x44>
 8006d36:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006d3a:	4816      	ldr	r0, [pc, #88]	@ (8006d94 <vPortFree+0x98>)
 8006d3c:	f7fa fea6 	bl	8001a8c <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	0fdb      	lsrs	r3, r3, #31
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01c      	beq.n	8006d8a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d118      	bne.n	8006d8a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006d64:	f7fd ff76 	bl	8004c54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <vPortFree+0x9c>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	4a09      	ldr	r2, [pc, #36]	@ (8006d98 <vPortFree+0x9c>)
 8006d74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d76:	68b8      	ldr	r0, [r7, #8]
 8006d78:	f000 f82a 	bl	8006dd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006d7c:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <vPortFree+0xa0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3301      	adds	r3, #1
 8006d82:	4a06      	ldr	r2, [pc, #24]	@ (8006d9c <vPortFree+0xa0>)
 8006d84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006d86:	f7fd ff73 	bl	8004c70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	08024e58 	.word	0x08024e58
 8006d98:	20000f6c 	.word	0x20000f6c
 8006d9c:	20000f78 	.word	0x20000f78

08006da0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006da4:	4b03      	ldr	r3, [pc, #12]	@ (8006db4 <xPortGetFreeHeapSize+0x14>)
 8006da6:	681b      	ldr	r3, [r3, #0]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000f6c 	.word	0x20000f6c

08006db8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006dbc:	4b03      	ldr	r3, [pc, #12]	@ (8006dcc <xPortGetMinimumEverFreeHeapSize+0x14>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	20000f70 	.word	0x20000f70

08006dd0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006dd8:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <prvInsertBlockIntoFreeList+0xac>)
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e002      	b.n	8006de4 <prvInsertBlockIntoFreeList+0x14>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d8f7      	bhi.n	8006dde <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	4413      	add	r3, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d108      	bne.n	8006e12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d118      	bne.n	8006e58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	4b15      	ldr	r3, [pc, #84]	@ (8006e80 <prvInsertBlockIntoFreeList+0xb0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d00d      	beq.n	8006e4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	441a      	add	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e008      	b.n	8006e60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <prvInsertBlockIntoFreeList+0xb0>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	e003      	b.n	8006e60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d002      	beq.n	8006e6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000f60 	.word	0x20000f60
 8006e80:	20000f68 	.word	0x20000f68

08006e84 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	@ 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006e98:	4b4b      	ldr	r3, [pc, #300]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <vPortDefineHeapRegions+0x26>
 8006ea0:	f240 2121 	movw	r1, #545	@ 0x221
 8006ea4:	4849      	ldr	r0, [pc, #292]	@ (8006fcc <vPortDefineHeapRegions+0x148>)
 8006ea6:	f7fa fdf1 	bl	8001a8c <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006eb4:	e071      	b.n	8006f9a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00e      	beq.n	8006eea <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	3307      	adds	r3, #7
 8006ed0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee6:	4413      	add	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4a36      	ldr	r2, [pc, #216]	@ (8006fd0 <vPortDefineHeapRegions+0x14c>)
 8006ef8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006efa:	4b35      	ldr	r3, [pc, #212]	@ (8006fd0 <vPortDefineHeapRegions+0x14c>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	605a      	str	r2, [r3, #4]
 8006f00:	e013      	b.n	8006f2a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006f02:	4b31      	ldr	r3, [pc, #196]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d104      	bne.n	8006f14 <vPortDefineHeapRegions+0x90>
 8006f0a:	f240 2149 	movw	r1, #585	@ 0x249
 8006f0e:	482f      	ldr	r0, [pc, #188]	@ (8006fcc <vPortDefineHeapRegions+0x148>)
 8006f10:	f7fa fdbc 	bl	8001a8c <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006f14:	4b2c      	ldr	r3, [pc, #176]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d804      	bhi.n	8006f2a <vPortDefineHeapRegions+0xa6>
 8006f20:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006f24:	4829      	ldr	r0, [pc, #164]	@ (8006fcc <vPortDefineHeapRegions+0x148>)
 8006f26:	f7fa fdb1 	bl	8001a8c <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8006f2a:	4b27      	ldr	r3, [pc, #156]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	4413      	add	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006f38:	2208      	movs	r2, #8
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1a9b      	subs	r3, r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	f023 0307 	bic.w	r3, r3, #7
 8006f46:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f4c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8006f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006f56:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006f6c:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <vPortDefineHeapRegions+0x144>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d002      	beq.n	8006f80 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6a3a      	ldr	r2, [r7, #32]
 8006f86:	4413      	add	r3, r2
 8006f88:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4413      	add	r3, r2
 8006f98:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d189      	bne.n	8006eb6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd4 <vPortDefineHeapRegions+0x150>)
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8006fd8 <vPortDefineHeapRegions+0x154>)
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <vPortDefineHeapRegions+0x13a>
 8006fb4:	f240 2189 	movw	r1, #649	@ 0x289
 8006fb8:	4804      	ldr	r0, [pc, #16]	@ (8006fcc <vPortDefineHeapRegions+0x148>)
 8006fba:	f7fa fd67 	bl	8001a8c <vAssertCalled>
}
 8006fbe:	bf00      	nop
 8006fc0:	3728      	adds	r7, #40	@ 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000f68 	.word	0x20000f68
 8006fcc:	08024e58 	.word	0x08024e58
 8006fd0:	20000f60 	.word	0x20000f60
 8006fd4:	20000f70 	.word	0x20000f70
 8006fd8:	20000f6c 	.word	0x20000f6c

08006fdc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b090      	sub	sp, #64	@ 0x40
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006fea:	2300      	movs	r3, #0
 8006fec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	330e      	adds	r3, #14
 8006ffa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007006:	f040 81bb 	bne.w	8007380 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	885b      	ldrh	r3, [r3, #2]
 800700e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8007010:	2b08      	cmp	r3, #8
 8007012:	f040 81b5 	bne.w	8007380 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800701a:	2b06      	cmp	r3, #6
 800701c:	f040 81b0 	bne.w	8007380 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8007024:	2b04      	cmp	r3, #4
 8007026:	f040 81ab 	bne.w	8007380 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	330e      	adds	r3, #14
 800702e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8007030:	f107 0320 	add.w	r3, r7, #32
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8007036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8007046:	4b9c      	ldr	r3, [pc, #624]	@ (80072b8 <eARPProcessPacket+0x2dc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 800704e:	499b      	ldr	r1, [pc, #620]	@ (80072bc <eARPProcessPacket+0x2e0>)
 8007050:	489b      	ldr	r0, [pc, #620]	@ (80072c0 <eARPProcessPacket+0x2e4>)
 8007052:	f7fe faf3 	bl	800563c <xTaskCheckForTimeOut>
 8007056:	4603      	mov	r3, r0
 8007058:	2b01      	cmp	r3, #1
 800705a:	d102      	bne.n	8007062 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 800705c:	4b96      	ldr	r3, [pc, #600]	@ (80072b8 <eARPProcessPacket+0x2dc>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	7a1b      	ldrb	r3, [r3, #8]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 8188 	bne.w	8007380 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	061a      	lsls	r2, r3, #24
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800707c:	431a      	orrs	r2, r3
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	0a1b      	lsrs	r3, r3, #8
 8007082:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007086:	431a      	orrs	r2, r3
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	0e1b      	lsrs	r3, r3, #24
 800708c:	4313      	orrs	r3, r2
 800708e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8007092:	d311      	bcc.n	80070b8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	061a      	lsls	r2, r3, #24
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070a0:	431a      	orrs	r2, r3
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	0a1b      	lsrs	r3, r3, #8
 80070a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80070aa:	431a      	orrs	r2, r3
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	0e1b      	lsrs	r3, r3, #24
 80070b0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f280 8164 	bge.w	8007380 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 80070b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d021      	beq.n	8007102 <eARPProcessPacket+0x126>
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d11c      	bne.n	8007102 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80070c8:	4b7b      	ldr	r3, [pc, #492]	@ (80072b8 <eARPProcessPacket+0x2dc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8157 	bne.w	8007380 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 80070d2:	4b79      	ldr	r3, [pc, #484]	@ (80072b8 <eARPProcessPacket+0x2dc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3301      	adds	r3, #1
 80070d8:	4a77      	ldr	r2, [pc, #476]	@ (80072b8 <eARPProcessPacket+0x2dc>)
 80070da:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80070dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80070e4:	f000 fe32 	bl	8007d4c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 80070e8:	f7fd fec6 	bl	8004e78 <xTaskGetTickCount>
 80070ec:	4603      	mov	r3, r0
 80070ee:	4a75      	ldr	r2, [pc, #468]	@ (80072c4 <eARPProcessPacket+0x2e8>)
 80070f0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 80070f2:	4873      	ldr	r0, [pc, #460]	@ (80072c0 <eARPProcessPacket+0x2e4>)
 80070f4:	f7fe fa6a 	bl	80055cc <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 80070f8:	4b70      	ldr	r3, [pc, #448]	@ (80072bc <eARPProcessPacket+0x2e0>)
 80070fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070fe:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8007100:	e13e      	b.n	8007380 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8007102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	b29b      	uxth	r3, r3
 8007108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800710c:	d14a      	bne.n	80071a4 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	061a      	lsls	r2, r3, #24
 8007112:	6a3b      	ldr	r3, [r7, #32]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800711a:	431a      	orrs	r2, r3
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007124:	431a      	orrs	r2, r3
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	0e1b      	lsrs	r3, r3, #24
 800712a:	ea42 0103 	orr.w	r1, r2, r3
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	061a      	lsls	r2, r3, #24
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800713a:	431a      	orrs	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007144:	431a      	orrs	r2, r3
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	0e1b      	lsrs	r3, r3, #24
 800714a:	ea42 0003 	orr.w	r0, r2, r3
 800714e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <eARPProcessPacket+0x180>
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	061a      	lsls	r2, r3, #24
 800715a:	e000      	b.n	800715e <eARPProcessPacket+0x182>
 800715c:	2200      	movs	r2, #0
 800715e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <eARPProcessPacket+0x194>
 8007164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800716e:	e000      	b.n	8007172 <eARPProcessPacket+0x196>
 8007170:	2300      	movs	r3, #0
 8007172:	431a      	orrs	r2, r3
 8007174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <eARPProcessPacket+0x1aa>
 800717a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007184:	e000      	b.n	8007188 <eARPProcessPacket+0x1ac>
 8007186:	2300      	movs	r3, #0
 8007188:	431a      	orrs	r2, r3
 800718a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <eARPProcessPacket+0x1bc>
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	e000      	b.n	800719a <eARPProcessPacket+0x1be>
 8007198:	2300      	movs	r3, #0
 800719a:	4313      	orrs	r3, r2
 800719c:	4602      	mov	r2, r0
 800719e:	484a      	ldr	r0, [pc, #296]	@ (80072c8 <eARPProcessPacket+0x2ec>)
 80071a0:	f01b fc3a 	bl	8022a18 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	88db      	ldrh	r3, [r3, #6]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ae:	d151      	bne.n	8007254 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 80071b0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 80071b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d04d      	beq.n	8007254 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 80071b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04a      	beq.n	8007254 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	061a      	lsls	r2, r3, #24
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071ca:	431a      	orrs	r2, r3
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	0a1b      	lsrs	r3, r3, #8
 80071d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80071d4:	431a      	orrs	r2, r3
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	ea42 0103 	orr.w	r1, r2, r3
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071ea:	431a      	orrs	r2, r3
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80071f4:	431a      	orrs	r2, r3
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	0e1b      	lsrs	r3, r3, #24
 80071fa:	ea42 0003 	orr.w	r0, r2, r3
 80071fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <eARPProcessPacket+0x230>
 8007204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	061a      	lsls	r2, r3, #24
 800720a:	e000      	b.n	800720e <eARPProcessPacket+0x232>
 800720c:	2200      	movs	r2, #0
 800720e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <eARPProcessPacket+0x244>
 8007214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800721e:	e000      	b.n	8007222 <eARPProcessPacket+0x246>
 8007220:	2300      	movs	r3, #0
 8007222:	431a      	orrs	r2, r3
 8007224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <eARPProcessPacket+0x25a>
 800722a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007234:	e000      	b.n	8007238 <eARPProcessPacket+0x25c>
 8007236:	2300      	movs	r3, #0
 8007238:	431a      	orrs	r2, r3
 800723a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <eARPProcessPacket+0x26c>
 8007240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	e000      	b.n	800724a <eARPProcessPacket+0x26e>
 8007248:	2300      	movs	r3, #0
 800724a:	4313      	orrs	r3, r2
 800724c:	4602      	mov	r2, r0
 800724e:	481f      	ldr	r0, [pc, #124]	@ (80072cc <eARPProcessPacket+0x2f0>)
 8007250:	f01b fbe2 	bl	8022a18 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8007254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8092 	beq.w	8007380 <eARPProcessPacket+0x3a4>
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8089 	beq.w	8007380 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	88db      	ldrh	r3, [r3, #6]
 8007272:	b29b      	uxth	r3, r3
 8007274:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007278:	d003      	beq.n	8007282 <eARPProcessPacket+0x2a6>
 800727a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727e:	d077      	beq.n	8007370 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8007280:	e07e      	b.n	8007380 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8007282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007288:	429a      	cmp	r2, r3
 800728a:	d121      	bne.n	80072d0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800728c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8007292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007294:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007296:	2206      	movs	r2, #6
 8007298:	4619      	mov	r1, r3
 800729a:	f01c fd9c 	bl	8023dd6 <memcmp>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d06c      	beq.n	800737e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	461a      	mov	r2, r3
 80072a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80072aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80072ac:	f000 f872 	bl	8007394 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 80072b0:	2302      	movs	r3, #2
 80072b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 80072b6:	e062      	b.n	800737e <eARPProcessPacket+0x3a2>
 80072b8:	20000fe0 	.word	0x20000fe0
 80072bc:	20000010 	.word	0x20000010
 80072c0:	20000fe4 	.word	0x20000fe4
 80072c4:	20000fdc 	.word	0x20000fdc
 80072c8:	08024e90 	.word	0x08024e90
 80072cc:	08024ec0 	.word	0x08024ec0
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d152      	bne.n	800737e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 80072d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	405a      	eors	r2, r3
 80072e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d149      	bne.n	800737e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80072ea:	4a28      	ldr	r2, [pc, #160]	@ (800738c <eARPProcessPacket+0x3b0>)
 80072ec:	f107 0318 	add.w	r3, r7, #24
 80072f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80072f4:	6018      	str	r0, [r3, #0]
 80072f6:	3304      	adds	r3, #4
 80072f8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	3312      	adds	r3, #18
 80072fe:	2206      	movs	r2, #6
 8007300:	4923      	ldr	r1, [pc, #140]	@ (8007390 <eARPProcessPacket+0x3b4>)
 8007302:	4618      	mov	r0, r3
 8007304:	f01c fd67 	bl	8023dd6 <memcmp>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	3312      	adds	r3, #18
 8007312:	f107 0118 	add.w	r1, r7, #24
 8007316:	2206      	movs	r2, #6
 8007318:	4618      	mov	r0, r3
 800731a:	f01c fd5c 	bl	8023dd6 <memcmp>
 800731e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007320:	2b00      	cmp	r3, #0
 8007322:	d12c      	bne.n	800737e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007326:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	3308      	adds	r3, #8
 800732e:	2206      	movs	r2, #6
 8007330:	4619      	mov	r1, r3
 8007332:	f01c fd50 	bl	8023dd6 <memcmp>
 8007336:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8007340:	f107 020c 	add.w	r2, r7, #12
 8007344:	f107 0110 	add.w	r1, r7, #16
 8007348:	f107 0320 	add.w	r3, r7, #32
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fb11 	bl	8007974 <eARPGetCacheEntry>
 8007352:	4603      	mov	r3, r0
 8007354:	2b01      	cmp	r3, #1
 8007356:	d112      	bne.n	800737e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800735c:	429a      	cmp	r2, r3
 800735e:	d10e      	bne.n	800737e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	3308      	adds	r3, #8
 8007364:	6a39      	ldr	r1, [r7, #32]
 8007366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f9ef 	bl	800774c <vARPRefreshCacheEntry>
                            break;
 800736e:	e006      	b.n	800737e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	461a      	mov	r2, r3
 8007374:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007376:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007378:	f000 f84a 	bl	8007410 <vARPProcessPacketReply>
                            break;
 800737c:	e000      	b.n	8007380 <eARPProcessPacket+0x3a4>
                            break;
 800737e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007380:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007384:	4618      	mov	r0, r3
 8007386:	3740      	adds	r7, #64	@ 0x40
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	08024ef0 	.word	0x08024ef0
 8007390:	0802823c 	.word	0x0802823c

08007394 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	330e      	adds	r3, #14
 80073a4:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	3308      	adds	r3, #8
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f9cc 	bl	800774c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2200      	movs	r2, #0
 80073b8:	719a      	strb	r2, [r3, #6]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f042 0202 	orr.w	r2, r2, #2
 80073c0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3308      	adds	r3, #8
 80073c6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	3312      	adds	r3, #18
 80073cc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80073ce:	2206      	movs	r2, #6
 80073d0:	69b9      	ldr	r1, [r7, #24]
 80073d2:	6978      	ldr	r0, [r7, #20]
 80073d4:	f01b fd3c 	bl	8022e50 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	33e8      	adds	r3, #232	@ 0xe8
 80073e2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	3308      	adds	r3, #8
 80073e8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80073ea:	2206      	movs	r2, #6
 80073ec:	69b9      	ldr	r1, [r7, #24]
 80073ee:	6978      	ldr	r0, [r7, #20]
 80073f0:	f01b fd2e 	bl	8022e50 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	330e      	adds	r3, #14
 80073fc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	601a      	str	r2, [r3, #0]
    }
 8007408:	bf00      	nop
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	@ 0x30
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	330e      	adds	r3, #14
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800742e:	429a      	cmp	r2, r3
 8007430:	d005      	beq.n	800743e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f844 	bl	80074c0 <xIsIPInARPCache>
 8007438:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800743a:	2b01      	cmp	r3, #1
 800743c:	d106      	bne.n	800744c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	3308      	adds	r3, #8
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	4618      	mov	r0, r3
 8007448:	f000 f980 	bl	800774c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800744c:	4b1b      	ldr	r3, [pc, #108]	@ (80074bc <vARPProcessPacketReply+0xac>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02e      	beq.n	80074b2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007454:	4b19      	ldr	r3, [pc, #100]	@ (80074bc <vARPProcessPacketReply+0xac>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4618      	mov	r0, r3
 800745a:	f003 f8a5 	bl	800a5a8 <uxIPHeaderSizePacket>
 800745e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007460:	2b14      	cmp	r3, #20
 8007462:	d126      	bne.n	80074b2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007464:	4b15      	ldr	r3, [pc, #84]	@ (80074bc <vARPProcessPacketReply+0xac>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	330e      	adds	r3, #14
 8007470:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d11a      	bne.n	80074b2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800747c:	2300      	movs	r3, #0
 800747e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8007480:	2301      	movs	r3, #1
 8007482:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007484:	4b0d      	ldr	r3, [pc, #52]	@ (80074bc <vARPProcessPacketReply+0xac>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	69f9      	ldr	r1, [r7, #28]
 8007490:	4618      	mov	r0, r3
 8007492:	f002 fcd5 	bl	8009e40 <xSendEventStructToIPTask>
 8007496:	4603      	mov	r3, r0
 8007498:	2b01      	cmp	r3, #1
 800749a:	d004      	beq.n	80074a6 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800749c:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <vARPProcessPacketReply+0xac>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f010 fbaf 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 80074a6:	4b05      	ldr	r3, [pc, #20]	@ (80074bc <vARPProcessPacketReply+0xac>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 80074ac:	2000      	movs	r0, #0
 80074ae:	f003 fabd 	bl	800aa2c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 80074b2:	bf00      	nop
 80074b4:	3730      	adds	r7, #48	@ 0x30
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200011b4 	.word	0x200011b4

080074c0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 80074c8:	2300      	movs	r3, #0
 80074ca:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e017      	b.n	8007502 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80074d2:	4a12      	ldr	r2, [pc, #72]	@ (800751c <xIsIPInARPCache+0x5c>)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	4413      	add	r3, r2
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d10c      	bne.n	80074fc <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 80074e2:	2301      	movs	r3, #1
 80074e4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80074e6:	4a0d      	ldr	r2, [pc, #52]	@ (800751c <xIsIPInARPCache+0x5c>)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	011b      	lsls	r3, r3, #4
 80074ec:	4413      	add	r3, r2
 80074ee:	330b      	adds	r3, #11
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60bb      	str	r3, [r7, #8]
            }

            break;
 80074fa:	e006      	b.n	800750a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b05      	cmp	r3, #5
 8007506:	dde4      	ble.n	80074d2 <xIsIPInARPCache+0x12>
 8007508:	e000      	b.n	800750c <xIsIPInARPCache+0x4c>
            break;
 800750a:	bf00      	nop
        }
    }

    return xReturn;
 800750c:	68bb      	ldr	r3, [r7, #8]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	20000f7c 	.word	0x20000f7c

08007520 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b0a5      	sub	sp, #148	@ 0x94
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8007528:	2300      	movs	r3, #0
 800752a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f003 f83a 	bl	800a5a8 <uxIPHeaderSizePacket>
 8007534:	4603      	mov	r3, r0
 8007536:	2b14      	cmp	r3, #20
 8007538:	d002      	beq.n	8007540 <xCheckRequiresARPResolution+0x20>
 800753a:	2b28      	cmp	r3, #40	@ 0x28
 800753c:	d029      	beq.n	8007592 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800753e:	e0b6      	b.n	80076ae <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007544:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007548:	330e      	adds	r3, #14
 800754a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007550:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	405a      	eors	r2, r3
 800755c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 80a0 	bne.w	80076a8 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ffa7 	bl	80074c0 <xIsIPInARPCache>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	f040 8097 	bne.w	80076a8 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800757e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f000 fbe1 	bl	8007d4c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007590:	e08a      	b.n	80076a8 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800759a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800759e:	330e      	adds	r3, #14
 80075a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 80075a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075a8:	3308      	adds	r3, #8
 80075aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 80075ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075b2:	799b      	ldrb	r3, [r3, #6]
 80075b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 80075b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80075bc:	2b06      	cmp	r3, #6
 80075be:	d003      	beq.n	80075c8 <xCheckRequiresARPResolution+0xa8>
 80075c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80075c4:	2b11      	cmp	r3, #17
 80075c6:	d171      	bne.n	80076ac <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 80075c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80075cc:	f006 ff68 	bl	800e4a0 <xIPv6_GetIPType>
 80075d0:	4603      	mov	r3, r0
 80075d2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 80075d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80075da:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00d      	beq.n	80075fe <xCheckRequiresARPResolution+0xde>
 80075e2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d007      	beq.n	80075fa <xCheckRequiresARPResolution+0xda>
 80075ea:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d101      	bne.n	80075f6 <xCheckRequiresARPResolution+0xd6>
 80075f2:	4b32      	ldr	r3, [pc, #200]	@ (80076bc <xCheckRequiresARPResolution+0x19c>)
 80075f4:	e004      	b.n	8007600 <xCheckRequiresARPResolution+0xe0>
 80075f6:	4b32      	ldr	r3, [pc, #200]	@ (80076c0 <xCheckRequiresARPResolution+0x1a0>)
 80075f8:	e002      	b.n	8007600 <xCheckRequiresARPResolution+0xe0>
 80075fa:	4b32      	ldr	r3, [pc, #200]	@ (80076c4 <xCheckRequiresARPResolution+0x1a4>)
 80075fc:	e000      	b.n	8007600 <xCheckRequiresARPResolution+0xe0>
 80075fe:	4b32      	ldr	r3, [pc, #200]	@ (80076c8 <xCheckRequiresARPResolution+0x1a8>)
 8007600:	461a      	mov	r2, r3
 8007602:	4832      	ldr	r0, [pc, #200]	@ (80076cc <xCheckRequiresARPResolution+0x1ac>)
 8007604:	f01b fa08 	bl	8022a18 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8007608:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800760c:	2b01      	cmp	r3, #1
 800760e:	d14d      	bne.n	80076ac <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007610:	f107 030c 	add.w	r3, r7, #12
 8007614:	2250      	movs	r2, #80	@ 0x50
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f01b fd26 	bl	802306a <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800761e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007622:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007626:	4619      	mov	r1, r3
 8007628:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800762c:	f004 fe0e 	bl	800c24c <eNDGetCacheEntry>
 8007630:	4603      	mov	r3, r0
 8007632:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8007636:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <xCheckRequiresARPResolution+0x12e>
 800763e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <xCheckRequiresARPResolution+0x12a>
 8007646:	4c22      	ldr	r4, [pc, #136]	@ (80076d0 <xCheckRequiresARPResolution+0x1b0>)
 8007648:	e002      	b.n	8007650 <xCheckRequiresARPResolution+0x130>
 800764a:	4c22      	ldr	r4, [pc, #136]	@ (80076d4 <xCheckRequiresARPResolution+0x1b4>)
 800764c:	e000      	b.n	8007650 <xCheckRequiresARPResolution+0x130>
 800764e:	4c22      	ldr	r4, [pc, #136]	@ (80076d8 <xCheckRequiresARPResolution+0x1b8>)
 8007650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007652:	f107 010c 	add.w	r1, r7, #12
 8007656:	2250      	movs	r2, #80	@ 0x50
 8007658:	4618      	mov	r0, r3
 800765a:	f006 ff79 	bl	800e550 <pcEndpointName>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	4621      	mov	r1, r4
 8007664:	481d      	ldr	r0, [pc, #116]	@ (80076dc <xCheckRequiresARPResolution+0x1bc>)
 8007666:	f01b f9d7 	bl	8022a18 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800766a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800766e:	2b00      	cmp	r3, #0
 8007670:	d11c      	bne.n	80076ac <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8007672:	2356      	movs	r3, #86	@ 0x56
 8007674:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8007676:	2100      	movs	r1, #0
 8007678:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800767a:	f010 fa5b 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800767e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8007680:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00c      	beq.n	80076a0 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800768a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800768c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007694:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8007696:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800769a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800769c:	f005 f842 	bl	800c724 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80076a6:	e001      	b.n	80076ac <xCheckRequiresARPResolution+0x18c>
                   break;
 80076a8:	bf00      	nop
 80076aa:	e000      	b.n	80076ae <xCheckRequiresARPResolution+0x18e>
                   break;
 80076ac:	bf00      	nop
    }

    return xNeedsARPResolution;
 80076ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3794      	adds	r7, #148	@ 0x94
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	bf00      	nop
 80076bc:	08024ef8 	.word	0x08024ef8
 80076c0:	08024f04 	.word	0x08024f04
 80076c4:	08024f0c 	.word	0x08024f0c
 80076c8:	08024f18 	.word	0x08024f18
 80076cc:	08024f20 	.word	0x08024f20
 80076d0:	08024f4c 	.word	0x08024f4c
 80076d4:	08024f50 	.word	0x08024f50
 80076d8:	08024f58 	.word	0x08024f58
 80076dc:	08024f60 	.word	0x08024f60

080076e0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d026      	beq.n	800773e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	e020      	b.n	8007738 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80076f6:	4a14      	ldr	r2, [pc, #80]	@ (8007748 <vARPRefreshCacheEntryAge+0x68>)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	4413      	add	r3, r2
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d115      	bne.n	8007732 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	4a0f      	ldr	r2, [pc, #60]	@ (8007748 <vARPRefreshCacheEntryAge+0x68>)
 800770c:	4413      	add	r3, r2
 800770e:	3304      	adds	r3, #4
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	2206      	movs	r2, #6
 8007714:	4618      	mov	r0, r3
 8007716:	f01c fb5e 	bl	8023dd6 <memcmp>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007720:	4a09      	ldr	r2, [pc, #36]	@ (8007748 <vARPRefreshCacheEntryAge+0x68>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4413      	add	r3, r2
 8007728:	330a      	adds	r3, #10
 800772a:	2296      	movs	r2, #150	@ 0x96
 800772c:	701a      	strb	r2, [r3, #0]
                    break;
 800772e:	bf00      	nop
                }
            }
        }
    }
}
 8007730:	e005      	b.n	800773e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b05      	cmp	r3, #5
 800773c:	dddb      	ble.n	80076f6 <vARPRefreshCacheEntryAge+0x16>
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000f7c 	.word	0x20000f7c

0800774c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007758:	f107 0310 	add.w	r3, r7, #16
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f85b 	bl	800781c <prvFindCacheEntry>
 8007766:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d150      	bne.n	8007810 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	db0e      	blt.n	8007792 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	db0e      	blt.n	800779c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	4a25      	ldr	r2, [pc, #148]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 8007784:	4413      	add	r3, r2
 8007786:	2210      	movs	r2, #16
 8007788:	2100      	movs	r1, #0
 800778a:	4618      	mov	r0, r3
 800778c:	f01b fc6d 	bl	802306a <memset>
 8007790:	e004      	b.n	800779c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	db01      	blt.n	800779c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	4a1e      	ldr	r2, [pc, #120]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	4413      	add	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d01f      	beq.n	80077ee <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	4a19      	ldr	r2, [pc, #100]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077b4:	4413      	add	r3, r2
 80077b6:	3304      	adds	r3, #4
 80077b8:	68f9      	ldr	r1, [r7, #12]
 80077ba:	2206      	movs	r2, #6
 80077bc:	4618      	mov	r0, r3
 80077be:	f01b fb47 	bl	8022e50 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	4a14      	ldr	r2, [pc, #80]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	4413      	add	r3, r2
 80077ca:	330a      	adds	r3, #10
 80077cc:	2296      	movs	r2, #150	@ 0x96
 80077ce:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	4a11      	ldr	r2, [pc, #68]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	4413      	add	r3, r2
 80077d8:	330b      	adds	r3, #11
 80077da:	2201      	movs	r2, #1
 80077dc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	4413      	add	r3, r2
 80077e6:	330c      	adds	r3, #12
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 80077ec:	e010      	b.n	8007810 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da0d      	bge.n	8007810 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	4413      	add	r3, r2
 80077fc:	330a      	adds	r3, #10
 80077fe:	2205      	movs	r2, #5
 8007800:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4a04      	ldr	r2, [pc, #16]	@ (8007818 <vARPRefreshCacheEntry+0xcc>)
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	4413      	add	r3, r2
 800780a:	330b      	adds	r3, #11
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	3720      	adds	r7, #32
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000f7c 	.word	0x20000f7c

0800781c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	@ 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007838:	2102      	movs	r1, #2
 800783a:	68b8      	ldr	r0, [r7, #8]
 800783c:	f006 fb24 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf14      	ite	ne
 8007846:	2301      	movne	r3, #1
 8007848:	2300      	moveq	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800784e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007852:	3b01      	subs	r3, #1
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	f04f 32ff 	mov.w	r2, #4294967295
 8007866:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800786e:	2300      	movs	r3, #0
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
 8007872:	e074      	b.n	800795e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8007874:	2300      	movs	r3, #0
 8007876:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	011b      	lsls	r3, r3, #4
 8007882:	4a3b      	ldr	r2, [pc, #236]	@ (8007970 <prvFindCacheEntry+0x154>)
 8007884:	4413      	add	r3, r2
 8007886:	3304      	adds	r3, #4
 8007888:	68f9      	ldr	r1, [r7, #12]
 800788a:	2206      	movs	r2, #6
 800788c:	4618      	mov	r0, r3
 800788e:	f01c faa2 	bl	8023dd6 <memcmp>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8007898:	2301      	movs	r3, #1
 800789a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800789c:	4a34      	ldr	r2, [pc, #208]	@ (8007970 <prvFindCacheEntry+0x154>)
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4413      	add	r3, r2
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d125      	bne.n	80078f8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b6:	601a      	str	r2, [r3, #0]
                break;
 80078b8:	e054      	b.n	8007964 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d017      	beq.n	80078f0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80078c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007970 <prvFindCacheEntry+0x154>)
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4413      	add	r3, r2
 80078c8:	330a      	adds	r3, #10
 80078ca:	2296      	movs	r2, #150	@ 0x96
 80078cc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80078ce:	4a28      	ldr	r2, [pc, #160]	@ (8007970 <prvFindCacheEntry+0x154>)
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	4413      	add	r3, r2
 80078d6:	330b      	adds	r3, #11
 80078d8:	2201      	movs	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80078dc:	4a24      	ldr	r2, [pc, #144]	@ (8007970 <prvFindCacheEntry+0x154>)
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	4413      	add	r3, r2
 80078e4:	330c      	adds	r3, #12
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
                break;
 80078ee:	e039      	b.n	8007964 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e02f      	b.n	8007958 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d017      	beq.n	800792e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80078fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007970 <prvFindCacheEntry+0x154>)
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	4413      	add	r3, r2
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2103      	movs	r1, #3
 800790a:	4618      	mov	r0, r3
 800790c:	f006 fabc 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	429a      	cmp	r2, r3
 8007924:	d118      	bne.n	8007958 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800792a:	605a      	str	r2, [r3, #4]
 800792c:	e014      	b.n	8007958 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800792e:	4a10      	ldr	r2, [pc, #64]	@ (8007970 <prvFindCacheEntry+0x154>)
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	4413      	add	r3, r2
 8007936:	330a      	adds	r3, #10
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800793e:	429a      	cmp	r2, r3
 8007940:	d90a      	bls.n	8007958 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007942:	4a0b      	ldr	r2, [pc, #44]	@ (8007970 <prvFindCacheEntry+0x154>)
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	4413      	add	r3, r2
 800794a:	330a      	adds	r3, #10
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007956:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	3301      	adds	r3, #1
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	2b05      	cmp	r3, #5
 8007962:	dd87      	ble.n	8007874 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8007964:	69fb      	ldr	r3, [r7, #28]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3728      	adds	r7, #40	@ 0x28
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000f7c 	.word	0x20000f7c

08007974 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007980:	2300      	movs	r3, #0
 8007982:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d104      	bne.n	8007994 <eARPGetCacheEntry+0x20>
 800798a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800798e:	483c      	ldr	r0, [pc, #240]	@ (8007a80 <eARPGetCacheEntry+0x10c>)
 8007990:	f7fa f87c 	bl	8001a8c <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d104      	bne.n	80079a4 <eARPGetCacheEntry+0x30>
 800799a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800799e:	4838      	ldr	r0, [pc, #224]	@ (8007a80 <eARPGetCacheEntry+0x10c>)
 80079a0:	f7fa f874 	bl	8001a8c <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <eARPGetCacheEntry+0x40>
 80079aa:	f240 31cb 	movw	r1, #971	@ 0x3cb
 80079ae:	4834      	ldr	r0, [pc, #208]	@ (8007a80 <eARPGetCacheEntry+0x10c>)
 80079b0:	f7fa f86c 	bl	8001a8c <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80079c0:	2100      	movs	r1, #0
 80079c2:	6978      	ldr	r0, [r7, #20]
 80079c4:	f006 f9d4 	bl	800dd70 <FreeRTOS_FindEndPointOnIP_IPv4>
 80079c8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80079ca:	6978      	ldr	r0, [r7, #20]
 80079cc:	f003 fc3c 	bl	800b248 <xIsIPv4Multicast>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d021      	beq.n	8007a1a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80079d6:	68b9      	ldr	r1, [r7, #8]
 80079d8:	6978      	ldr	r0, [r7, #20]
 80079da:	f003 fd63 	bl	800b4a4 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80079de:	2302      	movs	r3, #2
 80079e0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80079e2:	2000      	movs	r0, #0
 80079e4:	f006 f978 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 80079e8:	61b8      	str	r0, [r7, #24]

            for( ;
 80079ea:	e012      	b.n	8007a12 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d105      	bne.n	8007a08 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007a02:	2301      	movs	r3, #1
 8007a04:	77fb      	strb	r3, [r7, #31]
                    break;
 8007a06:	e035      	b.n	8007a74 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007a08:	69b9      	ldr	r1, [r7, #24]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	f006 f986 	bl	800dd1c <FreeRTOS_NextEndPoint>
 8007a10:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e9      	bne.n	80079ec <eARPGetCacheEntry+0x78>
 8007a18:	e02c      	b.n	8007a74 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	061a      	lsls	r2, r3, #24
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a26:	431a      	orrs	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	0a1b      	lsrs	r3, r3, #8
 8007a2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a30:	431a      	orrs	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	0e1b      	lsrs	r3, r3, #24
 8007a36:	4313      	orrs	r3, r2
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2bff      	cmp	r3, #255	@ 0xff
 8007a3c:	d113      	bne.n	8007a66 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4a10      	ldr	r2, [pc, #64]	@ (8007a84 <eARPGetCacheEntry+0x110>)
 8007a42:	6811      	ldr	r1, [r2, #0]
 8007a44:	6019      	str	r1, [r3, #0]
 8007a46:	8892      	ldrh	r2, [r2, #4]
 8007a48:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8007a4a:	2104      	movs	r1, #4
 8007a4c:	6978      	ldr	r0, [r7, #20]
 8007a4e:	f006 fa1b 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8007a52:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69ba      	ldr	r2, [r7, #24]
 8007a5e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8007a60:	2301      	movs	r3, #1
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	e006      	b.n	8007a74 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f80c 	bl	8007a88 <eARPGetCacheEntryGateWay>
 8007a70:	4603      	mov	r3, r0
 8007a72:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8007a74:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007a76:	4618      	mov	r0, r3
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	08024f94 	.word	0x08024f94
 8007a84:	0802823c 	.word	0x0802823c

08007a88 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007a94:	2300      	movs	r3, #0
 8007a96:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8007aa4:	2104      	movs	r1, #4
 8007aa6:	69b8      	ldr	r0, [r7, #24]
 8007aa8:	f006 f9ee 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8007aac:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11b      	bne.n	8007aec <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	68b9      	ldr	r1, [r7, #8]
 8007ab8:	69b8      	ldr	r0, [r7, #24]
 8007aba:	f000 f86b 	bl	8007b94 <prvCacheLookup>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8007ac2:	7ffb      	ldrb	r3, [r7, #31]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d017      	beq.n	8007af8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8007ac8:	2040      	movs	r0, #64	@ 0x40
 8007aca:	f006 fca9 	bl	800e420 <FreeRTOS_FindGateWay>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d004      	beq.n	8007ae6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	e008      	b.n	8007af8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	61bb      	str	r3, [r7, #24]
 8007aea:	e005      	b.n	8007af8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8007af8:	7ffb      	ldrb	r3, [r7, #31]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d13f      	bne.n	8007b7e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d102      	bne.n	8007b0a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007b04:	2302      	movs	r3, #2
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e039      	b.n	8007b7e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	69b8      	ldr	r0, [r7, #24]
 8007b10:	f000 f840 	bl	8007b94 <prvCacheLookup>
 8007b14:	4603      	mov	r3, r0
 8007b16:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007b18:	7ffb      	ldrb	r3, [r7, #31]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d103      	bne.n	8007b26 <eARPGetCacheEntryGateWay+0x9e>
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d028      	beq.n	8007b78 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	061a      	lsls	r2, r3, #24
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b32:	431a      	orrs	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	0e1b      	lsrs	r3, r3, #24
 8007b42:	ea42 0103 	orr.w	r1, r2, r3
 8007b46:	7ffb      	ldrb	r3, [r7, #31]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <eARPGetCacheEntryGateWay+0xc8>
 8007b4c:	480e      	ldr	r0, [pc, #56]	@ (8007b88 <eARPGetCacheEntryGateWay+0x100>)
 8007b4e:	e000      	b.n	8007b52 <eARPGetCacheEntryGateWay+0xca>
 8007b50:	480e      	ldr	r0, [pc, #56]	@ (8007b8c <eARPGetCacheEntryGateWay+0x104>)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	061a      	lsls	r2, r3, #24
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	0e1b      	lsrs	r3, r3, #24
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4602      	mov	r2, r0
 8007b72:	4807      	ldr	r0, [pc, #28]	@ (8007b90 <eARPGetCacheEntryGateWay+0x108>)
 8007b74:	f01a ff50 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	69ba      	ldr	r2, [r7, #24]
 8007b7c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8007b7e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007b80:	4618      	mov	r0, r3
 8007b82:	3720      	adds	r7, #32
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	08024fc0 	.word	0x08024fc0
 8007b8c:	08024fc4 	.word	0x08024fc4
 8007b90:	08024fcc 	.word	0x08024fcc

08007b94 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e02a      	b.n	8007c00 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8007baa:	4a19      	ldr	r2, [pc, #100]	@ (8007c10 <prvCacheLookup+0x7c>)
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	4413      	add	r3, r2
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d11f      	bne.n	8007bfa <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007bba:	4a15      	ldr	r2, [pc, #84]	@ (8007c10 <prvCacheLookup+0x7c>)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	4413      	add	r3, r2
 8007bc2:	330b      	adds	r3, #11
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8007bce:	e01a      	b.n	8007c06 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8007bd0:	68b8      	ldr	r0, [r7, #8]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8007c10 <prvCacheLookup+0x7c>)
 8007bd8:	4413      	add	r3, r2
 8007bda:	3304      	adds	r3, #4
 8007bdc:	2206      	movs	r2, #6
 8007bde:	4619      	mov	r1, r3
 8007be0:	f01b f936 	bl	8022e50 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8007be4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c10 <prvCacheLookup+0x7c>)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	4413      	add	r3, r2
 8007bec:	330c      	adds	r3, #12
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	74fb      	strb	r3, [r7, #19]
                break;
 8007bf8:	e005      	b.n	8007c06 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	ddd1      	ble.n	8007baa <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007c06:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	20000f7c 	.word	0x20000f7c

08007c14 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	e048      	b.n	8007cb2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007c20:	4a47      	ldr	r2, [pc, #284]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	4413      	add	r3, r2
 8007c28:	330a      	adds	r3, #10
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d03d      	beq.n	8007cac <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007c30:	4a43      	ldr	r2, [pc, #268]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	4413      	add	r3, r2
 8007c38:	330a      	adds	r3, #10
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b2d9      	uxtb	r1, r3
 8007c40:	4a3f      	ldr	r2, [pc, #252]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	4413      	add	r3, r2
 8007c48:	330a      	adds	r3, #10
 8007c4a:	460a      	mov	r2, r1
 8007c4c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007c4e:	4a3c      	ldr	r2, [pc, #240]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	4413      	add	r3, r2
 8007c56:	330b      	adds	r3, #11
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d108      	bne.n	8007c70 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007c5e:	4a38      	ldr	r2, [pc, #224]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	4413      	add	r3, r2
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 f8d7 	bl	8007e1c <FreeRTOS_OutputARPRequest>
 8007c6e:	e00f      	b.n	8007c90 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007c70:	4a33      	ldr	r2, [pc, #204]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	4413      	add	r3, r2
 8007c78:	330a      	adds	r3, #10
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d807      	bhi.n	8007c90 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007c80:	4a2f      	ldr	r2, [pc, #188]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	4413      	add	r3, r2
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 f8c6 	bl	8007e1c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007c90:	4a2b      	ldr	r2, [pc, #172]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	4413      	add	r3, r2
 8007c98:	330a      	adds	r3, #10
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007ca0:	4a27      	ldr	r2, [pc, #156]	@ (8007d40 <vARPAgeCache+0x12c>)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	2200      	movs	r2, #0
 8007caa:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b05      	cmp	r3, #5
 8007cb6:	ddb3      	ble.n	8007c20 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007cb8:	f7fd f8de 	bl	8004e78 <xTaskGetTickCount>
 8007cbc:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007cbe:	4b21      	ldr	r3, [pc, #132]	@ (8007d44 <vARPAgeCache+0x130>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <vARPAgeCache+0xc2>
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8007d44 <vARPAgeCache+0x130>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d92f      	bls.n	8007d36 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8007cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d48 <vARPAgeCache+0x134>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8007cdc:	e025      	b.n	8007d2a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d019      	beq.n	8007d22 <vARPAgeCache+0x10e>
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d015      	beq.n	8007d22 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007cfc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <vARPAgeCache+0xf8>
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d007      	beq.n	8007d1a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8007d0a:	e00a      	b.n	8007d22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	68b8      	ldr	r0, [r7, #8]
 8007d14:	f000 f81a 	bl	8007d4c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007d18:	e003      	b.n	8007d22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f005 f822 	bl	800cd64 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007d20:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007d28:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1d6      	bne.n	8007cde <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007d30:	4a04      	ldr	r2, [pc, #16]	@ (8007d44 <vARPAgeCache+0x130>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
        }
    }
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000f7c 	.word	0x20000f7c
 8007d44:	20000fdc 	.word	0x20000fdc
 8007d48:	20001540 	.word	0x20001540

08007d4c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d156      	bne.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d052      	beq.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007d6e:	2100      	movs	r1, #0
 8007d70:	202a      	movs	r0, #42	@ 0x2a
 8007d72:	f00f fedf 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 8007d76:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04a      	beq.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007d94:	6938      	ldr	r0, [r7, #16]
 8007d96:	f000 f855 	bl	8007e44 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007da0:	d812      	bhi.n	8007dc8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e008      	b.n	8007dbc <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8007dc0:	ddf3      	ble.n	8007daa <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	223c      	movs	r2, #60	@ 0x3c
 8007dc6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007dc8:	f002 ff7c 	bl	800acc4 <xIsCallingFromIPTask>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00f      	beq.n	8007df2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01b      	beq.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8007dea:	2201      	movs	r2, #1
 8007dec:	6939      	ldr	r1, [r7, #16]
 8007dee:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007df0:	e010      	b.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007df2:	2302      	movs	r3, #2
 8007df4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	f04f 31ff 	mov.w	r1, #4294967295
 8007e02:	4618      	mov	r0, r3
 8007e04:	f002 f81c 	bl	8009e40 <xSendEventStructToIPTask>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007e0e:	6938      	ldr	r0, [r7, #16]
 8007e10:	f00f fef8 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
    }
 8007e14:	bf00      	nop
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007e24:	210c      	movs	r1, #12
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f006 f82e 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8007e2c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff ff88 	bl	8007d4c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <vARPGenerateRequestPacket+0x18>
 8007e52:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007e56:	4828      	ldr	r0, [pc, #160]	@ (8007ef8 <vARPGenerateRequestPacket+0xb4>)
 8007e58:	f7f9 fe18 	bl	8001a8c <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	2b29      	cmp	r3, #41	@ 0x29
 8007e62:	d804      	bhi.n	8007e6e <vARPGenerateRequestPacket+0x2a>
 8007e64:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007e68:	4823      	ldr	r0, [pc, #140]	@ (8007ef8 <vARPGenerateRequestPacket+0xb4>)
 8007e6a:	f7f9 fe0f 	bl	8001a8c <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <vARPGenerateRequestPacket+0x3c>
 8007e76:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8007e7a:	481f      	ldr	r0, [pc, #124]	@ (8007ef8 <vARPGenerateRequestPacket+0xb4>)
 8007e7c:	f7f9 fe06 	bl	8001a8c <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e84:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007e86:	4b1d      	ldr	r3, [pc, #116]	@ (8007efc <vARPGenerateRequestPacket+0xb8>)
 8007e88:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007e8e:	2226      	movs	r2, #38	@ 0x26
 8007e90:	6939      	ldr	r1, [r7, #16]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f01a ffdc 	bl	8022e50 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9c:	33e8      	adds	r3, #232	@ 0xe8
 8007e9e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	3306      	adds	r3, #6
 8007ea4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f01a ffd0 	bl	8022e50 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb4:	33e8      	adds	r3, #232	@ 0xe8
 8007eb6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	3316      	adds	r3, #22
 8007ebc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007ebe:	2206      	movs	r2, #6
 8007ec0:	6939      	ldr	r1, [r7, #16]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f01a ffc4 	bl	8022e50 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ecc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	331c      	adds	r3, #28
 8007ed2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695a      	ldr	r2, [r3, #20]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	222a      	movs	r2, #42	@ 0x2a
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8007eee:	bf00      	nop
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08024f94 	.word	0x08024f94
 8007efc:	08028204 	.word	0x08028204

08007f00 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01b      	beq.n	8007f46 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]
 8007f12:	e014      	b.n	8007f3e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007f14:	4a10      	ldr	r2, [pc, #64]	@ (8007f58 <FreeRTOS_ClearARP+0x58>)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	4413      	add	r3, r2
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d108      	bne.n	8007f38 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	4a0b      	ldr	r2, [pc, #44]	@ (8007f58 <FreeRTOS_ClearARP+0x58>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	2210      	movs	r2, #16
 8007f30:	2100      	movs	r1, #0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f01b f899 	bl	802306a <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	dde7      	ble.n	8007f14 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007f44:	e004      	b.n	8007f50 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007f46:	2260      	movs	r2, #96	@ 0x60
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4803      	ldr	r0, [pc, #12]	@ (8007f58 <FreeRTOS_ClearARP+0x58>)
 8007f4c:	f01b f88d 	bl	802306a <memset>
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000f7c 	.word	0x20000f7c

08007f5c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007f60:	f000 fc8a 	bl	8008878 <vDNSCallbackInitialise>
        }
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007f78:	2048      	movs	r0, #72	@ 0x48
 8007f7a:	f7fe fdeb 	bl	8006b54 <pvPortMalloc>
 8007f7e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d057      	beq.n	8008036 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8007f8a:	2248      	movs	r2, #72	@ 0x48
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	69f8      	ldr	r0, [r7, #28]
 8007f90:	f01b f86b 	bl	802306a <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3338      	adds	r3, #56	@ 0x38
 8007fa2:	220f      	movs	r2, #15
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f01b ff6c 	bl	8023e84 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f103 0220 	add.w	r2, r3, #32
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d003      	beq.n	8007fcc <pxNew_AddrInfo+0x64>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b0a      	cmp	r3, #10
 8007fc8:	d01e      	beq.n	8008008 <pxNew_AddrInfo+0xa0>
 8007fca:	e02b      	b.n	8008024 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f003 f87d 	bl	800b0cc <ulChar2u32>
 8007fd2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	061a      	lsls	r2, r3, #24
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	0a1b      	lsrs	r3, r3, #8
 8007fe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007fea:	ea42 0103 	orr.w	r1, r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	0e1a      	lsrs	r2, r3, #24
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2204      	movs	r2, #4
 8008004:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8008006:	e016      	b.n	8008036 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	220a      	movs	r2, #10
 800800c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	2210      	movs	r2, #16
 8008012:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	3328      	adds	r3, #40	@ 0x28
 8008018:	2210      	movs	r2, #16
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	f01a ff17 	bl	8022e50 <memcpy>
                        break;
 8008022:	e008      	b.n	8008036 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8008024:	4806      	ldr	r0, [pc, #24]	@ (8008040 <pxNew_AddrInfo+0xd8>)
 8008026:	f01a fcf7 	bl	8022a18 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 800802a:	69b8      	ldr	r0, [r7, #24]
 800802c:	f7fe fe66 	bl	8006cfc <vPortFree>
                    pxAddrInfo = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	61fb      	str	r3, [r7, #28]

                    break;
 8008034:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8008036:	69fb      	ldr	r3, [r7, #28]
    }
 8008038:	4618      	mov	r0, r3
 800803a:	3720      	adds	r7, #32
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	08025038 	.word	0x08025038

08008044 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8008056:	e007      	b.n	8008068 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f7fe fe4c 	bl	8006cfc <vPortFree>
                pxIterator = pxNext;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1f4      	bne.n	8008058 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8008076:	b580      	push	{r7, lr}
 8008078:	b088      	sub	sp, #32
 800807a:	af02      	add	r7, sp, #8
 800807c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f002 fa92 	bl	800a5a8 <uxIPHeaderSizePacket>
 8008084:	4603      	mov	r3, r0
 8008086:	3316      	adds	r3, #22
 8008088:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	429a      	cmp	r2, r3
 8008092:	d829      	bhi.n	80080e8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b0b      	cmp	r3, #11
 80080a2:	d921      	bls.n	80080e8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	4413      	add	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80080b6:	021b      	lsls	r3, r3, #8
 80080b8:	b21a      	sxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	b21b      	sxth	r3, r3
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	f107 0208 	add.w	r2, r7, #8
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	2300      	movs	r3, #0
 80080d2:	6939      	ldr	r1, [r7, #16]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fcb5 	bl	8008a44 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff ffae 	bl	8008044 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 80080e8:	2300      	movs	r3, #0
    }
 80080ea:	4618      	mov	r0, r3
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b086      	sub	sp, #24
 80080f6:	af02      	add	r7, sp, #8
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f818 	bl	8008140 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8008110:	2301      	movs	r3, #1
    }
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8008120:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8008124:	2100      	movs	r1, #0
 8008126:	4804      	ldr	r0, [pc, #16]	@ (8008138 <FreeRTOS_dnsclear+0x1c>)
 8008128:	f01a ff9f 	bl	802306a <memset>
        uxFreeEntry = 0U;
 800812c:	4b03      	ldr	r3, [pc, #12]	@ (800813c <FreeRTOS_dnsclear+0x20>)
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
    }
 8008132:	bf00      	nop
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000fec 	.word	0x20000fec
 800813c:	2000119c 	.word	0x2000119c

08008140 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008140:	b590      	push	{r4, r7, lr}
 8008142:	b09b      	sub	sp, #108	@ 0x6c
 8008144:	af02      	add	r7, sp, #8
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 800814e:	f7fc fe93 	bl	8004e78 <xTaskGetTickCount>
 8008152:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <FreeRTOS_ProcessDNSCache+0x22>
 800815a:	21d8      	movs	r1, #216	@ 0xd8
 800815c:	4841      	ldr	r0, [pc, #260]	@ (8008264 <FreeRTOS_ProcessDNSCache+0x124>)
 800815e:	f7f9 fc95 	bl	8001a8c <vAssertCalled>

        if( xLookUp != pdFALSE )
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 800816e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008170:	4a3d      	ldr	r2, [pc, #244]	@ (8008268 <FreeRTOS_ProcessDNSCache+0x128>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	099b      	lsrs	r3, r3, #6
 8008178:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 800817a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800817e:	461a      	mov	r2, r3
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f000 f87a 	bl	800827c <prvFindEntryIndex>
 8008188:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800818a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818c:	2b01      	cmp	r3, #1
 800818e:	d110      	bne.n	80081b2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d106      	bne.n	80081a4 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8008196:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008198:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800819a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	f000 f8b1 	bl	8008304 <prvGetCacheIPEntry>
 80081a2:	e013      	b.n	80081cc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 80081a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80081a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	f000 f94a 	bl	8008444 <prvUpdateCacheEntry>
 80081b0:	e00c      	b.n	80081cc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d103      	bne.n	80081c0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2200      	movs	r2, #0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e005      	b.n	80081cc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 80081c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f994 	bl	80084f4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <FreeRTOS_ProcessDNSCache+0x9a>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d03f      	beq.n	800825a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 80081da:	2302      	movs	r3, #2
 80081dc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00c      	beq.n	8008200 <FreeRTOS_ProcessDNSCache+0xc0>
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10e      	bne.n	8008208 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80081f0:	6818      	ldr	r0, [r3, #0]
 80081f2:	6859      	ldr	r1, [r3, #4]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 80081fa:	230a      	movs	r3, #10
 80081fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 80081fe:	e007      	b.n	8008210 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8008206:	e003      	b.n	8008210 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8008208:	4818      	ldr	r0, [pc, #96]	@ (800826c <FreeRTOS_ProcessDNSCache+0x12c>)
 800820a:	f01a fc05 	bl	8022a18 <lUDPLoggingPrintf>
                        break;
 800820e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008210:	f107 0214 	add.w	r2, r7, #20
 8008214:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008218:	2328      	movs	r3, #40	@ 0x28
 800821a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800821c:	f007 fc62 	bl	800fae4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <FreeRTOS_ProcessDNSCache+0xea>
 8008226:	4912      	ldr	r1, [pc, #72]	@ (8008270 <FreeRTOS_ProcessDNSCache+0x130>)
 8008228:	e000      	b.n	800822c <FreeRTOS_ProcessDNSCache+0xec>
 800822a:	4912      	ldr	r1, [pc, #72]	@ (8008274 <FreeRTOS_ProcessDNSCache+0x134>)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	061a      	lsls	r2, r3, #24
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	0e1b      	lsrs	r3, r3, #24
 8008248:	4313      	orrs	r3, r2
 800824a:	f107 0214 	add.w	r2, r7, #20
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4808      	ldr	r0, [pc, #32]	@ (8008278 <FreeRTOS_ProcessDNSCache+0x138>)
 8008256:	f01a fbdf 	bl	8022a18 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 800825a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 800825c:	4618      	mov	r0, r3
 800825e:	3764      	adds	r7, #100	@ 0x64
 8008260:	46bd      	mov	sp, r7
 8008262:	bd90      	pop	{r4, r7, pc}
 8008264:	080252b4 	.word	0x080252b4
 8008268:	10624dd3 	.word	0x10624dd3
 800826c:	080252e8 	.word	0x080252e8
 8008270:	08025318 	.word	0x08025318
 8008274:	08025320 	.word	0x08025320
 8008278:	08025324 	.word	0x08025324

0800827c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	e02d      	b.n	80082ee <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8008292:	4a1b      	ldr	r2, [pc, #108]	@ (8008300 <prvFindEntryIndex+0x84>)
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	216c      	movs	r1, #108	@ 0x6c
 8008298:	fb01 f303 	mul.w	r3, r1, r3
 800829c:	4413      	add	r3, r2
 800829e:	3350      	adds	r3, #80	@ 0x50
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01f      	beq.n	80082e6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	226c      	movs	r2, #108	@ 0x6c
 80082aa:	fb02 f303 	mul.w	r3, r2, r3
 80082ae:	3350      	adds	r3, #80	@ 0x50
 80082b0:	4a13      	ldr	r2, [pc, #76]	@ (8008300 <prvFindEntryIndex+0x84>)
 80082b2:	4413      	add	r3, r2
 80082b4:	68f9      	ldr	r1, [r7, #12]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f8 f812 	bl	80002e0 <strcmp>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d112      	bne.n	80082e8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	490e      	ldr	r1, [pc, #56]	@ (8008300 <prvFindEntryIndex+0x84>)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	206c      	movs	r0, #108	@ 0x6c
 80082cc:	fb00 f303 	mul.w	r3, r0, r3
 80082d0:	440b      	add	r3, r1
 80082d2:	3310      	adds	r3, #16
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d106      	bne.n	80082e8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 80082da:	2301      	movs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	601a      	str	r2, [r3, #0]
                    break;
 80082e4:	e006      	b.n	80082f4 <prvFindEntryIndex+0x78>
                continue;
 80082e6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d9ce      	bls.n	8008292 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 80082f4:	697b      	ldr	r3, [r7, #20]
    }
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000fec 	.word	0x20000fec

08008304 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008312:	2300      	movs	r3, #0
 8008314:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8008316:	4a4a      	ldr	r2, [pc, #296]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	216c      	movs	r1, #108	@ 0x6c
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	4413      	add	r3, r2
 8008322:	3364      	adds	r3, #100	@ 0x64
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800832c:	4a44      	ldr	r2, [pc, #272]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	216c      	movs	r1, #108	@ 0x6c
 8008332:	fb01 f303 	mul.w	r3, r1, r3
 8008336:	4413      	add	r3, r2
 8008338:	3360      	adds	r3, #96	@ 0x60
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	061a      	lsls	r2, r3, #24
 800833e:	4940      	ldr	r1, [pc, #256]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	206c      	movs	r0, #108	@ 0x6c
 8008344:	fb00 f303 	mul.w	r3, r0, r3
 8008348:	440b      	add	r3, r1
 800834a:	3360      	adds	r3, #96	@ 0x60
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008354:	431a      	orrs	r2, r3
 8008356:	493a      	ldr	r1, [pc, #232]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	206c      	movs	r0, #108	@ 0x6c
 800835c:	fb00 f303 	mul.w	r3, r0, r3
 8008360:	440b      	add	r3, r1
 8008362:	3360      	adds	r3, #96	@ 0x60
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800836c:	431a      	orrs	r2, r3
 800836e:	4934      	ldr	r1, [pc, #208]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	206c      	movs	r0, #108	@ 0x6c
 8008374:	fb00 f303 	mul.w	r3, r0, r3
 8008378:	440b      	add	r3, r1
 800837a:	3360      	adds	r3, #96	@ 0x60
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	0e1b      	lsrs	r3, r3, #24
 8008380:	4313      	orrs	r3, r2
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	429a      	cmp	r2, r3
 8008386:	d24a      	bcs.n	800841e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8008388:	4a2d      	ldr	r2, [pc, #180]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	216c      	movs	r1, #108	@ 0x6c
 800838e:	fb01 f303 	mul.w	r3, r1, r3
 8008392:	4413      	add	r3, r2
 8008394:	3369      	adds	r3, #105	@ 0x69
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	4929      	ldr	r1, [pc, #164]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	206c      	movs	r0, #108	@ 0x6c
 800839e:	fb00 f202 	mul.w	r2, r0, r2
 80083a2:	440a      	add	r2, r1
 80083a4:	3268      	adds	r2, #104	@ 0x68
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80083ac:	fb01 f202 	mul.w	r2, r1, r2
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80083b4:	7cfb      	ldrb	r3, [r7, #19]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 80083bc:	7cfb      	ldrb	r3, [r7, #19]
 80083be:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 80083c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	216c      	movs	r1, #108	@ 0x6c
 80083c6:	fb01 f303 	mul.w	r3, r1, r3
 80083ca:	4413      	add	r3, r2
 80083cc:	3369      	adds	r3, #105	@ 0x69
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	b2d8      	uxtb	r0, r3
 80083d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	216c      	movs	r1, #108	@ 0x6c
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	3369      	adds	r3, #105	@ 0x69
 80083e2:	4602      	mov	r2, r0
 80083e4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	216c      	movs	r1, #108	@ 0x6c
 80083f4:	fb01 f202 	mul.w	r2, r1, r2
 80083f8:	4413      	add	r3, r2
 80083fa:	4a11      	ldr	r2, [pc, #68]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 80083fc:	4413      	add	r3, r2
 80083fe:	2214      	movs	r2, #20
 8008400:	4619      	mov	r1, r3
 8008402:	68b8      	ldr	r0, [r7, #8]
 8008404:	f01a fd24 	bl	8022e50 <memcpy>
            isRead = pdTRUE;
 8008408:	2301      	movs	r3, #1
 800840a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f8dc 	bl	80085d4 <prvReadDNSCache>
 800841c:	e00a      	b.n	8008434 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800841e:	4a08      	ldr	r2, [pc, #32]	@ (8008440 <prvGetCacheIPEntry+0x13c>)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	216c      	movs	r1, #108	@ 0x6c
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	4413      	add	r3, r2
 800842a:	3350      	adds	r3, #80	@ 0x50
 800842c:	2200      	movs	r2, #0
 800842e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8008430:	2300      	movs	r3, #0
 8008432:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8008434:	69fb      	ldr	r3, [r7, #28]
    }
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000fec 	.word	0x20000fec

08008444 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8008456:	4a26      	ldr	r2, [pc, #152]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	216c      	movs	r1, #108	@ 0x6c
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	4413      	add	r3, r2
 8008462:	3368      	adds	r3, #104	@ 0x68
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b03      	cmp	r3, #3
 8008468:	d81b      	bhi.n	80084a2 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800846a:	4a21      	ldr	r2, [pc, #132]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	216c      	movs	r1, #108	@ 0x6c
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	4413      	add	r3, r2
 8008476:	3368      	adds	r3, #104	@ 0x68
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800847c:	4a1c      	ldr	r2, [pc, #112]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	216c      	movs	r1, #108	@ 0x6c
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	3368      	adds	r3, #104	@ 0x68
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	b2d8      	uxtb	r0, r3
 8008490:	4a17      	ldr	r2, [pc, #92]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	216c      	movs	r1, #108	@ 0x6c
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	4413      	add	r3, r2
 800849c:	3368      	adds	r3, #104	@ 0x68
 800849e:	4602      	mov	r2, r0
 80084a0:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	216c      	movs	r1, #108	@ 0x6c
 80084b0:	fb01 f202 	mul.w	r2, r1, r2
 80084b4:	4413      	add	r3, r2
 80084b6:	4a0e      	ldr	r2, [pc, #56]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 80084b8:	4413      	add	r3, r2
 80084ba:	2214      	movs	r2, #20
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	4618      	mov	r0, r3
 80084c0:	f01a fcc6 	bl	8022e50 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 80084c4:	4a0a      	ldr	r2, [pc, #40]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	216c      	movs	r1, #108	@ 0x6c
 80084ca:	fb01 f303 	mul.w	r3, r1, r3
 80084ce:	4413      	add	r3, r2
 80084d0:	3360      	adds	r3, #96	@ 0x60
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80084d6:	4a06      	ldr	r2, [pc, #24]	@ (80084f0 <prvUpdateCacheEntry+0xac>)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	216c      	movs	r1, #108	@ 0x6c
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	4413      	add	r3, r2
 80084e2:	3364      	adds	r3, #100	@ 0x64
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	601a      	str	r2, [r3, #0]
    }
 80084e8:	bf00      	nop
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000fec 	.word	0x20000fec

080084f4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7f7 fef6 	bl	80002f4 <strlen>
 8008508:	4603      	mov	r3, r0
 800850a:	2b0f      	cmp	r3, #15
 800850c:	d859      	bhi.n	80085c2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800850e:	4b2f      	ldr	r3, [pc, #188]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	226c      	movs	r2, #108	@ 0x6c
 8008514:	fb02 f303 	mul.w	r3, r2, r3
 8008518:	3350      	adds	r3, #80	@ 0x50
 800851a:	4a2d      	ldr	r2, [pc, #180]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 800851c:	4413      	add	r3, r2
 800851e:	2210      	movs	r2, #16
 8008520:	68f9      	ldr	r1, [r7, #12]
 8008522:	4618      	mov	r0, r3
 8008524:	f01b fcae 	bl	8023e84 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008528:	4b28      	ldr	r3, [pc, #160]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	226c      	movs	r2, #108	@ 0x6c
 800852e:	fb02 f303 	mul.w	r3, r2, r3
 8008532:	4a27      	ldr	r2, [pc, #156]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 8008534:	4413      	add	r3, r2
 8008536:	2214      	movs	r2, #20
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4618      	mov	r0, r3
 800853c:	f01a fc88 	bl	8022e50 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8008540:	4b22      	ldr	r3, [pc, #136]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a22      	ldr	r2, [pc, #136]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 8008546:	216c      	movs	r1, #108	@ 0x6c
 8008548:	fb01 f303 	mul.w	r3, r1, r3
 800854c:	4413      	add	r3, r2
 800854e:	3360      	adds	r3, #96	@ 0x60
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008554:	4b1d      	ldr	r3, [pc, #116]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1d      	ldr	r2, [pc, #116]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 800855a:	216c      	movs	r1, #108	@ 0x6c
 800855c:	fb01 f303 	mul.w	r3, r1, r3
 8008560:	4413      	add	r3, r2
 8008562:	3364      	adds	r3, #100	@ 0x64
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8008568:	4b18      	ldr	r3, [pc, #96]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a18      	ldr	r2, [pc, #96]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 800856e:	216c      	movs	r1, #108	@ 0x6c
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	4413      	add	r3, r2
 8008576:	3368      	adds	r3, #104	@ 0x68
 8008578:	2201      	movs	r2, #1
 800857a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 800857c:	4b13      	ldr	r3, [pc, #76]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a13      	ldr	r2, [pc, #76]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 8008582:	216c      	movs	r1, #108	@ 0x6c
 8008584:	fb01 f303 	mul.w	r3, r1, r3
 8008588:	4413      	add	r3, r2
 800858a:	3369      	adds	r3, #105	@ 0x69
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8008590:	4b0e      	ldr	r3, [pc, #56]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	226c      	movs	r2, #108	@ 0x6c
 8008596:	fb02 f303 	mul.w	r3, r2, r3
 800859a:	3314      	adds	r3, #20
 800859c:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <prvInsertCacheEntry+0xdc>)
 800859e:	4413      	add	r3, r2
 80085a0:	223c      	movs	r2, #60	@ 0x3c
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f01a fd60 	bl	802306a <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80085aa:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3301      	adds	r3, #1
 80085b0:	4a06      	ldr	r2, [pc, #24]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 80085b2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d102      	bne.n	80085c2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <prvInsertCacheEntry+0xd8>)
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80085c2:	bf00      	nop
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	2000119c 	.word	0x2000119c
 80085d0:	20000fec 	.word	0x20000fec

080085d4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 80085de:	2301      	movs	r3, #1
 80085e0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 80085ea:	4a2e      	ldr	r2, [pc, #184]	@ (80086a4 <prvReadDNSCache+0xd0>)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	216c      	movs	r1, #108	@ 0x6c
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	4413      	add	r3, r2
 80085f6:	3368      	adds	r3, #104	@ 0x68
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d901      	bls.n	8008606 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008602:	2304      	movs	r3, #4
 8008604:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008606:	2300      	movs	r3, #0
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	e041      	b.n	8008690 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	216c      	movs	r1, #108	@ 0x6c
 800861a:	fb01 f202 	mul.w	r2, r1, r2
 800861e:	4413      	add	r3, r2
 8008620:	4a20      	ldr	r2, [pc, #128]	@ (80086a4 <prvReadDNSCache+0xd0>)
 8008622:	4413      	add	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <prvReadDNSCache+0x60>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d010      	beq.n	8008654 <prvReadDNSCache+0x80>
 8008632:	e01d      	b.n	8008670 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	226c      	movs	r2, #108	@ 0x6c
 800863c:	fb02 f303 	mul.w	r3, r2, r3
 8008640:	3350      	adds	r3, #80	@ 0x50
 8008642:	4a18      	ldr	r2, [pc, #96]	@ (80086a4 <prvReadDNSCache+0xd0>)
 8008644:	4413      	add	r3, r2
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	2102      	movs	r1, #2
 800864a:	4618      	mov	r0, r3
 800864c:	f7ff fc8c 	bl	8007f68 <pxNew_AddrInfo>
 8008650:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8008652:	e011      	b.n	8008678 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	226c      	movs	r2, #108	@ 0x6c
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	3350      	adds	r3, #80	@ 0x50
 800865e:	4a11      	ldr	r2, [pc, #68]	@ (80086a4 <prvReadDNSCache+0xd0>)
 8008660:	4413      	add	r3, r2
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	210a      	movs	r1, #10
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fc7e 	bl	8007f68 <pxNew_AddrInfo>
 800866c:	6178      	str	r0, [r7, #20]
                        break;
 800866e:	e003      	b.n	8008678 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8008670:	480d      	ldr	r0, [pc, #52]	@ (80086a8 <prvReadDNSCache+0xd4>)
 8008672:	f01a f9d1 	bl	8022a18 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8008676:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00d      	beq.n	800869a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	331c      	adds	r3, #28
 8008688:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	3301      	adds	r3, #1
 800868e:	61fb      	str	r3, [r7, #28]
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	429a      	cmp	r2, r3
 8008696:	d3b9      	bcc.n	800860c <prvReadDNSCache+0x38>
        }
    }
 8008698:	e000      	b.n	800869c <prvReadDNSCache+0xc8>
                break;
 800869a:	bf00      	nop
    }
 800869c:	bf00      	nop
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20000fec 	.word	0x20000fec
 80086a8:	08025358 	.word	0x08025358

080086ac <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08a      	sub	sp, #40	@ 0x28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80086ba:	4b28      	ldr	r3, [pc, #160]	@ (800875c <xDNSDoCallback+0xb0>)
 80086bc:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80086d0:	f7fc fac0 	bl	8004c54 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	623b      	str	r3, [r7, #32]
 80086da:	e029      	b.n	8008730 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d101      	bne.n	80086f0 <xDNSDoCallback+0x44>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xDNSDoCallback+0x46>
 80086f0:	2300      	movs	r3, #0
 80086f2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d117      	bne.n	800872a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3314      	adds	r3, #20
 800870a:	4618      	mov	r0, r3
 800870c:	f7fb f9ba 	bl	8003a84 <uxListRemove>
                    vPortFree( pxCallback );
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7fe faf3 	bl	8006cfc <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008716:	4b12      	ldr	r3, [pc, #72]	@ (8008760 <xDNSDoCallback+0xb4>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d102      	bne.n	8008724 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800871e:	2000      	movs	r0, #0
 8008720:	f002 f9ca 	bl	800aab8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008724:	2301      	movs	r3, #1
 8008726:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008728:	e006      	b.n	8008738 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8008730:	6a3a      	ldr	r2, [r7, #32]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d1d1      	bne.n	80086dc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008738:	f7fc fa9a 	bl	8004c70 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d006      	beq.n	8008750 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	683a      	ldr	r2, [r7, #0]
 800874c:	69b9      	ldr	r1, [r7, #24]
 800874e:	4798      	blx	r3
        }

        return xResult;
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008752:	4618      	mov	r0, r3
 8008754:	3728      	adds	r7, #40	@ 0x28
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200011a8 	.word	0x200011a8
 8008760:	200011a0 	.word	0x200011a0

08008764 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	@ 0x30
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800876c:	4b40      	ldr	r3, [pc, #256]	@ (8008870 <vDNSCheckCallBack+0x10c>)
 800876e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	4618      	mov	r0, r3
 8008776:	f7fb f8fb 	bl	8003970 <vListInitialise>

        vTaskSuspendAll();
 800877a:	f7fc fa6b 	bl	8004c54 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008784:	e02e      	b.n	80087e4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <vDNSCheckCallBack+0x50>
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d108      	bne.n	80087b4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	3314      	adds	r3, #20
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fb f96c 	bl	8003a84 <uxListRemove>
                    vPortFree( pxCallback );
 80087ac:	6a38      	ldr	r0, [r7, #32]
 80087ae:	f7fe faa5 	bl	8006cfc <vPortFree>
 80087b2:	e017      	b.n	80087e4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	3308      	adds	r3, #8
 80087b8:	6a3a      	ldr	r2, [r7, #32]
 80087ba:	4611      	mov	r1, r2
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fc ff3d 	bl	800563c <xTaskCheckForTimeOut>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00d      	beq.n	80087e4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	3314      	adds	r3, #20
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fb f959 	bl	8003a84 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	f103 0214 	add.w	r2, r3, #20
 80087d8:	f107 030c 	add.w	r3, r7, #12
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fb f8f3 	bl	80039ca <vListInsertEnd>
                 pxIterator != xEnd; )
 80087e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d1cc      	bne.n	8008786 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80087ec:	f7fc fa40 	bl	8004c70 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d030      	beq.n	8008858 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	3308      	adds	r3, #8
 80087fc:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008804:	e024      	b.n	8008850 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d009      	beq.n	800882e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008820:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008826:	6911      	ldr	r1, [r2, #16]
 8008828:	2200      	movs	r2, #0
 800882a:	4798      	blx	r3
 800882c:	e008      	b.n	8008840 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008834:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800883a:	6911      	ldr	r1, [r2, #16]
 800883c:	2200      	movs	r2, #0
 800883e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	3314      	adds	r3, #20
 8008844:	4618      	mov	r0, r3
 8008846:	f7fb f91d 	bl	8003a84 <uxListRemove>
                vPortFree( pxCallback );
 800884a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800884c:	f7fe fa56 	bl	8006cfc <vPortFree>
                 pxIterator != xEnd;
 8008850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008854:	429a      	cmp	r2, r3
 8008856:	d1d6      	bne.n	8008806 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008858:	4b06      	ldr	r3, [pc, #24]	@ (8008874 <vDNSCheckCallBack+0x110>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008860:	2000      	movs	r0, #0
 8008862:	f002 f929 	bl	800aab8 <vIPSetDNSTimerEnableState>
        }
    }
 8008866:	bf00      	nop
 8008868:	3730      	adds	r7, #48	@ 0x30
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	200011a8 	.word	0x200011a8
 8008874:	200011a0 	.word	0x200011a0

08008878 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008878:	b580      	push	{r7, lr}
 800887a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800887c:	4802      	ldr	r0, [pc, #8]	@ (8008888 <vDNSCallbackInitialise+0x10>)
 800887e:	f7fb f877 	bl	8003970 <vListInitialise>
    }
 8008882:	bf00      	nop
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200011a0 	.word	0x200011a0

0800888c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800888c:	b480      	push	{r7}
 800888e:	b089      	sub	sp, #36	@ 0x24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	e069      	b.n	800898a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	4413      	add	r3, r2
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80088c4:	d144      	bne.n	8008950 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d903      	bls.n	80088d4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	3302      	adds	r3, #2
 80088d0:	61bb      	str	r3, [r7, #24]
 80088d2:	e05a      	b.n	800898a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61bb      	str	r3, [r7, #24]
 80088d8:	e057      	b.n	800898a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d008      	beq.n	80088f2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	4413      	add	r3, r2
 80088e6:	3334      	adds	r3, #52	@ 0x34
 80088e8:	222e      	movs	r2, #46	@ 0x2e
 80088ea:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	3301      	adds	r3, #1
 80088f0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	3301      	adds	r3, #1
 8008900:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	4413      	add	r3, r2
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	d202      	bcs.n	8008914 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	61bb      	str	r3, [r7, #24]
                    break;
 8008912:	e027      	b.n	8008964 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d812      	bhi.n	8008946 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	61bb      	str	r3, [r7, #24]
                    break;
 8008924:	e01e      	b.n	8008964 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	4413      	add	r3, r2
 800892c:	7819      	ldrb	r1, [r3, #0]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	3334      	adds	r3, #52	@ 0x34
 8008936:	460a      	mov	r2, r1
 8008938:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	3301      	adds	r3, #1
 800893e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	3301      	adds	r3, #1
 8008944:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	617a      	str	r2, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1ea      	bne.n	8008926 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d205      	bcs.n	8008964 <DNS_ReadNameField+0xd8>
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	4413      	add	r3, r2
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1ba      	bne.n	80088da <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00f      	beq.n	800898a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	429a      	cmp	r2, r3
 8008970:	d209      	bcs.n	8008986 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	4413      	add	r3, r2
 8008978:	3334      	adds	r3, #52	@ 0x34
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	3301      	adds	r3, #1
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	e001      	b.n	800898a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800898a:	69bb      	ldr	r3, [r7, #24]
    }
 800898c:	4618      	mov	r0, r3
 800898e:	3724      	adds	r7, #36	@ 0x24
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	613b      	str	r3, [r7, #16]
 80089b4:	e03f      	b.n	8008a36 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4413      	add	r3, r2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80089c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80089c4:	d11f      	bne.n	8008a06 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d903      	bls.n	80089d4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	3302      	adds	r3, #2
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	e030      	b.n	8008a36 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
 80089d8:	e02d      	b.n	8008a36 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	4413      	add	r3, r2
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	3301      	adds	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d908      	bls.n	8008a00 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	e002      	b.n	8008a06 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
                    break;
 8008a04:	e008      	b.n	8008a18 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <DNS_SkipNameField+0x80>
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d8e0      	bhi.n	80089da <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4413      	add	r3, r2
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	e001      	b.n	8008a36 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008a36:	693b      	ldr	r3, [r7, #16]
    }
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b0f6      	sub	sp, #472	@ 0x1d8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8008a4e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8008a52:	6020      	str	r0, [r4, #0]
 8008a54:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008a58:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8008a5c:	6001      	str	r1, [r0, #0]
 8008a5e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008a62:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8008a66:	600a      	str	r2, [r1, #0]
 8008a68:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008a6c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8008a70:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008a72:	2301      	movs	r3, #1
 8008a74:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8008a7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a82:	224c      	movs	r2, #76	@ 0x4c
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f01a faef 	bl	802306a <memset>
        xSet.usPortNumber = usPort;
 8008a8c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8008a90:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008a94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008a98:	3344      	adds	r3, #68	@ 0x44
 8008a9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8008a9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008aa2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8008aac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ab0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b0b      	cmp	r3, #11
 8008ab8:	d803      	bhi.n	8008ac2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8008ac0:	e35a      	b.n	8009178 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8008ac2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ac6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8008ad0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ad4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8008ade:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ae2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8008af8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008afc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008b06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b0a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	330c      	adds	r3, #12
 8008b12:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008b16:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008b1a:	3b0c      	subs	r3, #12
 8008b1c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008b20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	b21a      	sxth	r2, r3
 8008b2c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	0a1b      	lsrs	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	b21b      	sxth	r3, r3
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	b21b      	sxth	r3, r3
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008b44:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	b21a      	sxth	r2, r3
 8008b50:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b21b      	sxth	r3, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008b68:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008b6c:	885b      	ldrh	r3, [r3, #2]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008b74:	2b80      	cmp	r3, #128	@ 0x80
 8008b76:	d11b      	bne.n	8008bb0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 8008b7e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d103      	bne.n	8008b8e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008b8c:	e2f4      	b.n	8009178 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 8008b8e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d114      	bne.n	8008bc0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008b9a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8008b9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7ff fe71 	bl	800888c <DNS_ReadNameField>
 8008baa:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008bae:	e007      	b.n	8008bc0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008bb0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008bbe:	e2db      	b.n	8009178 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008bc6:	e064      	b.n	8008c92 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8008bc8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d103      	bne.n	8008bd8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bd4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8008bd8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d108      	bne.n	8008bf2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8008be0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008be4:	2110      	movs	r1, #16
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff fe50 	bl	800888c <DNS_ReadNameField>
 8008bec:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8008bf0:	e009      	b.n	8008c06 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8008bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008bf6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7ff fecb 	bl	8008998 <DNS_SkipNameField>
 8008c02:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008c06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d103      	bne.n	8008c16 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008c14:	e043      	b.n	8008c9e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008c16:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8008c1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008c1e:	4413      	add	r3, r2
 8008c20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008c24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008c28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008c32:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008c36:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008c40:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d91b      	bls.n	8008c80 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f002 fa58 	bl	800b102 <usChar2u16>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fa4f 	bl	800b102 <usChar2u16>
 8008c64:	4603      	mov	r3, r0
 8008c66:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008c6e:	3304      	adds	r3, #4
 8008c70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008c74:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008c78:	3b04      	subs	r3, #4
 8008c7a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8008c7e:	e003      	b.n	8008c88 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008c86:	e00a      	b.n	8008c9e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008c88:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008c92:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008c96:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d394      	bcc.n	8008bc8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008c9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 8265 	beq.w	8009172 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008ca8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d10d      	bne.n	8008ccc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008cb0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008cb4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cb8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008cbc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	f000 fa73 	bl	80091ac <parseDNSAnswer>
 8008cc6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8008cca:	e255      	b.n	8009178 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008ccc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d004      	beq.n	8008cde <DNS_ParseDNSReply+0x29a>
 8008cd4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008cd8:	2b1c      	cmp	r3, #28
 8008cda:	f040 824d 	bne.w	8009178 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8008cde:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	f040 8248 	bne.w	8009178 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008ce8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008cec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008cf0:	6818      	ldr	r0, [r3, #0]
 8008cf2:	f001 ff9f 	bl	800ac34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008cf6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8008cfa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8008d02:	48c4      	ldr	r0, [pc, #784]	@ (8009014 <DNS_ParseDNSReply+0x5d0>)
 8008d04:	f019 fe88 	bl	8022a18 <lUDPLoggingPrintf>
                            break;
 8008d08:	e236      	b.n	8009178 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8008d0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008d14:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008d20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d26:	d003      	beq.n	8008d30 <DNS_ParseDNSReply+0x2ec>
 8008d28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008d2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d2e:	d101      	bne.n	8008d34 <DNS_ParseDNSReply+0x2f0>
 8008d30:	2301      	movs	r3, #1
 8008d32:	e000      	b.n	8008d36 <DNS_ParseDNSReply+0x2f2>
 8008d34:	2300      	movs	r3, #0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <DNS_ParseDNSReply+0x300>
 8008d3a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8008d3e:	48b6      	ldr	r0, [pc, #728]	@ (8009018 <DNS_ParseDNSReply+0x5d4>)
 8008d40:	f7f8 fea4 	bl	8001a8c <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008d44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8213 	beq.w	8009176 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008d50:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8008d5a:	f107 0314 	add.w	r3, r7, #20
 8008d5e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008d62:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008d66:	4618      	mov	r0, r3
 8008d68:	f01a f872 	bl	8022e50 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8008d6c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008d70:	461a      	mov	r2, r3
 8008d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d76:	3334      	adds	r3, #52	@ 0x34
 8008d78:	4619      	mov	r1, r3
 8008d7a:	48a8      	ldr	r0, [pc, #672]	@ (800901c <DNS_ParseDNSReply+0x5d8>)
 8008d7c:	f019 fe4c 	bl	8022a18 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008d80:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008d8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008d8e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008d92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008d96:	3334      	adds	r3, #52	@ 0x34
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7f8 ff15 	bl	8001bc8 <xApplicationDNSQueryHook>
 8008d9e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008da2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <DNS_ParseDNSReply+0x390>
 8008daa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008db2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <DNS_ParseDNSReply+0x390>
 8008dc0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008dc4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008dd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 81cd 	beq.w	8009178 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8008dea:	4b8d      	ldr	r3, [pc, #564]	@ (8009020 <DNS_ParseDNSReply+0x5dc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d164      	bne.n	8008ebc <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008df2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008df6:	f001 fbd7 	bl	800a5a8 <uxIPHeaderSizePacket>
 8008dfa:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8008dfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008e08:	3316      	adds	r3, #22
 8008e0a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008e0e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008e12:	2b1c      	cmp	r3, #28
 8008e14:	d103      	bne.n	8008e1e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008e16:	231c      	movs	r3, #28
 8008e18:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8008e1c:	e002      	b.n	8008e24 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8008e1e:	2310      	movs	r3, #16
 8008e20:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008e24:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008e28:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008e2c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8008e2e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008e32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008e36:	4413      	add	r3, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008e3e:	f001 fe65 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 8008e42:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008e46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d032      	beq.n	8008eb4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8008e4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008e52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e56:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008e62:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008e66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e6a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008e76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008e7a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008e7e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008e88:	4413      	add	r3, r2
 8008e8a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008e8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008e92:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008e96:	4413      	add	r3, r2
 8008e98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008e9c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008ea0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8008eaa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008eae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008eb2:	e00b      	b.n	8008ecc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008eba:	e007      	b.n	8008ecc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008ebc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008ec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ec2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8008ecc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8151 	beq.w	8009178 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008eda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8008ede:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	2280      	movs	r2, #128	@ 0x80
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008eec:	3303      	adds	r3, #3
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008ef2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ef6:	3306      	adds	r3, #6
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008f00:	3307      	adds	r3, #7
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008f06:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
 8008f10:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008f14:	3309      	adds	r3, #9
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8008f1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008f1e:	330a      	adds	r3, #10
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
 8008f24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008f28:	330b      	adds	r3, #11
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008f2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f32:	22c0      	movs	r2, #192	@ 0xc0
 8008f34:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008f36:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008f3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f46:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008f48:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008f4c:	0a1b      	lsrs	r3, r3, #8
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f54:	3302      	adds	r3, #2
 8008f56:	b2d2      	uxtb	r2, r2
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008f5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f62:	3303      	adds	r3, #3
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008f68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f76:	3305      	adds	r3, #5
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008f7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f80:	3306      	adds	r3, #6
 8008f82:	2200      	movs	r2, #0
 8008f84:	701a      	strb	r2, [r3, #0]
 8008f86:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f8a:	3307      	adds	r3, #7
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	701a      	strb	r2, [r3, #0]
 8008f90:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f94:	3308      	adds	r3, #8
 8008f96:	2201      	movs	r2, #1
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f9e:	3309      	adds	r3, #9
 8008fa0:	222c      	movs	r2, #44	@ 0x2c
 8008fa2:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008fa4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008fa8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008fb8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008fbc:	2b1c      	cmp	r3, #28
 8008fbe:	d131      	bne.n	8009024 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008fc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008fc4:	330a      	adds	r3, #10
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
 8008fca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008fce:	330b      	adds	r3, #11
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008fd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008fd8:	f103 020c 	add.w	r2, r3, #12
 8008fdc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008fe0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008fea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fec:	6028      	str	r0, [r5, #0]
 8008fee:	6069      	str	r1, [r5, #4]
 8008ff0:	60aa      	str	r2, [r5, #8]
 8008ff2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008ff4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008ff8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8009002:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8009006:	b29b      	uxth	r3, r3
 8009008:	331c      	adds	r3, #28
 800900a:	b29b      	uxth	r3, r3
 800900c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8009010:	e09a      	b.n	8009148 <DNS_ParseDNSReply+0x704>
 8009012:	bf00      	nop
 8009014:	08025400 	.word	0x08025400
 8009018:	08025434 	.word	0x08025434
 800901c:	08025468 	.word	0x08025468
 8009020:	08028328 	.word	0x08028328
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8009024:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009028:	330a      	adds	r3, #10
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009032:	330b      	adds	r3, #11
 8009034:	2204      	movs	r2, #4
 8009036:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8009038:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800903c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	061a      	lsls	r2, r3, #24
 8009044:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8009048:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	021b      	lsls	r3, r3, #8
 8009050:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009054:	431a      	orrs	r2, r3
 8009056:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800905a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	0a1b      	lsrs	r3, r3, #8
 8009062:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009066:	431a      	orrs	r2, r3
 8009068:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800906c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	0e1b      	lsrs	r3, r3, #24
 8009074:	4313      	orrs	r3, r2
 8009076:	0e1a      	lsrs	r2, r3, #24
 8009078:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800907c:	330c      	adds	r3, #12
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8009086:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	061a      	lsls	r2, r3, #24
 800908e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8009092:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800909e:	431a      	orrs	r2, r3
 80090a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80090a4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	0a1b      	lsrs	r3, r3, #8
 80090ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80090b0:	431a      	orrs	r2, r3
 80090b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80090b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	0e1b      	lsrs	r3, r3, #24
 80090be:	4313      	orrs	r3, r2
 80090c0:	0c1a      	lsrs	r2, r3, #16
 80090c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80090c6:	330d      	adds	r3, #13
 80090c8:	b2d2      	uxtb	r2, r2
 80090ca:	701a      	strb	r2, [r3, #0]
 80090cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80090d0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	061a      	lsls	r2, r3, #24
 80090d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80090dc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80090e8:	431a      	orrs	r2, r3
 80090ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80090ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80090fa:	431a      	orrs	r2, r3
 80090fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8009100:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	0e1b      	lsrs	r3, r3, #24
 8009108:	4313      	orrs	r3, r2
 800910a:	0a1a      	lsrs	r2, r3, #8
 800910c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009110:	330e      	adds	r3, #14
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800911a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	0e1a      	lsrs	r2, r3, #24
 8009122:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009126:	330f      	adds	r3, #15
 8009128:	b2d2      	uxtb	r2, r2
 800912a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 800912c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009130:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 800913a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800913e:	b29b      	uxth	r3, r3
 8009140:	3310      	adds	r3, #16
 8009142:	b29b      	uxth	r3, r3
 8009144:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8009148:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 800914c:	4619      	mov	r1, r3
 800914e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009152:	f000 fa21 	bl	8009598 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8009156:	2100      	movs	r1, #0
 8009158:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800915c:	f001 f924 	bl	800a3a8 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8009160:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8009168:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800916c:	f00e fd4a 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
 8009170:	e002      	b.n	8009178 <DNS_ParseDNSReply+0x734>
                    break;
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <DNS_ParseDNSReply+0x734>
                            break;
 8009176:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8009178:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8009180:	2300      	movs	r3, #0
 8009182:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8009186:	e009      	b.n	800919c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8009188:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800918c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d102      	bne.n	800919c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800919c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 80091a0:	4618      	mov	r0, r3
 80091a2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bdb0      	pop	{r4, r5, r7, pc}
 80091aa:	bf00      	nop

080091ac <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b0a7      	sub	sp, #156	@ 0x9c
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80091be:	2304      	movs	r3, #4
 80091c0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80091d6:	e1c1      	b.n	800955c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 80091d8:	2300      	movs	r3, #0
 80091da:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80091e0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80091e4:	429a      	cmp	r2, r3
 80091e6:	f240 81c1 	bls.w	800956c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68da      	ldr	r2, [r3, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	4619      	mov	r1, r3
 80091f4:	4610      	mov	r0, r2
 80091f6:	f7ff fbcf 	bl	8008998 <DNS_SkipNameField>
 80091fa:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 80091fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8009202:	2300      	movs	r3, #0
 8009204:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009208:	e1b1      	b.n	800956e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009222:	441a      	add	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	695a      	ldr	r2, [r3, #20]
 800922c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800922e:	1ad2      	subs	r2, r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d803      	bhi.n	8009244 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009242:	e194      	b.n	800956e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4618      	mov	r0, r3
 800924a:	f001 ff5a 	bl	800b102 <usChar2u16>
 800924e:	4603      	mov	r3, r0
 8009250:	461a      	mov	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8b1b      	ldrh	r3, [r3, #24]
 800925a:	2b1c      	cmp	r3, #28
 800925c:	d10c      	bne.n	8009278 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2210      	movs	r2, #16
 8009262:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	695a      	ldr	r2, [r3, #20]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	330a      	adds	r3, #10
 800926e:	429a      	cmp	r2, r3
 8009270:	d323      	bcc.n	80092ba <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8009272:	2301      	movs	r3, #1
 8009274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009276:	e020      	b.n	80092ba <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8b1b      	ldrh	r3, [r3, #24]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d11c      	bne.n	80092ba <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2204      	movs	r2, #4
 8009284:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	330a      	adds	r3, #10
 8009290:	429a      	cmp	r2, r3
 8009292:	d312      	bcc.n	80092ba <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	330a      	adds	r3, #10
 800929a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800929c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80092a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80092aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092ac:	f019 fdd0 	bl	8022e50 <memcpy>

                    if( ulTestAddress != 0U )
 80092b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 80092b6:	2301      	movs	r3, #1
 80092b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 80092ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 810d 	beq.w	80094dc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80092c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092ca:	891b      	ldrh	r3, [r3, #8]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	021b      	lsls	r3, r3, #8
 80092d0:	b21a      	sxth	r2, r3
 80092d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092d4:	891b      	ldrh	r3, [r3, #8]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	0a1b      	lsrs	r3, r3, #8
 80092da:	b29b      	uxth	r3, r3
 80092dc:	b21b      	sxth	r3, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80092e6:	b21b      	sxth	r3, r3
 80092e8:	429a      	cmp	r2, r3
 80092ea:	f040 80d0 	bne.w	800948e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d11c      	bne.n	8009330 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 80092fc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	6859      	ldr	r1, [r3, #4]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d009      	beq.n	8009324 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3334      	adds	r3, #52	@ 0x34
 8009314:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009318:	210a      	movs	r1, #10
 800931a:	4618      	mov	r0, r3
 800931c:	f7fe fe24 	bl	8007f68 <pxNew_AddrInfo>
 8009320:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009324:	2301      	movs	r3, #1
 8009326:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2201      	movs	r2, #1
 800932c:	61da      	str	r2, [r3, #28]
 800932e:	e021      	b.n	8009374 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	330a      	adds	r3, #10
 8009336:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	331c      	adds	r3, #28
 800933c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	6a1b      	ldr	r3, [r3, #32]
 8009342:	461a      	mov	r2, r3
 8009344:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009346:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009348:	f019 fd82 	bl	8022e50 <memcpy>

                        if( ppxAddressInfo != NULL )
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	331c      	adds	r3, #28
 8009356:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3334      	adds	r3, #52	@ 0x34
 800935c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800935e:	2102      	movs	r1, #2
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe fe01 	bl	8007f68 <pxNew_AddrInfo>
 8009366:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8009370:	2300      	movs	r3, #0
 8009372:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8009374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009378:	2b00      	cmp	r3, #0
 800937a:	d013      	beq.n	80093a4 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d104      	bne.n	800938e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e004      	b.n	8009398 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009396:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800939c:	f103 021c 	add.w	r2, r3, #28
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <parseDNSAnswer+0x204>
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	e000      	b.n	80093b2 <parseDNSAnswer+0x206>
 80093b0:	2300      	movs	r3, #0
 80093b2:	4619      	mov	r1, r3
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f7ff f979 	bl	80086ac <xDNSDoCallback>
 80093ba:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 80093bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d011      	beq.n	80093f4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80093d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80093d8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80093da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80093de:	2300      	movs	r3, #0
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	f7fe fe85 	bl	80080f2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80093ec:	3301      	adds	r3, #1
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8b1b      	ldrh	r3, [r3, #24]
 80093f8:	2b1c      	cmp	r3, #28
 80093fa:	d11f      	bne.n	800943c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80093fc:	f107 0214 	add.w	r2, r7, #20
 8009400:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009404:	2328      	movs	r3, #40	@ 0x28
 8009406:	200a      	movs	r0, #10
 8009408:	f006 fb6c 	bl	800fae4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	4618      	mov	r0, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d001      	beq.n	8009428 <parseDNSAnswer+0x27c>
 8009424:	4b58      	ldr	r3, [pc, #352]	@ (8009588 <parseDNSAnswer+0x3dc>)
 8009426:	e000      	b.n	800942a <parseDNSAnswer+0x27e>
 8009428:	4b58      	ldr	r3, [pc, #352]	@ (800958c <parseDNSAnswer+0x3e0>)
 800942a:	f107 0114 	add.w	r1, r7, #20
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	460b      	mov	r3, r1
 8009432:	4601      	mov	r1, r0
 8009434:	4856      	ldr	r0, [pc, #344]	@ (8009590 <parseDNSAnswer+0x3e4>)
 8009436:	f019 faef 	bl	8022a18 <lUDPLoggingPrintf>
 800943a:	e01f      	b.n	800947c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8009442:	f107 0214 	add.w	r2, r7, #20
 8009446:	2328      	movs	r3, #40	@ 0x28
 8009448:	2002      	movs	r0, #2
 800944a:	f006 fb4b 	bl	800fae4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	b29b      	uxth	r3, r3
 8009456:	4618      	mov	r0, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <parseDNSAnswer+0x2be>
 8009466:	4b48      	ldr	r3, [pc, #288]	@ (8009588 <parseDNSAnswer+0x3dc>)
 8009468:	e000      	b.n	800946c <parseDNSAnswer+0x2c0>
 800946a:	4b48      	ldr	r3, [pc, #288]	@ (800958c <parseDNSAnswer+0x3e0>)
 800946c:	f107 0114 	add.w	r1, r7, #20
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	460b      	mov	r3, r1
 8009474:	4601      	mov	r1, r0
 8009476:	4846      	ldr	r0, [pc, #280]	@ (8009590 <parseDNSAnswer+0x3e4>)
 8009478:	f019 face 	bl	8022a18 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800947c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009480:	2b00      	cmp	r3, #0
 8009482:	d119      	bne.n	80094b8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800948c:	e014      	b.n	80094b8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800948e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009490:	891b      	ldrh	r3, [r3, #8]
 8009492:	b29b      	uxth	r3, r3
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	b21a      	sxth	r2, r3
 8009498:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800949a:	891b      	ldrh	r3, [r3, #8]
 800949c:	b29b      	uxth	r3, r3
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	b21b      	sxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b21b      	sxth	r3, r3
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4619      	mov	r1, r3
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	461a      	mov	r2, r3
 80094b2:	4838      	ldr	r0, [pc, #224]	@ (8009594 <parseDNSAnswer+0x3e8>)
 80094b4:	f019 fab0 	bl	8022a18 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	330a      	adds	r3, #10
 80094c2:	441a      	add	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	695a      	ldr	r2, [r3, #20]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	f1a3 020a 	sub.w	r2, r3, #10
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	615a      	str	r2, [r3, #20]
 80094da:	e03a      	b.n	8009552 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	2b09      	cmp	r3, #9
 80094e2:	d936      	bls.n	8009552 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f103 020a 	add.w	r2, r3, #10
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	f1a3 020a 	sub.w	r2, r3, #10
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8009502:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009504:	891b      	ldrh	r3, [r3, #8]
 8009506:	b29b      	uxth	r3, r3
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	b21a      	sxth	r2, r3
 800950c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800950e:	891b      	ldrh	r3, [r3, #8]
 8009510:	b29b      	uxth	r3, r3
 8009512:	0a1b      	lsrs	r3, r3, #8
 8009514:	b29b      	uxth	r3, r3
 8009516:	b21b      	sxth	r3, r3
 8009518:	4313      	orrs	r3, r2
 800951a:	b21b      	sxth	r3, r3
 800951c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	695a      	ldr	r2, [r3, #20]
 8009524:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009528:	429a      	cmp	r2, r3
 800952a:	d30e      	bcc.n	800954a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68da      	ldr	r2, [r3, #12]
 8009530:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	695a      	ldr	r2, [r3, #20]
 800953e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009542:	1ad2      	subs	r2, r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	615a      	str	r2, [r3, #20]
 8009548:	e003      	b.n	8009552 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8009550:	e00d      	b.n	800956e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009552:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009556:	3301      	adds	r3, #1
 8009558:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88db      	ldrh	r3, [r3, #6]
 8009560:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009564:	429a      	cmp	r2, r3
 8009566:	f4ff ae37 	bcc.w	80091d8 <parseDNSAnswer+0x2c>
 800956a:	e000      	b.n	800956e <parseDNSAnswer+0x3c2>
                break;
 800956c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800956e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <parseDNSAnswer+0x3d0>
 8009576:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800957a:	e000      	b.n	800957e <parseDNSAnswer+0x3d2>
 800957c:	2300      	movs	r3, #0
    }
 800957e:	4618      	mov	r0, r3
 8009580:	3794      	adds	r7, #148	@ 0x94
 8009582:	46bd      	mov	sp, r7
 8009584:	bd90      	pop	{r4, r7, pc}
 8009586:	bf00      	nop
 8009588:	08025498 	.word	0x08025498
 800958c:	0802549c 	.word	0x0802549c
 8009590:	080254a4 	.word	0x080254a4
 8009594:	080254dc 	.word	0x080254dc

08009598 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8009598:	b580      	push	{r7, lr}
 800959a:	b08c      	sub	sp, #48	@ 0x30
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095a6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fffd 	bl	800a5a8 <uxIPHeaderSizePacket>
 80095ae:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d104      	bne.n	80095c0 <prepareReplyDNSMessage+0x28>
 80095b6:	f240 319f 	movw	r1, #927	@ 0x39f
 80095ba:	4865      	ldr	r0, [pc, #404]	@ (8009750 <prepareReplyDNSMessage+0x1b8>)
 80095bc:	f7f8 fa66 	bl	8001a8c <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	330e      	adds	r3, #14
 80095ca:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	2b28      	cmp	r3, #40	@ 0x28
 80095d0:	d150      	bne.n	8009674 <prepareReplyDNSMessage+0xdc>
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095da:	2b60      	cmp	r3, #96	@ 0x60
 80095dc:	d14a      	bne.n	8009674 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	330e      	adds	r3, #14
 80095e8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3336      	adds	r3, #54	@ 0x36
 80095ee:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	3308      	adds	r3, #8
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	021b      	lsls	r3, r3, #8
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	3308      	adds	r3, #8
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	b29b      	uxth	r3, r3
 8009606:	4313      	orrs	r3, r2
 8009608:	b29a      	uxth	r2, r3
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f103 0018 	add.w	r0, r3, #24
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	3308      	adds	r3, #8
 8009618:	2210      	movs	r2, #16
 800961a:	4619      	mov	r1, r3
 800961c:	f019 fc18 	bl	8022e50 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f103 0008 	add.w	r0, r3, #8
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	3338      	adds	r3, #56	@ 0x38
 800962a:	2210      	movs	r2, #16
 800962c:	4619      	mov	r1, r3
 800962e:	f019 fc0f 	bl	8022e50 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	b29b      	uxth	r3, r3
 8009636:	3308      	adds	r3, #8
 8009638:	b29b      	uxth	r3, r3
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	b29a      	uxth	r2, r3
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	3308      	adds	r3, #8
 8009644:	0a1b      	lsrs	r3, r3, #8
 8009646:	b29b      	uxth	r3, r3
 8009648:	4313      	orrs	r3, r2
 800964a:	b29a      	uxth	r2, r3
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	781a      	ldrb	r2, [r3, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	4313      	orrs	r3, r2
 800965a:	81fb      	strh	r3, [r7, #14]
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	885b      	ldrh	r3, [r3, #2]
 8009660:	b29a      	uxth	r2, r3
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	801a      	strh	r2, [r3, #0]
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	89fa      	ldrh	r2, [r7, #14]
 800966a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	333e      	adds	r3, #62	@ 0x3e
 8009670:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8009672:	e066      	b.n	8009742 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	3322      	adds	r3, #34	@ 0x22
 8009678:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	b29a      	uxth	r2, r3
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	b29b      	uxth	r3, r3
 8009682:	4413      	add	r3, r2
 8009684:	b29b      	uxth	r3, r3
 8009686:	3308      	adds	r3, #8
 8009688:	b29b      	uxth	r3, r3
 800968a:	021b      	lsls	r3, r3, #8
 800968c:	b29a      	uxth	r2, r3
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	440b      	add	r3, r1
 8009698:	3308      	adds	r3, #8
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	b29b      	uxth	r3, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009754 <prepareReplyDNSMessage+0x1bc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d103      	bne.n	80096b8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	22ff      	movs	r2, #255	@ 0xff
 80096b4:	721a      	strb	r2, [r3, #8]
 80096b6:	e006      	b.n	80096c6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2280      	movs	r2, #128	@ 0x80
 80096c4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80096ce:	4b22      	ldr	r3, [pc, #136]	@ (8009758 <prepareReplyDNSMessage+0x1c0>)
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	b21a      	sxth	r2, r3
 80096d6:	4b20      	ldr	r3, [pc, #128]	@ (8009758 <prepareReplyDNSMessage+0x1c0>)
 80096d8:	881b      	ldrh	r3, [r3, #0]
 80096da:	0a1b      	lsrs	r3, r3, #8
 80096dc:	b29b      	uxth	r3, r3
 80096de:	b21b      	sxth	r3, r3
 80096e0:	4313      	orrs	r3, r2
 80096e2:	b21b      	sxth	r3, r3
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	2200      	movs	r2, #0
 80096ee:	719a      	strb	r2, [r3, #6]
 80096f0:	2200      	movs	r2, #0
 80096f2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 80096f4:	4b18      	ldr	r3, [pc, #96]	@ (8009758 <prepareReplyDNSMessage+0x1c0>)
 80096f6:	881b      	ldrh	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	4b16      	ldr	r3, [pc, #88]	@ (8009758 <prepareReplyDNSMessage+0x1c0>)
 80096fe:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	3308      	adds	r3, #8
 8009706:	b29b      	uxth	r3, r3
 8009708:	021b      	lsls	r3, r3, #8
 800970a:	b29a      	uxth	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	3308      	adds	r3, #8
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	b29b      	uxth	r3, r3
 8009714:	4313      	orrs	r3, r2
 8009716:	b29a      	uxth	r2, r3
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	4313      	orrs	r3, r2
 8009726:	81bb      	strh	r3, [r7, #12]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	b29a      	uxth	r2, r3
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	801a      	strh	r2, [r3, #0]
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	89ba      	ldrh	r2, [r7, #12]
 8009736:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	4413      	add	r3, r2
 800973e:	3316      	adds	r3, #22
 8009740:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009746:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8009748:	bf00      	nop
 800974a:	3730      	adds	r7, #48	@ 0x30
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	08025434 	.word	0x08025434
 8009754:	fb0000e0 	.word	0xfb0000e0
 8009758:	200011bc 	.word	0x200011bc

0800975c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	2b29      	cmp	r3, #41	@ 0x29
 800976e:	d803      	bhi.n	8009778 <ProcessICMPPacket+0x1c>
 8009770:	2159      	movs	r1, #89	@ 0x59
 8009772:	4811      	ldr	r0, [pc, #68]	@ (80097b8 <ProcessICMPPacket+0x5c>)
 8009774:	f7f8 f98a 	bl	8001a8c <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	2b29      	cmp	r3, #41	@ 0x29
 800977e:	d915      	bls.n	80097ac <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009784:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <ProcessICMPPacket+0x46>
 8009790:	2b08      	cmp	r3, #8
 8009792:	d10a      	bne.n	80097aa <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	68b8      	ldr	r0, [r7, #8]
 8009798:	f000 f810 	bl	80097bc <prvProcessICMPEchoRequest>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80097a0:	e004      	b.n	80097ac <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80097a2:	68b8      	ldr	r0, [r7, #8]
 80097a4:	f000 f836 	bl	8009814 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80097a8:	e000      	b.n	80097ac <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80097aa:	bf00      	nop
            }
        }

        return eReturn;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
    }
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	08025500 	.word	0x08025500

080097bc <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3322      	adds	r3, #34	@ 0x22
 80097ca:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	330e      	adds	r3, #14
 80097d0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2200      	movs	r2, #0
 80097d6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	68da      	ldr	r2, [r3, #12]
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	2240      	movs	r2, #64	@ 0x40
 80097f0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2200      	movs	r2, #0
 80097f6:	719a      	strb	r2, [r3, #6]
 80097f8:	2200      	movs	r2, #0
 80097fa:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2200      	movs	r2, #0
 8009800:	709a      	strb	r2, [r3, #2]
 8009802:	2200      	movs	r2, #0
 8009804:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009806:	2302      	movs	r3, #2
    }
 8009808:	4618      	mov	r0, r3
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7c1a      	ldrb	r2, [r3, #16]
 8009824:	7c5b      	ldrb	r3, [r3, #17]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	4313      	orrs	r3, r2
 800982a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	b21a      	sxth	r2, r3
 8009832:	89fb      	ldrh	r3, [r7, #14]
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	b29b      	uxth	r3, r3
 8009838:	b21b      	sxth	r3, r3
 800983a:	4313      	orrs	r3, r2
 800983c:	b21b      	sxth	r3, r3
 800983e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	3b14      	subs	r3, #20
 8009844:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009846:	89fb      	ldrh	r3, [r7, #14]
 8009848:	3b08      	subs	r3, #8
 800984a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	332a      	adds	r3, #42	@ 0x2a
 8009854:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009856:	2300      	movs	r3, #0
 8009858:	82bb      	strh	r3, [r7, #20]
 800985a:	e00c      	b.n	8009876 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2b78      	cmp	r3, #120	@ 0x78
 8009862:	d002      	beq.n	800986a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8009864:	2302      	movs	r3, #2
 8009866:	75fb      	strb	r3, [r7, #23]
                break;
 8009868:	e009      	b.n	800987e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3301      	adds	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009870:	8abb      	ldrh	r3, [r7, #20]
 8009872:	3301      	adds	r3, #1
 8009874:	82bb      	strh	r3, [r7, #20]
 8009876:	8aba      	ldrh	r2, [r7, #20]
 8009878:	89fb      	ldrh	r3, [r7, #14]
 800987a:	429a      	cmp	r2, r3
 800987c:	d3ee      	bcc.n	800985c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009882:	b29a      	uxth	r2, r3
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7f8 f9bf 	bl	8001c0c <vApplicationPingReplyHook>
    }
 800988e:	bf00      	nop
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 80098a0:	f000 f90e 	bl	8009ac0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80098a4:	4802      	ldr	r0, [pc, #8]	@ (80098b0 <prvIPTask+0x18>)
 80098a6:	f019 f8b7 	bl	8022a18 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 80098aa:	f000 f803 	bl	80098b4 <prvProcessIPEventsAndTimers>
 80098ae:	e7fc      	b.n	80098aa <prvIPTask+0x12>
 80098b0:	08025530 	.word	0x08025530

080098b4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80098b4:	b590      	push	{r4, r7, lr}
 80098b6:	b08d      	sub	sp, #52	@ 0x34
 80098b8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80098ba:	f000 ff09 	bl	800a6d0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80098be:	f000 fea7 	bl	800a610 <xCalculateSleepTime>
 80098c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80098c4:	4b7c      	ldr	r3, [pc, #496]	@ (8009ab8 <prvProcessIPEventsAndTimers+0x204>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f107 0118 	add.w	r1, r7, #24
 80098cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fa fb3a 	bl	8003f48 <xQueueReceive>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d101      	bne.n	80098de <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80098da:	23ff      	movs	r3, #255	@ 0xff
 80098dc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80098de:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d00d      	beq.n	8009904 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80098e8:	4b73      	ldr	r3, [pc, #460]	@ (8009ab8 <prvProcessIPEventsAndTimers+0x204>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fa fd03 	bl	80042f8 <uxQueueSpacesAvailable>
 80098f2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80098f4:	4b71      	ldr	r3, [pc, #452]	@ (8009abc <prvProcessIPEventsAndTimers+0x208>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d202      	bcs.n	8009904 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80098fe:	4a6f      	ldr	r2, [pc, #444]	@ (8009abc <prvProcessIPEventsAndTimers+0x208>)
 8009900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009902:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009904:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009908:	3301      	adds	r3, #1
 800990a:	2b0e      	cmp	r3, #14
 800990c:	f200 80ca 	bhi.w	8009aa4 <prvProcessIPEventsAndTimers+0x1f0>
 8009910:	a201      	add	r2, pc, #4	@ (adr r2, 8009918 <prvProcessIPEventsAndTimers+0x64>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	08009aa5 	.word	0x08009aa5
 800991c:	08009955 	.word	0x08009955
 8009920:	0800995f 	.word	0x0800995f
 8009924:	08009969 	.word	0x08009969
 8009928:	08009975 	.word	0x08009975
 800992c:	08009a3f 	.word	0x08009a3f
 8009930:	08009a49 	.word	0x08009a49
 8009934:	08009a5d 	.word	0x08009a5d
 8009938:	08009a65 	.word	0x08009a65
 800993c:	08009a89 	.word	0x08009a89
 8009940:	0800997f 	.word	0x0800997f
 8009944:	08009a35 	.word	0x08009a35
 8009948:	08009a53 	.word	0x08009a53
 800994c:	08009aa5 	.word	0x08009aa5
 8009950:	08009a8f 	.word	0x08009a8f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	4618      	mov	r0, r3
 8009958:	f001 f9cc 	bl	800acf4 <prvProcessNetworkDownEvent>
            break;
 800995c:	e0a5      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f955 	bl	8009c10 <prvHandleEthernetPacket>
            break;
 8009966:	e0a0      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f95d 	bl	8009c2c <prvForwardTxPacket>
            break;
 8009972:	e09a      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8009974:	f7fe f94e 	bl	8007c14 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8009978:	f002 fdb6 	bl	800c4e8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800997c:	e095      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8009982:	2318      	movs	r3, #24
 8009984:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009986:	6a3b      	ldr	r3, [r7, #32]
 8009988:	7a1b      	ldrb	r3, [r3, #8]
 800998a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <prvProcessIPEventsAndTimers+0xe6>
 8009994:	2b01      	cmp	r3, #1
 8009996:	d01a      	beq.n	80099ce <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009998:	e02c      	b.n	80099f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800999a:	2302      	movs	r3, #2
 800999c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	061a      	lsls	r2, r3, #24
 80099a4:	6a3b      	ldr	r3, [r7, #32]
 80099a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a8:	021b      	lsls	r3, r3, #8
 80099aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80099ae:	431a      	orrs	r2, r3
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b4:	0a1b      	lsrs	r3, r3, #8
 80099b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80099ba:	431a      	orrs	r2, r3
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099c0:	0e1b      	lsrs	r3, r3, #24
 80099c2:	4313      	orrs	r3, r2
 80099c4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	2200      	movs	r2, #0
 80099ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80099cc:	e012      	b.n	80099f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80099ce:	230a      	movs	r3, #10
 80099d0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	3328      	adds	r3, #40	@ 0x28
 80099d6:	f107 0408 	add.w	r4, r7, #8
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	6859      	ldr	r1, [r3, #4]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	3328      	adds	r3, #40	@ 0x28
 80099e8:	2210      	movs	r2, #16
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f019 fb3c 	bl	802306a <memset>
                        break;
 80099f2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80099f8:	021b      	lsls	r3, r3, #8
 80099fa:	b21a      	sxth	r2, r3
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009a00:	0a1b      	lsrs	r3, r3, #8
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	b21b      	sxth	r3, r3
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	2200      	movs	r2, #0
 8009a12:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009a14:	4639      	mov	r1, r7
 8009a16:	2300      	movs	r3, #0
 8009a18:	2218      	movs	r2, #24
 8009a1a:	6a38      	ldr	r0, [r7, #32]
 8009a1c:	f005 fa32 	bl	800ee84 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f043 0210 	orr.w	r2, r3, #16
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8009a2c:	6a38      	ldr	r0, [r7, #32]
 8009a2e:	f006 f8d8 	bl	800fbe2 <vSocketWakeUpUser>
            break;
 8009a32:	e03a      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f005 fad8 	bl	800efec <vSocketClose>
            break;
 8009a3c:	e035      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f00d facf 	bl	8016fe4 <vProcessGeneratedUDPPacket>
            break;
 8009a46:	e030      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f88c 	bl	8009b68 <prvCallDHCP_RA_Handler>
            break;
 8009a50:	e02b      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f007 fbd1 	bl	80111fc <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009a5a:	e026      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	f000 ffab 	bl	800a9b8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009a62:	e022      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009a68:	6a38      	ldr	r0, [r7, #32]
 8009a6a:	f008 fd0b 	bl	8012484 <xTCPCheckNewClient>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f043 0204 	orr.w	r2, r3, #4
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009a80:	6a38      	ldr	r0, [r7, #32]
 8009a82:	f006 f8ae 	bl	800fbe2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009a86:	e00f      	b.n	8009aa8 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009a88:	f007 faa2 	bl	8010fd0 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 8009a8c:	e00d      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7f9 ff12 	bl	80038c0 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 8009a9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a9e:	f7fd f92d 	bl	8006cfc <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009aa2:	e002      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8009aa4:	bf00      	nop
 8009aa6:	e000      	b.n	8009aaa <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8009aa8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 8009aaa:	f000 f833 	bl	8009b14 <prvIPTask_CheckPendingEvents>
}
 8009aae:	bf00      	nop
 8009ab0:	3734      	adds	r7, #52	@ 0x34
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd90      	pop	{r4, r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200011b8 	.word	0x200011b8
 8009abc:	20000014 	.word	0x20000014

08009ac0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b082      	sub	sp, #8
 8009ac4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8009ac6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8009aca:	f000 ff2b 	bl	800a924 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009ace:	4b0f      	ldr	r3, [pc, #60]	@ (8009b0c <prvIPTask_Initialise+0x4c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	e005      	b.n	8009ae2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f8be 	bl	8009c58 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1f6      	bne.n	8009ad6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8009ae8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009aec:	f000 fee8 	bl	800a8c0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009af0:	2000      	movs	r0, #0
 8009af2:	f000 ff9b 	bl	800aa2c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8009af6:	f7fe fa31 	bl	8007f5c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 8009afa:	f7fe fb0f 	bl	800811c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8009afe:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <prvIPTask_Initialise+0x50>)
 8009b00:	2201      	movs	r2, #1
 8009b02:	601a      	str	r2, [r3, #0]
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20001544 	.word	0x20001544
 8009b10:	200011c8 	.word	0x200011c8

08009b14 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 8009b1a:	4b12      	ldr	r3, [pc, #72]	@ (8009b64 <prvIPTask_CheckPendingEvents+0x50>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d01c      	beq.n	8009b5c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009b22:	4b10      	ldr	r3, [pc, #64]	@ (8009b64 <prvIPTask_CheckPendingEvents+0x50>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009b28:	f004 f836 	bl	800db98 <FreeRTOS_FirstNetworkInterface>
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	e012      	b.n	8009b56 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7f1b      	ldrb	r3, [r3, #28]
 8009b34:	f003 0302 	and.w	r3, r3, #2
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 f8d8 	bl	800acf4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7f13      	ldrb	r3, [r2, #28]
 8009b48:	f36f 0341 	bfc	r3, #1, #1
 8009b4c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f004 f82e 	bl	800dbb0 <FreeRTOS_NextNetworkInterface>
 8009b54:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e9      	bne.n	8009b30 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200011c0 	.word	0x200011c0

08009b68 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b7a:	f003 0304 	and.w	r3, r3, #4
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d10b      	bne.n	8009ba6 <prvCallDHCP_RA_Handler+0x3e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	f003 fecd 	bl	800d940 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	@ (8009bc4 <FreeRTOS_GetIPTaskHandle+0x14>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200011c4 	.word	0x200011c4

08009bc8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8009be0:	2101      	movs	r1, #1
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f002 fa7e 	bl	800c0e4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009bee:	f043 0310 	orr.w	r3, r3, #16
 8009bf2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	f7f7 ff7c 	bl	8001af4 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8009bfc:	f7fe f9ae 	bl	8007f5c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009c00:	f242 7010 	movw	r0, #10000	@ 0x2710
 8009c04:	f000 fe6a 	bl	800a8dc <vARPTimerReload>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f9c8 	bl	8009fb4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d007      	beq.n	8009c4e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4798      	blx	r3
    }
}
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7f13      	ldrb	r3, [r2, #28]
 8009c68:	f36f 0300 	bfc	r3, #0, #1
 8009c6c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009c76:	f107 030c 	add.w	r3, r7, #12
 8009c7a:	6979      	ldr	r1, [r7, #20]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f8df 	bl	8009e40 <xSendEventStructToIPTask>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d008      	beq.n	8009c9a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	7f13      	ldrb	r3, [r2, #28]
 8009c8c:	f043 0302 	orr.w	r3, r3, #2
 8009c90:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009c92:	4b06      	ldr	r3, [pc, #24]	@ (8009cac <FreeRTOS_NetworkDown+0x54>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009c98:	e004      	b.n	8009ca4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	7f13      	ldrb	r3, [r2, #28]
 8009c9e:	f36f 0341 	bfc	r3, #1, #1
 8009ca2:	7713      	strb	r3, [r2, #28]
}
 8009ca4:	bf00      	nop
 8009ca6:	3718      	adds	r7, #24
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	200011c0 	.word	0x200011c0

08009cb0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8009cba:	f003 ff6d 	bl	800db98 <FreeRTOS_FirstNetworkInterface>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d104      	bne.n	8009cce <FreeRTOS_IPInit_Multi+0x1e>
 8009cc4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8009cc8:	4823      	ldr	r0, [pc, #140]	@ (8009d58 <FreeRTOS_IPInit_Multi+0xa8>)
 8009cca:	f7f7 fedf 	bl	8001a8c <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8009cce:	f001 f8cb 	bl	800ae68 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2108      	movs	r1, #8
 8009cd6:	2045      	movs	r0, #69	@ 0x45
 8009cd8:	f7f9 ff84 	bl	8003be4 <xQueueGenericCreate>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4a1f      	ldr	r2, [pc, #124]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009ce0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8009ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d104      	bne.n	8009cf4 <FreeRTOS_IPInit_Multi+0x44>
 8009cea:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8009cee:	481a      	ldr	r0, [pc, #104]	@ (8009d58 <FreeRTOS_IPInit_Multi+0xa8>)
 8009cf0:	f7f7 fecc 	bl	8001a8c <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009cf4:	4b19      	ldr	r3, [pc, #100]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d025      	beq.n	8009d48 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009cfc:	4b17      	ldr	r3, [pc, #92]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4917      	ldr	r1, [pc, #92]	@ (8009d60 <FreeRTOS_IPInit_Multi+0xb0>)
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fa fc5a 	bl	80045bc <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009d08:	f00d feaa 	bl	8017a60 <xNetworkBuffersInitialise>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d10e      	bne.n	8009d30 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009d12:	f004 fc7f 	bl	800e614 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009d16:	4b13      	ldr	r3, [pc, #76]	@ (8009d64 <FreeRTOS_IPInit_Multi+0xb4>)
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	2304      	movs	r3, #4
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009d24:	4910      	ldr	r1, [pc, #64]	@ (8009d68 <FreeRTOS_IPInit_Multi+0xb8>)
 8009d26:	4811      	ldr	r0, [pc, #68]	@ (8009d6c <FreeRTOS_IPInit_Multi+0xbc>)
 8009d28:	f7fa fcfe 	bl	8004728 <xTaskCreate>
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	e00e      	b.n	8009d4e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009d30:	480f      	ldr	r0, [pc, #60]	@ (8009d70 <FreeRTOS_IPInit_Multi+0xc0>)
 8009d32:	f018 fe71 	bl	8022a18 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009d36:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fa fafc 	bl	8004338 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009d40:	4b06      	ldr	r3, [pc, #24]	@ (8009d5c <FreeRTOS_IPInit_Multi+0xac>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e002      	b.n	8009d4e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009d48:	480a      	ldr	r0, [pc, #40]	@ (8009d74 <FreeRTOS_IPInit_Multi+0xc4>)
 8009d4a:	f018 fe65 	bl	8022a18 <lUDPLoggingPrintf>
    }

    return xReturn;
 8009d4e:	687b      	ldr	r3, [r7, #4]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	08025544 	.word	0x08025544
 8009d5c:	200011b8 	.word	0x200011b8
 8009d60:	08025570 	.word	0x08025570
 8009d64:	200011c4 	.word	0x200011c4
 8009d68:	08025578 	.word	0x08025578
 8009d6c:	08009899 	.word	0x08009899
 8009d70:	08025580 	.word	0x08025580
 8009d74:	080255bc 	.word	0x080255bc

08009d78 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
 8009d84:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d023      	beq.n	8009dd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009d92:	f003 0304 	and.w	r3, r3, #4
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d11b      	bne.n	8009dd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	685a      	ldr	r2, [r3, #4]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009dd4:	bf00      	nop
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b088      	sub	sp, #32
 8009de4:	af02      	add	r7, sp, #8
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009dee:	2000      	movs	r0, #0
 8009df0:	f003 ff72 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 8009df4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	68b9      	ldr	r1, [r7, #8]
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff ffb6 	bl	8009d78 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8009e0c:	bf00      	nop
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009e22:	79fb      	ldrb	r3, [r7, #7]
 8009e24:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009e2a:	f107 030c 	add.w	r3, r7, #12
 8009e2e:	6979      	ldr	r1, [r7, #20]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f805 	bl	8009e40 <xSendEventStructToIPTask>
 8009e36:	4603      	mov	r3, r0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009e4e:	f000 fb93 	bl	800a578 <xIPIsNetworkTaskReady>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d107      	bne.n	8009e68 <xSendEventStructToIPTask+0x28>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	e035      	b.n	8009ed4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8009e72:	2b06      	cmp	r3, #6
 8009e74:	d10c      	bne.n	8009e90 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009e76:	2001      	movs	r0, #1
 8009e78:	f000 fd9e 	bl	800a9b8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009e7c:	4b18      	ldr	r3, [pc, #96]	@ (8009ee0 <xSendEventStructToIPTask+0xa0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7fa fa1f 	bl	80042c4 <uxQueueMessagesWaiting>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d01c      	beq.n	8009ed0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009e96:	f000 ff15 	bl	800acc4 <xIsCallingFromIPTask>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d104      	bne.n	8009eaa <xSendEventStructToIPTask+0x6a>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d001      	beq.n	8009eaa <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee0 <xSendEventStructToIPTask+0xa0>)
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	f7f9 ff60 	bl	8003d78 <xQueueGenericSend>
 8009eb8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d109      	bne.n	8009ed4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4806      	ldr	r0, [pc, #24]	@ (8009ee4 <xSendEventStructToIPTask+0xa4>)
 8009eca:	f018 fda5 	bl	8022a18 <lUDPLoggingPrintf>
 8009ece:	e001      	b.n	8009ed4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009ed4:	697b      	ldr	r3, [r7, #20]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3718      	adds	r7, #24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	200011b8 	.word	0x200011b8
 8009ee4:	08025600 	.word	0x08025600

08009ee8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009f02:	2300      	movs	r3, #0
 8009f04:	75fb      	strb	r3, [r7, #23]
 8009f06:	e032      	b.n	8009f6e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	4618      	mov	r0, r3
 8009f12:	f003 ff81 	bl	800de18 <FreeRTOS_FindEndPointOnMAC>
 8009f16:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
 8009f22:	e024      	b.n	8009f6e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2206      	movs	r2, #6
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4820      	ldr	r0, [pc, #128]	@ (8009fac <eConsiderFrameForProcessing+0xc4>)
 8009f2c:	f019 ff53 	bl	8023dd6 <memcmp>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009f36:	2301      	movs	r3, #1
 8009f38:	75fb      	strb	r3, [r7, #23]
 8009f3a:	e018      	b.n	8009f6e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2206      	movs	r2, #6
 8009f40:	4619      	mov	r1, r3
 8009f42:	481b      	ldr	r0, [pc, #108]	@ (8009fb0 <eConsiderFrameForProcessing+0xc8>)
 8009f44:	f019 ff47 	bl	8023dd6 <memcmp>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d102      	bne.n	8009f54 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	75fb      	strb	r3, [r7, #23]
 8009f52:	e00c      	b.n	8009f6e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b33      	cmp	r3, #51	@ 0x33
 8009f5a:	d106      	bne.n	8009f6a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009f60:	2b33      	cmp	r3, #51	@ 0x33
 8009f62:	d102      	bne.n	8009f6a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009f64:	2301      	movs	r3, #1
 8009f66:	75fb      	strb	r3, [r7, #23]
 8009f68:	e001      	b.n	8009f6e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d115      	bne.n	8009fa0 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	7b1a      	ldrb	r2, [r3, #12]
 8009f78:	7b5b      	ldrb	r3, [r3, #13]
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009f80:	897b      	ldrh	r3, [r7, #10]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	b21a      	sxth	r2, r3
 8009f86:	897b      	ldrh	r3, [r7, #10]
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	b21b      	sxth	r3, r3
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	b21b      	sxth	r3, r3
 8009f92:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009f94:	897b      	ldrh	r3, [r7, #10]
 8009f96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f9a:	d801      	bhi.n	8009fa0 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	0802823c 	.word	0x0802823c
 8009fb0:	0802822c 	.word	0x0802822c

08009fb4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d03d      	beq.n	800a044 <prvProcessEthernetPacket+0x90>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d039      	beq.n	800a044 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd4:	2b0d      	cmp	r3, #13
 8009fd6:	d934      	bls.n	800a042 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009fd8:	2301      	movs	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	899b      	ldrh	r3, [r3, #12]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d015      	beq.n	800a01c <prvProcessEthernetPacket+0x68>
 8009ff0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	dc21      	bgt.n	800a03c <prvProcessEthernetPacket+0x88>
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d00f      	beq.n	800a01c <prvProcessEthernetPacket+0x68>
 8009ffc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800a000:	d11c      	bne.n	800a03c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	2b29      	cmp	r3, #41	@ 0x29
 800a008:	d905      	bls.n	800a016 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7fc ffe6 	bl	8006fdc <eARPProcessPacket>
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 800a014:	e016      	b.n	800a044 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 800a016:	2300      	movs	r3, #0
 800a018:	73fb      	strb	r3, [r7, #15]
                        break;
 800a01a:	e013      	b.n	800a044 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a020:	2b21      	cmp	r3, #33	@ 0x21
 800a022:	d908      	bls.n	800a036 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 f8c6 	bl	800a1bc <prvProcessIPPacket>
 800a030:	4603      	mov	r3, r0
 800a032:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 800a034:	e006      	b.n	800a044 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]
                    break;
 800a03a:	e003      	b.n	800a044 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 800a03c:	2300      	movs	r3, #0
 800a03e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 800a040:	e000      	b.n	800a044 <prvProcessEthernetPacket+0x90>
            break;
 800a042:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 800a044:	7bfb      	ldrb	r3, [r7, #15]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d00b      	beq.n	800a062 <prvProcessEthernetPacket+0xae>
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	dc19      	bgt.n	800a082 <prvProcessEthernetPacket+0xce>
 800a04e:	2b02      	cmp	r3, #2
 800a050:	d002      	beq.n	800a058 <prvProcessEthernetPacket+0xa4>
 800a052:	2b03      	cmp	r3, #3
 800a054:	d019      	beq.n	800a08a <prvProcessEthernetPacket+0xd6>
 800a056:	e014      	b.n	800a082 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 800a058:	2101      	movs	r1, #1
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f9a4 	bl	800a3a8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 800a060:	e014      	b.n	800a08c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 800a062:	4b0c      	ldr	r3, [pc, #48]	@ (800a094 <prvProcessEthernetPacket+0xe0>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 800a06a:	4a0a      	ldr	r2, [pc, #40]	@ (800a094 <prvProcessEthernetPacket+0xe0>)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 800a070:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800a074:	f000 fc06 	bl	800a884 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 800a078:	e008      	b.n	800a08c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f00d fdc2 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
            break;
 800a080:	e004      	b.n	800a08c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f00d fdbe 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
            break;
 800a088:	e000      	b.n	800a08c <prvProcessEthernetPacket+0xd8>
            break;
 800a08a:	bf00      	nop
    }
}
 800a08c:	bf00      	nop
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	200011b4 	.word	0x200011b4

0800a098 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a098:	b5b0      	push	{r4, r5, r7, lr}
 800a09a:	b08c      	sub	sp, #48	@ 0x30
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ae:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b2:	3322      	adds	r3, #34	@ 0x22
 800a0b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa76 	bl	800a5a8 <uxIPHeaderSizePacket>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	3316      	adds	r3, #22
 800a0c0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	899b      	ldrh	r3, [r3, #12]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d105      	bne.n	800a0dc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d4:	3336      	adds	r3, #54	@ 0x36
 800a0d6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 800a0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0de:	889b      	ldrh	r3, [r3, #4]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	b21a      	sxth	r2, r3
 800a0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e8:	889b      	ldrh	r3, [r3, #4]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	0a1b      	lsrs	r3, r3, #8
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	b21b      	sxth	r3, r3
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	b21b      	sxth	r3, r3
 800a0f6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 800a0f8:	8b7b      	ldrh	r3, [r7, #26]
 800a0fa:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fe:	899b      	ldrh	r3, [r3, #12]
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b08      	cmp	r3, #8
 800a104:	d11a      	bne.n	800a13c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 800a106:	8b7c      	ldrh	r4, [r7, #26]
 800a108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10a:	8a1b      	ldrh	r3, [r3, #16]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	b21a      	sxth	r2, r3
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	8a1b      	ldrh	r3, [r3, #16]
 800a116:	b29b      	uxth	r3, r3
 800a118:	0a1b      	lsrs	r3, r3, #8
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	b21b      	sxth	r3, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	b21b      	sxth	r3, r3
 800a122:	b29b      	uxth	r3, r3
 800a124:	461d      	mov	r5, r3
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa3e 	bl	800a5a8 <uxIPHeaderSizePacket>
 800a12c:	4603      	mov	r3, r0
 800a12e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800a130:	429c      	cmp	r4, r3
 800a132:	d903      	bls.n	800a13c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 800a134:	2300      	movs	r3, #0
 800a136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a13a:	e038      	b.n	800a1ae <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a140:	6a3a      	ldr	r2, [r7, #32]
 800a142:	429a      	cmp	r2, r3
 800a144:	d833      	bhi.n	800a1ae <prvProcessUDPPacket+0x116>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b07      	cmp	r3, #7
 800a14a:	d930      	bls.n	800a1ae <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	3b08      	subs	r3, #8
 800a15a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	429a      	cmp	r2, r3
 800a162:	d904      	bls.n	800a16e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	441a      	add	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 800a182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a184:	885b      	ldrh	r3, [r3, #2]
 800a186:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 800a188:	f107 0208 	add.w	r2, r7, #8
 800a18c:	4619      	mov	r1, r3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f00c ff48 	bl	8017024 <xProcessReceivedUDPPacket>
 800a194:	4603      	mov	r3, r0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d103      	bne.n	800a1a2 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800a19a:	2303      	movs	r3, #3
 800a19c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a1a0:	e005      	b.n	800a1ae <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d102      	bne.n	800a1ae <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800a1ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3730      	adds	r7, #48	@ 0x30
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a1bc <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 800a1c6:	2314      	movs	r3, #20
 800a1c8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	330e      	adds	r3, #14
 800a1d6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	899b      	ldrh	r3, [r3, #12]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d023      	beq.n	800a22a <prvProcessIPPacket+0x6e>
 800a1e2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d144      	bne.n	800a274 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ee:	2b35      	cmp	r3, #53	@ 0x35
 800a1f0:	d802      	bhi.n	800a1f8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 800a1f6:	e043      	b.n	800a280 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fc:	330e      	adds	r3, #14
 800a1fe:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 800a200:	2328      	movs	r3, #40	@ 0x28
 800a202:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	799b      	ldrb	r3, [r3, #6]
 800a208:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	330e      	adds	r3, #14
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	4618      	mov	r0, r3
 800a214:	f001 fb6c 	bl	800b8f0 <prvAllowIPPacketIPv6>
 800a218:	4603      	mov	r3, r0
 800a21a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a220:	3b06      	subs	r3, #6
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	7812      	ldrb	r2, [r2, #0]
 800a226:	701a      	strb	r2, [r3, #0]
                break;
 800a228:	e02a      	b.n	800a280 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a238:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23e:	3b0e      	subs	r3, #14
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	429a      	cmp	r2, r3
 800a244:	d802      	bhi.n	800a24c <prvProcessIPPacket+0x90>
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b13      	cmp	r3, #19
 800a24a:	d802      	bhi.n	800a252 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800a24c:	2300      	movs	r3, #0
 800a24e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 800a250:	e016      	b.n	800a280 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	7ddb      	ldrb	r3, [r3, #23]
 800a256:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a258:	69ba      	ldr	r2, [r7, #24]
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f81b 	bl	800b298 <prvAllowIPPacketIPv4>
 800a262:	4603      	mov	r3, r0
 800a264:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26a:	3b06      	subs	r3, #6
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	701a      	strb	r2, [r3, #0]
                   break;
 800a272:	e005      	b.n	800a280 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 800a274:	2300      	movs	r3, #0
 800a276:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 800a278:	484a      	ldr	r0, [pc, #296]	@ (800a3a4 <prvProcessIPPacket+0x1e8>)
 800a27a:	f018 fbcd 	bl	8022a18 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800a27e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 800a280:	7ffb      	ldrb	r3, [r7, #31]
 800a282:	2b01      	cmp	r3, #1
 800a284:	f040 8088 	bne.w	800a398 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	899b      	ldrh	r3, [r3, #12]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	2b08      	cmp	r3, #8
 800a290:	d004      	beq.n	800a29c <prvProcessIPPacket+0xe0>
 800a292:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a296:	4293      	cmp	r3, r2
 800a298:	d009      	beq.n	800a2ae <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800a29a:	e020      	b.n	800a2de <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	2b14      	cmp	r3, #20
 800a2a0:	d91a      	bls.n	800a2d8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 800a2a2:	6838      	ldr	r0, [r7, #0]
 800a2a4:	f001 f852 	bl	800b34c <prvCheckIP4HeaderOptions>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	77fb      	strb	r3, [r7, #31]
                    break;
 800a2ac:	e014      	b.n	800a2d8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fb3a 	bl	800b92c <xGetExtensionOrder>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	dd0e      	ble.n	800a2dc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800a2be:	2101      	movs	r1, #1
 800a2c0:	6838      	ldr	r0, [r7, #0]
 800a2c2:	f001 fb99 	bl	800b9f8 <eHandleIPv6ExtensionHeaders>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800a2ca:	7ffb      	ldrb	r3, [r7, #31]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	799b      	ldrb	r3, [r3, #6]
 800a2d4:	75fb      	strb	r3, [r7, #23]
                    break;
 800a2d6:	e001      	b.n	800a2dc <prvProcessIPPacket+0x120>
                    break;
 800a2d8:	bf00      	nop
 800a2da:	e000      	b.n	800a2de <prvProcessIPPacket+0x122>
                    break;
 800a2dc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800a2de:	7ffb      	ldrb	r3, [r7, #31]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d059      	beq.n	800a398 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	2b11      	cmp	r3, #17
 800a2e8:	d026      	beq.n	800a338 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f7fd f918 	bl	8007520 <xCheckRequiresARPResolution>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d102      	bne.n	800a2fc <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	77fb      	strb	r3, [r7, #31]
 800a2fa:	e01d      	b.n	800a338 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	899b      	ldrh	r3, [r3, #12]
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b08      	cmp	r3, #8
 800a304:	d00e      	beq.n	800a324 <prvProcessIPPacket+0x168>
 800a306:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d113      	bne.n	800a336 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	1d98      	adds	r0, r3, #6
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f103 0108 	add.w	r1, r3, #8
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a31c:	461a      	mov	r2, r3
 800a31e:	f002 f843 	bl	800c3a8 <vNDRefreshCacheEntry>
                                break;
 800a322:	e009      	b.n	800a338 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	1d9a      	adds	r2, r3, #6
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4619      	mov	r1, r3
 800a32e:	4610      	mov	r0, r2
 800a330:	f7fd f9d6 	bl	80076e0 <vARPRefreshCacheEntryAge>
                                break;
 800a334:	e000      	b.n	800a338 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800a336:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 800a338:	7ffb      	ldrb	r3, [r7, #31]
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d02c      	beq.n	800a398 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
 800a340:	2b3a      	cmp	r3, #58	@ 0x3a
 800a342:	d010      	beq.n	800a366 <prvProcessIPPacket+0x1aa>
 800a344:	2b3a      	cmp	r3, #58	@ 0x3a
 800a346:	dc23      	bgt.n	800a390 <prvProcessIPPacket+0x1d4>
 800a348:	2b11      	cmp	r3, #17
 800a34a:	d012      	beq.n	800a372 <prvProcessIPPacket+0x1b6>
 800a34c:	2b11      	cmp	r3, #17
 800a34e:	dc1f      	bgt.n	800a390 <prvProcessIPPacket+0x1d4>
 800a350:	2b01      	cmp	r3, #1
 800a352:	d002      	beq.n	800a35a <prvProcessIPPacket+0x19e>
 800a354:	2b06      	cmp	r3, #6
 800a356:	d012      	beq.n	800a37e <prvProcessIPPacket+0x1c2>
 800a358:	e01a      	b.n	800a390 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	f7ff f9fe 	bl	800975c <ProcessICMPPacket>
 800a360:	4603      	mov	r3, r0
 800a362:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800a364:	e018      	b.n	800a398 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 800a366:	6838      	ldr	r0, [r7, #0]
 800a368:	f002 fb6e 	bl	800ca48 <prvProcessICMPMessage_IPv6>
 800a36c:	4603      	mov	r3, r0
 800a36e:	77fb      	strb	r3, [r7, #31]
                            break;
 800a370:	e012      	b.n	800a398 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800a372:	6838      	ldr	r0, [r7, #0]
 800a374:	f7ff fe90 	bl	800a098 <prvProcessUDPPacket>
 800a378:	4603      	mov	r3, r0
 800a37a:	77fb      	strb	r3, [r7, #31]
                        break;
 800a37c:	e00c      	b.n	800a398 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a37e:	6838      	ldr	r0, [r7, #0]
 800a380:	f007 febe 	bl	8012100 <xProcessReceivedTCPPacket>
 800a384:	4603      	mov	r3, r0
 800a386:	2b01      	cmp	r3, #1
 800a388:	d105      	bne.n	800a396 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800a38a:	2303      	movs	r3, #3
 800a38c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800a38e:	e002      	b.n	800a396 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800a390:	2300      	movs	r3, #0
 800a392:	77fb      	strb	r3, [r7, #31]
                        break;
 800a394:	e000      	b.n	800a398 <prvProcessIPPacket+0x1dc>
                                break;
 800a396:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800a398:	7ffb      	ldrb	r3, [r7, #31]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3720      	adds	r7, #32
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0802562c 	.word	0x0802562c

0800a3a8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08e      	sub	sp, #56	@ 0x38
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a3b8:	d818      	bhi.n	800a3ec <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3be:	4619      	mov	r1, r3
 800a3c0:	486a      	ldr	r0, [pc, #424]	@ (800a56c <vReturnEthernetFrame+0x1c4>)
 800a3c2:	f018 fb29 	bl	8022a18 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3cc:	e008      	b.n	800a3e0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d4:	4413      	add	r3, r2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3dc:	3301      	adds	r3, #1
 800a3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e2:	2b3b      	cmp	r3, #59	@ 0x3b
 800a3e4:	ddf3      	ble.n	800a3ce <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	223c      	movs	r2, #60	@ 0x3c
 800a3ea:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d111      	bne.n	800a416 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fb87 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 800a3fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 800a400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a402:	2b00      	cmp	r3, #0
 800a404:	d005      	beq.n	800a412 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a406:	2301      	movs	r3, #1
 800a408:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a410:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800a412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a414:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 80a3 	beq.w	800a564 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a422:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800a424:	2300      	movs	r3, #0
 800a426:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a430:	2b00      	cmp	r3, #0
 800a432:	d12f      	bne.n	800a494 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 800a434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a436:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a43a:	061a      	lsls	r2, r3, #24
 800a43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a448:	431a      	orrs	r2, r3
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a450:	0a1b      	lsrs	r3, r3, #8
 800a452:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a456:	431a      	orrs	r2, r3
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a45e:	0e1b      	lsrs	r3, r3, #24
 800a460:	4313      	orrs	r3, r2
 800a462:	4619      	mov	r1, r3
 800a464:	4842      	ldr	r0, [pc, #264]	@ (800a570 <vReturnEthernetFrame+0x1c8>)
 800a466:	f018 fad7 	bl	8022a18 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46e:	899b      	ldrh	r3, [r3, #12]
 800a470:	b29b      	uxth	r3, r3
 800a472:	2b08      	cmp	r3, #8
 800a474:	d003      	beq.n	800a47e <vReturnEthernetFrame+0xd6>
 800a476:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a47a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a47c:	e00a      	b.n	800a494 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800a47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a480:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a484:	2107      	movs	r1, #7
 800a486:	4618      	mov	r0, r3
 800a488:	f003 fcfe 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 800a48c:	4602      	mov	r2, r0
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800a492:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d063      	beq.n	800a564 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a4a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	899b      	ldrh	r3, [r3, #12]
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d11c      	bne.n	800a4ea <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800a4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a4b6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4be:	f107 0114 	add.w	r1, r7, #20
 800a4c2:	f107 0310 	add.w	r3, r7, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fa54 	bl	8007974 <eARPGetCacheEntry>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 800a4d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d103      	bne.n	800a4e2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800a4da:	f107 0314 	add.w	r3, r7, #20
 800a4de:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800a4e0:	e007      	b.n	800a4f2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a4e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e4:	3306      	adds	r3, #6
 800a4e6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800a4e8:	e003      	b.n	800a4f2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a4ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ec:	3306      	adds	r3, #6
 800a4ee:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800a4f0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800a4f6:	2206      	movs	r2, #6
 800a4f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a4fa:	69f8      	ldr	r0, [r7, #28]
 800a4fc:	f018 fca8 	bl	8022e50 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a504:	33e8      	adds	r3, #232	@ 0xe8
 800a506:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	3306      	adds	r3, #6
 800a50c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a50e:	2206      	movs	r2, #6
 800a510:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a512:	69f8      	ldr	r0, [r7, #28]
 800a514:	f018 fc9c 	bl	8022e50 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800a518:	f000 fbd4 	bl	800acc4 <xIsCallingFromIPTask>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d106      	bne.n	800a530 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a52c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800a52e:	e019      	b.n	800a564 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d011      	beq.n	800a55a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 800a536:	2302      	movs	r3, #2
 800a538:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	f04f 31ff 	mov.w	r1, #4294967295
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fc7a 	bl	8009e40 <xSendEventStructToIPTask>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d108      	bne.n	800a564 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f00d fb56 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
}
 800a558:	e004      	b.n	800a564 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800a55a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800a55e:	4805      	ldr	r0, [pc, #20]	@ (800a574 <vReturnEthernetFrame+0x1cc>)
 800a560:	f7f7 fa94 	bl	8001a8c <vAssertCalled>
}
 800a564:	bf00      	nop
 800a566:	3738      	adds	r7, #56	@ 0x38
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	08025658 	.word	0x08025658
 800a570:	0802567c 	.word	0x0802567c
 800a574:	08025544 	.word	0x08025544

0800a578 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a578:	b480      	push	{r7}
 800a57a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a57c:	4b03      	ldr	r3, [pc, #12]	@ (800a58c <xIPIsNetworkTaskReady+0x14>)
 800a57e:	681b      	ldr	r3, [r3, #0]
}
 800a580:	4618      	mov	r0, r3
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	200011c8 	.word	0x200011c8

0800a590 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 800a594:	4b03      	ldr	r3, [pc, #12]	@ (800a5a4 <uxGetMinimumIPQueueSpace+0x14>)
 800a596:	681b      	ldr	r3, [r3, #0]
    }
 800a598:	4618      	mov	r0, r3
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000014 	.word	0x20000014

0800a5a8 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	899b      	ldrh	r3, [r3, #12]
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d102      	bne.n	800a5ca <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a5c4:	2328      	movs	r3, #40	@ 0x28
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e001      	b.n	800a5ce <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a5ca:	2314      	movs	r3, #20
 800a5cc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d009      	beq.n	800a5fe <uxIPHeaderSizeSocket+0x22>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	7a1b      	ldrb	r3, [r3, #8]
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a5f8:	2328      	movs	r3, #40	@ 0x28
 800a5fa:	60fb      	str	r3, [r7, #12]
 800a5fc:	e001      	b.n	800a602 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a5fe:	2314      	movs	r3, #20
 800a600:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a602:	68fb      	ldr	r3, [r7, #12]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a616:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a61a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a61c:	4b28      	ldr	r3, [pc, #160]	@ (800a6c0 <xCalculateSleepTime+0xb0>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	f003 0301 	and.w	r3, r3, #1
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d007      	beq.n	800a63a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a62a:	4b25      	ldr	r3, [pc, #148]	@ (800a6c0 <xCalculateSleepTime+0xb0>)
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	429a      	cmp	r2, r3
 800a632:	d902      	bls.n	800a63a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a634:	4b22      	ldr	r3, [pc, #136]	@ (800a6c0 <xCalculateSleepTime+0xb0>)
 800a636:	68db      	ldr	r3, [r3, #12]
 800a638:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a63a:	4b22      	ldr	r3, [pc, #136]	@ (800a6c4 <xCalculateSleepTime+0xb4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a640:	e015      	b.n	800a66e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d009      	beq.n	800a666 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d903      	bls.n	800a666 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a664:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a66c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1e6      	bne.n	800a642 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a674:	4b14      	ldr	r3, [pc, #80]	@ (800a6c8 <xCalculateSleepTime+0xb8>)
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d007      	beq.n	800a692 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a682:	4b11      	ldr	r3, [pc, #68]	@ (800a6c8 <xCalculateSleepTime+0xb8>)
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d902      	bls.n	800a692 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a68c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6c8 <xCalculateSleepTime+0xb8>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a692:	4b0e      	ldr	r3, [pc, #56]	@ (800a6cc <xCalculateSleepTime+0xbc>)
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d007      	beq.n	800a6b0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a6cc <xCalculateSleepTime+0xbc>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d902      	bls.n	800a6b0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a6aa:	4b08      	ldr	r3, [pc, #32]	@ (800a6cc <xCalculateSleepTime+0xbc>)
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a6b0:	687b      	ldr	r3, [r7, #4]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	200011e4 	.word	0x200011e4
 800a6c4:	20001540 	.word	0x20001540
 800a6c8:	200011f8 	.word	0x200011f8
 800a6cc:	2000120c 	.word	0x2000120c

0800a6d0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a6d6:	484f      	ldr	r0, [pc, #316]	@ (800a814 <vCheckNetworkTimers+0x144>)
 800a6d8:	f000 f932 	bl	800a940 <prvIPTimerCheck>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a6e2:	2003      	movs	r0, #3
 800a6e4:	f7ff fb96 	bl	8009e14 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a6e8:	484b      	ldr	r0, [pc, #300]	@ (800a818 <vCheckNetworkTimers+0x148>)
 800a6ea:	f000 f929 	bl	800a940 <prvIPTimerCheck>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00e      	beq.n	800a712 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a6f4:	4b49      	ldr	r3, [pc, #292]	@ (800a81c <vCheckNetworkTimers+0x14c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f000 f995 	bl	800aa2c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a702:	4b46      	ldr	r3, [pc, #280]	@ (800a81c <vCheckNetworkTimers+0x14c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f00d fa7c 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a70c:	4b43      	ldr	r3, [pc, #268]	@ (800a81c <vCheckNetworkTimers+0x14c>)
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a712:	4b43      	ldr	r3, [pc, #268]	@ (800a820 <vCheckNetworkTimers+0x150>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a718:	e01f      	b.n	800a75a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	33f8      	adds	r3, #248	@ 0xf8
 800a71e:	4618      	mov	r0, r3
 800a720:	f000 f90e 	bl	800a940 <prvIPTimerCheck>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d013      	beq.n	800a752 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a730:	f003 0304 	and.w	r3, r3, #4
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00b      	beq.n	800a752 <vCheckNetworkTimers+0x82>
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a74a:	6939      	ldr	r1, [r7, #16]
 800a74c:	2000      	movs	r0, #0
 800a74e:	f003 f8f7 	bl	800d940 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a758:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1dc      	bne.n	800a71a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a760:	4830      	ldr	r0, [pc, #192]	@ (800a824 <vCheckNetworkTimers+0x154>)
 800a762:	f000 f8ed 	bl	800a940 <prvIPTimerCheck>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7fd fff9 	bl	8008764 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a772:	4b2d      	ldr	r3, [pc, #180]	@ (800a828 <vCheckNetworkTimers+0x158>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4618      	mov	r0, r3
 800a778:	f7f9 fda4 	bl	80042c4 <uxQueueMessagesWaiting>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a782:	2301      	movs	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
 800a786:	e001      	b.n	800a78c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a78c:	4827      	ldr	r0, [pc, #156]	@ (800a82c <vCheckNetworkTimers+0x15c>)
 800a78e:	f000 f8d7 	bl	800a940 <prvIPTimerCheck>
 800a792:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a79a:	2301      	movs	r3, #1
 800a79c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d007      	beq.n	800a7b4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f006 f85d 	bl	8010864 <xTCPTimerCheck>
 800a7aa:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a7ac:	6839      	ldr	r1, [r7, #0]
 800a7ae:	481f      	ldr	r0, [pc, #124]	@ (800a82c <vCheckNetworkTimers+0x15c>)
 800a7b0:	f000 f844 	bl	800a83c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f006 ff8d 	bl	80116d4 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f006 ffa6 	bl	801170c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a7c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a830 <vCheckNetworkTimers+0x160>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d120      	bne.n	800a80a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a7c8:	481a      	ldr	r0, [pc, #104]	@ (800a834 <vCheckNetworkTimers+0x164>)
 800a7ca:	f000 f8b9 	bl	800a940 <prvIPTimerCheck>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01a      	beq.n	800a80a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a7d8:	4b17      	ldr	r3, [pc, #92]	@ (800a838 <vCheckNetworkTimers+0x168>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	617b      	str	r3, [r7, #20]
 800a7de:	e00e      	b.n	800a7fe <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	7f1b      	ldrb	r3, [r3, #28]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d104      	bne.n	800a7f8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a7f2:	6978      	ldr	r0, [r7, #20]
 800a7f4:	f7ff fa30 	bl	8009c58 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1ed      	bne.n	800a7e0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f000 f971 	bl	800aaec <vSetAllNetworksUp>
        }
    }
}
 800a80a:	bf00      	nop
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200011e4 	.word	0x200011e4
 800a818:	200011d0 	.word	0x200011d0
 800a81c:	200011b4 	.word	0x200011b4
 800a820:	20001540 	.word	0x20001540
 800a824:	2000120c 	.word	0x2000120c
 800a828:	200011b8 	.word	0x200011b8
 800a82c:	200011f8 	.word	0x200011f8
 800a830:	200011cc 	.word	0x200011cc
 800a834:	20001220 	.word	0x20001220
 800a838:	20001544 	.word	0x20001544

0800a83c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fa febe 	bl	80055cc <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d105      	bne.n	800a868 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	7813      	ldrb	r3, [r2, #0]
 800a860:	f043 0302 	orr.w	r3, r3, #2
 800a864:	7013      	strb	r3, [r2, #0]
 800a866:	e004      	b.n	800a872 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7813      	ldrb	r3, [r2, #0]
 800a86c:	f36f 0341 	bfc	r3, #1, #1
 800a870:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	7813      	ldrb	r3, [r2, #0]
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	7013      	strb	r3, [r2, #0]
}
 800a87c:	bf00      	nop
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	4803      	ldr	r0, [pc, #12]	@ (800a89c <vIPTimerStartARPResolution+0x18>)
 800a890:	f7ff ffd4 	bl	800a83c <prvIPTimerStart>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	200011d0 	.word	0x200011d0

0800a8a0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff ffc2 	bl	800a83c <prvIPTimerStart>
}
 800a8b8:	bf00      	nop
 800a8ba:	3708      	adds	r7, #8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	4803      	ldr	r0, [pc, #12]	@ (800a8d8 <vTCPTimerReload+0x18>)
 800a8cc:	f7ff ffe8 	bl	800a8a0 <prvIPTimerReload>
    }
 800a8d0:	bf00      	nop
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	200011f8 	.word	0x200011f8

0800a8dc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a8e4:	6879      	ldr	r1, [r7, #4]
 800a8e6:	4803      	ldr	r0, [pc, #12]	@ (800a8f4 <vARPTimerReload+0x18>)
 800a8e8:	f7ff ffda 	bl	800a8a0 <prvIPTimerReload>
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	200011e4 	.word	0x200011e4

0800a8f8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a902:	6839      	ldr	r1, [r7, #0]
 800a904:	4806      	ldr	r0, [pc, #24]	@ (800a920 <vDHCP_RATimerReload+0x28>)
 800a906:	f018 f887 	bl	8022a18 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	33f8      	adds	r3, #248	@ 0xf8
 800a90e:	6839      	ldr	r1, [r7, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff ffc5 	bl	800a8a0 <prvIPTimerReload>
    }
 800a916:	bf00      	nop
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	080256b0 	.word	0x080256b0

0800a924 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	4803      	ldr	r0, [pc, #12]	@ (800a93c <vNetworkTimerReload+0x18>)
 800a930:	f7ff ffb6 	bl	800a8a0 <prvIPTimerReload>
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20001220 	.word	0x20001220

0800a940 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	e028      	b.n	800a9ae <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	f003 0302 	and.w	r3, r3, #2
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10f      	bne.n	800a98a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	1d1a      	adds	r2, r3, #4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	330c      	adds	r3, #12
 800a972:	4619      	mov	r1, r3
 800a974:	4610      	mov	r0, r2
 800a976:	f7fa fe61 	bl	800563c <xTaskCheckForTimeOut>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d004      	beq.n	800a98a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	7813      	ldrb	r3, [r2, #0]
 800a984:	f043 0302 	orr.w	r3, r3, #2
 800a988:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	781b      	ldrb	r3, [r3, #0]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b00      	cmp	r3, #0
 800a996:	d008      	beq.n	800a9aa <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff ff4c 	bl	800a83c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	e001      	b.n	800a9ae <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a9c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a9f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a9c2:	7813      	ldrb	r3, [r2, #0]
 800a9c4:	f043 0301 	orr.w	r3, r3, #1
 800a9c8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d005      	beq.n	800a9dc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a9d0:	4a08      	ldr	r2, [pc, #32]	@ (800a9f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a9d2:	7813      	ldrb	r3, [r2, #0]
 800a9d4:	f043 0302 	orr.w	r3, r3, #2
 800a9d8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a9da:	e004      	b.n	800a9e6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a9dc:	4a05      	ldr	r2, [pc, #20]	@ (800a9f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a9de:	7813      	ldrb	r3, [r2, #0]
 800a9e0:	f36f 0341 	bfc	r3, #1, #1
 800a9e4:	7013      	strb	r3, [r2, #0]
    }
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	200011f8 	.word	0x200011f8

0800a9f8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800aa06:	4a08      	ldr	r2, [pc, #32]	@ (800aa28 <vIPSetARPTimerEnableState+0x30>)
 800aa08:	7813      	ldrb	r3, [r2, #0]
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800aa10:	e004      	b.n	800aa1c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800aa12:	4a05      	ldr	r2, [pc, #20]	@ (800aa28 <vIPSetARPTimerEnableState+0x30>)
 800aa14:	7813      	ldrb	r3, [r2, #0]
 800aa16:	f36f 0300 	bfc	r3, #0, #1
 800aa1a:	7013      	strb	r3, [r2, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	200011e4 	.word	0x200011e4

0800aa2c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800aa3a:	4a08      	ldr	r2, [pc, #32]	@ (800aa5c <vIPSetARPResolutionTimerEnableState+0x30>)
 800aa3c:	7813      	ldrb	r3, [r2, #0]
 800aa3e:	f043 0301 	orr.w	r3, r3, #1
 800aa42:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800aa44:	e004      	b.n	800aa50 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800aa46:	4a05      	ldr	r2, [pc, #20]	@ (800aa5c <vIPSetARPResolutionTimerEnableState+0x30>)
 800aa48:	7813      	ldrb	r3, [r2, #0]
 800aa4a:	f36f 0300 	bfc	r3, #0, #1
 800aa4e:	7013      	strb	r3, [r2, #0]
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	200011d0 	.word	0x200011d0

0800aa60 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <vIPSetDHCP_RATimerEnableState+0x14>
 800aa70:	4b0e      	ldr	r3, [pc, #56]	@ (800aaac <vIPSetDHCP_RATimerEnableState+0x4c>)
 800aa72:	e000      	b.n	800aa76 <vIPSetDHCP_RATimerEnableState+0x16>
 800aa74:	4b0e      	ldr	r3, [pc, #56]	@ (800aab0 <vIPSetDHCP_RATimerEnableState+0x50>)
 800aa76:	4619      	mov	r1, r3
 800aa78:	480e      	ldr	r0, [pc, #56]	@ (800aab4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800aa7a:	f017 ffcd 	bl	8022a18 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800aa8a:	f043 0301 	orr.w	r3, r3, #1
 800aa8e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800aa92:	e006      	b.n	800aaa2 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800aa9a:	f36f 0300 	bfc	r3, #0, #1
 800aa9e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	080256cc 	.word	0x080256cc
 800aab0:	080256d0 	.word	0x080256d0
 800aab4:	080256d4 	.word	0x080256d4

0800aab8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d005      	beq.n	800aad2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800aac6:	4a08      	ldr	r2, [pc, #32]	@ (800aae8 <vIPSetDNSTimerEnableState+0x30>)
 800aac8:	7813      	ldrb	r3, [r2, #0]
 800aaca:	f043 0301 	orr.w	r3, r3, #1
 800aace:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800aad0:	e004      	b.n	800aadc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800aad2:	4a05      	ldr	r2, [pc, #20]	@ (800aae8 <vIPSetDNSTimerEnableState+0x30>)
 800aad4:	7813      	ldrb	r3, [r2, #0]
 800aad6:	f36f 0300 	bfc	r3, #0, #1
 800aada:	7013      	strb	r3, [r2, #0]
    }
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	2000120c 	.word	0x2000120c

0800aaec <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800aaf4:	4a04      	ldr	r2, [pc, #16]	@ (800ab08 <vSetAllNetworksUp+0x1c>)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6013      	str	r3, [r2, #0]
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	200011cc 	.word	0x200011cc

0800ab0c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	6838      	ldr	r0, [r7, #0]
 800ab1e:	f00d f809 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800ab22:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d03e      	beq.n	800aba8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800ab32:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800ab36:	481f      	ldr	r0, [pc, #124]	@ (800abb4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800ab38:	f7f6 ffa8 	bl	8001a8c <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d902      	bls.n	800ab4c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab4a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	695a      	ldr	r2, [r3, #20]
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4619      	mov	r1, r3
 800ab86:	f018 f963 	bl	8022e50 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800ab8a:	68b8      	ldr	r0, [r7, #8]
 800ab8c:	f7ff fd0c 	bl	800a5a8 <uxIPHeaderSizePacket>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b28      	cmp	r3, #40	@ 0x28
 800ab94:	d108      	bne.n	800aba8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f103 0014 	add.w	r0, r3, #20
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	3314      	adds	r3, #20
 800aba0:	2210      	movs	r2, #16
 800aba2:	4619      	mov	r1, r3
 800aba4:	f018 f954 	bl	8022e50 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800aba8:	68bb      	ldr	r3, [r7, #8]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	080256f8 	.word	0x080256f8

0800abb8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d102      	bne.n	800abce <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800abc8:	2300      	movs	r3, #0
 800abca:	60fb      	str	r3, [r7, #12]
 800abcc:	e013      	b.n	800abf6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f816 	bl	800ac00 <void_ptr_to_uintptr>
 800abd4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	3b0a      	subs	r3, #10
 800abde:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d103      	bne.n	800abf2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e001      	b.n	800abf6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b082      	sub	sp, #8
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800ac22:	2100      	movs	r1, #0
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff ffc7 	bl	800abb8 <prvPacketBuffer_to_NetworkBuffer>
 800ac2a:	4603      	mov	r3, r0
    }
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b088      	sub	sp, #32
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d102      	bne.n	800ac48 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800ac42:	2300      	movs	r3, #0
 800ac44:	61fb      	str	r3, [r7, #28]
 800ac46:	e033      	b.n	800acb0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff ffd9 	bl	800ac00 <void_ptr_to_uintptr>
 800ac4e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	3b30      	subs	r3, #48	@ 0x30
 800ac54:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f023 030f 	bic.w	r3, r3, #15
 800ac62:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b40      	cmp	r3, #64	@ 0x40
 800ac68:	d002      	beq.n	800ac70 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	2b60      	cmp	r3, #96	@ 0x60
 800ac6e:	d101      	bne.n	800ac74 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e000      	b.n	800ac76 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800ac74:	2300      	movs	r3, #0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d104      	bne.n	800ac84 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800ac7a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800ac7e:	480f      	ldr	r0, [pc, #60]	@ (800acbc <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800ac80:	f7f6 ff04 	bl	8001a8c <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	2b40      	cmp	r3, #64	@ 0x40
 800ac88:	d004      	beq.n	800ac94 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800ac8a:	2b60      	cmp	r3, #96	@ 0x60
 800ac8c:	d105      	bne.n	800ac9a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800ac8e:	233e      	movs	r3, #62	@ 0x3e
 800ac90:	61bb      	str	r3, [r7, #24]
                    break;
 800ac92:	e008      	b.n	800aca6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800ac94:	232a      	movs	r3, #42	@ 0x2a
 800ac96:	61bb      	str	r3, [r7, #24]
                    break;
 800ac98:	e005      	b.n	800aca6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800ac9a:	4809      	ldr	r0, [pc, #36]	@ (800acc0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800ac9c:	f017 febc 	bl	8022a18 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800aca0:	232a      	movs	r3, #42	@ 0x2a
 800aca2:	61bb      	str	r3, [r7, #24]
                break;
 800aca4:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800aca6:	69b9      	ldr	r1, [r7, #24]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff ff85 	bl	800abb8 <prvPacketBuffer_to_NetworkBuffer>
 800acae:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800acb0:	69fb      	ldr	r3, [r7, #28]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	080256f8 	.word	0x080256f8
 800acc0:	080257d0 	.word	0x080257d0

0800acc4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800acca:	f7fa fdd1 	bl	8005870 <xTaskGetCurrentTaskHandle>
 800acce:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800acd0:	f7fe ff6e 	bl	8009bb0 <FreeRTOS_GetIPTaskHandle>
 800acd4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d102      	bne.n	800ace4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800acde:	2301      	movs	r3, #1
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e001      	b.n	800ace8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800ace8:	68fb      	ldr	r3, [r7, #12]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <prvProcessNetworkDownEvent+0x18>
 800ad02:	f240 3137 	movw	r1, #823	@ 0x337
 800ad06:	4857      	ldr	r0, [pc, #348]	@ (800ae64 <prvProcessNetworkDownEvent+0x170>)
 800ad08:	f7f6 fec0 	bl	8001a8c <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d104      	bne.n	800ad1e <prvProcessNetworkDownEvent+0x2a>
 800ad14:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800ad18:	4852      	ldr	r0, [pc, #328]	@ (800ae64 <prvProcessNetworkDownEvent+0x170>)
 800ad1a:	f7f6 feb7 	bl	8001a8c <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f7ff fe6a 	bl	800a9f8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f002 ffd7 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	e041      	b.n	800adb2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800ad34:	f36f 1304 	bfc	r3, #4, #1
 800ad38:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f001 f9c8 	bl	800c0e4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800ad64:	2001      	movs	r0, #1
 800ad66:	f7f6 fec5 	bl	8001af4 <vApplicationIPNetworkEventHook>
 800ad6a:	e006      	b.n	800ad7a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800ad72:	f043 0308 	orr.w	r3, r3, #8
 800ad76:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7fd f8c0 	bl	8007f00 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00b      	beq.n	800ada8 <prvProcessNetworkDownEvent+0xb4>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	b2db      	uxtb	r3, r3
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800ada0:	2100      	movs	r1, #0
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fe5c 	bl	800aa60 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f002 ffb6 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800adb0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1ba      	bne.n	800ad2e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d147      	bne.n	800ae56 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	7f13      	ldrb	r3, [r2, #28]
 800adca:	f043 0301 	orr.w	r3, r3, #1
 800adce:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f002 ff81 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	e039      	b.n	800ae4e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00c      	beq.n	800ae04 <prvProcessNetworkDownEvent+0x110>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d004      	beq.n	800ae04 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800adfa:	68f9      	ldr	r1, [r7, #12]
 800adfc:	2001      	movs	r0, #1
 800adfe:	f002 fd9f 	bl	800d940 <vRAProcess>
 800ae02:	e01f      	b.n	800ae44 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ae0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <prvProcessNetworkDownEvent+0x126>
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d008      	beq.n	800ae2a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ae18:	e011      	b.n	800ae3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	331c      	adds	r3, #28
 800ae20:	221c      	movs	r2, #28
 800ae22:	4619      	mov	r1, r3
 800ae24:	f018 f814 	bl	8022e50 <memcpy>
                            break;
 800ae28:	e009      	b.n	800ae3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	3390      	adds	r3, #144	@ 0x90
 800ae34:	2258      	movs	r2, #88	@ 0x58
 800ae36:	4619      	mov	r1, r3
 800ae38:	f018 f80a 	bl	8022e50 <memcpy>
                            break;
 800ae3c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7fe fec2 	bl	8009bc8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ae44:	68f9      	ldr	r1, [r7, #12]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f002 ff68 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800ae4c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1c2      	bne.n	800adda <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800ae54:	e002      	b.n	800ae5c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800ae56:	2000      	movs	r0, #0
 800ae58:	f7ff fe48 	bl	800aaec <vSetAllNetworksUp>
}
 800ae5c:	bf00      	nop
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	080256f8 	.word	0x080256f8

0800ae68 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800ae6e:	f7ff fb83 	bl	800a578 <xIPIsNetworkTaskReady>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <vPreCheckConfigs+0x1a>
 800ae78:	f240 31db 	movw	r1, #987	@ 0x3db
 800ae7c:	4831      	ldr	r0, [pc, #196]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800ae7e:	f7f6 fe05 	bl	8001a8c <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800ae82:	4b31      	ldr	r3, [pc, #196]	@ (800af48 <vPreCheckConfigs+0xe0>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d004      	beq.n	800ae94 <vPreCheckConfigs+0x2c>
 800ae8a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800ae8e:	482d      	ldr	r0, [pc, #180]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800ae90:	f7f6 fdfc 	bl	8001a8c <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800ae94:	f7fe fe8c 	bl	8009bb0 <FreeRTOS_GetIPTaskHandle>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d004      	beq.n	800aea8 <vPreCheckConfigs+0x40>
 800ae9e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800aea2:	4828      	ldr	r0, [pc, #160]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800aea4:	f7f6 fdf2 	bl	8001a8c <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800aea8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800aeac:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f240 52db 	movw	r2, #1499	@ 0x5db
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d804      	bhi.n	800aec2 <vPreCheckConfigs+0x5a>
 800aeb8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800aebc:	4821      	ldr	r0, [pc, #132]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800aebe:	f7f6 fde5 	bl	8001a8c <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800aec2:	230e      	movs	r3, #14
 800aec4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b0e      	cmp	r3, #14
 800aeca:	d004      	beq.n	800aed6 <vPreCheckConfigs+0x6e>
 800aecc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800aed0:	481c      	ldr	r0, [pc, #112]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800aed2:	f7f6 fddb 	bl	8001a8c <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800aed6:	231c      	movs	r3, #28
 800aed8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b1c      	cmp	r3, #28
 800aede:	d004      	beq.n	800aeea <vPreCheckConfigs+0x82>
 800aee0:	f240 4102 	movw	r1, #1026	@ 0x402
 800aee4:	4817      	ldr	r0, [pc, #92]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800aee6:	f7f6 fdd1 	bl	8001a8c <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800aeea:	2314      	movs	r3, #20
 800aeec:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b14      	cmp	r3, #20
 800aef2:	d004      	beq.n	800aefe <vPreCheckConfigs+0x96>
 800aef4:	f240 4105 	movw	r1, #1029	@ 0x405
 800aef8:	4812      	ldr	r0, [pc, #72]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800aefa:	f7f6 fdc7 	bl	8001a8c <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800aefe:	2308      	movs	r3, #8
 800af00:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2b08      	cmp	r3, #8
 800af06:	d004      	beq.n	800af12 <vPreCheckConfigs+0xaa>
 800af08:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800af0c:	480d      	ldr	r0, [pc, #52]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800af0e:	f7f6 fdbd 	bl	8001a8c <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800af12:	2308      	movs	r3, #8
 800af14:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b08      	cmp	r3, #8
 800af1a:	d004      	beq.n	800af26 <vPreCheckConfigs+0xbe>
 800af1c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800af20:	4808      	ldr	r0, [pc, #32]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800af22:	f7f6 fdb3 	bl	8001a8c <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800af26:	2324      	movs	r3, #36	@ 0x24
 800af28:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b24      	cmp	r3, #36	@ 0x24
 800af2e:	d004      	beq.n	800af3a <vPreCheckConfigs+0xd2>
 800af30:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <vPreCheckConfigs+0xdc>)
 800af36:	f7f6 fda9 	bl	8001a8c <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	080256f8 	.word	0x080256f8
 800af48:	200011b8 	.word	0x200011b8

0800af4c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800af52:	f00c fe9d 	bl	8017c90 <uxGetMinimumFreeNetworkBuffers>
 800af56:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800af58:	4b24      	ldr	r3, [pc, #144]	@ (800afec <vPrintResourceStats+0xa0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d20a      	bcs.n	800af78 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800af62:	4a22      	ldr	r2, [pc, #136]	@ (800afec <vPrintResourceStats+0xa0>)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800af68:	f00c fe9e 	bl	8017ca8 <uxGetNumberOfFreeNetworkBuffers>
 800af6c:	4603      	mov	r3, r0
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	4619      	mov	r1, r3
 800af72:	481f      	ldr	r0, [pc, #124]	@ (800aff0 <vPrintResourceStats+0xa4>)
 800af74:	f017 fd50 	bl	8022a18 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800af78:	f7fb ff1e 	bl	8006db8 <xPortGetMinimumEverFreeHeapSize>
 800af7c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800af7e:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <vPrintResourceStats+0xa8>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d103      	bne.n	800af8e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800af86:	4a1b      	ldr	r2, [pc, #108]	@ (800aff4 <vPrintResourceStats+0xa8>)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	e019      	b.n	800afc2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af94:	d215      	bcs.n	800afc2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800af96:	4b17      	ldr	r3, [pc, #92]	@ (800aff4 <vPrintResourceStats+0xa8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	225a      	movs	r2, #90	@ 0x5a
 800af9c:	fb03 f202 	mul.w	r2, r3, r2
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	2164      	movs	r1, #100	@ 0x64
 800afa4:	fb01 f303 	mul.w	r3, r1, r3
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d90a      	bls.n	800afc2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800afac:	4a11      	ldr	r2, [pc, #68]	@ (800aff4 <vPrintResourceStats+0xa8>)
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800afb2:	f7fb fef5 	bl	8006da0 <xPortGetFreeHeapSize>
 800afb6:	4603      	mov	r3, r0
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	4619      	mov	r1, r3
 800afbc:	480e      	ldr	r0, [pc, #56]	@ (800aff8 <vPrintResourceStats+0xac>)
 800afbe:	f017 fd2b 	bl	8022a18 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800afc2:	2300      	movs	r3, #0
 800afc4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800afc6:	f7ff fae3 	bl	800a590 <uxGetMinimumIPQueueSpace>
 800afca:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800afcc:	4b0b      	ldr	r3, [pc, #44]	@ (800affc <vPrintResourceStats+0xb0>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d006      	beq.n	800afe4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800afd6:	4a09      	ldr	r2, [pc, #36]	@ (800affc <vPrintResourceStats+0xb0>)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	4808      	ldr	r0, [pc, #32]	@ (800b000 <vPrintResourceStats+0xb4>)
 800afe0:	f017 fd1a 	bl	8022a18 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800afe4:	bf00      	nop
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20000018 	.word	0x20000018
 800aff0:	08025868 	.word	0x08025868
 800aff4:	20001234 	.word	0x20001234
 800aff8:	0802588c 	.word	0x0802588c
 800affc:	20001238 	.word	0x20001238
 800b000:	080258a8 	.word	0x080258a8

0800b004 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	4293      	cmp	r3, r2
 800b014:	bf38      	it	cc
 800b016:	4613      	movcc	r3, r2
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	4293      	cmp	r3, r2
 800b034:	bfa8      	it	ge
 800b036:	4613      	movge	r3, r2
}
 800b038:	4618      	mov	r0, r3
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	4293      	cmp	r3, r2
 800b054:	bf28      	it	cs
 800b056:	4613      	movcs	r3, r2
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	4293      	cmp	r3, r2
 800b074:	bf28      	it	cs
 800b076:	4613      	movcs	r3, r2
}
 800b078:	4618      	mov	r0, r3
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <FreeRTOS_round_up+0x1e>
 800b098:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800b09c:	480a      	ldr	r0, [pc, #40]	@ (800b0c8 <FreeRTOS_round_up+0x44>)
 800b09e:	f7f6 fcf5 	bl	8001a8c <vAssertCalled>

    if( d != 0U )
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00a      	beq.n	800b0be <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	1e5a      	subs	r2, r3, #1
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	fb02 f303 	mul.w	r3, r2, r3
 800b0bc:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800b0be:	68fb      	ldr	r3, [r7, #12]
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	080256f8 	.word	0x080256f8

0800b0cc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800b0e2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	3302      	adds	r3, #2
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800b0ec:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	3203      	adds	r2, #3
 800b0f2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800b0f4:	4313      	orrs	r3, r2
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	370c      	adds	r7, #12
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr

0800b102 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800b102:	b480      	push	{r7}
 800b104:	b083      	sub	sp, #12
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	3201      	adds	r2, #1
 800b116:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800b118:	4313      	orrs	r3, r2
 800b11a:	b29b      	uxth	r3, r3
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08a      	sub	sp, #40	@ 0x28
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800b132:	2300      	movs	r3, #0
 800b134:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b13a:	2300      	movs	r3, #0
 800b13c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b21      	cmp	r3, #33	@ 0x21
 800b142:	d802      	bhi.n	800b14a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b144:	2301      	movs	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
                break;
 800b148:	e06f      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	7b9b      	ldrb	r3, [r3, #14]
 800b14e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800b150:	8afb      	ldrh	r3, [r7, #22]
 800b152:	2b44      	cmp	r3, #68	@ 0x44
 800b154:	d902      	bls.n	800b15c <xCheckIPv4SizeFields+0x34>
 800b156:	8afb      	ldrh	r3, [r7, #22]
 800b158:	2b4f      	cmp	r3, #79	@ 0x4f
 800b15a:	d902      	bls.n	800b162 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b15c:	2302      	movs	r3, #2
 800b15e:	61fb      	str	r3, [r7, #28]
                break;
 800b160:	e063      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800b162:	8afb      	ldrh	r3, [r7, #22]
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	b29b      	uxth	r3, r3
 800b168:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b16c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800b16e:	8afb      	ldrh	r3, [r7, #22]
 800b170:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	330e      	adds	r3, #14
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d202      	bcs.n	800b182 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b17c:	2303      	movs	r3, #3
 800b17e:	61fb      	str	r3, [r7, #28]
                break;
 800b180:	e053      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	7c1a      	ldrb	r2, [r3, #16]
 800b186:	7c5b      	ldrb	r3, [r3, #17]
 800b188:	021b      	lsls	r3, r3, #8
 800b18a:	4313      	orrs	r3, r2
 800b18c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800b18e:	89fb      	ldrh	r3, [r7, #14]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	b21a      	sxth	r2, r3
 800b194:	89fb      	ldrh	r3, [r7, #14]
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	b29b      	uxth	r3, r3
 800b19a:	b21b      	sxth	r3, r3
 800b19c:	4313      	orrs	r3, r2
 800b19e:	b21b      	sxth	r3, r3
 800b1a0:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800b1a2:	89fb      	ldrh	r3, [r7, #14]
 800b1a4:	330e      	adds	r3, #14
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d202      	bcs.n	800b1b2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	61fb      	str	r3, [r7, #28]
                break;
 800b1b0:	e03b      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	7ddb      	ldrb	r3, [r3, #23]
 800b1b6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b1b8:	7b7b      	ldrb	r3, [r7, #13]
 800b1ba:	2b11      	cmp	r3, #17
 800b1bc:	d103      	bne.n	800b1c6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	3316      	adds	r3, #22
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1c4:	e013      	b.n	800b1ee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800b1c6:	7b7b      	ldrb	r3, [r7, #13]
 800b1c8:	2b06      	cmp	r3, #6
 800b1ca:	d103      	bne.n	800b1d4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3322      	adds	r3, #34	@ 0x22
 800b1d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1d2:	e00c      	b.n	800b1ee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800b1d4:	7b7b      	ldrb	r3, [r7, #13]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d002      	beq.n	800b1e0 <xCheckIPv4SizeFields+0xb8>
 800b1da:	7b7b      	ldrb	r3, [r7, #13]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d103      	bne.n	800b1e8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	3316      	adds	r3, #22
 800b1e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1e6:	e002      	b.n	800b1ee <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b1e8:	2305      	movs	r3, #5
 800b1ea:	61fb      	str	r3, [r7, #28]
                break;
 800b1ec:	e01d      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d202      	bcs.n	800b1fc <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b1f6:	2306      	movs	r3, #6
 800b1f8:	61fb      	str	r3, [r7, #28]
                break;
 800b1fa:	e016      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	b29b      	uxth	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b07      	cmp	r3, #7
 800b210:	d906      	bls.n	800b220 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800b218:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d902      	bls.n	800b226 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b220:	2307      	movs	r3, #7
 800b222:	61fb      	str	r3, [r7, #28]
                break;
 800b224:	e001      	b.n	800b22a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800b226:	2301      	movs	r3, #1
 800b228:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d003      	beq.n	800b238 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800b230:	69f9      	ldr	r1, [r7, #28]
 800b232:	4804      	ldr	r0, [pc, #16]	@ (800b244 <xCheckIPv4SizeFields+0x11c>)
 800b234:	f017 fbf0 	bl	8022a18 <lUDPLoggingPrintf>
        }

        return xResult;
 800b238:	6a3b      	ldr	r3, [r7, #32]
    }
 800b23a:	4618      	mov	r0, r3
 800b23c:	3728      	adds	r7, #40	@ 0x28
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	08025974 	.word	0x08025974

0800b248 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	061a      	lsls	r2, r3, #24
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	021b      	lsls	r3, r3, #8
 800b258:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b25c:	431a      	orrs	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	0a1b      	lsrs	r3, r3, #8
 800b262:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b266:	431a      	orrs	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	0e1b      	lsrs	r3, r3, #24
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b276:	d306      	bcc.n	800b286 <xIsIPv4Multicast+0x3e>
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800b27e:	d202      	bcs.n	800b286 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800b280:	2301      	movs	r3, #1
 800b282:	60fb      	str	r3, [r7, #12]
 800b284:	e001      	b.n	800b28a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800b286:	2300      	movs	r3, #0
 800b288:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b28a:	68fb      	ldr	r3, [r7, #12]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d10c      	bne.n	800b2c8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	f7ff ff35 	bl	800b128 <xCheckIPv4SizeFields>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d001      	beq.n	800b2c8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d134      	bne.n	800b338 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	7ddb      	ldrb	r3, [r3, #23]
 800b2d2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d8:	3322      	adds	r3, #34	@ 0x22
 800b2da:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b2dc:	7dbb      	ldrb	r3, [r7, #22]
 800b2de:	2b11      	cmp	r3, #17
 800b2e0:	d12a      	bne.n	800b338 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	88db      	ldrh	r3, [r3, #6]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d125      	bne.n	800b338 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800b2ec:	4b15      	ldr	r3, [pc, #84]	@ (800b344 <prvAllowIPPacketIPv4+0xac>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	dc1f      	bgt.n	800b334 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b2fa:	061a      	lsls	r2, r3, #24
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b302:	021b      	lsls	r3, r3, #8
 800b304:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b308:	431a      	orrs	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b310:	0a1b      	lsrs	r3, r3, #8
 800b312:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b316:	431a      	orrs	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b31e:	0e1b      	lsrs	r3, r3, #24
 800b320:	4313      	orrs	r3, r2
 800b322:	4619      	mov	r1, r3
 800b324:	4808      	ldr	r0, [pc, #32]	@ (800b348 <prvAllowIPPacketIPv4+0xb0>)
 800b326:	f017 fb77 	bl	8022a18 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800b32a:	4b06      	ldr	r3, [pc, #24]	@ (800b344 <prvAllowIPPacketIPv4+0xac>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3301      	adds	r3, #1
 800b330:	4a04      	ldr	r2, [pc, #16]	@ (800b344 <prvAllowIPPacketIPv4+0xac>)
 800b332:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800b334:	2300      	movs	r3, #0
 800b336:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	2000123c 	.word	0x2000123c
 800b348:	08025998 	.word	0x08025998

0800b34c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b08a      	sub	sp, #40	@ 0x28
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b354:	2301      	movs	r3, #1
 800b356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35e:	330e      	adds	r3, #14
 800b360:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800b362:	6a3b      	ldr	r3, [r7, #32]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b370:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	3b14      	subs	r3, #20
 800b376:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	330e      	adds	r3, #14
 800b380:	4413      	add	r3, r2
 800b382:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b388:	3322      	adds	r3, #34	@ 0x22
 800b38a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	3b22      	subs	r3, #34	@ 0x22
 800b396:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	6939      	ldr	r1, [r7, #16]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f018 fd2a 	bl	8023df6 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	1ad2      	subs	r2, r2, r3
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	885b      	ldrh	r3, [r3, #2]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	021b      	lsls	r3, r3, #8
 800b3b6:	b21a      	sxth	r2, r3
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	885b      	ldrh	r3, [r3, #2]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	0a1b      	lsrs	r3, r3, #8
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	b21b      	sxth	r3, r3
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	021b      	lsls	r3, r3, #8
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	885b      	ldrh	r3, [r3, #2]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	021b      	lsls	r3, r3, #8
 800b3de:	b219      	sxth	r1, r3
 800b3e0:	6a3b      	ldr	r3, [r7, #32]
 800b3e2:	885b      	ldrh	r3, [r3, #2]
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	0a1b      	lsrs	r3, r3, #8
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	b21b      	sxth	r3, r3
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	b21b      	sxth	r3, r3
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	1acb      	subs	r3, r1, r3
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800b404:	6a3b      	ldr	r3, [r7, #32]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	f023 030f 	bic.w	r3, r3, #15
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	f043 0305 	orr.w	r3, r3, #5
 800b412:	b2da      	uxtb	r2, r3
 800b414:	6a3b      	ldr	r3, [r7, #32]
 800b416:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800b418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3728      	adds	r7, #40	@ 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d802      	bhi.n	800b43c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b436:	2300      	movs	r3, #0
 800b438:	61fb      	str	r3, [r7, #28]
 800b43a:	e00e      	b.n	800b45a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b43c:	f107 0314 	add.w	r3, r7, #20
 800b440:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	4618      	mov	r0, r3
 800b452:	f004 fac9 	bl	800f9e8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b45a:	69fb      	ldr	r3, [r7, #28]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d010      	beq.n	800b496 <xSend_UDP_Update_IPv4+0x32>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00d      	beq.n	800b496 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	689a      	ldr	r2, [r3, #8]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f042 0208 	orr.w	r2, r2, #8
 800b490:	731a      	strb	r2, [r3, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	061a      	lsls	r2, r3, #24
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b4ba:	431a      	orrs	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b4c4:	431a      	orrs	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	0e1b      	lsrs	r3, r3, #24
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	225e      	movs	r2, #94	@ 0x5e
 800b4de:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	0c1b      	lsrs	r3, r3, #16
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	0a1b      	lsrs	r3, r3, #8
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	715a      	strb	r2, [r3, #5]
}
 800b502:	bf00      	nop
 800b504:	3714      	adds	r7, #20
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
	...

0800b510 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b510:	b580      	push	{r7, lr}
 800b512:	b08c      	sub	sp, #48	@ 0x30
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b52e:	2300      	movs	r3, #0
 800b530:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b27      	cmp	r3, #39	@ 0x27
 800b536:	d802      	bhi.n	800b53e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b538:	2301      	movs	r3, #1
 800b53a:	61fb      	str	r3, [r7, #28]
                break;
 800b53c:	e098      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	7b9b      	ldrb	r3, [r3, #14]
 800b542:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800b544:	89fb      	ldrh	r3, [r7, #14]
 800b546:	111b      	asrs	r3, r3, #4
 800b548:	f003 030f 	and.w	r3, r3, #15
 800b54c:	2b06      	cmp	r3, #6
 800b54e:	d002      	beq.n	800b556 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b550:	2302      	movs	r3, #2
 800b552:	61fb      	str	r3, [r7, #28]
                break;
 800b554:	e08c      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b35      	cmp	r3, #53	@ 0x35
 800b55a:	d802      	bhi.n	800b562 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b55c:	2303      	movs	r3, #3
 800b55e:	61fb      	str	r3, [r7, #28]
                break;
 800b560:	e086      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	8a5b      	ldrh	r3, [r3, #18]
 800b566:	b29b      	uxth	r3, r3
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	b21a      	sxth	r2, r3
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	8a5b      	ldrh	r3, [r3, #18]
 800b570:	b29b      	uxth	r3, r3
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	b29b      	uxth	r3, r3
 800b576:	b21b      	sxth	r3, r3
 800b578:	4313      	orrs	r3, r2
 800b57a:	b21b      	sxth	r3, r3
 800b57c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800b57e:	89bb      	ldrh	r3, [r7, #12]
 800b580:	3336      	adds	r3, #54	@ 0x36
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	429a      	cmp	r2, r3
 800b586:	d002      	beq.n	800b58e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b588:	2304      	movs	r3, #4
 800b58a:	61fb      	str	r3, [r7, #28]
                break;
 800b58c:	e070      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	7d1b      	ldrb	r3, [r3, #20]
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800b596:	e015      	b.n	800b5c4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	3336      	adds	r3, #54	@ 0x36
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	4413      	add	r3, r2
 800b5a0:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	785b      	ldrb	r3, [r3, #1]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	00db      	lsls	r3, r3, #3
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	3336      	adds	r3, #54	@ 0x36
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d908      	bls.n	800b5d6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800b5c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f85f 	bl	800b68c <xIsExtHeader>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e1      	bne.n	800b598 <xCheckIPv6SizeFields+0x88>
 800b5d4:	e000      	b.n	800b5d8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b5d6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	3336      	adds	r3, #54	@ 0x36
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d802      	bhi.n	800b5e8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b5e2:	2307      	movs	r3, #7
 800b5e4:	61fb      	str	r3, [r7, #28]
                break;
 800b5e6:	e043      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b5e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5ec:	2b11      	cmp	r3, #17
 800b5ee:	d103      	bne.n	800b5f8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	333e      	adds	r3, #62	@ 0x3e
 800b5f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5f6:	e032      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b5f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5fc:	2b06      	cmp	r3, #6
 800b5fe:	d103      	bne.n	800b608 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	334a      	adds	r3, #74	@ 0x4a
 800b604:	627b      	str	r3, [r7, #36]	@ 0x24
 800b606:	e02a      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b608:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b60c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b60e:	d123      	bne.n	800b658 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	3336      	adds	r3, #54	@ 0x36
 800b614:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	4413      	add	r3, r2
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b620:	7afb      	ldrb	r3, [r7, #11]
 800b622:	2b80      	cmp	r3, #128	@ 0x80
 800b624:	d002      	beq.n	800b62c <xCheckIPv6SizeFields+0x11c>
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	2b81      	cmp	r3, #129	@ 0x81
 800b62a:	d103      	bne.n	800b634 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	3308      	adds	r3, #8
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24
 800b632:	e014      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b634:	7afb      	ldrb	r3, [r7, #11]
 800b636:	2b85      	cmp	r3, #133	@ 0x85
 800b638:	d103      	bne.n	800b642 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63c:	3308      	adds	r3, #8
 800b63e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b640:	e00d      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b642:	7afb      	ldrb	r3, [r7, #11]
 800b644:	2b86      	cmp	r3, #134	@ 0x86
 800b646:	d103      	bne.n	800b650 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	3310      	adds	r3, #16
 800b64c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b64e:	e006      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	3318      	adds	r3, #24
 800b654:	627b      	str	r3, [r7, #36]	@ 0x24
 800b656:	e002      	b.n	800b65e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b658:	2305      	movs	r3, #5
 800b65a:	61fb      	str	r3, [r7, #28]
                break;
 800b65c:	e008      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b662:	429a      	cmp	r2, r3
 800b664:	d202      	bcs.n	800b66c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b666:	2306      	movs	r3, #6
 800b668:	61fb      	str	r3, [r7, #28]
                break;
 800b66a:	e001      	b.n	800b670 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b66c:	2301      	movs	r3, #1
 800b66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b672:	2b01      	cmp	r3, #1
 800b674:	d003      	beq.n	800b67e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b676:	69f9      	ldr	r1, [r7, #28]
 800b678:	4803      	ldr	r0, [pc, #12]	@ (800b688 <xCheckIPv6SizeFields+0x178>)
 800b67a:	f017 f9cd 	bl	8022a18 <lUDPLoggingPrintf>
        }

        return xResult;
 800b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b680:	4618      	mov	r0, r3
 800b682:	3730      	adds	r7, #48	@ 0x30
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	080259d4 	.word	0x080259d4

0800b68c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b696:	2300      	movs	r3, #0
 800b698:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	2b87      	cmp	r3, #135	@ 0x87
 800b69e:	d016      	beq.n	800b6ce <xIsExtHeader+0x42>
 800b6a0:	2b87      	cmp	r3, #135	@ 0x87
 800b6a2:	dc16      	bgt.n	800b6d2 <xIsExtHeader+0x46>
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d012      	beq.n	800b6ce <xIsExtHeader+0x42>
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	db12      	blt.n	800b6d2 <xIsExtHeader+0x46>
 800b6ac:	2b3c      	cmp	r3, #60	@ 0x3c
 800b6ae:	dc10      	bgt.n	800b6d2 <xIsExtHeader+0x46>
 800b6b0:	2b2b      	cmp	r3, #43	@ 0x2b
 800b6b2:	db0e      	blt.n	800b6d2 <xIsExtHeader+0x46>
 800b6b4:	3b2b      	subs	r3, #43	@ 0x2b
 800b6b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b6e0 <xIsExtHeader+0x54>)
 800b6b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bf14      	ite	ne
 800b6c4:	2301      	movne	r3, #1
 800b6c6:	2300      	moveq	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
    }
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	00020183 	.word	0x00020183

0800b6e4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d104      	bne.n	800b6fe <xGetIPv6MulticastGroupID+0x1a>
 800b6f4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b6f8:	480e      	ldr	r0, [pc, #56]	@ (800b734 <xGetIPv6MulticastGroupID+0x50>)
 800b6fa:	f7f6 f9c7 	bl	8001a8c <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d104      	bne.n	800b70e <xGetIPv6MulticastGroupID+0x2a>
 800b704:	f240 1113 	movw	r1, #275	@ 0x113
 800b708:	480a      	ldr	r0, [pc, #40]	@ (800b734 <xGetIPv6MulticastGroupID+0x50>)
 800b70a:	f7f6 f9bf 	bl	8001a8c <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2200      	movs	r2, #0
 800b712:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	1c98      	adds	r0, r3, #2
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3302      	adds	r3, #2
 800b722:	220e      	movs	r2, #14
 800b724:	4619      	mov	r1, r3
 800b726:	f017 fb93 	bl	8022e50 <memcpy>
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	080259f8 	.word	0x080259f8

0800b738 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2210      	movs	r2, #16
 800b748:	4906      	ldr	r1, [pc, #24]	@ (800b764 <xIsIPv6Loopback+0x2c>)
 800b74a:	4618      	mov	r0, r3
 800b74c:	f018 fb43 	bl	8023dd6 <memcmp>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b756:	2301      	movs	r3, #1
 800b758:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b75a:	68fb      	ldr	r3, [r7, #12]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	08028254 	.word	0x08028254

0800b768 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b770:	2300      	movs	r3, #0
 800b772:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	2bff      	cmp	r3, #255	@ 0xff
 800b77a:	d123      	bne.n	800b7c4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b77c:	f107 030c 	add.w	r3, r7, #12
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff ffae 	bl	800b6e4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	f003 030f 	and.w	r3, r3, #15
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b794:	2300      	movs	r3, #0
 800b796:	61fb      	str	r3, [r7, #28]
 800b798:	e014      	b.n	800b7c4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	785b      	ldrb	r3, [r3, #1]
 800b79e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10c      	bne.n	800b7c0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b7a6:	f107 030c 	add.w	r3, r7, #12
 800b7aa:	2210      	movs	r2, #16
 800b7ac:	4908      	ldr	r1, [pc, #32]	@ (800b7d0 <xIsIPv6AllowedMulticast+0x68>)
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f018 fb11 	bl	8023dd6 <memcmp>
 800b7b4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61fb      	str	r3, [r7, #28]
 800b7be:	e001      	b.n	800b7c4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	08028244 	.word	0x08028244

0800b7d4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08a      	sub	sp, #40	@ 0x28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	2bff      	cmp	r3, #255	@ 0xff
 800b7e6:	d112      	bne.n	800b80e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d10e      	bne.n	800b80e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b7f4:	2bff      	cmp	r3, #255	@ 0xff
 800b7f6:	d10a      	bne.n	800b80e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f103 000d 	add.w	r0, r3, #13
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	330d      	adds	r3, #13
 800b802:	2203      	movs	r2, #3
 800b804:	4619      	mov	r1, r3
 800b806:	f018 fae6 	bl	8023dd6 <memcmp>
 800b80a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b80c:	e069      	b.n	800b8e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2210      	movs	r2, #16
 800b812:	4936      	ldr	r1, [pc, #216]	@ (800b8ec <xCompareIPv6_Address+0x118>)
 800b814:	4618      	mov	r0, r3
 800b816:	f018 fade 	bl	8023dd6 <memcmp>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
 800b824:	e05d      	b.n	800b8e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b82c:	d10e      	bne.n	800b84c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b832:	2b80      	cmp	r3, #128	@ 0x80
 800b834:	d10a      	bne.n	800b84c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b83a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b83c:	d106      	bne.n	800b84c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b842:	2b80      	cmp	r3, #128	@ 0x80
 800b844:	d102      	bne.n	800b84c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	627b      	str	r3, [r7, #36]	@ 0x24
 800b84a:	e04a      	b.n	800b8e2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b852:	2300      	movs	r3, #0
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
 800b856:	e044      	b.n	800b8e2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2b80      	cmp	r3, #128	@ 0x80
 800b85c:	d107      	bne.n	800b86e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68b9      	ldr	r1, [r7, #8]
 800b862:	2210      	movs	r2, #16
 800b864:	4618      	mov	r0, r3
 800b866:	f018 fab6 	bl	8023dd6 <memcmp>
 800b86a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b86c:	e039      	b.n	800b8e2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	08db      	lsrs	r3, r3, #3
 800b872:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b874:	2300      	movs	r3, #0
 800b876:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d006      	beq.n	800b88c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	6a3a      	ldr	r2, [r7, #32]
 800b884:	4618      	mov	r0, r3
 800b886:	f018 faa6 	bl	8023dd6 <memcmp>
 800b88a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d127      	bne.n	800b8e2 <xCompareIPv6_Address+0x10e>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f003 0307 	and.w	r3, r3, #7
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d022      	beq.n	800b8e2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	f1c3 0308 	rsb	r3, r3, #8
 800b8aa:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8b4:	3b01      	subs	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	43db      	mvns	r3, r3
 800b8be:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	6a3b      	ldr	r3, [r7, #32]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	781a      	ldrb	r2, [r3, #0]
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	6a3b      	ldr	r3, [r7, #32]
 800b8cc:	440b      	add	r3, r1
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	4053      	eors	r3, r2
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	7cfb      	ldrb	r3, [r7, #19]
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3728      	adds	r7, #40	@ 0x28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	08028264 	.word	0x08028264

0800b8f0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b900:	7dfb      	ldrb	r3, [r7, #23]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d10c      	bne.n	800b920 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7ff fdfd 	bl	800b510 <xCheckIPv6SizeFields>
 800b916:	4603      	mov	r3, r0
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d001      	beq.n	800b920 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b91c:	2300      	movs	r3, #0
 800b91e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
	...

0800b92c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	460a      	mov	r2, r1
 800b936:	71fb      	strb	r3, [r7, #7]
 800b938:	4613      	mov	r3, r2
 800b93a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b93c:	79fb      	ldrb	r3, [r7, #7]
 800b93e:	2b87      	cmp	r3, #135	@ 0x87
 800b940:	d04b      	beq.n	800b9da <xGetExtensionOrder+0xae>
 800b942:	2b87      	cmp	r3, #135	@ 0x87
 800b944:	dc4c      	bgt.n	800b9e0 <xGetExtensionOrder+0xb4>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d030      	beq.n	800b9ac <xGetExtensionOrder+0x80>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	db48      	blt.n	800b9e0 <xGetExtensionOrder+0xb4>
 800b94e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b950:	dc46      	bgt.n	800b9e0 <xGetExtensionOrder+0xb4>
 800b952:	2b2b      	cmp	r3, #43	@ 0x2b
 800b954:	db44      	blt.n	800b9e0 <xGetExtensionOrder+0xb4>
 800b956:	3b2b      	subs	r3, #43	@ 0x2b
 800b958:	2b11      	cmp	r3, #17
 800b95a:	d841      	bhi.n	800b9e0 <xGetExtensionOrder+0xb4>
 800b95c:	a201      	add	r2, pc, #4	@ (adr r2, 800b964 <xGetExtensionOrder+0x38>)
 800b95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b962:	bf00      	nop
 800b964:	0800b9c3 	.word	0x0800b9c3
 800b968:	0800b9c9 	.word	0x0800b9c9
 800b96c:	0800b9e1 	.word	0x0800b9e1
 800b970:	0800b9e1 	.word	0x0800b9e1
 800b974:	0800b9e1 	.word	0x0800b9e1
 800b978:	0800b9e1 	.word	0x0800b9e1
 800b97c:	0800b9e1 	.word	0x0800b9e1
 800b980:	0800b9d5 	.word	0x0800b9d5
 800b984:	0800b9cf 	.word	0x0800b9cf
 800b988:	0800b9e1 	.word	0x0800b9e1
 800b98c:	0800b9e1 	.word	0x0800b9e1
 800b990:	0800b9e1 	.word	0x0800b9e1
 800b994:	0800b9e1 	.word	0x0800b9e1
 800b998:	0800b9e1 	.word	0x0800b9e1
 800b99c:	0800b9e1 	.word	0x0800b9e1
 800b9a0:	0800b9e1 	.word	0x0800b9e1
 800b9a4:	0800b9e1 	.word	0x0800b9e1
 800b9a8:	0800b9b3 	.word	0x0800b9b3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]
            break;
 800b9b0:	e01b      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b9b2:	2307      	movs	r3, #7
 800b9b4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b9b6:	79bb      	ldrb	r3, [r7, #6]
 800b9b8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b9ba:	d115      	bne.n	800b9e8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b9c0:	e012      	b.n	800b9e8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	60fb      	str	r3, [r7, #12]
            break;
 800b9c6:	e010      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b9c8:	2304      	movs	r3, #4
 800b9ca:	60fb      	str	r3, [r7, #12]
            break;
 800b9cc:	e00d      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b9ce:	2305      	movs	r3, #5
 800b9d0:	60fb      	str	r3, [r7, #12]
            break;
 800b9d2:	e00a      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b9d4:	2306      	movs	r3, #6
 800b9d6:	60fb      	str	r3, [r7, #12]
            break;
 800b9d8:	e007      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b9da:	2308      	movs	r3, #8
 800b9dc:	60fb      	str	r3, [r7, #12]
            break;
 800b9de:	e004      	b.n	800b9ea <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e4:	60fb      	str	r3, [r7, #12]
            break;
 800b9e6:	e000      	b.n	800b9ea <xGetExtensionOrder+0xbe>
            break;
 800b9e8:	bf00      	nop
    }

    return xReturn;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08e      	sub	sp, #56	@ 0x38
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800ba02:	2300      	movs	r3, #0
 800ba04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba12:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2c:	f107 020b 	add.w	r2, r7, #11
 800ba30:	4619      	mov	r1, r3
 800ba32:	f000 faa5 	bl	800bf80 <usGetExtensionHeaderLength>
 800ba36:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	3336      	adds	r3, #54	@ 0x36
 800ba3c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800ba3e:	69ba      	ldr	r2, [r7, #24]
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d243      	bcs.n	800bace <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	8a5b      	ldrh	r3, [r3, #18]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b21a      	sxth	r2, r3
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	8a5b      	ldrh	r3, [r3, #18]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	0a1b      	lsrs	r3, r3, #8
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	b21b      	sxth	r3, r3
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	b21b      	sxth	r3, r3
 800ba60:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800ba62:	8afb      	ldrh	r3, [r7, #22]
 800ba64:	69fa      	ldr	r2, [r7, #28]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d231      	bcs.n	800bace <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d12e      	bne.n	800bace <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800ba70:	7afa      	ldrb	r2, [r7, #11]
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7a:	3336      	adds	r3, #54	@ 0x36
 800ba7c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	4413      	add	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800ba88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800ba90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba92:	68f9      	ldr	r1, [r7, #12]
 800ba94:	6938      	ldr	r0, [r7, #16]
 800ba96:	f018 f9ae 	bl	8023df6 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	1ad2      	subs	r2, r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	8afa      	ldrh	r2, [r7, #22]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800bab0:	8afb      	ldrh	r3, [r7, #22]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	b21a      	sxth	r2, r3
 800bab6:	8afb      	ldrh	r3, [r7, #22]
 800bab8:	0a1b      	lsrs	r3, r3, #8
 800baba:	b29b      	uxth	r3, r3
 800babc:	b21b      	sxth	r3, r3
 800babe:	4313      	orrs	r3, r2
 800bac0:	b21b      	sxth	r3, r3
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800bac8:	2301      	movs	r3, #1
 800baca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800bace:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d101      	bne.n	800bada <eHandleIPv6ExtensionHeaders+0xe2>
 800bad6:	4910      	ldr	r1, [pc, #64]	@ (800bb18 <eHandleIPv6ExtensionHeaders+0x120>)
 800bad8:	e000      	b.n	800badc <eHandleIPv6ExtensionHeaders+0xe4>
 800bada:	4910      	ldr	r1, [pc, #64]	@ (800bb1c <eHandleIPv6ExtensionHeaders+0x124>)
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	8a5b      	ldrh	r3, [r3, #18]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	021b      	lsls	r3, r3, #8
 800bae4:	b21a      	sxth	r2, r3
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	8a5b      	ldrh	r3, [r3, #18]
 800baea:	b29b      	uxth	r3, r3
 800baec:	0a1b      	lsrs	r3, r3, #8
 800baee:	b29b      	uxth	r3, r3
 800baf0:	b21b      	sxth	r3, r3
 800baf2:	4313      	orrs	r3, r2
 800baf4:	b21b      	sxth	r3, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	9200      	str	r2, [sp, #0]
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb06:	4806      	ldr	r0, [pc, #24]	@ (800bb20 <eHandleIPv6ExtensionHeaders+0x128>)
 800bb08:	f016 ff86 	bl	8022a18 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800bb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3730      	adds	r7, #48	@ 0x30
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	08025a28 	.word	0x08025a28
 800bb1c:	08025a30 	.word	0x08025a30
 800bb20:	08025a34 	.word	0x08025a34

0800bb24 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d026      	beq.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d023      	beq.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7a1b      	ldrb	r3, [r3, #8]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d010      	beq.n	800bb6e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d018      	beq.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3354      	adds	r3, #84	@ 0x54
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	2210      	movs	r2, #16
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f018 f93a 	bl	8023dd6 <memcmp>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10e      	bne.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e00b      	b.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d107      	bne.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d101      	bne.n	800bb86 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800bb86:	68fb      	ldr	r3, [r7, #12]
    }
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d103      	bne.n	800bbb4 <xSend_UDP_Update_IPv6+0x24>
 800bbac:	2173      	movs	r1, #115	@ 0x73
 800bbae:	4811      	ldr	r0, [pc, #68]	@ (800bbf4 <xSend_UDP_Update_IPv6+0x64>)
 800bbb0:	f7f5 ff6c 	bl	8001a8c <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	2210      	movs	r2, #16
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	f017 f945 	bl	8022e50 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f103 0014 	add.w	r0, r3, #20
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	3308      	adds	r3, #8
 800bbd0:	2210      	movs	r2, #16
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	f017 f93c 	bl	8022e50 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bbe0:	731a      	strb	r2, [r3, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bbe8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	08025a8c 	.word	0x08025a8c

0800bbf8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800bc02:	2330      	movs	r3, #48	@ 0x30
 800bc04:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800bc06:	88fb      	ldrh	r3, [r7, #6]
 800bc08:	2b09      	cmp	r3, #9
 800bc0a:	d805      	bhi.n	800bc18 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800bc0c:	88fb      	ldrh	r3, [r7, #6]
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4413      	add	r3, r2
 800bc14:	73fb      	strb	r3, [r7, #15]
 800bc16:	e010      	b.n	800bc3a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800bc18:	88fb      	ldrh	r3, [r7, #6]
 800bc1a:	2b0f      	cmp	r3, #15
 800bc1c:	d809      	bhi.n	800bc32 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800bc1e:	2361      	movs	r3, #97	@ 0x61
 800bc20:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800bc22:	88fb      	ldrh	r3, [r7, #6]
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	4413      	add	r3, r2
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	3b0a      	subs	r3, #10
 800bc2e:	73fb      	strb	r3, [r7, #15]
 800bc30:	e003      	b.n	800bc3a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800bc32:	21b3      	movs	r1, #179	@ 0xb3
 800bc34:	4803      	ldr	r0, [pc, #12]	@ (800bc44 <cHexToChar+0x4c>)
 800bc36:	f7f5 ff29 	bl	8001a8c <vAssertCalled>
    }

    return cReturn;
 800bc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	08025a8c 	.word	0x08025a8c

0800bc48 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800bc48:	b590      	push	{r4, r7, lr}
 800bc4a:	b08b      	sub	sp, #44	@ 0x2c
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4613      	mov	r3, r2
 800bc54:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800bc56:	2304      	movs	r3, #4
 800bc58:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800bc5e:	88fb      	ldrh	r3, [r7, #6]
 800bc60:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bc66:	2300      	movs	r3, #0
 800bc68:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc6a:	e026      	b.n	800bcba <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800bc6c:	8bfb      	ldrh	r3, [r7, #30]
 800bc6e:	0b1b      	lsrs	r3, r3, #12
 800bc70:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800bc72:	8a7b      	ldrh	r3, [r7, #18]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d104      	bne.n	800bc8c <uxHexPrintShort+0x44>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d110      	bne.n	800bcae <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	6a3a      	ldr	r2, [r7, #32]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d216      	bcs.n	800bcc4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800bc96:	68fa      	ldr	r2, [r7, #12]
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	18d4      	adds	r4, r2, r3
 800bc9c:	8a7b      	ldrh	r3, [r7, #18]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff ffaa 	bl	800bbf8 <cHexToChar>
 800bca4:	4603      	mov	r3, r0
 800bca6:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800bca8:	6a3b      	ldr	r3, [r7, #32]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800bcae:	8bfb      	ldrh	r3, [r7, #30]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d3d4      	bcc.n	800bc6c <uxHexPrintShort+0x24>
 800bcc2:	e000      	b.n	800bcc6 <uxHexPrintShort+0x7e>
                break;
 800bcc4:	bf00      	nop
    }

    return uxIndex;
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	372c      	adds	r7, #44	@ 0x2c
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd90      	pop	{r4, r7, pc}

0800bcd0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b089      	sub	sp, #36	@ 0x24
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800bcdc:	2300      	movs	r3, #0
 800bcde:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800bce0:	2300      	movs	r3, #0
 800bce2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bce4:	2308      	movs	r3, #8
 800bce6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f04f 32ff 	mov.w	r2, #4294967295
 800bcee:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800bcf0:	e02c      	b.n	800bd4c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	881b      	ldrh	r3, [r3, #0]
 800bcfe:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800bd00:	89fb      	ldrh	r3, [r7, #14]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d107      	bne.n	800bd16 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d101      	bne.n	800bd10 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	3301      	adds	r3, #1
 800bd14:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800bd16:	89fb      	ldrh	r3, [r7, #14]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d104      	bne.n	800bd26 <prv_ntop6_search_zeros+0x56>
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d10f      	bne.n	800bd46 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	dd0a      	ble.n	800bd42 <prv_ntop6_search_zeros+0x72>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	dd05      	ble.n	800bd42 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	69fa      	ldr	r2, [r7, #28]
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	dbce      	blt.n	800bcf2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800bd54:	bf00      	nop
 800bd56:	bf00      	nop
 800bd58:	3724      	adds	r7, #36	@ 0x24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr

0800bd62 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bd62:	b480      	push	{r7}
 800bd64:	b087      	sub	sp, #28
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	60f8      	str	r0, [r7, #12]
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bd72:	2308      	movs	r3, #8
 800bd74:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d827      	bhi.n	800bdd2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4413      	add	r3, r2
 800bd8a:	223a      	movs	r2, #58	@ 0x3a
 800bd8c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68da      	ldr	r2, [r3, #12]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	4413      	add	r3, r2
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d116      	bne.n	800bdd6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d80b      	bhi.n	800bdcc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	68fa      	ldr	r2, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	223a      	movs	r2, #58	@ 0x3a
 800bdbe:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	1c5a      	adds	r2, r3, #1
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	611a      	str	r2, [r3, #16]
 800bdca:	e004      	b.n	800bdd6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	617b      	str	r3, [r7, #20]
 800bdd0:	e001      	b.n	800bdd6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bdd6:	697b      	ldr	r3, [r7, #20]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	371c      	adds	r7, #28
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bde4:	b590      	push	{r4, r7, lr}
 800bde6:	b089      	sub	sp, #36	@ 0x24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	dd13      	ble.n	800be28 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	691a      	ldr	r2, [r3, #16]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3b01      	subs	r3, #1
 800be08:	429a      	cmp	r2, r3
 800be0a:	d302      	bcc.n	800be12 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800be0c:	2300      	movs	r3, #0
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	e00a      	b.n	800be28 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	223a      	movs	r2, #58	@ 0x3a
 800be1c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	1c5a      	adds	r2, r3, #1
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d130      	bne.n	800be90 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	691a      	ldr	r2, [r3, #16]
 800be32:	68b9      	ldr	r1, [r7, #8]
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	1acb      	subs	r3, r1, r3
 800be38:	429a      	cmp	r2, r3
 800be3a:	d827      	bhi.n	800be8c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	18d0      	adds	r0, r2, r3
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	4413      	add	r3, r2
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	021b      	lsls	r3, r3, #8
 800be58:	b21a      	sxth	r2, r3
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6819      	ldr	r1, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	005b      	lsls	r3, r3, #1
 800be64:	440b      	add	r3, r1
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	0a1b      	lsrs	r3, r3, #8
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	b21b      	sxth	r3, r3
 800be6e:	4313      	orrs	r3, r2
 800be70:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800be72:	b29b      	uxth	r3, r3
 800be74:	461a      	mov	r2, r3
 800be76:	4621      	mov	r1, r4
 800be78:	f7ff fee6 	bl	800bc48 <uxHexPrintShort>
 800be7c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	441a      	add	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	611a      	str	r2, [r3, #16]
 800be8a:	e001      	b.n	800be90 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800be8c:	2300      	movs	r3, #0
 800be8e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800be90:	69fb      	ldr	r3, [r7, #28]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3724      	adds	r7, #36	@ 0x24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd90      	pop	{r4, r7, pc}

0800be9a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b08a      	sub	sp, #40	@ 0x28
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800bea6:	f107 0310 	add.w	r3, r7, #16
 800beaa:	2214      	movs	r2, #20
 800beac:	2100      	movs	r1, #0
 800beae:	4618      	mov	r0, r3
 800beb0:	f017 f8db 	bl	802306a <memset>

    xSet.pusAddress = pvSource;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d92c      	bls.n	800bf18 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800bebe:	f107 0310 	add.w	r3, r7, #16
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7ff ff04 	bl	800bcd0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800bec8:	e01f      	b.n	800bf0a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d10e      	bne.n	800bef0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bed2:	f107 0310 	add.w	r3, r7, #16
 800bed6:	461a      	mov	r2, r3
 800bed8:	6879      	ldr	r1, [r7, #4]
 800beda:	68b8      	ldr	r0, [r7, #8]
 800bedc:	f7ff ff41 	bl	800bd62 <prv_ntop6_write_zeros>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d015      	beq.n	800bf12 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	4413      	add	r3, r2
 800beec:	61fb      	str	r3, [r7, #28]
 800beee:	e00c      	b.n	800bf0a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bef0:	f107 0310 	add.w	r3, r7, #16
 800bef4:	461a      	mov	r2, r3
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	68b8      	ldr	r0, [r7, #8]
 800befa:	f7ff ff73 	bl	800bde4 <prv_ntop6_write_short>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d008      	beq.n	800bf16 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	3301      	adds	r3, #1
 800bf08:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b07      	cmp	r3, #7
 800bf0e:	dddc      	ble.n	800beca <FreeRTOS_inet_ntop6+0x30>
 800bf10:	e002      	b.n	800bf18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bf12:	bf00      	nop
 800bf14:	e000      	b.n	800bf18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bf16:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b07      	cmp	r3, #7
 800bf1c:	dc02      	bgt.n	800bf24 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf22:	e006      	b.n	800bf32 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	4413      	add	r3, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	@ 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2233      	movs	r2, #51	@ 0x33
 800bf4a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	2233      	movs	r2, #51	@ 0x33
 800bf50:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	7b1a      	ldrb	r2, [r3, #12]
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7b5a      	ldrb	r2, [r3, #13]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7b9a      	ldrb	r2, [r3, #14]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	7bda      	ldrb	r2, [r3, #15]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	715a      	strb	r2, [r3, #5]
}
 800bf72:	bf00      	nop
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
	...

0800bf80 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b08e      	sub	sp, #56	@ 0x38
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800bf92:	2336      	movs	r3, #54	@ 0x36
 800bf94:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 808c 	beq.w	800c0c6 <usGetExtensionHeaderLength+0x146>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 8088 	beq.w	800c0c6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	7d1b      	ldrb	r3, [r3, #20]
 800bfbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800bfc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7ff fcaf 	bl	800b92c <xGetExtensionOrder>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dd72      	ble.n	800c0ba <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bfd4:	e06b      	b.n	800c0ae <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfda:	4413      	add	r3, r2
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800bfe2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bfe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fc9d 	bl	800b92c <xGetExtensionOrder>
 800bff2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff6:	3301      	adds	r3, #1
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	4413      	add	r3, r2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	3301      	adds	r3, #1
 800c004:	00db      	lsls	r3, r3, #3
 800c006:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800c008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	4413      	add	r3, r2
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	429a      	cmp	r2, r3
 800c012:	d806      	bhi.n	800c022 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	69fa      	ldr	r2, [r7, #28]
 800c018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c01a:	482d      	ldr	r0, [pc, #180]	@ (800c0d0 <usGetExtensionHeaderLength+0x150>)
 800c01c:	f016 fcfc 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800c020:	e051      	b.n	800c0c6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800c022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	4413      	add	r3, r2
 800c028:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800c02a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c02e:	2b06      	cmp	r3, #6
 800c030:	d007      	beq.n	800c042 <usGetExtensionHeaderLength+0xc2>
 800c032:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c036:	2b11      	cmp	r3, #17
 800c038:	d003      	beq.n	800c042 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800c03a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c03e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c040:	d10d      	bne.n	800c05e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800c042:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c046:	4619      	mov	r1, r3
 800c048:	4822      	ldr	r0, [pc, #136]	@ (800c0d4 <usGetExtensionHeaderLength+0x154>)
 800c04a:	f016 fce5 	bl	8022a18 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800c04e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c050:	3b36      	subs	r3, #54	@ 0x36
 800c052:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c05a:	701a      	strb	r2, [r3, #0]
                    break;
 800c05c:	e033      	b.n	800c0c6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c062:	4413      	add	r3, r2
 800c064:	781a      	ldrb	r2, [r3, #0]
 800c066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c06a:	4611      	mov	r1, r2
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7ff fc5d 	bl	800b92c <xGetExtensionOrder>
 800c072:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800c074:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800c078:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4613      	mov	r3, r2
 800c082:	69ba      	ldr	r2, [r7, #24]
 800c084:	4814      	ldr	r0, [pc, #80]	@ (800c0d8 <usGetExtensionHeaderLength+0x158>)
 800c086:	f016 fcc7 	bl	8022a18 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d103      	bne.n	800c098 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800c090:	4812      	ldr	r0, [pc, #72]	@ (800c0dc <usGetExtensionHeaderLength+0x15c>)
 800c092:	f016 fcc1 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800c096:	e016      	b.n	800c0c6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	da03      	bge.n	800c0a6 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800c09e:	4810      	ldr	r0, [pc, #64]	@ (800c0e0 <usGetExtensionHeaderLength+0x160>)
 800c0a0:	f016 fcba 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800c0a4:	e00f      	b.n	800c0c6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800c0a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800c0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d88e      	bhi.n	800bfd6 <usGetExtensionHeaderLength+0x56>
 800c0b8:	e005      	b.n	800c0c6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c0c0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3730      	adds	r7, #48	@ 0x30
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	08025ad4 	.word	0x08025ad4
 800c0d4:	08025b1c 	.word	0x08025b1c
 800c0d8:	08025b30 	.word	0x08025b30
 800c0dc:	08025b58 	.word	0x08025b58
 800c0e0:	08025bb8 	.word	0x08025bb8

0800c0e4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d104      	bne.n	800c0fe <vManageSolicitedNodeAddress+0x1a>
 800c0f4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800c0f8:	482d      	ldr	r0, [pc, #180]	@ (800c1b0 <vManageSolicitedNodeAddress+0xcc>)
 800c0fa:	f7f5 fcc7 	bl	8001a8c <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c104:	2b00      	cmp	r3, #0
 800c106:	d104      	bne.n	800c112 <vManageSolicitedNodeAddress+0x2e>
 800c108:	f240 1133 	movw	r1, #307	@ 0x133
 800c10c:	4828      	ldr	r0, [pc, #160]	@ (800c1b0 <vManageSolicitedNodeAddress+0xcc>)
 800c10e:	f7f5 fcbd 	bl	8001a8c <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3338      	adds	r3, #56	@ 0x38
 800c116:	4618      	mov	r0, r3
 800c118:	f002 f9c2 	bl	800e4a0 <xIPv6_GetIPType>
 800c11c:	4603      	mov	r3, r0
 800c11e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d005      	beq.n	800c132 <vManageSolicitedNodeAddress+0x4e>
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d002      	beq.n	800c132 <vManageSolicitedNodeAddress+0x4e>
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d138      	bne.n	800c1a4 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800c132:	2333      	movs	r3, #51	@ 0x33
 800c134:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800c136:	2333      	movs	r3, #51	@ 0x33
 800c138:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800c13a:	23ff      	movs	r3, #255	@ 0xff
 800c13c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c144:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c14c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800c154:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d111      	bne.n	800c180 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c162:	695b      	ldr	r3, [r3, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d01e      	beq.n	800c1a6 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800c176:	f107 0108 	add.w	r1, r7, #8
 800c17a:	4610      	mov	r0, r2
 800c17c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800c17e:	e012      	b.n	800c1a6 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c186:	699b      	ldr	r3, [r3, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00c      	beq.n	800c1a6 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800c19a:	f107 0108 	add.w	r1, r7, #8
 800c19e:	4610      	mov	r0, r2
 800c1a0:	4798      	blx	r3
}
 800c1a2:	e000      	b.n	800c1a6 <vManageSolicitedNodeAddress+0xc2>
            break;
 800c1a4:	bf00      	nop
}
 800c1a6:	bf00      	nop
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	08025bdc 	.word	0x08025bdc

0800c1b4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	f001 fd8c 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	e016      	b.n	800c1f2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d009      	beq.n	800c1e8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3338      	adds	r3, #56	@ 0x38
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f002 f961 	bl	800e4a0 <xIPv6_GetIPType>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d008      	beq.n	800c1fa <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f001 fd96 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800c1f0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1e5      	bne.n	800c1c4 <pxFindLocalEndpoint+0x10>
 800c1f8:	e000      	b.n	800c1fc <pxFindLocalEndpoint+0x48>
                {
                    break;
 800c1fa:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800c1fc:	687b      	ldr	r3, [r7, #4]
    }
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800c206:	b580      	push	{r7, lr}
 800c208:	b086      	sub	sp, #24
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff faa8 	bl	800b768 <xIsIPv6AllowedMulticast>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00e      	beq.n	800c23c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7ff fe8b 	bl	800bf3c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800c22c:	f7ff ffc2 	bl	800c1b4 <pxFindLocalEndpoint>
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800c236:	2301      	movs	r3, #1
 800c238:	75fb      	strb	r3, [r7, #23]
 800c23a:	e001      	b.n	800c240 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800c23c:	2300      	movs	r3, #0
 800c23e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
    }
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68b9      	ldr	r1, [r7, #8]
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f7ff ffd2 	bl	800c206 <prvMACResolve>
 800c262:	4603      	mov	r3, r0
 800c264:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800c266:	7ffb      	ldrb	r3, [r7, #31]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 f9a9 	bl	800c5c8 <prvNDCacheLookup>
 800c276:	4603      	mov	r3, r0
 800c278:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800c27a:	7ffb      	ldrb	r3, [r7, #31]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d104      	bne.n	800c28a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4619      	mov	r1, r3
 800c284:	4840      	ldr	r0, [pc, #256]	@ (800c388 <eNDGetCacheEntry+0x13c>)
 800c286:	f016 fbc7 	bl	8022a18 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800c28a:	7ffb      	ldrb	r3, [r7, #31]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d176      	bne.n	800c37e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	f002 f905 	bl	800e4a0 <xIPv6_GetIPType>
 800c296:	4603      	mov	r3, r0
 800c298:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f001 fdae 	bl	800ddfc <FreeRTOS_FindEndPointOnIP_IPv6>
 800c2a0:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d00d      	beq.n	800c2c4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800c2b4:	68f9      	ldr	r1, [r7, #12]
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	3338      	adds	r3, #56	@ 0x38
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	4833      	ldr	r0, [pc, #204]	@ (800c38c <eNDGetCacheEntry+0x140>)
 800c2be:	f016 fbab 	bl	8022a18 <lUDPLoggingPrintf>
 800c2c2:	e05c      	b.n	800c37e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d12b      	bne.n	800c322 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	f001 fd04 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800c2d0:	61b8      	str	r0, [r7, #24]
 800c2d2:	e017      	b.n	800c304 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	3338      	adds	r3, #56	@ 0x38
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f002 f8e1 	bl	800e4a0 <xIPv6_GetIPType>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800c2e2:	7dba      	ldrb	r2, [r7, #22]
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d107      	bne.n	800c2fa <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	68b9      	ldr	r1, [r7, #8]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f96a 	bl	800c5c8 <prvNDCacheLookup>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	77fb      	strb	r3, [r7, #31]
                            break;
 800c2f8:	e007      	b.n	800c30a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c2fa:	69b9      	ldr	r1, [r7, #24]
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f001 fd0d 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800c302:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e4      	bne.n	800c2d4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	7ffb      	ldrb	r3, [r7, #31]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d101      	bne.n	800c316 <eNDGetCacheEntry+0xca>
 800c312:	4b1f      	ldr	r3, [pc, #124]	@ (800c390 <eNDGetCacheEntry+0x144>)
 800c314:	e000      	b.n	800c318 <eNDGetCacheEntry+0xcc>
 800c316:	4b1f      	ldr	r3, [pc, #124]	@ (800c394 <eNDGetCacheEntry+0x148>)
 800c318:	461a      	mov	r2, r3
 800c31a:	481f      	ldr	r0, [pc, #124]	@ (800c398 <eNDGetCacheEntry+0x14c>)
 800c31c:	f016 fb7c 	bl	8022a18 <lUDPLoggingPrintf>
 800c320:	e02d      	b.n	800c37e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800c322:	2060      	movs	r0, #96	@ 0x60
 800c324:	f002 f87c 	bl	800e420 <FreeRTOS_FindGateWay>
 800c328:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d026      	beq.n	800c37e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	335c      	adds	r3, #92	@ 0x5c
 800c336:	2210      	movs	r2, #16
 800c338:	4619      	mov	r1, r3
 800c33a:	f016 fd89 	bl	8022e50 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	4619      	mov	r1, r3
 800c342:	4816      	ldr	r0, [pc, #88]	@ (800c39c <eNDGetCacheEntry+0x150>)
 800c344:	f016 fb68 	bl	8022a18 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	3338      	adds	r3, #56	@ 0x38
 800c34c:	4619      	mov	r1, r3
 800c34e:	4814      	ldr	r0, [pc, #80]	@ (800c3a0 <eNDGetCacheEntry+0x154>)
 800c350:	f016 fb62 	bl	8022a18 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 f935 	bl	800c5c8 <prvNDCacheLookup>
 800c35e:	4603      	mov	r3, r0
 800c360:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d006      	beq.n	800c378 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3338      	adds	r3, #56	@ 0x38
 800c370:	4619      	mov	r1, r3
 800c372:	480c      	ldr	r0, [pc, #48]	@ (800c3a4 <eNDGetCacheEntry+0x158>)
 800c374:	f016 fb50 	bl	8022a18 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800c37e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800c380:	4618      	mov	r0, r3
 800c382:	3720      	adds	r7, #32
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	08025c10 	.word	0x08025c10
 800c38c:	08025c34 	.word	0x08025c34
 800c390:	08025c78 	.word	0x08025c78
 800c394:	08025c7c 	.word	0x08025c7c
 800c398:	08025c84 	.word	0x08025c84
 800c39c:	08025cac 	.word	0x08025cac
 800c3a0:	08025cd0 	.word	0x08025cd0
 800c3a4:	08025cf4 	.word	0x08025cf4

0800c3a8 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800c3a8:	b5b0      	push	{r4, r5, r7, lr}
 800c3aa:	b08e      	sub	sp, #56	@ 0x38
 800c3ac:	af04      	add	r7, sp, #16
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800c3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3b8:	623b      	str	r3, [r7, #32]
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c3be:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800c3c0:	2397      	movs	r3, #151	@ 0x97
 800c3c2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3cc:	e033      	b.n	800c436 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c3ce:	4a44      	ldr	r2, [pc, #272]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d2:	015b      	lsls	r3, r3, #5
 800c3d4:	4413      	add	r3, r2
 800c3d6:	331d      	adds	r3, #29
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d106      	bne.n	800c3ec <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800c3de:	6a3b      	ldr	r3, [r7, #32]
 800c3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3e4:	d124      	bne.n	800c430 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	623b      	str	r3, [r7, #32]
 800c3ea:	e021      	b.n	800c430 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ee:	015b      	lsls	r3, r3, #5
 800c3f0:	4a3b      	ldr	r2, [pc, #236]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c3f2:	4413      	add	r3, r2
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f017 fcec 	bl	8023dd6 <memcmp>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d102      	bne.n	800c40a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800c404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c406:	61fb      	str	r3, [r7, #28]
                break;
 800c408:	e018      	b.n	800c43c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800c40a:	4a35      	ldr	r2, [pc, #212]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	015b      	lsls	r3, r3, #5
 800c410:	4413      	add	r3, r2
 800c412:	331c      	adds	r3, #28
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	8b7b      	ldrh	r3, [r7, #26]
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d908      	bls.n	800c430 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800c41e:	4a30      	ldr	r2, [pc, #192]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c422:	015b      	lsls	r3, r3, #5
 800c424:	4413      	add	r3, r2
 800c426:	331c      	adds	r3, #28
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800c42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c432:	3301      	adds	r3, #1
 800c434:	627b      	str	r3, [r7, #36]	@ 0x24
 800c436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c438:	2b17      	cmp	r3, #23
 800c43a:	ddc8      	ble.n	800c3ce <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	da22      	bge.n	800c488 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	2b00      	cmp	r3, #0
 800c446:	db02      	blt.n	800c44e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	61fb      	str	r3, [r7, #28]
 800c44c:	e01c      	b.n	800c488 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	461c      	mov	r4, r3
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	785b      	ldrb	r3, [r3, #1]
 800c45c:	461d      	mov	r5, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	789b      	ldrb	r3, [r3, #2]
 800c462:	461a      	mov	r2, r3
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	78db      	ldrb	r3, [r3, #3]
 800c468:	4619      	mov	r1, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	4618      	mov	r0, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	795b      	ldrb	r3, [r3, #5]
 800c474:	9303      	str	r3, [sp, #12]
 800c476:	9002      	str	r0, [sp, #8]
 800c478:	9101      	str	r1, [sp, #4]
 800c47a:	9200      	str	r2, [sp, #0]
 800c47c:	462b      	mov	r3, r5
 800c47e:	4622      	mov	r2, r4
 800c480:	69f9      	ldr	r1, [r7, #28]
 800c482:	4818      	ldr	r0, [pc, #96]	@ (800c4e4 <vNDRefreshCacheEntry+0x13c>)
 800c484:	f016 fac8 	bl	8022a18 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	015b      	lsls	r3, r3, #5
 800c48c:	4a14      	ldr	r2, [pc, #80]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c48e:	4413      	add	r3, r2
 800c490:	68b9      	ldr	r1, [r7, #8]
 800c492:	2210      	movs	r2, #16
 800c494:	4618      	mov	r0, r3
 800c496:	f016 fcdb 	bl	8022e50 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	015b      	lsls	r3, r3, #5
 800c49e:	3310      	adds	r3, #16
 800c4a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c4a2:	4413      	add	r3, r2
 800c4a4:	68f9      	ldr	r1, [r7, #12]
 800c4a6:	2206      	movs	r2, #6
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f016 fcd1 	bl	8022e50 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800c4ae:	4a0c      	ldr	r2, [pc, #48]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	015b      	lsls	r3, r3, #5
 800c4b4:	4413      	add	r3, r2
 800c4b6:	3318      	adds	r3, #24
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800c4bc:	4a08      	ldr	r2, [pc, #32]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	015b      	lsls	r3, r3, #5
 800c4c2:	4413      	add	r3, r2
 800c4c4:	331c      	adds	r3, #28
 800c4c6:	2296      	movs	r2, #150	@ 0x96
 800c4c8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800c4ca:	4a05      	ldr	r2, [pc, #20]	@ (800c4e0 <vNDRefreshCacheEntry+0x138>)
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	015b      	lsls	r3, r3, #5
 800c4d0:	4413      	add	r3, r2
 800c4d2:	331d      	adds	r3, #29
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
    }
 800c4d8:	bf00      	nop
 800c4da:	3728      	adds	r7, #40	@ 0x28
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bdb0      	pop	{r4, r5, r7, pc}
 800c4e0:	20001240 	.word	0x20001240
 800c4e4:	08025d1c 	.word	0x08025d1c

0800c4e8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	e05f      	b.n	800c5b4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800c4f8:	4a32      	ldr	r2, [pc, #200]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	015b      	lsls	r3, r3, #5
 800c4fe:	4413      	add	r3, r2
 800c500:	331c      	adds	r3, #28
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d052      	beq.n	800c5ae <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800c508:	4a2e      	ldr	r2, [pc, #184]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	015b      	lsls	r3, r3, #5
 800c50e:	4413      	add	r3, r2
 800c510:	331c      	adds	r3, #28
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	3b01      	subs	r3, #1
 800c516:	b2d9      	uxtb	r1, r3
 800c518:	4a2a      	ldr	r2, [pc, #168]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	015b      	lsls	r3, r3, #5
 800c51e:	4413      	add	r3, r2
 800c520:	331c      	adds	r3, #28
 800c522:	460a      	mov	r2, r1
 800c524:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800c526:	4a27      	ldr	r2, [pc, #156]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	015b      	lsls	r3, r3, #5
 800c52c:	4413      	add	r3, r2
 800c52e:	331c      	adds	r3, #28
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d109      	bne.n	800c54a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	015b      	lsls	r3, r3, #5
 800c53a:	4a22      	ldr	r2, [pc, #136]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c53c:	4413      	add	r3, r2
 800c53e:	2220      	movs	r2, #32
 800c540:	2100      	movs	r1, #0
 800c542:	4618      	mov	r0, r3
 800c544:	f016 fd91 	bl	802306a <memset>
 800c548:	e031      	b.n	800c5ae <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c54a:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	015b      	lsls	r3, r3, #5
 800c550:	4413      	add	r3, r2
 800c552:	331d      	adds	r3, #29
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d102      	bne.n	800c560 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800c55a:	2301      	movs	r3, #1
 800c55c:	60bb      	str	r3, [r7, #8]
 800c55e:	e009      	b.n	800c574 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800c560:	4a18      	ldr	r2, [pc, #96]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	015b      	lsls	r3, r3, #5
 800c566:	4413      	add	r3, r2
 800c568:	331c      	adds	r3, #28
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b03      	cmp	r3, #3
 800c56e:	d801      	bhi.n	800c574 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d019      	beq.n	800c5ae <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c57a:	2356      	movs	r3, #86	@ 0x56
 800c57c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800c57e:	2100      	movs	r1, #0
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f00b fad7 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800c586:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00f      	beq.n	800c5ae <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800c58e:	4a0d      	ldr	r2, [pc, #52]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	015b      	lsls	r3, r3, #5
 800c594:	4413      	add	r3, r2
 800c596:	3318      	adds	r3, #24
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	015b      	lsls	r3, r3, #5
 800c5a2:	4a08      	ldr	r2, [pc, #32]	@ (800c5c4 <vNDAgeCache+0xdc>)
 800c5a4:	4413      	add	r3, r2
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6838      	ldr	r0, [r7, #0]
 800c5aa:	f000 f8bb 	bl	800c724 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b17      	cmp	r3, #23
 800c5b8:	dd9c      	ble.n	800c4f4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800c5ba:	bf00      	nop
 800c5bc:	bf00      	nop
 800c5be:	3710      	adds	r7, #16
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20001240 	.word	0x20001240

0800c5c8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800c5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ca:	b08d      	sub	sp, #52	@ 0x34
 800c5cc:	af06      	add	r7, sp, #24
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]
 800c5dc:	e04a      	b.n	800c674 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c5de:	4a30      	ldr	r2, [pc, #192]	@ (800c6a0 <prvNDCacheLookup+0xd8>)
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	015b      	lsls	r3, r3, #5
 800c5e4:	4413      	add	r3, r2
 800c5e6:	331d      	adds	r3, #29
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d03f      	beq.n	800c66e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	015b      	lsls	r3, r3, #5
 800c5f2:	4a2b      	ldr	r2, [pc, #172]	@ (800c6a0 <prvNDCacheLookup+0xd8>)
 800c5f4:	4413      	add	r3, r2
 800c5f6:	68f9      	ldr	r1, [r7, #12]
 800c5f8:	2210      	movs	r2, #16
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f017 fbeb 	bl	8023dd6 <memcmp>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d133      	bne.n	800c66e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c606:	68b8      	ldr	r0, [r7, #8]
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	015b      	lsls	r3, r3, #5
 800c60c:	3310      	adds	r3, #16
 800c60e:	4a24      	ldr	r2, [pc, #144]	@ (800c6a0 <prvNDCacheLookup+0xd8>)
 800c610:	4413      	add	r3, r2
 800c612:	2206      	movs	r2, #6
 800c614:	4619      	mov	r1, r3
 800c616:	f016 fc1b 	bl	8022e50 <memcpy>
                eReturn = eARPCacheHit;
 800c61a:	2301      	movs	r3, #1
 800c61c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d007      	beq.n	800c634 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c624:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a0 <prvNDCacheLookup+0xd8>)
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	015b      	lsls	r3, r3, #5
 800c62a:	4413      	add	r3, r2
 800c62c:	3318      	adds	r3, #24
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c634:	68fa      	ldr	r2, [r7, #12]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	461e      	mov	r6, r3
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	785b      	ldrb	r3, [r3, #1]
 800c640:	4619      	mov	r1, r3
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	789b      	ldrb	r3, [r3, #2]
 800c646:	4618      	mov	r0, r3
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	78db      	ldrb	r3, [r3, #3]
 800c64c:	461c      	mov	r4, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	791b      	ldrb	r3, [r3, #4]
 800c652:	461d      	mov	r5, r3
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	795b      	ldrb	r3, [r3, #5]
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	9503      	str	r5, [sp, #12]
 800c65c:	9402      	str	r4, [sp, #8]
 800c65e:	9001      	str	r0, [sp, #4]
 800c660:	9100      	str	r1, [sp, #0]
 800c662:	4633      	mov	r3, r6
 800c664:	6979      	ldr	r1, [r7, #20]
 800c666:	480f      	ldr	r0, [pc, #60]	@ (800c6a4 <prvNDCacheLookup+0xdc>)
 800c668:	f016 f9d6 	bl	8022a18 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c66c:	e005      	b.n	800c67a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	3301      	adds	r3, #1
 800c672:	617b      	str	r3, [r7, #20]
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2b17      	cmp	r3, #23
 800c678:	ddb1      	ble.n	800c5de <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c67a:	7cfb      	ldrb	r3, [r7, #19]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4619      	mov	r1, r3
 800c684:	4808      	ldr	r0, [pc, #32]	@ (800c6a8 <prvNDCacheLookup+0xe0>)
 800c686:	f016 f9c7 	bl	8022a18 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c696:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a0:	20001240 	.word	0x20001240
 800c6a4:	08025d80 	.word	0x08025d80
 800c6a8:	08025dc0 	.word	0x08025dc0

0800c6ac <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6ba:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	3316      	adds	r3, #22
 800c6cc:	2210      	movs	r2, #16
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f016 fbbe 	bl	8022e50 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	f103 0016 	add.w	r0, r3, #22
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	3338      	adds	r3, #56	@ 0x38
 800c6de:	2210      	movs	r2, #16
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f016 fbb5 	bl	8022e50 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	0a1b      	lsrs	r3, r3, #8
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7fd fe46 	bl	800a3a8 <vReturnEthernetFrame>
    }
 800c71c:	bf00      	nop
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c724:	b5b0      	push	{r4, r5, r7, lr}
 800c726:	b090      	sub	sp, #64	@ 0x40
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c738:	2300      	movs	r3, #0
 800c73a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 80c1 	beq.w	800c8ca <vNDSendNeighbourSolicitation+0x1a6>
 800c748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c74a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 80b8 	beq.w	800c8ca <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c75a:	2356      	movs	r3, #86	@ 0x56
 800c75c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c764:	429a      	cmp	r2, r3
 800c766:	d909      	bls.n	800c77c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c768:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c76a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c76c:	f7fe f9ce 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 800c770:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c772:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c774:	f00b fa46 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 80a3 	beq.w	800c8ca <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c784:	2320      	movs	r3, #32
 800c786:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	3336      	adds	r3, #54	@ 0x36
 800c792:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c798:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c79a:	2333      	movs	r3, #51	@ 0x33
 800c79c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c79e:	2333      	movs	r3, #51	@ 0x33
 800c7a0:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c7a2:	23ff      	movs	r3, #255	@ 0xff
 800c7a4:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	7b5b      	ldrb	r3, [r3, #13]
 800c7aa:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	7b9b      	ldrb	r3, [r3, #14]
 800c7b0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	7bdb      	ldrb	r3, [r3, #15]
 800c7b6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ba:	3306      	adds	r3, #6
 800c7bc:	461a      	mov	r2, r3
 800c7be:	f107 0308 	add.w	r3, r7, #8
 800c7c2:	6818      	ldr	r0, [r3, #0]
 800c7c4:	6010      	str	r0, [r2, #0]
 800c7c6:	889b      	ldrh	r3, [r3, #4]
 800c7c8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c7ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ce:	33e8      	adds	r3, #232	@ 0xe8
 800c7d0:	2206      	movs	r2, #6
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	f016 fb3c 	bl	8022e50 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c7e0:	731a      	strb	r2, [r3, #12]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c7e8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	2260      	movs	r2, #96	@ 0x60
 800c7ee:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	741a      	strb	r2, [r3, #16]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c802:	b29b      	uxth	r3, r3
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	b29a      	uxth	r2, r3
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	0a1b      	lsrs	r3, r3, #8
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	4313      	orrs	r3, r2
 800c810:	b29a      	uxth	r2, r3
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	223a      	movs	r2, #58	@ 0x3a
 800c81a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	22ff      	movs	r2, #255	@ 0xff
 800c820:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c824:	f103 0016 	add.w	r0, r3, #22
 800c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82a:	3338      	adds	r3, #56	@ 0x38
 800c82c:	2210      	movs	r2, #16
 800c82e:	4619      	mov	r1, r3
 800c830:	f016 fb0e 	bl	8022e50 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c834:	f107 0310 	add.w	r3, r7, #16
 800c838:	2210      	movs	r2, #16
 800c83a:	2100      	movs	r1, #0
 800c83c:	4618      	mov	r0, r3
 800c83e:	f016 fc14 	bl	802306a <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c842:	23ff      	movs	r3, #255	@ 0xff
 800c844:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c846:	2302      	movs	r3, #2
 800c848:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c84a:	2301      	movs	r3, #1
 800c84c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c84e:	23ff      	movs	r3, #255	@ 0xff
 800c850:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	7b5b      	ldrb	r3, [r3, #13]
 800c856:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	7b9b      	ldrb	r3, [r3, #14]
 800c85c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	7bdb      	ldrb	r3, [r3, #15]
 800c862:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	3326      	adds	r3, #38	@ 0x26
 800c868:	461d      	mov	r5, r3
 800c86a:	f107 0410 	add.w	r4, r7, #16
 800c86e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c870:	6028      	str	r0, [r5, #0]
 800c872:	6069      	str	r1, [r5, #4]
 800c874:	60aa      	str	r2, [r5, #8]
 800c876:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c878:	2220      	movs	r2, #32
 800c87a:	2100      	movs	r1, #0
 800c87c:	6a38      	ldr	r0, [r7, #32]
 800c87e:	f016 fbf4 	bl	802306a <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	2287      	movs	r2, #135	@ 0x87
 800c886:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c888:	6a3b      	ldr	r3, [r7, #32]
 800c88a:	3308      	adds	r3, #8
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	2210      	movs	r2, #16
 800c890:	4618      	mov	r0, r3
 800c892:	f016 fadd 	bl	8022e50 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c896:	6a3b      	ldr	r3, [r7, #32]
 800c898:	2201      	movs	r2, #1
 800c89a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	f103 001a 	add.w	r0, r3, #26
 800c8a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8aa:	33e8      	adds	r3, #232	@ 0xe8
 800c8ac:	2206      	movs	r2, #6
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	f016 face 	bl	8022e50 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	709a      	strb	r2, [r3, #2]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c8be:	2101      	movs	r1, #1
 800c8c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c8c2:	f7fd fd71 	bl	800a3a8 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d005      	beq.n	800c8dc <vNDSendNeighbourSolicitation+0x1b8>
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c8d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c8d8:	f00b f994 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c8dc:	bf00      	nop
 800c8de:	3740      	adds	r7, #64	@ 0x40
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bdb0      	pop	{r4, r5, r7, pc}

0800c8e4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	dc29      	bgt.n	800c948 <pcMessageType+0x64>
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc19      	bgt.n	800c92c <pcMessageType+0x48>
 800c8f8:	e049      	b.n	800c98e <pcMessageType+0xaa>
 800c8fa:	3b80      	subs	r3, #128	@ 0x80
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d846      	bhi.n	800c98e <pcMessageType+0xaa>
 800c900:	a201      	add	r2, pc, #4	@ (adr r2, 800c908 <pcMessageType+0x24>)
 800c902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c906:	bf00      	nop
 800c908:	0800c96b 	.word	0x0800c96b
 800c90c:	0800c971 	.word	0x0800c971
 800c910:	0800c98f 	.word	0x0800c98f
 800c914:	0800c98f 	.word	0x0800c98f
 800c918:	0800c98f 	.word	0x0800c98f
 800c91c:	0800c977 	.word	0x0800c977
 800c920:	0800c97d 	.word	0x0800c97d
 800c924:	0800c983 	.word	0x0800c983
 800c928:	0800c989 	.word	0x0800c989
 800c92c:	3b01      	subs	r3, #1
 800c92e:	2b03      	cmp	r3, #3
 800c930:	d82d      	bhi.n	800c98e <pcMessageType+0xaa>
 800c932:	a201      	add	r2, pc, #4	@ (adr r2, 800c938 <pcMessageType+0x54>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c953 	.word	0x0800c953
 800c93c:	0800c959 	.word	0x0800c959
 800c940:	0800c95f 	.word	0x0800c95f
 800c944:	0800c965 	.word	0x0800c965
 800c948:	2b88      	cmp	r3, #136	@ 0x88
 800c94a:	dc20      	bgt.n	800c98e <pcMessageType+0xaa>
 800c94c:	2b80      	cmp	r3, #128	@ 0x80
 800c94e:	dad4      	bge.n	800c8fa <pcMessageType+0x16>
 800c950:	e01d      	b.n	800c98e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c952:	4b14      	ldr	r3, [pc, #80]	@ (800c9a4 <pcMessageType+0xc0>)
 800c954:	60fb      	str	r3, [r7, #12]
                    break;
 800c956:	e01d      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c958:	4b13      	ldr	r3, [pc, #76]	@ (800c9a8 <pcMessageType+0xc4>)
 800c95a:	60fb      	str	r3, [r7, #12]
                    break;
 800c95c:	e01a      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c95e:	4b13      	ldr	r3, [pc, #76]	@ (800c9ac <pcMessageType+0xc8>)
 800c960:	60fb      	str	r3, [r7, #12]
                    break;
 800c962:	e017      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c964:	4b12      	ldr	r3, [pc, #72]	@ (800c9b0 <pcMessageType+0xcc>)
 800c966:	60fb      	str	r3, [r7, #12]
                    break;
 800c968:	e014      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c96a:	4b12      	ldr	r3, [pc, #72]	@ (800c9b4 <pcMessageType+0xd0>)
 800c96c:	60fb      	str	r3, [r7, #12]
                    break;
 800c96e:	e011      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c970:	4b11      	ldr	r3, [pc, #68]	@ (800c9b8 <pcMessageType+0xd4>)
 800c972:	60fb      	str	r3, [r7, #12]
                    break;
 800c974:	e00e      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c976:	4b11      	ldr	r3, [pc, #68]	@ (800c9bc <pcMessageType+0xd8>)
 800c978:	60fb      	str	r3, [r7, #12]
                    break;
 800c97a:	e00b      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c97c:	4b10      	ldr	r3, [pc, #64]	@ (800c9c0 <pcMessageType+0xdc>)
 800c97e:	60fb      	str	r3, [r7, #12]
                    break;
 800c980:	e008      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c982:	4b10      	ldr	r3, [pc, #64]	@ (800c9c4 <pcMessageType+0xe0>)
 800c984:	60fb      	str	r3, [r7, #12]
                    break;
 800c986:	e005      	b.n	800c994 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c988:	4b0f      	ldr	r3, [pc, #60]	@ (800c9c8 <pcMessageType+0xe4>)
 800c98a:	60fb      	str	r3, [r7, #12]
                    break;
 800c98c:	e002      	b.n	800c994 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c98e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9cc <pcMessageType+0xe8>)
 800c990:	60fb      	str	r3, [r7, #12]
                    break;
 800c992:	bf00      	nop
            }

            return pcReturn;
 800c994:	68fb      	ldr	r3, [r7, #12]
        }
 800c996:	4618      	mov	r0, r3
 800c998:	3714      	adds	r7, #20
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	08025e88 	.word	0x08025e88
 800c9a8:	08025e9c 	.word	0x08025e9c
 800c9ac:	08025eac 	.word	0x08025eac
 800c9b0:	08025ebc 	.word	0x08025ebc
 800c9b4:	08025ed0 	.word	0x08025ed0
 800c9b8:	08025ee0 	.word	0x08025ee0
 800c9bc:	08025eec 	.word	0x08025eec
 800c9c0:	08025ef8 	.word	0x08025ef8
 800c9c4:	08025f04 	.word	0x08025f04
 800c9c8:	08025f14 	.word	0x08025f14
 800c9cc:	08025f24 	.word	0x08025f24

0800c9d0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c9d8:	4b19      	ldr	r3, [pc, #100]	@ (800ca40 <prvCheckWaitingBuffer+0x70>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9de:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	330e      	adds	r3, #14
 800c9e4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	2210      	movs	r2, #16
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	f017 f9f1 	bl	8023dd6 <memcmp>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d11d      	bne.n	800ca36 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c9fe:	4811      	ldr	r0, [pc, #68]	@ (800ca44 <prvCheckWaitingBuffer+0x74>)
 800ca00:	f016 f80a 	bl	8022a18 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800ca04:	2301      	movs	r3, #1
 800ca06:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800ca08:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <prvCheckWaitingBuffer+0x70>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800ca0e:	f107 030c 	add.w	r3, r7, #12
 800ca12:	6979      	ldr	r1, [r7, #20]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7fd fa13 	bl	8009e40 <xSendEventStructToIPTask>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d004      	beq.n	800ca2a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800ca20:	4b07      	ldr	r3, [pc, #28]	@ (800ca40 <prvCheckWaitingBuffer+0x70>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	f00b f8ed 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800ca2a:	4b05      	ldr	r3, [pc, #20]	@ (800ca40 <prvCheckWaitingBuffer+0x70>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7fd fffb 	bl	800aa2c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800ca36:	bf00      	nop
 800ca38:	3720      	adds	r7, #32
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	200011b4 	.word	0x200011b4
 800ca44:	08025f34 	.word	0x08025f34

0800ca48 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800ca48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca4c:	b09e      	sub	sp, #120	@ 0x78
 800ca4e:	af02      	add	r7, sp, #8
 800ca50:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca56:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800ca58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca5a:	3336      	adds	r3, #54	@ 0x36
 800ca5c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca62:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800ca64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	2b80      	cmp	r3, #128	@ 0x80
 800ca6a:	d01e      	beq.n	800caaa <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800ca6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	4698      	mov	r8, r3
 800ca72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7ff ff34 	bl	800c8e4 <pcMessageType>
 800ca7c:	4606      	mov	r6, r0
 800ca7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca80:	f103 0516 	add.w	r5, r3, #22
 800ca84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca86:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800ca8a:	f107 030c 	add.w	r3, r7, #12
 800ca8e:	2228      	movs	r2, #40	@ 0x28
 800ca90:	4619      	mov	r1, r3
 800ca92:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ca94:	f001 fd5c 	bl	800e550 <pcEndpointName>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	9400      	str	r4, [sp, #0]
 800ca9e:	462b      	mov	r3, r5
 800caa0:	4632      	mov	r2, r6
 800caa2:	4641      	mov	r1, r8
 800caa4:	48a7      	ldr	r0, [pc, #668]	@ (800cd44 <prvProcessICMPMessage_IPv6+0x2fc>)
 800caa6:	f015 ffb7 	bl	8022a18 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800caaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cab0:	f003 0304 	and.w	r3, r3, #4
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 813e 	beq.w	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800cabc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	dc1d      	bgt.n	800cb00 <prvProcessICMPMessage_IPv6+0xb8>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f300 8130 	bgt.w	800cd2a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800caca:	e130      	b.n	800cd2e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800cacc:	3b80      	subs	r3, #128	@ 0x80
 800cace:	2b08      	cmp	r3, #8
 800cad0:	f200 812d 	bhi.w	800cd2e <prvProcessICMPMessage_IPv6+0x2e6>
 800cad4:	a201      	add	r2, pc, #4	@ (adr r2, 800cadc <prvProcessICMPMessage_IPv6+0x94>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb0d 	.word	0x0800cb0d
 800cae0:	0800cb55 	.word	0x0800cb55
 800cae4:	0800cd2f 	.word	0x0800cd2f
 800cae8:	0800cd2f 	.word	0x0800cd2f
 800caec:	0800cd2f 	.word	0x0800cd2f
 800caf0:	0800cd2f 	.word	0x0800cd2f
 800caf4:	0800cd23 	.word	0x0800cd23
 800caf8:	0800cbcb 	.word	0x0800cbcb
 800cafc:	0800ccdb 	.word	0x0800ccdb
 800cb00:	2b88      	cmp	r3, #136	@ 0x88
 800cb02:	f300 8114 	bgt.w	800cd2e <prvProcessICMPMessage_IPv6+0x2e6>
 800cb06:	2b80      	cmp	r3, #128	@ 0x80
 800cb08:	dae0      	bge.n	800cacc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800cb0a:	e110      	b.n	800cd2e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800cb0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb0e:	8a5b      	ldrh	r3, [r3, #18]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	021b      	lsls	r3, r3, #8
 800cb14:	b21a      	sxth	r2, r3
 800cb16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb18:	8a5b      	ldrh	r3, [r3, #18]
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	0a1b      	lsrs	r3, r3, #8
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	b21b      	sxth	r3, r3
 800cb22:	4313      	orrs	r3, r2
 800cb24:	b21b      	sxth	r3, r3
 800cb26:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800cb28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cb2a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2e:	3336      	adds	r3, #54	@ 0x36
 800cb30:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d903      	bls.n	800cb44 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800cb3c:	4882      	ldr	r0, [pc, #520]	@ (800cd48 <prvProcessICMPMessage_IPv6+0x300>)
 800cb3e:	f015 ff6b 	bl	8022a18 <lUDPLoggingPrintf>
                           break;
 800cb42:	e0f9      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800cb44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb46:	2281      	movs	r2, #129	@ 0x81
 800cb48:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800cb4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fdad 	bl	800c6ac <prvReturnICMP_IPv6>
                   break;
 800cb52:	e0f1      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800cb54:	2300      	movs	r3, #0
 800cb56:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800cb5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb5c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800cb5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb60:	8a5b      	ldrh	r3, [r3, #18]
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	021b      	lsls	r3, r3, #8
 800cb66:	b21a      	sxth	r2, r3
 800cb68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb6a:	8a5b      	ldrh	r3, [r3, #18]
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	0a1b      	lsrs	r3, r3, #8
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	b21b      	sxth	r3, r3
 800cb74:	4313      	orrs	r3, r2
 800cb76:	b21b      	sxth	r3, r3
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800cb7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb7e:	3b08      	subs	r3, #8
 800cb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800cb82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb84:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800cb86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb88:	3308      	adds	r3, #8
 800cb8a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cb90:	e00d      	b.n	800cbae <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800cb92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b78      	cmp	r3, #120	@ 0x78
 800cb98:	d003      	beq.n	800cba2 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800cba0:	e009      	b.n	800cbb6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800cba2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cba4:	3301      	adds	r3, #1
 800cba6:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800cba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbaa:	3301      	adds	r3, #1
 800cbac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cbae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d3ed      	bcc.n	800cb92 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800cbb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbb8:	889b      	ldrh	r3, [r3, #4]
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7f5 f822 	bl	8001c0c <vApplicationPingReplyHook>
                           break;
 800cbc8:	e0b6      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800cbca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbcc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f001 f9cd 	bl	800df78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800cbde:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d002      	beq.n	800cbec <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe8:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbea:	e005      	b.n	800cbf8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800cbec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cbee:	3308      	adds	r3, #8
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	4856      	ldr	r0, [pc, #344]	@ (800cd4c <prvProcessICMPMessage_IPv6+0x304>)
 800cbf4:	f015 ff10 	bl	8022a18 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800cbf8:	2320      	movs	r3, #32
 800cbfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbfe:	3336      	adds	r3, #54	@ 0x36
 800cc00:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d903      	bls.n	800cc14 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800cc0c:	484e      	ldr	r0, [pc, #312]	@ (800cd48 <prvProcessICMPMessage_IPv6+0x300>)
 800cc0e:	f015 ff03 	bl	8022a18 <lUDPLoggingPrintf>
                           break;
 800cc12:	e091      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cc14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc16:	f103 0008 	add.w	r0, r3, #8
 800cc1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc1c:	3338      	adds	r3, #56	@ 0x38
 800cc1e:	2210      	movs	r2, #16
 800cc20:	4619      	mov	r1, r3
 800cc22:	f017 f8d8 	bl	8023dd6 <memcmp>
 800cc26:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800cc28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc2a:	f103 0108 	add.w	r1, r3, #8
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800cc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d101      	bne.n	800cc40 <prvProcessICMPMessage_IPv6+0x1f8>
 800cc3c:	4b44      	ldr	r3, [pc, #272]	@ (800cd50 <prvProcessICMPMessage_IPv6+0x308>)
 800cc3e:	e000      	b.n	800cc42 <prvProcessICMPMessage_IPv6+0x1fa>
 800cc40:	4b44      	ldr	r3, [pc, #272]	@ (800cd54 <prvProcessICMPMessage_IPv6+0x30c>)
 800cc42:	4845      	ldr	r0, [pc, #276]	@ (800cd58 <prvProcessICMPMessage_IPv6+0x310>)
 800cc44:	f015 fee8 	bl	8022a18 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800cc48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d171      	bne.n	800cd32 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800cc4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc50:	2288      	movs	r2, #136	@ 0x88
 800cc52:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800cc54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc56:	2200      	movs	r2, #0
 800cc58:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800cc5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	711a      	strb	r2, [r3, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	715a      	strb	r2, [r3, #5]
 800cc64:	2200      	movs	r2, #0
 800cc66:	719a      	strb	r2, [r3, #6]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cc6e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800cc70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	061a      	lsls	r2, r3, #24
 800cc76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc80:	431a      	orrs	r2, r3
 800cc82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	0a1b      	lsrs	r3, r3, #8
 800cc88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	0e1b      	lsrs	r3, r3, #24
 800cc94:	431a      	orrs	r2, r3
 800cc96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc98:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800cc9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc9c:	2202      	movs	r2, #2
 800cc9e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800cca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cca2:	2201      	movs	r2, #1
 800cca4:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800cca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cca8:	f103 001a 	add.w	r0, r3, #26
 800ccac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccae:	33e8      	adds	r3, #232	@ 0xe8
 800ccb0:	2206      	movs	r2, #6
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	f016 f8cc 	bl	8022e50 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800ccb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccba:	22ff      	movs	r2, #255	@ 0xff
 800ccbc:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800ccbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccc0:	f103 0008 	add.w	r0, r3, #8
 800ccc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccc6:	3338      	adds	r3, #56	@ 0x38
 800ccc8:	2210      	movs	r2, #16
 800ccca:	4619      	mov	r1, r3
 800cccc:	f016 f8c0 	bl	8022e50 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800ccd0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f7ff fcea 	bl	800c6ac <prvReturnICMP_IPv6>
                   break;
 800ccd8:	e02b      	b.n	800cd32 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800ccda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccdc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800cce0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cce2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cce4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cce6:	4619      	mov	r1, r3
 800cce8:	f7ff fb5e 	bl	800c3a8 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800ccec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccee:	3308      	adds	r3, #8
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	481a      	ldr	r0, [pc, #104]	@ (800cd5c <prvProcessICMPMessage_IPv6+0x314>)
 800ccf4:	f015 fe90 	bl	8022a18 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 fa89 	bl	800d210 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800ccfe:	4b18      	ldr	r3, [pc, #96]	@ (800cd60 <prvProcessICMPMessage_IPv6+0x318>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d017      	beq.n	800cd36 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800cd06:	4b16      	ldr	r3, [pc, #88]	@ (800cd60 <prvProcessICMPMessage_IPv6+0x318>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fd fc4c 	bl	800a5a8 <uxIPHeaderSizePacket>
 800cd10:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cd12:	2b28      	cmp	r3, #40	@ 0x28
 800cd14:	d10f      	bne.n	800cd36 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800cd16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd18:	3308      	adds	r3, #8
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fe58 	bl	800c9d0 <prvCheckWaitingBuffer>
                    break;
 800cd20:	e009      	b.n	800cd36 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fb9a 	bl	800d45c <vReceiveRA>
                            break;
 800cd28:	e006      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cd2a:	bf00      	nop
 800cd2c:	e004      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cd2e:	bf00      	nop
 800cd30:	e002      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800cd32:	bf00      	nop
 800cd34:	e000      	b.n	800cd38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cd36:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800cd38:	2300      	movs	r3, #0
    }
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3770      	adds	r7, #112	@ 0x70
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	08025f44 	.word	0x08025f44
 800cd48:	08025f7c 	.word	0x08025f7c
 800cd4c:	08025f88 	.word	0x08025f88
 800cd50:	08025fb8 	.word	0x08025fb8
 800cd54:	08025fc0 	.word	0x08025fc0
 800cd58:	08025fc8 	.word	0x08025fc8
 800cd5c:	08025fec 	.word	0x08025fec
 800cd60:	200011b4 	.word	0x200011b4

0800cd64 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800cd64:	b5b0      	push	{r4, r5, r7, lr}
 800cd66:	b088      	sub	sp, #32
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cd6c:	2356      	movs	r3, #86	@ 0x56
 800cd6e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800cd70:	2100      	movs	r1, #0
 800cd72:	69f8      	ldr	r0, [r7, #28]
 800cd74:	f00a fede 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800cd78:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	f000 80b1 	beq.w	800cee4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	3314      	adds	r3, #20
 800cd86:	2210      	movs	r2, #16
 800cd88:	2100      	movs	r1, #0
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f016 f96d 	bl	802306a <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cd9c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d104      	bne.n	800cdae <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800cda4:	f240 419e 	movw	r1, #1182	@ 0x49e
 800cda8:	4850      	ldr	r0, [pc, #320]	@ (800ceec <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800cdaa:	f7f4 fe6f 	bl	8001a8c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdb2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	3336      	adds	r3, #54	@ 0x36
 800cdb8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	4a4c      	ldr	r2, [pc, #304]	@ (800cef0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800cdbe:	6810      	ldr	r0, [r2, #0]
 800cdc0:	6018      	str	r0, [r3, #0]
 800cdc2:	8892      	ldrh	r2, [r2, #4]
 800cdc4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1d98      	adds	r0, r3, #6
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	33e8      	adds	r3, #232	@ 0xe8
 800cdce:	2206      	movs	r2, #6
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	f016 f83d 	bl	8022e50 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cdde:	731a      	strb	r2, [r3, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cde6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2260      	movs	r2, #96	@ 0x60
 800cdec:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	741a      	strb	r2, [r3, #16]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	2200      	movs	r2, #0
 800ce02:	749a      	strb	r2, [r3, #18]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f042 0220 	orr.w	r2, r2, #32
 800ce0a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	223a      	movs	r2, #58	@ 0x3a
 800ce10:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	22ff      	movs	r2, #255	@ 0xff
 800ce16:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f103 0016 	add.w	r0, r3, #22
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3338      	adds	r3, #56	@ 0x38
 800ce22:	2210      	movs	r2, #16
 800ce24:	4619      	mov	r1, r3
 800ce26:	f016 f813 	bl	8022e50 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3326      	adds	r3, #38	@ 0x26
 800ce2e:	4a31      	ldr	r2, [pc, #196]	@ (800cef4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800ce30:	461c      	mov	r4, r3
 800ce32:	4615      	mov	r5, r2
 800ce34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce36:	6020      	str	r0, [r4, #0]
 800ce38:	6061      	str	r1, [r4, #4]
 800ce3a:	60a2      	str	r2, [r4, #8]
 800ce3c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800ce3e:	2320      	movs	r3, #32
 800ce40:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2288      	movs	r2, #136	@ 0x88
 800ce46:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2200      	movs	r2, #0
 800ce52:	711a      	strb	r2, [r3, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	715a      	strb	r2, [r3, #5]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	719a      	strb	r2, [r3, #6]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ce62:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	061a      	lsls	r2, r3, #24
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	021b      	lsls	r3, r3, #8
 800ce70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ce74:	431a      	orrs	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	0a1b      	lsrs	r3, r3, #8
 800ce7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ce80:	431a      	orrs	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	0e1b      	lsrs	r3, r3, #24
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2202      	movs	r2, #2
 800ce92:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2201      	movs	r2, #1
 800ce98:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f103 001a 	add.w	r0, r3, #26
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	33e8      	adds	r3, #232	@ 0xe8
 800cea4:	2206      	movs	r2, #6
 800cea6:	4619      	mov	r1, r3
 800cea8:	f015 ffd2 	bl	8022e50 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	22ff      	movs	r2, #255	@ 0xff
 800ceb0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f103 0008 	add.w	r0, r3, #8
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3338      	adds	r3, #56	@ 0x38
 800cebc:	2210      	movs	r2, #16
 800cebe:	4619      	mov	r1, r3
 800cec0:	f015 ffc6 	bl	8022e50 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	709a      	strb	r2, [r3, #2]
 800ced4:	2200      	movs	r2, #0
 800ced6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	2201      	movs	r2, #1
 800cede:	69b9      	ldr	r1, [r7, #24]
 800cee0:	6978      	ldr	r0, [r7, #20]
 800cee2:	4798      	blx	r3
        }
    }
 800cee4:	bf00      	nop
 800cee6:	3720      	adds	r7, #32
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bdb0      	pop	{r4, r5, r7, pc}
 800ceec:	08026004 	.word	0x08026004
 800cef0:	08028284 	.word	0x08028284
 800cef4:	08028274 	.word	0x08028274

0800cef8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b090      	sub	sp, #64	@ 0x40
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800cf06:	2301      	movs	r3, #1
 800cf08:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d017      	beq.n	800cf40 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cf10:	2300      	movs	r3, #0
 800cf12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf14:	e010      	b.n	800cf38 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800cf16:	f107 0214 	add.w	r2, r7, #20
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7f4 fe87 	bl	8001c34 <xApplicationGetRandomNumber>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d102      	bne.n	800cf32 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800cf30:	e00d      	b.n	800cf4e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf34:	3301      	adds	r3, #1
 800cf36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	ddeb      	ble.n	800cf16 <FreeRTOS_CreateIPv6Address+0x1e>
 800cf3e:	e006      	b.n	800cf4e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800cf40:	f107 0314 	add.w	r3, r7, #20
 800cf44:	2210      	movs	r2, #16
 800cf46:	2100      	movs	r1, #0
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f016 f88e 	bl	802306a <memset>
        }

        if( xResult == pdPASS )
 800cf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d167      	bne.n	800d024 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d004      	beq.n	800cf64 <FreeRTOS_CreateIPv6Address+0x6c>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b80      	cmp	r3, #128	@ 0x80
 800cf5e:	d801      	bhi.n	800cf64 <FreeRTOS_CreateIPv6Address+0x6c>
 800cf60:	2301      	movs	r3, #1
 800cf62:	e000      	b.n	800cf66 <FreeRTOS_CreateIPv6Address+0x6e>
 800cf64:	2300      	movs	r3, #0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d104      	bne.n	800cf74 <FreeRTOS_CreateIPv6Address+0x7c>
 800cf6a:	f240 5105 	movw	r1, #1285	@ 0x505
 800cf6e:	4830      	ldr	r0, [pc, #192]	@ (800d030 <FreeRTOS_CreateIPv6Address+0x138>)
 800cf70:	f7f4 fd8c 	bl	8001a8c <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b07      	cmp	r3, #7
 800cf78:	d907      	bls.n	800cf8a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	3307      	adds	r3, #7
 800cf82:	08db      	lsrs	r3, r3, #3
 800cf84:	461a      	mov	r2, r3
 800cf86:	f015 ff63 	bl	8022e50 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800cf8a:	f107 0314 	add.w	r3, r7, #20
 800cf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	08db      	lsrs	r3, r3, #3
 800cf94:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f003 0307 	and.w	r3, r3, #7
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d034      	beq.n	800d00a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	f1c3 0308 	rsb	r3, r3, #8
 800cfaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800cfac:	2201      	movs	r2, #1
 800cfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800cfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfba:	b2db      	uxtb	r3, r3
 800cfbc:	43db      	mvns	r3, r3
 800cfbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc6:	4413      	add	r3, r2
 800cfc8:	781a      	ldrb	r2, [r3, #0]
 800cfca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfce:	4013      	ands	r3, r2
 800cfd0:	b2d9      	uxtb	r1, r3
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd6:	4413      	add	r3, r2
 800cfd8:	460a      	mov	r2, r1
 800cfda:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe0:	4413      	add	r3, r2
 800cfe2:	781a      	ldrb	r2, [r3, #0]
 800cfe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfe6:	7819      	ldrb	r1, [r3, #0]
 800cfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	400b      	ands	r3, r1
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	4313      	orrs	r3, r2
 800cff2:	b2d9      	uxtb	r1, r3
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff8:	4413      	add	r3, r2
 800cffa:	460a      	mov	r2, r1
 800cffc:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800cffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d000:	3301      	adds	r3, #1
 800d002:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800d004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d006:	3301      	adds	r3, #1
 800d008:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	2b0f      	cmp	r3, #15
 800d00e:	d809      	bhi.n	800d024 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800d010:	68fa      	ldr	r2, [r7, #12]
 800d012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d014:	18d0      	adds	r0, r2, r3
 800d016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d018:	f1c3 0310 	rsb	r3, r3, #16
 800d01c:	461a      	mov	r2, r3
 800d01e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d020:	f015 ff16 	bl	8022e50 <memcpy>
            }
        }

        return xResult;
 800d024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800d026:	4618      	mov	r0, r3
 800d028:	3740      	adds	r7, #64	@ 0x40
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	08026004 	.word	0x08026004

0800d034 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800d03e:	2300      	movs	r3, #0
 800d040:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fe48 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800d048:	60b8      	str	r0, [r7, #8]
 800d04a:	e01a      	b.n	800d082 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d052:	2bfe      	cmp	r3, #254	@ 0xfe
 800d054:	d110      	bne.n	800d078 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800d05c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800d060:	2b80      	cmp	r3, #128	@ 0x80
 800d062:	d109      	bne.n	800d078 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d064:	6838      	ldr	r0, [r7, #0]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	3338      	adds	r3, #56	@ 0x38
 800d06a:	2210      	movs	r2, #16
 800d06c:	4619      	mov	r1, r3
 800d06e:	f015 feef 	bl	8022e50 <memcpy>
                xResult = pdPASS;
 800d072:	2301      	movs	r3, #1
 800d074:	60fb      	str	r3, [r7, #12]
                break;
 800d076:	e007      	b.n	800d088 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800d078:	68b9      	ldr	r1, [r7, #8]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fe4e 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800d080:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1e1      	bne.n	800d04c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800d088:	68fb      	ldr	r3, [r7, #12]
    }
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
	...

0800d094 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800d094:	b5b0      	push	{r4, r5, r7, lr}
 800d096:	b090      	sub	sp, #64	@ 0x40
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d0a4:	233e      	movs	r3, #62	@ 0x3e
 800d0a6:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d103      	bne.n	800d0be <vNDSendRouterSolicitation+0x2a>
 800d0b6:	218f      	movs	r1, #143	@ 0x8f
 800d0b8:	4852      	ldr	r0, [pc, #328]	@ (800d204 <vNDSendRouterSolicitation+0x170>)
 800d0ba:	f7f4 fce7 	bl	8001a8c <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800d0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d0c4:	f003 0304 	and.w	r3, r3, #4
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d103      	bne.n	800d0d6 <vNDSendRouterSolicitation+0x42>
 800d0ce:	2190      	movs	r1, #144	@ 0x90
 800d0d0:	484c      	ldr	r0, [pc, #304]	@ (800d204 <vNDSendRouterSolicitation+0x170>)
 800d0d2:	f7f4 fcdb 	bl	8001a8c <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d0dc:	f107 020c 	add.w	r2, r7, #12
 800d0e0:	4611      	mov	r1, r2
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff ffa6 	bl	800d034 <xGetLinkLocalAddress>
 800d0e8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800d0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10a      	bne.n	800d106 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800d0f0:	4845      	ldr	r0, [pc, #276]	@ (800d208 <vNDSendRouterSolicitation+0x174>)
 800d0f2:	f015 fc91 	bl	8022a18 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d0f6:	f107 030c 	add.w	r3, r7, #12
 800d0fa:	2210      	movs	r2, #16
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	4618      	mov	r0, r3
 800d100:	f015 ffb3 	bl	802306a <memset>
 800d104:	e005      	b.n	800d112 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	4619      	mov	r1, r3
 800d10c:	483f      	ldr	r0, [pc, #252]	@ (800d20c <vNDSendRouterSolicitation+0x178>)
 800d10e:	f015 fc83 	bl	8022a18 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800d112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d118:	429a      	cmp	r2, r3
 800d11a:	d909      	bls.n	800d130 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800d11c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d11e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d120:	f7fd fcf4 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 800d124:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800d126:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d128:	f00a fd6c 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800d12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800d130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d132:	2b00      	cmp	r3, #0
 800d134:	d062      	beq.n	800d1fc <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800d136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d13a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13e:	3336      	adds	r3, #54	@ 0x36
 800d140:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800d142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d144:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d146:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800d148:	f107 031c 	add.w	r3, r7, #28
 800d14c:	2200      	movs	r2, #0
 800d14e:	4619      	mov	r1, r3
 800d150:	6838      	ldr	r0, [r7, #0]
 800d152:	f7ff f87b 	bl	800c24c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d158:	3306      	adds	r3, #6
 800d15a:	461a      	mov	r2, r3
 800d15c:	f107 031c 	add.w	r3, r7, #28
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	6010      	str	r0, [r2, #0]
 800d164:	889b      	ldrh	r3, [r3, #4]
 800d166:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16c:	33e8      	adds	r3, #232	@ 0xe8
 800d16e:	2206      	movs	r2, #6
 800d170:	4619      	mov	r1, r3
 800d172:	f015 fe6d 	bl	8022e50 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800d176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d178:	2200      	movs	r2, #0
 800d17a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800d17e:	731a      	strb	r2, [r3, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800d186:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	2260      	movs	r2, #96	@ 0x60
 800d18c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	2200      	movs	r2, #0
 800d192:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800d194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d196:	2200      	movs	r2, #0
 800d198:	741a      	strb	r2, [r3, #16]
 800d19a:	2200      	movs	r2, #0
 800d19c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800d19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	749a      	strb	r2, [r3, #18]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f042 0208 	orr.w	r2, r2, #8
 800d1aa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ae:	223a      	movs	r2, #58	@ 0x3a
 800d1b0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	22ff      	movs	r2, #255	@ 0xff
 800d1b6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ba:	3316      	adds	r3, #22
 800d1bc:	461d      	mov	r5, r3
 800d1be:	f107 040c 	add.w	r4, r7, #12
 800d1c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1c4:	6028      	str	r0, [r5, #0]
 800d1c6:	6069      	str	r1, [r5, #4]
 800d1c8:	60aa      	str	r2, [r5, #8]
 800d1ca:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ce:	3326      	adds	r3, #38	@ 0x26
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	2210      	movs	r2, #16
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f015 fe3b 	bl	8022e50 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800d1da:	2208      	movs	r2, #8
 800d1dc:	2100      	movs	r1, #0
 800d1de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1e0:	f015 ff43 	bl	802306a <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	2285      	movs	r2, #133	@ 0x85
 800d1e8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	709a      	strb	r2, [r3, #2]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800d1f4:	2101      	movs	r1, #1
 800d1f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d1f8:	f7fd f8d6 	bl	800a3a8 <vReturnEthernetFrame>
        }
    }
 800d1fc:	bf00      	nop
 800d1fe:	3740      	adds	r7, #64	@ 0x40
 800d200:	46bd      	mov	sp, r7
 800d202:	bdb0      	pop	{r4, r5, r7, pc}
 800d204:	08026030 	.word	0x08026030
 800d208:	0802605c 	.word	0x0802605c
 800d20c:	08026084 	.word	0x08026084

0800d210 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d222:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3336      	adds	r3, #54	@ 0x36
 800d228:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800d22a:	6938      	ldr	r0, [r7, #16]
 800d22c:	f000 fd54 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800d230:	6178      	str	r0, [r7, #20]
 800d232:	e028      	b.n	800d286 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d23a:	f003 0302 	and.w	r3, r3, #2
 800d23e:	b2db      	uxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d01b      	beq.n	800d27c <vReceiveNA+0x6c>
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d116      	bne.n	800d27c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	3308      	adds	r3, #8
 800d258:	2210      	movs	r2, #16
 800d25a:	4619      	mov	r1, r3
 800d25c:	f016 fdbb 	bl	8023dd6 <memcmp>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d10a      	bne.n	800d27c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d26c:	f043 0302 	orr.w	r3, r3, #2
 800d270:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800d274:	2164      	movs	r1, #100	@ 0x64
 800d276:	6978      	ldr	r0, [r7, #20]
 800d278:	f7fd fb3e 	bl	800a8f8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800d27c:	6979      	ldr	r1, [r7, #20]
 800d27e:	6938      	ldr	r0, [r7, #16]
 800d280:	f000 fd4c 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800d284:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1d3      	bne.n	800d234 <vReceiveNA+0x24>
                }
            }
        }
    }
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29a:	b091      	sub	sp, #68	@ 0x44
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d2a4:	2310      	movs	r3, #16
 800d2a6:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2aa:	3336      	adds	r3, #54	@ 0x36
 800d2ac:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2bc:	6a3b      	ldr	r3, [r7, #32]
 800d2be:	4413      	add	r3, r2
 800d2c0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800d2c6:	e0b2      	b.n	800d42e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2cc:	4413      	add	r3, r2
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800d2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	69ba      	ldr	r2, [r7, #24]
 800d2d8:	4413      	add	r3, r2
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	00db      	lsls	r3, r3, #3
 800d2e2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d103      	bne.n	800d2f2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800d2ea:	4856      	ldr	r0, [pc, #344]	@ (800d444 <vReceiveRA_ReadReply+0x1ac>)
 800d2ec:	f015 fb94 	bl	8022a18 <lUDPLoggingPrintf>
                break;
 800d2f0:	e0a3      	b.n	800d43a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800d2f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	69fa      	ldr	r2, [r7, #28]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d208      	bcs.n	800d310 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800d2fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	4619      	mov	r1, r3
 800d308:	484f      	ldr	r0, [pc, #316]	@ (800d448 <vReceiveRA_ReadReply+0x1b0>)
 800d30a:	f015 fb85 	bl	8022a18 <lUDPLoggingPrintf>
                break;
 800d30e:	e094      	b.n	800d43a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800d310:	7dfb      	ldrb	r3, [r7, #23]
 800d312:	3b01      	subs	r3, #1
 800d314:	2b04      	cmp	r3, #4
 800d316:	d87f      	bhi.n	800d418 <vReceiveRA_ReadReply+0x180>
 800d318:	a201      	add	r2, pc, #4	@ (adr r2, 800d320 <vReceiveRA_ReadReply+0x88>)
 800d31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31e:	bf00      	nop
 800d320:	0800d335 	.word	0x0800d335
 800d324:	0800d425 	.word	0x0800d425
 800d328:	0800d38f 	.word	0x0800d38f
 800d32c:	0800d425 	.word	0x0800d425
 800d330:	0800d3ff 	.word	0x0800d3ff
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800d334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d336:	3302      	adds	r3, #2
 800d338:	69ba      	ldr	r2, [r7, #24]
 800d33a:	4413      	add	r3, r2
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	461c      	mov	r4, r3
 800d340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d342:	3303      	adds	r3, #3
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	4413      	add	r3, r2
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	461d      	mov	r5, r3
 800d34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34e:	3304      	adds	r3, #4
 800d350:	69ba      	ldr	r2, [r7, #24]
 800d352:	4413      	add	r3, r2
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	461e      	mov	r6, r3
 800d358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35a:	3305      	adds	r3, #5
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	4413      	add	r3, r2
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	4619      	mov	r1, r3
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	3306      	adds	r3, #6
 800d368:	69ba      	ldr	r2, [r7, #24]
 800d36a:	4413      	add	r3, r2
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	4618      	mov	r0, r3
 800d370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d372:	3307      	adds	r3, #7
 800d374:	69ba      	ldr	r2, [r7, #24]
 800d376:	4413      	add	r3, r2
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	9001      	str	r0, [sp, #4]
 800d37e:	9100      	str	r1, [sp, #0]
 800d380:	4633      	mov	r3, r6
 800d382:	462a      	mov	r2, r5
 800d384:	4621      	mov	r1, r4
 800d386:	4831      	ldr	r0, [pc, #196]	@ (800d44c <vReceiveRA_ReadReply+0x1b4>)
 800d388:	f015 fb46 	bl	8022a18 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800d38c:	e04b      	b.n	800d426 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d392:	4413      	add	r3, r2
 800d394:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d398:	789b      	ldrb	r3, [r3, #2]
 800d39a:	4618      	mov	r0, r3
 800d39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	061a      	lsls	r2, r3, #24
 800d3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	0a1b      	lsrs	r3, r3, #8
 800d3b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	0e1b      	lsrs	r3, r3, #24
 800d3c0:	ea42 0103 	orr.w	r1, r2, r3
 800d3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	061a      	lsls	r2, r3, #24
 800d3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	021b      	lsls	r3, r3, #8
 800d3d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3d4:	431a      	orrs	r2, r3
 800d3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	0a1b      	lsrs	r3, r3, #8
 800d3dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d3e0:	431a      	orrs	r2, r3
 800d3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	0e1b      	lsrs	r3, r3, #24
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ec:	3310      	adds	r3, #16
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	460a      	mov	r2, r1
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4816      	ldr	r0, [pc, #88]	@ (800d450 <vReceiveRA_ReadReply+0x1b8>)
 800d3f8:	f015 fb0e 	bl	8022a18 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800d3fc:	e013      	b.n	800d426 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800d3fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d400:	3304      	adds	r3, #4
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	4413      	add	r3, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7fd fe60 	bl	800b0cc <ulChar2u32>
 800d40c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800d40e:	68b9      	ldr	r1, [r7, #8]
 800d410:	4810      	ldr	r0, [pc, #64]	@ (800d454 <vReceiveRA_ReadReply+0x1bc>)
 800d412:	f015 fb01 	bl	8022a18 <lUDPLoggingPrintf>
                   }
                   break;
 800d416:	e006      	b.n	800d426 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800d418:	7dfb      	ldrb	r3, [r7, #23]
 800d41a:	4619      	mov	r1, r3
 800d41c:	480e      	ldr	r0, [pc, #56]	@ (800d458 <vReceiveRA_ReadReply+0x1c0>)
 800d41e:	f015 fafb 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800d422:	e000      	b.n	800d426 <vReceiveRA_ReadReply+0x18e>
                    break;
 800d424:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800d426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4413      	add	r3, r2
 800d42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800d42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d430:	3301      	adds	r3, #1
 800d432:	69fa      	ldr	r2, [r7, #28]
 800d434:	429a      	cmp	r2, r3
 800d436:	f63f af47 	bhi.w	800d2c8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800d43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d43c:	4618      	mov	r0, r3
 800d43e:	3734      	adds	r7, #52	@ 0x34
 800d440:	46bd      	mov	sp, r7
 800d442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d444:	08026098 	.word	0x08026098
 800d448:	080260cc 	.word	0x080260cc
 800d44c:	080260f0 	.word	0x080260f0
 800d450:	0802611c 	.word	0x0802611c
 800d454:	08026144 	.word	0x08026144
 800d458:	08026154 	.word	0x08026154

0800d45c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45e:	b08d      	sub	sp, #52	@ 0x34
 800d460:	af04      	add	r7, sp, #16
 800d462:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d468:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d46e:	2310      	movs	r3, #16
 800d470:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	3336      	adds	r3, #54	@ 0x36
 800d476:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d903      	bls.n	800d48a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800d482:	485b      	ldr	r0, [pc, #364]	@ (800d5f0 <vReceiveRA+0x194>)
 800d484:	f015 fac8 	bl	8022a18 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800d488:	e0ae      	b.n	800d5e8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	3336      	adds	r3, #54	@ 0x36
 800d48e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	461c      	mov	r4, r3
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	785b      	ldrb	r3, [r3, #1]
 800d49a:	461d      	mov	r5, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	885b      	ldrh	r3, [r3, #2]
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	b21a      	sxth	r2, r3
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	885b      	ldrh	r3, [r3, #2]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	0a1b      	lsrs	r3, r3, #8
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	b21b      	sxth	r3, r3
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	b21b      	sxth	r3, r3
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	461e      	mov	r6, r3
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	791b      	ldrb	r3, [r3, #4]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	795b      	ldrb	r3, [r3, #5]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	88db      	ldrh	r3, [r3, #6]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	021b      	lsls	r3, r3, #8
 800d4ce:	b21a      	sxth	r2, r3
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	88db      	ldrh	r3, [r3, #6]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	0a1b      	lsrs	r3, r3, #8
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	b21b      	sxth	r3, r3
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	b21b      	sxth	r3, r3
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	9302      	str	r3, [sp, #8]
 800d4e4:	9001      	str	r0, [sp, #4]
 800d4e6:	9100      	str	r1, [sp, #0]
 800d4e8:	4633      	mov	r3, r6
 800d4ea:	462a      	mov	r2, r5
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4841      	ldr	r0, [pc, #260]	@ (800d5f4 <vReceiveRA+0x198>)
 800d4f0:	f015 fa92 	bl	8022a18 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	88db      	ldrh	r3, [r3, #6]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d074      	beq.n	800d5e8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7ff feca 	bl	800d298 <vReceiveRA_ReadReply>
 800d504:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d104      	bne.n	800d518 <vReceiveRA+0xbc>
 800d50e:	f240 118b 	movw	r1, #395	@ 0x18b
 800d512:	4839      	ldr	r0, [pc, #228]	@ (800d5f8 <vReceiveRA+0x19c>)
 800d514:	f7f4 faba 	bl	8001a8c <vAssertCalled>
                if( pxPrefixOption != NULL )
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d064      	beq.n	800d5e8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fbd8 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800d528:	61f8      	str	r0, [r7, #28]
 800d52a:	e05a      	b.n	800d5e2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d532:	f003 0302 	and.w	r3, r3, #2
 800d536:	b2db      	uxtb	r3, r3
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d04b      	beq.n	800d5d4 <vReceiveRA+0x178>
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d542:	2b01      	cmp	r3, #1
 800d544:	d146      	bne.n	800d5d4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	789b      	ldrb	r3, [r3, #2]
 800d54a:	461a      	mov	r2, r3
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	3310      	adds	r3, #16
 800d55a:	2210      	movs	r2, #16
 800d55c:	4619      	mov	r1, r3
 800d55e:	f015 fc77 	bl	8022e50 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d562:	69fb      	ldr	r3, [r7, #28]
 800d564:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	3316      	adds	r3, #22
 800d56c:	2210      	movs	r2, #16
 800d56e:	4619      	mov	r1, r3
 800d570:	f015 fc6e 	bl	8022e50 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800d574:	69fa      	ldr	r2, [r7, #28]
 800d576:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d57a:	f043 0301 	orr.w	r3, r3, #1
 800d57e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	2200      	movs	r2, #0
 800d586:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	061a      	lsls	r2, r3, #24
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	021b      	lsls	r3, r3, #8
 800d596:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d59a:	431a      	orrs	r2, r3
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	0a1b      	lsrs	r3, r3, #8
 800d5a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d5a6:	431a      	orrs	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	0e1b      	lsrs	r3, r3, #24
 800d5ae:	431a      	orrs	r2, r3
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d5b6:	69fa      	ldr	r2, [r7, #28]
 800d5b8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d5bc:	f043 0302 	orr.w	r3, r3, #2
 800d5c0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	2202      	movs	r2, #2
 800d5c8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800d5cc:	69f9      	ldr	r1, [r7, #28]
 800d5ce:	2000      	movs	r0, #0
 800d5d0:	f000 f9b6 	bl	800d940 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d8:	69f9      	ldr	r1, [r7, #28]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fb9e 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800d5e0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1a1      	bne.n	800d52c <vReceiveRA+0xd0>
    }
 800d5e8:	bf00      	nop
 800d5ea:	3724      	adds	r7, #36	@ 0x24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f0:	08026178 	.word	0x08026178
 800d5f4:	080261a8 	.word	0x080261a8
 800d5f8:	08026030 	.word	0x08026030

0800d5fc <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d600:	b088      	sub	sp, #32
 800d602:	af00      	add	r7, sp, #0
 800d604:	6178      	str	r0, [r7, #20]
 800d606:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d608:	6939      	ldr	r1, [r7, #16]
 800d60a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d60c:	6979      	ldr	r1, [r7, #20]
 800d60e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d612:	2901      	cmp	r1, #1
 800d614:	d133      	bne.n	800d67e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d61c:	1c5a      	adds	r2, r3, #1
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d62a:	2b02      	cmp	r3, #2
 800d62c:	d804      	bhi.n	800d638 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d636:	e0bf      	b.n	800d7b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d638:	4862      	ldr	r0, [pc, #392]	@ (800d7c4 <xRAProcess_HandleWaitStates+0x1c8>)
 800d63a:	f015 f9ed 	bl	8022a18 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	3390      	adds	r3, #144	@ 0x90
 800d648:	2258      	movs	r2, #88	@ 0x58
 800d64a:	4619      	mov	r1, r3
 800d64c:	f015 fc00 	bl	8022e50 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d656:	f36f 0300 	bfc	r3, #0, #1
 800d65a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	2200      	movs	r2, #0
 800d662:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d66c:	f043 0302 	orr.w	r3, r3, #2
 800d670:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d67c:	e09c      	b.n	800d7b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d67e:	6979      	ldr	r1, [r7, #20]
 800d680:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d684:	2903      	cmp	r1, #3
 800d686:	f040 8097 	bne.w	800d7b8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d68a:	6979      	ldr	r1, [r7, #20]
 800d68c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d690:	f001 0102 	and.w	r1, r1, #2
 800d694:	b2c9      	uxtb	r1, r1
 800d696:	2900      	cmp	r1, #0
 800d698:	d00b      	beq.n	800d6b2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d6aa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	e082      	b.n	800d7b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d6b2:	6979      	ldr	r1, [r7, #20]
 800d6b4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d6b8:	2902      	cmp	r1, #2
 800d6ba:	d80e      	bhi.n	800d6da <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d6d2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d6d6:	61fb      	str	r3, [r7, #28]
 800d6d8:	e06e      	b.n	800d7b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d6da:	6979      	ldr	r1, [r7, #20]
 800d6dc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d6e0:	f001 0101 	and.w	r1, r1, #1
 800d6e4:	b2c9      	uxtb	r1, r1
 800d6e6:	2900      	cmp	r1, #0
 800d6e8:	d057      	beq.n	800d79a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d6ea:	6979      	ldr	r1, [r7, #20]
 800d6ec:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	4688      	mov	r8, r1
 800d6f4:	4681      	mov	r9, r0
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	f04f 0a00 	mov.w	sl, #0
 800d6fe:	f04f 0b00 	mov.w	fp, #0
 800d702:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d706:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d70a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d70e:	4650      	mov	r0, sl
 800d710:	4659      	mov	r1, fp
 800d712:	ebb0 0208 	subs.w	r2, r0, r8
 800d716:	eb61 0309 	sbc.w	r3, r1, r9
 800d71a:	f04f 0000 	mov.w	r0, #0
 800d71e:	f04f 0100 	mov.w	r1, #0
 800d722:	0259      	lsls	r1, r3, #9
 800d724:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d728:	0250      	lsls	r0, r2, #9
 800d72a:	4602      	mov	r2, r0
 800d72c:	460b      	mov	r3, r1
 800d72e:	eb12 0408 	adds.w	r4, r2, r8
 800d732:	eb43 0509 	adc.w	r5, r3, r9
 800d736:	f04f 0200 	mov.w	r2, #0
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	01ab      	lsls	r3, r5, #6
 800d740:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d744:	01a2      	lsls	r2, r4, #6
 800d746:	1b11      	subs	r1, r2, r4
 800d748:	6039      	str	r1, [r7, #0]
 800d74a:	eb63 0305 	sbc.w	r3, r3, r5
 800d74e:	607b      	str	r3, [r7, #4]
 800d750:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d754:	460b      	mov	r3, r1
 800d756:	eb13 0308 	adds.w	r3, r3, r8
 800d75a:	60bb      	str	r3, [r7, #8]
 800d75c:	4613      	mov	r3, r2
 800d75e:	eb43 0309 	adc.w	r3, r3, r9
 800d762:	60fb      	str	r3, [r7, #12]
 800d764:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d768:	f04f 0300 	mov.w	r3, #0
 800d76c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d770:	f7f2 fe1e 	bl	80003b0 <__aeabi_uldivmod>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4613      	mov	r3, r2
 800d77a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2204      	movs	r2, #4
 800d780:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d790:	461a      	mov	r2, r3
 800d792:	480d      	ldr	r0, [pc, #52]	@ (800d7c8 <xRAProcess_HandleWaitStates+0x1cc>)
 800d794:	f015 f940 	bl	8022a18 <lUDPLoggingPrintf>
 800d798:	e00b      	b.n	800d7b2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2206      	movs	r2, #6
 800d79e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	3338      	adds	r3, #56	@ 0x38
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4808      	ldr	r0, [pc, #32]	@ (800d7cc <xRAProcess_HandleWaitStates+0x1d0>)
 800d7aa:	f015 f935 	bl	8022a18 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d7b2:	6978      	ldr	r0, [r7, #20]
 800d7b4:	f7fc fa08 	bl	8009bc8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d7b8:	69fb      	ldr	r3, [r7, #28]
    }
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3720      	adds	r7, #32
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7c4:	080261ec 	.word	0x080261ec
 800d7c8:	08026214 	.word	0x08026214
 800d7cc:	08026254 	.word	0x08026254

0800d7d0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08c      	sub	sp, #48	@ 0x30
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d7e4:	2b06      	cmp	r3, #6
 800d7e6:	f200 808c 	bhi.w	800d902 <xRAProcess_HandleOtherStates+0x132>
 800d7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d7f0 <xRAProcess_HandleOtherStates+0x20>)
 800d7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7f0:	0800d80d 	.word	0x0800d80d
 800d7f4:	0800d903 	.word	0x0800d903
 800d7f8:	0800d86f 	.word	0x0800d86f
 800d7fc:	0800d903 	.word	0x0800d903
 800d800:	0800d8eb 	.word	0x0800d8eb
 800d804:	0800d8f5 	.word	0x0800d8f5
 800d808:	0800d903 	.word	0x0800d903
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d80c:	f107 030c 	add.w	r3, r7, #12
 800d810:	2210      	movs	r2, #16
 800d812:	2100      	movs	r1, #0
 800d814:	4618      	mov	r0, r3
 800d816:	f015 fc28 	bl	802306a <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d81a:	23ff      	movs	r3, #255	@ 0xff
 800d81c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d81e:	2302      	movs	r3, #2
 800d820:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d822:	2302      	movs	r3, #2
 800d824:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d826:	233e      	movs	r3, #62	@ 0x3e
 800d828:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d82a:	2100      	movs	r1, #0
 800d82c:	6a38      	ldr	r0, [r7, #32]
 800d82e:	f00a f981 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800d832:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d008      	beq.n	800d84c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d840:	f107 030c 	add.w	r3, r7, #12
 800d844:	4619      	mov	r1, r3
 800d846:	69f8      	ldr	r0, [r7, #28]
 800d848:	f7ff fc24 	bl	800d094 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d852:	3301      	adds	r3, #1
 800d854:	2203      	movs	r2, #3
 800d856:	4619      	mov	r1, r3
 800d858:	482d      	ldr	r0, [pc, #180]	@ (800d910 <xRAProcess_HandleOtherStates+0x140>)
 800d85a:	f015 f8dd 	bl	8022a18 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d85e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d862:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d86c:	e04a      	b.n	800d904 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d874:	f003 0302 	and.w	r3, r3, #2
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d014      	beq.n	800d8a8 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d884:	f36f 0341 	bfc	r3, #1, #1
 800d888:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d89c:	2301      	movs	r3, #1
 800d89e:	f7ff fb2b 	bl	800cef8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d8a2:	481c      	ldr	r0, [pc, #112]	@ (800d914 <xRAProcess_HandleOtherStates+0x144>)
 800d8a4:	f015 f8b8 	bl	8022a18 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3338      	adds	r3, #56	@ 0x38
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	481a      	ldr	r0, [pc, #104]	@ (800d918 <xRAProcess_HandleOtherStates+0x148>)
 800d8b0:	f015 f8b2 	bl	8022a18 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d8b4:	2356      	movs	r3, #86	@ 0x56
 800d8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8bc:	f00a f93a 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800d8c0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d008      	beq.n	800d8da <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	3338      	adds	r3, #56	@ 0x38
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8d6:	f7fe ff25 	bl	800c724 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d8da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2203      	movs	r2, #3
 800d8e4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d8e8:	e00c      	b.n	800d904 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2205      	movs	r2, #5
 800d8ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d8f2:	e007      	b.n	800d904 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f811 	bl	800d91c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d8fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d900:	e000      	b.n	800d904 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d902:	bf00      	nop
        }

        return uxNewReloadTime;
 800d904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d906:	4618      	mov	r0, r3
 800d908:	3730      	adds	r7, #48	@ 0x30
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	08026290 	.word	0x08026290
 800d914:	080262c4 	.word	0x080262c4
 800d918:	080262e8 	.word	0x080262e8

0800d91c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d940:	b590      	push	{r4, r7, lr}
 800d942:	b089      	sub	sp, #36	@ 0x24
 800d944:	af04      	add	r7, sp, #16
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d94a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d94e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d104      	bne.n	800d960 <vRAProcess+0x20>
 800d956:	f240 2189 	movw	r1, #649	@ 0x289
 800d95a:	4828      	ldr	r0, [pc, #160]	@ (800d9fc <vRAProcess+0xbc>)
 800d95c:	f7f4 f896 	bl	8001a8c <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d966:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d96e:	6838      	ldr	r0, [r7, #0]
 800d970:	f7ff ffd4 	bl	800d91c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d974:	68f9      	ldr	r1, [r7, #12]
 800d976:	6838      	ldr	r0, [r7, #0]
 800d978:	f7ff fe40 	bl	800d5fc <xRAProcess_HandleWaitStates>
 800d97c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d97e:	68f9      	ldr	r1, [r7, #12]
 800d980:	6838      	ldr	r0, [r7, #0]
 800d982:	f7ff ff25 	bl	800d7d0 <xRAProcess_HandleOtherStates>
 800d986:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d994:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	461c      	mov	r4, r3
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d9a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	7afb      	ldrb	r3, [r7, #11]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d9b2:	9202      	str	r2, [sp, #8]
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	9000      	str	r0, [sp, #0]
 800d9b8:	4623      	mov	r3, r4
 800d9ba:	460a      	mov	r2, r1
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	4810      	ldr	r0, [pc, #64]	@ (800da00 <vRAProcess+0xc0>)
 800d9c0:	f015 f82a 	bl	8022a18 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00d      	beq.n	800d9e6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	4a0d      	ldr	r2, [pc, #52]	@ (800da04 <vRAProcess+0xc4>)
 800d9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d2:	099b      	lsrs	r3, r3, #6
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	480c      	ldr	r0, [pc, #48]	@ (800da08 <vRAProcess+0xc8>)
 800d9d8:	f015 f81e 	bl	8022a18 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d9dc:	68f9      	ldr	r1, [r7, #12]
 800d9de:	6838      	ldr	r0, [r7, #0]
 800d9e0:	f7fc ff8a 	bl	800a8f8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d9e4:	e006      	b.n	800d9f4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d9e6:	4809      	ldr	r0, [pc, #36]	@ (800da0c <vRAProcess+0xcc>)
 800d9e8:	f015 f816 	bl	8022a18 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	6838      	ldr	r0, [r7, #0]
 800d9f0:	f7fd f836 	bl	800aa60 <vIPSetDHCP_RATimerEnableState>
    }
 800d9f4:	bf00      	nop
 800d9f6:	3714      	adds	r7, #20
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd90      	pop	{r4, r7, pc}
 800d9fc:	08026030 	.word	0x08026030
 800da00:	08026310 	.word	0x08026310
 800da04:	10624dd3 	.word	0x10624dd3
 800da08:	0802635c 	.word	0x0802635c
 800da0c:	08026374 	.word	0x08026374

0800da10 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
 800da1c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d002      	beq.n	800da2a <FreeRTOS_FillEndPoint+0x1a>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	68f9      	ldr	r1, [r7, #12]
 800da2e:	483f      	ldr	r0, [pc, #252]	@ (800db2c <FreeRTOS_FillEndPoint+0x11c>)
 800da30:	f014 fff2 	bl	8022a18 <lUDPLoggingPrintf>
 800da34:	e075      	b.n	800db22 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da3c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800da3e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800da42:	2100      	movs	r1, #0
 800da44:	68b8      	ldr	r0, [r7, #8]
 800da46:	f015 fb10 	bl	802306a <memset>
            pxEndPoint->pxNext = pxNext;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	3303      	adds	r3, #3
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	061a      	lsls	r2, r3, #24
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	3302      	adds	r3, #2
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	041b      	lsls	r3, r3, #16
 800da62:	431a      	orrs	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	3301      	adds	r3, #1
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	021b      	lsls	r3, r3, #8
 800da6c:	4313      	orrs	r3, r2
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	7812      	ldrb	r2, [r2, #0]
 800da72:	4313      	orrs	r3, r2
 800da74:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	3303      	adds	r3, #3
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	061a      	lsls	r2, r3, #24
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	3302      	adds	r3, #2
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	041b      	lsls	r3, r3, #16
 800da86:	431a      	orrs	r2, r3
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	021b      	lsls	r3, r3, #8
 800da90:	4313      	orrs	r3, r2
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	7812      	ldrb	r2, [r2, #0]
 800da96:	431a      	orrs	r2, r3
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	3303      	adds	r3, #3
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	061a      	lsls	r2, r3, #24
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	3302      	adds	r3, #2
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	041b      	lsls	r3, r3, #16
 800daac:	431a      	orrs	r2, r3
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	3301      	adds	r3, #1
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	021b      	lsls	r3, r3, #8
 800dab6:	4313      	orrs	r3, r2
 800dab8:	6a3a      	ldr	r2, [r7, #32]
 800daba:	7812      	ldrb	r2, [r2, #0]
 800dabc:	431a      	orrs	r2, r3
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800dac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac4:	3303      	adds	r3, #3
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	061a      	lsls	r2, r3, #24
 800daca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dacc:	3302      	adds	r3, #2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	041b      	lsls	r3, r3, #16
 800dad2:	431a      	orrs	r2, r3
 800dad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad6:	3301      	adds	r3, #1
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	021b      	lsls	r3, r3, #8
 800dadc:	4313      	orrs	r3, r2
 800dade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dae0:	7812      	ldrb	r2, [r2, #0]
 800dae2:	431a      	orrs	r2, r3
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	43da      	mvns	r2, r3
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	431a      	orrs	r2, r3
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	331c      	adds	r3, #28
 800dafa:	68b9      	ldr	r1, [r7, #8]
 800dafc:	221c      	movs	r2, #28
 800dafe:	4618      	mov	r0, r3
 800db00:	f015 f9a6 	bl	8022e50 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	693a      	ldr	r2, [r7, #16]
 800db08:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	33e8      	adds	r3, #232	@ 0xe8
 800db0e:	2206      	movs	r2, #6
 800db10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db12:	4618      	mov	r0, r3
 800db14:	f015 f99c 	bl	8022e50 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800db18:	68b9      	ldr	r1, [r7, #8]
 800db1a:	68f8      	ldr	r0, [r7, #12]
 800db1c:	f000 f85c 	bl	800dbd8 <FreeRTOS_AddEndPoint>
        }
    }
 800db20:	bf00      	nop
 800db22:	bf00      	nop
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	0802638c 	.word	0x0802638c

0800db30 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800db30:	b480      	push	{r7}
 800db32:	b085      	sub	sp, #20
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d021      	beq.n	800db86 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800db42:	4b14      	ldr	r3, [pc, #80]	@ (800db94 <FreeRTOS_AddNetworkInterface+0x64>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d106      	bne.n	800db58 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800db4a:	4a12      	ldr	r2, [pc, #72]	@ (800db94 <FreeRTOS_AddNetworkInterface+0x64>)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	625a      	str	r2, [r3, #36]	@ 0x24
 800db56:	e016      	b.n	800db86 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800db58:	4b0e      	ldr	r3, [pc, #56]	@ (800db94 <FreeRTOS_AddNetworkInterface+0x64>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	429a      	cmp	r2, r3
 800db64:	d00e      	beq.n	800db84 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d106      	bne.n	800db7c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800db7a:	e004      	b.n	800db86 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db80:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800db82:	e7ec      	b.n	800db5e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800db84:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800db86:	687b      	ldr	r3, [r7, #4]
    }
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr
 800db94:	20001544 	.word	0x20001544

0800db98 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800db98:	b480      	push	{r7}
 800db9a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800db9c:	4b03      	ldr	r3, [pc, #12]	@ (800dbac <FreeRTOS_FirstNetworkInterface+0x14>)
 800db9e:	681b      	ldr	r3, [r3, #0]
    }
 800dba0:	4618      	mov	r0, r3
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	20001544 	.word	0x20001544

0800dbb0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbc2:	60fb      	str	r3, [r7, #12]
 800dbc4:	e001      	b.n	800dbca <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800dbca:	68fb      	ldr	r3, [r7, #12]
    }
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3714      	adds	r7, #20
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d102      	bne.n	800dbfc <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800dbfc:	4b33      	ldr	r3, [pc, #204]	@ (800dccc <FreeRTOS_AddEndPoint+0xf4>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d107      	bne.n	800dc14 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800dc0c:	4a2f      	ldr	r2, [pc, #188]	@ (800dccc <FreeRTOS_AddEndPoint+0xf4>)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	e01a      	b.n	800dc4a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800dc14:	4b2d      	ldr	r3, [pc, #180]	@ (800dccc <FreeRTOS_AddEndPoint+0xf4>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d012      	beq.n	800dc48 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d108      	bne.n	800dc3e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800dc3c:	e005      	b.n	800dc4a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc44:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800dc46:	e7e8      	b.n	800dc1a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800dc48:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc50:	f003 0304 	and.w	r3, r3, #4
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00c      	beq.n	800dc74 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dc60:	4619      	mov	r1, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800dc68:	461a      	mov	r2, r3
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	3390      	adds	r3, #144	@ 0x90
 800dc6e:	4818      	ldr	r0, [pc, #96]	@ (800dcd0 <FreeRTOS_AddEndPoint+0xf8>)
 800dc70:	f014 fed2 	bl	8022a18 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc7a:	f003 0304 	and.w	r3, r3, #4
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d11e      	bne.n	800dcc2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800dc92:	4618      	mov	r0, r3
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	69db      	ldr	r3, [r3, #28]
 800dc98:	061a      	lsls	r2, r3, #24
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	021b      	lsls	r3, r3, #8
 800dca0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dca4:	431a      	orrs	r2, r3
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	0a1b      	lsrs	r3, r3, #8
 800dcac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dcb0:	431a      	orrs	r2, r3
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	69db      	ldr	r3, [r3, #28]
 800dcb6:	0e1b      	lsrs	r3, r3, #24
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	4602      	mov	r2, r0
 800dcbc:	4805      	ldr	r0, [pc, #20]	@ (800dcd4 <FreeRTOS_AddEndPoint+0xfc>)
 800dcbe:	f014 feab 	bl	8022a18 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800dcc2:	683b      	ldr	r3, [r7, #0]
    }
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	20001540 	.word	0x20001540
 800dcd0:	080263cc 	.word	0x080263cc
 800dcd4:	08026400 	.word	0x08026400

0800dcd8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dce0:	4b0d      	ldr	r3, [pc, #52]	@ (800dd18 <FreeRTOS_FirstEndPoint+0x40>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800dce6:	e00c      	b.n	800dd02 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00c      	beq.n	800dd08 <FreeRTOS_FirstEndPoint+0x30>
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d006      	beq.n	800dd08 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd00:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d1ef      	bne.n	800dce8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800dd08:	68fb      	ldr	r3, [r7, #12]
    }
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20001540 	.word	0x20001540

0800dd1c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d015      	beq.n	800dd5c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd36:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800dd38:	e00c      	b.n	800dd54 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d011      	beq.n	800dd64 <FreeRTOS_NextEndPoint+0x48>
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d00b      	beq.n	800dd64 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd52:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1ef      	bne.n	800dd3a <FreeRTOS_NextEndPoint+0x1e>
 800dd5a:	e003      	b.n	800dd64 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f7ff ffbb 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800dd62:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800dd64:	68fb      	ldr	r3, [r7, #12]
    }
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
	...

0800dd70 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dd70:	b480      	push	{r7}
 800dd72:	b085      	sub	sp, #20
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dd7a:	4b1e      	ldr	r3, [pc, #120]	@ (800ddf4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800dd80:	2308      	movs	r3, #8
 800dd82:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800dd84:	4b1c      	ldr	r3, [pc, #112]	@ (800ddf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800ddf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dd8c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d223      	bcs.n	800ddde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800dd96:	4a18      	ldr	r2, [pc, #96]	@ (800ddf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	3312      	adds	r3, #18
 800dd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	4915      	ldr	r1, [pc, #84]	@ (800ddf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	3312      	adds	r3, #18
 800dda8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800ddac:	e017      	b.n	800ddde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ddb4:	f003 0304 	and.w	r3, r3, #4
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10b      	bne.n	800ddd6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00f      	beq.n	800dde4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00b      	beq.n	800dde4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d006      	beq.n	800dde4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dddc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1e4      	bne.n	800ddae <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800dde4:	68fb      	ldr	r3, [r7, #12]
    }
 800dde6:	4618      	mov	r0, r3
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20001540 	.word	0x20001540
 800ddf8:	20001548 	.word	0x20001548

0800ddfc <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	2000      	movs	r0, #0
 800de08:	f000 f8b6 	bl	800df78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800de0c:	4603      	mov	r3, r0
        }
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
	...

0800de18 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800de22:	4b17      	ldr	r3, [pc, #92]	@ (800de80 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800de28:	4b16      	ldr	r3, [pc, #88]	@ (800de84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	3301      	adds	r3, #1
 800de2e:	4a15      	ldr	r2, [pc, #84]	@ (800de84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800de30:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d119      	bne.n	800de6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800de38:	2300      	movs	r3, #0
 800de3a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800de3c:	e016      	b.n	800de6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d005      	beq.n	800de50 <FreeRTOS_FindEndPointOnMAC+0x38>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d109      	bne.n	800de64 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	33e8      	adds	r3, #232	@ 0xe8
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	2206      	movs	r2, #6
 800de58:	4618      	mov	r0, r3
 800de5a:	f015 ffbc 	bl	8023dd6 <memcmp>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d007      	beq.n	800de74 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800de6a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d1e5      	bne.n	800de3e <FreeRTOS_FindEndPointOnMAC+0x26>
 800de72:	e000      	b.n	800de76 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800de74:	bf00      	nop
        }

        return pxEndPoint;
 800de76:	68fb      	ldr	r3, [r7, #12]
    }
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	20001540 	.word	0x20001540
 800de84:	20001548 	.word	0x20001548

0800de88 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800de92:	683a      	ldr	r2, [r7, #0]
 800de94:	6879      	ldr	r1, [r7, #4]
 800de96:	2000      	movs	r0, #0
 800de98:	f000 f806 	bl	800dea8 <FreeRTOS_InterfaceEndPointOnNetMask>
 800de9c:	4603      	mov	r3, r0
    }
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800deb4:	4b2d      	ldr	r3, [pc, #180]	@ (800df6c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800deba:	230e      	movs	r3, #14
 800debc:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800debe:	4b2c      	ldr	r3, [pc, #176]	@ (800df70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	3301      	adds	r3, #1
 800dec4:	4a2a      	ldr	r2, [pc, #168]	@ (800df70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dec6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	429a      	cmp	r2, r3
 800dece:	d22d      	bcs.n	800df2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800ded0:	4a27      	ldr	r2, [pc, #156]	@ (800df70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	3304      	adds	r3, #4
 800ded6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	4924      	ldr	r1, [pc, #144]	@ (800df70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	3304      	adds	r3, #4
 800dee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800dee6:	e021      	b.n	800df2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d005      	beq.n	800defa <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	429a      	cmp	r2, r3
 800def8:	d114      	bne.n	800df24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800df00:	f003 0304 	and.w	r3, r3, #4
 800df04:	b2db      	uxtb	r3, r3
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10c      	bne.n	800df24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df10:	d00f      	beq.n	800df32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	405a      	eors	r2, r3
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800df20:	2b00      	cmp	r3, #0
 800df22:	d006      	beq.n	800df32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800df2a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1da      	bne.n	800dee8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d113      	bne.n	800df60 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	061a      	lsls	r2, r3, #24
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	021b      	lsls	r3, r3, #8
 800df40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df44:	431a      	orrs	r2, r3
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	0a1b      	lsrs	r3, r3, #8
 800df4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df4e:	431a      	orrs	r2, r3
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	0e1b      	lsrs	r3, r3, #24
 800df54:	4313      	orrs	r3, r2
 800df56:	461a      	mov	r2, r3
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4806      	ldr	r0, [pc, #24]	@ (800df74 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800df5c:	f014 fd5c 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800df60:	697b      	ldr	r3, [r7, #20]
    }
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	20001540 	.word	0x20001540
 800df70:	20001548 	.word	0x20001548
 800df74:	08026434 	.word	0x08026434

0800df78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800df82:	4b17      	ldr	r3, [pc, #92]	@ (800dfe0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800df88:	e020      	b.n	800dfcc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d005      	beq.n	800df9c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d113      	bne.n	800dfc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dfa2:	f003 0304 	and.w	r3, r3, #4
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	f7fd fc0b 	bl	800b7d4 <xCompareIPv6_Address>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d007      	beq.n	800dfd4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dfca:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1db      	bne.n	800df8a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800dfd2:	e000      	b.n	800dfd6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800dfd4:	bf00      	nop
            }

            return pxEndPoint;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
        }
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20001540 	.word	0x20001540

0800dfe4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800dfe4:	b5b0      	push	{r4, r5, r7, lr}
 800dfe6:	b0b0      	sub	sp, #192	@ 0xc0
 800dfe8:	af04      	add	r7, sp, #16
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	603b      	str	r3, [r7, #0]
 800dff0:	460b      	mov	r3, r1
 800dff2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800dffa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dffe:	2200      	movs	r2, #0
 800e000:	601a      	str	r2, [r3, #0]
 800e002:	605a      	str	r2, [r3, #4]
 800e004:	609a      	str	r2, [r3, #8]
 800e006:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800e008:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	605a      	str	r2, [r3, #4]
 800e012:	609a      	str	r2, [r3, #8]
 800e014:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800e016:	897b      	ldrh	r3, [r7, #10]
 800e018:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d101      	bne.n	800e024 <pxEasyFit+0x40>
 800e020:	2301      	movs	r3, #1
 800e022:	e000      	b.n	800e026 <pxEasyFit+0x42>
 800e024:	2300      	movs	r3, #0
 800e026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800e030:	2300      	movs	r3, #0
 800e032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800e036:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d123      	bne.n	800e086 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2210      	movs	r2, #16
 800e042:	4619      	mov	r1, r3
 800e044:	4888      	ldr	r0, [pc, #544]	@ (800e268 <pxEasyFit+0x284>)
 800e046:	f015 fec6 	bl	8023dd6 <memcmp>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d101      	bne.n	800e054 <pxEasyFit+0x70>
 800e050:	2301      	movs	r3, #1
 800e052:	e000      	b.n	800e056 <pxEasyFit+0x72>
 800e054:	2300      	movs	r3, #0
 800e056:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800e05a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d105      	bne.n	800e06e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	4619      	mov	r1, r3
 800e068:	4880      	ldr	r0, [pc, #512]	@ (800e26c <pxEasyFit+0x288>)
 800e06a:	f014 fcd5 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	4618      	mov	r0, r3
 800e072:	f000 fa15 	bl	800e4a0 <xIPv6_GetIPType>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d101      	bne.n	800e080 <pxEasyFit+0x9c>
 800e07c:	2301      	movs	r3, #1
 800e07e:	e000      	b.n	800e082 <pxEasyFit+0x9e>
 800e080:	2300      	movs	r3, #0
 800e082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f7ff fe26 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 800e08c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800e090:	e07d      	b.n	800e18e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800e092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e096:	33e8      	adds	r3, #232	@ 0xe8
 800e098:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800e09c:	2206      	movs	r2, #6
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f015 fe99 	bl	8023dd6 <memcmp>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d101      	bne.n	800e0ae <pxEasyFit+0xca>
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	e000      	b.n	800e0b0 <pxEasyFit+0xcc>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800e0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0b8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e0bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d159      	bne.n	800e180 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800e0cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800e0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e0d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d134      	bne.n	800e14a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800e0e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0e4:	3338      	adds	r3, #56	@ 0x38
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f000 f9da 	bl	800e4a0 <xIPv6_GetIPType>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800e0f2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e0f6:	2b05      	cmp	r3, #5
 800e0f8:	d035      	beq.n	800e166 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800e0fa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <pxEasyFit+0x122>
 800e102:	2301      	movs	r3, #1
 800e104:	e000      	b.n	800e108 <pxEasyFit+0x124>
 800e106:	2300      	movs	r3, #0
 800e108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800e10c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e110:	3338      	adds	r3, #56	@ 0x38
 800e112:	6839      	ldr	r1, [r7, #0]
 800e114:	2210      	movs	r2, #16
 800e116:	4618      	mov	r0, r3
 800e118:	f015 fe5d 	bl	8023dd6 <memcmp>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800e122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e126:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800e128:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e12a:	3301      	adds	r3, #1
 800e12c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800e12e:	e01a      	b.n	800e166 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800e130:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800e134:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e138:	429a      	cmp	r2, r3
 800e13a:	d114      	bne.n	800e166 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800e13c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e140:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800e142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e144:	3301      	adds	r3, #1
 800e146:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800e148:	e00d      	b.n	800e166 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800e14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	d108      	bne.n	800e16a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800e158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e15c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800e15e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e160:	3301      	adds	r3, #1
 800e162:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800e164:	e001      	b.n	800e16a <pxEasyFit+0x186>
                           break;
 800e166:	bf00      	nop
 800e168:	e000      	b.n	800e16c <pxEasyFit+0x188>
                        break;
 800e16a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800e16c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e170:	2b01      	cmp	r3, #1
 800e172:	d105      	bne.n	800e180 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800e174:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e176:	3301      	adds	r3, #1
 800e178:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800e17a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e17e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800e180:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff fdc9 	bl	800dd1c <FreeRTOS_NextEndPoint>
 800e18a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800e18e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e192:	2b00      	cmp	r3, #0
 800e194:	f47f af7d 	bne.w	800e092 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800e198:	2300      	movs	r3, #0
 800e19a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e19e:	e017      	b.n	800e1d0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800e1a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	33b0      	adds	r3, #176	@ 0xb0
 800e1a8:	443b      	add	r3, r7
 800e1aa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	dd09      	ble.n	800e1c6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800e1b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	33b0      	adds	r3, #176	@ 0xb0
 800e1ba:	443b      	add	r3, r7
 800e1bc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800e1c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800e1c4:	e008      	b.n	800e1d8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800e1c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e1d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	dde3      	ble.n	800e1a0 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800e1d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d13c      	bne.n	800e25a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800e1e0:	897b      	ldrh	r3, [r7, #10]
 800e1e2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d101      	bne.n	800e1ee <pxEasyFit+0x20a>
 800e1ea:	230a      	movs	r3, #10
 800e1ec:	e000      	b.n	800e1f0 <pxEasyFit+0x20c>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800e1f4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800e1f6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e1fa:	2328      	movs	r3, #40	@ 0x28
 800e1fc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e200:	f001 fc70 	bl	800fae4 <FreeRTOS_inet_ntop>
 800e204:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800e208:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800e20a:	f107 0210 	add.w	r2, r7, #16
 800e20e:	2328      	movs	r3, #40	@ 0x28
 800e210:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e214:	f001 fc66 	bl	800fae4 <FreeRTOS_inet_ntop>
 800e218:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800e21c:	8979      	ldrh	r1, [r7, #10]
 800e21e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e220:	461c      	mov	r4, r3
 800e222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e224:	461d      	mov	r5, r3
 800e226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e228:	4618      	mov	r0, r3
 800e22a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d002      	beq.n	800e238 <pxEasyFit+0x254>
 800e232:	f107 0310 	add.w	r3, r7, #16
 800e236:	e000      	b.n	800e23a <pxEasyFit+0x256>
 800e238:	4b0d      	ldr	r3, [pc, #52]	@ (800e270 <pxEasyFit+0x28c>)
 800e23a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e23e:	2a00      	cmp	r2, #0
 800e240:	d002      	beq.n	800e248 <pxEasyFit+0x264>
 800e242:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e246:	e000      	b.n	800e24a <pxEasyFit+0x266>
 800e248:	4a09      	ldr	r2, [pc, #36]	@ (800e270 <pxEasyFit+0x28c>)
 800e24a:	9202      	str	r2, [sp, #8]
 800e24c:	9301      	str	r3, [sp, #4]
 800e24e:	9000      	str	r0, [sp, #0]
 800e250:	462b      	mov	r3, r5
 800e252:	4622      	mov	r2, r4
 800e254:	4807      	ldr	r0, [pc, #28]	@ (800e274 <pxEasyFit+0x290>)
 800e256:	f014 fbdf 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800e25a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800e25e:	4618      	mov	r0, r3
 800e260:	37b0      	adds	r7, #176	@ 0xb0
 800e262:	46bd      	mov	sp, r7
 800e264:	bdb0      	pop	{r4, r5, r7, pc}
 800e266:	bf00      	nop
 800e268:	0802828c 	.word	0x0802828c
 800e26c:	080264d0 	.word	0x080264d0
 800e270:	080264ec 	.word	0x080264ec
 800e274:	080264f4 	.word	0x080264f4

0800e278 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800e278:	b590      	push	{r4, r7, lr}
 800e27a:	b097      	sub	sp, #92	@ 0x5c
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d104      	bne.n	800e29e <FreeRTOS_MatchingEndpoint+0x26>
 800e294:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800e298:	485e      	ldr	r0, [pc, #376]	@ (800e414 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e29a:	f7f3 fbf7 	bl	8001a8c <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800e2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800e2a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2aa:	f003 0303 	and.w	r3, r3, #3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d004      	beq.n	800e2bc <FreeRTOS_MatchingEndpoint+0x44>
 800e2b2:	f240 319b 	movw	r1, #923	@ 0x39b
 800e2b6:	4857      	ldr	r0, [pc, #348]	@ (800e414 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e2b8:	f7f3 fbe8 	bl	8001a8c <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800e2bc:	4b56      	ldr	r3, [pc, #344]	@ (800e418 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	4a55      	ldr	r2, [pc, #340]	@ (800e418 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e2c4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800e2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2c8:	7b1a      	ldrb	r2, [r3, #12]
 800e2ca:	7b5b      	ldrb	r3, [r3, #13]
 800e2cc:	021b      	lsls	r3, r3, #8
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e2d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e2da:	2210      	movs	r2, #16
 800e2dc:	2100      	movs	r1, #0
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f014 fec3 	bl	802306a <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e2e4:	f107 0314 	add.w	r3, r7, #20
 800e2e8:	2210      	movs	r2, #16
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f014 febc 	bl	802306a <memset>

            switch( usFrameType )
 800e2f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e2f4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d009      	beq.n	800e310 <FreeRTOS_MatchingEndpoint+0x98>
 800e2fc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e300:	4293      	cmp	r3, r2
 800e302:	dc6a      	bgt.n	800e3da <FreeRTOS_MatchingEndpoint+0x162>
 800e304:	2b08      	cmp	r3, #8
 800e306:	d05d      	beq.n	800e3c4 <FreeRTOS_MatchingEndpoint+0x14c>
 800e308:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e30c:	d015      	beq.n	800e33a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800e30e:	e064      	b.n	800e3da <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e312:	3316      	adds	r3, #22
 800e314:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800e318:	6818      	ldr	r0, [r3, #0]
 800e31a:	6859      	ldr	r1, [r3, #4]
 800e31c:	689a      	ldr	r2, [r3, #8]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e324:	3326      	adds	r3, #38	@ 0x26
 800e326:	f107 0414 	add.w	r4, r7, #20
 800e32a:	6818      	ldr	r0, [r3, #0]
 800e32c:	6859      	ldr	r1, [r3, #4]
 800e32e:	689a      	ldr	r2, [r3, #8]
 800e330:	68db      	ldr	r3, [r3, #12]
 800e332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800e334:	2301      	movs	r3, #1
 800e336:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e338:	e050      	b.n	800e3dc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800e33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e340:	8a9b      	ldrh	r3, [r3, #20]
 800e342:	b29b      	uxth	r3, r3
 800e344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e348:	d108      	bne.n	800e35c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e34a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e34c:	331c      	adds	r3, #28
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e354:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e358:	617b      	str	r3, [r7, #20]
 800e35a:	e00d      	b.n	800e378 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800e35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e35e:	8a9b      	ldrh	r3, [r3, #20]
 800e360:	b29b      	uxth	r3, r3
 800e362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e366:	d107      	bne.n	800e378 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e36a:	331c      	adds	r3, #28
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e372:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e376:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37a:	061a      	lsls	r2, r3, #24
 800e37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37e:	021b      	lsls	r3, r3, #8
 800e380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e384:	431a      	orrs	r2, r3
 800e386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e388:	0a1b      	lsrs	r3, r3, #8
 800e38a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e38e:	431a      	orrs	r2, r3
 800e390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e392:	0e1b      	lsrs	r3, r3, #24
 800e394:	ea42 0103 	orr.w	r1, r2, r3
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	061a      	lsls	r2, r3, #24
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	021b      	lsls	r3, r3, #8
 800e3a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e3a4:	431a      	orrs	r2, r3
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e3ae:	431a      	orrs	r2, r3
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	0e1b      	lsrs	r3, r3, #24
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4818      	ldr	r0, [pc, #96]	@ (800e41c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800e3ba:	f014 fb2d 	bl	8022a18 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e3c2:	e00b      	b.n	800e3dc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800e3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3c6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e3ca:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800e3cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3ce:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e3d2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e3d8:	e000      	b.n	800e3dc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800e3da:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800e3dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d113      	bne.n	800e40a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800e3e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3e4:	f107 030c 	add.w	r3, r7, #12
 800e3e8:	6810      	ldr	r0, [r2, #0]
 800e3ea:	6018      	str	r0, [r3, #0]
 800e3ec:	8892      	ldrh	r2, [r2, #4]
 800e3ee:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800e3f0:	f107 0014 	add.w	r0, r7, #20
 800e3f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e3f8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800e3fa:	f107 030c 	add.w	r3, r7, #12
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	4603      	mov	r3, r0
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff fdee 	bl	800dfe4 <pxEasyFit>
 800e408:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800e40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e40c:	4618      	mov	r0, r3
 800e40e:	3754      	adds	r7, #84	@ 0x54
 800e410:	46bd      	mov	sp, r7
 800e412:	bd90      	pop	{r4, r7, pc}
 800e414:	0802651c 	.word	0x0802651c
 800e418:	20001548 	.word	0x20001548
 800e41c:	0802654c 	.word	0x0802654c

0800e420 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800e428:	4b1b      	ldr	r3, [pc, #108]	@ (800e498 <FreeRTOS_FindGateWay+0x78>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800e42e:	e028      	b.n	800e482 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b60      	cmp	r3, #96	@ 0x60
 800e434:	d112      	bne.n	800e45c <FreeRTOS_FindGateWay+0x3c>
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00a      	beq.n	800e45c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	335c      	adds	r3, #92	@ 0x5c
 800e44a:	2210      	movs	r2, #16
 800e44c:	4619      	mov	r1, r3
 800e44e:	4813      	ldr	r0, [pc, #76]	@ (800e49c <FreeRTOS_FindGateWay+0x7c>)
 800e450:	f015 fcc1 	bl	8023dd6 <memcmp>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00f      	beq.n	800e47a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800e45a:	e017      	b.n	800e48c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b40      	cmp	r3, #64	@ 0x40
 800e460:	d10b      	bne.n	800e47a <FreeRTOS_FindGateWay+0x5a>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e468:	f003 0304 	and.w	r3, r3, #4
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d103      	bne.n	800e47a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d107      	bne.n	800e48a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e480:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1d3      	bne.n	800e430 <FreeRTOS_FindGateWay+0x10>
 800e488:	e000      	b.n	800e48c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800e48a:	bf00      	nop
        }

        return pxEndPoint;
 800e48c:	68fb      	ldr	r3, [r7, #12]
    }
 800e48e:	4618      	mov	r0, r3
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	20001540 	.word	0x20001540
 800e49c:	08028244 	.word	0x08028244

0800e4a0 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800e4a8:	2305      	movs	r3, #5
 800e4aa:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d046      	beq.n	800e540 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	e040      	b.n	800e53a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	021b      	lsls	r3, r3, #8
 800e4be:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	785b      	ldrb	r3, [r3, #1]
 800e4c4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800e4ca:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800e4cc:	491f      	ldr	r1, [pc, #124]	@ (800e54c <xIPv6_GetIPType+0xac>)
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	440b      	add	r3, r1
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d108      	bne.n	800e4f2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7fd f929 	bl	800b738 <xIsIPv6Loopback>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800e4ec:	2304      	movs	r3, #4
 800e4ee:	75fb      	strb	r3, [r7, #23]
                        break;
 800e4f0:	e026      	b.n	800e540 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800e4f2:	4916      	ldr	r1, [pc, #88]	@ (800e54c <xIPv6_GetIPType+0xac>)
 800e4f4:	693a      	ldr	r2, [r7, #16]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	4413      	add	r3, r2
 800e4fc:	005b      	lsls	r3, r3, #1
 800e4fe:	440b      	add	r3, r1
 800e500:	3302      	adds	r3, #2
 800e502:	881a      	ldrh	r2, [r3, #0]
 800e504:	89fb      	ldrh	r3, [r7, #14]
 800e506:	4013      	ands	r3, r2
 800e508:	b299      	uxth	r1, r3
 800e50a:	4810      	ldr	r0, [pc, #64]	@ (800e54c <xIPv6_GetIPType+0xac>)
 800e50c:	693a      	ldr	r2, [r7, #16]
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	4403      	add	r3, r0
 800e518:	3304      	adds	r3, #4
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	4299      	cmp	r1, r3
 800e51e:	d109      	bne.n	800e534 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800e520:	490a      	ldr	r1, [pc, #40]	@ (800e54c <xIPv6_GetIPType+0xac>)
 800e522:	693a      	ldr	r2, [r7, #16]
 800e524:	4613      	mov	r3, r2
 800e526:	005b      	lsls	r3, r3, #1
 800e528:	4413      	add	r3, r2
 800e52a:	005b      	lsls	r3, r3, #1
 800e52c:	440b      	add	r3, r1
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	75fb      	strb	r3, [r7, #23]
                    break;
 800e532:	e005      	b.n	800e540 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	3301      	adds	r3, #1
 800e538:	613b      	str	r3, [r7, #16]
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	ddbb      	ble.n	800e4b8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800e540:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	0802829c 	.word	0x0802829c

0800e550 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e562:	4a16      	ldr	r2, [pc, #88]	@ (800e5bc <pcEndpointName+0x6c>)
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	68b8      	ldr	r0, [r7, #8]
 800e568:	f015 fa82 	bl	8023a70 <snprintf>
 800e56c:	e020      	b.n	800e5b0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e574:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d002      	beq.n	800e584 <pcEndpointName+0x34>
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d007      	beq.n	800e592 <pcEndpointName+0x42>
 800e582:	e00f      	b.n	800e5a4 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800e584:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68ba      	ldr	r2, [r7, #8]
 800e58a:	2002      	movs	r0, #2
 800e58c:	f001 faaa 	bl	800fae4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e590:	e00e      	b.n	800e5b0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	200a      	movs	r0, #10
 800e59e:	f001 faa1 	bl	800fae4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e5a2:	e005      	b.n	800e5b0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e5a4:	4a05      	ldr	r2, [pc, #20]	@ (800e5bc <pcEndpointName+0x6c>)
 800e5a6:	6879      	ldr	r1, [r7, #4]
 800e5a8:	68b8      	ldr	r0, [r7, #8]
 800e5aa:	f015 fa61 	bl	8023a70 <snprintf>
                    break;
 800e5ae:	bf00      	nop
            }
        }

        return pcBuffer;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
    }
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0802656c 	.word	0x0802656c

0800e5c0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b086      	sub	sp, #24
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f002 fc3f 	bl	8010e50 <xSocketValid>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d102      	bne.n	800e5de <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	617b      	str	r3, [r7, #20]
 800e5dc:	e015      	b.n	800e60a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d006      	beq.n	800e5f2 <prvValidSocket+0x32>
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	69db      	ldr	r3, [r3, #28]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d102      	bne.n	800e5f2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	617b      	str	r3, [r7, #20]
 800e5f0:	e00b      	b.n	800e60a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	b2db      	uxtb	r3, r3
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d002      	beq.n	800e606 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e600:	2300      	movs	r3, #0
 800e602:	617b      	str	r3, [r7, #20]
 800e604:	e001      	b.n	800e60a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e606:	2301      	movs	r3, #1
 800e608:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e60a:	697b      	ldr	r3, [r7, #20]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e618:	4803      	ldr	r0, [pc, #12]	@ (800e628 <vNetworkSocketsInit+0x14>)
 800e61a:	f7f5 f9a9 	bl	8003970 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e61e:	4803      	ldr	r0, [pc, #12]	@ (800e62c <vNetworkSocketsInit+0x18>)
 800e620:	f7f5 f9a6 	bl	8003970 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e624:	bf00      	nop
 800e626:	bd80      	pop	{r7, pc}
 800e628:	2000160c 	.word	0x2000160c
 800e62c:	20001620 	.word	0x20001620

0800e630 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	607a      	str	r2, [r7, #4]
 800e63c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e63e:	2301      	movs	r3, #1
 800e640:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e646:	f7fb ff97 	bl	800a578 <xIPIsNetworkTaskReady>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d102      	bne.n	800e656 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e650:	2300      	movs	r3, #0
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	e05e      	b.n	800e714 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d004      	beq.n	800e666 <prvDetermineSocketSize+0x36>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2b0a      	cmp	r3, #10
 800e660:	d001      	beq.n	800e666 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e662:	2300      	movs	r3, #0
 800e664:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b02      	cmp	r3, #2
 800e66a:	d002      	beq.n	800e672 <prvDetermineSocketSize+0x42>
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b0a      	cmp	r3, #10
 800e670:	d101      	bne.n	800e676 <prvDetermineSocketSize+0x46>
 800e672:	2301      	movs	r3, #1
 800e674:	e000      	b.n	800e678 <prvDetermineSocketSize+0x48>
 800e676:	2300      	movs	r3, #0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d104      	bne.n	800e686 <prvDetermineSocketSize+0x56>
 800e67c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e680:	4827      	ldr	r0, [pc, #156]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e682:	f7f3 fa03 	bl	8001a8c <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e686:	4b27      	ldr	r3, [pc, #156]	@ (800e724 <prvDetermineSocketSize+0xf4>)
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d004      	beq.n	800e69a <prvDetermineSocketSize+0x6a>
 800e690:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e694:	4822      	ldr	r0, [pc, #136]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e696:	f7f3 f9f9 	bl	8001a8c <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e69a:	4b23      	ldr	r3, [pc, #140]	@ (800e728 <prvDetermineSocketSize+0xf8>)
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d004      	beq.n	800e6ae <prvDetermineSocketSize+0x7e>
 800e6a4:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e6a8:	481d      	ldr	r0, [pc, #116]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e6aa:	f7f3 f9ef 	bl	8001a8c <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b11      	cmp	r3, #17
 800e6b2:	d110      	bne.n	800e6d6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d009      	beq.n	800e6ce <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d004      	beq.n	800e6ce <prvDetermineSocketSize+0x9e>
 800e6c4:	f240 2106 	movw	r1, #518	@ 0x206
 800e6c8:	4815      	ldr	r0, [pc, #84]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e6ca:	f7f3 f9df 	bl	8001a8c <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2270      	movs	r2, #112	@ 0x70
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	e01e      	b.n	800e714 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2b06      	cmp	r3, #6
 800e6da:	d111      	bne.n	800e700 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d009      	beq.n	800e6f6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d004      	beq.n	800e6f6 <prvDetermineSocketSize+0xc6>
 800e6ec:	f240 2113 	movw	r1, #531	@ 0x213
 800e6f0:	480b      	ldr	r0, [pc, #44]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e6f2:	f7f3 f9cb 	bl	8001a8c <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	e009      	b.n	800e714 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e700:	2300      	movs	r3, #0
 800e702:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d004      	beq.n	800e714 <prvDetermineSocketSize+0xe4>
 800e70a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e70e:	4804      	ldr	r0, [pc, #16]	@ (800e720 <prvDetermineSocketSize+0xf0>)
 800e710:	f7f3 f9bc 	bl	8001a8c <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e714:	697b      	ldr	r3, [r7, #20]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	08026574 	.word	0x08026574
 800e724:	2000160c 	.word	0x2000160c
 800e728:	20001620 	.word	0x20001620

0800e72c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b084      	sub	sp, #16
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e73c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	7a1b      	ldrb	r3, [r3, #8]
 800e744:	f003 0301 	and.w	r3, r3, #1
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d00a      	beq.n	800e764 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e74e:	2314      	movs	r3, #20
 800e750:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e758:	89fb      	ldrh	r3, [r7, #14]
 800e75a:	1ad3      	subs	r3, r2, r3
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e76a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e76e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e772:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e776:	f7fc fc85 	bl	800b084 <FreeRTOS_round_up>
 800e77a:	4602      	mov	r2, r0
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e788:	08db      	lsrs	r3, r3, #3
 800e78a:	4a10      	ldr	r2, [pc, #64]	@ (800e7cc <prvInitialiseTCPFields+0xa0>)
 800e78c:	fba2 2303 	umull	r2, r3, r2, r3
 800e790:	099b      	lsrs	r3, r3, #6
 800e792:	4619      	mov	r1, r3
 800e794:	2001      	movs	r0, #1
 800e796:	f7fc fc35 	bl	800b004 <FreeRTOS_max_size_t>
 800e79a:	4602      	mov	r2, r0
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e7a8:	08db      	lsrs	r3, r3, #3
 800e7aa:	4a08      	ldr	r2, [pc, #32]	@ (800e7cc <prvInitialiseTCPFields+0xa0>)
 800e7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e7b0:	099b      	lsrs	r3, r3, #6
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	f7fc fc25 	bl	800b004 <FreeRTOS_max_size_t>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e7c2:	bf00      	nop
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	2ce33e6d 	.word	0x2ce33e6d

0800e7d0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08a      	sub	sp, #40	@ 0x28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2b0a      	cmp	r3, #10
 800e7e8:	d002      	beq.n	800e7f0 <FreeRTOS_socket+0x20>
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2b02      	cmp	r3, #2
 800e7ee:	d101      	bne.n	800e7f4 <FreeRTOS_socket+0x24>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e000      	b.n	800e7f6 <FreeRTOS_socket+0x26>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d104      	bne.n	800e804 <FreeRTOS_socket+0x34>
 800e7fa:	f240 2171 	movw	r1, #625	@ 0x271
 800e7fe:	4845      	ldr	r0, [pc, #276]	@ (800e914 <FreeRTOS_socket+0x144>)
 800e800:	f7f3 f944 	bl	8001a8c <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d10c      	bne.n	800e824 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d005      	beq.n	800e81c <FreeRTOS_socket+0x4c>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	2b02      	cmp	r3, #2
 800e814:	d105      	bne.n	800e822 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e816:	2311      	movs	r3, #17
 800e818:	623b      	str	r3, [r7, #32]
                    break;
 800e81a:	e003      	b.n	800e824 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e81c:	2306      	movs	r3, #6
 800e81e:	623b      	str	r3, [r7, #32]
                    break;
 800e820:	e000      	b.n	800e824 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e822:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e824:	f107 0314 	add.w	r3, r7, #20
 800e828:	6a3a      	ldr	r2, [r7, #32]
 800e82a:	68b9      	ldr	r1, [r7, #8]
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f7ff feff 	bl	800e630 <prvDetermineSocketSize>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d103      	bne.n	800e840 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e838:	f04f 33ff 	mov.w	r3, #4294967295
 800e83c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e83e:	e063      	b.n	800e908 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	4618      	mov	r0, r3
 800e844:	f7f8 f986 	bl	8006b54 <pvPortMalloc>
 800e848:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d103      	bne.n	800e858 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e850:	f04f 33ff 	mov.w	r3, #4294967295
 800e854:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e856:	e057      	b.n	800e908 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e858:	f7f4 feb5 	bl	80035c6 <xEventGroupCreate>
 800e85c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d106      	bne.n	800e872 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e864:	69f8      	ldr	r0, [r7, #28]
 800e866:	f7f8 fa49 	bl	8006cfc <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e86a:	f04f 33ff 	mov.w	r3, #4294967295
 800e86e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e870:	e04a      	b.n	800e908 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	461a      	mov	r2, r3
 800e876:	2100      	movs	r1, #0
 800e878:	69f8      	ldr	r0, [r7, #28]
 800e87a:	f014 fbf6 	bl	802306a <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b02      	cmp	r3, #2
 800e888:	d008      	beq.n	800e89c <FreeRTOS_socket+0xcc>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2b0a      	cmp	r3, #10
 800e88e:	d10b      	bne.n	800e8a8 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e890:	69fa      	ldr	r2, [r7, #28]
 800e892:	7a13      	ldrb	r3, [r2, #8]
 800e894:	f043 0301 	orr.w	r3, r3, #1
 800e898:	7213      	strb	r3, [r2, #8]
                        break;
 800e89a:	e009      	b.n	800e8b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	7a13      	ldrb	r3, [r2, #8]
 800e8a0:	f36f 0300 	bfc	r3, #0, #1
 800e8a4:	7213      	strb	r3, [r2, #8]
                        break;
 800e8a6:	e003      	b.n	800e8b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e8a8:	481b      	ldr	r0, [pc, #108]	@ (800e918 <FreeRTOS_socket+0x148>)
 800e8aa:	f014 f8b5 	bl	8022a18 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e8ae:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	2b11      	cmp	r3, #17
 800e8b4:	d105      	bne.n	800e8c2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	3354      	adds	r3, #84	@ 0x54
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f5 f858 	bl	8003970 <vListInitialise>
 800e8c0:	e007      	b.n	800e8d2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	2b06      	cmp	r3, #6
 800e8c6:	d104      	bne.n	800e8d2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	69f8      	ldr	r0, [r7, #28]
 800e8ce:	f7ff ff2d 	bl	800e72c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	330c      	adds	r3, #12
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7f5 f86a 	bl	80039b0 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	69fa      	ldr	r2, [r7, #28]
 800e8e0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8e8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8f0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3728      	adds	r7, #40	@ 0x28
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	08026574 	.word	0x08026574
 800e918:	080265a4 	.word	0x080265a4

0800e91c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e924:	2200      	movs	r2, #0
 800e926:	2111      	movs	r1, #17
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff fe49 	bl	800e5c0 <prvValidSocket>
 800e92e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d10d      	bne.n	800e952 <prvMakeSureSocketIsBound+0x36>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d109      	bne.n	800e952 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e93e:	2200      	movs	r2, #0
 800e940:	2100      	movs	r1, #0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 f934 	bl	800ebb0 <FreeRTOS_bind>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e94e:	2300      	movs	r3, #0
 800e950:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e952:	68fb      	ldr	r3, [r7, #12]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b088      	sub	sp, #32
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
 800e968:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e96e:	2304      	movs	r3, #4
 800e970:	753b      	strb	r3, [r7, #20]
 800e972:	2300      	movs	r3, #0
 800e974:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e978:	785b      	ldrb	r3, [r3, #1]
 800e97a:	2b02      	cmp	r3, #2
 800e97c:	d006      	beq.n	800e98c <prvSendUDPPacket+0x30>
 800e97e:	2b0a      	cmp	r3, #10
 800e980:	d109      	bne.n	800e996 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e982:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e984:	68b8      	ldr	r0, [r7, #8]
 800e986:	f7fd f903 	bl	800bb90 <xSend_UDP_Update_IPv6>
                break;
 800e98a:	e005      	b.n	800e998 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e98c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e98e:	68b8      	ldr	r0, [r7, #8]
 800e990:	f7fc fd68 	bl	800b464 <xSend_UDP_Update_IPv4>
                break;
 800e994:	e000      	b.n	800e998 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e996:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99c:	441a      	add	r2, r3
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a4:	885a      	ldrh	r2, [r3, #2]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	b29a      	uxth	r2, r3
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9b8:	3306      	adds	r3, #6
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e9c0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e9c6:	f107 0314 	add.w	r3, r7, #20
 800e9ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7fb fa37 	bl	8009e40 <xSendEventStructToIPTask>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d10b      	bne.n	800e9f0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d00d      	beq.n	800ea00 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	4798      	blx	r3
 800e9ee:	e007      	b.n	800ea00 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	f003 0301 	and.w	r3, r3, #1
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d102      	bne.n	800ea00 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e9fa:	68b8      	ldr	r0, [r7, #8]
 800e9fc:	f009 f902 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800ea00:	69fb      	ldr	r3, [r7, #28]
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3720      	adds	r7, #32
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b08e      	sub	sp, #56	@ 0x38
 800ea0e:	af04      	add	r7, sp, #16
 800ea10:	60f8      	str	r0, [r7, #12]
 800ea12:	60b9      	str	r1, [r7, #8]
 800ea14:	607a      	str	r2, [r7, #4]
 800ea16:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea20:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	f003 0310 	and.w	r3, r3, #16
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800ea2c:	f7fc f94a 	bl	800acc4 <xIsCallingFromIPTask>
 800ea30:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d001      	beq.n	800ea3a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800ea36:	2300      	movs	r3, #0
 800ea38:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f003 0301 	and.w	r3, r3, #1
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d128      	bne.n	800ea96 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800ea44:	f107 0310 	add.w	r3, r7, #16
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f6 fdbf 	bl	80055cc <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800ea4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	4413      	add	r3, r2
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	4611      	mov	r1, r2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f009 f86b 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 800ea5e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d01b      	beq.n	800ea9e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800ea66:	6a3b      	ldr	r3, [r7, #32]
 800ea68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea6c:	4413      	add	r3, r2
 800ea6e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	68b9      	ldr	r1, [r7, #8]
 800ea74:	69f8      	ldr	r0, [r7, #28]
 800ea76:	f014 f9eb 	bl	8022e50 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800ea7a:	f107 0218 	add.w	r2, r7, #24
 800ea7e:	f107 0310 	add.w	r3, r7, #16
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f6 fdd9 	bl	800563c <xTaskCheckForTimeOut>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d106      	bne.n	800ea9e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	61bb      	str	r3, [r7, #24]
 800ea94:	e003      	b.n	800ea9e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800ea96:	68b8      	ldr	r0, [r7, #8]
 800ea98:	f7fc f8cc 	bl	800ac34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800ea9c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800ea9e:	6a3b      	ldr	r3, [r7, #32]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d010      	beq.n	800eac6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eaa8:	6a3b      	ldr	r3, [r7, #32]
 800eaaa:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eab0:	9202      	str	r2, [sp, #8]
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	6a39      	ldr	r1, [r7, #32]
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff ff4c 	bl	800e95c <prvSendUDPPacket>
 800eac4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3728      	adds	r7, #40	@ 0x28
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b090      	sub	sp, #64	@ 0x40
 800ead4:	af02      	add	r7, sp, #8
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	607a      	str	r2, [r7, #4]
 800eadc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800eade:	2300      	movs	r3, #0
 800eae0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800eaee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d013      	beq.n	800eb1c <FreeRTOS_sendto+0x4c>
 800eaf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaf6:	785b      	ldrb	r3, [r3, #1]
 800eaf8:	2b0a      	cmp	r3, #10
 800eafa:	d00f      	beq.n	800eb1c <FreeRTOS_sendto+0x4c>
 800eafc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b02      	cmp	r3, #2
 800eb02:	d00b      	beq.n	800eb1c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800eb04:	f107 0310 	add.w	r3, r7, #16
 800eb08:	2218      	movs	r2, #24
 800eb0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f014 f99f 	bl	8022e50 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800eb12:	2302      	movs	r3, #2
 800eb14:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800eb16:	f107 0310 	add.w	r3, r7, #16
 800eb1a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800eb1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d104      	bne.n	800eb2c <FreeRTOS_sendto+0x5c>
 800eb22:	f240 6143 	movw	r1, #1603	@ 0x643
 800eb26:	4820      	ldr	r0, [pc, #128]	@ (800eba8 <FreeRTOS_sendto+0xd8>)
 800eb28:	f7f2 ffb0 	bl	8001a8c <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d104      	bne.n	800eb3c <FreeRTOS_sendto+0x6c>
 800eb32:	f240 6144 	movw	r1, #1604	@ 0x644
 800eb36:	481c      	ldr	r0, [pc, #112]	@ (800eba8 <FreeRTOS_sendto+0xd8>)
 800eb38:	f7f2 ffa8 	bl	8001a8c <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800eb3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb3e:	785b      	ldrb	r3, [r3, #1]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d007      	beq.n	800eb54 <FreeRTOS_sendto+0x84>
 800eb44:	2b0a      	cmp	r3, #10
 800eb46:	d10b      	bne.n	800eb60 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800eb48:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800eb4c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800eb4e:	233e      	movs	r3, #62	@ 0x3e
 800eb50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800eb52:	e00c      	b.n	800eb6e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800eb54:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800eb58:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800eb5a:	232a      	movs	r3, #42	@ 0x2a
 800eb5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800eb5e:	e006      	b.n	800eb6e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800eb60:	4812      	ldr	r0, [pc, #72]	@ (800ebac <FreeRTOS_sendto+0xdc>)
 800eb62:	f013 ff59 	bl	8022a18 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb66:	f06f 0315 	mvn.w	r3, #21
 800eb6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800eb6c:	bf00      	nop
    }

    if( lReturn == 0 )
 800eb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d114      	bne.n	800eb9e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d810      	bhi.n	800eb9e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800eb7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb7e:	f7ff fecd 	bl	800e91c <prvMakeSureSocketIsBound>
 800eb82:	4603      	mov	r3, r0
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d10a      	bne.n	800eb9e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800eb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb8a:	9301      	str	r3, [sp, #4]
 800eb8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	68b9      	ldr	r1, [r7, #8]
 800eb96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb98:	f7ff ff37 	bl	800ea0a <prvSendTo_ActualSend>
 800eb9c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800eb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800eba0:	4618      	mov	r0, r3
 800eba2:	3738      	adds	r7, #56	@ 0x38
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	08026574 	.word	0x08026574
 800ebac:	08026628 	.word	0x08026628

0800ebb0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b090      	sub	sp, #64	@ 0x40
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d013      	beq.n	800ebf2 <FreeRTOS_bind+0x42>
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	785b      	ldrb	r3, [r3, #1]
 800ebce:	2b0a      	cmp	r3, #10
 800ebd0:	d00f      	beq.n	800ebf2 <FreeRTOS_bind+0x42>
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	785b      	ldrb	r3, [r3, #1]
 800ebd6:	2b02      	cmp	r3, #2
 800ebd8:	d00b      	beq.n	800ebf2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800ebda:	f107 0310 	add.w	r3, r7, #16
 800ebde:	2218      	movs	r2, #24
 800ebe0:	68b9      	ldr	r1, [r7, #8]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f014 f934 	bl	8022e50 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800ebe8:	2302      	movs	r3, #2
 800ebea:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800ebec:	f107 0310 	add.w	r3, r7, #16
 800ebf0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800ebf2:	f7fc f867 	bl	800acc4 <xIsCallingFromIPTask>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d004      	beq.n	800ec06 <FreeRTOS_bind+0x56>
 800ebfc:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800ec00:	484b      	ldr	r0, [pc, #300]	@ (800ed30 <FreeRTOS_bind+0x180>)
 800ec02:	f7f2 ff43 	bl	8001a8c <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800ec06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec08:	f002 f922 	bl	8010e50 <xSocketValid>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d103      	bne.n	800ec1a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ec12:	f06f 0315 	mvn.w	r3, #21
 800ec16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec18:	e084      	b.n	800ed24 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1c:	69db      	ldr	r3, [r3, #28]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d009      	beq.n	800ec36 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ec26:	4619      	mov	r1, r3
 800ec28:	4842      	ldr	r0, [pc, #264]	@ (800ed34 <FreeRTOS_bind+0x184>)
 800ec2a:	f013 fef5 	bl	8022a18 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ec2e:	f06f 0315 	mvn.w	r3, #21
 800ec32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec34:	e076      	b.n	800ed24 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ec36:	2309      	movs	r3, #9
 800ec38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d042      	beq.n	800eccc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	785b      	ldrb	r3, [r3, #1]
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d010      	beq.n	800ec70 <FreeRTOS_bind+0xc0>
 800ec4e:	2b0a      	cmp	r3, #10
 800ec50:	d129      	bne.n	800eca6 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ec52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec54:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	3308      	adds	r3, #8
 800ec5c:	2210      	movs	r2, #16
 800ec5e:	4619      	mov	r1, r3
 800ec60:	f014 f8f6 	bl	8022e50 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800ec64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec66:	7a13      	ldrb	r3, [r2, #8]
 800ec68:	f043 0301 	orr.w	r3, r3, #1
 800ec6c:	7213      	strb	r3, [r2, #8]
                        break;
 800ec6e:	e01e      	b.n	800ecae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	061a      	lsls	r2, r3, #24
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec80:	431a      	orrs	r2, r3
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	0a1b      	lsrs	r3, r3, #8
 800ec88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ec8c:	431a      	orrs	r2, r3
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	0e1b      	lsrs	r3, r3, #24
 800ec94:	431a      	orrs	r2, r3
 800ec96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec98:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800ec9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec9c:	7a13      	ldrb	r3, [r2, #8]
 800ec9e:	f36f 0300 	bfc	r3, #0, #1
 800eca2:	7213      	strb	r3, [r2, #8]
                        break;
 800eca4:	e003      	b.n	800ecae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800eca6:	4824      	ldr	r0, [pc, #144]	@ (800ed38 <FreeRTOS_bind+0x188>)
 800eca8:	f013 feb6 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800ecac:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	885b      	ldrh	r3, [r3, #2]
 800ecb2:	021b      	lsls	r3, r3, #8
 800ecb4:	b21a      	sxth	r2, r3
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	0a1b      	lsrs	r3, r3, #8
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	b21b      	sxth	r3, r3
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800ecca:	e009      	b.n	800ece0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800eccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecce:	2200      	movs	r2, #0
 800ecd0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ecd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecd4:	3328      	adds	r3, #40	@ 0x28
 800ecd6:	2210      	movs	r2, #16
 800ecd8:	2100      	movs	r1, #0
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f014 f9c5 	bl	802306a <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ece0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ece4:	f04f 31ff 	mov.w	r1, #4294967295
 800ece8:	4618      	mov	r0, r3
 800ecea:	f7fb f8a9 	bl	8009e40 <xSendEventStructToIPTask>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d106      	bne.n	800ed02 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800ecf4:	4811      	ldr	r0, [pc, #68]	@ (800ed3c <FreeRTOS_bind+0x18c>)
 800ecf6:	f013 fe8f 	bl	8022a18 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800ecfa:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800ecfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed00:	e010      	b.n	800ed24 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800ed02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed04:	6858      	ldr	r0, [r3, #4]
 800ed06:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	2201      	movs	r2, #1
 800ed10:	2110      	movs	r1, #16
 800ed12:	f7f4 fc6f 	bl	80035f4 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800ed16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed18:	69db      	ldr	r3, [r3, #28]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d102      	bne.n	800ed24 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ed1e:	f06f 0315 	mvn.w	r3, #21
 800ed22:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800ed24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3738      	adds	r7, #56	@ 0x38
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	08026574 	.word	0x08026574
 800ed34:	08026650 	.word	0x08026650
 800ed38:	0802667c 	.word	0x0802667c
 800ed3c:	080266a4 	.word	0x080266a4

0800ed40 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <prvSocketBindAdd+0x22>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed5e:	2b06      	cmp	r3, #6
 800ed60:	d024      	beq.n	800edac <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	885b      	ldrh	r3, [r3, #2]
 800ed66:	4619      	mov	r1, r3
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 fdf1 	bl	800f950 <pxListFindListItemWithValue>
 800ed6e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d01b      	beq.n	800edac <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed7a:	2b06      	cmp	r3, #6
 800ed7c:	d101      	bne.n	800ed82 <prvSocketBindAdd+0x42>
 800ed7e:	493e      	ldr	r1, [pc, #248]	@ (800ee78 <prvSocketBindAdd+0x138>)
 800ed80:	e000      	b.n	800ed84 <prvSocketBindAdd+0x44>
 800ed82:	493e      	ldr	r1, [pc, #248]	@ (800ee7c <prvSocketBindAdd+0x13c>)
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	885b      	ldrh	r3, [r3, #2]
 800ed88:	021b      	lsls	r3, r3, #8
 800ed8a:	b21a      	sxth	r2, r3
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	885b      	ldrh	r3, [r3, #2]
 800ed90:	0a1b      	lsrs	r3, r3, #8
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	b21b      	sxth	r3, r3
 800ed96:	4313      	orrs	r3, r2
 800ed98:	b21b      	sxth	r3, r3
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	4838      	ldr	r0, [pc, #224]	@ (800ee80 <prvSocketBindAdd+0x140>)
 800eda0:	f013 fe3a 	bl	8022a18 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800eda4:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800eda8:	617b      	str	r3, [r7, #20]
 800edaa:	e060      	b.n	800ee6e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	885b      	ldrh	r3, [r3, #2]
 800edb0:	461a      	mov	r2, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	021b      	lsls	r3, r3, #8
 800edbc:	b21a      	sxth	r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	885b      	ldrh	r3, [r3, #2]
 800edc2:	0a1b      	lsrs	r3, r3, #8
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	b21b      	sxth	r3, r3
 800edc8:	4313      	orrs	r3, r2
 800edca:	b21b      	sxth	r3, r3
 800edcc:	b29a      	uxth	r2, r3
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	785b      	ldrb	r3, [r3, #1]
 800edd6:	2b0a      	cmp	r3, #10
 800edd8:	d109      	bne.n	800edee <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	3308      	adds	r3, #8
 800ede4:	2210      	movs	r2, #16
 800ede6:	4619      	mov	r1, r3
 800ede8:	f014 f832 	bl	8022e50 <memcpy>
 800edec:	e00c      	b.n	800ee08 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d008      	beq.n	800ee08 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	2107      	movs	r1, #7
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7fe ffb7 	bl	800dd70 <FreeRTOS_FindEndPointOnIP_IPv4>
 800ee02:	4602      	mov	r2, r0
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d019      	beq.n	800ee44 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	061a      	lsls	r2, r3, #24
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	021b      	lsls	r3, r3, #8
 800ee20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ee24:	431a      	orrs	r2, r3
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	0a1b      	lsrs	r3, r3, #8
 800ee2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ee32:	431a      	orrs	r2, r3
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	0e1b      	lsrs	r3, r3, #24
 800ee3c:	431a      	orrs	r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	629a      	str	r2, [r3, #40]	@ 0x28
 800ee42:	e00a      	b.n	800ee5a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	785b      	ldrb	r3, [r3, #1]
 800ee48:	2b0a      	cmp	r3, #10
 800ee4a:	d006      	beq.n	800ee5a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	3328      	adds	r3, #40	@ 0x28
 800ee50:	2210      	movs	r2, #16
 800ee52:	2100      	movs	r1, #0
 800ee54:	4618      	mov	r0, r3
 800ee56:	f014 f908 	bl	802306a <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800ee5a:	f7f5 fefb 	bl	8004c54 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	330c      	adds	r3, #12
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7f4 fdb0 	bl	80039ca <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800ee6a:	f7f5 ff01 	bl	8004c70 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800ee6e:	697b      	ldr	r3, [r7, #20]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3718      	adds	r7, #24
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	080266c8 	.word	0x080266c8
 800ee7c:	080266cc 	.word	0x080266cc
 800ee80:	080266d0 	.word	0x080266d0

0800ee84 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08e      	sub	sp, #56	@ 0x38
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
 800ee90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800ee92:	2300      	movs	r3, #0
 800ee94:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f001 ffd8 	bl	8010e50 <xSocketValid>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d004      	beq.n	800eeb0 <vSocketBind+0x2c>
 800eea6:	f240 716f 	movw	r1, #1903	@ 0x76f
 800eeaa:	4828      	ldr	r0, [pc, #160]	@ (800ef4c <vSocketBind+0xc8>)
 800eeac:	f7f2 fdee 	bl	8001a8c <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eeb6:	2b06      	cmp	r3, #6
 800eeb8:	d102      	bne.n	800eec0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800eeba:	4b25      	ldr	r3, [pc, #148]	@ (800ef50 <vSocketBind+0xcc>)
 800eebc:	633b      	str	r3, [r7, #48]	@ 0x30
 800eebe:	e001      	b.n	800eec4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800eec0:	4b24      	ldr	r3, [pc, #144]	@ (800ef54 <vSocketBind+0xd0>)
 800eec2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800eec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d115      	bne.n	800eef6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800eed0:	2218      	movs	r2, #24
 800eed2:	2100      	movs	r1, #0
 800eed4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eed6:	f014 f8c8 	bl	802306a <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	7a1b      	ldrb	r3, [r3, #8]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	220a      	movs	r2, #10
 800eeec:	705a      	strb	r2, [r3, #1]
 800eeee:	e002      	b.n	800eef6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800eef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef2:	2202      	movs	r2, #2
 800eef4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800eef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d104      	bne.n	800ef06 <vSocketBind+0x82>
 800eefc:	f240 719b 	movw	r1, #1947	@ 0x79b
 800ef00:	4812      	ldr	r0, [pc, #72]	@ (800ef4c <vSocketBind+0xc8>)
 800ef02:	f7f2 fdc3 	bl	8001a8c <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ef06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef08:	885b      	ldrh	r3, [r3, #2]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d111      	bne.n	800ef32 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fcc3 	bl	800f8a0 <prvGetPrivatePortNumber>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef20:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ef22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef24:	885b      	ldrh	r3, [r3, #2]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ef2a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800ef30:	e006      	b.n	800ef40 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f7ff ff01 	bl	800ed40 <prvSocketBindAdd>
 800ef3e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800ef40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800ef42:	4618      	mov	r0, r3
 800ef44:	3738      	adds	r7, #56	@ 0x38
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	08026574 	.word	0x08026574
 800ef50:	20001620 	.word	0x20001620
 800ef54:	2000160c 	.word	0x2000160c

0800ef58 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800ef64:	230a      	movs	r3, #10
 800ef66:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f001 ff6f 	bl	8010e50 <xSocketValid>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d102      	bne.n	800ef7e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	e02f      	b.n	800efde <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef84:	2b06      	cmp	r3, #6
 800ef86:	d10c      	bne.n	800efa2 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	2200      	movs	r2, #0
 800ef94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800efa0:	e00a      	b.n	800efb8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800efa8:	2b11      	cmp	r3, #17
 800efaa:	d105      	bne.n	800efb8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	2200      	movs	r2, #0
 800efb0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	2200      	movs	r2, #0
 800efb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800efb8:	f107 0308 	add.w	r3, r7, #8
 800efbc:	f04f 31ff 	mov.w	r1, #4294967295
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fa ff3d 	bl	8009e40 <xSendEventStructToIPTask>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d106      	bne.n	800efda <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800efcc:	4806      	ldr	r0, [pc, #24]	@ (800efe8 <FreeRTOS_closesocket+0x90>)
 800efce:	f013 fd23 	bl	8022a18 <lUDPLoggingPrintf>
            xResult = -1;
 800efd2:	f04f 33ff 	mov.w	r3, #4294967295
 800efd6:	617b      	str	r3, [r7, #20]
 800efd8:	e001      	b.n	800efde <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800efda:	2301      	movs	r3, #1
 800efdc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800efde:	697b      	ldr	r3, [r7, #20]
}
 800efe0:	4618      	mov	r0, r3
 800efe2:	3718      	adds	r7, #24
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	080266f4 	.word	0x080266f4

0800efec <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800efec:	b590      	push	{r4, r7, lr}
 800efee:	b085      	sub	sp, #20
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800effa:	2b06      	cmp	r3, #6
 800effc:	d129      	bne.n	800f052 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f004:	2b00      	cmp	r3, #0
 800f006:	d005      	beq.n	800f014 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f00e:	4618      	mov	r0, r3
 800f010:	f008 fdf8 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f01a:	4618      	mov	r0, r3
 800f01c:	f007 f804 	bl	8016028 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f026:	2b00      	cmp	r3, #0
 800f028:	d005      	beq.n	800f036 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f030:	4618      	mov	r0, r3
 800f032:	f7f7 fe63 	bl	8006cfc <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f046:	4618      	mov	r0, r3
 800f048:	f7f7 fe58 	bl	8006cfc <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f8bd 	bl	800f1cc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	69db      	ldr	r3, [r3, #28]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d008      	beq.n	800f06c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800f05a:	f7f5 fdfb 	bl	8004c54 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	330c      	adds	r3, #12
 800f062:	4618      	mov	r0, r3
 800f064:	f7f4 fd0e 	bl	8003a84 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800f068:	f7f5 fe02 	bl	8004c70 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f072:	2b11      	cmp	r3, #17
 800f074:	d10f      	bne.n	800f096 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800f076:	e00a      	b.n	800f08e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	4618      	mov	r0, r3
 800f084:	f7f4 fcfe 	bl	8003a84 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f008 fdbb 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1f0      	bne.n	800f078 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d004      	beq.n	800f0a8 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7f4 fc0c 	bl	80038c0 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f0ae:	2b06      	cmp	r3, #6
 800f0b0:	d10c      	bne.n	800f0cc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 f816 	bl	800f0e4 <prvSocketProps>
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	f008 fdf5 	bl	8017ca8 <uxGetNumberOfFreeNetworkBuffers>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	4b06      	ldr	r3, [pc, #24]	@ (800f0dc <vSocketClose+0xf0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	4806      	ldr	r0, [pc, #24]	@ (800f0e0 <vSocketClose+0xf4>)
 800f0c8:	f013 fca6 	bl	8022a18 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f7f7 fe15 	bl	8006cfc <vPortFree>

    return NULL;
 800f0d2:	2300      	movs	r3, #0
} /* Tested */
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd90      	pop	{r4, r7, pc}
 800f0dc:	20001620 	.word	0x20001620
 800f0e0:	08026714 	.word	0x08026714

0800f0e4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b086      	sub	sp, #24
 800f0e8:	af04      	add	r7, sp, #16
 800f0ea:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f0f2:	2b06      	cmp	r3, #6
 800f0f4:	d132      	bne.n	800f15c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	7a1b      	ldrb	r3, [r3, #8]
 800f0fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <prvSocketProps+0x26>
 800f104:	2b01      	cmp	r3, #1
 800f106:	d014      	beq.n	800f132 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800f108:	e050      	b.n	800f1ac <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800f112:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800f11e:	9202      	str	r2, [sp, #8]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	9000      	str	r0, [sp, #0]
 800f124:	460b      	mov	r3, r1
 800f126:	4a24      	ldr	r2, [pc, #144]	@ (800f1b8 <prvSocketProps+0xd4>)
 800f128:	215c      	movs	r1, #92	@ 0x5c
 800f12a:	4824      	ldr	r0, [pc, #144]	@ (800f1bc <prvSocketProps+0xd8>)
 800f12c:	f014 fca0 	bl	8023a70 <snprintf>
                            break;
 800f130:	e03c      	b.n	800f1ac <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800f13c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800f148:	9202      	str	r2, [sp, #8]
 800f14a:	9301      	str	r3, [sp, #4]
 800f14c:	9000      	str	r0, [sp, #0]
 800f14e:	460b      	mov	r3, r1
 800f150:	4a1b      	ldr	r2, [pc, #108]	@ (800f1c0 <prvSocketProps+0xdc>)
 800f152:	215c      	movs	r1, #92	@ 0x5c
 800f154:	4819      	ldr	r0, [pc, #100]	@ (800f1bc <prvSocketProps+0xd8>)
 800f156:	f014 fc8b 	bl	8023a70 <snprintf>
                            break;
 800f15a:	e027      	b.n	800f1ac <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f162:	2b11      	cmp	r3, #17
 800f164:	d122      	bne.n	800f1ac <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	7a1b      	ldrb	r3, [r3, #8]
 800f16a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <prvSocketProps+0x96>
 800f174:	2b01      	cmp	r3, #1
 800f176:	d00c      	beq.n	800f192 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800f178:	e018      	b.n	800f1ac <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	4613      	mov	r3, r2
 800f186:	4a0f      	ldr	r2, [pc, #60]	@ (800f1c4 <prvSocketProps+0xe0>)
 800f188:	215c      	movs	r1, #92	@ 0x5c
 800f18a:	480c      	ldr	r0, [pc, #48]	@ (800f1bc <prvSocketProps+0xd8>)
 800f18c:	f014 fc70 	bl	8023a70 <snprintf>
                        break;
 800f190:	e00c      	b.n	800f1ac <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	4613      	mov	r3, r2
 800f1a0:	4a09      	ldr	r2, [pc, #36]	@ (800f1c8 <prvSocketProps+0xe4>)
 800f1a2:	215c      	movs	r1, #92	@ 0x5c
 800f1a4:	4805      	ldr	r0, [pc, #20]	@ (800f1bc <prvSocketProps+0xd8>)
 800f1a6:	f014 fc63 	bl	8023a70 <snprintf>
                        break;
 800f1aa:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800f1ac:	4b03      	ldr	r3, [pc, #12]	@ (800f1bc <prvSocketProps+0xd8>)
    }
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	08026748 	.word	0x08026748
 800f1bc:	200015b0 	.word	0x200015b0
 800f1c0:	08026768 	.word	0x08026768
 800f1c4:	08026788 	.word	0x08026788
 800f1c8:	08026798 	.word	0x08026798

0800f1cc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b088      	sub	sp, #32
 800f1d0:	af02      	add	r7, sp, #8
 800f1d2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f1d4:	4b3c      	ldr	r3, [pc, #240]	@ (800f2c8 <prvTCPSetSocketCount+0xfc>)
 800f1d6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f1dc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d12b      	bne.n	800f240 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800f1ee:	e022      	b.n	800f236 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f202:	2b01      	cmp	r3, #1
 800f204:	d017      	beq.n	800f236 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f20a:	89fa      	ldrh	r2, [r7, #14]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d112      	bne.n	800f236 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f216:	f003 0304 	and.w	r3, r3, #4
 800f21a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d107      	bne.n	800f230 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f226:	f003 0302 	and.w	r3, r3, #2
 800f22a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800f230:	68b8      	ldr	r0, [r7, #8]
 800f232:	f7ff fedb 	bl	800efec <vSocketClose>
            while( pxIterator != pxEnd )
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d1d8      	bne.n	800f1f0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800f23e:	e03e      	b.n	800f2be <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	617b      	str	r3, [r7, #20]
 800f246:	e036      	b.n	800f2b6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f254:	2b01      	cmp	r3, #1
 800f256:	d12b      	bne.n	800f2b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f25c:	89fa      	ldrh	r2, [r7, #14]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d126      	bne.n	800f2b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d021      	beq.n	800f2b0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f272:	3b01      	subs	r3, #1
 800f274:	b29a      	uxth	r2, r3
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f280:	4619      	mov	r1, r3
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f288:	461a      	mov	r2, r3
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f290:	4618      	mov	r0, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d101      	bne.n	800f2a0 <prvTCPSetSocketCount+0xd4>
 800f29c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <prvTCPSetSocketCount+0x100>)
 800f29e:	e000      	b.n	800f2a2 <prvTCPSetSocketCount+0xd6>
 800f2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f2d0 <prvTCPSetSocketCount+0x104>)
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	480b      	ldr	r0, [pc, #44]	@ (800f2d4 <prvTCPSetSocketCount+0x108>)
 800f2a8:	f013 fbb6 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800f2ac:	bf00      	nop
    }
 800f2ae:	e006      	b.n	800f2be <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d1c4      	bne.n	800f248 <prvTCPSetSocketCount+0x7c>
    }
 800f2be:	bf00      	nop
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	20001628 	.word	0x20001628
 800f2cc:	080267a8 	.word	0x080267a8
 800f2d0:	080267ac 	.word	0x080267ac
 800f2d4:	080267b0 	.word	0x080267b0

0800f2d8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b086      	sub	sp, #24
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f2ea:	2b06      	cmp	r3, #6
 800f2ec:	d00d      	beq.n	800f30a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b04      	cmp	r3, #4
 800f2f2:	d101      	bne.n	800f2f8 <prvSockopt_so_buffer+0x20>
 800f2f4:	4b23      	ldr	r3, [pc, #140]	@ (800f384 <prvSockopt_so_buffer+0xac>)
 800f2f6:	e000      	b.n	800f2fa <prvSockopt_so_buffer+0x22>
 800f2f8:	4b23      	ldr	r3, [pc, #140]	@ (800f388 <prvSockopt_so_buffer+0xb0>)
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	4823      	ldr	r0, [pc, #140]	@ (800f38c <prvSockopt_so_buffer+0xb4>)
 800f2fe:	f013 fb8b 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f302:	f06f 0315 	mvn.w	r3, #21
 800f306:	617b      	str	r3, [r7, #20]
 800f308:	e036      	b.n	800f378 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d104      	bne.n	800f31a <prvSockopt_so_buffer+0x42>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d107      	bne.n	800f32a <prvSockopt_so_buffer+0x52>
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2b05      	cmp	r3, #5
 800f31e:	d112      	bne.n	800f346 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d00d      	beq.n	800f346 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b04      	cmp	r3, #4
 800f32e:	d101      	bne.n	800f334 <prvSockopt_so_buffer+0x5c>
 800f330:	4b14      	ldr	r3, [pc, #80]	@ (800f384 <prvSockopt_so_buffer+0xac>)
 800f332:	e000      	b.n	800f336 <prvSockopt_so_buffer+0x5e>
 800f334:	4b14      	ldr	r3, [pc, #80]	@ (800f388 <prvSockopt_so_buffer+0xb0>)
 800f336:	4619      	mov	r1, r3
 800f338:	4815      	ldr	r0, [pc, #84]	@ (800f390 <prvSockopt_so_buffer+0xb8>)
 800f33a:	f013 fb6d 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f33e:	f06f 0315 	mvn.w	r3, #21
 800f342:	617b      	str	r3, [r7, #20]
 800f344:	e018      	b.n	800f378 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	2b04      	cmp	r3, #4
 800f350:	d10c      	bne.n	800f36c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f358:	4619      	mov	r1, r3
 800f35a:	6938      	ldr	r0, [r7, #16]
 800f35c:	f7fb fe92 	bl	800b084 <FreeRTOS_round_up>
 800f360:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	693a      	ldr	r2, [r7, #16]
 800f366:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f36a:	e003      	b.n	800f374 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800f374:	2300      	movs	r3, #0
 800f376:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800f378:	697b      	ldr	r3, [r7, #20]
    }
 800f37a:	4618      	mov	r0, r3
 800f37c:	3718      	adds	r7, #24
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	080267dc 	.word	0x080267dc
 800f388:	080267e0 	.word	0x080267e0
 800f38c:	080267e4 	.word	0x080267e4
 800f390:	08026808 	.word	0x08026808

0800f394 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800f394:	b480      	push	{r7}
 800f396:	b087      	sub	sp, #28
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2b09      	cmp	r3, #9
 800f3a8:	d002      	beq.n	800f3b0 <prvSetOptionCallback+0x1c>
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	2b0a      	cmp	r3, #10
 800f3ae:	d102      	bne.n	800f3b6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800f3b0:	2311      	movs	r3, #17
 800f3b2:	613b      	str	r3, [r7, #16]
 800f3b4:	e001      	b.n	800f3ba <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800f3b6:	2306      	movs	r3, #6
 800f3b8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d002      	beq.n	800f3ce <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f3c8:	f06f 0315 	mvn.w	r3, #21
 800f3cc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d131      	bne.n	800f438 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	3b06      	subs	r3, #6
 800f3d8:	2b04      	cmp	r3, #4
 800f3da:	d829      	bhi.n	800f430 <prvSetOptionCallback+0x9c>
 800f3dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f3e4 <prvSetOptionCallback+0x50>)
 800f3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e2:	bf00      	nop
 800f3e4:	0800f3f9 	.word	0x0800f3f9
 800f3e8:	0800f405 	.word	0x0800f405
 800f3ec:	0800f411 	.word	0x0800f411
 800f3f0:	0800f41d 	.word	0x0800f41d
 800f3f4:	0800f427 	.word	0x0800f427
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800f402:	e019      	b.n	800f438 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	685a      	ldr	r2, [r3, #4]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800f40e:	e013      	b.n	800f438 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	689a      	ldr	r2, [r3, #8]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800f41a:	e00d      	b.n	800f438 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68da      	ldr	r2, [r3, #12]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800f424:	e008      	b.n	800f438 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	691a      	ldr	r2, [r3, #16]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800f42e:	e003      	b.n	800f438 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f430:	f06f 0315 	mvn.w	r3, #21
 800f434:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f436:	bf00      	nop
            }
        }

        return xReturn;
 800f438:	697b      	ldr	r3, [r7, #20]
    }
 800f43a:	4618      	mov	r0, r3
 800f43c:	371c      	adds	r7, #28
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop

0800f448 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f452:	f06f 0315 	mvn.w	r3, #21
 800f456:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3354      	adds	r3, #84	@ 0x54
 800f45c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f464:	2b06      	cmp	r3, #6
 800f466:	d003      	beq.n	800f470 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800f468:	4825      	ldr	r0, [pc, #148]	@ (800f500 <prvSetOptionTCPWindows+0xb8>)
 800f46a:	f013 fad5 	bl	8022a18 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800f46e:	e042      	b.n	800f4f6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	461a      	mov	r2, r3
 800f478:	2104      	movs	r1, #4
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f7ff ff2c 	bl	800f2d8 <prvSockopt_so_buffer>
 800f480:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d133      	bne.n	800f4f0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	3308      	adds	r3, #8
 800f48c:	461a      	mov	r2, r3
 800f48e:	2105      	movs	r1, #5
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7ff ff21 	bl	800f2d8 <prvSockopt_so_buffer>
 800f496:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d12a      	bne.n	800f4f4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	693b      	ldr	r3, [r7, #16]
 800f4a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800f4bc:	f003 0301 	and.w	r3, r3, #1
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d017      	beq.n	800f4f6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f4cc:	693a      	ldr	r2, [r7, #16]
 800f4ce:	8bd2      	ldrh	r2, [r2, #30]
 800f4d0:	fb03 f202 	mul.w	r2, r3, r2
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	8bd2      	ldrh	r2, [r2, #30]
 800f4e4:	fb03 f202 	mul.w	r2, r3, r2
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800f4ee:	e002      	b.n	800f4f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f4f0:	bf00      	nop
 800f4f2:	e000      	b.n	800f4f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f4f4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800f4f6:	697b      	ldr	r3, [r7, #20]
    }
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	08026830 	.word	0x08026830

0800f504 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f50e:	f06f 0315 	mvn.w	r3, #21
 800f512:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f51e:	2b06      	cmp	r3, #6
 800f520:	d003      	beq.n	800f52a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800f522:	4813      	ldr	r0, [pc, #76]	@ (800f570 <prvSetOptionLowHighWater+0x6c>)
 800f524:	f013 fa78 	bl	8022a18 <lUDPLoggingPrintf>
 800f528:	e01c      	b.n	800f564 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	429a      	cmp	r2, r3
 800f534:	d206      	bcs.n	800f544 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	685a      	ldr	r2, [r3, #4]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f540:	429a      	cmp	r2, r3
 800f542:	d903      	bls.n	800f54c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800f544:	480b      	ldr	r0, [pc, #44]	@ (800f574 <prvSetOptionLowHighWater+0x70>)
 800f546:	f013 fa67 	bl	8022a18 <lUDPLoggingPrintf>
 800f54a:	e00b      	b.n	800f564 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	685a      	ldr	r2, [r3, #4]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800f560:	2300      	movs	r3, #0
 800f562:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f564:	68fb      	ldr	r3, [r7, #12]
    }
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	08026854 	.word	0x08026854
 800f574:	08026888 	.word	0x08026888

0800f578 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f582:	f06f 0315 	mvn.w	r3, #21
 800f586:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f58e:	2b06      	cmp	r3, #6
 800f590:	d126      	bne.n	800f5e0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d007      	beq.n	800f5aa <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f5a0:	f043 0302 	orr.w	r3, r3, #2
 800f5a4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800f5a8:	e006      	b.n	800f5b8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f5b0:	f36f 0341 	bfc	r3, #1, #1
 800f5b4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f5be:	2b04      	cmp	r3, #4
 800f5c0:	d90c      	bls.n	800f5dc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f001 fbd8 	bl	8010d78 <FreeRTOS_tx_size>
 800f5c8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d006      	beq.n	800f5dc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f5d6:	2006      	movs	r0, #6
 800f5d8:	f7fa fc1c 	bl	8009e14 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
    }
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b084      	sub	sp, #16
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f5f4:	f06f 0315 	mvn.w	r3, #21
 800f5f8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f600:	2b06      	cmp	r3, #6
 800f602:	d122      	bne.n	800f64a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d007      	beq.n	800f61c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f612:	f043 0304 	orr.w	r3, r3, #4
 800f616:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f61a:	e006      	b.n	800f62a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f622:	f36f 0382 	bfc	r3, #2, #1
 800f626:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f630:	f043 0301 	orr.w	r3, r3, #1
 800f634:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2201      	movs	r2, #1
 800f63c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f640:	2006      	movs	r0, #6
 800f642:	f7fa fbe7 	bl	8009e14 <xSendEventToIPTask>
            xReturn = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f64a:	68fb      	ldr	r3, [r7, #12]
    }
 800f64c:	4618      	mov	r0, r3
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f654:	b480      	push	{r7}
 800f656:	b087      	sub	sp, #28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d110      	bne.n	800f68e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f672:	2b11      	cmp	r3, #17
 800f674:	d107      	bne.n	800f686 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d902      	bls.n	800f686 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f680:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f684:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f68c:	e002      	b.n	800f694 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	621a      	str	r2, [r3, #32]
}
 800f694:	bf00      	nop
 800f696:	371c      	adds	r7, #28
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f6aa:	f06f 0315 	mvn.w	r3, #21
 800f6ae:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f6b6:	2b06      	cmp	r3, #6
 800f6b8:	d114      	bne.n	800f6e4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d007      	beq.n	800f6d2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f6c8:	f043 0308 	orr.w	r3, r3, #8
 800f6cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f6d0:	e006      	b.n	800f6e0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f6d8:	f36f 03c3 	bfc	r3, #3, #1
 800f6dc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
    }
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr

0800f6f2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f6f2:	b480      	push	{r7}
 800f6f4:	b085      	sub	sp, #20
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
 800f6fa:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f6fc:	f06f 0315 	mvn.w	r3, #21
 800f700:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f708:	2b06      	cmp	r3, #6
 800f70a:	d114      	bne.n	800f736 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d007      	beq.n	800f724 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f714:	687a      	ldr	r2, [r7, #4]
 800f716:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f71a:	f043 0310 	orr.w	r3, r3, #16
 800f71e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f722:	e006      	b.n	800f732 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f72a:	f36f 1304 	bfc	r3, #4, #1
 800f72e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f736:	68fb      	ldr	r3, [r7, #12]
    }
 800f738:	4618      	mov	r0, r3
 800f73a:	3714      	adds	r7, #20
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b086      	sub	sp, #24
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f752:	f06f 0315 	mvn.w	r3, #21
 800f756:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f75c:	6938      	ldr	r0, [r7, #16]
 800f75e:	f001 fb77 	bl	8010e50 <xSocketValid>
 800f762:	4603      	mov	r3, r0
 800f764:	2b01      	cmp	r3, #1
 800f766:	f040 8093 	bne.w	800f890 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b12      	cmp	r3, #18
 800f76e:	f200 808b 	bhi.w	800f888 <FreeRTOS_setsockopt+0x144>
 800f772:	a201      	add	r2, pc, #4	@ (adr r2, 800f778 <FreeRTOS_setsockopt+0x34>)
 800f774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f778:	0800f7c5 	.word	0x0800f7c5
 800f77c:	0800f7d5 	.word	0x0800f7d5
 800f780:	0800f7e5 	.word	0x0800f7e5
 800f784:	0800f825 	.word	0x0800f825
 800f788:	0800f83f 	.word	0x0800f83f
 800f78c:	0800f83f 	.word	0x0800f83f
 800f790:	0800f817 	.word	0x0800f817
 800f794:	0800f817 	.word	0x0800f817
 800f798:	0800f817 	.word	0x0800f817
 800f79c:	0800f817 	.word	0x0800f817
 800f7a0:	0800f817 	.word	0x0800f817
 800f7a4:	0800f859 	.word	0x0800f859
 800f7a8:	0800f865 	.word	0x0800f865
 800f7ac:	0800f84d 	.word	0x0800f84d
 800f7b0:	0800f871 	.word	0x0800f871
 800f7b4:	0800f87d 	.word	0x0800f87d
 800f7b8:	0800f889 	.word	0x0800f889
 800f7bc:	0800f889 	.word	0x0800f889
 800f7c0:	0800f833 	.word	0x0800f833
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6938      	ldr	r0, [r7, #16]
 800f7ca:	f7ff ff43 	bl	800f654 <prvSetOptionTimeout>
                xReturn = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	617b      	str	r3, [r7, #20]
                break;
 800f7d2:	e060      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	6938      	ldr	r0, [r7, #16]
 800f7da:	f7ff ff3b 	bl	800f654 <prvSetOptionTimeout>
                xReturn = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	617b      	str	r3, [r7, #20]
                break;
 800f7e2:	e058      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d109      	bne.n	800f7fe <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f7f0:	f023 0302 	bic.w	r3, r3, #2
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f7fc:	e008      	b.n	800f810 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f804:	f043 0302 	orr.w	r3, r3, #2
 800f808:	b2da      	uxtb	r2, r3
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	617b      	str	r3, [r7, #20]
                break;
 800f814:	e03f      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f816:	683a      	ldr	r2, [r7, #0]
 800f818:	6879      	ldr	r1, [r7, #4]
 800f81a:	6938      	ldr	r0, [r7, #16]
 800f81c:	f7ff fdba 	bl	800f394 <prvSetOptionCallback>
 800f820:	6178      	str	r0, [r7, #20]
                        break;
 800f822:	e038      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f82c:	2300      	movs	r3, #0
 800f82e:	617b      	str	r3, [r7, #20]
                        break;
 800f830:	e031      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	6938      	ldr	r0, [r7, #16]
 800f836:	f7ff fe65 	bl	800f504 <prvSetOptionLowHighWater>
 800f83a:	6178      	str	r0, [r7, #20]
                        break;
 800f83c:	e02b      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	6879      	ldr	r1, [r7, #4]
 800f842:	6938      	ldr	r0, [r7, #16]
 800f844:	f7ff fd48 	bl	800f2d8 <prvSockopt_so_buffer>
 800f848:	6178      	str	r0, [r7, #20]
                        break;
 800f84a:	e024      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6938      	ldr	r0, [r7, #16]
 800f850:	f7ff fdfa 	bl	800f448 <prvSetOptionTCPWindows>
 800f854:	6178      	str	r0, [r7, #20]
                        break;
 800f856:	e01e      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f858:	6839      	ldr	r1, [r7, #0]
 800f85a:	6938      	ldr	r0, [r7, #16]
 800f85c:	f7ff ff20 	bl	800f6a0 <prvSetOptionReuseListenSocket>
 800f860:	6178      	str	r0, [r7, #20]
                        break;
 800f862:	e018      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f864:	6839      	ldr	r1, [r7, #0]
 800f866:	6938      	ldr	r0, [r7, #16]
 800f868:	f7ff ff43 	bl	800f6f2 <prvSetOptionCloseAfterSend>
 800f86c:	6178      	str	r0, [r7, #20]
                        break;
 800f86e:	e012      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f870:	6839      	ldr	r1, [r7, #0]
 800f872:	6938      	ldr	r0, [r7, #16]
 800f874:	f7ff fe80 	bl	800f578 <prvSetOptionSetFullSize>
 800f878:	6178      	str	r0, [r7, #20]
                        break;
 800f87a:	e00c      	b.n	800f896 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f87c:	6839      	ldr	r1, [r7, #0]
 800f87e:	6938      	ldr	r0, [r7, #16]
 800f880:	f7ff feb3 	bl	800f5ea <prvSetOptionStopRX>
 800f884:	6178      	str	r0, [r7, #20]
                        break;
 800f886:	e006      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f888:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f88c:	617b      	str	r3, [r7, #20]
                break;
 800f88e:	e002      	b.n	800f896 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f890:	f06f 0315 	mvn.w	r3, #21
 800f894:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f896:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f898:	4618      	mov	r0, r3
 800f89a:	3718      	adds	r7, #24
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b086      	sub	sp, #24
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f8a8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f8ac:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f8ae:	89fb      	ldrh	r3, [r7, #14]
 800f8b0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b06      	cmp	r3, #6
 800f8be:	d102      	bne.n	800f8c6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f8c0:	4b21      	ldr	r3, [pc, #132]	@ (800f948 <prvGetPrivatePortNumber+0xa8>)
 800f8c2:	613b      	str	r3, [r7, #16]
 800f8c4:	e001      	b.n	800f8ca <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f8c6:	4b21      	ldr	r3, [pc, #132]	@ (800f94c <prvGetPrivatePortNumber+0xac>)
 800f8c8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f8ca:	f107 0308 	add.w	r3, r7, #8
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7f2 f9b0 	bl	8001c34 <xApplicationGetRandomNumber>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d030      	beq.n	800f93c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f8de:	89fa      	ldrh	r2, [r7, #14]
 800f8e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8e4:	fb01 f202 	mul.w	r2, r1, r2
 800f8e8:	1a9b      	subs	r3, r3, r2
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f8f0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f8f2:	8abb      	ldrh	r3, [r7, #20]
 800f8f4:	021b      	lsls	r3, r3, #8
 800f8f6:	b21a      	sxth	r2, r3
 800f8f8:	8abb      	ldrh	r3, [r7, #20]
 800f8fa:	0a1b      	lsrs	r3, r3, #8
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	b21b      	sxth	r3, r3
 800f900:	4313      	orrs	r3, r2
 800f902:	b21b      	sxth	r3, r3
 800f904:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f906:	4619      	mov	r1, r3
 800f908:	6938      	ldr	r0, [r7, #16]
 800f90a:	f000 f821 	bl	800f950 <pxListFindListItemWithValue>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d10a      	bne.n	800f92a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f914:	8abb      	ldrh	r3, [r7, #20]
 800f916:	021b      	lsls	r3, r3, #8
 800f918:	b21a      	sxth	r2, r3
 800f91a:	8abb      	ldrh	r3, [r7, #20]
 800f91c:	0a1b      	lsrs	r3, r3, #8
 800f91e:	b29b      	uxth	r3, r3
 800f920:	b21b      	sxth	r3, r3
 800f922:	4313      	orrs	r3, r2
 800f924:	b21b      	sxth	r3, r3
 800f926:	82bb      	strh	r3, [r7, #20]
            break;
 800f928:	e009      	b.n	800f93e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f92e:	8afb      	ldrh	r3, [r7, #22]
 800f930:	3b01      	subs	r3, #1
 800f932:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f934:	8afb      	ldrh	r3, [r7, #22]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1c7      	bne.n	800f8ca <prvGetPrivatePortNumber+0x2a>
 800f93a:	e000      	b.n	800f93e <prvGetPrivatePortNumber+0x9e>
            break;
 800f93c:	bf00      	nop

    return usResult;
 800f93e:	8abb      	ldrh	r3, [r7, #20]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	20001620 	.word	0x20001620
 800f94c:	2000160c 	.word	0x2000160c

0800f950 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f95e:	f7fa fe0b 	bl	800a578 <xIPIsNetworkTaskReady>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d018      	beq.n	800f99a <pxListFindListItemWithValue+0x4a>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d015      	beq.n	800f99a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	3308      	adds	r3, #8
 800f972:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	613b      	str	r3, [r7, #16]
 800f97a:	e00a      	b.n	800f992 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	683a      	ldr	r2, [r7, #0]
 800f982:	429a      	cmp	r2, r3
 800f984:	d102      	bne.n	800f98c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	617b      	str	r3, [r7, #20]
                break;
 800f98a:	e006      	b.n	800f99a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	685b      	ldr	r3, [r3, #4]
 800f990:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	429a      	cmp	r2, r3
 800f998:	d1f0      	bne.n	800f97c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f99a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f99c:	4618      	mov	r0, r3
 800f99e:	3718      	adds	r7, #24
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	480b      	ldr	r0, [pc, #44]	@ (800f9e0 <pxUDPSocketLookup+0x3c>)
 800f9b4:	f7ff ffcc 	bl	800f950 <pxListFindListItemWithValue>
 800f9b8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00a      	beq.n	800f9d6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d104      	bne.n	800f9d6 <pxUDPSocketLookup+0x32>
 800f9cc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f9d0:	4804      	ldr	r0, [pc, #16]	@ (800f9e4 <pxUDPSocketLookup+0x40>)
 800f9d2:	f7f2 f85b 	bl	8001a8c <vAssertCalled>
    }

    return pxSocket;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	2000160c 	.word	0x2000160c
 800f9e4:	08026574 	.word	0x08026574

0800f9e8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b08b      	sub	sp, #44	@ 0x2c
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f9f6:	1d3b      	adds	r3, r7, #4
 800f9f8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f9fe:	2300      	movs	r3, #0
 800fa00:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa02:	e062      	b.n	800faca <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa08:	4413      	add	r3, r2
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800fa0e:	2302      	movs	r3, #2
 800fa10:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800fa12:	7ffa      	ldrb	r2, [r7, #31]
 800fa14:	4b32      	ldr	r3, [pc, #200]	@ (800fae0 <FreeRTOS_inet_ntoa+0xf8>)
 800fa16:	fba3 1302 	umull	r1, r3, r3, r2
 800fa1a:	08d9      	lsrs	r1, r3, #3
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	440b      	add	r3, r1
 800fa22:	005b      	lsls	r3, r3, #1
 800fa24:	1ad3      	subs	r3, r2, r3
 800fa26:	b2d9      	uxtb	r1, r3
 800fa28:	f107 020c 	add.w	r2, r7, #12
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	4413      	add	r3, r2
 800fa30:	460a      	mov	r2, r1
 800fa32:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800fa34:	7ffb      	ldrb	r3, [r7, #31]
 800fa36:	4a2a      	ldr	r2, [pc, #168]	@ (800fae0 <FreeRTOS_inet_ntoa+0xf8>)
 800fa38:	fba2 2303 	umull	r2, r3, r2, r3
 800fa3c:	08db      	lsrs	r3, r3, #3
 800fa3e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d003      	beq.n	800fa4e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800fa4c:	e7e1      	b.n	800fa12 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800fa4e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800fa50:	7ffb      	ldrb	r3, [r7, #31]
 800fa52:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800fa54:	2300      	movs	r3, #0
 800fa56:	61bb      	str	r3, [r7, #24]
 800fa58:	e009      	b.n	800fa6e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800fa5a:	f107 020c 	add.w	r2, r7, #12
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	4413      	add	r3, r2
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d106      	bne.n	800fa76 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	61bb      	str	r3, [r7, #24]
 800fa6e:	69bb      	ldr	r3, [r7, #24]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d9f2      	bls.n	800fa5a <FreeRTOS_inet_ntoa+0x72>
 800fa74:	e012      	b.n	800fa9c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800fa76:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800fa78:	e010      	b.n	800fa9c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800fa7a:	f107 020c 	add.w	r2, r7, #12
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	4413      	add	r3, r2
 800fa82:	781a      	ldrb	r2, [r3, #0]
 800fa84:	6839      	ldr	r1, [r7, #0]
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	440b      	add	r3, r1
 800fa8a:	3230      	adds	r2, #48	@ 0x30
 800fa8c:	b2d2      	uxtb	r2, r2
 800fa8e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800fa90:	6a3b      	ldr	r3, [r7, #32]
 800fa92:	3301      	adds	r3, #1
 800fa94:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	61bb      	str	r3, [r7, #24]
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d9eb      	bls.n	800fa7a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800faa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	d805      	bhi.n	800fab4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	6a3b      	ldr	r3, [r7, #32]
 800faac:	4413      	add	r3, r2
 800faae:	222e      	movs	r2, #46	@ 0x2e
 800fab0:	701a      	strb	r2, [r3, #0]
 800fab2:	e004      	b.n	800fabe <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	4413      	add	r3, r2
 800faba:	2200      	movs	r2, #0
 800fabc:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800fabe:	6a3b      	ldr	r3, [r7, #32]
 800fac0:	3301      	adds	r3, #1
 800fac2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800fac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fac6:	3301      	adds	r3, #1
 800fac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800faca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800facc:	2b03      	cmp	r3, #3
 800face:	d999      	bls.n	800fa04 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800fad0:	693b      	ldr	r3, [r7, #16]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	372c      	adds	r7, #44	@ 0x2c
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	cccccccd 	.word	0xcccccccd

0800fae4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d003      	beq.n	800fb00 <FreeRTOS_inet_ntop+0x1c>
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	2b0a      	cmp	r3, #10
 800fafc:	d007      	beq.n	800fb0e <FreeRTOS_inet_ntop+0x2a>
 800fafe:	e00d      	b.n	800fb1c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800fb00:	683a      	ldr	r2, [r7, #0]
 800fb02:	6879      	ldr	r1, [r7, #4]
 800fb04:	68b8      	ldr	r0, [r7, #8]
 800fb06:	f7fb fc8d 	bl	800b424 <FreeRTOS_inet_ntop4>
 800fb0a:	6178      	str	r0, [r7, #20]
                break;
 800fb0c:	e009      	b.n	800fb22 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800fb0e:	683a      	ldr	r2, [r7, #0]
 800fb10:	6879      	ldr	r1, [r7, #4]
 800fb12:	68b8      	ldr	r0, [r7, #8]
 800fb14:	f7fc f9c1 	bl	800be9a <FreeRTOS_inet_ntop6>
 800fb18:	6178      	str	r0, [r7, #20]
                break;
 800fb1a:	e002      	b.n	800fb22 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	617b      	str	r3, [r7, #20]
            break;
 800fb20:	bf00      	nop
    }

    return pcResult;
 800fb22:	697b      	ldr	r3, [r7, #20]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	7a1b      	ldrb	r3, [r3, #8]
 800fb3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <FreeRTOS_GetLocalAddress+0x22>
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d02a      	beq.n	800fba2 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800fb4c:	e044      	b.n	800fbd8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	2202      	movs	r2, #2
 800fb52:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2218      	movs	r2, #24
 800fb58:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb5e:	061a      	lsls	r2, r3, #24
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb64:	021b      	lsls	r3, r3, #8
 800fb66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fb6a:	431a      	orrs	r2, r3
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb70:	0a1b      	lsrs	r3, r3, #8
 800fb72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fb76:	431a      	orrs	r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb7c:	0e1b      	lsrs	r3, r3, #24
 800fb7e:	431a      	orrs	r2, r3
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fb88:	021b      	lsls	r3, r3, #8
 800fb8a:	b21a      	sxth	r2, r3
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fb90:	0a1b      	lsrs	r3, r3, #8
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	b21b      	sxth	r3, r3
 800fb96:	4313      	orrs	r3, r2
 800fb98:	b21b      	sxth	r3, r3
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	805a      	strh	r2, [r3, #2]
                break;
 800fba0:	e01a      	b.n	800fbd8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	220a      	movs	r2, #10
 800fba6:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	f103 0008 	add.w	r0, r3, #8
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3328      	adds	r3, #40	@ 0x28
 800fbb2:	2210      	movs	r2, #16
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	f013 f94b 	bl	8022e50 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fbbe:	021b      	lsls	r3, r3, #8
 800fbc0:	b21a      	sxth	r2, r3
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fbc6:	0a1b      	lsrs	r3, r3, #8
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	b21b      	sxth	r3, r3
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	b21b      	sxth	r3, r3
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	805a      	strh	r2, [r3, #2]
                break;
 800fbd6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800fbd8:	2318      	movs	r3, #24
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3710      	adds	r7, #16
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b084      	sub	sp, #16
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d006      	beq.n	800fc00 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	2100      	movs	r1, #0
 800fbfc:	f7f4 f8bc 	bl	8003d78 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d015      	beq.n	800fc34 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	0a1b      	lsrs	r3, r3, #8
 800fc0e:	f003 030f 	and.w	r3, r3, #15
 800fc12:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00c      	beq.n	800fc34 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	431a      	orrs	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	68f9      	ldr	r1, [r7, #12]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f3 fdc6 	bl	80037c0 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00b      	beq.n	800fc60 <vSocketWakeUpUser+0x7e>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d007      	beq.n	800fc60 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	685a      	ldr	r2, [r3, #4]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	f7f3 fdb0 	bl	80037c0 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]
}
 800fc66:	bf00      	nop
 800fc68:	3710      	adds	r7, #16
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800fc6e:	b480      	push	{r7}
 800fc70:	b085      	sub	sp, #20
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fc7c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800fc7e:	7afb      	ldrb	r3, [r7, #11]
 800fc80:	2b08      	cmp	r3, #8
 800fc82:	d006      	beq.n	800fc92 <bMayConnect+0x24>
 800fc84:	2b08      	cmp	r3, #8
 800fc86:	dc0b      	bgt.n	800fca0 <bMayConnect+0x32>
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <bMayConnect+0x24>
 800fc8c:	2b02      	cmp	r3, #2
 800fc8e:	d003      	beq.n	800fc98 <bMayConnect+0x2a>
 800fc90:	e006      	b.n	800fca0 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	60fb      	str	r3, [r7, #12]
                break;
 800fc96:	e007      	b.n	800fca8 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800fc98:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800fc9c:	60fb      	str	r3, [r7, #12]
                break;
 800fc9e:	e003      	b.n	800fca8 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800fca0:	f06f 030a 	mvn.w	r3, #10
 800fca4:	60fb      	str	r3, [r7, #12]
                break;
 800fca6:	bf00      	nop
        }

        return xResult;
 800fca8:	68fb      	ldr	r3, [r7, #12]
    }
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d103      	bne.n	800fcd4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fccc:	f06f 0315 	mvn.w	r3, #21
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	e01f      	b.n	800fd14 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	2106      	movs	r1, #6
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f7fe fc71 	bl	800e5c0 <prvValidSocket>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d103      	bne.n	800fcec <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800fce4:	f06f 0308 	mvn.w	r3, #8
 800fce8:	60fb      	str	r3, [r7, #12]
 800fcea:	e013      	b.n	800fd14 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f001 f867 	bl	8010dc0 <FreeRTOS_issocketconnected>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	dd03      	ble.n	800fd00 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800fcf8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800fcfc:	60fb      	str	r3, [r7, #12]
 800fcfe:	e009      	b.n	800fd14 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	69db      	ldr	r3, [r3, #28]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d105      	bne.n	800fd14 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800fd08:	2200      	movs	r2, #0
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7fe ff4f 	bl	800ebb0 <FreeRTOS_bind>
 800fd12:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	f040 80a6 	bne.w	800fe68 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff ffa6 	bl	800fc6e <bMayConnect>
 800fd22:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f040 809e 	bne.w	800fe68 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fd32:	f36f 03c3 	bfc	r3, #3, #1
 800fd36:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	785b      	ldrb	r3, [r3, #1]
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d027      	beq.n	800fd9a <prvTCPConnectStart+0xe2>
 800fd4a:	2b0a      	cmp	r3, #10
 800fd4c:	d168      	bne.n	800fe20 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	7a13      	ldrb	r3, [r2, #8]
 800fd52:	f043 0301 	orr.w	r3, r3, #1
 800fd56:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	f103 0108 	add.w	r1, r3, #8
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	885b      	ldrh	r3, [r3, #2]
 800fd68:	021b      	lsls	r3, r3, #8
 800fd6a:	b21a      	sxth	r2, r3
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	885b      	ldrh	r3, [r3, #2]
 800fd70:	0a1b      	lsrs	r3, r3, #8
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	b21b      	sxth	r3, r3
 800fd76:	4313      	orrs	r3, r2
 800fd78:	b21b      	sxth	r3, r3
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	460a      	mov	r2, r1
 800fd7e:	4601      	mov	r1, r0
 800fd80:	483c      	ldr	r0, [pc, #240]	@ (800fe74 <prvTCPConnectStart+0x1bc>)
 800fd82:	f012 fe49 	bl	8022a18 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	3308      	adds	r3, #8
 800fd90:	2210      	movs	r2, #16
 800fd92:	4619      	mov	r1, r3
 800fd94:	f013 f85c 	bl	8022e50 <memcpy>
                            break;
 800fd98:	e046      	b.n	800fe28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	7a13      	ldrb	r3, [r2, #8]
 800fd9e:	f36f 0300 	bfc	r3, #0, #1
 800fda2:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fda8:	4618      	mov	r0, r3
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	689b      	ldr	r3, [r3, #8]
 800fdae:	061a      	lsls	r2, r3, #24
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	021b      	lsls	r3, r3, #8
 800fdb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fdba:	431a      	orrs	r2, r3
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	689b      	ldr	r3, [r3, #8]
 800fdc0:	0a1b      	lsrs	r3, r3, #8
 800fdc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fdc6:	431a      	orrs	r2, r3
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	0e1b      	lsrs	r3, r3, #24
 800fdce:	ea42 0103 	orr.w	r1, r2, r3
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	885b      	ldrh	r3, [r3, #2]
 800fdd6:	021b      	lsls	r3, r3, #8
 800fdd8:	b21a      	sxth	r2, r3
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	885b      	ldrh	r3, [r3, #2]
 800fdde:	0a1b      	lsrs	r3, r3, #8
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	b21b      	sxth	r3, r3
 800fde4:	4313      	orrs	r3, r2
 800fde6:	b21b      	sxth	r3, r3
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	460a      	mov	r2, r1
 800fdec:	4601      	mov	r1, r0
 800fdee:	4822      	ldr	r0, [pc, #136]	@ (800fe78 <prvTCPConnectStart+0x1c0>)
 800fdf0:	f012 fe12 	bl	8022a18 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	689b      	ldr	r3, [r3, #8]
 800fdf8:	061a      	lsls	r2, r3, #24
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	689b      	ldr	r3, [r3, #8]
 800fdfe:	021b      	lsls	r3, r3, #8
 800fe00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fe04:	431a      	orrs	r2, r3
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	0a1b      	lsrs	r3, r3, #8
 800fe0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe10:	431a      	orrs	r2, r3
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	0e1b      	lsrs	r3, r3, #24
 800fe18:	431a      	orrs	r2, r3
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800fe1e:	e003      	b.n	800fe28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800fe20:	4816      	ldr	r0, [pc, #88]	@ (800fe7c <prvTCPConnectStart+0x1c4>)
 800fe22:	f012 fdf9 	bl	8022a18 <lUDPLoggingPrintf>
                        break;
 800fe26:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	885b      	ldrh	r3, [r3, #2]
 800fe2c:	021b      	lsls	r3, r3, #8
 800fe2e:	b21a      	sxth	r2, r3
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	885b      	ldrh	r3, [r3, #2]
 800fe34:	0a1b      	lsrs	r3, r3, #8
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	b21b      	sxth	r3, r3
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800fe46:	2102      	movs	r1, #2
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f001 fd77 	bl	801193c <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2201      	movs	r2, #1
 800fe52:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800fe56:	2006      	movs	r0, #6
 800fe58:	f7f9 ffdc 	bl	8009e14 <xSendEventToIPTask>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d002      	beq.n	800fe68 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800fe62:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800fe66:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800fe68:	68fb      	ldr	r3, [r7, #12]
    }
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3710      	adds	r7, #16
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	080268b4 	.word	0x080268b4
 800fe78:	080268dc 	.word	0x080268dc
 800fe7c:	08026900 	.word	0x08026900

0800fe80 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b094      	sub	sp, #80	@ 0x50
 800fe84:	af02      	add	r7, sp, #8
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fe90:	2300      	movs	r3, #0
 800fe92:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fe94:	f06f 0315 	mvn.w	r3, #21
 800fe98:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d013      	beq.n	800fec8 <FreeRTOS_connect+0x48>
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	785b      	ldrb	r3, [r3, #1]
 800fea4:	2b0a      	cmp	r3, #10
 800fea6:	d00f      	beq.n	800fec8 <FreeRTOS_connect+0x48>
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	785b      	ldrb	r3, [r3, #1]
 800feac:	2b02      	cmp	r3, #2
 800feae:	d00b      	beq.n	800fec8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800feb0:	f107 0314 	add.w	r3, r7, #20
 800feb4:	2218      	movs	r2, #24
 800feb6:	68b9      	ldr	r1, [r7, #8]
 800feb8:	4618      	mov	r0, r3
 800feba:	f012 ffc9 	bl	8022e50 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800febe:	2302      	movs	r3, #2
 800fec0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800fec2:	f107 0314 	add.w	r3, r7, #20
 800fec6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800fec8:	68b9      	ldr	r1, [r7, #8]
 800feca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fecc:	f7ff fef4 	bl	800fcb8 <prvTCPConnectStart>
 800fed0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800fed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d146      	bne.n	800ff66 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800fed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d110      	bne.n	800ff00 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fee0:	6a1b      	ldr	r3, [r3, #32]
 800fee2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d103      	bne.n	800fef2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800feea:	f06f 030a 	mvn.w	r3, #10
 800feee:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800fef0:	e039      	b.n	800ff66 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800fef2:	2301      	movs	r3, #1
 800fef4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fef6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7f5 fb66 	bl	80055cc <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800ff00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ff02:	f000 ff5d 	bl	8010dc0 <FreeRTOS_issocketconnected>
 800ff06:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800ff08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	db2a      	blt.n	800ff64 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800ff0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	dd02      	ble.n	800ff1a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800ff18:	e025      	b.n	800ff66 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ff1a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ff1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ff22:	4611      	mov	r1, r2
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f5 fb89 	bl	800563c <xTaskCheckForTimeOut>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d003      	beq.n	800ff38 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800ff30:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800ff34:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800ff36:	e016      	b.n	800ff66 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800ff38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff3a:	6858      	ldr	r0, [r3, #4]
 800ff3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	2300      	movs	r3, #0
 800ff42:	2201      	movs	r2, #1
 800ff44:	2128      	movs	r1, #40	@ 0x28
 800ff46:	f7f3 fb55 	bl	80035f4 <xEventGroupWaitBits>
 800ff4a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4e:	f003 0320 	and.w	r3, r3, #32
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d0c0      	beq.n	800fed8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800ff56:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ff5a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800ff5c:	4804      	ldr	r0, [pc, #16]	@ (800ff70 <FreeRTOS_connect+0xf0>)
 800ff5e:	f012 fd5b 	bl	8022a18 <lUDPLoggingPrintf>
                    break;
 800ff62:	e000      	b.n	800ff66 <FreeRTOS_connect+0xe6>
                    break;
 800ff64:	bf00      	nop
                }
            }
        }

        return xResult;
 800ff66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3748      	adds	r7, #72	@ 0x48
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	0802692c 	.word	0x0802692c

0800ff74 <prvAcceptWaitClient>:
 * @return A new connected socket or NULL.
 */
    static FreeRTOS_Socket_t * prvAcceptWaitClient( FreeRTOS_Socket_t * pxParentSocket,
                                                    struct freertos_sockaddr * pxAddress,
                                                    socklen_t * pxAddressLength )
    {
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800ff80:	2300      	movs	r3, #0
 800ff82:	617b      	str	r3, [r7, #20]

        /* Is there a new client? */
        vTaskSuspendAll();
 800ff84:	f7f4 fe66 	bl	8004c54 <vTaskSuspendAll>
        {
            if( pxParentSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff8e:	f003 0308 	and.w	r3, r3, #8
 800ff92:	b2db      	uxtb	r3, r3
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d10b      	bne.n	800ffb0 <prvAcceptWaitClient+0x3c>
            {
                pxClientSocket = pxParentSocket->u.xTCP.pxPeerSocket;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff9c:	617b      	str	r3, [r7, #20]

                if( pxClientSocket != NULL )
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d007      	beq.n	800ffb4 <prvAcceptWaitClient+0x40>
                {
                    FreeRTOS_printf( ( "prvAcceptWaitClient: client %p parent %p\n",
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	6979      	ldr	r1, [r7, #20]
 800ffa8:	4845      	ldr	r0, [pc, #276]	@ (80100c0 <prvAcceptWaitClient+0x14c>)
 800ffaa:	f012 fd35 	bl	8022a18 <lUDPLoggingPrintf>
 800ffae:	e001      	b.n	800ffb4 <prvAcceptWaitClient+0x40>
                                       ( void * ) pxClientSocket, ( void * ) pxParentSocket ) );
                }
            }
            else
            {
                pxClientSocket = pxParentSocket;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	617b      	str	r3, [r7, #20]
            }

            if( pxClientSocket != NULL )
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d018      	beq.n	800ffec <prvAcceptWaitClient+0x78>
            {
                /* Is it still not taken ? */
                if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ffc0:	f003 0302 	and.w	r3, r3, #2
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00e      	beq.n	800ffe8 <prvAcceptWaitClient+0x74>
                {
                    if( pxParentSocket->u.xTCP.pxPeerSocket != NULL )
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <prvAcceptWaitClient+0x64>
                    {
                        pxParentSocket->u.xTCP.pxPeerSocket = NULL;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800ffd8:	697a      	ldr	r2, [r7, #20]
 800ffda:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ffde:	f36f 0341 	bfc	r3, #1, #1
 800ffe2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800ffe6:	e001      	b.n	800ffec <prvAcceptWaitClient+0x78>
                }
                else
                {
                    pxClientSocket = NULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	617b      	str	r3, [r7, #20]
                }
            }
        }
        ( void ) xTaskResumeAll();
 800ffec:	f7f4 fe40 	bl	8004c70 <xTaskResumeAll>

        if( pxClientSocket != NULL )
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d05e      	beq.n	80100b4 <prvAcceptWaitClient+0x140>
        {
            if( pxAddressLength != NULL )
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <prvAcceptWaitClient+0x8e>
            {
                *pxAddressLength = sizeof( struct freertos_sockaddr );
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2218      	movs	r2, #24
 8010000:	601a      	str	r2, [r3, #0]
            }

            switch( pxClientSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	7a1b      	ldrb	r3, [r3, #8]
 8010006:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <prvAcceptWaitClient+0xa2>
 8010010:	2b01      	cmp	r3, #1
 8010012:	d02c      	beq.n	801006e <prvAcceptWaitClient+0xfa>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8010014:	e04e      	b.n	80100b4 <prvAcceptWaitClient+0x140>
                        if( pxAddress != NULL )
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d048      	beq.n	80100ae <prvAcceptWaitClient+0x13a>
                            pxAddress->sin_family = FREERTOS_AF_INET4;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2202      	movs	r2, #2
 8010020:	705a      	strb	r2, [r3, #1]
                            pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_ntohl( pxClientSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010026:	061a      	lsls	r2, r3, #24
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801002c:	021b      	lsls	r3, r3, #8
 801002e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010032:	431a      	orrs	r2, r3
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010038:	0a1b      	lsrs	r3, r3, #8
 801003a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801003e:	431a      	orrs	r2, r3
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010044:	0e1b      	lsrs	r3, r3, #24
 8010046:	431a      	orrs	r2, r3
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	609a      	str	r2, [r3, #8]
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010052:	021b      	lsls	r3, r3, #8
 8010054:	b21a      	sxth	r2, r3
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801005c:	0a1b      	lsrs	r3, r3, #8
 801005e:	b29b      	uxth	r3, r3
 8010060:	b21b      	sxth	r3, r3
 8010062:	4313      	orrs	r3, r2
 8010064:	b21b      	sxth	r3, r3
 8010066:	b29a      	uxth	r2, r3
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	805a      	strh	r2, [r3, #2]
                        break;
 801006c:	e01f      	b.n	80100ae <prvAcceptWaitClient+0x13a>
                        if( pxAddress != NULL )
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d01e      	beq.n	80100b2 <prvAcceptWaitClient+0x13e>
                            pxAddress->sin_family = FREERTOS_AF_INET6;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	220a      	movs	r2, #10
 8010078:	705a      	strb	r2, [r3, #1]
                            ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxClientSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	f103 0008 	add.w	r0, r3, #8
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	3354      	adds	r3, #84	@ 0x54
 8010084:	2210      	movs	r2, #16
 8010086:	4619      	mov	r1, r3
 8010088:	f012 fee2 	bl	8022e50 <memcpy>
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010092:	021b      	lsls	r3, r3, #8
 8010094:	b21a      	sxth	r2, r3
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801009c:	0a1b      	lsrs	r3, r3, #8
 801009e:	b29b      	uxth	r3, r3
 80100a0:	b21b      	sxth	r3, r3
 80100a2:	4313      	orrs	r3, r2
 80100a4:	b21b      	sxth	r3, r3
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	805a      	strh	r2, [r3, #2]
                        break;
 80100ac:	e001      	b.n	80100b2 <prvAcceptWaitClient+0x13e>
                        break;
 80100ae:	bf00      	nop
 80100b0:	e000      	b.n	80100b4 <prvAcceptWaitClient+0x140>
                        break;
 80100b2:	bf00      	nop
            }
        }

        return pxClientSocket;
 80100b4:	697b      	ldr	r3, [r7, #20]
    }
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	08026958 	.word	0x08026958

080100c4 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08e      	sub	sp, #56	@ 0x38
 80100c8:	af02      	add	r7, sp, #8
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	627b      	str	r3, [r7, #36]	@ 0x24
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 80100d4:	2300      	movs	r3, #0
 80100d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 80100d8:	2300      	movs	r3, #0
 80100da:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80100dc:	2201      	movs	r2, #1
 80100de:	2106      	movs	r1, #6
 80100e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80100e2:	f7fe fa6d 	bl	800e5c0 <prvValidSocket>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d103      	bne.n	80100f4 <FreeRTOS_accept+0x30>
            /* Not a valid socket or wrong type */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 80100ec:	f04f 33ff 	mov.w	r3, #4294967295
 80100f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80100f2:	e058      	b.n	80101a6 <FreeRTOS_accept+0xe2>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 80100f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80100fa:	f003 0308 	and.w	r3, r3, #8
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d000      	beq.n	8010106 <FreeRTOS_accept+0x42>
 8010104:	e008      	b.n	8010118 <FreeRTOS_accept+0x54>
                 ( pxSocket->u.xTCP.eTCPState != eTCP_LISTEN ) )
 8010106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010108:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 801010c:	2b01      	cmp	r3, #1
 801010e:	d003      	beq.n	8010118 <FreeRTOS_accept+0x54>
            /* Parent socket is not in listening mode */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
 8010114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010116:	e046      	b.n	80101a6 <FreeRTOS_accept+0xe2>
        else
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	68b9      	ldr	r1, [r7, #8]
 801011c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801011e:	f7ff ff29 	bl	800ff74 <prvAcceptWaitClient>
 8010122:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxClientSocket != NULL )
 8010124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010126:	2b00      	cmp	r3, #0
 8010128:	d013      	beq.n	8010152 <FreeRTOS_accept+0x8e>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801012a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801012c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010130:	f003 0308 	and.w	r3, r3, #8
 8010134:	b2db      	uxtb	r3, r3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d130      	bne.n	801019c <FreeRTOS_accept+0xd8>
                    {
                        /* Ask to set an event in 'xEventGroup' as soon as a new
                         * client gets connected for this listening socket. */
                        xAskEvent.eEventType = eTCPAcceptEvent;
 801013a:	2307      	movs	r3, #7
 801013c:	743b      	strb	r3, [r7, #16]
                        xAskEvent.pvData = pxSocket;
 801013e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010140:	617b      	str	r3, [r7, #20]
                        ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 8010142:	f107 0310 	add.w	r3, r7, #16
 8010146:	f04f 31ff 	mov.w	r1, #4294967295
 801014a:	4618      	mov	r0, r3
 801014c:	f7f9 fe78 	bl	8009e40 <xSendEventStructToIPTask>
                    }

                    break;
 8010150:	e024      	b.n	801019c <FreeRTOS_accept+0xd8>
                }

                if( xTimed == pdFALSE )
 8010152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010154:	2b00      	cmp	r3, #0
 8010156:	d10c      	bne.n	8010172 <FreeRTOS_accept+0xae>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 8010158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	623b      	str	r3, [r7, #32]

                    if( xRemainingTime == ( TickType_t ) 0 )
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d01d      	beq.n	80101a0 <FreeRTOS_accept+0xdc>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 8010164:	2301      	movs	r3, #1
 8010166:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 8010168:	f107 0318 	add.w	r3, r7, #24
 801016c:	4618      	mov	r0, r3
 801016e:	f7f5 fa2d 	bl	80055cc <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010172:	f107 0220 	add.w	r2, r7, #32
 8010176:	f107 0318 	add.w	r3, r7, #24
 801017a:	4611      	mov	r1, r2
 801017c:	4618      	mov	r0, r3
 801017e:	f7f5 fa5d 	bl	800563c <xTaskCheckForTimeOut>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10d      	bne.n	80101a4 <FreeRTOS_accept+0xe0>
                {
                    break;
                }

                /* Put the calling task to 'sleep' until a down-stream event is received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup,
 8010188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801018a:	6858      	ldr	r0, [r3, #4]
 801018c:	6a3b      	ldr	r3, [r7, #32]
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	2300      	movs	r3, #0
 8010192:	2201      	movs	r2, #1
 8010194:	2104      	movs	r1, #4
 8010196:	f7f3 fa2d 	bl	80035f4 <xEventGroupWaitBits>
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 801019a:	e7bd      	b.n	8010118 <FreeRTOS_accept+0x54>
                    break;
 801019c:	bf00      	nop
 801019e:	e002      	b.n	80101a6 <FreeRTOS_accept+0xe2>
                        break;
 80101a0:	bf00      	nop
 80101a2:	e000      	b.n	80101a6 <FreeRTOS_accept+0xe2>
                    break;
 80101a4:	bf00      	nop
                                              pdFALSE /*xWaitAllBits*/,
                                              xRemainingTime );
            }
        }

        return pxClientSocket;
 80101a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80101a8:	4618      	mov	r0, r3
 80101aa:	3730      	adds	r7, #48	@ 0x30
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b08a      	sub	sp, #40	@ 0x28
 80101b4:	af02      	add	r7, sp, #8
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
 80101bc:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d13b      	bne.n	8010240 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	089b      	lsrs	r3, r3, #2
 80101cc:	f003 0301 	and.w	r3, r3, #1
 80101d0:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	2100      	movs	r1, #0
 80101e2:	f001 fa04 	bl	80115ee <uxStreamBufferGet>
 80101e6:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 80101e8:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80101f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d02b      	beq.n	8010252 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010200:	4618      	mov	r0, r3
 8010202:	f001 f8c5 	bl	8011390 <uxStreamBufferFrontSpace>
 8010206:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801020e:	697a      	ldr	r2, [r7, #20]
 8010210:	429a      	cmp	r2, r3
 8010212:	d31e      	bcc.n	8010252 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801021a:	f36f 13c7 	bfc	r3, #7, #1
 801021e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010228:	f043 0301 	orr.w	r3, r3, #1
 801022c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2201      	movs	r2, #1
 8010234:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010238:	2006      	movs	r0, #6
 801023a:	f7f9 fdeb 	bl	8009e14 <xSendEventToIPTask>
 801023e:	e008      	b.n	8010252 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010246:	68b9      	ldr	r1, [r7, #8]
 8010248:	4618      	mov	r0, r3
 801024a:	f001 f930 	bl	80114ae <uxStreamBufferGetPtr>
 801024e:	4603      	mov	r3, r0
 8010250:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 8010252:	69fb      	ldr	r3, [r7, #28]
    }
 8010254:	4618      	mov	r0, r3
 8010256:	3720      	adds	r7, #32
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 801025c:	b580      	push	{r7, lr}
 801025e:	b08e      	sub	sp, #56	@ 0x38
 8010260:	af02      	add	r7, sp, #8
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	60b9      	str	r1, [r7, #8]
 8010266:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 801026c:	2300      	movs	r3, #0
 801026e:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 8010270:	2300      	movs	r3, #0
 8010272:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801027a:	2b00      	cmp	r3, #0
 801027c:	d05f      	beq.n	801033e <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010284:	4618      	mov	r0, r3
 8010286:	f001 f894 	bl	80113b2 <uxStreamBufferGetSize>
 801028a:	4603      	mov	r3, r0
 801028c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 801028e:	e056      	b.n	801033e <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 801029a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d007      	beq.n	80102b2 <prvRecvWait+0x56>
 80102a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80102a6:	2b08      	cmp	r3, #8
 80102a8:	d003      	beq.n	80102b2 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 80102aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80102ae:	2b09      	cmp	r3, #9
 80102b0:	d10e      	bne.n	80102d0 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 80102b2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80102b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80102be:	f003 0308 	and.w	r3, r3, #8
 80102c2:	b2db      	uxtb	r3, r3
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d03e      	beq.n	8010346 <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 80102c8:	f06f 030b 	mvn.w	r3, #11
 80102cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 80102ce:	e03a      	b.n	8010346 <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 80102d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d111      	bne.n	80102fa <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	6a1b      	ldr	r3, [r3, #32]
 80102da:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d033      	beq.n	801034a <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f003 0310 	and.w	r3, r3, #16
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d130      	bne.n	801034e <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 80102ec:	2301      	movs	r3, #1
 80102ee:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 80102f0:	f107 0314 	add.w	r3, r7, #20
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7f5 f969 	bl	80055cc <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 80102fa:	f107 021c 	add.w	r2, r7, #28
 80102fe:	f107 0314 	add.w	r3, r7, #20
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f7f5 f999 	bl	800563c <xTaskCheckForTimeOut>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	d120      	bne.n	8010352 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	6858      	ldr	r0, [r3, #4]
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	9300      	str	r3, [sp, #0]
 8010318:	2300      	movs	r3, #0
 801031a:	2201      	movs	r2, #1
 801031c:	2161      	movs	r1, #97	@ 0x61
 801031e:	f7f3 f969 	bl	80035f4 <xEventGroupWaitBits>
 8010322:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801032a:	2b00      	cmp	r3, #0
 801032c:	d007      	beq.n	801033e <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010334:	4618      	mov	r0, r3
 8010336:	f001 f83c 	bl	80113b2 <uxStreamBufferGetSize>
 801033a:	4603      	mov	r3, r0
 801033c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 801033e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010340:	2b00      	cmp	r3, #0
 8010342:	d0a5      	beq.n	8010290 <prvRecvWait+0x34>
 8010344:	e006      	b.n	8010354 <prvRecvWait+0xf8>
                break;
 8010346:	bf00      	nop
 8010348:	e004      	b.n	8010354 <prvRecvWait+0xf8>
                    break;
 801034a:	bf00      	nop
 801034c:	e002      	b.n	8010354 <prvRecvWait+0xf8>
                    break;
 801034e:	bf00      	nop
 8010350:	e000      	b.n	8010354 <prvRecvWait+0xf8>
                break;
 8010352:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010358:	601a      	str	r2, [r3, #0]

        return xByteCount;
 801035a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 801035c:	4618      	mov	r0, r3
 801035e:	3730      	adds	r7, #48	@ 0x30
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
 8010370:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 8010372:	2300      	movs	r3, #0
 8010374:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 801037e:	2201      	movs	r2, #1
 8010380:	2106      	movs	r1, #6
 8010382:	69b8      	ldr	r0, [r7, #24]
 8010384:	f7fe f91c 	bl	800e5c0 <prvValidSocket>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	d103      	bne.n	8010396 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 801038e:	f06f 0315 	mvn.w	r3, #21
 8010392:	61fb      	str	r3, [r7, #28]
 8010394:	e01d      	b.n	80103d2 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	f003 0301 	and.w	r3, r3, #1
 801039c:	2b00      	cmp	r3, #0
 801039e:	d006      	beq.n	80103ae <FreeRTOS_recv+0x4a>
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d103      	bne.n	80103ae <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80103a6:	f06f 0315 	mvn.w	r3, #21
 80103aa:	61fb      	str	r3, [r7, #28]
 80103ac:	e011      	b.n	80103d2 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 80103ae:	f107 0314 	add.w	r3, r7, #20
 80103b2:	683a      	ldr	r2, [r7, #0]
 80103b4:	4619      	mov	r1, r3
 80103b6:	69b8      	ldr	r0, [r7, #24]
 80103b8:	f7ff ff50 	bl	801025c <prvRecvWait>
 80103bc:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dd06      	ble.n	80103d2 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	68b9      	ldr	r1, [r7, #8]
 80103ca:	69b8      	ldr	r0, [r7, #24]
 80103cc:	f7ff fef0 	bl	80101b0 <prvRecvData>
 80103d0:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 80103d2:	69fb      	ldr	r3, [r7, #28]
    }
 80103d4:	4618      	mov	r0, r3
 80103d6:	3720      	adds	r7, #32
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 80103e6:	2301      	movs	r3, #1
 80103e8:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80103ea:	2201      	movs	r2, #1
 80103ec:	2106      	movs	r1, #6
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7fe f8e6 	bl	800e5c0 <prvValidSocket>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d103      	bne.n	8010402 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 80103fa:	f06f 0315 	mvn.w	r3, #21
 80103fe:	60fb      	str	r3, [r7, #12]
 8010400:	e040      	b.n	8010484 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8010408:	f003 0308 	and.w	r3, r3, #8
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d003      	beq.n	801041a <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 8010412:	f06f 030b 	mvn.w	r3, #11
 8010416:	60fb      	str	r3, [r7, #12]
 8010418:	e034      	b.n	8010484 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010420:	2b00      	cmp	r3, #0
 8010422:	d009      	beq.n	8010438 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801042a:	2b08      	cmp	r3, #8
 801042c:	d004      	beq.n	8010438 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010434:	2b09      	cmp	r3, #9
 8010436:	d103      	bne.n	8010440 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010438:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801043c:	60fb      	str	r3, [r7, #12]
 801043e:	e021      	b.n	8010484 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801044a:	b2db      	uxtb	r3, r3
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 8010450:	2300      	movs	r3, #0
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	e016      	b.n	8010484 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d102      	bne.n	8010462 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	e010      	b.n	8010484 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010468:	2b00      	cmp	r3, #0
 801046a:	d10b      	bne.n	8010484 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 801046c:	2100      	movs	r1, #0
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 fac6 	bl	8010a00 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d102      	bne.n	8010484 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 801047e:	f06f 030b 	mvn.w	r3, #11
 8010482:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 8010484:	68fb      	ldr	r3, [r7, #12]
    }
 8010486:	4618      	mov	r0, r3
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 801048e:	b580      	push	{r7, lr}
 8010490:	b088      	sub	sp, #32
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
 8010496:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 8010498:	2300      	movs	r3, #0
 801049a:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	2200      	movs	r2, #0
 80104a8:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 80104aa:	2200      	movs	r2, #0
 80104ac:	2106      	movs	r1, #6
 80104ae:	6978      	ldr	r0, [r7, #20]
 80104b0:	f7fe f886 	bl	800e5c0 <prvValidSocket>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d135      	bne.n	8010526 <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80104c0:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10f      	bne.n	80104e8 <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80104ce:	f003 0308 	and.w	r3, r3, #8
 80104d2:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d107      	bne.n	80104e8 <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80104d8:	2100      	movs	r1, #0
 80104da:	6978      	ldr	r0, [r7, #20]
 80104dc:	f000 fa90 	bl	8010a00 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80104e6:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d01b      	beq.n	8010526 <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80104ee:	69b8      	ldr	r0, [r7, #24]
 80104f0:	f000 ff3d 	bl	801136e <uxStreamBufferGetSpace>
 80104f4:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	691a      	ldr	r2, [r3, #16]
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	689b      	ldr	r3, [r3, #8]
 80104fe:	1ad3      	subs	r3, r2, r3
 8010500:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 8010502:	68fa      	ldr	r2, [r7, #12]
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	429a      	cmp	r2, r3
 8010508:	d803      	bhi.n	8010512 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 801050a:	68fa      	ldr	r2, [r7, #12]
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	601a      	str	r2, [r3, #0]
 8010510:	e002      	b.n	8010518 <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 8010512:	693a      	ldr	r2, [r7, #16]
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	3310      	adds	r3, #16
 801051e:	69ba      	ldr	r2, [r7, #24]
 8010520:	4413      	add	r3, r2
 8010522:	3304      	adds	r3, #4
 8010524:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 8010526:	69fb      	ldr	r3, [r7, #28]
    }
 8010528:	4618      	mov	r0, r3
 801052a:	3720      	adds	r7, #32
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 8010530:	b580      	push	{r7, lr}
 8010532:	b090      	sub	sp, #64	@ 0x40
 8010534:	af02      	add	r7, sp, #8
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
 801053c:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 801053e:	2300      	movs	r3, #0
 8010540:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801054c:	4618      	mov	r0, r3
 801054e:	f000 ff0e 	bl	801136e <uxStreamBufferGetSpace>
 8010552:	4603      	mov	r3, r0
 8010554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 8010556:	2300      	movs	r3, #0
 8010558:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 801055e:	e08f      	b.n	8010680 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 8010560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010562:	2b00      	cmp	r3, #0
 8010564:	dd4b      	ble.n	80105fe <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 8010566:	2300      	movs	r3, #0
 8010568:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 801056a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801056c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801056e:	429a      	cmp	r2, r3
 8010570:	dd01      	ble.n	8010576 <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 8010572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010574:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801057c:	f003 0310 	and.w	r3, r3, #16
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00e      	beq.n	80105a4 <prvTCPSendLoop+0x74>
 8010586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801058a:	429a      	cmp	r2, r3
 801058c:	d10a      	bne.n	80105a4 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 801058e:	2301      	movs	r3, #1
 8010590:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 8010592:	f7f4 fb5f 	bl	8004c54 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 8010596:	68fa      	ldr	r2, [r7, #12]
 8010598:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801059c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105a0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80105aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ae:	2100      	movs	r1, #0
 80105b0:	f000 ff9d 	bl	80114ee <uxStreamBufferAdd>
 80105b4:	4603      	mov	r3, r0
 80105b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 80105b8:	6a3b      	ldr	r3, [r7, #32]
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d101      	bne.n	80105c2 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 80105be:	f7f4 fb57 	bl	8004c70 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2201      	movs	r2, #1
 80105c6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 80105ca:	f7fa fb7b 	bl	800acc4 <xIsCallingFromIPTask>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d102      	bne.n	80105da <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80105d4:	2006      	movs	r0, #6
 80105d6:	f7f9 fc1d 	bl	8009e14 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 80105da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 80105e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105e6:	4413      	add	r3, r2
 80105e8:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 80105ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d053      	beq.n	8010698 <prvTCPSendLoop+0x168>
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d050      	beq.n	8010698 <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 80105f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105fa:	4413      	add	r3, r2
 80105fc:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 80105fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010600:	2b00      	cmp	r3, #0
 8010602:	d119      	bne.n	8010638 <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010608:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 801060a:	f7fa fb5b 	bl	800acc4 <xIsCallingFromIPTask>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d001      	beq.n	8010618 <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 8010614:	2300      	movs	r3, #0
 8010616:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d035      	beq.n	801068a <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	f003 0310 	and.w	r3, r3, #16
 8010624:	2b00      	cmp	r3, #0
 8010626:	d132      	bne.n	801068e <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 8010628:	2301      	movs	r3, #1
 801062a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 801062c:	f107 0314 	add.w	r3, r7, #20
 8010630:	4618      	mov	r0, r3
 8010632:	f7f4 ffcb 	bl	80055cc <vTaskSetTimeOutState>
 8010636:	e00a      	b.n	801064e <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010638:	f107 021c 	add.w	r2, r7, #28
 801063c:	f107 0314 	add.w	r3, r7, #20
 8010640:	4611      	mov	r1, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7f4 fffa 	bl	800563c <xTaskCheckForTimeOut>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d121      	bne.n	8010692 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6858      	ldr	r0, [r3, #4]
 8010652:	69fb      	ldr	r3, [r7, #28]
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	2300      	movs	r3, #0
 8010658:	2201      	movs	r2, #1
 801065a:	2122      	movs	r1, #34	@ 0x22
 801065c:	f7f2 ffca 	bl	80035f4 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 8010660:	6879      	ldr	r1, [r7, #4]
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f7ff feba 	bl	80103dc <prvTCPSendCheck>
 8010668:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 801066a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066c:	2b00      	cmp	r3, #0
 801066e:	db12      	blt.n	8010696 <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fe79 	bl	801136e <uxStreamBufferGetSpace>
 801067c:	4603      	mov	r3, r0
 801067e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 8010680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010682:	2b00      	cmp	r3, #0
 8010684:	f73f af6c 	bgt.w	8010560 <prvTCPSendLoop+0x30>
 8010688:	e006      	b.n	8010698 <prvTCPSendLoop+0x168>
                    break;
 801068a:	bf00      	nop
 801068c:	e004      	b.n	8010698 <prvTCPSendLoop+0x168>
                    break;
 801068e:	bf00      	nop
 8010690:	e002      	b.n	8010698 <prvTCPSendLoop+0x168>
                    break;
 8010692:	bf00      	nop
 8010694:	e000      	b.n	8010698 <prvTCPSendLoop+0x168>
                break;
 8010696:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 8010698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801069a:	4618      	mov	r0, r3
 801069c:	3738      	adds	r7, #56	@ 0x38
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b086      	sub	sp, #24
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
 80106b0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	6938      	ldr	r0, [r7, #16]
 80106ba:	f7ff fe8f 	bl	80103dc <prvTCPSendCheck>
 80106be:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	dd24      	ble.n	8010710 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	687a      	ldr	r2, [r7, #4]
 80106ca:	68b9      	ldr	r1, [r7, #8]
 80106cc:	6938      	ldr	r0, [r7, #16]
 80106ce:	f7ff ff2f 	bl	8010530 <prvTCPSendLoop>
 80106d2:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d11a      	bne.n	8010710 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106e0:	2b05      	cmp	r3, #5
 80106e2:	d903      	bls.n	80106ec <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 80106e4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80106e8:	617b      	str	r3, [r7, #20]
 80106ea:	e011      	b.n	8010710 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80106f0:	2b17      	cmp	r3, #23
 80106f2:	d00a      	beq.n	801070a <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80106f8:	4619      	mov	r1, r3
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010704:	4805      	ldr	r0, [pc, #20]	@ (801071c <FreeRTOS_send+0x78>)
 8010706:	f012 f987 	bl	8022a18 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 801070a:	f06f 031b 	mvn.w	r3, #27
 801070e:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 8010710:	697b      	ldr	r3, [r7, #20]
    }
 8010712:	4618      	mov	r0, r3
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	08026984 	.word	0x08026984

08010720 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010732:	2201      	movs	r2, #1
 8010734:	2106      	movs	r1, #6
 8010736:	68b8      	ldr	r0, [r7, #8]
 8010738:	f7fd ff42 	bl	800e5c0 <prvValidSocket>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d103      	bne.n	801074a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010742:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010746:	60fb      	str	r3, [r7, #12]
 8010748:	e056      	b.n	80107f8 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010750:	2b00      	cmp	r3, #0
 8010752:	d008      	beq.n	8010766 <FreeRTOS_listen+0x46>
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801075a:	2b08      	cmp	r3, #8
 801075c:	d003      	beq.n	8010766 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 801075e:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010762:	60fb      	str	r3, [r7, #12]
 8010764:	e048      	b.n	80107f8 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 8010766:	6839      	ldr	r1, [r7, #0]
 8010768:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801076c:	f7fa fc5a 	bl	800b024 <FreeRTOS_min_int32>
 8010770:	4603      	mov	r3, r0
 8010772:	b29a      	uxth	r2, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010780:	f003 0308 	and.w	r3, r3, #8
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	d032      	beq.n	80107f0 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010790:	2b00      	cmp	r3, #0
 8010792:	d005      	beq.n	80107a0 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801079a:	4618      	mov	r0, r3
 801079c:	f000 fe2b 	bl	80113f6 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d005      	beq.n	80107b6 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107b0:	4618      	mov	r0, r3
 80107b2:	f000 fe20 	bl	80113f6 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	33aa      	adds	r3, #170	@ 0xaa
 80107ba:	225a      	movs	r2, #90	@ 0x5a
 80107bc:	2100      	movs	r1, #0
 80107be:	4618      	mov	r0, r3
 80107c0:	f012 fc53 	bl	802306a <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80107ca:	22c0      	movs	r2, #192	@ 0xc0
 80107cc:	2100      	movs	r1, #0
 80107ce:	4618      	mov	r0, r3
 80107d0:	f012 fc4b 	bl	802306a <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	3368      	adds	r3, #104	@ 0x68
 80107d8:	2204      	movs	r2, #4
 80107da:	2100      	movs	r1, #0
 80107dc:	4618      	mov	r0, r3
 80107de:	f012 fc44 	bl	802306a <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80107e8:	f043 0308 	orr.w	r3, r3, #8
 80107ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 80107f0:	2101      	movs	r1, #1
 80107f2:	68b8      	ldr	r0, [r7, #8]
 80107f4:	f001 f8a2 	bl	801193c <vTCPStateChange>
        }

        return xResult;
 80107f8:	68fb      	ldr	r3, [r7, #12]
    }
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010810:	2201      	movs	r2, #1
 8010812:	2106      	movs	r1, #6
 8010814:	68b8      	ldr	r0, [r7, #8]
 8010816:	f7fd fed3 	bl	800e5c0 <prvValidSocket>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d103      	bne.n	8010828 <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010820:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010824:	60fb      	str	r3, [r7, #12]
 8010826:	e018      	b.n	801085a <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801082e:	2b05      	cmp	r3, #5
 8010830:	d003      	beq.n	801083a <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010832:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010836:	60fb      	str	r3, [r7, #12]
 8010838:	e00f      	b.n	801085a <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010840:	f043 0320 	orr.w	r3, r3, #32
 8010844:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	2201      	movs	r2, #1
 801084c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010850:	2006      	movs	r0, #6
 8010852:	f7f9 fadf 	bl	8009e14 <xSendEventToIPTask>
            xResult = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 801085a:	68fb      	ldr	r3, [r7, #12]
    }
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}

08010864 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 8010864:	b580      	push	{r7, lr}
 8010866:	b08a      	sub	sp, #40	@ 0x28
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 801086c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010870:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 8010872:	f7f4 fb01 	bl	8004e78 <xTaskGetTickCount>
 8010876:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 8010878:	4b32      	ldr	r3, [pc, #200]	@ (8010944 <xTCPTimerCheck+0xe0>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	69ba      	ldr	r2, [r7, #24]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010882:	4b31      	ldr	r3, [pc, #196]	@ (8010948 <xTCPTimerCheck+0xe4>)
 8010884:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010886:	4b31      	ldr	r3, [pc, #196]	@ (801094c <xTCPTimerCheck+0xe8>)
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 801088c:	4a2d      	ldr	r2, [pc, #180]	@ (8010944 <xTCPTimerCheck+0xe0>)
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8010892:	6a3b      	ldr	r3, [r7, #32]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d14b      	bne.n	8010930 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 8010898:	2301      	movs	r3, #1
 801089a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 801089c:	e048      	b.n	8010930 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d03a      	beq.n	801092a <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80108ba:	461a      	mov	r2, r3
 80108bc:	6a3b      	ldr	r3, [r7, #32]
 80108be:	4293      	cmp	r3, r2
 80108c0:	d20a      	bcs.n	80108d8 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80108c8:	6a3b      	ldr	r3, [r7, #32]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80108d6:	e00a      	b.n	80108ee <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	2200      	movs	r2, #0
 80108dc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 80108e0:	6938      	ldr	r0, [r7, #16]
 80108e2:	f000 ff33 	bl	801174c <xTCPSocketCheck>
 80108e6:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	db1f      	blt.n	801092e <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d008      	beq.n	8010908 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d003      	beq.n	8010904 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 80108fc:	6938      	ldr	r0, [r7, #16]
 80108fe:	f7ff f970 	bl	800fbe2 <vSocketWakeUpUser>
 8010902:	e001      	b.n	8010908 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 8010904:	2300      	movs	r3, #0
 8010906:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00e      	beq.n	8010930 <xTCPTimerCheck+0xcc>
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010918:	461a      	mov	r2, r3
 801091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091c:	4293      	cmp	r3, r2
 801091e:	d907      	bls.n	8010930 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010926:	627b      	str	r3, [r7, #36]	@ 0x24
 8010928:	e002      	b.n	8010930 <xTCPTimerCheck+0xcc>
                continue;
 801092a:	bf00      	nop
 801092c:	e000      	b.n	8010930 <xTCPTimerCheck+0xcc>
                    continue;
 801092e:	bf00      	nop
        while( pxIterator != pxEnd )
 8010930:	69fa      	ldr	r2, [r7, #28]
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	429a      	cmp	r2, r3
 8010936:	d1b2      	bne.n	801089e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 8010938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801093a:	4618      	mov	r0, r3
 801093c:	3728      	adds	r7, #40	@ 0x28
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	20001634 	.word	0x20001634
 8010948:	20001628 	.word	0x20001628
 801094c:	20001620 	.word	0x20001620

08010950 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 8010950:	b082      	sub	sp, #8
 8010952:	b580      	push	{r7, lr}
 8010954:	b088      	sub	sp, #32
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	6039      	str	r1, [r7, #0]
 801095c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010960:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8010964:	2300      	movs	r3, #0
 8010966:	61bb      	str	r3, [r7, #24]
 8010968:	2300      	movs	r3, #0
 801096a:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801096c:	4b23      	ldr	r3, [pc, #140]	@ (80109fc <pxTCPSocketLookup+0xac>)
 801096e:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	61fb      	str	r3, [r7, #28]
 8010976:	e02e      	b.n	80109d6 <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	b29b      	uxth	r3, r3
 8010986:	429a      	cmp	r2, r3
 8010988:	d122      	bne.n	80109d0 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010990:	2b01      	cmp	r3, #1
 8010992:	d102      	bne.n	801099a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	617b      	str	r3, [r7, #20]
 8010998:	e01a      	b.n	80109d0 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80109a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d113      	bne.n	80109d0 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 80109a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d006      	beq.n	80109bc <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 80109ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80109b2:	68f8      	ldr	r0, [r7, #12]
 80109b4:	f7fb f8b6 	bl	800bb24 <pxTCPSocketLookup_IPv6>
 80109b8:	61b8      	str	r0, [r7, #24]
 80109ba:	e006      	b.n	80109ca <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d101      	bne.n	80109ca <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d107      	bne.n	80109e0 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d1cc      	bne.n	8010978 <pxTCPSocketLookup+0x28>
 80109de:	e000      	b.n	80109e2 <pxTCPSocketLookup+0x92>
                    {
                        break;
 80109e0:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d101      	bne.n	80109ec <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 80109ec:	69bb      	ldr	r3, [r7, #24]
    }
 80109ee:	4618      	mov	r0, r3
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109f8:	b002      	add	sp, #8
 80109fa:	4770      	bx	lr
 80109fc:	20001628 	.word	0x20001628

08010a00 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b088      	sub	sp, #32
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d048      	beq.n	8010aa2 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010a10:	2314      	movs	r3, #20
 8010a12:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010a14:	2350      	movs	r3, #80	@ 0x50
 8010a16:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a28:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d00f      	beq.n	8010a50 <prvTCPCreateStream+0x50>
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	2b04      	cmp	r3, #4
 8010a34:	d80c      	bhi.n	8010a50 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	3b01      	subs	r3, #1
 8010a3a:	4a40      	ldr	r2, [pc, #256]	@ (8010b3c <prvTCPCreateStream+0x13c>)
 8010a3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010a40:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	4a3d      	ldr	r2, [pc, #244]	@ (8010b3c <prvTCPCreateStream+0x13c>)
 8010a48:	00db      	lsls	r3, r3, #3
 8010a4a:	4413      	add	r3, r2
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010a56:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d10c      	bne.n	8010a7c <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010a68:	69ba      	ldr	r2, [r7, #24]
 8010a6a:	fb02 f303 	mul.w	r3, r2, r3
 8010a6e:	4a34      	ldr	r2, [pc, #208]	@ (8010b40 <prvTCPCreateStream+0x140>)
 8010a70:	fba2 2303 	umull	r2, r3, r2, r3
 8010a74:	095a      	lsrs	r2, r3, #5
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d111      	bne.n	8010aaa <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010a8c:	697a      	ldr	r2, [r7, #20]
 8010a8e:	fb02 f303 	mul.w	r3, r2, r3
 8010a92:	4a2b      	ldr	r2, [pc, #172]	@ (8010b40 <prvTCPCreateStream+0x140>)
 8010a94:	fba2 2303 	umull	r2, r3, r2, r3
 8010a98:	095a      	lsrs	r2, r3, #5
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8010aa0:	e003      	b.n	8010aaa <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010aa8:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 8010aaa:	69fb      	ldr	r3, [r7, #28]
 8010aac:	3304      	adds	r3, #4
 8010aae:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	f023 0303 	bic.w	r3, r3, #3
 8010ab6:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	3314      	adds	r3, #20
 8010abc:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f7f6 f848 	bl	8006b54 <pvPortMalloc>
 8010ac4:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d10e      	bne.n	8010aea <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 8010acc:	481d      	ldr	r0, [pc, #116]	@ (8010b44 <prvTCPCreateStream+0x144>)
 8010ace:	f011 ffa3 	bl	8022a18 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8010ad8:	f043 0308 	orr.w	r3, r3, #8
 8010adc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010ae0:	2108      	movs	r1, #8
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 ff2a 	bl	801193c <vTCPStateChange>
 8010ae8:	e022      	b.n	8010b30 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 8010aea:	2214      	movs	r2, #20
 8010aec:	2100      	movs	r1, #0
 8010aee:	68b8      	ldr	r0, [r7, #8]
 8010af0:	f012 fabb 	bl	802306a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	69fa      	ldr	r2, [r7, #28]
 8010af8:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 8010afa:	4b13      	ldr	r3, [pc, #76]	@ (8010b48 <prvTCPCreateStream+0x148>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00a      	beq.n	8010b18 <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d001      	beq.n	8010b0c <prvTCPCreateStream+0x10c>
 8010b08:	2152      	movs	r1, #82	@ 0x52
 8010b0a:	e000      	b.n	8010b0e <prvTCPCreateStream+0x10e>
 8010b0c:	2154      	movs	r1, #84	@ 0x54
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	69fa      	ldr	r2, [r7, #28]
 8010b12:	480e      	ldr	r0, [pc, #56]	@ (8010b4c <prvTCPCreateStream+0x14c>)
 8010b14:	f011 ff80 	bl	8022a18 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d004      	beq.n	8010b28 <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010b26:	e003      	b.n	8010b30 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	68ba      	ldr	r2, [r7, #8]
 8010b2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 8010b30:	68bb      	ldr	r3, [r7, #8]
    }
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	080282bc 	.word	0x080282bc
 8010b40:	51eb851f 	.word	0x51eb851f
 8010b44:	080269ac 	.word	0x080269ac
 8010b48:	20001664 	.word	0x20001664
 8010b4c:	080269d0 	.word	0x080269d0

08010b50 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08a      	sub	sp, #40	@ 0x28
 8010b54:	af02      	add	r7, sp, #8
 8010b56:	60f8      	str	r0, [r7, #12]
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d006      	beq.n	8010b78 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 8010b6a:	69fb      	ldr	r3, [r7, #28]
 8010b6c:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	61fb      	str	r3, [r7, #28]
 8010b76:	e009      	b.n	8010b8c <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010b7e:	f107 0214 	add.w	r2, r7, #20
 8010b82:	4611      	mov	r1, r2
 8010b84:	4618      	mov	r0, r3
 8010b86:	f000 fc92 	bl	80114ae <uxStreamBufferGetPtr>
 8010b8a:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d011      	beq.n	8010bb6 <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010b98:	6979      	ldr	r1, [r7, #20]
 8010b9a:	69ba      	ldr	r2, [r7, #24]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	9300      	str	r3, [sp, #0]
 8010baa:	69bb      	ldr	r3, [r7, #24]
 8010bac:	2200      	movs	r2, #0
 8010bae:	2100      	movs	r1, #0
 8010bb0:	f000 fd1d 	bl	80115ee <uxStreamBufferGet>
        {
 8010bb4:	e7d4      	b.n	8010b60 <vTCPAddRxdata_Callback+0x10>
        }
    }
 8010bb6:	bf00      	nop
 8010bb8:	3720      	adds	r7, #32
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b084      	sub	sp, #16
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010bcc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d121      	bne.n	8010c1a <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 fbd7 	bl	8011390 <uxStreamBufferFrontSpace>
 8010be2:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d814      	bhi.n	8010c1a <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bfa:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010c04:	f043 0301 	orr.w	r3, r3, #1
 8010c08:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010c14:	2006      	movs	r0, #6
 8010c16:	f7f9 f8fd 	bl	8009e14 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f043 0201 	orr.w	r2, r3, #1
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d005      	beq.n	8010c3e <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 8010c3e:	bf00      	nop
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8010c48:	b5b0      	push	{r4, r5, r7, lr}
 8010c4a:	b08c      	sub	sp, #48	@ 0x30
 8010c4c:	af04      	add	r7, sp, #16
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
 8010c54:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c5c:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <lTCPAddRxdata+0x28>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e000      	b.n	8010c72 <lTCPAddRxdata+0x2a>
 8010c70:	2300      	movs	r3, #0
 8010c72:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010c74:	2300      	movs	r3, #0
 8010c76:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10a      	bne.n	8010c94 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010c7e:	2101      	movs	r1, #1
 8010c80:	68f8      	ldr	r0, [r7, #12]
 8010c82:	f7ff febd 	bl	8010a00 <prvTCPCreateStream>
 8010c86:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8010c88:	69fb      	ldr	r3, [r7, #28]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d102      	bne.n	8010c94 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c92:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010c94:	69bb      	ldr	r3, [r7, #24]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	db41      	blt.n	8010d1e <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00f      	beq.n	8010cc0 <lTCPAddRxdata+0x78>
 8010ca0:	69f8      	ldr	r0, [r7, #28]
 8010ca2:	f000 fb86 	bl	80113b2 <uxStreamBufferGetSize>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d109      	bne.n	8010cc0 <lTCPAddRxdata+0x78>
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d106      	bne.n	8010cc0 <lTCPAddRxdata+0x78>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d003      	beq.n	8010cc0 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	69f8      	ldr	r0, [r7, #28]
 8010cc8:	f000 fc11 	bl	80114ee <uxStreamBufferAdd>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	69ba      	ldr	r2, [r7, #24]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d013      	beq.n	8010d00 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	681c      	ldr	r4, [r3, #0]
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	689d      	ldr	r5, [r3, #8]
 8010ce0:	69f8      	ldr	r0, [r7, #28]
 8010ce2:	f000 fb55 	bl	8011390 <uxStreamBufferFrontSpace>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	9303      	str	r3, [sp, #12]
 8010cee:	9202      	str	r2, [sp, #8]
 8010cf0:	9501      	str	r5, [sp, #4]
 8010cf2:	9400      	str	r4, [sp, #0]
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	69ba      	ldr	r2, [r7, #24]
 8010cf8:	68b9      	ldr	r1, [r7, #8]
 8010cfa:	480b      	ldr	r0, [pc, #44]	@ (8010d28 <lTCPAddRxdata+0xe0>)
 8010cfc:	f011 fe8c 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10b      	bne.n	8010d1e <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d005      	beq.n	8010d18 <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	6979      	ldr	r1, [r7, #20]
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f7ff ff1d 	bl	8010b50 <vTCPAddRxdata_Callback>
 8010d16:	e002      	b.n	8010d1e <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7ff ff50 	bl	8010bbe <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010d1e:	69bb      	ldr	r3, [r7, #24]
    }
 8010d20:	4618      	mov	r0, r3
 8010d22:	3720      	adds	r7, #32
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bdb0      	pop	{r4, r5, r7, pc}
 8010d28:	08026a0c 	.word	0x08026a0c

08010d2c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010d3e:	2b06      	cmp	r3, #6
 8010d40:	d003      	beq.n	8010d4a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010d42:	f06f 0315 	mvn.w	r3, #21
 8010d46:	60fb      	str	r3, [r7, #12]
 8010d48:	e011      	b.n	8010d6e <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d008      	beq.n	8010d66 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 fb07 	bl	801136e <uxStreamBufferGetSpace>
 8010d60:	4603      	mov	r3, r0
 8010d62:	60fb      	str	r3, [r7, #12]
 8010d64:	e003      	b.n	8010d6e <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010d6c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
    }
 8010d70:	4618      	mov	r0, r3
 8010d72:	3710      	adds	r7, #16
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b084      	sub	sp, #16
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010d8a:	2b06      	cmp	r3, #6
 8010d8c:	d003      	beq.n	8010d96 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010d8e:	f06f 0315 	mvn.w	r3, #21
 8010d92:	60fb      	str	r3, [r7, #12]
 8010d94:	e00f      	b.n	8010db6 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d008      	beq.n	8010db2 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 fb03 	bl	80113b2 <uxStreamBufferGetSize>
 8010dac:	4603      	mov	r3, r0
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	e001      	b.n	8010db6 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010db6:	68fb      	ldr	r3, [r7, #12]
    }
 8010db8:	4618      	mov	r0, r3
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010dc0:	b480      	push	{r7}
 8010dc2:	b085      	sub	sp, #20
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010dd6:	2b06      	cmp	r3, #6
 8010dd8:	d003      	beq.n	8010de2 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010dda:	f06f 0315 	mvn.w	r3, #21
 8010dde:	60fb      	str	r3, [r7, #12]
 8010de0:	e00b      	b.n	8010dfa <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010de2:	68bb      	ldr	r3, [r7, #8]
 8010de4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010de8:	2b04      	cmp	r3, #4
 8010dea:	d906      	bls.n	8010dfa <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010df2:	2b07      	cmp	r3, #7
 8010df4:	d801      	bhi.n	8010dfa <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 8010df6:	2301      	movs	r3, #1
 8010df8:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
    }
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3714      	adds	r7, #20
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b084      	sub	sp, #16
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010e1a:	2b06      	cmp	r3, #6
 8010e1c:	d003      	beq.n	8010e26 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010e1e:	f06f 0315 	mvn.w	r3, #21
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	e00f      	b.n	8010e46 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d008      	beq.n	8010e42 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010e36:	4618      	mov	r0, r3
 8010e38:	f000 fabb 	bl	80113b2 <uxStreamBufferGetSize>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	60fb      	str	r3, [r7, #12]
 8010e40:	e001      	b.n	8010e46 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010e42:	2300      	movs	r3, #0
 8010e44:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8010e46:	68fb      	ldr	r3, [r7, #12]
    }
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010e50:	b480      	push	{r7}
 8010e52:	b085      	sub	sp, #20
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e62:	d004      	beq.n	8010e6e <xSocketValid+0x1e>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010e6e:	68fb      	ldr	r3, [r7, #12]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3714      	adds	r7, #20
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e80:	b09c      	sub	sp, #112	@ 0x70
 8010e82:	af08      	add	r7, sp, #32
 8010e84:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 8010e86:	2320      	movs	r3, #32
 8010e88:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8010e8a:	f7f3 fff5 	bl	8004e78 <xTaskGetTickCount>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	60fb      	str	r3, [r7, #12]
 8010e9e:	f107 0310 	add.w	r3, r7, #16
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	601a      	str	r2, [r3, #0]
 8010ea6:	605a      	str	r2, [r3, #4]
 8010ea8:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d11f      	bne.n	8010ef4 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010eba:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010ec2:	f107 000c 	add.w	r0, r7, #12
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	4613      	mov	r3, r2
 8010eca:	4a3b      	ldr	r2, [pc, #236]	@ (8010fb8 <vTCPNetStat_TCPSocket+0x13c>)
 8010ecc:	2110      	movs	r1, #16
 8010ece:	f012 fdcf 	bl	8023a70 <snprintf>
 8010ed2:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	da04      	bge.n	8010ee4 <vTCPNetStat_TCPSocket+0x68>
 8010eda:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010ede:	4837      	ldr	r0, [pc, #220]	@ (8010fbc <vTCPNetStat_TCPSocket+0x140>)
 8010ee0:	f7f0 fdd4 	bl	8001a8c <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010ee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ee6:	2b0f      	cmp	r3, #15
 8010ee8:	dd04      	ble.n	8010ef4 <vTCPNetStat_TCPSocket+0x78>
 8010eea:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010eee:	4833      	ldr	r0, [pc, #204]	@ (8010fbc <vTCPNetStat_TCPSocket+0x140>)
 8010ef0:	f7f0 fdcc 	bl	8001a8c <vAssertCalled>
        }

        if( age > 999999U )
 8010ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ef6:	4a32      	ldr	r2, [pc, #200]	@ (8010fc0 <vTCPNetStat_TCPSocket+0x144>)
 8010ef8:	4293      	cmp	r3, r2
 8010efa:	d901      	bls.n	8010f00 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010efc:	4b30      	ldr	r3, [pc, #192]	@ (8010fc0 <vTCPNetStat_TCPSocket+0x144>)
 8010efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	7a1b      	ldrb	r3, [r3, #8]
 8010f04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <vTCPNetStat_TCPSocket+0x98>
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d009      	beq.n	8010f26 <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010f12:	e011      	b.n	8010f38 <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f18:	f107 001c 	add.w	r0, r7, #28
 8010f1c:	4a29      	ldr	r2, [pc, #164]	@ (8010fc4 <vTCPNetStat_TCPSocket+0x148>)
 8010f1e:	2128      	movs	r1, #40	@ 0x28
 8010f20:	f012 fda6 	bl	8023a70 <snprintf>
                    break;
 8010f24:	e008      	b.n	8010f38 <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 8010f2a:	f107 001c 	add.w	r0, r7, #28
 8010f2e:	4a26      	ldr	r2, [pc, #152]	@ (8010fc8 <vTCPNetStat_TCPSocket+0x14c>)
 8010f30:	2128      	movs	r1, #40	@ 0x28
 8010f32:	f012 fd9d 	bl	8023a70 <snprintf>
                    break;
 8010f36:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010f3c:	4698      	mov	r8, r3
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010f44:	461c      	mov	r4, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	bf14      	ite	ne
 8010f50:	2301      	movne	r3, #1
 8010f52:	2300      	moveq	r3, #0
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	461d      	mov	r5, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	bf14      	ite	ne
 8010f62:	2301      	movne	r3, #1
 8010f64:	2300      	moveq	r3, #0
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	461e      	mov	r6, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f70:	4618      	mov	r0, r3
 8010f72:	f002 fbf5 	bl	8013760 <FreeRTOS_GetTCPStateName>
 8010f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f78:	4a11      	ldr	r2, [pc, #68]	@ (8010fc0 <vTCPNetStat_TCPSocket+0x144>)
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	bf28      	it	cs
 8010f7e:	4613      	movcs	r3, r2
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 8010f86:	603a      	str	r2, [r7, #0]
 8010f88:	f107 011c 	add.w	r1, r7, #28
 8010f8c:	f107 020c 	add.w	r2, r7, #12
 8010f90:	9206      	str	r2, [sp, #24]
 8010f92:	683a      	ldr	r2, [r7, #0]
 8010f94:	9205      	str	r2, [sp, #20]
 8010f96:	9304      	str	r3, [sp, #16]
 8010f98:	9003      	str	r0, [sp, #12]
 8010f9a:	9602      	str	r6, [sp, #8]
 8010f9c:	9501      	str	r5, [sp, #4]
 8010f9e:	9400      	str	r4, [sp, #0]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fa4:	4641      	mov	r1, r8
 8010fa6:	4809      	ldr	r0, [pc, #36]	@ (8010fcc <vTCPNetStat_TCPSocket+0x150>)
 8010fa8:	f011 fd36 	bl	8022a18 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010fac:	bf00      	nop
 8010fae:	3750      	adds	r7, #80	@ 0x50
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08026a54 	.word	0x08026a54
 8010fbc:	08026574 	.word	0x08026574
 8010fc0:	000f423f 	.word	0x000f423f
 8010fc4:	08026a5c 	.word	0x08026a5c
 8010fc8:	08026a64 	.word	0x08026a64
 8010fcc:	08026a6c 	.word	0x08026a6c

08010fd0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b08a      	sub	sp, #40	@ 0x28
 8010fd4:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8010fda:	f006 fe59 	bl	8017c90 <uxGetMinimumFreeNetworkBuffers>
 8010fde:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010fe0:	f006 fe62 	bl	8017ca8 <uxGetNumberOfFreeNetworkBuffers>
 8010fe4:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8010fe6:	4b26      	ldr	r3, [pc, #152]	@ (8011080 <vTCPNetStat+0xb0>)
 8010fe8:	689b      	ldr	r3, [r3, #8]
 8010fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fee:	d003      	beq.n	8010ff8 <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010ff0:	4824      	ldr	r0, [pc, #144]	@ (8011084 <vTCPNetStat+0xb4>)
 8010ff2:	f011 fd11 	bl	8022a18 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 8010ff6:	e03f      	b.n	8011078 <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8010ff8:	4b23      	ldr	r3, [pc, #140]	@ (8011088 <vTCPNetStat+0xb8>)
 8010ffa:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010ffc:	4b23      	ldr	r3, [pc, #140]	@ (801108c <vTCPNetStat+0xbc>)
 8010ffe:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8011000:	4823      	ldr	r0, [pc, #140]	@ (8011090 <vTCPNetStat+0xc0>)
 8011002:	f011 fd09 	bl	8022a18 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011006:	4b1e      	ldr	r3, [pc, #120]	@ (8011080 <vTCPNetStat+0xb0>)
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	61fb      	str	r3, [r7, #28]
 801100c:	e00b      	b.n	8011026 <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff ff31 	bl	8010e7c <vTCPNetStat_TCPSocket>
                count++;
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	3301      	adds	r3, #1
 801101e:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 8011026:	69fa      	ldr	r2, [r7, #28]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	429a      	cmp	r2, r3
 801102c:	d1ef      	bne.n	801100e <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 801102e:	4b19      	ldr	r3, [pc, #100]	@ (8011094 <vTCPNetStat+0xc4>)
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	61fb      	str	r3, [r7, #28]
 8011034:	e014      	b.n	8011060 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	b29b      	uxth	r3, r3
 801103c:	021b      	lsls	r3, r3, #8
 801103e:	b29a      	uxth	r2, r3
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	0a1b      	lsrs	r3, r3, #8
 8011046:	b29b      	uxth	r3, r3
 8011048:	4313      	orrs	r3, r2
 801104a:	b29b      	uxth	r3, r3
 801104c:	4619      	mov	r1, r3
 801104e:	4812      	ldr	r0, [pc, #72]	@ (8011098 <vTCPNetStat+0xc8>)
 8011050:	f011 fce2 	bl	8022a18 <lUDPLoggingPrintf>
                count++;
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	3301      	adds	r3, #1
 8011058:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8011060:	69fa      	ldr	r2, [r7, #28]
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	429a      	cmp	r2, r3
 8011066:	d1e6      	bne.n	8011036 <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 8011068:	2340      	movs	r3, #64	@ 0x40
 801106a:	9300      	str	r3, [sp, #0]
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	697a      	ldr	r2, [r7, #20]
 8011070:	69b9      	ldr	r1, [r7, #24]
 8011072:	480a      	ldr	r0, [pc, #40]	@ (801109c <vTCPNetStat+0xcc>)
 8011074:	f011 fcd0 	bl	8022a18 <lUDPLoggingPrintf>
    }
 8011078:	bf00      	nop
 801107a:	3720      	adds	r7, #32
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20001620 	.word	0x20001620
 8011084:	08026a98 	.word	0x08026a98
 8011088:	20001628 	.word	0x20001628
 801108c:	20001614 	.word	0x20001614
 8011090:	08026ab4 	.word	0x08026ab4
 8011094:	2000160c 	.word	0x2000160c
 8011098:	08026afc 	.word	0x08026afc
 801109c:	08026b0c 	.word	0x08026b0c

080110a0 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 80110a8:	2300      	movs	r3, #0
 80110aa:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 80110ac:	2300      	movs	r3, #0
 80110ae:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80110b6:	f003 0304 	and.w	r3, r3, #4
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d109      	bne.n	80110d4 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80110c6:	f003 0302 	and.w	r3, r3, #2
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d101      	bne.n	80110d4 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 80110d0:	2301      	movs	r3, #1
 80110d2:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d038      	beq.n	8011152 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d111      	bne.n	801110e <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d02f      	beq.n	8011152 <vSocketSelectTCP+0xb2>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80110fa:	f003 0302 	and.w	r3, r3, #2
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	d026      	beq.n	8011152 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	f043 0301 	orr.w	r3, r3, #1
 801110a:	613b      	str	r3, [r7, #16]
 801110c:	e021      	b.n	8011152 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011114:	f003 0308 	and.w	r3, r3, #8
 8011118:	b2db      	uxtb	r3, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00c      	beq.n	8011138 <vSocketSelectTCP+0x98>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011124:	f003 0302 	and.w	r3, r3, #2
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d004      	beq.n	8011138 <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	f043 0301 	orr.w	r3, r3, #1
 8011134:	613b      	str	r3, [r7, #16]
 8011136:	e00c      	b.n	8011152 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d009      	beq.n	8011152 <vSocketSelectTCP+0xb2>
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f7ff fe62 	bl	8010e08 <FreeRTOS_rx_size>
 8011144:	4603      	mov	r3, r0
 8011146:	2b00      	cmp	r3, #0
 8011148:	dd03      	ble.n	8011152 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	f043 0301 	orr.w	r3, r3, #1
 8011150:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011156:	f003 0304 	and.w	r3, r3, #4
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00d      	beq.n	801117a <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011164:	2b08      	cmp	r3, #8
 8011166:	d004      	beq.n	8011172 <vSocketSelectTCP+0xd2>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801116e:	2b00      	cmp	r3, #0
 8011170:	d103      	bne.n	801117a <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	f043 0304 	orr.w	r3, r3, #4
 8011178:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d034      	beq.n	80111f0 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 8011186:	2300      	movs	r3, #0
 8011188:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d007      	beq.n	80111a0 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7ff fdcb 	bl	8010d2c <FreeRTOS_tx_space>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	dd01      	ble.n	80111a0 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 801119c:	2301      	movs	r3, #1
 801119e:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d11d      	bne.n	80111e2 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80111ac:	f003 0308 	and.w	r3, r3, #8
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d015      	beq.n	80111e2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 80111bc:	2b04      	cmp	r3, #4
 80111be:	d910      	bls.n	80111e2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80111c6:	f003 0310 	and.w	r3, r3, #16
 80111ca:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d108      	bne.n	80111e2 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80111d6:	f043 0310 	orr.w	r3, r3, #16
 80111da:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 80111de:	2301      	movs	r3, #1
 80111e0:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d003      	beq.n	80111f0 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	f043 0302 	orr.w	r3, r3, #2
 80111ee:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 80111f0:	693b      	ldr	r3, [r7, #16]
        }
 80111f2:	4618      	mov	r0, r3
 80111f4:	3718      	adds	r7, #24
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
	...

080111fc <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b08a      	sub	sp, #40	@ 0x28
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8011204:	2301      	movs	r3, #1
 8011206:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 8011208:	2300      	movs	r3, #0
 801120a:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 801120c:	2300      	movs	r3, #0
 801120e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011210:	e043      	b.n	801129a <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8011212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011214:	2b00      	cmp	r3, #0
 8011216:	d102      	bne.n	801121e <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8011218:	4b34      	ldr	r3, [pc, #208]	@ (80112ec <vSocketSelect+0xf0>)
 801121a:	617b      	str	r3, [r7, #20]
 801121c:	e001      	b.n	8011222 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801121e:	4b34      	ldr	r3, [pc, #208]	@ (80112f0 <vSocketSelect+0xf4>)
 8011220:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	61bb      	str	r3, [r7, #24]
 8011228:	e030      	b.n	801128c <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	429a      	cmp	r2, r3
 8011238:	d124      	bne.n	8011284 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011244:	2b06      	cmp	r3, #6
 8011246:	d107      	bne.n	8011258 <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 8011248:	68b8      	ldr	r0, [r7, #8]
 801124a:	f7ff ff29 	bl	80110a0 <vSocketSelectTCP>
 801124e:	4602      	mov	r2, r0
 8011250:	6a3b      	ldr	r3, [r7, #32]
 8011252:	4313      	orrs	r3, r2
 8011254:	623b      	str	r3, [r7, #32]
 8011256:	e00d      	b.n	8011274 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801125c:	f003 0301 	and.w	r3, r3, #1
 8011260:	2b00      	cmp	r3, #0
 8011262:	d007      	beq.n	8011274 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8011268:	2b00      	cmp	r3, #0
 801126a:	d003      	beq.n	8011274 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801126c:	6a3b      	ldr	r3, [r7, #32]
 801126e:	f043 0301 	orr.w	r3, r3, #1
 8011272:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	6a3a      	ldr	r2, [r7, #32]
 8011278:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 801127a:	69fa      	ldr	r2, [r7, #28]
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	4313      	orrs	r3, r2
 8011280:	61fb      	str	r3, [r7, #28]
 8011282:	e000      	b.n	8011286 <vSocketSelect+0x8a>
                    continue;
 8011284:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 8011286:	69bb      	ldr	r3, [r7, #24]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 801128c:	69ba      	ldr	r2, [r7, #24]
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	429a      	cmp	r2, r3
 8011292:	d1ca      	bne.n	801122a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8011294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011296:	3301      	adds	r3, #1
 8011298:	627b      	str	r3, [r7, #36]	@ 0x24
 801129a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	429a      	cmp	r2, r3
 80112a0:	ddb7      	ble.n	8011212 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	2100      	movs	r1, #0
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f2 fa5b 	bl	8003764 <xEventGroupClearBits>
 80112ae:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 80112b0:	69fb      	ldr	r3, [r7, #28]
 80112b2:	43da      	mvns	r2, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	4013      	ands	r3, r2
 80112b8:	f003 030f 	and.w	r3, r3, #15
 80112bc:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d005      	beq.n	80112d0 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	68f9      	ldr	r1, [r7, #12]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7f2 fa4a 	bl	8003764 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	f043 0310 	orr.w	r3, r3, #16
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f7f2 fa6f 	bl	80037c0 <xEventGroupSetBits>
    }
 80112e2:	bf00      	nop
 80112e4:	3728      	adds	r7, #40	@ 0x28
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	20001614 	.word	0x20001614
 80112f0:	20001628 	.word	0x20001628

080112f4 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 80112f4:	b480      	push	{r7}
 80112f6:	b087      	sub	sp, #28
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	691b      	ldr	r3, [r3, #16]
 8011304:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8011306:	693a      	ldr	r2, [r7, #16]
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	441a      	add	r2, r3
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	3b01      	subs	r3, #1
 8011312:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011314:	697a      	ldr	r2, [r7, #20]
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	429a      	cmp	r2, r3
 801131a:	d303      	bcc.n	8011324 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 801131c:	697a      	ldr	r2, [r7, #20]
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011324:	697b      	ldr	r3, [r7, #20]
}
 8011326:	4618      	mov	r0, r3
 8011328:	371c      	adds	r7, #28
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8011332:	b480      	push	{r7}
 8011334:	b087      	sub	sp, #28
 8011336:	af00      	add	r7, sp, #0
 8011338:	60f8      	str	r0, [r7, #12]
 801133a:	60b9      	str	r1, [r7, #8]
 801133c:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8011344:	693a      	ldr	r2, [r7, #16]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	441a      	add	r2, r3
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011350:	697a      	ldr	r2, [r7, #20]
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	429a      	cmp	r2, r3
 8011356:	d303      	bcc.n	8011360 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 8011358:	697a      	ldr	r2, [r7, #20]
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011360:	697b      	ldr	r3, [r7, #20]
}
 8011362:	4618      	mov	r0, r3
 8011364:	371c      	adds	r7, #28
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 801136e:	b580      	push	{r7, lr}
 8011370:	b082      	sub	sp, #8
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6899      	ldr	r1, [r3, #8]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	461a      	mov	r2, r3
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f7ff ffb7 	bl	80112f4 <uxStreamBufferSpace>
 8011386:	4603      	mov	r3, r0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3708      	adds	r7, #8
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	68d9      	ldr	r1, [r3, #12]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	461a      	mov	r2, r3
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7ff ffa6 	bl	80112f4 <uxStreamBufferSpace>
 80113a8:	4603      	mov	r3, r0
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b082      	sub	sp, #8
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6819      	ldr	r1, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	461a      	mov	r2, r3
 80113c4:	6878      	ldr	r0, [r7, #4]
 80113c6:	f7ff ffb4 	bl	8011332 <uxStreamBufferDistance>
 80113ca:	4603      	mov	r3, r0
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3708      	adds	r7, #8
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}

080113d4 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b082      	sub	sp, #8
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6859      	ldr	r1, [r3, #4]
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	461a      	mov	r2, r3
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7ff ffa3 	bl	8011332 <uxStreamBufferDistance>
 80113ec:	4603      	mov	r3, r0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3708      	adds	r7, #8
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}

080113f6 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 80113f6:	b480      	push	{r7}
 80113f8:	b083      	sub	sp, #12
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2200      	movs	r2, #0
 8011402:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2200      	movs	r2, #0
 801140e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	605a      	str	r2, [r3, #4]
}
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b086      	sub	sp, #24
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
 801142a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff ffce 	bl	80113d4 <uxStreamBufferMidSpace>
 8011438:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8011444:	693a      	ldr	r2, [r7, #16]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	429a      	cmp	r2, r3
 801144a:	d901      	bls.n	8011450 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8011450:	697a      	ldr	r2, [r7, #20]
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	4413      	add	r3, r2
 8011456:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	429a      	cmp	r2, r3
 801145e:	d303      	bcc.n	8011468 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8011460:	697a      	ldr	r2, [r7, #20]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	697a      	ldr	r2, [r7, #20]
 801146c:	605a      	str	r2, [r3, #4]
}
 801146e:	bf00      	nop
 8011470:	3718      	adds	r7, #24
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}

08011476 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 8011476:	b480      	push	{r7}
 8011478:	b087      	sub	sp, #28
 801147a:	af00      	add	r7, sp, #0
 801147c:	60f8      	str	r0, [r7, #12]
 801147e:	60b9      	str	r1, [r7, #8]
 8011480:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 801148c:	68ba      	ldr	r2, [r7, #8]
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	1ad2      	subs	r2, r2, r3
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	1acb      	subs	r3, r1, r3
 8011498:	429a      	cmp	r2, r3
 801149a:	d801      	bhi.n	80114a0 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 801149c:	2301      	movs	r3, #1
 801149e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80114a0:	697b      	ldr	r3, [r7, #20]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	371c      	adds	r7, #28
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr

080114ae <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b084      	sub	sp, #16
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
 80114b6:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f7ff ff77 	bl	80113b2 <uxStreamBufferGetSize>
 80114c4:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f103 0214 	add.w	r2, r3, #20
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	441a      	add	r2, r3
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	691a      	ldr	r2, [r3, #16]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	4619      	mov	r1, r3
 80114de:	68b8      	ldr	r0, [r7, #8]
 80114e0:	f7f9 fdc0 	bl	800b064 <FreeRTOS_min_size_t>
 80114e4:	4603      	mov	r3, r0
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b08a      	sub	sp, #40	@ 0x28
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	60f8      	str	r0, [r7, #12]
 80114f6:	60b9      	str	r1, [r7, #8]
 80114f8:	607a      	str	r2, [r7, #4]
 80114fa:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f7ff ff36 	bl	801136e <uxStreamBufferGetSpace>
 8011502:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8011504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	429a      	cmp	r2, r3
 801150a:	d904      	bls.n	8011516 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 801150c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	627b      	str	r3, [r7, #36]	@ 0x24
 8011514:	e001      	b.n	801151a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8011516:	2300      	movs	r3, #0
 8011518:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801151a:	6839      	ldr	r1, [r7, #0]
 801151c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801151e:	f7f9 fda1 	bl	800b064 <FreeRTOS_min_size_t>
 8011522:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d05c      	beq.n	80115e4 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	691b      	ldr	r3, [r3, #16]
 801152e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	689b      	ldr	r3, [r3, #8]
 8011534:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00b      	beq.n	8011554 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 801153c:	6a3a      	ldr	r2, [r7, #32]
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	4413      	add	r3, r2
 8011542:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8011544:	6a3a      	ldr	r2, [r7, #32]
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	429a      	cmp	r2, r3
 801154a:	d303      	bcc.n	8011554 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 801154c:	6a3a      	ldr	r2, [r7, #32]
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d021      	beq.n	801159e <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801155a:	69ba      	ldr	r2, [r7, #24]
 801155c:	6a3b      	ldr	r3, [r7, #32]
 801155e:	1ad3      	subs	r3, r2, r3
 8011560:	69f9      	ldr	r1, [r7, #28]
 8011562:	4618      	mov	r0, r3
 8011564:	f7f9 fd7e 	bl	800b064 <FreeRTOS_min_size_t>
 8011568:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 801156a:	6a3b      	ldr	r3, [r7, #32]
 801156c:	3310      	adds	r3, #16
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	4413      	add	r3, r2
 8011572:	3304      	adds	r3, #4
 8011574:	697a      	ldr	r2, [r7, #20]
 8011576:	6879      	ldr	r1, [r7, #4]
 8011578:	4618      	mov	r0, r3
 801157a:	f011 fc69 	bl	8022e50 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 801157e:	69fa      	ldr	r2, [r7, #28]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	429a      	cmp	r2, r3
 8011584:	d90b      	bls.n	801159e <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	f103 0014 	add.w	r0, r3, #20
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	18d1      	adds	r1, r2, r3
 8011592:	69fa      	ldr	r2, [r7, #28]
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	461a      	mov	r2, r3
 801159a:	f011 fc59 	bl	8022e50 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 801159e:	f7f3 fb59 	bl	8004c54 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d10e      	bne.n	80115c6 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 80115a8:	6a3a      	ldr	r2, [r7, #32]
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	4413      	add	r3, r2
 80115ae:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 80115b0:	6a3a      	ldr	r2, [r7, #32]
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d303      	bcc.n	80115c0 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 80115b8:	6a3a      	ldr	r2, [r7, #32]
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	6a3a      	ldr	r2, [r7, #32]
 80115c4:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	6a3a      	ldr	r2, [r7, #32]
 80115cc:	4619      	mov	r1, r3
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f7ff ff51 	bl	8011476 <xStreamBufferLessThenEqual>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d002      	beq.n	80115e0 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	6a3a      	ldr	r2, [r7, #32]
 80115de:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 80115e0:	f7f3 fb46 	bl	8004c70 <xTaskResumeAll>
    }

    return uxCount;
 80115e4:	69fb      	ldr	r3, [r7, #28]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3728      	adds	r7, #40	@ 0x28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b08a      	sub	sp, #40	@ 0x28
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	60f8      	str	r0, [r7, #12]
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	607a      	str	r2, [r7, #4]
 80115fa:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f7ff fed8 	bl	80113b2 <uxStreamBufferGetSize>
 8011602:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8011604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011606:	68bb      	ldr	r3, [r7, #8]
 8011608:	429a      	cmp	r2, r3
 801160a:	d904      	bls.n	8011616 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 801160c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	627b      	str	r3, [r7, #36]	@ 0x24
 8011614:	e001      	b.n	801161a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8011616:	2300      	movs	r3, #0
 8011618:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801161a:	6839      	ldr	r1, [r7, #0]
 801161c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801161e:	f7f9 fd21 	bl	800b064 <FreeRTOS_min_size_t>
 8011622:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d04e      	beq.n	80116c8 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	691b      	ldr	r3, [r3, #16]
 801162e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00b      	beq.n	8011654 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 801163c:	6a3a      	ldr	r2, [r7, #32]
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	4413      	add	r3, r2
 8011642:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011644:	6a3a      	ldr	r2, [r7, #32]
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	429a      	cmp	r2, r3
 801164a:	d303      	bcc.n	8011654 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 801164c:	6a3a      	ldr	r2, [r7, #32]
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d021      	beq.n	801169e <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801165a:	69ba      	ldr	r2, [r7, #24]
 801165c:	6a3b      	ldr	r3, [r7, #32]
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	69f9      	ldr	r1, [r7, #28]
 8011662:	4618      	mov	r0, r3
 8011664:	f7f9 fcfe 	bl	800b064 <FreeRTOS_min_size_t>
 8011668:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 801166a:	6a3b      	ldr	r3, [r7, #32]
 801166c:	3310      	adds	r3, #16
 801166e:	68fa      	ldr	r2, [r7, #12]
 8011670:	4413      	add	r3, r2
 8011672:	3304      	adds	r3, #4
 8011674:	697a      	ldr	r2, [r7, #20]
 8011676:	4619      	mov	r1, r3
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f011 fbe9 	bl	8022e50 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 801167e:	69fa      	ldr	r2, [r7, #28]
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	429a      	cmp	r2, r3
 8011684:	d90b      	bls.n	801169e <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	18d0      	adds	r0, r2, r3
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f103 0114 	add.w	r1, r3, #20
 8011692:	69fa      	ldr	r2, [r7, #28]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	461a      	mov	r2, r3
 801169a:	f011 fbd9 	bl	8022e50 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 801169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d111      	bne.n	80116c8 <uxStreamBufferGet+0xda>
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d10e      	bne.n	80116c8 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 80116aa:	6a3a      	ldr	r2, [r7, #32]
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	4413      	add	r3, r2
 80116b0:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80116b2:	6a3a      	ldr	r2, [r7, #32]
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d303      	bcc.n	80116c2 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 80116ba:	6a3a      	ldr	r2, [r7, #32]
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	1ad3      	subs	r3, r2, r3
 80116c0:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6a3a      	ldr	r2, [r7, #32]
 80116c6:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 80116c8:	69fb      	ldr	r3, [r7, #28]
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	3728      	adds	r7, #40	@ 0x28
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
	...

080116d4 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 80116dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011708 <vSocketCloseNextTime+0x34>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d009      	beq.n	80116f8 <vSocketCloseNextTime+0x24>
 80116e4:	4b08      	ldr	r3, [pc, #32]	@ (8011708 <vSocketCloseNextTime+0x34>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d004      	beq.n	80116f8 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 80116ee:	4b06      	ldr	r3, [pc, #24]	@ (8011708 <vSocketCloseNextTime+0x34>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fd fc7a 	bl	800efec <vSocketClose>
        }

        xSocketToClose = pxSocket;
 80116f8:	4a03      	ldr	r2, [pc, #12]	@ (8011708 <vSocketCloseNextTime+0x34>)
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6013      	str	r3, [r2, #0]
    }
 80116fe:	bf00      	nop
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	20001638 	.word	0x20001638

0801170c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8011714:	4b0c      	ldr	r3, [pc, #48]	@ (8011748 <vSocketListenNextTime+0x3c>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00e      	beq.n	801173a <vSocketListenNextTime+0x2e>
 801171c:	4b0a      	ldr	r3, [pc, #40]	@ (8011748 <vSocketListenNextTime+0x3c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	429a      	cmp	r2, r3
 8011724:	d009      	beq.n	801173a <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8011726:	4b08      	ldr	r3, [pc, #32]	@ (8011748 <vSocketListenNextTime+0x3c>)
 8011728:	681a      	ldr	r2, [r3, #0]
 801172a:	4b07      	ldr	r3, [pc, #28]	@ (8011748 <vSocketListenNextTime+0x3c>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011732:	4619      	mov	r1, r3
 8011734:	4610      	mov	r0, r2
 8011736:	f7fe fff3 	bl	8010720 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801173a:	4a03      	ldr	r2, [pc, #12]	@ (8011748 <vSocketListenNextTime+0x3c>)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6013      	str	r3, [r2, #0]
    }
 8011740:	bf00      	nop
 8011742:	3708      	adds	r7, #8
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	2000163c 	.word	0x2000163c

0801174c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 801174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011750:	b086      	sub	sp, #24
 8011752:	af02      	add	r7, sp, #8
 8011754:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801175a:	2300      	movs	r3, #0
 801175c:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011764:	2b04      	cmp	r3, #4
 8011766:	d907      	bls.n	8011778 <xTCPSocketCheck+0x2c>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801176e:	2b00      	cmp	r3, #0
 8011770:	d002      	beq.n	8011778 <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f003 f834 	bl	80147e0 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801177e:	2b00      	cmp	r3, #0
 8011780:	d05f      	beq.n	8011842 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011788:	f003 0320 	and.w	r3, r3, #32
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d148      	bne.n	8011824 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011798:	2b00      	cmp	r3, #0
 801179a:	d03b      	beq.n	8011814 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801179c:	4b37      	ldr	r3, [pc, #220]	@ (801187c <xTCPSocketCheck+0x130>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	dd25      	ble.n	80117f0 <xTCPSocketCheck+0xa4>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80117a8:	2b17      	cmp	r3, #23
 80117aa:	d021      	beq.n	80117f0 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80117b0:	461e      	mov	r6, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80117b8:	4698      	mov	r8, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80117c6:	1ad5      	subs	r5, r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80117d4:	1ad4      	subs	r4, r2, r3
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7f8 ff00 	bl	800a5dc <uxIPHeaderSizeSocket>
 80117dc:	4603      	mov	r3, r0
 80117de:	3314      	adds	r3, #20
 80117e0:	9301      	str	r3, [sp, #4]
 80117e2:	9400      	str	r4, [sp, #0]
 80117e4:	462b      	mov	r3, r5
 80117e6:	4642      	mov	r2, r8
 80117e8:	4631      	mov	r1, r6
 80117ea:	4825      	ldr	r0, [pc, #148]	@ (8011880 <xTCPSocketCheck+0x134>)
 80117ec:	f011 f914 	bl	8022a18 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7f8 fef0 	bl	800a5dc <uxIPHeaderSizeSocket>
 80117fc:	4603      	mov	r3, r0
 80117fe:	f103 0214 	add.w	r2, r3, #20
 8011802:	2301      	movs	r3, #1
 8011804:	4621      	mov	r1, r4
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f002 fac8 	bl	8013d9c <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2200      	movs	r2, #0
 8011810:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f000 faa1 	bl	8011d5c <prvTCPNextTimeout>
 801181a:	4603      	mov	r3, r0
 801181c:	2b01      	cmp	r3, #1
 801181e:	d901      	bls.n	8011824 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011820:	2301      	movs	r3, #1
 8011822:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801182a:	2b00      	cmp	r3, #0
 801182c:	d009      	beq.n	8011842 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011834:	4618      	mov	r0, r3
 8011836:	f006 f9e5 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d113      	bne.n	8011870 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801184e:	2b04      	cmp	r3, #4
 8011850:	d804      	bhi.n	801185c <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011858:	2b02      	cmp	r3, #2
 801185a:	d102      	bne.n	8011862 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f002 f9ff 	bl	8013c60 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f000 fa7a 	bl	8011d5c <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f001 f973 	bl	8012b54 <prvTCPStatusAgeCheck>
 801186e:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8011870:	68fb      	ldr	r3, [r7, #12]
    }
 8011872:	4618      	mov	r0, r3
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187c:	20001664 	.word	0x20001664
 8011880:	08026b44 	.word	0x08026b44

08011884 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 801188c:	f7f3 faf4 	bl	8004e78 <xTaskGetTickCount>
 8011890:	4602      	mov	r2, r0
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801189e:	f36f 0382 	bfc	r3, #2, #1
 80118a2:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80118ac:	f36f 0341 	bfc	r3, #1, #1
 80118b0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80118bc:	f7f3 fadc 	bl	8004e78 <xTaskGetTickCount>
 80118c0:	4602      	mov	r2, r0
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 80118c8:	bf00      	nop
 80118ca:	3708      	adds	r7, #8
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 80118d0:	b480      	push	{r7}
 80118d2:	b087      	sub	sp, #28
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80118d8:	2300      	movs	r3, #0
 80118da:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80118dc:	4b15      	ldr	r3, [pc, #84]	@ (8011934 <vTCPRemoveTCPChild+0x64>)
 80118de:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80118e0:	4b15      	ldr	r3, [pc, #84]	@ (8011938 <vTCPRemoveTCPChild+0x68>)
 80118e2:	68db      	ldr	r3, [r3, #12]
 80118e4:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 80118e6:	e01a      	b.n	801191e <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d010      	beq.n	801191e <vTCPRemoveTCPChild+0x4e>
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011904:	429a      	cmp	r2, r3
 8011906:	d10a      	bne.n	801191e <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	429a      	cmp	r2, r3
 8011910:	d105      	bne.n	801191e <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2200      	movs	r2, #0
 8011916:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8011918:	2301      	movs	r3, #1
 801191a:	617b      	str	r3, [r7, #20]
                    break;
 801191c:	e003      	b.n	8011926 <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 801191e:	693a      	ldr	r2, [r7, #16]
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	429a      	cmp	r2, r3
 8011924:	d1e0      	bne.n	80118e8 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8011926:	697b      	ldr	r3, [r7, #20]
    }
 8011928:	4618      	mov	r0, r3
 801192a:	371c      	adds	r7, #28
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	20001628 	.word	0x20001628
 8011938:	20001620 	.word	0x20001620

0801193c <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 801193c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801193e:	b097      	sub	sp, #92	@ 0x5c
 8011940:	af02      	add	r7, sp, #8
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	460b      	mov	r3, r1
 8011946:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011952:	2b04      	cmp	r3, #4
 8011954:	d906      	bls.n	8011964 <vTCPStateChange+0x28>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801195c:	2b08      	cmp	r3, #8
 801195e:	d001      	beq.n	8011964 <vTCPStateChange+0x28>
 8011960:	2301      	movs	r3, #1
 8011962:	e000      	b.n	8011966 <vTCPStateChange+0x2a>
 8011964:	2300      	movs	r3, #0
 8011966:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 8011968:	78fb      	ldrb	r3, [r7, #3]
 801196a:	2b04      	cmp	r3, #4
 801196c:	d904      	bls.n	8011978 <vTCPStateChange+0x3c>
 801196e:	78fb      	ldrb	r3, [r7, #3]
 8011970:	2b08      	cmp	r3, #8
 8011972:	d001      	beq.n	8011978 <vTCPStateChange+0x3c>
 8011974:	2301      	movs	r3, #1
 8011976:	e000      	b.n	801197a <vTCPStateChange+0x3e>
 8011978:	2300      	movs	r3, #0
 801197a:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011982:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 8011986:	2300      	movs	r3, #0
 8011988:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801198a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801198e:	2b02      	cmp	r3, #2
 8011990:	d007      	beq.n	80119a2 <vTCPStateChange+0x66>
 8011992:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011996:	2b03      	cmp	r3, #3
 8011998:	d003      	beq.n	80119a2 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801199a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801199e:	2b04      	cmp	r3, #4
 80119a0:	d114      	bne.n	80119cc <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80119a2:	78fb      	ldrb	r3, [r7, #3]
 80119a4:	2b08      	cmp	r3, #8
 80119a6:	d111      	bne.n	80119cc <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80119a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119ac:	4618      	mov	r0, r3
 80119ae:	f001 fed7 	bl	8013760 <FreeRTOS_GetTCPStateName>
 80119b2:	4604      	mov	r4, r0
 80119b4:	78fb      	ldrb	r3, [r7, #3]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f001 fed2 	bl	8013760 <FreeRTOS_GetTCPStateName>
 80119bc:	4603      	mov	r3, r0
 80119be:	461a      	mov	r2, r3
 80119c0:	4621      	mov	r1, r4
 80119c2:	4875      	ldr	r0, [pc, #468]	@ (8011b98 <vTCPStateChange+0x25c>)
 80119c4:	f011 f828 	bl	8022a18 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 80119c8:	2301      	movs	r3, #1
 80119ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 80119cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d0:	429a      	cmp	r2, r3
 80119d2:	f000 809f 	beq.w	8011b14 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119dc:	f003 0304 	and.w	r3, r3, #4
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d012      	beq.n	8011a0c <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119ec:	f003 0308 	and.w	r3, r3, #8
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d10a      	bne.n	8011a0c <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80119fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d104      	bne.n	8011a0c <vTCPStateChange+0xd0>
 8011a02:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8011a06:	4865      	ldr	r0, [pc, #404]	@ (8011b9c <vTCPStateChange+0x260>)
 8011a08:	f7f0 f840 	bl	8001a8c <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d057      	beq.n	8011ac2 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a18:	f003 0304 	and.w	r3, r3, #4
 8011a1c:	b2db      	uxtb	r3, r3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d03c      	beq.n	8011a9c <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d027      	beq.n	8011a78 <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8011a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8011a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8011a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f043 0204 	orr.w	r2, r3, #4
 8011a3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a40:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8011a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a46:	f003 0301 	and.w	r3, r3, #1
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d005      	beq.n	8011a5a <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8011a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a58:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d009      	beq.n	8011a78 <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8011a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a66:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a6a:	f003 0308 	and.w	r3, r3, #8
 8011a6e:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d101      	bne.n	8011a78 <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8011a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a76:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a84:	f36f 0382 	bfc	r3, #2, #1
 8011a88:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8011a8c:	687a      	ldr	r2, [r7, #4]
 8011a8e:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a92:	f043 0302 	orr.w	r3, r3, #2
 8011a96:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 8011a9a:	e024      	b.n	8011ae6 <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f043 0208 	orr.w	r2, r3, #8
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011aac:	f003 0302 	and.w	r3, r3, #2
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d018      	beq.n	8011ae6 <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	601a      	str	r2, [r3, #0]
 8011ac0:	e011      	b.n	8011ae6 <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8011ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	f043 0220 	orr.w	r2, r3, #32
 8011aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011acc:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8011ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ad2:	f003 0304 	and.w	r3, r3, #4
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d005      	beq.n	8011ae6 <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8011ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ae4:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d004      	beq.n	8011afa <vTCPStateChange+0x1be>
 8011af0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d101      	bne.n	8011afa <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b00:	4618      	mov	r0, r3
 8011b02:	f000 ffff 	bl	8012b04 <prvTCPSocketIsActive>
 8011b06:	4603      	mov	r3, r0
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d103      	bne.n	8011b14 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	78fa      	ldrb	r2, [r7, #3]
 8011b18:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8011b1c:	78fb      	ldrb	r3, [r7, #3]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d003      	beq.n	8011b2a <vTCPStateChange+0x1ee>
 8011b22:	78fb      	ldrb	r3, [r7, #3]
 8011b24:	2b08      	cmp	r3, #8
 8011b26:	f040 8084 	bne.w	8011c32 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8011b32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d106      	bne.n	8011b48 <vTCPStateChange+0x20c>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d002      	beq.n	8011b48 <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d006      	beq.n	8011b5e <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8011b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d101      	bne.n	8011b5e <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	461a      	mov	r2, r3
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011b80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	4806      	ldr	r0, [pc, #24]	@ (8011ba0 <vTCPStateChange+0x264>)
 8011b88:	f010 ff46 	bl	8022a18 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8011b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d008      	beq.n	8011ba4 <vTCPStateChange+0x268>
 8011b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011b96:	e006      	b.n	8011ba6 <vTCPStateChange+0x26a>
 8011b98:	08026b70 	.word	0x08026b70
 8011b9c:	08026b84 	.word	0x08026b84
 8011ba0:	08026bb4 	.word	0x08026bb4
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011ba8:	9200      	str	r2, [sp, #0]
 8011baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bac:	6879      	ldr	r1, [r7, #4]
 8011bae:	4865      	ldr	r0, [pc, #404]	@ (8011d44 <vTCPStateChange+0x408>)
 8011bb0:	f010 ff32 	bl	8022a18 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8011bb4:	f7f3 f84e 	bl	8004c54 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011bbe:	f003 0304 	and.w	r3, r3, #4
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d107      	bne.n	8011bd8 <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011bce:	f003 0302 	and.w	r3, r3, #2
 8011bd2:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d026      	beq.n	8011c26 <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011bde:	f003 0308 	and.w	r3, r3, #8
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d11e      	bne.n	8011c26 <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff fe71 	bl	80118d0 <vTCPRemoveTCPChild>
 8011bee:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011bf6:	f36f 0382 	bfc	r3, #2, #1
 8011bfa:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011c04:	f36f 0341 	bfc	r3, #1, #1
 8011c08:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8011c0c:	f7f9 f85a 	bl	800acc4 <xIsCallingFromIPTask>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d104      	bne.n	8011c20 <vTCPStateChange+0x2e4>
 8011c16:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8011c1a:	484b      	ldr	r0, [pc, #300]	@ (8011d48 <vTCPStateChange+0x40c>)
 8011c1c:	f7ef ff36 	bl	8001a8c <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7ff fd57 	bl	80116d4 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8011c26:	f7f3 f823 	bl	8004c70 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8011c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c2c:	4847      	ldr	r0, [pc, #284]	@ (8011d4c <vTCPStateChange+0x410>)
 8011c2e:	f010 fef3 	bl	8022a18 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011c32:	78fb      	ldrb	r3, [r7, #3]
 8011c34:	2b08      	cmp	r3, #8
 8011c36:	d11b      	bne.n	8011c70 <vTCPStateChange+0x334>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011c3e:	f003 0308 	and.w	r3, r3, #8
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d013      	beq.n	8011c70 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8011c48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011c4c:	3b03      	subs	r3, #3
 8011c4e:	2b01      	cmp	r3, #1
 8011c50:	d80d      	bhi.n	8011c6e <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011c56:	4619      	mov	r1, r3
 8011c58:	483d      	ldr	r0, [pc, #244]	@ (8011d50 <vTCPStateChange+0x414>)
 8011c5a:	f010 fedd 	bl	8022a18 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2200      	movs	r2, #0
 8011c62:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff fd50 	bl	801170c <vSocketListenNextTime>
                    break;
 8011c6c:	e000      	b.n	8011c70 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011c6e:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7ff fe07 	bl	8011884 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011c76:	4b37      	ldr	r3, [pc, #220]	@ (8011d54 <vTCPStateChange+0x418>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	db4f      	blt.n	8011d1e <vTCPStateChange+0x3e2>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011c82:	2b17      	cmp	r3, #23
 8011c84:	d04b      	beq.n	8011d1e <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	7a1b      	ldrb	r3, [r3, #8]
 8011c8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011c8e:	b2db      	uxtb	r3, r3
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d002      	beq.n	8011c9a <vTCPStateChange+0x35e>
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d01d      	beq.n	8011cd4 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8011c98:	e026      	b.n	8011ce8 <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c9e:	061a      	lsls	r2, r3, #24
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ca4:	021b      	lsls	r3, r3, #8
 8011ca6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011caa:	431a      	orrs	r2, r3
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cb0:	0a1b      	lsrs	r3, r3, #8
 8011cb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011cb6:	431a      	orrs	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cbc:	0e1b      	lsrs	r3, r3, #24
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8011cc2:	f107 0208 	add.w	r2, r7, #8
 8011cc6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011cca:	2328      	movs	r3, #40	@ 0x28
 8011ccc:	2002      	movs	r0, #2
 8011cce:	f7fd ff09 	bl	800fae4 <FreeRTOS_inet_ntop>
                           break;
 8011cd2:	e009      	b.n	8011ce8 <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8011cda:	f107 0208 	add.w	r2, r7, #8
 8011cde:	2328      	movs	r3, #40	@ 0x28
 8011ce0:	200a      	movs	r0, #10
 8011ce2:	f7fd feff 	bl	800fae4 <FreeRTOS_inet_ntop>
                            break;
 8011ce6:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011cec:	461d      	mov	r5, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011cf4:	461e      	mov	r6, r3
 8011cf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f001 fd30 	bl	8013760 <FreeRTOS_GetTCPStateName>
 8011d00:	4604      	mov	r4, r0
 8011d02:	78fb      	ldrb	r3, [r7, #3]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f001 fd2b 	bl	8013760 <FreeRTOS_GetTCPStateName>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	f107 0208 	add.w	r2, r7, #8
 8011d10:	9301      	str	r3, [sp, #4]
 8011d12:	9400      	str	r4, [sp, #0]
 8011d14:	4633      	mov	r3, r6
 8011d16:	4629      	mov	r1, r5
 8011d18:	480f      	ldr	r0, [pc, #60]	@ (8011d58 <vTCPStateChange+0x41c>)
 8011d1a:	f010 fe7d 	bl	8022a18 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d005      	beq.n	8011d30 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d26:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011d2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011d2c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011d2e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d002      	beq.n	8011d3c <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8011d36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011d38:	f7fd ff53 	bl	800fbe2 <vSocketWakeUpUser>
        }
    }
 8011d3c:	bf00      	nop
 8011d3e:	3754      	adds	r7, #84	@ 0x54
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d44:	08026bf0 	.word	0x08026bf0
 8011d48:	08026b84 	.word	0x08026b84
 8011d4c:	08026c24 	.word	0x08026c24
 8011d50:	08026c48 	.word	0x08026c48
 8011d54:	20001664 	.word	0x20001664
 8011d58:	08026c6c 	.word	0x08026c6c

08011d5c <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d60:	b098      	sub	sp, #96	@ 0x60
 8011d62:	af02      	add	r7, sp, #8
 8011d64:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011d66:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011d6a:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d6e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011d72:	2b02      	cmp	r3, #2
 8011d74:	f040 80cc 	bne.w	8011f10 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8011d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d7a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011d7e:	f003 0308 	and.w	r3, r3, #8
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d01a      	beq.n	8011dbe <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8011d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d8a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011d8e:	2b02      	cmp	r3, #2
 8011d90:	d811      	bhi.n	8011db6 <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d94:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011da0:	e010      	b.n	8011dc4 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011da4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011da8:	3b01      	subs	r3, #1
 8011daa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011dae:	fa02 f303 	lsl.w	r3, r2, r3
 8011db2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011db4:	e006      	b.n	8011dc4 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8011db6:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8011dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dbc:	e002      	b.n	8011dc4 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011dbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011dc2:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dc6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011dce:	4618      	mov	r0, r3
 8011dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dd2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	4613      	mov	r3, r2
 8011dde:	4602      	mov	r2, r0
 8011de0:	48a4      	ldr	r0, [pc, #656]	@ (8012074 <prvTCPNextTimeout+0x318>)
 8011de2:	f010 fe19 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8011de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011de8:	2200      	movs	r2, #0
 8011dea:	643b      	str	r3, [r7, #64]	@ 0x40
 8011dec:	647a      	str	r2, [r7, #68]	@ 0x44
 8011dee:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011df2:	4622      	mov	r2, r4
 8011df4:	462b      	mov	r3, r5
 8011df6:	f04f 0000 	mov.w	r0, #0
 8011dfa:	f04f 0100 	mov.w	r1, #0
 8011dfe:	0159      	lsls	r1, r3, #5
 8011e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e04:	0150      	lsls	r0, r2, #5
 8011e06:	4602      	mov	r2, r0
 8011e08:	460b      	mov	r3, r1
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	1a51      	subs	r1, r2, r1
 8011e0e:	6239      	str	r1, [r7, #32]
 8011e10:	4629      	mov	r1, r5
 8011e12:	eb63 0301 	sbc.w	r3, r3, r1
 8011e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e18:	f04f 0200 	mov.w	r2, #0
 8011e1c:	f04f 0300 	mov.w	r3, #0
 8011e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011e24:	4649      	mov	r1, r9
 8011e26:	008b      	lsls	r3, r1, #2
 8011e28:	4641      	mov	r1, r8
 8011e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011e2e:	4641      	mov	r1, r8
 8011e30:	008a      	lsls	r2, r1, #2
 8011e32:	4610      	mov	r0, r2
 8011e34:	4619      	mov	r1, r3
 8011e36:	4603      	mov	r3, r0
 8011e38:	4622      	mov	r2, r4
 8011e3a:	189b      	adds	r3, r3, r2
 8011e3c:	61bb      	str	r3, [r7, #24]
 8011e3e:	462b      	mov	r3, r5
 8011e40:	460a      	mov	r2, r1
 8011e42:	eb42 0303 	adc.w	r3, r2, r3
 8011e46:	61fb      	str	r3, [r7, #28]
 8011e48:	f04f 0200 	mov.w	r2, #0
 8011e4c:	f04f 0300 	mov.w	r3, #0
 8011e50:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011e54:	4629      	mov	r1, r5
 8011e56:	00cb      	lsls	r3, r1, #3
 8011e58:	4621      	mov	r1, r4
 8011e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e5e:	4621      	mov	r1, r4
 8011e60:	00ca      	lsls	r2, r1, #3
 8011e62:	4610      	mov	r0, r2
 8011e64:	4619      	mov	r1, r3
 8011e66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e6a:	f04f 0300 	mov.w	r3, #0
 8011e6e:	f7ee fa9f 	bl	80003b0 <__aeabi_uldivmod>
 8011e72:	4602      	mov	r2, r0
 8011e74:	460b      	mov	r3, r1
 8011e76:	4613      	mov	r3, r2
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d044      	beq.n	8011f06 <prvTCPNextTimeout+0x1aa>
 8011e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e7e:	2200      	movs	r2, #0
 8011e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011e84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011e88:	4622      	mov	r2, r4
 8011e8a:	462b      	mov	r3, r5
 8011e8c:	f04f 0000 	mov.w	r0, #0
 8011e90:	f04f 0100 	mov.w	r1, #0
 8011e94:	0159      	lsls	r1, r3, #5
 8011e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e9a:	0150      	lsls	r0, r2, #5
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8011eac:	f04f 0200 	mov.w	r2, #0
 8011eb0:	f04f 0300 	mov.w	r3, #0
 8011eb4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011eb8:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011ebc:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011ec0:	4692      	mov	sl, r2
 8011ec2:	469b      	mov	fp, r3
 8011ec4:	4623      	mov	r3, r4
 8011ec6:	eb1a 0303 	adds.w	r3, sl, r3
 8011eca:	613b      	str	r3, [r7, #16]
 8011ecc:	462b      	mov	r3, r5
 8011ece:	eb4b 0303 	adc.w	r3, fp, r3
 8011ed2:	617b      	str	r3, [r7, #20]
 8011ed4:	f04f 0200 	mov.w	r2, #0
 8011ed8:	f04f 0300 	mov.w	r3, #0
 8011edc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	00cb      	lsls	r3, r1, #3
 8011ee4:	4621      	mov	r1, r4
 8011ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011eea:	4621      	mov	r1, r4
 8011eec:	00ca      	lsls	r2, r1, #3
 8011eee:	4610      	mov	r0, r2
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011ef6:	f04f 0300 	mov.w	r3, #0
 8011efa:	f7ee fa59 	bl	80003b0 <__aeabi_uldivmod>
 8011efe:	4602      	mov	r2, r0
 8011f00:	460b      	mov	r3, r1
 8011f02:	b292      	uxth	r2, r2
 8011f04:	e000      	b.n	8011f08 <prvTCPNextTimeout+0x1ac>
 8011f06:	2201      	movs	r2, #1
 8011f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f0a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011f0e:	e0a8      	b.n	8012062 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f12:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f040 80a3 	bne.w	8012062 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f1e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f24:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8011f28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	f004 fcbd 	bl	80168ac <xTCPWindowTxHasData>
 8011f32:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011f34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d108      	bne.n	8011f4c <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8011f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011f40:	2301      	movs	r3, #1
 8011f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f44:	e002      	b.n	8011f4c <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011f46:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011f4a:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f4e:	2200      	movs	r2, #0
 8011f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f52:	637a      	str	r2, [r7, #52]	@ 0x34
 8011f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011f58:	4652      	mov	r2, sl
 8011f5a:	465b      	mov	r3, fp
 8011f5c:	f04f 0000 	mov.w	r0, #0
 8011f60:	f04f 0100 	mov.w	r1, #0
 8011f64:	0159      	lsls	r1, r3, #5
 8011f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011f6a:	0150      	lsls	r0, r2, #5
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4651      	mov	r1, sl
 8011f72:	ebb2 0801 	subs.w	r8, r2, r1
 8011f76:	4659      	mov	r1, fp
 8011f78:	eb63 0901 	sbc.w	r9, r3, r1
 8011f7c:	f04f 0200 	mov.w	r2, #0
 8011f80:	f04f 0300 	mov.w	r3, #0
 8011f84:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011f88:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011f8c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011f90:	4690      	mov	r8, r2
 8011f92:	4699      	mov	r9, r3
 8011f94:	4653      	mov	r3, sl
 8011f96:	eb18 0303 	adds.w	r3, r8, r3
 8011f9a:	60bb      	str	r3, [r7, #8]
 8011f9c:	465b      	mov	r3, fp
 8011f9e:	eb49 0303 	adc.w	r3, r9, r3
 8011fa2:	60fb      	str	r3, [r7, #12]
 8011fa4:	f04f 0200 	mov.w	r2, #0
 8011fa8:	f04f 0300 	mov.w	r3, #0
 8011fac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011fb0:	4649      	mov	r1, r9
 8011fb2:	00cb      	lsls	r3, r1, #3
 8011fb4:	4641      	mov	r1, r8
 8011fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011fba:	4641      	mov	r1, r8
 8011fbc:	00ca      	lsls	r2, r1, #3
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011fc6:	f04f 0300 	mov.w	r3, #0
 8011fca:	f7ee f9f1 	bl	80003b0 <__aeabi_uldivmod>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d040      	beq.n	801205a <prvTCPNextTimeout+0x2fe>
 8011fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fda:	2200      	movs	r2, #0
 8011fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011fe0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011fe4:	4642      	mov	r2, r8
 8011fe6:	464b      	mov	r3, r9
 8011fe8:	f04f 0000 	mov.w	r0, #0
 8011fec:	f04f 0100 	mov.w	r1, #0
 8011ff0:	0159      	lsls	r1, r3, #5
 8011ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011ff6:	0150      	lsls	r0, r2, #5
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	4641      	mov	r1, r8
 8011ffe:	1a54      	subs	r4, r2, r1
 8012000:	4649      	mov	r1, r9
 8012002:	eb63 0501 	sbc.w	r5, r3, r1
 8012006:	f04f 0200 	mov.w	r2, #0
 801200a:	f04f 0300 	mov.w	r3, #0
 801200e:	00ab      	lsls	r3, r5, #2
 8012010:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8012014:	00a2      	lsls	r2, r4, #2
 8012016:	4614      	mov	r4, r2
 8012018:	461d      	mov	r5, r3
 801201a:	4643      	mov	r3, r8
 801201c:	18e3      	adds	r3, r4, r3
 801201e:	603b      	str	r3, [r7, #0]
 8012020:	464b      	mov	r3, r9
 8012022:	eb45 0303 	adc.w	r3, r5, r3
 8012026:	607b      	str	r3, [r7, #4]
 8012028:	f04f 0200 	mov.w	r2, #0
 801202c:	f04f 0300 	mov.w	r3, #0
 8012030:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012034:	4629      	mov	r1, r5
 8012036:	00cb      	lsls	r3, r1, #3
 8012038:	4621      	mov	r1, r4
 801203a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801203e:	4621      	mov	r1, r4
 8012040:	00ca      	lsls	r2, r1, #3
 8012042:	4610      	mov	r0, r2
 8012044:	4619      	mov	r1, r3
 8012046:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801204a:	f04f 0300 	mov.w	r3, #0
 801204e:	f7ee f9af 	bl	80003b0 <__aeabi_uldivmod>
 8012052:	4602      	mov	r2, r0
 8012054:	460b      	mov	r3, r1
 8012056:	b292      	uxth	r2, r2
 8012058:	e000      	b.n	801205c <prvTCPNextTimeout+0x300>
 801205a:	2201      	movs	r2, #1
 801205c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801205e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8012062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012064:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8012068:	4618      	mov	r0, r3
 801206a:	3758      	adds	r7, #88	@ 0x58
 801206c:	46bd      	mov	sp, r7
 801206e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012072:	bf00      	nop
 8012074:	08026c90 	.word	0x08026c90

08012078 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8012078:	b4b0      	push	{r4, r5, r7}
 801207a:	b08b      	sub	sp, #44	@ 0x2c
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
 8012080:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8012086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012088:	899b      	ldrh	r3, [r3, #12]
 801208a:	b29b      	uxth	r3, r3
 801208c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8012090:	4293      	cmp	r3, r2
 8012092:	d10e      	bne.n	80120b2 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	330e      	adds	r3, #14
 8012098:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 801209a:	2301      	movs	r3, #1
 801209c:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	3308      	adds	r3, #8
 80120a2:	f107 0408 	add.w	r4, r7, #8
 80120a6:	6818      	ldr	r0, [r3, #0]
 80120a8:	6859      	ldr	r1, [r3, #4]
 80120aa:	689a      	ldr	r2, [r3, #8]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120b0:	e018      	b.n	80120e4 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	330e      	adds	r3, #14
 80120b6:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 80120b8:	2300      	movs	r3, #0
 80120ba:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 80120bc:	6a3b      	ldr	r3, [r7, #32]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	061a      	lsls	r2, r3, #24
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	021b      	lsls	r3, r3, #8
 80120c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120cc:	431a      	orrs	r2, r3
 80120ce:	6a3b      	ldr	r3, [r7, #32]
 80120d0:	68db      	ldr	r3, [r3, #12]
 80120d2:	0a1b      	lsrs	r3, r3, #8
 80120d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120d8:	431a      	orrs	r2, r3
 80120da:	6a3b      	ldr	r3, [r7, #32]
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	0e1b      	lsrs	r3, r3, #24
 80120e0:	4313      	orrs	r3, r2
 80120e2:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	461d      	mov	r5, r3
 80120e8:	f107 0408 	add.w	r4, r7, #8
 80120ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80120f0:	6823      	ldr	r3, [r4, #0]
 80120f2:	602b      	str	r3, [r5, #0]
    }
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	372c      	adds	r7, #44	@ 0x2c
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bcb0      	pop	{r4, r5, r7}
 80120fc:	4770      	bx	lr
	...

08012100 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8012100:	b5b0      	push	{r4, r5, r7, lr}
 8012102:	b096      	sub	sp, #88	@ 0x58
 8012104:	af04      	add	r7, sp, #16
 8012106:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8012108:	2301      	movs	r3, #1
 801210a:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d104      	bne.n	801211c <xProcessReceivedTCPPacket+0x1c>
 8012112:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8012116:	4898      	ldr	r0, [pc, #608]	@ (8012378 <xProcessReceivedTCPPacket+0x278>)
 8012118:	f7ef fcb8 	bl	8001a8c <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012120:	2b00      	cmp	r3, #0
 8012122:	d104      	bne.n	801212e <xProcessReceivedTCPPacket+0x2e>
 8012124:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8012128:	4893      	ldr	r0, [pc, #588]	@ (8012378 <xProcessReceivedTCPPacket+0x278>)
 801212a:	f7ef fcaf 	bl	8001a8c <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	4618      	mov	r0, r3
 8012136:	f7f8 fa37 	bl	800a5a8 <uxIPHeaderSizePacket>
 801213a:	4603      	mov	r3, r0
 801213c:	330e      	adds	r3, #14
 801213e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012146:	3314      	adds	r3, #20
 8012148:	429a      	cmp	r2, r3
 801214a:	d202      	bcs.n	8012152 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 801214c:	2300      	movs	r3, #0
 801214e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012150:	e191      	b.n	8012476 <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8012156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012158:	4413      	add	r3, r2
 801215a:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801215c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801215e:	7b5b      	ldrb	r3, [r3, #13]
 8012160:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8012162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012164:	885b      	ldrh	r3, [r3, #2]
 8012166:	b29b      	uxth	r3, r3
 8012168:	021b      	lsls	r3, r3, #8
 801216a:	b21a      	sxth	r2, r3
 801216c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801216e:	885b      	ldrh	r3, [r3, #2]
 8012170:	b29b      	uxth	r3, r3
 8012172:	0a1b      	lsrs	r3, r3, #8
 8012174:	b29b      	uxth	r3, r3
 8012176:	b21b      	sxth	r3, r3
 8012178:	4313      	orrs	r3, r2
 801217a:	b21b      	sxth	r3, r3
 801217c:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 801217e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	b29b      	uxth	r3, r3
 8012184:	021b      	lsls	r3, r3, #8
 8012186:	b21a      	sxth	r2, r3
 8012188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801218a:	881b      	ldrh	r3, [r3, #0]
 801218c:	b29b      	uxth	r3, r3
 801218e:	0a1b      	lsrs	r3, r3, #8
 8012190:	b29b      	uxth	r3, r3
 8012192:	b21b      	sxth	r3, r3
 8012194:	4313      	orrs	r3, r2
 8012196:	b21b      	sxth	r3, r3
 8012198:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801219e:	f107 0308 	add.w	r3, r7, #8
 80121a2:	4611      	mov	r1, r2
 80121a4:	4618      	mov	r0, r3
 80121a6:	f7ff ff67 	bl	8012078 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 80121aa:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 80121ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80121ae:	9303      	str	r3, [sp, #12]
 80121b0:	466c      	mov	r4, sp
 80121b2:	f107 0310 	add.w	r3, r7, #16
 80121b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80121be:	f107 0308 	add.w	r3, r7, #8
 80121c2:	cb0c      	ldmia	r3, {r2, r3}
 80121c4:	4629      	mov	r1, r5
 80121c6:	2000      	movs	r0, #0
 80121c8:	f7fe fbc2 	bl	8010950 <pxTCPSocketLookup>
 80121cc:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 80121ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d008      	beq.n	80121e6 <xProcessReceivedTCPPacket+0xe6>
 80121d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121d6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80121da:	4618      	mov	r0, r3
 80121dc:	f000 fc92 	bl	8012b04 <prvTCPSocketIsActive>
 80121e0:	4603      	mov	r3, r0
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d116      	bne.n	8012214 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 80121e6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80121e8:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80121ea:	4619      	mov	r1, r3
 80121ec:	4863      	ldr	r0, [pc, #396]	@ (801237c <xProcessReceivedTCPPacket+0x27c>)
 80121ee:	f010 fc13 	bl	8022a18 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80121f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80121f4:	f003 031f 	and.w	r3, r3, #31
 80121f8:	2b10      	cmp	r3, #16
 80121fa:	d008      	beq.n	801220e <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 80121fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80121fe:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012202:	2b00      	cmp	r3, #0
 8012204:	d103      	bne.n	801220e <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012206:	69fb      	ldr	r3, [r7, #28]
 8012208:	4618      	mov	r0, r3
 801220a:	f002 fd0b 	bl	8014c24 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 801220e:	2300      	movs	r3, #0
 8012210:	647b      	str	r3, [r7, #68]	@ 0x44
 8012212:	e0d6      	b.n	80123c2 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8012214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012216:	2200      	movs	r2, #0
 8012218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801221c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801221e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012222:	2b01      	cmp	r3, #1
 8012224:	d127      	bne.n	8012276 <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8012226:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012228:	f003 031f 	and.w	r3, r3, #31
 801222c:	2b02      	cmp	r3, #2
 801222e:	d015      	beq.n	801225c <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8012230:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012232:	4618      	mov	r0, r3
 8012234:	f003 fbbe 	bl	80159b4 <prvTCPFlagMeaning>
 8012238:	4601      	mov	r1, r0
 801223a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801223c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801223e:	4850      	ldr	r0, [pc, #320]	@ (8012380 <xProcessReceivedTCPPacket+0x280>)
 8012240:	f010 fbea 	bl	8022a18 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8012244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012246:	f003 0304 	and.w	r3, r3, #4
 801224a:	2b00      	cmp	r3, #0
 801224c:	d103      	bne.n	8012256 <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	4618      	mov	r0, r3
 8012252:	f002 fce7 	bl	8014c24 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8012256:	2300      	movs	r3, #0
 8012258:	647b      	str	r3, [r7, #68]	@ 0x44
 801225a:	e0b2      	b.n	80123c2 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	4619      	mov	r1, r3
 8012260:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012262:	f001 f999 	bl	8013598 <prvHandleListen>
 8012266:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8012268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801226a:	2b00      	cmp	r3, #0
 801226c:	f040 80a9 	bne.w	80123c2 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8012270:	2300      	movs	r3, #0
 8012272:	647b      	str	r3, [r7, #68]	@ 0x44
 8012274:	e0a5      	b.n	80123c2 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8012276:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012278:	f003 0304 	and.w	r3, r3, #4
 801227c:	2b00      	cmp	r3, #0
 801227e:	d068      	beq.n	8012352 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8012280:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012282:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8012284:	4619      	mov	r1, r3
 8012286:	483f      	ldr	r0, [pc, #252]	@ (8012384 <xProcessReceivedTCPPacket+0x284>)
 8012288:	f010 fbc6 	bl	8022a18 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 801228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801228e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012292:	2b02      	cmp	r3, #2
 8012294:	d11f      	bne.n	80122d6 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	061a      	lsls	r2, r3, #24
 801229c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801229e:	689b      	ldr	r3, [r3, #8]
 80122a0:	021b      	lsls	r3, r3, #8
 80122a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80122a6:	431a      	orrs	r2, r3
 80122a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122aa:	689b      	ldr	r3, [r3, #8]
 80122ac:	0a1b      	lsrs	r3, r3, #8
 80122ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80122b2:	431a      	orrs	r2, r3
 80122b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	0e1b      	lsrs	r3, r3, #24
 80122ba:	4313      	orrs	r3, r2
 80122bc:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 80122be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80122c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80122c4:	3301      	adds	r3, #1
 80122c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d13f      	bne.n	801234c <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 80122cc:	2100      	movs	r1, #0
 80122ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80122d0:	f7ff fb34 	bl	801193c <vTCPStateChange>
 80122d4:	e03a      	b.n	801234c <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80122d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	061a      	lsls	r2, r3, #24
 80122dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122de:	685b      	ldr	r3, [r3, #4]
 80122e0:	021b      	lsls	r3, r3, #8
 80122e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80122e6:	431a      	orrs	r2, r3
 80122e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122ea:	685b      	ldr	r3, [r3, #4]
 80122ec:	0a1b      	lsrs	r3, r3, #8
 80122ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80122f2:	431a      	orrs	r2, r3
 80122f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	0e1b      	lsrs	r3, r3, #24
 80122fa:	4313      	orrs	r3, r2
 80122fc:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 80122fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012300:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8012304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012306:	429a      	cmp	r2, r3
 8012308:	d104      	bne.n	8012314 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801230a:	2100      	movs	r1, #0
 801230c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801230e:	f7ff fb15 	bl	801193c <vTCPStateChange>
 8012312:	e01b      	b.n	801234c <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012316:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801231a:	4619      	mov	r1, r3
 801231c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801231e:	f003 fc82 	bl	8015c26 <xSequenceGreaterThan>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d011      	beq.n	801234c <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801232a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 801232e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012330:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012334:	4413      	add	r3, r2
 8012336:	4619      	mov	r1, r3
 8012338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801233a:	f003 fc5e 	bl	8015bfa <xSequenceLessThan>
 801233e:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012340:	2b00      	cmp	r3, #0
 8012342:	d003      	beq.n	801234c <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	4618      	mov	r0, r3
 8012348:	f002 fc5f 	bl	8014c0a <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 801234c:	2300      	movs	r3, #0
 801234e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012350:	e037      	b.n	80123c2 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8012352:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012354:	f003 031f 	and.w	r3, r3, #31
 8012358:	2b02      	cmp	r3, #2
 801235a:	d117      	bne.n	801238c <xProcessReceivedTCPPacket+0x28c>
 801235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801235e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012362:	2b04      	cmp	r3, #4
 8012364:	d912      	bls.n	801238c <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8012366:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012368:	4619      	mov	r1, r3
 801236a:	4807      	ldr	r0, [pc, #28]	@ (8012388 <xProcessReceivedTCPPacket+0x288>)
 801236c:	f010 fb54 	bl	8022a18 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8012370:	2300      	movs	r3, #0
 8012372:	647b      	str	r3, [r7, #68]	@ 0x44
 8012374:	e025      	b.n	80123c2 <xProcessReceivedTCPPacket+0x2c2>
 8012376:	bf00      	nop
 8012378:	08026b84 	.word	0x08026b84
 801237c:	08026cbc 	.word	0x08026cbc
 8012380:	08026ce4 	.word	0x08026ce4
 8012384:	08026d1c 	.word	0x08026d1c
 8012388:	08026d40 	.word	0x08026d40
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 801238c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801238e:	f7f8 f925 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012392:	4603      	mov	r3, r0
 8012394:	330e      	adds	r3, #14
 8012396:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8012398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801239a:	33a0      	adds	r3, #160	@ 0xa0
 801239c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801239e:	4413      	add	r3, r2
 80123a0:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123aa:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80123ac:	2214      	movs	r2, #20
 80123ae:	4619      	mov	r1, r3
 80123b0:	f010 fd4e 	bl	8022e50 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 80123b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b6:	330d      	adds	r3, #13
 80123b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80123ba:	4413      	add	r3, r2
 80123bc:	2210      	movs	r2, #16
 80123be:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 80123c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d056      	beq.n	8012476 <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 80123c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d104      	bne.n	80123d8 <xProcessReceivedTCPPacket+0x2d8>
 80123ce:	f240 319e 	movw	r1, #926	@ 0x39e
 80123d2:	482b      	ldr	r0, [pc, #172]	@ (8012480 <xProcessReceivedTCPPacket+0x380>)
 80123d4:	f7ef fb5a 	bl	8001a8c <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 80123d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80123da:	f7ff fa53 	bl	8011884 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 80123de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e0:	7b1b      	ldrb	r3, [r3, #12]
 80123e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123e6:	2b50      	cmp	r3, #80	@ 0x50
 80123e8:	d905      	bls.n	80123f6 <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	4619      	mov	r1, r3
 80123ee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80123f0:	f000 f894 	bl	801251c <prvCheckOptions>
 80123f4:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 80123f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d03c      	beq.n	8012476 <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80123fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fe:	89db      	ldrh	r3, [r3, #14]
 8012400:	b29b      	uxth	r3, r3
 8012402:	021b      	lsls	r3, r3, #8
 8012404:	b21a      	sxth	r2, r3
 8012406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012408:	89db      	ldrh	r3, [r3, #14]
 801240a:	b29b      	uxth	r3, r3
 801240c:	0a1b      	lsrs	r3, r3, #8
 801240e:	b29b      	uxth	r3, r3
 8012410:	b21b      	sxth	r3, r3
 8012412:	4313      	orrs	r3, r2
 8012414:	b21b      	sxth	r3, r3
 8012416:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012418:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801241a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801241c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8012420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012422:	f003 0302 	and.w	r3, r3, #2
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10a      	bne.n	8012440 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801242c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012432:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012436:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801243a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801243c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8012440:	f107 031c 	add.w	r3, r7, #28
 8012444:	4619      	mov	r1, r3
 8012446:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012448:	f000 ff78 	bl	801333c <prvTCPHandleState>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	dd05      	ble.n	801245e <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012452:	f107 031c 	add.w	r3, r7, #28
 8012456:	4619      	mov	r1, r3
 8012458:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801245a:	f001 fc6f 	bl	8013d3c <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 801245e:	69fb      	ldr	r3, [r7, #28]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d005      	beq.n	8012470 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	4618      	mov	r0, r3
 8012468:	f005 fbcc 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 801246c:	2300      	movs	r3, #0
 801246e:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8012470:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012472:	f7ff fc73 	bl	8011d5c <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8012476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8012478:	4618      	mov	r0, r3
 801247a:	3748      	adds	r7, #72	@ 0x48
 801247c:	46bd      	mov	sp, r7
 801247e:	bdb0      	pop	{r4, r5, r7, pc}
 8012480:	08026b84 	.word	0x08026b84

08012484 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012490:	021b      	lsls	r3, r3, #8
 8012492:	b21a      	sxth	r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012498:	0a1b      	lsrs	r3, r3, #8
 801249a:	b29b      	uxth	r3, r3
 801249c:	b21b      	sxth	r3, r3
 801249e:	4313      	orrs	r3, r2
 80124a0:	b21b      	sxth	r3, r3
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 80124a6:	2300      	movs	r3, #0
 80124a8:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80124aa:	4b19      	ldr	r3, [pc, #100]	@ (8012510 <xTCPCheckNewClient+0x8c>)
 80124ac:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80124ae:	4b19      	ldr	r3, [pc, #100]	@ (8012514 <xTCPCheckNewClient+0x90>)
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	61fb      	str	r3, [r7, #28]
 80124b4:	e023      	b.n	80124fe <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	697a      	ldr	r2, [r7, #20]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d11b      	bne.n	80124f8 <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	68db      	ldr	r3, [r3, #12]
 80124c4:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80124cc:	2b06      	cmp	r3, #6
 80124ce:	d113      	bne.n	80124f8 <xTCPCheckNewClient+0x74>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80124d6:	f003 0302 	and.w	r3, r3, #2
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d00b      	beq.n	80124f8 <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80124ea:	4619      	mov	r1, r3
 80124ec:	480a      	ldr	r0, [pc, #40]	@ (8012518 <xTCPCheckNewClient+0x94>)
 80124ee:	f010 fa93 	bl	8022a18 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 80124f2:	2301      	movs	r3, #1
 80124f4:	61bb      	str	r3, [r7, #24]
                    break;
 80124f6:	e006      	b.n	8012506 <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80124f8:	69fb      	ldr	r3, [r7, #28]
 80124fa:	685b      	ldr	r3, [r3, #4]
 80124fc:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 80124fe:	69fa      	ldr	r2, [r7, #28]
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	429a      	cmp	r2, r3
 8012504:	d1d7      	bne.n	80124b6 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8012506:	69bb      	ldr	r3, [r7, #24]
    }
 8012508:	4618      	mov	r0, r3
 801250a:	3720      	adds	r7, #32
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	20001628 	.word	0x20001628
 8012514:	20001620 	.word	0x20001620
 8012518:	08026d60 	.word	0x08026d60

0801251c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801251c:	b580      	push	{r7, lr}
 801251e:	b08c      	sub	sp, #48	@ 0x30
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012526:	6838      	ldr	r0, [r7, #0]
 8012528:	f7f8 f83e 	bl	800a5a8 <uxIPHeaderSizePacket>
 801252c:	4603      	mov	r3, r0
 801252e:	330e      	adds	r3, #14
 8012530:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	4413      	add	r3, r2
 801253a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 801253c:	2301      	movs	r3, #1
 801253e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	3314      	adds	r3, #20
 8012544:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801254a:	693b      	ldr	r3, [r7, #16]
 801254c:	3314      	adds	r3, #20
 801254e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	7b1b      	ldrb	r3, [r3, #12]
 8012554:	2b50      	cmp	r3, #80	@ 0x50
 8012556:	d93f      	bls.n	80125d8 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	7b1b      	ldrb	r3, [r3, #12]
 801255c:	091b      	lsrs	r3, r3, #4
 801255e:	b2db      	uxtb	r3, r3
 8012560:	3b05      	subs	r3, #5
 8012562:	b2db      	uxtb	r3, r3
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8012568:	7bfb      	ldrb	r3, [r7, #15]
 801256a:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012570:	697a      	ldr	r2, [r7, #20]
 8012572:	429a      	cmp	r2, r3
 8012574:	d230      	bcs.n	80125d8 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8012576:	683b      	ldr	r3, [r7, #0]
 8012578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	6a3a      	ldr	r2, [r7, #32]
 8012580:	429a      	cmp	r2, r3
 8012582:	d829      	bhi.n	80125d8 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	7b5b      	ldrb	r3, [r3, #13]
 8012588:	f003 0302 	and.w	r3, r3, #2
 801258c:	2b00      	cmp	r3, #0
 801258e:	d002      	beq.n	8012596 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8012590:	2301      	movs	r3, #1
 8012592:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012594:	e001      	b.n	801259a <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8012596:	2300      	movs	r3, #0
 8012598:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d018      	beq.n	80125d2 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80125a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	6a39      	ldr	r1, [r7, #32]
 80125a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125a8:	f000 f81c 	bl	80125e4 <prvSingleStepTCPHeaderOptions>
 80125ac:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	da02      	bge.n	80125ba <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 80125b4:	2300      	movs	r3, #0
 80125b6:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 80125b8:	e00e      	b.n	80125d8 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d00a      	beq.n	80125d6 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	6a3a      	ldr	r2, [r7, #32]
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 80125c8:	68bb      	ldr	r3, [r7, #8]
 80125ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125cc:	4413      	add	r3, r2
 80125ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 80125d0:	e7e3      	b.n	801259a <prvCheckOptions+0x7e>
                            break;
 80125d2:	bf00      	nop
 80125d4:	e000      	b.n	80125d8 <prvCheckOptions+0xbc>
                            break;
 80125d6:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 80125d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80125da:	4618      	mov	r0, r3
 80125dc:	3730      	adds	r7, #48	@ 0x30
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
	...

080125e4 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b08a      	sub	sp, #40	@ 0x28
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	60f8      	str	r0, [r7, #12]
 80125ec:	60b9      	str	r1, [r7, #8]
 80125ee:	607a      	str	r2, [r7, #4]
 80125f0:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012600:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012602:	2300      	movs	r3, #0
 8012604:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d102      	bne.n	8012614 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 801260e:	2300      	movs	r3, #0
 8012610:	61fb      	str	r3, [r7, #28]
 8012612:	e0da      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	2b01      	cmp	r3, #1
 801261a:	d102      	bne.n	8012622 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 801261c:	2301      	movs	r3, #1
 801261e:	61fb      	str	r3, [r7, #28]
 8012620:	e0d3      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d803      	bhi.n	8012630 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8012628:	f04f 33ff 	mov.w	r3, #4294967295
 801262c:	61fb      	str	r3, [r7, #28]
 801262e:	e0cc      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b03      	cmp	r3, #3
 8012636:	d11e      	bne.n	8012676 <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2b02      	cmp	r3, #2
 801263c:	d904      	bls.n	8012648 <prvSingleStepTCPHeaderOptions+0x64>
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	3301      	adds	r3, #1
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	2b03      	cmp	r3, #3
 8012646:	d003      	beq.n	8012650 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8012648:	f04f 33ff 	mov.w	r3, #4294967295
 801264c:	61fb      	str	r3, [r7, #28]
 801264e:	e0bc      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d00c      	beq.n	8012670 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	3302      	adds	r3, #2
 801265a:	781a      	ldrb	r2, [r3, #0]
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012668:	f043 0310 	orr.w	r3, r3, #16
 801266c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8012670:	2303      	movs	r3, #3
 8012672:	61fb      	str	r3, [r7, #28]
 8012674:	e0a9      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b02      	cmp	r3, #2
 801267c:	d16d      	bne.n	801275a <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	2b03      	cmp	r3, #3
 8012682:	d904      	bls.n	801268e <prvSingleStepTCPHeaderOptions+0xaa>
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	3301      	adds	r3, #1
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2b04      	cmp	r3, #4
 801268c:	d003      	beq.n	8012696 <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 801268e:	f04f 33ff 	mov.w	r3, #4294967295
 8012692:	61fb      	str	r3, [r7, #28]
 8012694:	e099      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	3302      	adds	r3, #2
 801269a:	4618      	mov	r0, r3
 801269c:	f7f8 fd31 	bl	800b102 <usChar2u16>
 80126a0:	4603      	mov	r3, r0
 80126a2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80126aa:	461a      	mov	r2, r3
 80126ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d010      	beq.n	80126d4 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 80126b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d105      	bne.n	80126c4 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 80126b8:	f04f 33ff 	mov.w	r3, #4294967295
 80126bc:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 80126be:	2301      	movs	r3, #1
 80126c0:	61bb      	str	r3, [r7, #24]
 80126c2:	e007      	b.n	80126d4 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80126ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126cc:	4619      	mov	r1, r3
 80126ce:	4841      	ldr	r0, [pc, #260]	@ (80127d4 <prvSingleStepTCPHeaderOptions+0x1f0>)
 80126d0:	f010 f9a2 	bl	8022a18 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d177      	bne.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 80126da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126dc:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80126e0:	d202      	bcs.n	80126e8 <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 80126e2:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80126e6:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80126ee:	461a      	mov	r2, r3
 80126f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f2:	4293      	cmp	r3, r2
 80126f4:	d22e      	bcs.n	8012754 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80126fc:	f043 0301 	orr.w	r3, r3, #1
 8012700:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801270a:	461a      	mov	r2, r3
 801270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270e:	4293      	cmp	r3, r2
 8012710:	d207      	bcs.n	8012722 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801271a:	4619      	mov	r1, r3
 801271c:	482e      	ldr	r0, [pc, #184]	@ (80127d8 <prvSingleStepTCPHeaderOptions+0x1f4>)
 801271e:	f010 f97b 	bl	8022a18 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	685a      	ldr	r2, [r3, #4]
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	fbb2 f3f3 	udiv	r3, r2, r3
 801272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801272e:	fb03 f202 	mul.w	r2, r3, r2
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8012736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012738:	b29a      	uxth	r2, r3
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8012740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012742:	b29a      	uxth	r2, r3
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274c:	b29a      	uxth	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8012754:	2304      	movs	r3, #4
 8012756:	61fb      	str	r3, [r7, #28]
 8012758:	e037      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	3301      	adds	r3, #1
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8012764:	2300      	movs	r3, #0
 8012766:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8012768:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801276c:	2b01      	cmp	r3, #1
 801276e:	d904      	bls.n	801277a <prvSingleStepTCPHeaderOptions+0x196>
 8012770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012774:	697a      	ldr	r2, [r7, #20]
 8012776:	429a      	cmp	r2, r3
 8012778:	d203      	bcs.n	8012782 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 801277a:	f04f 33ff 	mov.w	r3, #4294967295
 801277e:	61fb      	str	r3, [r7, #28]
 8012780:	e023      	b.n	80127ca <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b05      	cmp	r3, #5
 8012788:	d11a      	bne.n	80127c0 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 801278a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801278e:	3b02      	subs	r3, #2
 8012790:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	3302      	adds	r3, #2
 8012798:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 801279a:	e00d      	b.n	80127b8 <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	4619      	mov	r1, r3
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f000 f81a 	bl	80127dc <prvReadSackOption>
                            lIndex += 8;
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	3308      	adds	r3, #8
 80127ac:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 80127ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80127b2:	3b08      	subs	r3, #8
 80127b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 80127b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80127bc:	2b07      	cmp	r3, #7
 80127be:	d8ed      	bhi.n	801279c <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 80127c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	4413      	add	r3, r2
 80127c8:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 80127ca:	69fb      	ldr	r3, [r7, #28]
    }
 80127cc:	4618      	mov	r0, r3
 80127ce:	3728      	adds	r7, #40	@ 0x28
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	08026d8c 	.word	0x08026d8c
 80127d8:	08026da4 	.word	0x08026da4

080127dc <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 80127dc:	b580      	push	{r7, lr}
 80127de:	b08a      	sub	sp, #40	@ 0x28
 80127e0:	af02      	add	r7, sp, #8
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	4413      	add	r3, r2
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7f8 fc6c 	bl	800b0cc <ulChar2u32>
 80127f4:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	3304      	adds	r3, #4
 80127fa:	68fa      	ldr	r2, [r7, #12]
 80127fc:	4413      	add	r3, r2
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f8 fc64 	bl	800b0cc <ulChar2u32>
 8012804:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801280c:	69ba      	ldr	r2, [r7, #24]
 801280e:	69f9      	ldr	r1, [r7, #28]
 8012810:	4618      	mov	r0, r3
 8012812:	f004 fba3 	bl	8016f5c <ulTCPWindowTxSack>
 8012816:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d029      	beq.n	8012876 <prvReadSackOption+0x9a>
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d026      	beq.n	8012876 <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801282e:	2300      	movs	r3, #0
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	2200      	movs	r2, #0
 8012836:	2100      	movs	r1, #0
 8012838:	f7fe fed9 	bl	80115ee <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	f043 0202 	orr.w	r2, r3, #2
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801284c:	f003 0302 	and.w	r3, r3, #2
 8012850:	2b00      	cmp	r3, #0
 8012852:	d005      	beq.n	8012860 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012866:	2b00      	cmp	r3, #0
 8012868:	d005      	beq.n	8012876 <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012870:	6979      	ldr	r1, [r7, #20]
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8012876:	bf00      	nop
 8012878:	3720      	adds	r7, #32
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 801287e:	b590      	push	{r4, r7, lr}
 8012880:	b08f      	sub	sp, #60	@ 0x3c
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
 8012886:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f7f7 fe8b 	bl	800a5a8 <uxIPHeaderSizePacket>
 8012892:	4603      	mov	r3, r0
 8012894:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012896:	4423      	add	r3, r4
 8012898:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801289a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801289c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f7f7 fe82 	bl	800a5a8 <uxIPHeaderSizePacket>
 80128a4:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80128ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128ae:	7b1b      	ldrb	r3, [r3, #12]
 80128b0:	089b      	lsrs	r3, r3, #2
 80128b2:	b2db      	uxtb	r3, r3
 80128b4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80128b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 80128bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80128c0:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128c6:	69f9      	ldr	r1, [r7, #28]
 80128c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128ca:	440b      	add	r3, r1
 80128cc:	330e      	adds	r3, #14
 80128ce:	441a      	add	r2, r3
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128d8:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80128da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80128dc:	3b0e      	subs	r3, #14
 80128de:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128e4:	899b      	ldrh	r3, [r3, #12]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	2b08      	cmp	r3, #8
 80128ea:	d004      	beq.n	80128f6 <prvCheckRxData+0x78>
 80128ec:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80128f0:	4293      	cmp	r3, r2
 80128f2:	d015      	beq.n	8012920 <prvCheckRxData+0xa2>
 80128f4:	e02c      	b.n	8012950 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128fa:	330e      	adds	r3, #14
 80128fc:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	885b      	ldrh	r3, [r3, #2]
 8012902:	b29b      	uxth	r3, r3
 8012904:	021b      	lsls	r3, r3, #8
 8012906:	b21a      	sxth	r2, r3
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	885b      	ldrh	r3, [r3, #2]
 801290c:	b29b      	uxth	r3, r3
 801290e:	0a1b      	lsrs	r3, r3, #8
 8012910:	b29b      	uxth	r3, r3
 8012912:	b21b      	sxth	r3, r3
 8012914:	4313      	orrs	r3, r2
 8012916:	b21b      	sxth	r3, r3
 8012918:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801291a:	8afb      	ldrh	r3, [r7, #22]
 801291c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801291e:	e01a      	b.n	8012956 <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012924:	330e      	adds	r3, #14
 8012926:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	889b      	ldrh	r3, [r3, #4]
 801292c:	b29b      	uxth	r3, r3
 801292e:	021b      	lsls	r3, r3, #8
 8012930:	b21a      	sxth	r2, r3
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	889b      	ldrh	r3, [r3, #4]
 8012936:	b29b      	uxth	r3, r3
 8012938:	0a1b      	lsrs	r3, r3, #8
 801293a:	b29b      	uxth	r3, r3
 801293c:	b21b      	sxth	r3, r3
 801293e:	4313      	orrs	r3, r2
 8012940:	b21b      	sxth	r3, r3
 8012942:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8012944:	8afb      	ldrh	r3, [r7, #22]
 8012946:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8012948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801294a:	3328      	adds	r3, #40	@ 0x28
 801294c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801294e:	e002      	b.n	8012956 <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8012950:	2300      	movs	r3, #0
 8012952:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8012954:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 8012956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801295a:	429a      	cmp	r2, r3
 801295c:	dd01      	ble.n	8012962 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 801295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012960:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8012962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	4413      	add	r3, r2
 8012968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801296a:	429a      	cmp	r2, r3
 801296c:	dd06      	ble.n	801297c <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 801296e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	4413      	add	r3, r2
 8012974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	633b      	str	r3, [r7, #48]	@ 0x30
 801297a:	e001      	b.n	8012980 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 801297c:	2300      	movs	r3, #0
 801297e:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8012980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012982:	7b5b      	ldrb	r3, [r3, #13]
 8012984:	f003 0320 	and.w	r3, r3, #32
 8012988:	2b00      	cmp	r3, #0
 801298a:	d01c      	beq.n	80129c6 <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 801298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298e:	8a5b      	ldrh	r3, [r3, #18]
 8012990:	b29b      	uxth	r3, r3
 8012992:	021b      	lsls	r3, r3, #8
 8012994:	b21a      	sxth	r2, r3
 8012996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012998:	8a5b      	ldrh	r3, [r3, #18]
 801299a:	b29b      	uxth	r3, r3
 801299c:	0a1b      	lsrs	r3, r3, #8
 801299e:	b29b      	uxth	r3, r3
 80129a0:	b21b      	sxth	r3, r3
 80129a2:	4313      	orrs	r3, r2
 80129a4:	b21b      	sxth	r3, r3
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	441a      	add	r2, r3
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80129b6:	68f9      	ldr	r1, [r7, #12]
 80129b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80129ba:	f7f8 fb33 	bl	800b024 <FreeRTOS_min_int32>
 80129be:	4602      	mov	r2, r0
 80129c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129c2:	1a9b      	subs	r3, r3, r2
 80129c4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 80129c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 80129c8:	4618      	mov	r0, r3
 80129ca:	373c      	adds	r7, #60	@ 0x3c
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd90      	pop	{r4, r7, pc}

080129d0 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b092      	sub	sp, #72	@ 0x48
 80129d4:	af02      	add	r7, sp, #8
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7f7 fde2 	bl	800a5a8 <uxIPHeaderSizePacket>
 80129e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ec:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80129ee:	4413      	add	r3, r2
 80129f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80129f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f4:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80129fc:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80129fe:	2300      	movs	r3, #0
 8012a00:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	061a      	lsls	r2, r3, #24
 8012a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	021b      	lsls	r3, r3, #8
 8012a16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012a1a:	431a      	orrs	r2, r3
 8012a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	0a1b      	lsrs	r3, r3, #8
 8012a22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012a26:	431a      	orrs	r2, r3
 8012a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	0e1b      	lsrs	r3, r3, #24
 8012a2e:	4313      	orrs	r3, r2
 8012a30:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8012a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d057      	beq.n	8012ae8 <prvStoreRxData+0x118>
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012a3e:	2b03      	cmp	r3, #3
 8012a40:	d952      	bls.n	8012ae8 <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d007      	beq.n	8012a60 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe fc89 	bl	801136e <uxStreamBufferGetSpace>
 8012a5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8012a5e:	e003      	b.n	8012a68 <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 8012a68:	f107 0310 	add.w	r3, r7, #16
 8012a6c:	9300      	str	r3, [sp, #0]
 8012a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a72:	69f9      	ldr	r1, [r7, #28]
 8012a74:	6a38      	ldr	r0, [r7, #32]
 8012a76:	f003 fd45 	bl	8016504 <lTCPWindowRxCheck>
 8012a7a:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	db20      	blt.n	8012ac4 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d007      	beq.n	8012a98 <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012a8c:	1ad3      	subs	r3, r2, r3
 8012a8e:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	4413      	add	r3, r2
 8012a96:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8012a98:	69b9      	ldr	r1, [r7, #24]
 8012a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7fe f8d2 	bl	8010c48 <lTCPAddRxdata>
 8012aa4:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8012aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa8:	697a      	ldr	r2, [r7, #20]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d00a      	beq.n	8012ac4 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8012aae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ab0:	6979      	ldr	r1, [r7, #20]
 8012ab2:	4813      	ldr	r0, [pc, #76]	@ (8012b00 <prvStoreRxData+0x130>)
 8012ab4:	f00f ffb0 	bl	8022a18 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f002 f8b3 	bl	8014c24 <prvTCPSendReset>
                    xResult = -1;
 8012abe:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d113      	bne.n	8012af2 <prvStoreRxData+0x122>
 8012aca:	6a3b      	ldr	r3, [r7, #32]
 8012acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d00f      	beq.n	8012af2 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8012ad2:	6a3b      	ldr	r3, [r7, #32]
 8012ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	2100      	movs	r1, #0
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f7fe f8b4 	bl	8010c48 <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8012ae0:	6a3b      	ldr	r3, [r7, #32]
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8012ae6:	e004      	b.n	8012af2 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8012ae8:	6a3b      	ldr	r3, [r7, #32]
 8012aea:	2200      	movs	r2, #0
 8012aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012af0:	e000      	b.n	8012af4 <prvStoreRxData+0x124>
        {
 8012af2:	bf00      	nop
        }

        return xResult;
 8012af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8012af6:	4618      	mov	r0, r3
 8012af8:	3740      	adds	r7, #64	@ 0x40
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	08026dbc 	.word	0x08026dbc

08012b04 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8012b04:	b480      	push	{r7}
 8012b06:	b085      	sub	sp, #20
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	2b0b      	cmp	r3, #11
 8012b12:	bf8c      	ite	hi
 8012b14:	2201      	movhi	r2, #1
 8012b16:	2200      	movls	r2, #0
 8012b18:	b2d2      	uxtb	r2, r2
 8012b1a:	2a00      	cmp	r2, #0
 8012b1c:	d10f      	bne.n	8012b3e <prvTCPSocketIsActive+0x3a>
 8012b1e:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012b22:	fa22 f303 	lsr.w	r3, r2, r3
 8012b26:	f003 0301 	and.w	r3, r3, #1
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	bf14      	ite	ne
 8012b2e:	2301      	movne	r3, #1
 8012b30:	2300      	moveq	r3, #0
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d002      	beq.n	8012b3e <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	60fb      	str	r3, [r7, #12]
                break;
 8012b3c:	e002      	b.n	8012b44 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8012b3e:	2301      	movs	r3, #1
 8012b40:	60fb      	str	r3, [r7, #12]
                break;
 8012b42:	bf00      	nop
        }

        return xResult;
 8012b44:	68fb      	ldr	r3, [r7, #12]
    }
 8012b46:	4618      	mov	r0, r3
 8012b48:	3714      	adds	r7, #20
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr
	...

08012b54 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8012b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b56:	b089      	sub	sp, #36	@ 0x24
 8012b58:	af02      	add	r7, sp, #8
 8012b5a:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012b62:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8012b64:	7cfb      	ldrb	r3, [r7, #19]
 8012b66:	2b08      	cmp	r3, #8
 8012b68:	d00b      	beq.n	8012b82 <prvTCPStatusAgeCheck+0x2e>
 8012b6a:	2b08      	cmp	r3, #8
 8012b6c:	dc0c      	bgt.n	8012b88 <prvTCPStatusAgeCheck+0x34>
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	dc02      	bgt.n	8012b78 <prvTCPStatusAgeCheck+0x24>
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	da05      	bge.n	8012b82 <prvTCPStatusAgeCheck+0x2e>
 8012b76:	e007      	b.n	8012b88 <prvTCPStatusAgeCheck+0x34>
 8012b78:	2b05      	cmp	r3, #5
 8012b7a:	d105      	bne.n	8012b88 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
                    break;
 8012b80:	e005      	b.n	8012b8e <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8012b82:	2300      	movs	r3, #0
 8012b84:	617b      	str	r3, [r7, #20]
                    break;
 8012b86:	e002      	b.n	8012b8e <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8012b88:	2301      	movs	r3, #1
 8012b8a:	617b      	str	r3, [r7, #20]
                    break;
 8012b8c:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d032      	beq.n	8012bfa <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012b94:	f7f2 f970 	bl	8004e78 <xTaskGetTickCount>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f247 5230 	movw	r2, #30000	@ 0x7530
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d925      	bls.n	8012bfa <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012bb2:	461d      	mov	r5, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012bbe:	461e      	mov	r6, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f000 fdca 	bl	8013760 <FreeRTOS_GetTCPStateName>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	9300      	str	r3, [sp, #0]
 8012bd0:	4633      	mov	r3, r6
 8012bd2:	4622      	mov	r2, r4
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	480b      	ldr	r0, [pc, #44]	@ (8012c04 <prvTCPStatusAgeCheck+0xb0>)
 8012bd8:	f00f ff1e 	bl	8022a18 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012bdc:	2108      	movs	r1, #8
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7fe feac 	bl	801193c <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012bea:	f003 0304 	and.w	r3, r3, #4
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8012bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf8:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8012bfa:	697b      	ldr	r3, [r7, #20]
        }
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	371c      	adds	r7, #28
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c04:	08026de4 	.word	0x08026de4

08012c08 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012c08:	b5b0      	push	{r4, r5, r7, lr}
 8012c0a:	b08a      	sub	sp, #40	@ 0x28
 8012c0c:	af02      	add	r7, sp, #8
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012c16:	6838      	ldr	r0, [r7, #0]
 8012c18:	f7f7 fcc6 	bl	800a5a8 <uxIPHeaderSizePacket>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012c20:	4423      	add	r3, r4
 8012c22:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012c28:	2300      	movs	r3, #0
 8012c2a:	74fb      	strb	r3, [r7, #19]
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	7b5b      	ldrb	r3, [r3, #13]
 8012c30:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012c38:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	689b      	ldr	r3, [r3, #8]
 8012c42:	061a      	lsls	r2, r3, #24
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	021b      	lsls	r3, r3, #8
 8012c4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012c4e:	431a      	orrs	r2, r3
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	0a1b      	lsrs	r3, r3, #8
 8012c56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c5a:	431a      	orrs	r2, r3
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	689b      	ldr	r3, [r3, #8]
 8012c60:	0e1b      	lsrs	r3, r3, #24
 8012c62:	4313      	orrs	r3, r2
 8012c64:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8012c66:	7cbb      	ldrb	r3, [r7, #18]
 8012c68:	f003 0301 	and.w	r3, r3, #1
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d004      	beq.n	8012c7a <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	695b      	ldr	r3, [r3, #20]
 8012c74:	1c5a      	adds	r2, r3, #1
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10b      	bne.n	8012ca2 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6a1a      	ldr	r2, [r3, #32]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012c98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c9c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012ca0:	e00c      	b.n	8012cbc <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d106      	bne.n	8012cbc <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012cb4:	f043 0301 	orr.w	r3, r3, #1
 8012cb8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	b2db      	uxtb	r3, r3
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10b      	bne.n	8012ce4 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	2211      	movs	r2, #17
 8012cd8:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8012cda:	210a      	movs	r1, #10
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f7fe fe2d 	bl	801193c <vTCPStateChange>
 8012ce2:	e023      	b.n	8012d2c <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ce8:	1c5a      	adds	r2, r3, #1
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012cf4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012cf8:	b2db      	uxtb	r3, r3
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d103      	bne.n	8012d06 <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	2200      	movs	r2, #0
 8012d02:	735a      	strb	r2, [r3, #13]
 8012d04:	e012      	b.n	8012d2c <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012d0c:	f003 0302 	and.w	r3, r3, #2
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d103      	bne.n	8012d1e <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	2210      	movs	r2, #16
 8012d1a:	735a      	strb	r2, [r3, #13]
 8012d1c:	e002      	b.n	8012d24 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012d1e:	697b      	ldr	r3, [r7, #20]
 8012d20:	2200      	movs	r2, #0
 8012d22:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012d24:	2108      	movs	r1, #8
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f7fe fe08 	bl	801193c <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	6a1a      	ldr	r2, [r3, #32]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	7b5b      	ldrb	r3, [r3, #13]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00d      	beq.n	8012d58 <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7f7 fc4d 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012d42:	4603      	mov	r3, r0
 8012d44:	b2da      	uxtb	r2, r3
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d4c:	4413      	add	r3, r2
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	3314      	adds	r3, #20
 8012d52:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012d54:	7cfb      	ldrb	r3, [r7, #19]
 8012d56:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012d5e:	3314      	adds	r3, #20
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	b2da      	uxtb	r2, r3
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8012d6a:	4b14      	ldr	r3, [pc, #80]	@ (8012dbc <prvTCPHandleFin+0x1b4>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d01f      	beq.n	8012db2 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	69db      	ldr	r3, [r3, #28]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	1ad0      	subs	r0, r2, r3
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	6a1a      	ldr	r2, [r3, #32]
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	69db      	ldr	r3, [r3, #28]
 8012d82:	1ad4      	subs	r4, r2, r3
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	69db      	ldr	r3, [r3, #28]
 8012d8c:	1ad5      	subs	r5, r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	69db      	ldr	r3, [r3, #28]
 8012d96:	1ad3      	subs	r3, r2, r3
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	6911      	ldr	r1, [r2, #16]
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	68d2      	ldr	r2, [r2, #12]
 8012da0:	1a8a      	subs	r2, r1, r2
 8012da2:	9201      	str	r2, [sp, #4]
 8012da4:	9300      	str	r3, [sp, #0]
 8012da6:	462b      	mov	r3, r5
 8012da8:	4622      	mov	r2, r4
 8012daa:	4601      	mov	r1, r0
 8012dac:	4804      	ldr	r0, [pc, #16]	@ (8012dc0 <prvTCPHandleFin+0x1b8>)
 8012dae:	f00f fe33 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012db2:	69fb      	ldr	r3, [r7, #28]
    }
 8012db4:	4618      	mov	r0, r3
 8012db6:	3720      	adds	r7, #32
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bdb0      	pop	{r4, r5, r7, pc}
 8012dbc:	20001664 	.word	0x20001664
 8012dc0:	08026e1c 	.word	0x08026e1c

08012dc4 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012dc4:	b590      	push	{r4, r7, lr}
 8012dc6:	b09b      	sub	sp, #108	@ 0x6c
 8012dc8:	af02      	add	r7, sp, #8
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012dd6:	68f8      	ldr	r0, [r7, #12]
 8012dd8:	f7f7 fc00 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012de0:	4423      	add	r3, r4
 8012de2:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012de6:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012df2:	7b5b      	ldrb	r3, [r3, #13]
 8012df4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	061a      	lsls	r2, r3, #24
 8012dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	021b      	lsls	r3, r3, #8
 8012e04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e08:	431a      	orrs	r2, r3
 8012e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	0a1b      	lsrs	r3, r3, #8
 8012e10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012e14:	431a      	orrs	r2, r3
 8012e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	0e1b      	lsrs	r3, r3, #24
 8012e1c:	4313      	orrs	r3, r2
 8012e1e:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012e24:	2300      	movs	r3, #0
 8012e26:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8012e28:	2310      	movs	r3, #16
 8012e2a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012e2e:	2317      	movs	r3, #23
 8012e30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012e3a:	2b02      	cmp	r3, #2
 8012e3c:	d105      	bne.n	8012e4a <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012e3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012e42:	f043 0302 	orr.w	r3, r3, #2
 8012e46:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8012e4a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012e4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012e52:	4013      	ands	r3, r2
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d044      	beq.n	8012ee8 <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012e64:	2b04      	cmp	r3, #4
 8012e66:	d101      	bne.n	8012e6c <prvHandleSynReceived+0xa8>
 8012e68:	4977      	ldr	r1, [pc, #476]	@ (8013048 <prvHandleSynReceived+0x284>)
 8012e6a:	e000      	b.n	8012e6e <prvHandleSynReceived+0xaa>
 8012e6c:	4977      	ldr	r1, [pc, #476]	@ (801304c <prvHandleSynReceived+0x288>)
 8012e6e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012e72:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012e76:	4876      	ldr	r0, [pc, #472]	@ (8013050 <prvHandleSynReceived+0x28c>)
 8012e78:	f00f fdce 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012e7c:	2108      	movs	r1, #8
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f7fe fd5c 	bl	801193c <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	061a      	lsls	r2, r3, #24
 8012e8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e8c:	689b      	ldr	r3, [r3, #8]
 8012e8e:	021b      	lsls	r3, r3, #8
 8012e90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012e94:	431a      	orrs	r2, r3
 8012e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e98:	689b      	ldr	r3, [r3, #8]
 8012e9a:	0a1b      	lsrs	r3, r3, #8
 8012e9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ea0:	431a      	orrs	r2, r3
 8012ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ea4:	689b      	ldr	r3, [r3, #8]
 8012ea6:	0e1b      	lsrs	r3, r3, #24
 8012ea8:	431a      	orrs	r2, r3
 8012eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012eac:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012eb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012eb2:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eb6:	7b5b      	ldrb	r3, [r3, #13]
 8012eb8:	f043 0304 	orr.w	r3, r3, #4
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ec0:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012ec2:	68f8      	ldr	r0, [r7, #12]
 8012ec4:	f7f7 fb8a 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	4413      	add	r3, r2
 8012ece:	3314      	adds	r3, #20
 8012ed0:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	3314      	adds	r3, #20
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ee4:	731a      	strb	r2, [r3, #12]
 8012ee6:	e0aa      	b.n	801303e <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ef0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8012ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012efa:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	d12e      	bne.n	8012f66 <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f7f7 fb67 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012f12:	33a0      	adds	r3, #160	@ 0xa0
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	4413      	add	r3, r2
 8012f18:	330a      	adds	r3, #10
 8012f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f1e:	2210      	movs	r2, #16
 8012f20:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f24:	2210      	movs	r2, #16
 8012f26:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012f3c:	f003 f8ec 	bl	8016118 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f46:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f4a:	1c5a      	adds	r2, r3, #1
 8012f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f4e:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f52:	6a1b      	ldr	r3, [r3, #32]
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f58:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8012f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f62:	635a      	str	r2, [r3, #52]	@ 0x34
 8012f64:	e005      	b.n	8012f72 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d102      	bne.n	8012f72 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012f70:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f74:	69db      	ldr	r3, [r3, #28]
 8012f76:	1c5a      	adds	r2, r3, #1
 8012f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	7a1b      	ldrb	r3, [r3, #8]
 8012f80:	f003 0301 	and.w	r3, r3, #1
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d001      	beq.n	8012f8e <prvHandleSynReceived+0x1ca>
 8012f8a:	200a      	movs	r0, #10
 8012f8c:	e000      	b.n	8012f90 <prvHandleSynReceived+0x1cc>
 8012f8e:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012f96:	f107 0210 	add.w	r2, r7, #16
 8012f9a:	2328      	movs	r3, #40	@ 0x28
 8012f9c:	f7fc fda2 	bl	800fae4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012fa6:	2b02      	cmp	r3, #2
 8012fa8:	d101      	bne.n	8012fae <prvHandleSynReceived+0x1ea>
 8012faa:	492a      	ldr	r1, [pc, #168]	@ (8013054 <prvHandleSynReceived+0x290>)
 8012fac:	e000      	b.n	8012fb0 <prvHandleSynReceived+0x1ec>
 8012fae:	492a      	ldr	r1, [pc, #168]	@ (8013058 <prvHandleSynReceived+0x294>)
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012fb4:	461c      	mov	r4, r3
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012fc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f107 0310 	add.w	r3, r7, #16
 8012fd0:	9001      	str	r0, [sp, #4]
 8012fd2:	9200      	str	r2, [sp, #0]
 8012fd4:	4622      	mov	r2, r4
 8012fd6:	4821      	ldr	r0, [pc, #132]	@ (801305c <prvHandleSynReceived+0x298>)
 8012fd8:	f00f fd1e 	bl	8022a18 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012fe2:	2b02      	cmp	r3, #2
 8012fe4:	d002      	beq.n	8012fec <prvHandleSynReceived+0x228>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d014      	beq.n	8013016 <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fee:	2210      	movs	r2, #16
 8012ff0:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f7f7 faf2 	bl	800a5dc <uxIPHeaderSizeSocket>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	4413      	add	r3, r2
 8012ffe:	3314      	adds	r3, #20
 8013000:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8013002:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013004:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	b2db      	uxtb	r3, r3
 801300a:	3314      	adds	r3, #20
 801300c:	b2db      	uxtb	r3, r3
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	b2da      	uxtb	r2, r3
 8013012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013014:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801301c:	f003 0310 	and.w	r3, r3, #16
 8013020:	b2db      	uxtb	r3, r3
 8013022:	2b00      	cmp	r3, #0
 8013024:	d107      	bne.n	8013036 <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2200      	movs	r2, #0
 8013032:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8013036:	2105      	movs	r1, #5
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f7fe fc7f 	bl	801193c <vTCPStateChange>
        }

        return xSendLength;
 801303e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8013040:	4618      	mov	r0, r3
 8013042:	3764      	adds	r7, #100	@ 0x64
 8013044:	46bd      	mov	sp, r7
 8013046:	bd90      	pop	{r4, r7, pc}
 8013048:	08026e5c 	.word	0x08026e5c
 801304c:	08026e6c 	.word	0x08026e6c
 8013050:	08026e7c 	.word	0x08026e7c
 8013054:	08026ea0 	.word	0x08026ea0
 8013058:	08026ea8 	.word	0x08026ea8
 801305c:	08026eb0 	.word	0x08026eb0

08013060 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b097      	sub	sp, #92	@ 0x5c
 8013064:	af02      	add	r7, sp, #8
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	607a      	str	r2, [r7, #4]
 801306c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013074:	68f8      	ldr	r0, [r7, #12]
 8013076:	f7f7 fab1 	bl	800a5dc <uxIPHeaderSizeSocket>
 801307a:	4603      	mov	r3, r0
 801307c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801307e:	4423      	add	r3, r4
 8013080:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013084:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801308c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 801308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013090:	7b5b      	ldrb	r3, [r3, #13]
 8013092:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8013096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	061a      	lsls	r2, r3, #24
 801309c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801309e:	685b      	ldr	r3, [r3, #4]
 80130a0:	021b      	lsls	r3, r3, #8
 80130a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80130a6:	431a      	orrs	r2, r3
 80130a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	0a1b      	lsrs	r3, r3, #8
 80130ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80130b2:	431a      	orrs	r2, r3
 80130b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	0e1b      	lsrs	r3, r3, #24
 80130ba:	4313      	orrs	r3, r2
 80130bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80130be:	2300      	movs	r3, #0
 80130c0:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 80130c2:	2300      	movs	r3, #0
 80130c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130c6:	2300      	movs	r3, #0
 80130c8:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80130ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130d0:	89db      	ldrh	r3, [r3, #14]
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	021b      	lsls	r3, r3, #8
 80130d6:	b21a      	sxth	r2, r3
 80130d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130da:	89db      	ldrh	r3, [r3, #14]
 80130dc:	b29b      	uxth	r3, r3
 80130de:	0a1b      	lsrs	r3, r3, #8
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	b21b      	sxth	r3, r3
 80130e4:	4313      	orrs	r3, r2
 80130e6:	b21b      	sxth	r3, r3
 80130e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80130ea:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80130f8:	68fa      	ldr	r2, [r7, #12]
 80130fa:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80130fe:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8013108:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801310c:	f003 0310 	and.w	r3, r3, #16
 8013110:	2b00      	cmp	r3, #0
 8013112:	f000 8106 	beq.w	8013322 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8013116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013118:	689b      	ldr	r3, [r3, #8]
 801311a:	061a      	lsls	r2, r3, #24
 801311c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801311e:	689b      	ldr	r3, [r3, #8]
 8013120:	021b      	lsls	r3, r3, #8
 8013122:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013126:	431a      	orrs	r2, r3
 8013128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	0a1b      	lsrs	r3, r3, #8
 801312e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013132:	431a      	orrs	r2, r3
 8013134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013136:	689b      	ldr	r3, [r3, #8]
 8013138:	0e1b      	lsrs	r3, r3, #24
 801313a:	4313      	orrs	r3, r2
 801313c:	4619      	mov	r1, r3
 801313e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013140:	f003 feee 	bl	8016f20 <ulTCPWindowTxAck>
 8013144:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801314c:	2b00      	cmp	r3, #0
 801314e:	d02c      	beq.n	80131aa <prvHandleEstablished+0x14a>
 8013150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013152:	2b00      	cmp	r3, #0
 8013154:	d029      	beq.n	80131aa <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801315c:	2300      	movs	r3, #0
 801315e:	9300      	str	r3, [sp, #0]
 8013160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013162:	2200      	movs	r2, #0
 8013164:	2100      	movs	r1, #0
 8013166:	f7fe fa42 	bl	80115ee <uxStreamBufferGet>
 801316a:	4603      	mov	r3, r0
 801316c:	2b00      	cmp	r3, #0
 801316e:	d01c      	beq.n	80131aa <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f043 0202 	orr.w	r2, r3, #2
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013180:	f003 0302 	and.w	r3, r3, #2
 8013184:	2b00      	cmp	r3, #0
 8013186:	d005      	beq.n	8013194 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801319a:	2b00      	cmp	r3, #0
 801319c:	d005      	beq.n	80131aa <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80131a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80131a6:	68f8      	ldr	r0, [r7, #12]
 80131a8:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d002      	beq.n	80131ba <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 80131b4:	68f8      	ldr	r0, [r7, #12]
 80131b6:	f001 fb13 	bl	80147e0 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80131ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131bc:	6a1a      	ldr	r2, [r3, #32]
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80131ca:	f003 0320 	and.w	r3, r3, #32
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d105      	bne.n	80131e0 <prvHandleEstablished+0x180>
 80131d4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80131d8:	f003 0301 	and.w	r3, r3, #1
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d06b      	beq.n	80132b8 <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 80131e0:	2301      	movs	r3, #1
 80131e2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80131ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d13a      	bne.n	801326a <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80131f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80131f6:	f002 fe87 	bl	8015f08 <xTCPWindowRxEmpty>
 80131fa:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 80131fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80131fe:	f003 fafd 	bl	80167fc <xTCPWindowTxDone>
 8013202:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8013204:	6a3b      	ldr	r3, [r7, #32]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d002      	beq.n	8013210 <prvHandleEstablished+0x1b0>
 801320a:	69fb      	ldr	r3, [r7, #28]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d10f      	bne.n	8013230 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013214:	4619      	mov	r1, r3
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801321c:	461a      	mov	r2, r3
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	4841      	ldr	r0, [pc, #260]	@ (801332c <prvHandleEstablished+0x2cc>)
 8013226:	f00f fbf7 	bl	8022a18 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801322a:	2300      	movs	r3, #0
 801322c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801322e:	e01c      	b.n	801326a <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	441a      	add	r2, r3
 8013236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013238:	691b      	ldr	r3, [r3, #16]
 801323a:	1ad3      	subs	r3, r2, r3
 801323c:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 801323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013240:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	2b01      	cmp	r3, #1
 8013246:	dd10      	ble.n	801326a <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8013248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801324a:	691a      	ldr	r2, [r3, #16]
 801324c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	1ad1      	subs	r1, r2, r3
 8013252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013254:	699a      	ldr	r2, [r3, #24]
 8013256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013258:	68db      	ldr	r3, [r3, #12]
 801325a:	1ad3      	subs	r3, r2, r3
 801325c:	460a      	mov	r2, r1
 801325e:	69b9      	ldr	r1, [r7, #24]
 8013260:	4833      	ldr	r0, [pc, #204]	@ (8013330 <prvHandleEstablished+0x2d0>)
 8013262:	f00f fbd9 	bl	8022a18 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8013266:	2300      	movs	r3, #0
 8013268:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 801326a:	4b32      	ldr	r3, [pc, #200]	@ (8013334 <prvHandleEstablished+0x2d4>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	dd11      	ble.n	8013296 <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801327a:	1ad1      	subs	r1, r2, r3
 801327c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801327e:	6a1a      	ldr	r2, [r3, #32]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8013286:	1ad3      	subs	r3, r2, r3
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	460a      	mov	r2, r1
 801328e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013290:	4829      	ldr	r0, [pc, #164]	@ (8013338 <prvHandleEstablished+0x2d8>)
 8013292:	f00f fbc1 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8013296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013298:	2b00      	cmp	r3, #0
 801329a:	d00d      	beq.n	80132b8 <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 801329c:	68fa      	ldr	r2, [r7, #12]
 801329e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80132a2:	f043 0320 	orr.w	r3, r3, #32
 80132a6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4619      	mov	r1, r3
 80132b0:	68f8      	ldr	r0, [r7, #12]
 80132b2:	f7ff fca9 	bl	8012c08 <prvTCPHandleFin>
 80132b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 80132b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d131      	bne.n	8013322 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80132be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132c0:	2210      	movs	r2, #16
 80132c2:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d01d      	beq.n	8013306 <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	f7f7 f986 	bl	800a5dc <uxIPHeaderSizeSocket>
 80132d0:	4602      	mov	r2, r0
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	4413      	add	r3, r2
 80132d6:	3314      	adds	r3, #20
 80132d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 80132da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	3314      	adds	r3, #20
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	009b      	lsls	r3, r3, #2
 80132e8:	b2da      	uxtb	r2, r3
 80132ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132ec:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80132f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d003      	beq.n	8013306 <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80132fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013300:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013304:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10a      	bne.n	8013322 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 801330c:	683a      	ldr	r2, [r7, #0]
 801330e:	68b9      	ldr	r1, [r7, #8]
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f001 f8a1 	bl	8014458 <prvTCPPrepareSend>
 8013316:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	2b00      	cmp	r3, #0
 801331c:	dd01      	ble.n	8013322 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 801331e:	697b      	ldr	r3, [r7, #20]
 8013320:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8013322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013324:	4618      	mov	r0, r3
 8013326:	3754      	adds	r7, #84	@ 0x54
 8013328:	46bd      	mov	sp, r7
 801332a:	bd90      	pop	{r4, r7, pc}
 801332c:	08026ee4 	.word	0x08026ee4
 8013330:	08026f10 	.word	0x08026f10
 8013334:	20001664 	.word	0x20001664
 8013338:	08026f44 	.word	0x08026f44

0801333c <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 801333c:	b590      	push	{r4, r7, lr}
 801333e:	b08f      	sub	sp, #60	@ 0x3c
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4618      	mov	r0, r3
 8013352:	f7f7 f929 	bl	800a5a8 <uxIPHeaderSizePacket>
 8013356:	4603      	mov	r3, r0
 8013358:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801335a:	4423      	add	r3, r4
 801335c:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013360:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8013362:	2300      	movs	r3, #0
 8013364:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8013366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	061a      	lsls	r2, r3, #24
 801336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801336e:	685b      	ldr	r3, [r3, #4]
 8013370:	021b      	lsls	r3, r3, #8
 8013372:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013376:	431a      	orrs	r2, r3
 8013378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	0a1b      	lsrs	r3, r3, #8
 801337e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013382:	431a      	orrs	r2, r3
 8013384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	0e1b      	lsrs	r3, r3, #24
 801338a:	4313      	orrs	r3, r2
 801338c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 801338e:	2300      	movs	r3, #0
 8013390:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8013392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013394:	7b5b      	ldrb	r3, [r3, #13]
 8013396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80133a0:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	f107 0208 	add.w	r2, r7, #8
 80133ae:	4611      	mov	r1, r2
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7ff fa64 	bl	801287e <prvCheckRxData>
 80133b6:	4603      	mov	r3, r0
 80133b8:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80133c0:	2b04      	cmp	r3, #4
 80133c2:	d90c      	bls.n	80133de <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 80133c4:	69fb      	ldr	r3, [r7, #28]
 80133c6:	691a      	ldr	r2, [r3, #16]
 80133c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ca:	3301      	adds	r3, #1
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d106      	bne.n	80133de <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80133d6:	f043 0301 	orr.w	r3, r3, #1
 80133da:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 80133de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	441a      	add	r2, r3
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	699b      	ldr	r3, [r3, #24]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	dd04      	ble.n	80133fc <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80133f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	441a      	add	r2, r3
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 80133fc:	68b9      	ldr	r1, [r7, #8]
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7ff fae3 	bl	80129d0 <prvStoreRxData>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	da03      	bge.n	8013418 <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8013410:	f04f 33ff 	mov.w	r3, #4294967295
 8013414:	637b      	str	r3, [r7, #52]	@ 0x34
 8013416:	e0ae      	b.n	8013576 <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4619      	mov	r1, r3
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f001 fa0c 	bl	801483c <prvSetOptions>
 8013424:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801342c:	2b04      	cmp	r3, #4
 801342e:	d10c      	bne.n	801344a <prvTCPHandleState+0x10e>
 8013430:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013434:	f003 031f 	and.w	r3, r3, #31
 8013438:	2b02      	cmp	r3, #2
 801343a:	d106      	bne.n	801344a <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 801343c:	4855      	ldr	r0, [pc, #340]	@ (8013594 <prvTCPHandleState+0x258>)
 801343e:	f00f faeb 	bl	8022a18 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8013442:	2103      	movs	r1, #3
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f7fe fa79 	bl	801193c <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801344a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801344e:	f003 0301 	and.w	r3, r3, #1
 8013452:	2b00      	cmp	r3, #0
 8013454:	d022      	beq.n	801349c <prvTCPHandleState+0x160>
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801345c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013460:	b2db      	uxtb	r3, r3
 8013462:	2b00      	cmp	r3, #0
 8013464:	d11a      	bne.n	801349c <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8013466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	441a      	add	r2, r3
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801347a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d106      	bne.n	801349c <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 801348e:	687a      	ldr	r2, [r7, #4]
 8013490:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8013494:	f043 0302 	orr.w	r3, r3, #2
 8013498:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80134a2:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 80134a4:	7bfb      	ldrb	r3, [r7, #15]
 80134a6:	2b0b      	cmp	r3, #11
 80134a8:	d864      	bhi.n	8013574 <prvTCPHandleState+0x238>
 80134aa:	a201      	add	r2, pc, #4	@ (adr r2, 80134b0 <prvTCPHandleState+0x174>)
 80134ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134b0:	08013575 	.word	0x08013575
 80134b4:	08013575 	.word	0x08013575
 80134b8:	08013543 	.word	0x08013543
 80134bc:	080134e1 	.word	0x080134e1
 80134c0:	08013543 	.word	0x08013543
 80134c4:	08013555 	.word	0x08013555
 80134c8:	08013565 	.word	0x08013565
 80134cc:	08013565 	.word	0x08013565
 80134d0:	08013575 	.word	0x08013575
 80134d4:	08013575 	.word	0x08013575
 80134d8:	08013565 	.word	0x08013565
 80134dc:	08013575 	.word	0x08013575
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80134e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fe4e 	bl	8014184 <prvSetSynAckOptions>
 80134e8:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 80134ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ec:	2212      	movs	r2, #18
 80134ee:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7f7 f873 	bl	800a5dc <uxIPHeaderSizeSocket>
 80134f6:	4602      	mov	r2, r0
 80134f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fa:	4413      	add	r3, r2
 80134fc:	3314      	adds	r3, #20
 80134fe:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013506:	b2db      	uxtb	r3, r3
 8013508:	3314      	adds	r3, #20
 801350a:	b2db      	uxtb	r3, r3
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	b2da      	uxtb	r2, r3
 8013510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013512:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8013514:	2104      	movs	r1, #4
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7fe fa10 	bl	801193c <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 801351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351e:	1c5a      	adds	r2, r3, #1
 8013520:	69fb      	ldr	r3, [r7, #28]
 8013522:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8013524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013526:	1c5a      	adds	r2, r3, #1
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	69db      	ldr	r3, [r3, #28]
 8013530:	1c5a      	adds	r2, r3, #1
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	69db      	ldr	r3, [r3, #28]
 801353a:	1c5a      	adds	r2, r3, #1
 801353c:	69fb      	ldr	r3, [r7, #28]
 801353e:	621a      	str	r2, [r3, #32]
                    break;
 8013540:	e019      	b.n	8013576 <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	6819      	ldr	r1, [r3, #0]
 8013546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013548:	697a      	ldr	r2, [r7, #20]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff fc3a 	bl	8012dc4 <prvHandleSynReceived>
 8013550:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013552:	e010      	b.n	8013576 <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8013554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	6839      	ldr	r1, [r7, #0]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f7ff fd80 	bl	8013060 <prvHandleEstablished>
 8013560:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013562:	e008      	b.n	8013576 <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	4619      	mov	r1, r3
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f7ff fb4c 	bl	8012c08 <prvTCPHandleFin>
 8013570:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013572:	e000      	b.n	8013576 <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8013574:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8013576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013578:	2b00      	cmp	r3, #0
 801357a:	dd06      	ble.n	801358a <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 801357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	6839      	ldr	r1, [r7, #0]
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f001 fa1a 	bl	80149bc <prvSendData>
 8013588:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 801358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801358c:	4618      	mov	r0, r3
 801358e:	373c      	adds	r7, #60	@ 0x3c
 8013590:	46bd      	mov	sp, r7
 8013592:	bd90      	pop	{r4, r7, pc}
 8013594:	08026f7c 	.word	0x08026f7c

08013598 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013598:	b580      	push	{r7, lr}
 801359a:	b084      	sub	sp, #16
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 80135a2:	2300      	movs	r3, #0
 80135a4:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80135a6:	6838      	ldr	r0, [r7, #0]
 80135a8:	f7f6 fffe 	bl	800a5a8 <uxIPHeaderSizePacket>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b14      	cmp	r3, #20
 80135b0:	d002      	beq.n	80135b8 <prvHandleListen+0x20>
 80135b2:	2b28      	cmp	r3, #40	@ 0x28
 80135b4:	d006      	beq.n	80135c4 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 80135b6:	e00b      	b.n	80135d0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 80135b8:	6839      	ldr	r1, [r7, #0]
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 f8ee 	bl	801379c <prvHandleListen_IPV4>
 80135c0:	60f8      	str	r0, [r7, #12]
                    break;
 80135c2:	e005      	b.n	80135d0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 80135c4:	6839      	ldr	r1, [r7, #0]
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 fa10 	bl	80139ec <prvHandleListen_IPV6>
 80135cc:	60f8      	str	r0, [r7, #12]
                    break;
 80135ce:	bf00      	nop
        }

        return pxNewSocket;
 80135d0:	68fb      	ldr	r3, [r7, #12]
    }
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}
	...

080135dc <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 80135dc:	b590      	push	{r4, r7, lr}
 80135de:	b08f      	sub	sp, #60	@ 0x3c
 80135e0:	af04      	add	r7, sp, #16
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	6a1a      	ldr	r2, [r3, #32]
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8013626:	683b      	ldr	r3, [r7, #0]
 8013628:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 801365e:	683b      	ldr	r3, [r7, #0]
 8013660:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801367a:	2b00      	cmp	r3, #0
 801367c:	d009      	beq.n	8013692 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801368a:	f043 0205 	orr.w	r2, r3, #5
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8013692:	f107 030c 	add.w	r3, r7, #12
 8013696:	4619      	mov	r1, r3
 8013698:	6838      	ldr	r0, [r7, #0]
 801369a:	f7fc fa47 	bl	800fb2c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80136a4:	f043 0304 	orr.w	r3, r3, #4
 80136a8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	683a      	ldr	r2, [r7, #0]
 80136b0:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136b8:	3301      	adds	r3, #1
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d102      	bne.n	80136d0 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80136d4:	4619      	mov	r1, r3
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136dc:	4618      	mov	r0, r3
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80136e4:	461c      	mov	r4, r3
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d101      	bne.n	80136f4 <prvTCPSocketCopy+0x118>
 80136f0:	4a17      	ldr	r2, [pc, #92]	@ (8013750 <prvTCPSocketCopy+0x174>)
 80136f2:	e000      	b.n	80136f6 <prvTCPSocketCopy+0x11a>
 80136f4:	4a17      	ldr	r2, [pc, #92]	@ (8013754 <prvTCPSocketCopy+0x178>)
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d002      	beq.n	8013702 <prvTCPSocketCopy+0x126>
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013700:	e000      	b.n	8013704 <prvTCPSocketCopy+0x128>
 8013702:	2300      	movs	r3, #0
 8013704:	9303      	str	r3, [sp, #12]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	9302      	str	r3, [sp, #8]
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	9301      	str	r3, [sp, #4]
 801370e:	9200      	str	r2, [sp, #0]
 8013710:	4623      	mov	r3, r4
 8013712:	4602      	mov	r2, r0
 8013714:	4810      	ldr	r0, [pc, #64]	@ (8013758 <prvTCPSocketCopy+0x17c>)
 8013716:	f00f f97f 	bl	8022a18 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801371a:	f107 010c 	add.w	r1, r7, #12
 801371e:	2301      	movs	r3, #1
 8013720:	2218      	movs	r2, #24
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f7fb fbae 	bl	800ee84 <vSocketBind>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d008      	beq.n	8013740 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 801372e:	480b      	ldr	r0, [pc, #44]	@ (801375c <prvTCPSocketCopy+0x180>)
 8013730:	f00f f972 	bl	8022a18 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7fb fc59 	bl	800efec <vSocketClose>
            xResult = pdFALSE;
 801373a:	2300      	movs	r3, #0
 801373c:	627b      	str	r3, [r7, #36]	@ 0x24
 801373e:	e001      	b.n	8013744 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8013740:	2301      	movs	r3, #1
 8013742:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8013744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8013746:	4618      	mov	r0, r3
 8013748:	372c      	adds	r7, #44	@ 0x2c
 801374a:	46bd      	mov	sp, r7
 801374c:	bd90      	pop	{r4, r7, pc}
 801374e:	bf00      	nop
 8013750:	08026fbc 	.word	0x08026fbc
 8013754:	08026fc0 	.word	0x08026fc0
 8013758:	08026fc4 	.word	0x08026fc4
 801375c:	08027008 	.word	0x08027008

08013760 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	db02      	blt.n	8013778 <FreeRTOS_GetTCPStateName+0x18>
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	2b0c      	cmp	r3, #12
 8013776:	dd04      	ble.n	8013782 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8013778:	230d      	movs	r3, #13
 801377a:	60fb      	str	r3, [r7, #12]
                xIndex--;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	3b01      	subs	r3, #1
 8013780:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8013782:	4a05      	ldr	r2, [pc, #20]	@ (8013798 <FreeRTOS_GetTCPStateName+0x38>)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 801378a:	4618      	mov	r0, r3
 801378c:	3714      	adds	r7, #20
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr
 8013796:	bf00      	nop
 8013798:	080282dc 	.word	0x080282dc

0801379c <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801379c:	b590      	push	{r4, r7, lr}
 801379e:	b08f      	sub	sp, #60	@ 0x3c
 80137a0:	af02      	add	r7, sp, #8
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 80137a6:	2300      	movs	r3, #0
 80137a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80137aa:	2300      	movs	r3, #0
 80137ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 80137ae:	2300      	movs	r3, #0
 80137b0:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 80137b2:	2300      	movs	r3, #0
 80137b4:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 80137b6:	2300      	movs	r3, #0
 80137b8:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d008      	beq.n	80137d2 <prvHandleListen_IPV4+0x36>
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d005      	beq.n	80137d2 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137d0:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 80137d2:	6a3b      	ldr	r3, [r7, #32]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d015      	beq.n	8013804 <prvHandleListen_IPV4+0x68>
 80137d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137da:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80137de:	6a3b      	ldr	r3, [r7, #32]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d10e      	bne.n	8013804 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80137e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137e8:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 80137f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80137fa:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80137fc:	f7ee f966 	bl	8001acc <ulApplicationGetNextSequenceNumber>
 8013800:	6278      	str	r0, [r7, #36]	@ 0x24
 8013802:	e001      	b.n	8013808 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8013804:	2300      	movs	r3, #0
 8013806:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8013808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801380a:	2b00      	cmp	r3, #0
 801380c:	d059      	beq.n	80138c2 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013814:	f003 0308 	and.w	r3, r3, #8
 8013818:	b2db      	uxtb	r3, r3
 801381a:	2b00      	cmp	r3, #0
 801381c:	d00c      	beq.n	8013838 <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013828:	f043 0304 	orr.w	r3, r3, #4
 801382c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013836:	e044      	b.n	80138c2 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8013838:	2300      	movs	r3, #0
 801383a:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013848:	429a      	cmp	r2, r3
 801384a:	d31b      	bcc.n	8013884 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013850:	4619      	mov	r1, r3
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013858:	461a      	mov	r2, r3
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013860:	4618      	mov	r0, r3
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013868:	2b01      	cmp	r3, #1
 801386a:	d101      	bne.n	8013870 <prvHandleListen_IPV4+0xd4>
 801386c:	4b5b      	ldr	r3, [pc, #364]	@ (80139dc <prvHandleListen_IPV4+0x240>)
 801386e:	e000      	b.n	8013872 <prvHandleListen_IPV4+0xd6>
 8013870:	4b5b      	ldr	r3, [pc, #364]	@ (80139e0 <prvHandleListen_IPV4+0x244>)
 8013872:	9300      	str	r3, [sp, #0]
 8013874:	4603      	mov	r3, r0
 8013876:	485b      	ldr	r0, [pc, #364]	@ (80139e4 <prvHandleListen_IPV4+0x248>)
 8013878:	f00f f8ce 	bl	8022a18 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 801387c:	6838      	ldr	r0, [r7, #0]
 801387e:	f001 f9d1 	bl	8014c24 <prvTCPSendReset>
 8013882:	e01e      	b.n	80138c2 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013884:	2206      	movs	r2, #6
 8013886:	2101      	movs	r1, #1
 8013888:	2002      	movs	r0, #2
 801388a:	f7fa ffa1 	bl	800e7d0 <FreeRTOS_socket>
 801388e:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d003      	beq.n	801389e <prvHandleListen_IPV4+0x102>
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389c:	d106      	bne.n	80138ac <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 801389e:	4852      	ldr	r0, [pc, #328]	@ (80139e8 <prvHandleListen_IPV4+0x24c>)
 80138a0:	f00f f8ba 	bl	8022a18 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80138a4:	6838      	ldr	r0, [r7, #0]
 80138a6:	f001 f9bd 	bl	8014c24 <prvTCPSendReset>
 80138aa:	e00a      	b.n	80138c2 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80138ac:	6879      	ldr	r1, [r7, #4]
 80138ae:	6978      	ldr	r0, [r7, #20]
 80138b0:	f7ff fe94 	bl	80135dc <prvTCPSocketCopy>
 80138b4:	4603      	mov	r3, r0
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d003      	beq.n	80138c2 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80138be:	2301      	movs	r3, #1
 80138c0:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 80138c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f000 8083 	beq.w	80139d0 <prvHandleListen_IPV4+0x234>
 80138ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d07f      	beq.n	80139d0 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80138d4:	6838      	ldr	r0, [r7, #0]
 80138d6:	f7f6 fe67 	bl	800a5a8 <uxIPHeaderSizePacket>
 80138da:	4603      	mov	r3, r0
 80138dc:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80138de:	4423      	add	r3, r4
 80138e0:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 80138ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138ec:	7a13      	ldrb	r3, [r2, #8]
 80138ee:	f36f 0300 	bfc	r3, #0, #1
 80138f2:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80138f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	021b      	lsls	r3, r3, #8
 80138fc:	b21a      	sxth	r2, r3
 80138fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013900:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013902:	b29b      	uxth	r3, r3
 8013904:	0a1b      	lsrs	r3, r3, #8
 8013906:	b29b      	uxth	r3, r3
 8013908:	b21b      	sxth	r3, r3
 801390a:	4313      	orrs	r3, r2
 801390c:	b21b      	sxth	r3, r3
 801390e:	b29a      	uxth	r2, r3
 8013910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013912:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8013916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013918:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801391c:	061a      	lsls	r2, r3, #24
 801391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013920:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013924:	021b      	lsls	r3, r3, #8
 8013926:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801392a:	431a      	orrs	r2, r3
 801392c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013932:	0a1b      	lsrs	r3, r3, #8
 8013934:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013938:	431a      	orrs	r2, r3
 801393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801393c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013940:	0e1b      	lsrs	r3, r3, #24
 8013942:	431a      	orrs	r2, r3
 8013944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013946:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801394c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	061a      	lsls	r2, r3, #24
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	021b      	lsls	r3, r3, #8
 801395c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013960:	431a      	orrs	r2, r3
 8013962:	693b      	ldr	r3, [r7, #16]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	0a1b      	lsrs	r3, r3, #8
 8013968:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801396c:	431a      	orrs	r2, r3
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	0e1b      	lsrs	r3, r3, #24
 8013974:	431a      	orrs	r2, r3
 8013976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013978:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 801397c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801397e:	f002 f877 	bl	8015a70 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013984:	f000 fb66 	bl	8014054 <prvTCPCreateWindow>
 8013988:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2b01      	cmp	r3, #1
 801398e:	d008      	beq.n	80139a2 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	2b01      	cmp	r3, #1
 8013994:	d102      	bne.n	801399c <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8013996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013998:	f7fb fb28 	bl	800efec <vSocketClose>
                }

                pxReturn = NULL;
 801399c:	2300      	movs	r3, #0
 801399e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80139a0:	e016      	b.n	80139d0 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80139a2:	2103      	movs	r1, #3
 80139a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139a6:	f7fd ffc9 	bl	801193c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80139b0:	d902      	bls.n	80139b8 <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80139b2:	235a      	movs	r3, #90	@ 0x5a
 80139b4:	61bb      	str	r3, [r7, #24]
 80139b6:	e002      	b.n	80139be <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139bc:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80139be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139c0:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80139c8:	69ba      	ldr	r2, [r7, #24]
 80139ca:	4619      	mov	r1, r3
 80139cc:	f00f fa40 	bl	8022e50 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80139d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3734      	adds	r7, #52	@ 0x34
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd90      	pop	{r4, r7, pc}
 80139da:	bf00      	nop
 80139dc:	080270b0 	.word	0x080270b0
 80139e0:	080270b4 	.word	0x080270b4
 80139e4:	080270b8 	.word	0x080270b8
 80139e8:	080270e8 	.word	0x080270e8

080139ec <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80139ec:	b590      	push	{r4, r7, lr}
 80139ee:	b08f      	sub	sp, #60	@ 0x3c
 80139f0:	af02      	add	r7, sp, #8
 80139f2:	6078      	str	r0, [r7, #4]
 80139f4:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80139f6:	2300      	movs	r3, #0
 80139f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8013a02:	2300      	movs	r3, #0
 8013a04:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8013a06:	2300      	movs	r3, #0
 8013a08:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d024      	beq.n	8013a5a <prvHandleListen_IPV6+0x6e>
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d021      	beq.n	8013a5a <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d103      	bne.n	8013a2c <prvHandleListen_IPV6+0x40>
 8013a24:	215d      	movs	r1, #93	@ 0x5d
 8013a26:	487b      	ldr	r0, [pc, #492]	@ (8013c14 <prvHandleListen_IPV6+0x228>)
 8013a28:	f7ee f830 	bl	8001a8c <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8013a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a2e:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a36:	3338      	adds	r3, #56	@ 0x38
 8013a38:	2210      	movs	r2, #16
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	f010 f9cb 	bl	8023dd6 <memcmp>
 8013a40:	4603      	mov	r3, r0
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d109      	bne.n	8013a5a <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8013a46:	f107 0308 	add.w	r3, r7, #8
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7ee f8f2 	bl	8001c34 <xApplicationGetRandomNumber>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d101      	bne.n	8013a5a <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8013a56:	2301      	movs	r3, #1
 8013a58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d059      	beq.n	8013b14 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013a66:	f003 0308 	and.w	r3, r3, #8
 8013a6a:	b2db      	uxtb	r3, r3
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d00c      	beq.n	8013a8a <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013a7a:	f043 0304 	orr.w	r3, r3, #4
 8013a7e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013a88:	e044      	b.n	8013b14 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d31b      	bcc.n	8013ad6 <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013aa2:	4619      	mov	r1, r3
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013aaa:	461a      	mov	r2, r3
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d101      	bne.n	8013ac2 <prvHandleListen_IPV6+0xd6>
 8013abe:	4b56      	ldr	r3, [pc, #344]	@ (8013c18 <prvHandleListen_IPV6+0x22c>)
 8013ac0:	e000      	b.n	8013ac4 <prvHandleListen_IPV6+0xd8>
 8013ac2:	4b56      	ldr	r3, [pc, #344]	@ (8013c1c <prvHandleListen_IPV6+0x230>)
 8013ac4:	9300      	str	r3, [sp, #0]
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	4855      	ldr	r0, [pc, #340]	@ (8013c20 <prvHandleListen_IPV6+0x234>)
 8013aca:	f00e ffa5 	bl	8022a18 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013ace:	6838      	ldr	r0, [r7, #0]
 8013ad0:	f001 f8a8 	bl	8014c24 <prvTCPSendReset>
 8013ad4:	e01e      	b.n	8013b14 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013ad6:	2206      	movs	r2, #6
 8013ad8:	2101      	movs	r1, #1
 8013ada:	200a      	movs	r0, #10
 8013adc:	f7fa fe78 	bl	800e7d0 <FreeRTOS_socket>
 8013ae0:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d003      	beq.n	8013af0 <prvHandleListen_IPV6+0x104>
 8013ae8:	69bb      	ldr	r3, [r7, #24]
 8013aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aee:	d106      	bne.n	8013afe <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8013af0:	484c      	ldr	r0, [pc, #304]	@ (8013c24 <prvHandleListen_IPV6+0x238>)
 8013af2:	f00e ff91 	bl	8022a18 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013af6:	6838      	ldr	r0, [r7, #0]
 8013af8:	f001 f894 	bl	8014c24 <prvTCPSendReset>
 8013afc:	e00a      	b.n	8013b14 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	69b8      	ldr	r0, [r7, #24]
 8013b02:	f7ff fd6b 	bl	80135dc <prvTCPSocketCopy>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d003      	beq.n	8013b14 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013b10:	2301      	movs	r3, #1
 8013b12:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d076      	beq.n	8013c08 <prvHandleListen_IPV6+0x21c>
 8013b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d073      	beq.n	8013c08 <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013b24:	6838      	ldr	r0, [r7, #0]
 8013b26:	f7f6 fd3f 	bl	800a5a8 <uxIPHeaderSizePacket>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8013b2e:	4423      	add	r3, r4
 8013b30:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013b32:	683b      	ldr	r3, [r7, #0]
 8013b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b38:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 8013b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b3c:	7a13      	ldrb	r3, [r2, #8]
 8013b3e:	f043 0301 	orr.w	r3, r3, #1
 8013b42:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b48:	330e      	adds	r3, #14
 8013b4a:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8013b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	021b      	lsls	r3, r3, #8
 8013b54:	b21a      	sxth	r2, r3
 8013b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	0a1b      	lsrs	r3, r3, #8
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	b21b      	sxth	r3, r3
 8013b62:	4313      	orrs	r3, r2
 8013b64:	b21b      	sxth	r3, r3
 8013b66:	b29a      	uxth	r2, r3
 8013b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b6a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b70:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013b74:	693b      	ldr	r3, [r7, #16]
 8013b76:	3308      	adds	r3, #8
 8013b78:	2210      	movs	r2, #16
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	f00f f968 	bl	8022e50 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b84:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	061a      	lsls	r2, r3, #24
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	685b      	ldr	r3, [r3, #4]
 8013b92:	021b      	lsls	r3, r3, #8
 8013b94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013b98:	431a      	orrs	r2, r3
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	0a1b      	lsrs	r3, r3, #8
 8013ba0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013ba4:	431a      	orrs	r2, r3
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	0e1b      	lsrs	r3, r3, #24
 8013bac:	431a      	orrs	r2, r3
 8013bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8013bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bb6:	f001 ff5b 	bl	8015a70 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bbc:	f000 fa4a 	bl	8014054 <prvTCPCreateWindow>
 8013bc0:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2b01      	cmp	r3, #1
 8013bc6:	d008      	beq.n	8013bda <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013bc8:	6a3b      	ldr	r3, [r7, #32]
 8013bca:	2b01      	cmp	r3, #1
 8013bcc:	d102      	bne.n	8013bd4 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8013bce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bd0:	f7fb fa0c 	bl	800efec <vSocketClose>
                }

                pxReturn = NULL;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8013bd8:	e016      	b.n	8013c08 <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8013bda:	2103      	movs	r1, #3
 8013bdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013bde:	f7fd fead 	bl	801193c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013be6:	2b5a      	cmp	r3, #90	@ 0x5a
 8013be8:	d902      	bls.n	8013bf0 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8013bea:	235a      	movs	r3, #90	@ 0x5a
 8013bec:	61fb      	str	r3, [r7, #28]
 8013bee:	e002      	b.n	8013bf6 <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bf4:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf8:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013c00:	69fa      	ldr	r2, [r7, #28]
 8013c02:	4619      	mov	r1, r3
 8013c04:	f00f f924 	bl	8022e50 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	3734      	adds	r7, #52	@ 0x34
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	bd90      	pop	{r4, r7, pc}
 8013c12:	bf00      	nop
 8013c14:	08027108 	.word	0x08027108
 8013c18:	08027148 	.word	0x08027148
 8013c1c:	0802714c 	.word	0x0802714c
 8013c20:	08027150 	.word	0x08027150
 8013c24:	08027180 	.word	0x08027180

08013c28 <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013c30:	2301      	movs	r3, #1
 8013c32:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013c3a:	f003 0308 	and.w	r3, r3, #8
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d107      	bne.n	8013c54 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 fa51 	bl	80140ec <prvTCPPrepareConnect>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d001      	beq.n	8013c54 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013c50:	2300      	movs	r3, #0
 8013c52:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013c54:	68fb      	ldr	r3, [r7, #12]
    }
 8013c56:	4618      	mov	r0, r3
 8013c58:	3710      	adds	r7, #16
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
	...

08013c60 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b088      	sub	sp, #32
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013c76:	2b02      	cmp	r3, #2
 8013c78:	d010      	beq.n	8013c9c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013c7e:	f107 030c 	add.w	r3, r7, #12
 8013c82:	4619      	mov	r1, r3
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f000 f859 	bl	8013d3c <prvTCPSendRepeated>
 8013c8a:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d04d      	beq.n	8013d2e <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	4618      	mov	r0, r3
 8013c96:	f003 ffb5 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
 8013c9a:	e048      	b.n	8013d2e <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013ca2:	2b02      	cmp	r3, #2
 8013ca4:	d90d      	bls.n	8013cc2 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	4821      	ldr	r0, [pc, #132]	@ (8013d38 <prvTCPSendPacket+0xd8>)
 8013cb4:	f00e feb0 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013cb8:	2108      	movs	r1, #8
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7fd fe3e 	bl	801193c <vTCPStateChange>
 8013cc0:	e035      	b.n	8013d2e <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7ff ffb0 	bl	8013c28 <prvTCPMakeSurePrepared>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d12f      	bne.n	8013d2e <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f6 fc84 	bl	800a5dc <uxIPHeaderSizeSocket>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	330e      	adds	r3, #14
 8013cd8:	33a0      	adds	r3, #160	@ 0xa0
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	4413      	add	r3, r2
 8013cde:	330a      	adds	r3, #10
 8013ce0:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	4619      	mov	r1, r3
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fa4c 	bl	8014184 <prvSetSynAckOptions>
 8013cec:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013cee:	6878      	ldr	r0, [r7, #4]
 8013cf0:	f7f6 fc74 	bl	800a5dc <uxIPHeaderSizeSocket>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	4413      	add	r3, r2
 8013cfa:	3314      	adds	r3, #20
 8013cfc:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	3314      	adds	r3, #20
 8013d08:	b2db      	uxtb	r3, r3
 8013d0a:	009b      	lsls	r3, r3, #2
 8013d0c:	b2da      	uxtb	r2, r3
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013d18:	3301      	adds	r3, #1
 8013d1a:	b2da      	uxtb	r2, r3
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013d22:	69fa      	ldr	r2, [r7, #28]
 8013d24:	2300      	movs	r3, #0
 8013d26:	2100      	movs	r1, #0
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f000 f837 	bl	8013d9c <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013d2e:	69fb      	ldr	r3, [r7, #28]
    }
 8013d30:	4618      	mov	r0, r3
 8013d32:	3720      	adds	r7, #32
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}
 8013d38:	080271a0 	.word	0x080271a0

08013d3c <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b086      	sub	sp, #24
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013d4e:	2300      	movs	r3, #0
 8013d50:	617b      	str	r3, [r7, #20]
 8013d52:	e019      	b.n	8013d88 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013d54:	68fa      	ldr	r2, [r7, #12]
 8013d56:	6839      	ldr	r1, [r7, #0]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f000 fb7d 	bl	8014458 <prvTCPPrepareSend>
 8013d5e:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013d60:	68bb      	ldr	r3, [r7, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	dd14      	ble.n	8013d90 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	6819      	ldr	r1, [r3, #0]
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f000 f814 	bl	8013d9c <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	2200      	movs	r2, #0
 8013d78:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8013d7a:	693a      	ldr	r2, [r7, #16]
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	4413      	add	r3, r2
 8013d80:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	3301      	adds	r3, #1
 8013d86:	617b      	str	r3, [r7, #20]
 8013d88:	697b      	ldr	r3, [r7, #20]
 8013d8a:	2b07      	cmp	r3, #7
 8013d8c:	d9e2      	bls.n	8013d54 <prvTCPSendRepeated+0x18>
 8013d8e:	e000      	b.n	8013d92 <prvTCPSendRepeated+0x56>
                break;
 8013d90:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013d92:	693b      	ldr	r3, [r7, #16]
    }
 8013d94:	4618      	mov	r0, r3
 8013d96:	3718      	adds	r7, #24
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013dae:	2300      	movs	r3, #0
 8013db0:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d008      	beq.n	8013dca <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8013db8:	6938      	ldr	r0, [r7, #16]
 8013dba:	f7f6 fbf5 	bl	800a5a8 <uxIPHeaderSizePacket>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	2b28      	cmp	r3, #40	@ 0x28
 8013dc2:	d113      	bne.n	8013dec <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	617b      	str	r3, [r7, #20]
 8013dc8:	e010      	b.n	8013dec <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d008      	beq.n	8013de2 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013dd0:	68f8      	ldr	r0, [r7, #12]
 8013dd2:	f7f6 fc03 	bl	800a5dc <uxIPHeaderSizeSocket>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b28      	cmp	r3, #40	@ 0x28
 8013dda:	d107      	bne.n	8013dec <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013ddc:	2301      	movs	r3, #1
 8013dde:	617b      	str	r3, [r7, #20]
 8013de0:	e004      	b.n	8013dec <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013de2:	f240 1119 	movw	r1, #281	@ 0x119
 8013de6:	480c      	ldr	r0, [pc, #48]	@ (8013e18 <prvTCPReturnPacket+0x7c>)
 8013de8:	f7ed fe50 	bl	8001a8c <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d105      	bne.n	8013dfe <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	68b9      	ldr	r1, [r7, #8]
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f001 fa61 	bl	80152c0 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013dfe:	697b      	ldr	r3, [r7, #20]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d105      	bne.n	8013e10 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	687a      	ldr	r2, [r7, #4]
 8013e08:	68b9      	ldr	r1, [r7, #8]
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	f000 ff18 	bl	8014c40 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013e10:	bf00      	nop
 8013e12:	3718      	adds	r7, #24
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	080271bc 	.word	0x080271bc

08013e1c <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	@ 0x28
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013e2e:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013e38:	4413      	add	r3, r2
 8013e3a:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d007      	beq.n	8013e56 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	f7fd fa9f 	bl	8011390 <uxStreamBufferFrontSpace>
 8013e52:	6278      	str	r0, [r7, #36]	@ 0x24
 8013e54:	e003      	b.n	8013e5e <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013e5e:	69bb      	ldr	r3, [r7, #24]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7f7 f8ed 	bl	800b044 <FreeRTOS_min_uint32>
 8013e6a:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013e72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d107      	bne.n	8013e8c <prvTCPReturn_CheckTCPWindow+0x70>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013e82:	f003 0304 	and.w	r3, r3, #4
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d001      	beq.n	8013e90 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013e96:	461a      	mov	r2, r3
 8013e98:	6a3b      	ldr	r3, [r7, #32]
 8013e9a:	4293      	cmp	r3, r2
 8013e9c:	d20a      	bcs.n	8013eb4 <prvTCPReturn_CheckTCPWindow+0x98>
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d303      	bcc.n	8013eb4 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013eb2:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8013eba:	461a      	mov	r2, r3
 8013ebc:	6a3b      	ldr	r3, [r7, #32]
 8013ebe:	40d3      	lsrs	r3, r2
 8013ec0:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d902      	bls.n	8013ed2 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013ecc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013ed0:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	021b      	lsls	r3, r3, #8
 8013ed8:	b21a      	sxth	r2, r3
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	b29b      	uxth	r3, r3
 8013ede:	0a1b      	lsrs	r3, r3, #8
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	b21b      	sxth	r3, r3
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	b21b      	sxth	r3, r3
 8013ee8:	b29a      	uxth	r2, r3
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013eee:	68fa      	ldr	r2, [r7, #12]
 8013ef0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013ef4:	f36f 0300 	bfc	r3, #0, #1
 8013ef8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013efc:	69bb      	ldr	r3, [r7, #24]
 8013efe:	691a      	ldr	r2, [r3, #16]
 8013f00:	6a3b      	ldr	r3, [r7, #32]
 8013f02:	441a      	add	r2, r3
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8013f08:	bf00      	nop
 8013f0a:	3728      	adds	r7, #40	@ 0x28
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b088      	sub	sp, #32
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
 8013f1c:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013f24:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013f2e:	4413      	add	r3, r2
 8013f30:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013f38:	f003 0302 	and.w	r3, r3, #2
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d029      	beq.n	8013f96 <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013f48:	f36f 0341 	bfc	r3, #1, #1
 8013f4c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013f50:	68fa      	ldr	r2, [r7, #12]
 8013f52:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013f56:	f043 0304 	orr.w	r3, r3, #4
 8013f5a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013f64:	1e5a      	subs	r2, r3, #1
 8013f66:	69bb      	ldr	r3, [r7, #24]
 8013f68:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	685b      	ldr	r3, [r3, #4]
 8013f6e:	061a      	lsls	r2, r3, #24
 8013f70:	69bb      	ldr	r3, [r7, #24]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	021b      	lsls	r3, r3, #8
 8013f76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013f7a:	431a      	orrs	r2, r3
 8013f7c:	69bb      	ldr	r3, [r7, #24]
 8013f7e:	685b      	ldr	r3, [r3, #4]
 8013f80:	0a1b      	lsrs	r3, r3, #8
 8013f82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013f86:	431a      	orrs	r2, r3
 8013f88:	69bb      	ldr	r3, [r7, #24]
 8013f8a:	685b      	ldr	r3, [r3, #4]
 8013f8c:	0e1b      	lsrs	r3, r3, #24
 8013f8e:	431a      	orrs	r2, r3
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	605a      	str	r2, [r3, #4]
 8013f94:	e043      	b.n	801401e <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013f9c:	061a      	lsls	r2, r3, #24
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013fa4:	021b      	lsls	r3, r3, #8
 8013fa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013faa:	431a      	orrs	r2, r3
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013fb2:	0a1b      	lsrs	r3, r3, #8
 8013fb4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013fb8:	431a      	orrs	r2, r3
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013fc0:	0e1b      	lsrs	r3, r3, #24
 8013fc2:	431a      	orrs	r2, r3
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	7b5b      	ldrb	r3, [r3, #13]
 8013fcc:	f003 0301 	and.w	r3, r3, #1
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d024      	beq.n	801401e <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013fd4:	68f8      	ldr	r0, [r7, #12]
 8013fd6:	f7f6 fb01 	bl	800a5dc <uxIPHeaderSizeSocket>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	3b14      	subs	r3, #20
 8013fe2:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013fe4:	69fb      	ldr	r3, [r7, #28]
 8013fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	441a      	add	r2, r3
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d014      	beq.n	801401e <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	7b5b      	ldrb	r3, [r3, #13]
 8013ff8:	f023 0301 	bic.w	r3, r3, #1
 8013ffc:	b2da      	uxtb	r2, r3
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8014002:	69fb      	ldr	r3, [r7, #28]
 8014004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014006:	69fb      	ldr	r3, [r7, #28]
 8014008:	69db      	ldr	r3, [r3, #28]
 801400a:	1ad1      	subs	r1, r2, r3
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	69db      	ldr	r3, [r3, #28]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	697a      	ldr	r2, [r7, #20]
 8014018:	480d      	ldr	r0, [pc, #52]	@ (8014050 <prvTCPReturn_SetSequenceNumber+0x140>)
 801401a:	f00e fcfd 	bl	8022a18 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 801401e:	69fb      	ldr	r3, [r7, #28]
 8014020:	691b      	ldr	r3, [r3, #16]
 8014022:	061a      	lsls	r2, r3, #24
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	021b      	lsls	r3, r3, #8
 801402a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801402e:	431a      	orrs	r2, r3
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	691b      	ldr	r3, [r3, #16]
 8014034:	0a1b      	lsrs	r3, r3, #8
 8014036:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801403a:	431a      	orrs	r2, r3
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	691b      	ldr	r3, [r3, #16]
 8014040:	0e1b      	lsrs	r3, r3, #24
 8014042:	431a      	orrs	r2, r3
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	609a      	str	r2, [r3, #8]
    }
 8014048:	bf00      	nop
 801404a:	3720      	adds	r7, #32
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	080271f8 	.word	0x080271f8

08014054 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8014054:	b5b0      	push	{r4, r5, r7, lr}
 8014056:	b088      	sub	sp, #32
 8014058:	af02      	add	r7, sp, #8
 801405a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014062:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801406a:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 801406c:	4b1d      	ldr	r3, [pc, #116]	@ (80140e4 <prvTCPCreateWindow+0x90>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d014      	beq.n	801409e <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801407a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801407e:	fb02 f103 	mul.w	r1, r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014094:	9300      	str	r3, [sp, #0]
 8014096:	4603      	mov	r3, r0
 8014098:	4813      	ldr	r0, [pc, #76]	@ (80140e8 <prvTCPCreateWindow+0x94>)
 801409a:	f00e fcbd 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80140aa:	fb02 f103 	mul.w	r1, r2, r3
 80140ae:	693b      	ldr	r3, [r7, #16]
 80140b0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80140b4:	fb02 f403 	mul.w	r4, r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 80140c4:	687a      	ldr	r2, [r7, #4]
 80140c6:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 80140ca:	9201      	str	r2, [sp, #4]
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	462b      	mov	r3, r5
 80140d0:	4622      	mov	r2, r4
 80140d2:	f001 ffd7 	bl	8016084 <xTCPWindowCreate>
 80140d6:	60f8      	str	r0, [r7, #12]

        return xReturn;
 80140d8:	68fb      	ldr	r3, [r7, #12]
    }
 80140da:	4618      	mov	r0, r3
 80140dc:	3718      	adds	r7, #24
 80140de:	46bd      	mov	sp, r7
 80140e0:	bdb0      	pop	{r4, r5, r7, pc}
 80140e2:	bf00      	nop
 80140e4:	20001664 	.word	0x20001664
 80140e8:	08027218 	.word	0x08027218

080140ec <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80140f4:	2301      	movs	r3, #1
 80140f6:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	7a1b      	ldrb	r3, [r3, #8]
 80140fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014100:	b2db      	uxtb	r3, r3
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <prvTCPPrepareConnect+0x20>
 8014106:	2b01      	cmp	r3, #1
 8014108:	d005      	beq.n	8014116 <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801410a:	e009      	b.n	8014120 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f000 ff69 	bl	8014fe4 <prvTCPPrepareConnect_IPV4>
 8014112:	60f8      	str	r0, [r7, #12]
                    break;
 8014114:	e004      	b.n	8014120 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	f001 fab4 	bl	8015684 <prvTCPPrepareConnect_IPV6>
 801411c:	60f8      	str	r0, [r7, #12]
                    break;
 801411e:	bf00      	nop
        }

        return xReturn;
 8014120:	68fb      	ldr	r3, [r7, #12]
    }
 8014122:	4618      	mov	r0, r3
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
	...

0801412c <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 801412c:	b580      	push	{r7, lr}
 801412e:	b084      	sub	sp, #16
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8014140:	fb02 f303 	mul.w	r3, r2, r3
 8014144:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8014146:	2300      	movs	r3, #0
 8014148:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 801414a:	e005      	b.n	8014158 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	085b      	lsrs	r3, r3, #1
 8014150:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8014152:	7afb      	ldrb	r3, [r7, #11]
 8014154:	3301      	adds	r3, #1
 8014156:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801415e:	d2f5      	bcs.n	801414c <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801416c:	461a      	mov	r2, r3
 801416e:	7afb      	ldrb	r3, [r7, #11]
 8014170:	4803      	ldr	r0, [pc, #12]	@ (8014180 <prvWinScaleFactor+0x54>)
 8014172:	f00e fc51 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8014176:	7afb      	ldrb	r3, [r7, #11]
        }
 8014178:	4618      	mov	r0, r3
 801417a:	3710      	adds	r7, #16
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	08027250 	.word	0x08027250

08014184 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
 801418c:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014194:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2202      	movs	r2, #2
 801419a:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	2204      	movs	r2, #4
 80141a0:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80141a2:	89fb      	ldrh	r3, [r7, #14]
 80141a4:	0a1b      	lsrs	r3, r3, #8
 80141a6:	b29b      	uxth	r3, r3
 80141a8:	b2da      	uxtb	r2, r3
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 80141ae:	89fb      	ldrh	r3, [r7, #14]
 80141b0:	b2da      	uxtb	r2, r3
 80141b2:	683b      	ldr	r3, [r7, #0]
 80141b4:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7ff ffb8 	bl	801412c <prvWinScaleFactor>
 80141bc:	4603      	mov	r3, r0
 80141be:	461a      	mov	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	2201      	movs	r2, #1
 80141ca:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	2203      	movs	r2, #3
 80141d0:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	2203      	movs	r2, #3
 80141d6:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 80141e2:	2308      	movs	r3, #8
 80141e4:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 80141e6:	683a      	ldr	r2, [r7, #0]
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	4413      	add	r3, r2
 80141ec:	3314      	adds	r3, #20
 80141ee:	2201      	movs	r2, #1
 80141f0:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	3301      	adds	r3, #1
 80141f6:	683a      	ldr	r2, [r7, #0]
 80141f8:	4413      	add	r3, r2
 80141fa:	2201      	movs	r2, #1
 80141fc:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	3302      	adds	r3, #2
 8014202:	683a      	ldr	r2, [r7, #0]
 8014204:	4413      	add	r3, r2
 8014206:	2204      	movs	r2, #4
 8014208:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	3303      	adds	r3, #3
 801420e:	683a      	ldr	r2, [r7, #0]
 8014210:	4413      	add	r3, r2
 8014212:	2202      	movs	r2, #2
 8014214:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	3304      	adds	r3, #4
 801421a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 801421c:	68bb      	ldr	r3, [r7, #8]
    }
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
	...

08014228 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8014228:	b580      	push	{r7, lr}
 801422a:	b088      	sub	sp, #32
 801422c:	af00      	add	r7, sp, #0
 801422e:	60f8      	str	r0, [r7, #12]
 8014230:	60b9      	str	r1, [r7, #8]
 8014232:	607a      	str	r2, [r7, #4]
 8014234:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8014236:	4b38      	ldr	r3, [pc, #224]	@ (8014318 <prvTCPBufferResize+0xf0>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00b      	beq.n	8014256 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 801423e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8014242:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801424a:	2301      	movs	r3, #1
 801424c:	617b      	str	r3, [r7, #20]
 801424e:	e020      	b.n	8014292 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8014250:	2300      	movs	r3, #0
 8014252:	617b      	str	r3, [r7, #20]
 8014254:	e01d      	b.n	8014292 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8014256:	68f8      	ldr	r0, [r7, #12]
 8014258:	f7f6 f9c0 	bl	800a5dc <uxIPHeaderSizeSocket>
 801425c:	4602      	mov	r2, r0
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	4413      	add	r3, r2
 8014262:	3322      	adds	r3, #34	@ 0x22
 8014264:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	69ba      	ldr	r2, [r7, #24]
 801426a:	4413      	add	r3, r2
 801426c:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 801426e:	69bb      	ldr	r3, [r7, #24]
 8014270:	2b59      	cmp	r3, #89	@ 0x59
 8014272:	d801      	bhi.n	8014278 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014274:	235a      	movs	r3, #90	@ 0x5a
 8014276:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d004      	beq.n	8014288 <prvTCPBufferResize+0x60>
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014282:	69ba      	ldr	r2, [r7, #24]
 8014284:	429a      	cmp	r2, r3
 8014286:	d902      	bls.n	801428e <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	617b      	str	r3, [r7, #20]
 801428c:	e001      	b.n	8014292 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 801428e:	2300      	movs	r3, #0
 8014290:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d023      	beq.n	80142e0 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8014298:	2100      	movs	r1, #0
 801429a:	69b8      	ldr	r0, [r7, #24]
 801429c:	f003 fc4a 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 80142a0:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d031      	beq.n	801430c <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80142a8:	69fb      	ldr	r3, [r7, #28]
 80142aa:	69ba      	ldr	r2, [r7, #24]
 80142ac:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d00c      	beq.n	80142ce <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142c0:	461a      	mov	r2, r3
 80142c2:	f00e fdc5 	bl	8022e50 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80142c6:	68b8      	ldr	r0, [r7, #8]
 80142c8:	f003 fc9c 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
 80142cc:	e01e      	b.n	801430c <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	33aa      	adds	r3, #170	@ 0xaa
 80142d6:	225a      	movs	r2, #90	@ 0x5a
 80142d8:	4619      	mov	r1, r3
 80142da:	f00e fdb9 	bl	8022e50 <memcpy>
 80142de:	e015      	b.n	801430c <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d104      	bne.n	80142f0 <prvTCPBufferResize+0xc8>
 80142e6:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80142ea:	480c      	ldr	r0, [pc, #48]	@ (801431c <prvTCPBufferResize+0xf4>)
 80142ec:	f7ed fbce 	bl	8001a8c <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 80142f4:	68f8      	ldr	r0, [r7, #12]
 80142f6:	f7f6 f971 	bl	800a5dc <uxIPHeaderSizeSocket>
 80142fa:	4602      	mov	r2, r0
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	441a      	add	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	4413      	add	r3, r2
 8014304:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 801430c:	69fb      	ldr	r3, [r7, #28]
    }
 801430e:	4618      	mov	r0, r3
 8014310:	3720      	adds	r7, #32
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	08028328 	.word	0x08028328
 801431c:	080271bc 	.word	0x080271bc

08014320 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8014320:	b580      	push	{r7, lr}
 8014322:	b086      	sub	sp, #24
 8014324:	af00      	add	r7, sp, #0
 8014326:	60f8      	str	r0, [r7, #12]
 8014328:	60b9      	str	r1, [r7, #8]
 801432a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 801432c:	2300      	movs	r3, #0
 801432e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8014330:	2300      	movs	r3, #0
 8014332:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d008      	beq.n	801434c <prvTCPReturn_SetEndPoint+0x2c>
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801433e:	2b00      	cmp	r3, #0
 8014340:	d004      	beq.n	801434c <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801434a:	e078      	b.n	801443e <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 801434c:	483e      	ldr	r0, [pc, #248]	@ (8014448 <prvTCPReturn_SetEndPoint+0x128>)
 801434e:	f00e fb63 	bl	8022a18 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	2b14      	cmp	r3, #20
 8014356:	d003      	beq.n	8014360 <prvTCPReturn_SetEndPoint+0x40>
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2b28      	cmp	r3, #40	@ 0x28
 801435c:	d03d      	beq.n	80143da <prvTCPReturn_SetEndPoint+0xba>
 801435e:	e056      	b.n	801440e <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014364:	330e      	adds	r3, #14
 8014366:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	691b      	ldr	r3, [r3, #16]
 801436c:	2108      	movs	r1, #8
 801436e:	4618      	mov	r0, r3
 8014370:	f7f9 fd8a 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8014374:	4602      	mov	r2, r0
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801437e:	2b00      	cmp	r3, #0
 8014380:	d149      	bne.n	8014416 <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	68db      	ldr	r3, [r3, #12]
 8014386:	061a      	lsls	r2, r3, #24
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	68db      	ldr	r3, [r3, #12]
 801438c:	021b      	lsls	r3, r3, #8
 801438e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014392:	431a      	orrs	r2, r3
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	0a1b      	lsrs	r3, r3, #8
 801439a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801439e:	431a      	orrs	r2, r3
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	0e1b      	lsrs	r3, r3, #24
 80143a6:	ea42 0103 	orr.w	r1, r2, r3
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	691b      	ldr	r3, [r3, #16]
 80143ae:	061a      	lsls	r2, r3, #24
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	021b      	lsls	r3, r3, #8
 80143b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80143ba:	431a      	orrs	r2, r3
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	691b      	ldr	r3, [r3, #16]
 80143c0:	0a1b      	lsrs	r3, r3, #8
 80143c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80143c6:	431a      	orrs	r2, r3
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	691b      	ldr	r3, [r3, #16]
 80143cc:	0e1b      	lsrs	r3, r3, #24
 80143ce:	4313      	orrs	r3, r2
 80143d0:	461a      	mov	r2, r3
 80143d2:	481e      	ldr	r0, [pc, #120]	@ (801444c <prvTCPReturn_SetEndPoint+0x12c>)
 80143d4:	f00e fb20 	bl	8022a18 <lUDPLoggingPrintf>
                        break;
 80143d8:	e01d      	b.n	8014416 <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143de:	330e      	adds	r3, #14
 80143e0:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	3318      	adds	r3, #24
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7f9 fd08 	bl	800ddfc <FreeRTOS_FindEndPointOnIP_IPv6>
 80143ec:	4602      	mov	r2, r0
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d10f      	bne.n	801441a <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	f103 0108 	add.w	r1, r3, #8
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	3318      	adds	r3, #24
 8014404:	461a      	mov	r2, r3
 8014406:	4812      	ldr	r0, [pc, #72]	@ (8014450 <prvTCPReturn_SetEndPoint+0x130>)
 8014408:	f00e fb06 	bl	8022a18 <lUDPLoggingPrintf>
                        break;
 801440c:	e005      	b.n	801441a <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	2200      	movs	r2, #0
 8014412:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8014414:	e002      	b.n	801441c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8014416:	bf00      	nop
 8014418:	e000      	b.n	801441c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801441a:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014420:	2b00      	cmp	r3, #0
 8014422:	d00c      	beq.n	801443e <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014428:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 801442c:	4619      	mov	r1, r3
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014432:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8014436:	461a      	mov	r2, r3
 8014438:	4806      	ldr	r0, [pc, #24]	@ (8014454 <prvTCPReturn_SetEndPoint+0x134>)
 801443a:	f00e faed 	bl	8022a18 <lUDPLoggingPrintf>
    }
 801443e:	bf00      	nop
 8014440:	3718      	adds	r7, #24
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	08027284 	.word	0x08027284
 801444c:	080272ac 	.word	0x080272ac
 8014450:	080272e0 	.word	0x080272e0
 8014454:	08027314 	.word	0x08027314

08014458 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8014458:	b580      	push	{r7, lr}
 801445a:	b096      	sub	sp, #88	@ 0x58
 801445c:	af02      	add	r7, sp, #8
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8014464:	2300      	movs	r3, #0
 8014466:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d004      	beq.n	801447a <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8014470:	68bb      	ldr	r3, [r7, #8]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014478:	e002      	b.n	8014480 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	33aa      	adds	r3, #170	@ 0xaa
 801447e:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014480:	68f8      	ldr	r0, [r7, #12]
 8014482:	f7f6 f8ab 	bl	800a5dc <uxIPHeaderSizeSocket>
 8014486:	4603      	mov	r3, r0
 8014488:	330e      	adds	r3, #14
 801448a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801448c:	4413      	add	r3, r2
 801448e:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014496:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8014498:	2300      	movs	r3, #0
 801449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 801449c:	2300      	movs	r3, #0
 801449e:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80144a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144a2:	7b5b      	ldrb	r3, [r3, #13]
 80144a4:	f043 0310 	orr.w	r3, r3, #16
 80144a8:	b2da      	uxtb	r2, r3
 80144aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144ac:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f000 80a5 	beq.w	8014604 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80144c0:	2b01      	cmp	r3, #1
 80144c2:	d90a      	bls.n	80144da <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80144ca:	f107 0210 	add.w	r2, r7, #16
 80144ce:	4619      	mov	r1, r3
 80144d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80144d2:	f002 fb13 	bl	8016afc <ulTCPWindowTxGet>
 80144d6:	4603      	mov	r3, r0
 80144d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 80144da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144dc:	2b00      	cmp	r3, #0
 80144de:	f340 8091 	ble.w	8014604 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	6819      	ldr	r1, [r3, #0]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144ea:	68f8      	ldr	r0, [r7, #12]
 80144ec:	f7ff fe9c 	bl	8014228 <prvTCPBufferResize>
 80144f0:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 80144f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	f000 8082 	beq.w	80145fe <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80144fe:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8014500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014504:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014506:	68f8      	ldr	r0, [r7, #12]
 8014508:	f7f6 f868 	bl	800a5dc <uxIPHeaderSizeSocket>
 801450c:	4603      	mov	r3, r0
 801450e:	330e      	adds	r3, #14
 8014510:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014512:	4413      	add	r3, r2
 8014514:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8014516:	68f8      	ldr	r0, [r7, #12]
 8014518:	f7f6 f860 	bl	800a5dc <uxIPHeaderSizeSocket>
 801451c:	4602      	mov	r2, r0
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	4413      	add	r3, r2
 8014522:	3322      	adds	r3, #34	@ 0x22
 8014524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014526:	4413      	add	r3, r2
 8014528:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	693a      	ldr	r2, [r7, #16]
 801453a:	4619      	mov	r1, r3
 801453c:	f7fc fef9 	bl	8011332 <uxStreamBufferDistance>
 8014540:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801454a:	2201      	movs	r2, #1
 801454c:	9200      	str	r2, [sp, #0]
 801454e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014550:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014552:	f7fd f84c 	bl	80115ee <uxStreamBufferGet>
 8014556:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8014558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801455a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801455c:	429a      	cmp	r2, r3
 801455e:	d007      	beq.n	8014570 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8014560:	6939      	ldr	r1, [r7, #16]
 8014562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014564:	9300      	str	r3, [sp, #0]
 8014566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801456a:	4898      	ldr	r0, [pc, #608]	@ (80147cc <prvTCPPrepareSend+0x374>)
 801456c:	f00e fa54 	bl	8022a18 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8014576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801457a:	b2db      	uxtb	r3, r3
 801457c:	2b00      	cmp	r3, #0
 801457e:	d041      	beq.n	8014604 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	4619      	mov	r1, r3
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014590:	689b      	ldr	r3, [r3, #8]
 8014592:	461a      	mov	r2, r3
 8014594:	f7fc fecd 	bl	8011332 <uxStreamBufferDistance>
 8014598:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801459e:	429a      	cmp	r2, r3
 80145a0:	d130      	bne.n	8014604 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80145a8:	689b      	ldr	r3, [r3, #8]
 80145aa:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 80145c0:	6a3b      	ldr	r3, [r7, #32]
 80145c2:	9301      	str	r3, [sp, #4]
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	9300      	str	r3, [sp, #0]
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80145ce:	4880      	ldr	r0, [pc, #512]	@ (80147d0 <prvTCPPrepareSend+0x378>)
 80145d0:	f00e fa22 	bl	8022a18 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80145d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145d6:	7b5b      	ldrb	r3, [r3, #13]
 80145d8:	f043 0301 	orr.w	r3, r3, #1
 80145dc:	b2da      	uxtb	r2, r3
 80145de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145e0:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 80145e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80145e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145e8:	441a      	add	r2, r3
 80145ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145ec:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80145ee:	68fa      	ldr	r2, [r7, #12]
 80145f0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80145f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145f8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80145fc:	e002      	b.n	8014604 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 80145fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014602:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8014604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014606:	2b00      	cmp	r3, #0
 8014608:	f2c0 8099 	blt.w	801473e <prvTCPPrepareSend+0x2e6>
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014612:	2b05      	cmp	r3, #5
 8014614:	f040 8093 	bne.w	801473e <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801461e:	f003 0320 	and.w	r3, r3, #32
 8014622:	b2db      	uxtb	r3, r3
 8014624:	2b00      	cmp	r3, #0
 8014626:	d029      	beq.n	801467c <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8014628:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801462a:	f002 f8e7 	bl	80167fc <xTCPWindowTxDone>
 801462e:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014630:	2b00      	cmp	r3, #0
 8014632:	d023      	beq.n	801467c <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8014634:	68fa      	ldr	r2, [r7, #12]
 8014636:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801463a:	f36f 1345 	bfc	r3, #5, #1
 801463e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014644:	7b5b      	ldrb	r3, [r3, #13]
 8014646:	f043 0301 	orr.w	r3, r3, #1
 801464a:	b2da      	uxtb	r2, r3
 801464c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801464e:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8014650:	68fa      	ldr	r2, [r7, #12]
 8014652:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801465a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 801465e:	68fa      	ldr	r2, [r7, #12]
 8014660:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014664:	f043 0301 	orr.w	r3, r3, #1
 8014668:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801466e:	6a1a      	ldr	r2, [r3, #32]
 8014670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014672:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8014674:	2106      	movs	r1, #6
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f7fd f960 	bl	801193c <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014682:	2b03      	cmp	r3, #3
 8014684:	d90f      	bls.n	80146a6 <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014690:	461a      	mov	r2, r3
 8014692:	4850      	ldr	r0, [pc, #320]	@ (80147d4 <prvTCPPrepareSend+0x37c>)
 8014694:	f00e f9c0 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8014698:	2108      	movs	r1, #8
 801469a:	68f8      	ldr	r0, [r7, #12]
 801469c:	f7fd f94e 	bl	801193c <vTCPStateChange>
                    lDataLen = -1;
 80146a0:	f04f 33ff 	mov.w	r3, #4294967295
 80146a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80146a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d148      	bne.n	801473e <prvTCPPrepareSend+0x2e6>
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80146b2:	f003 0301 	and.w	r3, r3, #1
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d140      	bne.n	801473e <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80146bc:	f7f0 fbdc 	bl	8004e78 <xTaskGetTickCount>
 80146c0:	4602      	mov	r2, r0
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80146cc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80146d0:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d002      	beq.n	80146e2 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 80146dc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80146e0:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 80146e2:	697a      	ldr	r2, [r7, #20]
 80146e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d929      	bls.n	801473e <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80146ea:	f7f0 fbc5 	bl	8004e78 <xTaskGetTickCount>
 80146ee:	4602      	mov	r2, r0
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 80146f6:	4b38      	ldr	r3, [pc, #224]	@ (80147d8 <prvTCPPrepareSend+0x380>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d00b      	beq.n	8014716 <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014708:	461a      	mov	r2, r3
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014710:	4832      	ldr	r0, [pc, #200]	@ (80147dc <prvTCPPrepareSend+0x384>)
 8014712:	f00e f981 	bl	8022a18 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8014716:	68fa      	ldr	r2, [r7, #12]
 8014718:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801471c:	f043 0302 	orr.w	r3, r3, #2
 8014720:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801472a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014734:	3301      	adds	r3, #1
 8014736:	b2da      	uxtb	r2, r3
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 801473e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014740:	2b00      	cmp	r3, #0
 8014742:	db3e      	blt.n	80147c2 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8014744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014746:	2b00      	cmp	r3, #0
 8014748:	dc0f      	bgt.n	801476a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014750:	f003 0301 	and.w	r3, r3, #1
 8014754:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8014756:	2b00      	cmp	r3, #0
 8014758:	d107      	bne.n	801476a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014760:	f003 0302 	and.w	r3, r3, #2
 8014764:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8014766:	2b00      	cmp	r3, #0
 8014768:	d02b      	beq.n	80147c2 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 801476a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801476c:	7b5b      	ldrb	r3, [r3, #13]
 801476e:	f023 0308 	bic.w	r3, r3, #8
 8014772:	b2da      	uxtb	r2, r3
 8014774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014776:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	b2db      	uxtb	r3, r3
 801477c:	3314      	adds	r3, #20
 801477e:	b2db      	uxtb	r3, r3
 8014780:	009b      	lsls	r3, r3, #2
 8014782:	b2da      	uxtb	r2, r3
 8014784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014786:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8014788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801478a:	7b5b      	ldrb	r3, [r3, #13]
 801478c:	f043 0310 	orr.w	r3, r3, #16
 8014790:	b2da      	uxtb	r2, r3
 8014792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014794:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8014796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014798:	2b00      	cmp	r3, #0
 801479a:	d006      	beq.n	80147aa <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 801479c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801479e:	7b5b      	ldrb	r3, [r3, #13]
 80147a0:	f043 0308 	orr.w	r3, r3, #8
 80147a4:	b2da      	uxtb	r2, r3
 80147a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147a8:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f7f5 ff16 	bl	800a5dc <uxIPHeaderSizeSocket>
 80147b0:	4602      	mov	r2, r0
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	4413      	add	r3, r2
 80147b6:	3314      	adds	r3, #20
 80147b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 80147ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80147be:	4413      	add	r3, r2
 80147c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 80147c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 80147c4:	4618      	mov	r0, r3
 80147c6:	3750      	adds	r7, #80	@ 0x50
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	08027348 	.word	0x08027348
 80147d0:	0802737c 	.word	0x0802737c
 80147d4:	080273a4 	.word	0x080273a4
 80147d8:	20001664 	.word	0x20001664
 80147dc:	080273c4 	.word	0x080273c4

080147e0 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b084      	sub	sp, #16
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7fc fdf0 	bl	80113d4 <uxStreamBufferMidSpace>
 80147f4:	4603      	mov	r3, r0
 80147f6:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	dd1a      	ble.n	8014834 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8014804:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801480c:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801480e:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014816:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014818:	f001 ff5c 	bl	80166d4 <lTCPWindowTxAdd>
 801481c:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	2b00      	cmp	r3, #0
 8014822:	dd07      	ble.n	8014834 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801482a:	68ba      	ldr	r2, [r7, #8]
 801482c:	4611      	mov	r1, r2
 801482e:	4618      	mov	r0, r3
 8014830:	f7fc fdf7 	bl	8011422 <vStreamBufferMoveMid>
            }
        }
    }
 8014834:	bf00      	nop
 8014836:	3710      	adds	r7, #16
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801483c:	b590      	push	{r4, r7, lr}
 801483e:	b08b      	sub	sp, #44	@ 0x2c
 8014840:	af02      	add	r7, sp, #8
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801484a:	6838      	ldr	r0, [r7, #0]
 801484c:	f7f5 feac 	bl	800a5a8 <uxIPHeaderSizePacket>
 8014850:	4603      	mov	r3, r0
 8014852:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014854:	4423      	add	r3, r4
 8014856:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014858:	69bb      	ldr	r3, [r7, #24]
 801485a:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014862:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801486a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 801486c:	69fb      	ldr	r3, [r7, #28]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d05c      	beq.n	801492c <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8014872:	4b4f      	ldr	r3, [pc, #316]	@ (80149b0 <prvSetOptions+0x174>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	2b00      	cmp	r3, #0
 8014878:	db44      	blt.n	8014904 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801487e:	4618      	mov	r0, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014886:	461c      	mov	r4, r3
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801488e:	061a      	lsls	r2, r3, #24
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014896:	021b      	lsls	r3, r3, #8
 8014898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801489c:	431a      	orrs	r2, r3
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148a4:	0a1b      	lsrs	r3, r3, #8
 80148a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80148aa:	431a      	orrs	r2, r3
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80148b2:	0e1b      	lsrs	r3, r3, #24
 80148b4:	431a      	orrs	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80148bc:	1ad3      	subs	r3, r2, r3
 80148be:	693a      	ldr	r2, [r7, #16]
 80148c0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80148c4:	0611      	lsls	r1, r2, #24
 80148c6:	693a      	ldr	r2, [r7, #16]
 80148c8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80148cc:	0212      	lsls	r2, r2, #8
 80148ce:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80148d2:	4311      	orrs	r1, r2
 80148d4:	693a      	ldr	r2, [r7, #16]
 80148d6:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80148da:	0a12      	lsrs	r2, r2, #8
 80148dc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80148e0:	4311      	orrs	r1, r2
 80148e2:	693a      	ldr	r2, [r7, #16]
 80148e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80148e8:	0e12      	lsrs	r2, r2, #24
 80148ea:	4311      	orrs	r1, r2
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80148f2:	1a8a      	subs	r2, r1, r2
 80148f4:	9201      	str	r2, [sp, #4]
 80148f6:	9300      	str	r3, [sp, #0]
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	4622      	mov	r2, r4
 80148fc:	4601      	mov	r1, r0
 80148fe:	482d      	ldr	r0, [pc, #180]	@ (80149b4 <prvSetOptions+0x178>)
 8014900:	f00e f88a 	bl	8022a18 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	3380      	adds	r3, #128	@ 0x80
 8014908:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801490a:	697b      	ldr	r3, [r7, #20]
 801490c:	3314      	adds	r3, #20
 801490e:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014910:	69fa      	ldr	r2, [r7, #28]
 8014912:	68f9      	ldr	r1, [r7, #12]
 8014914:	68b8      	ldr	r0, [r7, #8]
 8014916:	f00e fa9b 	bl	8022e50 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	b2db      	uxtb	r3, r3
 801491e:	3314      	adds	r3, #20
 8014920:	b2db      	uxtb	r3, r3
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	b2da      	uxtb	r2, r3
 8014926:	697b      	ldr	r3, [r7, #20]
 8014928:	731a      	strb	r2, [r3, #12]
 801492a:	e03c      	b.n	80149a6 <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014932:	2b04      	cmp	r3, #4
 8014934:	d937      	bls.n	80149a6 <prvSetOptions+0x16a>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801493c:	f003 0301 	and.w	r3, r3, #1
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d02f      	beq.n	80149a6 <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801494c:	f36f 0300 	bfc	r3, #0, #1
 8014950:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8014954:	4b16      	ldr	r3, [pc, #88]	@ (80149b0 <prvSetOptions+0x174>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	db06      	blt.n	801496a <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014962:	4619      	mov	r1, r3
 8014964:	4814      	ldr	r0, [pc, #80]	@ (80149b8 <prvSetOptions+0x17c>)
 8014966:	f00e f857 	bl	8022a18 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	2202      	movs	r2, #2
 801496e:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	2204      	movs	r2, #4
 8014974:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801497c:	0a1b      	lsrs	r3, r3, #8
 801497e:	b29b      	uxth	r3, r3
 8014980:	b2da      	uxtb	r2, r3
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801498c:	b2da      	uxtb	r2, r3
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8014992:	2304      	movs	r3, #4
 8014994:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	b2db      	uxtb	r3, r3
 801499a:	3314      	adds	r3, #20
 801499c:	b2db      	uxtb	r3, r3
 801499e:	009b      	lsls	r3, r3, #2
 80149a0:	b2da      	uxtb	r2, r3
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80149a6:	69fb      	ldr	r3, [r7, #28]
    }
 80149a8:	4618      	mov	r0, r3
 80149aa:	3724      	adds	r7, #36	@ 0x24
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd90      	pop	{r4, r7, pc}
 80149b0:	20001664 	.word	0x20001664
 80149b4:	080273e4 	.word	0x080273e4
 80149b8:	0802740c 	.word	0x0802740c

080149bc <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 80149bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149be:	b093      	sub	sp, #76	@ 0x4c
 80149c0:	af04      	add	r7, sp, #16
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
 80149c8:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7f5 fde7 	bl	800a5a8 <uxIPHeaderSizePacket>
 80149da:	4603      	mov	r3, r0
 80149dc:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80149de:	4423      	add	r3, r4
 80149e0:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80149e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80149ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80149f2:	68bb      	ldr	r3, [r7, #8]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7f5 fdd6 	bl	800a5a8 <uxIPHeaderSizePacket>
 80149fc:	4603      	mov	r3, r0
 80149fe:	3314      	adds	r3, #20
 8014a00:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8014a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a04:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a0c:	691b      	ldr	r3, [r3, #16]
 8014a0e:	1ad3      	subs	r3, r2, r3
 8014a10:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014a12:	69fb      	ldr	r3, [r7, #28]
 8014a14:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014a1c:	005b      	lsls	r3, r3, #1
 8014a1e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d079      	beq.n	8014b1a <prvSendData+0x15e>
 8014a26:	69ba      	ldr	r2, [r7, #24]
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	db75      	blt.n	8014b1a <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014a38:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d16d      	bne.n	8014b1a <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8014a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014a40:	6a3b      	ldr	r3, [r7, #32]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d169      	bne.n	8014b1a <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8014a4c:	2b05      	cmp	r3, #5
 8014a4e:	d164      	bne.n	8014b1a <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8014a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a52:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014a54:	2b10      	cmp	r3, #16
 8014a56:	d160      	bne.n	8014b1a <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014a5e:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d00f      	beq.n	8014a8e <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d005      	beq.n	8014a84 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f003 f8c0 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	429a      	cmp	r2, r3
 8014a94:	d204      	bcs.n	8014aa0 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2202      	movs	r2, #2
 8014a9a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8014a9e:	e00c      	b.n	8014aba <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	2214      	movs	r2, #20
 8014aa4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d103      	bne.n	8014aba <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8014aba:	4b3d      	ldr	r3, [pc, #244]	@ (8014bb0 <prvSendData+0x1f4>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	dd25      	ble.n	8014b0e <prvSendData+0x152>
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014ac6:	2b17      	cmp	r3, #23
 8014ac8:	d021      	beq.n	8014b0e <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014ace:	461d      	mov	r5, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014ad6:	461e      	mov	r6, r3
 8014ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ada:	691a      	ldr	r2, [r3, #16]
 8014adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	1ad0      	subs	r0, r2, r3
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8014ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aea:	69db      	ldr	r3, [r3, #28]
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014af0:	68f9      	ldr	r1, [r7, #12]
 8014af2:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8014af6:	460c      	mov	r4, r1
 8014af8:	69b9      	ldr	r1, [r7, #24]
 8014afa:	9103      	str	r1, [sp, #12]
 8014afc:	9402      	str	r4, [sp, #8]
 8014afe:	9201      	str	r2, [sp, #4]
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	4603      	mov	r3, r0
 8014b04:	4632      	mov	r2, r6
 8014b06:	4629      	mov	r1, r5
 8014b08:	482a      	ldr	r0, [pc, #168]	@ (8014bb4 <prvSendData+0x1f8>)
 8014b0a:	f00d ff85 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	2200      	movs	r2, #0
 8014b12:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8014b18:	e015      	b.n	8014b46 <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d010      	beq.n	8014b46 <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	d005      	beq.n	8014b3e <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f003 f863 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2200      	movs	r2, #0
 8014b42:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8014b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d02b      	beq.n	8014ba4 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8014b4c:	4b18      	ldr	r3, [pc, #96]	@ (8014bb0 <prvSendData+0x1f4>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	dd1d      	ble.n	8014b90 <prvSendData+0x1d4>
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014b58:	2b17      	cmp	r3, #23
 8014b5a:	d019      	beq.n	8014b90 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014b60:	4618      	mov	r0, r3
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014b68:	461c      	mov	r4, r3
 8014b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b6c:	691a      	ldr	r2, [r3, #16]
 8014b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	1ad1      	subs	r1, r2, r3
 8014b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b7a:	69db      	ldr	r3, [r3, #28]
 8014b7c:	1ad3      	subs	r3, r2, r3
 8014b7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b80:	9201      	str	r2, [sp, #4]
 8014b82:	9300      	str	r3, [sp, #0]
 8014b84:	460b      	mov	r3, r1
 8014b86:	4622      	mov	r2, r4
 8014b88:	4601      	mov	r1, r0
 8014b8a:	480b      	ldr	r0, [pc, #44]	@ (8014bb8 <prvSendData+0x1fc>)
 8014b8c:	f00d ff44 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	6819      	ldr	r1, [r3, #0]
 8014b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014b96:	2301      	movs	r3, #1
 8014b98:	68f8      	ldr	r0, [r7, #12]
 8014b9a:	f7ff f8ff 	bl	8013d9c <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8014ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	373c      	adds	r7, #60	@ 0x3c
 8014baa:	46bd      	mov	sp, r7
 8014bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bae:	bf00      	nop
 8014bb0:	20001664 	.word	0x20001664
 8014bb4:	08027420 	.word	0x08027420
 8014bb8:	08027458 	.word	0x08027458

08014bbc <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b084      	sub	sp, #16
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7f5 fceb 	bl	800a5a8 <uxIPHeaderSizePacket>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b14      	cmp	r3, #20
 8014bd6:	d002      	beq.n	8014bde <prvTCPSendSpecialPacketHelper+0x22>
 8014bd8:	2b28      	cmp	r3, #40	@ 0x28
 8014bda:	d007      	beq.n	8014bec <prvTCPSendSpecialPacketHelper+0x30>
 8014bdc:	e00d      	b.n	8014bfa <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8014bde:	78fb      	ldrb	r3, [r7, #3]
 8014be0:	4619      	mov	r1, r3
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 fb18 	bl	8015218 <prvTCPSendSpecialPktHelper_IPV4>
 8014be8:	60f8      	str	r0, [r7, #12]
                        break;
 8014bea:	e009      	b.n	8014c00 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8014bec:	78fb      	ldrb	r3, [r7, #3]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f000 fe8b 	bl	801590c <prvTCPSendSpecialPktHelper_IPV6>
 8014bf6:	60f8      	str	r0, [r7, #12]
                        break;
 8014bf8:	e002      	b.n	8014c00 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	60fb      	str	r3, [r7, #12]
                    break;
 8014bfe:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8014c00:	68fb      	ldr	r3, [r7, #12]
    }
 8014c02:	4618      	mov	r0, r3
 8014c04:	3710      	adds	r7, #16
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}

08014c0a <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014c0a:	b580      	push	{r7, lr}
 8014c0c:	b082      	sub	sp, #8
 8014c0e:	af00      	add	r7, sp, #0
 8014c10:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014c12:	2110      	movs	r1, #16
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7ff ffd1 	bl	8014bbc <prvTCPSendSpecialPacketHelper>
 8014c1a:	4603      	mov	r3, r0
    }
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	3708      	adds	r7, #8
 8014c20:	46bd      	mov	sp, r7
 8014c22:	bd80      	pop	{r7, pc}

08014c24 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014c24:	b580      	push	{r7, lr}
 8014c26:	b082      	sub	sp, #8
 8014c28:	af00      	add	r7, sp, #0
 8014c2a:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014c2c:	2114      	movs	r1, #20
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7ff ffc4 	bl	8014bbc <prvTCPSendSpecialPacketHelper>
 8014c34:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8014c36:	4618      	mov	r0, r3
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
	...

08014c40 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b0a6      	sub	sp, #152	@ 0x98
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	60b9      	str	r1, [r7, #8]
 8014c4a:	607a      	str	r2, [r7, #4]
 8014c4c:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8014c4e:	2300      	movs	r3, #0
 8014c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014c54:	2300      	movs	r3, #0
 8014c56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014c64:	2300      	movs	r3, #0
 8014c66:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014c74:	2300      	movs	r3, #0
 8014c76:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8014c78:	2314      	movs	r3, #20
 8014c7a:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014c80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d117      	bne.n	8014cb8 <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014c94:	2238      	movs	r2, #56	@ 0x38
 8014c96:	2100      	movs	r1, #0
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f00e f9e6 	bl	802306a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014ca4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ca8:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cae:	225a      	movs	r2, #90	@ 0x5a
 8014cb0:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d114      	bne.n	8014cea <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cc6:	4619      	mov	r1, r3
 8014cc8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014ccc:	f7f5 ff1e 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 8014cd0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8014cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d003      	beq.n	8014ce4 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8014cdc:	2301      	movs	r3, #1
 8014cde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014ce2:	e002      	b.n	8014cea <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014ce4:	48bc      	ldr	r0, [pc, #752]	@ (8014fd8 <prvTCPReturnPacket_IPV4+0x398>)
 8014ce6:	f00d fe97 	bl	8022a18 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f000 8166 	beq.w	8014fc0 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014cf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014cfa:	330e      	adds	r3, #14
 8014cfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8014cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014d0c:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014d0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014d16:	330e      	adds	r3, #14
 8014d18:	4413      	add	r3, r2
 8014d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d10b      	bne.n	8014d40 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014d28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014d2e:	68f8      	ldr	r0, [r7, #12]
 8014d30:	f7ff faf6 	bl	8014320 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014d34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f000 813d 	beq.w	8014fba <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d028      	beq.n	8014d98 <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014d46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014d48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f7ff f865 	bl	8013e1c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7ff f8d8 	bl	8013f10 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d64:	061a      	lsls	r2, r3, #24
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d6a:	021b      	lsls	r3, r3, #8
 8014d6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014d70:	431a      	orrs	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d76:	0a1b      	lsrs	r3, r3, #8
 8014d78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014d7c:	431a      	orrs	r2, r3
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014d82:	0e1b      	lsrs	r3, r3, #24
 8014d84:	431a      	orrs	r2, r3
 8014d86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014d88:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8014d8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d90:	681a      	ldr	r2, [r3, #0]
 8014d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014d94:	60da      	str	r2, [r3, #12]
 8014d96:	e017      	b.n	8014dc8 <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014d9c:	685b      	ldr	r3, [r3, #4]
 8014d9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014da0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014da4:	689a      	ldr	r2, [r3, #8]
 8014da6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014daa:	605a      	str	r2, [r3, #4]
 8014dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014db2:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014db4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014db6:	691b      	ldr	r3, [r3, #16]
 8014db8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014dba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dbc:	68da      	ldr	r2, [r3, #12]
 8014dbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dc0:	611a      	str	r2, [r3, #16]
 8014dc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014dc6:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014dc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dca:	2280      	movs	r2, #128	@ 0x80
 8014dcc:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	b29b      	uxth	r3, r3
 8014dd2:	021b      	lsls	r3, r3, #8
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	0a1b      	lsrs	r3, r3, #8
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	4313      	orrs	r3, r2
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014de2:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014de4:	4b7d      	ldr	r3, [pc, #500]	@ (8014fdc <prvTCPReturnPacket_IPV4+0x39c>)
 8014de6:	881b      	ldrh	r3, [r3, #0]
 8014de8:	021b      	lsls	r3, r3, #8
 8014dea:	b21a      	sxth	r2, r3
 8014dec:	4b7b      	ldr	r3, [pc, #492]	@ (8014fdc <prvTCPReturnPacket_IPV4+0x39c>)
 8014dee:	881b      	ldrh	r3, [r3, #0]
 8014df0:	0a1b      	lsrs	r3, r3, #8
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	b21b      	sxth	r3, r3
 8014df6:	4313      	orrs	r3, r2
 8014df8:	b21b      	sxth	r3, r3
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014dfe:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014e00:	4b76      	ldr	r3, [pc, #472]	@ (8014fdc <prvTCPReturnPacket_IPV4+0x39c>)
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	3301      	adds	r3, #1
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	4b74      	ldr	r3, [pc, #464]	@ (8014fdc <prvTCPReturnPacket_IPV4+0x39c>)
 8014e0a:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014e0e:	2200      	movs	r2, #0
 8014e10:	719a      	strb	r2, [r3, #6]
 8014e12:	2200      	movs	r2, #0
 8014e14:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e1a:	781a      	ldrb	r2, [r3, #0]
 8014e1c:	785b      	ldrb	r3, [r3, #1]
 8014e1e:	021b      	lsls	r3, r3, #8
 8014e20:	4313      	orrs	r3, r2
 8014e22:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8014e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e2a:	885b      	ldrh	r3, [r3, #2]
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e32:	801a      	strh	r2, [r3, #0]
 8014e34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014e38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014e3c:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014e46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e4c:	f103 020e 	add.w	r2, r3, #14
 8014e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e54:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014e56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e58:	3306      	adds	r3, #6
 8014e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014e5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014e60:	691b      	ldr	r3, [r3, #16]
 8014e62:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014e64:	f107 0214 	add.w	r2, r7, #20
 8014e68:	f107 011c 	add.w	r1, r7, #28
 8014e6c:	f107 0318 	add.w	r3, r7, #24
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7f2 fd7f 	bl	8007974 <eARPGetCacheEntry>
 8014e76:	4603      	mov	r3, r0
 8014e78:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014e7c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d108      	bne.n	8014e96 <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014e84:	f107 031c 	add.w	r3, r7, #28
 8014e88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014e8c:	697a      	ldr	r2, [r7, #20]
 8014e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8014e94:	e003      	b.n	8014e9e <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014e98:	3306      	adds	r3, #6
 8014e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	f000 808a 	beq.w	8014fbe <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014eac:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014eae:	2206      	movs	r2, #6
 8014eb0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014eb4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014eb6:	f00d ffcb 	bl	8022e50 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ec0:	33e8      	adds	r3, #232	@ 0xe8
 8014ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014ec8:	3306      	adds	r3, #6
 8014eca:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014ecc:	2206      	movs	r2, #6
 8014ece:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014ed2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014ed4:	f00d ffbc 	bl	8022e50 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014ed8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ede:	2b3b      	cmp	r3, #59	@ 0x3b
 8014ee0:	d81a      	bhi.n	8014f18 <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014eec:	e00c      	b.n	8014f08 <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ef2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014ef8:	4413      	add	r3, r2
 8014efa:	2200      	movs	r2, #0
 8014efc:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014f02:	3301      	adds	r3, #1
 8014f04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014f0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8014f0e:	ddee      	ble.n	8014eee <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014f14:	223c      	movs	r2, #60	@ 0x3c
 8014f16:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014f18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d104      	bne.n	8014f30 <prvTCPReturnPacket_IPV4+0x2f0>
 8014f26:	f240 111d 	movw	r1, #285	@ 0x11d
 8014f2a:	482d      	ldr	r0, [pc, #180]	@ (8014fe0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014f2c:	f7ec fdae 	bl	8001a8c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f36:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d104      	bne.n	8014f4a <prvTCPReturnPacket_IPV4+0x30a>
 8014f40:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014f44:	4826      	ldr	r0, [pc, #152]	@ (8014fe0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014f46:	f7ec fda1 	bl	8001a8c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f50:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014f54:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014f58:	68db      	ldr	r3, [r3, #12]
 8014f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014f62:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014f64:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d121      	bne.n	8014fb2 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f72:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8014f76:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8014f7a:	021b      	lsls	r3, r3, #8
 8014f7c:	4313      	orrs	r3, r2
 8014f7e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f8e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014f94:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8014f98:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014f9c:	691a      	ldr	r2, [r3, #16]
 8014f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014fa0:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014fa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014fa4:	3306      	adds	r3, #6
 8014fa6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014fa8:	2206      	movs	r2, #6
 8014faa:	4618      	mov	r0, r3
 8014fac:	f00d ff50 	bl	8022e50 <memcpy>
 8014fb0:	e006      	b.n	8014fc0 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014fb8:	e002      	b.n	8014fc0 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8014fba:	bf00      	nop
 8014fbc:	e000      	b.n	8014fc0 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014fbe:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d103      	bne.n	8014fd0 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014fc8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014fcc:	f002 fe1a 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014fd0:	bf00      	nop
 8014fd2:	3798      	adds	r7, #152	@ 0x98
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	08027484 	.word	0x08027484
 8014fdc:	200011bc 	.word	0x200011bc
 8014fe0:	080274ac 	.word	0x080274ac

08014fe4 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fe6:	b093      	sub	sp, #76	@ 0x4c
 8014fe8:	af06      	add	r7, sp, #24
 8014fea:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014fec:	2301      	movs	r3, #1
 8014fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014ff4:	f107 030c 	add.w	r3, r7, #12
 8014ff8:	2206      	movs	r2, #6
 8014ffa:	2100      	movs	r1, #0
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f00e f834 	bl	802306a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015006:	061a      	lsls	r2, r3, #24
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801500c:	021b      	lsls	r3, r3, #8
 801500e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015012:	431a      	orrs	r2, r3
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015018:	0a1b      	lsrs	r3, r3, #8
 801501a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801501e:	431a      	orrs	r2, r3
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015024:	0e1b      	lsrs	r3, r3, #24
 8015026:	4313      	orrs	r3, r2
 8015028:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8015030:	f107 010c 	add.w	r1, r7, #12
 8015034:	f107 0314 	add.w	r3, r7, #20
 8015038:	4618      	mov	r0, r3
 801503a:	f7f2 fc9b 	bl	8007974 <eARPGetCacheEntry>
 801503e:	4603      	mov	r3, r0
 8015040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8015044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015048:	2b01      	cmp	r3, #1
 801504a:	d037      	beq.n	80150bc <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015052:	3301      	adds	r3, #1
 8015054:	b2da      	uxtb	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	061a      	lsls	r2, r3, #24
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	021b      	lsls	r3, r3, #8
 8015068:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801506c:	431a      	orrs	r2, r3
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	0a1b      	lsrs	r3, r3, #8
 8015072:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015076:	431a      	orrs	r2, r3
 8015078:	697b      	ldr	r3, [r7, #20]
 801507a:	0e1b      	lsrs	r3, r3, #24
 801507c:	431a      	orrs	r2, r3
 801507e:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8015082:	7b38      	ldrb	r0, [r7, #12]
 8015084:	7b7c      	ldrb	r4, [r7, #13]
 8015086:	7bbd      	ldrb	r5, [r7, #14]
 8015088:	7bfe      	ldrb	r6, [r7, #15]
 801508a:	f897 c010 	ldrb.w	ip, [r7, #16]
 801508e:	f8c7 c000 	str.w	ip, [r7]
 8015092:	f897 c011 	ldrb.w	ip, [r7, #17]
 8015096:	4663      	mov	r3, ip
 8015098:	9305      	str	r3, [sp, #20]
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	9304      	str	r3, [sp, #16]
 801509e:	9603      	str	r6, [sp, #12]
 80150a0:	9502      	str	r5, [sp, #8]
 80150a2:	9401      	str	r4, [sp, #4]
 80150a4:	9000      	str	r0, [sp, #0]
 80150a6:	4673      	mov	r3, lr
 80150a8:	485a      	ldr	r0, [pc, #360]	@ (8015214 <prvTCPPrepareConnect_IPV4+0x230>)
 80150aa:	f00d fcb5 	bl	8022a18 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 80150ae:	697b      	ldr	r3, [r7, #20]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f2 feb3 	bl	8007e1c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 80150b6:	2300      	movs	r3, #0
 80150b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80150ba:	e000      	b.n	80150be <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 80150bc:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80150be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d010      	beq.n	80150e6 <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80150d6:	f7ec fcf9 	bl	8001acc <ulApplicationGetNextSequenceNumber>
 80150da:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80150dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d101      	bne.n	80150e6 <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 80150e2:	2300      	movs	r3, #0
 80150e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 80150e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	f000 808d 	beq.w	8015208 <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	33aa      	adds	r3, #170	@ 0xaa
 80150f2:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 80150f4:	6a3b      	ldr	r3, [r7, #32]
 80150f6:	330e      	adds	r3, #14
 80150f8:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2200      	movs	r2, #0
 80150fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8015108:	f043 0308 	orr.w	r3, r3, #8
 801510c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	33aa      	adds	r3, #170	@ 0xaa
 8015114:	225a      	movs	r2, #90	@ 0x5a
 8015116:	2100      	movs	r1, #0
 8015118:	4618      	mov	r0, r3
 801511a:	f00d ffa6 	bl	802306a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801511e:	6a3b      	ldr	r3, [r7, #32]
 8015120:	3306      	adds	r3, #6
 8015122:	461a      	mov	r2, r3
 8015124:	f107 030c 	add.w	r3, r7, #12
 8015128:	6818      	ldr	r0, [r3, #0]
 801512a:	6010      	str	r0, [r2, #0]
 801512c:	889b      	ldrh	r3, [r3, #4]
 801512e:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8015130:	6a3b      	ldr	r3, [r7, #32]
 8015132:	2200      	movs	r2, #0
 8015134:	f042 0208 	orr.w	r2, r2, #8
 8015138:	731a      	strb	r2, [r3, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 801513e:	69fb      	ldr	r3, [r7, #28]
 8015140:	2245      	movs	r2, #69	@ 0x45
 8015142:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8015144:	2338      	movs	r3, #56	@ 0x38
 8015146:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8015148:	8b7b      	ldrh	r3, [r7, #26]
 801514a:	021b      	lsls	r3, r3, #8
 801514c:	b21a      	sxth	r2, r3
 801514e:	8b7b      	ldrh	r3, [r7, #26]
 8015150:	0a1b      	lsrs	r3, r3, #8
 8015152:	b29b      	uxth	r3, r3
 8015154:	b21b      	sxth	r3, r3
 8015156:	4313      	orrs	r3, r2
 8015158:	b21b      	sxth	r3, r3
 801515a:	b29a      	uxth	r2, r3
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8015160:	69fb      	ldr	r3, [r7, #28]
 8015162:	2280      	movs	r2, #128	@ 0x80
 8015164:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	2206      	movs	r2, #6
 801516a:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015170:	061a      	lsls	r2, r3, #24
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015176:	021b      	lsls	r3, r3, #8
 8015178:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801517c:	431a      	orrs	r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015182:	0a1b      	lsrs	r3, r3, #8
 8015184:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015188:	431a      	orrs	r2, r3
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801518e:	0e1b      	lsrs	r3, r3, #24
 8015190:	431a      	orrs	r2, r3
 8015192:	69fb      	ldr	r3, [r7, #28]
 8015194:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801519c:	021b      	lsls	r3, r3, #8
 801519e:	b21a      	sxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80151a6:	0a1b      	lsrs	r3, r3, #8
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	b21b      	sxth	r3, r3
 80151ac:	4313      	orrs	r3, r2
 80151ae:	b21b      	sxth	r3, r3
 80151b0:	b29a      	uxth	r2, r3
 80151b2:	6a3b      	ldr	r3, [r7, #32]
 80151b4:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80151ba:	021b      	lsls	r3, r3, #8
 80151bc:	b21a      	sxth	r2, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80151c2:	0a1b      	lsrs	r3, r3, #8
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	b21b      	sxth	r3, r3
 80151c8:	4313      	orrs	r3, r2
 80151ca:	b21b      	sxth	r3, r3
 80151cc:	b29a      	uxth	r2, r3
 80151ce:	6a3b      	ldr	r3, [r7, #32]
 80151d0:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2200      	movs	r2, #0
 80151d6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80151de:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 80151e2:	6a3b      	ldr	r3, [r7, #32]
 80151e4:	2250      	movs	r2, #80	@ 0x50
 80151e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80151ea:	6a3b      	ldr	r3, [r7, #32]
 80151ec:	2202      	movs	r2, #2
 80151ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 fc3c 	bl	8015a70 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f7fe ff2b 	bl	8014054 <prvTCPCreateWindow>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b01      	cmp	r3, #1
 8015202:	d001      	beq.n	8015208 <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8015204:	2300      	movs	r3, #0
 8015206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8015208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801520a:	4618      	mov	r0, r3
 801520c:	3734      	adds	r7, #52	@ 0x34
 801520e:	46bd      	mov	sp, r7
 8015210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015212:	bf00      	nop
 8015214:	080274ec 	.word	0x080274ec

08015218 <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b086      	sub	sp, #24
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	460b      	mov	r3, r1
 8015222:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015228:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801522a:	2328      	movs	r3, #40	@ 0x28
 801522c:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015234:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	78fa      	ldrb	r2, [r7, #3]
 801523a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	2250      	movs	r2, #80	@ 0x50
 8015242:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8015246:	7bfb      	ldrb	r3, [r7, #15]
 8015248:	f003 0302 	and.w	r3, r3, #2
 801524c:	2b00      	cmp	r3, #0
 801524e:	d02c      	beq.n	80152aa <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8015256:	061a      	lsls	r2, r3, #24
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801525e:	021b      	lsls	r3, r3, #8
 8015260:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015264:	431a      	orrs	r2, r3
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801526c:	0a1b      	lsrs	r3, r3, #8
 801526e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015272:	431a      	orrs	r2, r3
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801527a:	0e1b      	lsrs	r3, r3, #24
 801527c:	4313      	orrs	r3, r2
 801527e:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	3301      	adds	r3, #1
 8015284:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	061a      	lsls	r2, r3, #24
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	021b      	lsls	r3, r3, #8
 801528e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015292:	431a      	orrs	r2, r3
 8015294:	68bb      	ldr	r3, [r7, #8]
 8015296:	0a1b      	lsrs	r3, r3, #8
 8015298:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801529c:	431a      	orrs	r2, r3
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	0e1b      	lsrs	r3, r3, #24
 80152a2:	431a      	orrs	r2, r3
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80152aa:	2300      	movs	r3, #0
 80152ac:	693a      	ldr	r2, [r7, #16]
 80152ae:	6879      	ldr	r1, [r7, #4]
 80152b0:	2000      	movs	r0, #0
 80152b2:	f7fe fd73 	bl	8013d9c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80152b6:	2300      	movs	r3, #0
}
 80152b8:	4618      	mov	r0, r3
 80152ba:	3718      	adds	r7, #24
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 80152c0:	b5b0      	push	{r4, r5, r7, lr}
 80152c2:	b0aa      	sub	sp, #168	@ 0xa8
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
 80152cc:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80152ce:	2300      	movs	r3, #0
 80152d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80152d4:	2300      	movs	r3, #0
 80152d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80152da:	2300      	movs	r3, #0
 80152dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 80152e0:	683b      	ldr	r3, [r7, #0]
 80152e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 80152e6:	2300      	movs	r3, #0
 80152e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 80152f2:	2300      	movs	r3, #0
 80152f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 80152f8:	2300      	movs	r3, #0
 80152fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 80152fe:	2328      	movs	r3, #40	@ 0x28
 8015300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8015304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d103      	bne.n	8015314 <prvTCPReturnPacket_IPV6+0x54>
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 81ae 	beq.w	8015670 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8015314:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d117      	bne.n	801534c <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 801531c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015320:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8015324:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015328:	2238      	movs	r2, #56	@ 0x38
 801532a:	2100      	movs	r1, #0
 801532c:	4618      	mov	r0, r3
 801532e:	f00d fe9c 	bl	802306a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8015338:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801533c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801533e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015342:	225a      	movs	r2, #90	@ 0x5a
 8015344:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8015346:	2300      	movs	r3, #0
 8015348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801534c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015350:	2b00      	cmp	r3, #0
 8015352:	d114      	bne.n	801537e <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8015354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801535a:	4619      	mov	r1, r3
 801535c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8015360:	f7f5 fbd4 	bl	800ab0c <pxDuplicateNetworkBufferWithDescriptor>
 8015364:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8015368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d003      	beq.n	8015378 <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8015370:	2301      	movs	r3, #1
 8015372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015376:	e002      	b.n	801537e <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8015378:	48c0      	ldr	r0, [pc, #768]	@ (801567c <prvTCPReturnPacket_IPV6+0x3bc>)
 801537a:	f00d fb4d 	bl	8022a18 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801537e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 8175 	beq.w	8015672 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801538c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801538e:	2b00      	cmp	r3, #0
 8015390:	d103      	bne.n	801539a <prvTCPReturnPacket_IPV6+0xda>
 8015392:	219d      	movs	r1, #157	@ 0x9d
 8015394:	48ba      	ldr	r0, [pc, #744]	@ (8015680 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015396:	f7ec fb79 	bl	8001a8c <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801539a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153a0:	330e      	adds	r3, #14
 80153a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80153a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80153b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80153b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80153b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80153c2:	330e      	adds	r3, #14
 80153c4:	4413      	add	r3, r2
 80153c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80153ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d117      	bne.n	8015404 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80153d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80153d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80153dc:	68f8      	ldr	r0, [r7, #12]
 80153de:	f7fe ff9f 	bl	8014320 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80153e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d10b      	bne.n	8015404 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 80153ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d003      	beq.n	80153fc <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80153f4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80153f8:	f002 fc04 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 80153fc:	2300      	movs	r3, #0
 80153fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8015402:	e136      	b.n	8015672 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d025      	beq.n	8015456 <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801540a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801540e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015412:	68f8      	ldr	r0, [r7, #12]
 8015414:	f7fe fd02 	bl	8013e1c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801541e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015422:	68f8      	ldr	r0, [r7, #12]
 8015424:	f7fe fd74 	bl	8013f10 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801542c:	f103 0018 	add.w	r0, r3, #24
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	3354      	adds	r3, #84	@ 0x54
 8015434:	2210      	movs	r2, #16
 8015436:	4619      	mov	r1, r3
 8015438:	f00d fd0a 	bl	8022e50 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015440:	f103 0008 	add.w	r0, r3, #8
 8015444:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801544a:	3338      	adds	r3, #56	@ 0x38
 801544c:	2210      	movs	r2, #16
 801544e:	4619      	mov	r1, r3
 8015450:	f00d fcfe 	bl	8022e50 <memcpy>
 8015454:	e02d      	b.n	80154b2 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8015456:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801545a:	685b      	ldr	r3, [r3, #4]
 801545c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801545e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015462:	689a      	ldr	r2, [r3, #8]
 8015464:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015468:	605a      	str	r2, [r3, #4]
 801546a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801546e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015470:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015476:	3318      	adds	r3, #24
 8015478:	f107 0410 	add.w	r4, r7, #16
 801547c:	6818      	ldr	r0, [r3, #0]
 801547e:	6859      	ldr	r1, [r3, #4]
 8015480:	689a      	ldr	r2, [r3, #8]
 8015482:	68db      	ldr	r3, [r3, #12]
 8015484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801548a:	f103 0018 	add.w	r0, r3, #24
 801548e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015492:	3308      	adds	r3, #8
 8015494:	2210      	movs	r2, #16
 8015496:	4619      	mov	r1, r3
 8015498:	f00d fcda 	bl	8022e50 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154a0:	3308      	adds	r3, #8
 80154a2:	461d      	mov	r5, r3
 80154a4:	f107 0410 	add.w	r4, r7, #16
 80154a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154aa:	6028      	str	r0, [r5, #0]
 80154ac:	6069      	str	r1, [r5, #4]
 80154ae:	60aa      	str	r2, [r5, #8]
 80154b0:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	3b28      	subs	r3, #40	@ 0x28
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	021b      	lsls	r3, r3, #8
 80154bc:	b29a      	uxth	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	3b28      	subs	r3, #40	@ 0x28
 80154c2:	0a1b      	lsrs	r3, r3, #8
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	4313      	orrs	r3, r2
 80154c8:	b29a      	uxth	r2, r3
 80154ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80154ce:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80154d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154d4:	781a      	ldrb	r2, [r3, #0]
 80154d6:	785b      	ldrb	r3, [r3, #1]
 80154d8:	021b      	lsls	r3, r3, #8
 80154da:	4313      	orrs	r3, r2
 80154dc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80154e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154e4:	885b      	ldrh	r3, [r3, #2]
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154ec:	801a      	strh	r2, [r3, #0]
 80154ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80154f2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80154f6:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80154f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80154fc:	687a      	ldr	r2, [r7, #4]
 80154fe:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8015500:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015506:	f103 020e 	add.w	r2, r3, #14
 801550a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801550e:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015510:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015514:	3318      	adds	r3, #24
 8015516:	f107 0420 	add.w	r4, r7, #32
 801551a:	6818      	ldr	r0, [r3, #0]
 801551c:	6859      	ldr	r1, [r3, #4]
 801551e:	689a      	ldr	r2, [r3, #8]
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8015524:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015528:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801552c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015530:	f107 0320 	add.w	r3, r7, #32
 8015534:	4618      	mov	r0, r3
 8015536:	f7f6 fe89 	bl	800c24c <eNDGetCacheEntry>
 801553a:	4603      	mov	r3, r0
 801553c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8015540:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8015544:	2b01      	cmp	r3, #1
 8015546:	d104      	bne.n	8015552 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8015548:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801554c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015550:	e004      	b.n	801555c <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8015552:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015556:	3306      	adds	r3, #6
 8015558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801555c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8015564:	2206      	movs	r2, #6
 8015566:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801556a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801556e:	f00d fc6f 	bl	8022e50 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8015572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015578:	33e8      	adds	r3, #232	@ 0xe8
 801557a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801557e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015582:	3306      	adds	r3, #6
 8015584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8015588:	2206      	movs	r2, #6
 801558a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801558e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8015592:	f00d fc5d 	bl	8022e50 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801559c:	2b3b      	cmp	r3, #59	@ 0x3b
 801559e:	d81a      	bhi.n	80155d6 <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80155a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80155a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80155aa:	e00c      	b.n	80155c6 <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80155ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80155b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80155b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80155b6:	4413      	add	r3, r2
 80155b8:	2200      	movs	r2, #0
 80155ba:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80155bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80155c0:	3301      	adds	r3, #1
 80155c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80155c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80155ca:	2b3b      	cmp	r3, #59	@ 0x3b
 80155cc:	ddee      	ble.n	80155ac <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80155ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80155d2:	223c      	movs	r2, #60	@ 0x3c
 80155d4:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80155d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80155da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d104      	bne.n	80155ee <prvTCPReturnPacket_IPV6+0x32e>
 80155e4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80155e8:	4825      	ldr	r0, [pc, #148]	@ (8015680 <prvTCPReturnPacket_IPV6+0x3c0>)
 80155ea:	f7ec fa4f 	bl	8001a8c <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80155ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80155f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80155f8:	68db      	ldr	r3, [r3, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d104      	bne.n	8015608 <prvTCPReturnPacket_IPV6+0x348>
 80155fe:	f240 1119 	movw	r1, #281	@ 0x119
 8015602:	481f      	ldr	r0, [pc, #124]	@ (8015680 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015604:	f7ec fa42 	bl	8001a8c <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801560e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015612:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8015614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801561c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015620:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8015622:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8015624:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015628:	2b00      	cmp	r3, #0
 801562a:	d122      	bne.n	8015672 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 801562c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015630:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8015634:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8015638:	021b      	lsls	r3, r3, #8
 801563a:	4313      	orrs	r3, r2
 801563c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8015640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015644:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015646:	b29a      	uxth	r2, r3
 8015648:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801564c:	86da      	strh	r2, [r3, #54]	@ 0x36
 801564e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015652:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8015656:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801565c:	f103 0008 	add.w	r0, r3, #8
 8015660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015664:	3318      	adds	r3, #24
 8015666:	2210      	movs	r2, #16
 8015668:	4619      	mov	r1, r3
 801566a:	f00d fbf1 	bl	8022e50 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 801566e:	e000      	b.n	8015672 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8015670:	bf00      	nop
}
 8015672:	bf00      	nop
 8015674:	37a8      	adds	r7, #168	@ 0xa8
 8015676:	46bd      	mov	sp, r7
 8015678:	bdb0      	pop	{r4, r5, r7, pc}
 801567a:	bf00      	nop
 801567c:	0802752c 	.word	0x0802752c
 8015680:	08027554 	.word	0x08027554

08015684 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015684:	b590      	push	{r4, r7, lr}
 8015686:	b093      	sub	sp, #76	@ 0x4c
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801568c:	2300      	movs	r3, #0
 801568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8015690:	2300      	movs	r3, #0
 8015692:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8015694:	2301      	movs	r3, #1
 8015696:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8015698:	2300      	movs	r3, #0
 801569a:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 801569c:	2300      	movs	r3, #0
 801569e:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 80156a0:	2300      	movs	r3, #0
 80156a2:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80156a4:	f107 0310 	add.w	r3, r7, #16
 80156a8:	2206      	movs	r2, #6
 80156aa:	2100      	movs	r1, #0
 80156ac:	4618      	mov	r0, r3
 80156ae:	f00d fcdc 	bl	802306a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 80156b2:	f107 0318 	add.w	r3, r7, #24
 80156b6:	2210      	movs	r2, #16
 80156b8:	2100      	movs	r1, #0
 80156ba:	4618      	mov	r0, r3
 80156bc:	f00d fcd5 	bl	802306a <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	3354      	adds	r3, #84	@ 0x54
 80156c4:	f107 0418 	add.w	r4, r7, #24
 80156c8:	6818      	ldr	r0, [r3, #0]
 80156ca:	6859      	ldr	r1, [r3, #4]
 80156cc:	689a      	ldr	r2, [r3, #8]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 80156d2:	f107 020c 	add.w	r2, r7, #12
 80156d6:	f107 0110 	add.w	r1, r7, #16
 80156da:	f107 0318 	add.w	r3, r7, #24
 80156de:	4618      	mov	r0, r3
 80156e0:	f7f6 fdb4 	bl	800c24c <eNDGetCacheEntry>
 80156e4:	4603      	mov	r3, r0
 80156e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 80156ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80156ee:	68fa      	ldr	r2, [r7, #12]
 80156f0:	4619      	mov	r1, r3
 80156f2:	4881      	ldr	r0, [pc, #516]	@ (80158f8 <prvTCPPrepareConnect_IPV6+0x274>)
 80156f4:	f00d f990 	bl	8022a18 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d002      	beq.n	8015704 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80156fe:	68fa      	ldr	r2, [r7, #12]
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7f4 ff69 	bl	800a5dc <uxIPHeaderSizeSocket>
 801570a:	4603      	mov	r3, r0
 801570c:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801570e:	33a0      	adds	r3, #160	@ 0xa0
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	4413      	add	r3, r2
 8015714:	330a      	adds	r3, #10
 8015716:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8015718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801571c:	2b01      	cmp	r3, #1
 801571e:	d02c      	beq.n	801577a <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015726:	3301      	adds	r3, #1
 8015728:	b2da      	uxtb	r2, r3
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d001      	beq.n	801573a <prvTCPPrepareConnect_IPV6+0xb6>
 8015736:	4a71      	ldr	r2, [pc, #452]	@ (80158fc <prvTCPPrepareConnect_IPV6+0x278>)
 8015738:	e000      	b.n	801573c <prvTCPPrepareConnect_IPV6+0xb8>
 801573a:	4a71      	ldr	r2, [pc, #452]	@ (8015900 <prvTCPPrepareConnect_IPV6+0x27c>)
 801573c:	f107 0318 	add.w	r3, r7, #24
 8015740:	4619      	mov	r1, r3
 8015742:	4870      	ldr	r0, [pc, #448]	@ (8015904 <prvTCPPrepareConnect_IPV6+0x280>)
 8015744:	f00d f968 	bl	8022a18 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d012      	beq.n	8015774 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 801574e:	2356      	movs	r3, #86	@ 0x56
 8015750:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8015752:	2100      	movs	r1, #0
 8015754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015756:	f002 f9ed 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 801575a:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 801575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801575e:	2b00      	cmp	r3, #0
 8015760:	d008      	beq.n	8015774 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015762:	68fa      	ldr	r2, [r7, #12]
 8015764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015766:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8015768:	f107 0318 	add.w	r3, r7, #24
 801576c:	4619      	mov	r1, r3
 801576e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015770:	f7f6 ffd8 	bl	800c724 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8015774:	2300      	movs	r3, #0
 8015776:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8015778:	e000      	b.n	801577c <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 801577a:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 801577c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801577e:	2b00      	cmp	r3, #0
 8015780:	d010      	beq.n	80157a4 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015794:	f7ec f99a 	bl	8001acc <ulApplicationGetNextSequenceNumber>
 8015798:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 801579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 80157a0:	2300      	movs	r3, #0
 80157a2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 80157a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d05d      	beq.n	8015866 <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	33aa      	adds	r3, #170	@ 0xaa
 80157ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 80157b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157b2:	330e      	adds	r3, #14
 80157b4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2200      	movs	r2, #0
 80157ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80157c4:	f043 0308 	orr.w	r3, r3, #8
 80157c8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	33aa      	adds	r3, #170	@ 0xaa
 80157d0:	225a      	movs	r2, #90	@ 0x5a
 80157d2:	2100      	movs	r1, #0
 80157d4:	4618      	mov	r0, r3
 80157d6:	f00d fc48 	bl	802306a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80157da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157dc:	3306      	adds	r3, #6
 80157de:	461a      	mov	r2, r3
 80157e0:	f107 0310 	add.w	r3, r7, #16
 80157e4:	6818      	ldr	r0, [r3, #0]
 80157e6:	6010      	str	r0, [r2, #0]
 80157e8:	889b      	ldrh	r3, [r3, #4]
 80157ea:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	7a1b      	ldrb	r3, [r3, #8]
 80157f0:	f003 0301 	and.w	r3, r3, #1
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d035      	beq.n	8015866 <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 80157fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157fc:	2200      	movs	r2, #0
 80157fe:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8015802:	731a      	strb	r2, [r3, #12]
 8015804:	2200      	movs	r2, #0
 8015806:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801580a:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 801580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801580e:	2260      	movs	r2, #96	@ 0x60
 8015810:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015814:	2200      	movs	r2, #0
 8015816:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8015818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801581a:	2200      	movs	r2, #0
 801581c:	709a      	strb	r2, [r3, #2]
 801581e:	2200      	movs	r2, #0
 8015820:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015824:	2200      	movs	r2, #0
 8015826:	711a      	strb	r2, [r3, #4]
 8015828:	2200      	movs	r2, #0
 801582a:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 801582e:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8015830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015832:	2206      	movs	r2, #6
 8015834:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8015836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015838:	2280      	movs	r2, #128	@ 0x80
 801583a:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 801583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801583e:	f103 0008 	add.w	r0, r3, #8
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	3354      	adds	r3, #84	@ 0x54
 8015846:	2210      	movs	r2, #16
 8015848:	4619      	mov	r1, r3
 801584a:	f00d fb01 	bl	8022e50 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 801584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015850:	f103 0018 	add.w	r0, r3, #24
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3328      	adds	r3, #40	@ 0x28
 8015858:	2210      	movs	r2, #16
 801585a:	4619      	mov	r1, r3
 801585c:	f00d faf8 	bl	8022e50 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015864:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d03a      	beq.n	80158e2 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 801586c:	68fa      	ldr	r2, [r7, #12]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015878:	021b      	lsls	r3, r3, #8
 801587a:	b21a      	sxth	r2, r3
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015882:	0a1b      	lsrs	r3, r3, #8
 8015884:	b29b      	uxth	r3, r3
 8015886:	b21b      	sxth	r3, r3
 8015888:	4313      	orrs	r3, r2
 801588a:	b21b      	sxth	r3, r3
 801588c:	b29a      	uxth	r2, r3
 801588e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015890:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015896:	021b      	lsls	r3, r3, #8
 8015898:	b21a      	sxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801589e:	0a1b      	lsrs	r3, r3, #8
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	b21b      	sxth	r3, r3
 80158a4:	4313      	orrs	r3, r2
 80158a6:	b21b      	sxth	r3, r3
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158ac:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2200      	movs	r2, #0
 80158b2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80158ba:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 80158be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158c0:	2250      	movs	r2, #80	@ 0x50
 80158c2:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80158c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158c6:	2202      	movs	r2, #2
 80158c8:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 f8d0 	bl	8015a70 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f7fe fbbf 	bl	8014054 <prvTCPCreateWindow>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b01      	cmp	r3, #1
 80158da:	d007      	beq.n	80158ec <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 80158dc:	2300      	movs	r3, #0
 80158de:	647b      	str	r3, [r7, #68]	@ 0x44
 80158e0:	e004      	b.n	80158ec <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 80158e2:	4809      	ldr	r0, [pc, #36]	@ (8015908 <prvTCPPrepareConnect_IPV6+0x284>)
 80158e4:	f00d f898 	bl	8022a18 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 80158e8:	2300      	movs	r3, #0
 80158ea:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80158ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	374c      	adds	r7, #76	@ 0x4c
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd90      	pop	{r4, r7, pc}
 80158f6:	bf00      	nop
 80158f8:	08027594 	.word	0x08027594
 80158fc:	080275bc 	.word	0x080275bc
 8015900:	080275c0 	.word	0x080275c0
 8015904:	080275c4 	.word	0x080275c4
 8015908:	080275e8 	.word	0x080275e8

0801590c <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b086      	sub	sp, #24
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	460b      	mov	r3, r1
 8015916:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801591c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801591e:	233c      	movs	r3, #60	@ 0x3c
 8015920:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015928:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	78fa      	ldrb	r2, [r7, #3]
 801592e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	2250      	movs	r2, #80	@ 0x50
 8015936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801593a:	7bfb      	ldrb	r3, [r7, #15]
 801593c:	f003 0302 	and.w	r3, r3, #2
 8015940:	2b00      	cmp	r3, #0
 8015942:	d02c      	beq.n	801599e <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801594a:	061a      	lsls	r2, r3, #24
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015952:	021b      	lsls	r3, r3, #8
 8015954:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015958:	431a      	orrs	r2, r3
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015960:	0a1b      	lsrs	r3, r3, #8
 8015962:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015966:	431a      	orrs	r2, r3
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801596e:	0e1b      	lsrs	r3, r3, #24
 8015970:	4313      	orrs	r3, r2
 8015972:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	3301      	adds	r3, #1
 8015978:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801597a:	68bb      	ldr	r3, [r7, #8]
 801597c:	061a      	lsls	r2, r3, #24
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	021b      	lsls	r3, r3, #8
 8015982:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015986:	431a      	orrs	r2, r3
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	0a1b      	lsrs	r3, r3, #8
 801598c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015990:	431a      	orrs	r2, r3
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	0e1b      	lsrs	r3, r3, #24
 8015996:	431a      	orrs	r2, r3
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801599e:	2300      	movs	r3, #0
 80159a0:	693a      	ldr	r2, [r7, #16]
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	2000      	movs	r0, #0
 80159a6:	f7fe f9f9 	bl	8013d9c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80159aa:	2300      	movs	r3, #0
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3718      	adds	r7, #24
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80159b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159b6:	b08d      	sub	sp, #52	@ 0x34
 80159b8:	af08      	add	r7, sp, #32
 80159ba:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d002      	beq.n	80159d0 <prvTCPFlagMeaning+0x1c>
 80159ca:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 80159ce:	e001      	b.n	80159d4 <prvTCPFlagMeaning+0x20>
 80159d0:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d001      	beq.n	80159e2 <prvTCPFlagMeaning+0x2e>
 80159de:	2353      	movs	r3, #83	@ 0x53
 80159e0:	e000      	b.n	80159e4 <prvTCPFlagMeaning+0x30>
 80159e2:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 80159e4:	68fa      	ldr	r2, [r7, #12]
 80159e6:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 80159ea:	2a00      	cmp	r2, #0
 80159ec:	d001      	beq.n	80159f2 <prvTCPFlagMeaning+0x3e>
 80159ee:	2252      	movs	r2, #82	@ 0x52
 80159f0:	e000      	b.n	80159f4 <prvTCPFlagMeaning+0x40>
 80159f2:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80159f4:	68f9      	ldr	r1, [r7, #12]
 80159f6:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80159fa:	2900      	cmp	r1, #0
 80159fc:	d001      	beq.n	8015a02 <prvTCPFlagMeaning+0x4e>
 80159fe:	2150      	movs	r1, #80	@ 0x50
 8015a00:	e000      	b.n	8015a04 <prvTCPFlagMeaning+0x50>
 8015a02:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8015a04:	68f8      	ldr	r0, [r7, #12]
 8015a06:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d001      	beq.n	8015a12 <prvTCPFlagMeaning+0x5e>
 8015a0e:	2041      	movs	r0, #65	@ 0x41
 8015a10:	e000      	b.n	8015a14 <prvTCPFlagMeaning+0x60>
 8015a12:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015a14:	68fc      	ldr	r4, [r7, #12]
 8015a16:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 8015a1a:	2c00      	cmp	r4, #0
 8015a1c:	d001      	beq.n	8015a22 <prvTCPFlagMeaning+0x6e>
 8015a1e:	2455      	movs	r4, #85	@ 0x55
 8015a20:	e000      	b.n	8015a24 <prvTCPFlagMeaning+0x70>
 8015a22:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015a24:	68fd      	ldr	r5, [r7, #12]
 8015a26:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 8015a2a:	2d00      	cmp	r5, #0
 8015a2c:	d001      	beq.n	8015a32 <prvTCPFlagMeaning+0x7e>
 8015a2e:	2545      	movs	r5, #69	@ 0x45
 8015a30:	e000      	b.n	8015a34 <prvTCPFlagMeaning+0x80>
 8015a32:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8015a34:	68fe      	ldr	r6, [r7, #12]
 8015a36:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 8015a3a:	2e00      	cmp	r6, #0
 8015a3c:	d001      	beq.n	8015a42 <prvTCPFlagMeaning+0x8e>
 8015a3e:	2643      	movs	r6, #67	@ 0x43
 8015a40:	e000      	b.n	8015a44 <prvTCPFlagMeaning+0x90>
 8015a42:	262e      	movs	r6, #46	@ 0x2e
 8015a44:	9606      	str	r6, [sp, #24]
 8015a46:	9505      	str	r5, [sp, #20]
 8015a48:	9404      	str	r4, [sp, #16]
 8015a4a:	9003      	str	r0, [sp, #12]
 8015a4c:	9102      	str	r1, [sp, #8]
 8015a4e:	9201      	str	r2, [sp, #4]
 8015a50:	9300      	str	r3, [sp, #0]
 8015a52:	4663      	mov	r3, ip
 8015a54:	4a04      	ldr	r2, [pc, #16]	@ (8015a68 <prvTCPFlagMeaning+0xb4>)
 8015a56:	210a      	movs	r1, #10
 8015a58:	4804      	ldr	r0, [pc, #16]	@ (8015a6c <prvTCPFlagMeaning+0xb8>)
 8015a5a:	f00e f809 	bl	8023a70 <snprintf>
            return retString;
 8015a5e:	4b03      	ldr	r3, [pc, #12]	@ (8015a6c <prvTCPFlagMeaning+0xb8>)
        }
 8015a60:	4618      	mov	r0, r3
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a68:	08027614 	.word	0x08027614
 8015a6c:	20001640 	.word	0x20001640

08015a70 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b082      	sub	sp, #8
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	7a1b      	ldrb	r3, [r3, #8]
 8015a7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d002      	beq.n	8015a8c <prvSocketSetMSS+0x1c>
 8015a86:	2b01      	cmp	r3, #1
 8015a88:	d004      	beq.n	8015a94 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8015a8a:	e007      	b.n	8015a9c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8015a8c:	6878      	ldr	r0, [r7, #4]
 8015a8e:	f000 f809 	bl	8015aa4 <prvSocketSetMSS_IPV4>
                    break;
 8015a92:	e003      	b.n	8015a9c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f000 f84b 	bl	8015b30 <prvSocketSetMSS_IPV6>
                    break;
 8015a9a:	bf00      	nop
        }
    }
 8015a9c:	bf00      	nop
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}

08015aa4 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015aac:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015ab0:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ab6:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d023      	beq.n	8015b06 <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8015abe:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015ac2:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ac8:	061a      	lsls	r2, r3, #24
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ace:	021b      	lsls	r3, r3, #8
 8015ad0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015ad4:	431a      	orrs	r2, r3
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ada:	0a1b      	lsrs	r3, r3, #8
 8015adc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015ae0:	431a      	orrs	r2, r3
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015ae6:	0e1b      	lsrs	r3, r3, #24
 8015ae8:	431a      	orrs	r2, r3
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	405a      	eors	r2, r3
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	4013      	ands	r3, r2
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d005      	beq.n	8015b06 <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015afa:	68f9      	ldr	r1, [r7, #12]
 8015afc:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015b00:	f7f5 faa0 	bl	800b044 <FreeRTOS_min_uint32>
 8015b04:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015b10:	68f9      	ldr	r1, [r7, #12]
 8015b12:	4806      	ldr	r0, [pc, #24]	@ (8015b2c <prvSocketSetMSS_IPV4+0x88>)
 8015b14:	f00c ff80 	bl	8022a18 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	b29a      	uxth	r2, r3
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015b22:	bf00      	nop
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	08027628 	.word	0x08027628

08015b30 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b090      	sub	sp, #64	@ 0x40
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015b38:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d103      	bne.n	8015b50 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8015b48:	481f      	ldr	r0, [pc, #124]	@ (8015bc8 <prvSocketSetMSS_IPV6+0x98>)
 8015b4a:	f00c ff65 	bl	8022a18 <lUDPLoggingPrintf>

            break;
 8015b4e:	e036      	b.n	8015bbe <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b54:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8015b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d018      	beq.n	8015b8e <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8015b5c:	2314      	movs	r3, #20
 8015b5e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8015b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015b62:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015b66:	1a9b      	subs	r3, r3, r2
 8015b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	3354      	adds	r3, #84	@ 0x54
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7f8 fc96 	bl	800e4a0 <xIPv6_GetIPType>
 8015b74:	4603      	mov	r3, r0
 8015b76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 8015b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d105      	bne.n	8015b8e <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015b82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015b84:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015b88:	f7f5 fa5c 	bl	800b044 <FreeRTOS_min_uint32>
 8015b8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015b94:	f107 0208 	add.w	r2, r7, #8
 8015b98:	2328      	movs	r3, #40	@ 0x28
 8015b9a:	200a      	movs	r0, #10
 8015b9c:	f7f9 ffa2 	bl	800fae4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015ba6:	f107 0208 	add.w	r2, r7, #8
 8015baa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015bac:	4807      	ldr	r0, [pc, #28]	@ (8015bcc <prvSocketSetMSS_IPV6+0x9c>)
 8015bae:	f00c ff33 	bl	8022a18 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015bb4:	b29a      	uxth	r2, r3
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8015bbc:	bf00      	nop
 8015bbe:	bf00      	nop
 8015bc0:	3740      	adds	r7, #64	@ 0x40
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	08027654 	.word	0x08027654
 8015bcc:	08027680 	.word	0x08027680

08015bd0 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8015bd0:	b480      	push	{r7}
 8015bd2:	b085      	sub	sp, #20
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
 8015bd8:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	1ad3      	subs	r3, r2, r3
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	db01      	blt.n	8015bec <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8015be8:	2301      	movs	r3, #1
 8015bea:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8015bec:	68fb      	ldr	r3, [r7, #12]
        }
 8015bee:	4618      	mov	r0, r3
 8015bf0:	3714      	adds	r7, #20
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf8:	4770      	bx	lr

08015bfa <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8015bfa:	b480      	push	{r7}
 8015bfc:	b085      	sub	sp, #20
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
 8015c02:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015c04:	2300      	movs	r3, #0
 8015c06:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8015c08:	683a      	ldr	r2, [r7, #0]
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	1ad3      	subs	r3, r2, r3
 8015c0e:	3b01      	subs	r3, #1
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	db01      	blt.n	8015c18 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015c14:	2301      	movs	r3, #1
 8015c16:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015c18:	68fb      	ldr	r3, [r7, #12]
    }
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3714      	adds	r7, #20
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c24:	4770      	bx	lr

08015c26 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8015c26:	b480      	push	{r7}
 8015c28:	b085      	sub	sp, #20
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
 8015c2e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015c30:	2300      	movs	r3, #0
 8015c32:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	1ad3      	subs	r3, r2, r3
 8015c3a:	3b01      	subs	r3, #1
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	db01      	blt.n	8015c44 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015c40:	2301      	movs	r3, #1
 8015c42:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015c44:	68fb      	ldr	r3, [r7, #12]
    }
 8015c46:	4618      	mov	r0, r3
 8015c48:	3714      	adds	r7, #20
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c50:	4770      	bx	lr

08015c52 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015c52:	b480      	push	{r7}
 8015c54:	b085      	sub	sp, #20
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	6078      	str	r0, [r7, #4]
 8015c5a:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	db01      	blt.n	8015c6e <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015c6e:	68fb      	ldr	r3, [r7, #12]
    }
 8015c70:	4618      	mov	r0, r3
 8015c72:	3714      	adds	r7, #20
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	3308      	adds	r3, #8
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	6839      	ldr	r1, [r7, #0]
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f000 f822 	bl	8015cd8 <vListInsertGeneric>
        }
 8015c94:	bf00      	nop
 8015c96:	3708      	adds	r7, #8
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}

08015c9c <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015ca4:	f7ef f8e8 	bl	8004e78 <xTaskGetTickCount>
 8015ca8:	4602      	mov	r2, r0
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	601a      	str	r2, [r3, #0]
    }
 8015cae:	bf00      	nop
 8015cb0:	3708      	adds	r7, #8
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}

08015cb6 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8015cb6:	b580      	push	{r7, lr}
 8015cb8:	b084      	sub	sp, #16
 8015cba:	af00      	add	r7, sp, #0
 8015cbc:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8015cbe:	f7ef f8db 	bl	8004e78 <xTaskGetTickCount>
 8015cc2:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	1ad3      	subs	r3, r2, r3
 8015ccc:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8015cce:	68bb      	ldr	r3, [r7, #8]
    }
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3710      	adds	r7, #16
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}

08015cd8 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8015cd8:	b480      	push	{r7}
 8015cda:	b085      	sub	sp, #20
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	689a      	ldr	r2, [r3, #8]
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	68ba      	ldr	r2, [r7, #8]
 8015cf8:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	68ba      	ldr	r2, [r7, #8]
 8015cfe:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	68fa      	ldr	r2, [r7, #12]
 8015d04:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	1c5a      	adds	r2, r3, #1
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	601a      	str	r2, [r3, #0]
        }
 8015d10:	bf00      	nop
 8015d12:	3714      	adds	r7, #20
 8015d14:	46bd      	mov	sp, r7
 8015d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1a:	4770      	bx	lr

08015d1c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015d22:	4827      	ldr	r0, [pc, #156]	@ (8015dc0 <prvCreateSectors+0xa4>)
 8015d24:	f7ed fe24 	bl	8003970 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8015d28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015d2c:	f7f0 ff12 	bl	8006b54 <pvPortMalloc>
 8015d30:	4603      	mov	r3, r0
 8015d32:	4a24      	ldr	r2, [pc, #144]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d34:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8015d36:	4b23      	ldr	r3, [pc, #140]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d107      	bne.n	8015d4e <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015d3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015d42:	4821      	ldr	r0, [pc, #132]	@ (8015dc8 <prvCreateSectors+0xac>)
 8015d44:	f00c fe68 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8015d48:	2300      	movs	r3, #0
 8015d4a:	603b      	str	r3, [r7, #0]
 8015d4c:	e032      	b.n	8015db4 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015d56:	2100      	movs	r1, #0
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f00d f986 	bl	802306a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015d5e:	2300      	movs	r3, #0
 8015d60:	607b      	str	r3, [r7, #4]
 8015d62:	e022      	b.n	8015daa <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015d64:	4b17      	ldr	r3, [pc, #92]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d66:	6819      	ldr	r1, [r3, #0]
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	019a      	lsls	r2, r3, #6
 8015d6c:	4b15      	ldr	r3, [pc, #84]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d6e:	6818      	ldr	r0, [r3, #0]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	019b      	lsls	r3, r3, #6
 8015d74:	4403      	add	r3, r0
 8015d76:	440a      	add	r2, r1
 8015d78:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015d7a:	4b12      	ldr	r3, [pc, #72]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d7c:	6819      	ldr	r1, [r3, #0]
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	019a      	lsls	r2, r3, #6
 8015d82:	4b10      	ldr	r3, [pc, #64]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d84:	6818      	ldr	r0, [r3, #0]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	019b      	lsls	r3, r3, #6
 8015d8a:	4403      	add	r3, r0
 8015d8c:	440a      	add	r2, r1
 8015d8e:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015d90:	4b0c      	ldr	r3, [pc, #48]	@ (8015dc4 <prvCreateSectors+0xa8>)
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	019b      	lsls	r3, r3, #6
 8015d98:	4413      	add	r3, r2
 8015d9a:	332c      	adds	r3, #44	@ 0x2c
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	4808      	ldr	r0, [pc, #32]	@ (8015dc0 <prvCreateSectors+0xa4>)
 8015da0:	f7ff ff6c 	bl	8015c7c <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	3301      	adds	r3, #1
 8015da8:	607b      	str	r3, [r7, #4]
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2b3f      	cmp	r3, #63	@ 0x3f
 8015dae:	ddd9      	ble.n	8015d64 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015db0:	2301      	movs	r3, #1
 8015db2:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015db4:	683b      	ldr	r3, [r7, #0]
        }
 8015db6:	4618      	mov	r0, r3
 8015db8:	3708      	adds	r7, #8
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	20001650 	.word	0x20001650
 8015dc4:	2000164c 	.word	0x2000164c
 8015dc8:	080276b0 	.word	0x080276b0

08015dcc <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015dcc:	b480      	push	{r7}
 8015dce:	b087      	sub	sp, #28
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	33ac      	adds	r3, #172	@ 0xac
 8015dde:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	617b      	str	r3, [r7, #20]
 8015de6:	e00d      	b.n	8015e04 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	68db      	ldr	r3, [r3, #12]
 8015dec:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d102      	bne.n	8015dfe <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	613b      	str	r3, [r7, #16]
                    break;
 8015dfc:	e006      	b.n	8015e0c <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015e04:	697a      	ldr	r2, [r7, #20]
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d1ed      	bne.n	8015de8 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015e0c:	693b      	ldr	r3, [r7, #16]
        }
 8015e0e:	4618      	mov	r0, r3
 8015e10:	371c      	adds	r7, #28
 8015e12:	46bd      	mov	sp, r7
 8015e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e18:	4770      	bx	lr
	...

08015e1c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b088      	sub	sp, #32
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	60b9      	str	r1, [r7, #8]
 8015e26:	607a      	str	r2, [r7, #4]
 8015e28:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8015e2a:	4b33      	ldr	r3, [pc, #204]	@ (8015ef8 <xTCPWindowNew+0xdc>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d10c      	bne.n	8015e4c <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d001      	beq.n	8015e3c <xTCPWindowNew+0x20>
 8015e38:	2352      	movs	r3, #82	@ 0x52
 8015e3a:	e000      	b.n	8015e3e <xTCPWindowNew+0x22>
 8015e3c:	2354      	movs	r3, #84	@ 0x54
 8015e3e:	4619      	mov	r1, r3
 8015e40:	482e      	ldr	r0, [pc, #184]	@ (8015efc <xTCPWindowNew+0xe0>)
 8015e42:	f00c fde9 	bl	8022a18 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8015e46:	2300      	movs	r3, #0
 8015e48:	61fb      	str	r3, [r7, #28]
 8015e4a:	e04f      	b.n	8015eec <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8015ef8 <xTCPWindowNew+0xdc>)
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015e52:	69bb      	ldr	r3, [r7, #24]
 8015e54:	68db      	ldr	r3, [r3, #12]
 8015e56:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d104      	bne.n	8015e68 <xTCPWindowNew+0x4c>
 8015e5e:	f240 2125 	movw	r1, #549	@ 0x225
 8015e62:	4827      	ldr	r0, [pc, #156]	@ (8015f00 <xTCPWindowNew+0xe4>)
 8015e64:	f7eb fe12 	bl	8001a8c <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d104      	bne.n	8015e78 <xTCPWindowNew+0x5c>
 8015e6e:	f240 2126 	movw	r1, #550	@ 0x226
 8015e72:	4823      	ldr	r0, [pc, #140]	@ (8015f00 <xTCPWindowNew+0xe4>)
 8015e74:	f7eb fe0a 	bl	8001a8c <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8015e78:	69b8      	ldr	r0, [r7, #24]
 8015e7a:	f7ed fe03 	bl	8003a84 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015e7e:	683b      	ldr	r3, [r7, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d006      	beq.n	8015e92 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	33a4      	adds	r3, #164	@ 0xa4
 8015e88:	69b9      	ldr	r1, [r7, #24]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7ff fef6 	bl	8015c7c <vListInsertFifo>
 8015e90:	e005      	b.n	8015e9e <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	3390      	adds	r3, #144	@ 0x90
 8015e96:	69b9      	ldr	r1, [r7, #24]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7ff feef 	bl	8015c7c <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	3310      	adds	r3, #16
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7ff fefa 	bl	8015c9c <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8015ea8:	69fb      	ldr	r3, [r7, #28]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d001      	beq.n	8015eb8 <xTCPWindowNew+0x9c>
 8015eb4:	2101      	movs	r1, #1
 8015eb6:	e000      	b.n	8015eba <xTCPWindowNew+0x9e>
 8015eb8:	2100      	movs	r1, #0
 8015eba:	69fa      	ldr	r2, [r7, #28]
 8015ebc:	7d93      	ldrb	r3, [r2, #22]
 8015ebe:	f361 0382 	bfi	r3, r1, #2, #1
 8015ec2:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8015eca:	69fb      	ldr	r3, [r7, #28]
 8015ecc:	687a      	ldr	r2, [r7, #4]
 8015ece:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	68ba      	ldr	r2, [r7, #8]
 8015ed4:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8015ed6:	4b08      	ldr	r3, [pc, #32]	@ (8015ef8 <xTCPWindowNew+0xdc>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015edc:	4b09      	ldr	r3, [pc, #36]	@ (8015f04 <xTCPWindowNew+0xe8>)
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	697a      	ldr	r2, [r7, #20]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d202      	bcs.n	8015eec <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8015ee6:	4a07      	ldr	r2, [pc, #28]	@ (8015f04 <xTCPWindowNew+0xe8>)
 8015ee8:	697b      	ldr	r3, [r7, #20]
 8015eea:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015eec:	69fb      	ldr	r3, [r7, #28]
        }
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3720      	adds	r7, #32
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20001650 	.word	0x20001650
 8015efc:	080276d4 	.word	0x080276d4
 8015f00:	08027704 	.word	0x08027704
 8015f04:	2000001c 	.word	0x2000001c

08015f08 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d002      	beq.n	8015f20 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	60fb      	str	r3, [r7, #12]
 8015f1e:	e01e      	b.n	8015f5e <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	691b      	ldr	r3, [r3, #16]
 8015f24:	1c5a      	adds	r2, r3, #1
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	699b      	ldr	r3, [r3, #24]
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	4610      	mov	r0, r2
 8015f2e:	f7ff fe90 	bl	8015c52 <xSequenceGreaterThanOrEqual>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d002      	beq.n	8015f3e <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8015f38:	2301      	movs	r3, #1
 8015f3a:	60fb      	str	r3, [r7, #12]
 8015f3c:	e00f      	b.n	8015f5e <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	691a      	ldr	r2, [r3, #16]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	1ad1      	subs	r1, r2, r3
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	699a      	ldr	r2, [r3, #24]
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	461a      	mov	r2, r3
 8015f54:	4804      	ldr	r0, [pc, #16]	@ (8015f68 <xTCPWindowRxEmpty+0x60>)
 8015f56:	f00c fd5f 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
        }
 8015f60:	4618      	mov	r0, r3
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	08027734 	.word	0x08027734

08015f6c <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d102      	bne.n	8015f82 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	60fb      	str	r3, [r7, #12]
 8015f80:	e008      	b.n	8015f94 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015f8e:	68b8      	ldr	r0, [r7, #8]
 8015f90:	f7ed fd78 	bl	8003a84 <uxListRemove>
            }

            return pxSegment;
 8015f94:	68fb      	ldr	r3, [r7, #12]
        }
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015f9e:	b480      	push	{r7}
 8015fa0:	b085      	sub	sp, #20
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d102      	bne.n	8015fb4 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	60fb      	str	r3, [r7, #12]
 8015fb2:	e005      	b.n	8015fc0 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015fba:	68bb      	ldr	r3, [r7, #8]
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
        }
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	3714      	adds	r7, #20
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
	...

08015fd0 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d004      	beq.n	8015fea <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	3318      	adds	r3, #24
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7ed fd4d 	bl	8003a84 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2200      	movs	r2, #0
 8015fee:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016000:	2b00      	cmp	r3, #0
 8016002:	d004      	beq.n	801600e <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	332c      	adds	r3, #44	@ 0x2c
 8016008:	4618      	mov	r0, r3
 801600a:	f7ed fd3b 	bl	8003a84 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	332c      	adds	r3, #44	@ 0x2c
 8016012:	4619      	mov	r1, r3
 8016014:	4803      	ldr	r0, [pc, #12]	@ (8016024 <vTCPWindowFree+0x54>)
 8016016:	f7ff fe31 	bl	8015c7c <vListInsertFifo>
        }
 801601a:	bf00      	nop
 801601c:	3708      	adds	r7, #8
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	20001650 	.word	0x20001650

08016028 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8016028:	b580      	push	{r7, lr}
 801602a:	b086      	sub	sp, #24
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8016030:	2300      	movs	r3, #0
 8016032:	613b      	str	r3, [r7, #16]
 8016034:	e01d      	b.n	8016072 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d003      	beq.n	8016044 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	33a4      	adds	r3, #164	@ 0xa4
 8016040:	617b      	str	r3, [r7, #20]
 8016042:	e002      	b.n	801604a <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	3390      	adds	r3, #144	@ 0x90
 8016048:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	689b      	ldr	r3, [r3, #8]
 801604e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016052:	d10b      	bne.n	801606c <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8016054:	e006      	b.n	8016064 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	68db      	ldr	r3, [r3, #12]
 801605a:	68db      	ldr	r3, [r3, #12]
 801605c:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 801605e:	68f8      	ldr	r0, [r7, #12]
 8016060:	f7ff ffb6 	bl	8015fd0 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1f4      	bne.n	8016056 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	3301      	adds	r3, #1
 8016070:	613b      	str	r3, [r7, #16]
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	2b01      	cmp	r3, #1
 8016076:	ddde      	ble.n	8016036 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8016078:	bf00      	nop
 801607a:	bf00      	nop
 801607c:	3718      	adds	r7, #24
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
	...

08016084 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8016084:	b580      	push	{r7, lr}
 8016086:	b086      	sub	sp, #24
 8016088:	af00      	add	r7, sp, #0
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
 8016090:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8016092:	2301      	movs	r3, #1
 8016094:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8016096:	4b1d      	ldr	r3, [pc, #116]	@ (801610c <xTCPWindowCreate+0x88>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d102      	bne.n	80160a4 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 801609e:	f7ff fe3d 	bl	8015d1c <prvCreateSectors>
 80160a2:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	3390      	adds	r3, #144	@ 0x90
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7ed fc61 	bl	8003970 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	33a4      	adds	r3, #164	@ 0xa4
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7ed fc5c 	bl	8003970 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	3340      	adds	r3, #64	@ 0x40
 80160bc:	4618      	mov	r0, r3
 80160be:	f7ed fc57 	bl	8003970 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	3354      	adds	r3, #84	@ 0x54
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7ed fc52 	bl	8003970 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	3368      	adds	r3, #104	@ 0x68
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ed fc4d 	bl	8003970 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 80160d6:	4b0e      	ldr	r3, [pc, #56]	@ (8016110 <xTCPWindowCreate+0x8c>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d004      	beq.n	80160e8 <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 80160de:	687a      	ldr	r2, [r7, #4]
 80160e0:	68b9      	ldr	r1, [r7, #8]
 80160e2:	480c      	ldr	r0, [pc, #48]	@ (8016114 <xTCPWindowCreate+0x90>)
 80160e4:	f00c fc98 	bl	8022a18 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	68ba      	ldr	r2, [r7, #8]
 80160ec:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 80160f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f6:	6a3a      	ldr	r2, [r7, #32]
 80160f8:	6839      	ldr	r1, [r7, #0]
 80160fa:	68f8      	ldr	r0, [r7, #12]
 80160fc:	f000 f80c 	bl	8016118 <vTCPWindowInit>

        return xReturn;
 8016100:	697b      	ldr	r3, [r7, #20]
    }
 8016102:	4618      	mov	r0, r3
 8016104:	3718      	adds	r7, #24
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	2000164c 	.word	0x2000164c
 8016110:	20001664 	.word	0x20001664
 8016114:	08027764 	.word	0x08027764

08016118 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8016118:	b480      	push	{r7}
 801611a:	b087      	sub	sp, #28
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8016126:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801612a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	2200      	movs	r2, #0
 8016130:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8016132:	68fa      	ldr	r2, [r7, #12]
 8016134:	7813      	ldrb	r3, [r2, #0]
 8016136:	f043 0301 	orr.w	r3, r3, #1
 801613a:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d024      	beq.n	801618c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8016148:	2b00      	cmp	r3, #0
 801614a:	d004      	beq.n	8016156 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	b29a      	uxth	r2, r3
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801615c:	461a      	mov	r2, r3
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	4293      	cmp	r3, r2
 8016162:	d304      	bcc.n	801616e <vTCPWindowInit+0x56>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801616a:	2b00      	cmp	r3, #0
 801616c:	d10e      	bne.n	801618c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	685a      	ldr	r2, [r3, #4]
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	fbb2 f3f3 	udiv	r3, r2, r3
 8016178:	683a      	ldr	r2, [r7, #0]
 801617a:	fb03 f202 	mul.w	r2, r3, r2
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	b29a      	uxth	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	697a      	ldr	r2, [r7, #20]
 8016190:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	68ba      	ldr	r2, [r7, #8]
 801619c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	68ba      	ldr	r2, [r7, #8]
 80161a2:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	687a      	ldr	r2, [r7, #4]
 80161a8:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	687a      	ldr	r2, [r7, #4]
 80161ae:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	687a      	ldr	r2, [r7, #4]
 80161b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	687a      	ldr	r2, [r7, #4]
 80161ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 80161c2:	bf00      	nop
 80161c4:	371c      	adds	r7, #28
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr
	...

080161d0 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 80161d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161d2:	b08f      	sub	sp, #60	@ 0x3c
 80161d4:	af04      	add	r7, sp, #16
 80161d6:	60f8      	str	r0, [r7, #12]
 80161d8:	60b9      	str	r1, [r7, #8]
 80161da:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 80161dc:	2300      	movs	r3, #0
 80161de:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 80161e0:	68ba      	ldr	r2, [r7, #8]
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	4413      	add	r3, r2
 80161e6:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	33ac      	adds	r3, #172	@ 0xac
 80161ec:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 80161ee:	69bb      	ldr	r3, [r7, #24]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	623b      	str	r3, [r7, #32]
 80161f4:	e027      	b.n	8016246 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80161f6:	6a3b      	ldr	r3, [r7, #32]
 80161f8:	68db      	ldr	r3, [r3, #12]
 80161fa:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	68b9      	ldr	r1, [r7, #8]
 8016202:	4618      	mov	r0, r3
 8016204:	f7ff fd25 	bl	8015c52 <xSequenceGreaterThanOrEqual>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d018      	beq.n	8016240 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	69f9      	ldr	r1, [r7, #28]
 8016214:	4618      	mov	r0, r3
 8016216:	f7ff fcf0 	bl	8015bfa <xSequenceLessThan>
 801621a:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801621c:	2b00      	cmp	r3, #0
 801621e:	d00f      	beq.n	8016240 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8016220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016222:	2b00      	cmp	r3, #0
 8016224:	d00a      	beq.n	801623c <xTCPWindowRxConfirm+0x6c>
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	681a      	ldr	r2, [r3, #0]
 801622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	4619      	mov	r1, r3
 8016230:	4610      	mov	r0, r2
 8016232:	f7ff fce2 	bl	8015bfa <xSequenceLessThan>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d001      	beq.n	8016240 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8016240:	6a3b      	ldr	r3, [r7, #32]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8016246:	6a3a      	ldr	r2, [r7, #32]
 8016248:	69bb      	ldr	r3, [r7, #24]
 801624a:	429a      	cmp	r2, r3
 801624c:	d1d3      	bne.n	80161f6 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 801624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016250:	2b00      	cmp	r3, #0
 8016252:	d030      	beq.n	80162b6 <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8016254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016256:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8016258:	68ba      	ldr	r2, [r7, #8]
 801625a:	429a      	cmp	r2, r3
 801625c:	d104      	bne.n	8016268 <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 801625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016260:	689a      	ldr	r2, [r3, #8]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	429a      	cmp	r2, r3
 8016266:	d026      	beq.n	80162b6 <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801626e:	461e      	mov	r6, r3
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	68ba      	ldr	r2, [r7, #8]
 8016276:	1ad5      	subs	r5, r2, r3
 8016278:	68ba      	ldr	r2, [r7, #8]
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	441a      	add	r2, r3
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	1ad3      	subs	r3, r2, r3
 8016284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016286:	6811      	ldr	r1, [r2, #0]
 8016288:	68fa      	ldr	r2, [r7, #12]
 801628a:	68d2      	ldr	r2, [r2, #12]
 801628c:	1a8a      	subs	r2, r1, r2
 801628e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016290:	6889      	ldr	r1, [r1, #8]
 8016292:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016294:	6800      	ldr	r0, [r0, #0]
 8016296:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8016298:	68a4      	ldr	r4, [r4, #8]
 801629a:	4404      	add	r4, r0
 801629c:	68f8      	ldr	r0, [r7, #12]
 801629e:	68c0      	ldr	r0, [r0, #12]
 80162a0:	1a20      	subs	r0, r4, r0
 80162a2:	9003      	str	r0, [sp, #12]
 80162a4:	9102      	str	r1, [sp, #8]
 80162a6:	9201      	str	r2, [sp, #4]
 80162a8:	9300      	str	r3, [sp, #0]
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	462a      	mov	r2, r5
 80162ae:	4631      	mov	r1, r6
 80162b0:	4803      	ldr	r0, [pc, #12]	@ (80162c0 <xTCPWindowRxConfirm+0xf0>)
 80162b2:	f00c fbb1 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80162b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80162b8:	4618      	mov	r0, r3
 80162ba:	372c      	adds	r7, #44	@ 0x2c
 80162bc:	46bd      	mov	sp, r7
 80162be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162c0:	08027794 	.word	0x08027794

080162c4 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 80162c4:	b5b0      	push	{r4, r5, r7, lr}
 80162c6:	b08a      	sub	sp, #40	@ 0x28
 80162c8:	af04      	add	r7, sp, #16
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	691b      	ldr	r3, [r3, #16]
 80162d2:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 80162d4:	693a      	ldr	r2, [r7, #16]
 80162d6:	683b      	ldr	r3, [r7, #0]
 80162d8:	4413      	add	r3, r2
 80162da:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d04e      	beq.n	8016384 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 80162ea:	683a      	ldr	r2, [r7, #0]
 80162ec:	6939      	ldr	r1, [r7, #16]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f7ff ff6e 	bl	80161d0 <xTCPWindowRxConfirm>
 80162f4:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 80162f6:	68bb      	ldr	r3, [r7, #8]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d002      	beq.n	8016302 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 80162fc:	68b8      	ldr	r0, [r7, #8]
 80162fe:	f7ff fe67 	bl	8015fd0 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8016302:	68bb      	ldr	r3, [r7, #8]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d1f0      	bne.n	80162ea <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8016308:	6979      	ldr	r1, [r7, #20]
 801630a:	6878      	ldr	r0, [r7, #4]
 801630c:	f7ff fd5e 	bl	8015dcc <xTCPWindowRxFind>
 8016310:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d009      	beq.n	801632c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	461a      	mov	r2, r3
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	4413      	add	r3, r2
 8016322:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8016324:	68b8      	ldr	r0, [r7, #8]
 8016326:	f7ff fe53 	bl	8015fd0 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801632a:	e7ed      	b.n	8016308 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801632c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801632e:	68fa      	ldr	r2, [r7, #12]
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	429a      	cmp	r2, r3
 8016334:	d026      	beq.n	8016384 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8016336:	697a      	ldr	r2, [r7, #20]
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	1ad2      	subs	r2, r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8016340:	4b14      	ldr	r3, [pc, #80]	@ (8016394 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	dd1d      	ble.n	8016384 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801634e:	461c      	mov	r4, r3
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016356:	461d      	mov	r5, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	693a      	ldr	r2, [r7, #16]
 801635e:	1ad0      	subs	r0, r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016364:	687a      	ldr	r2, [r7, #4]
 8016366:	68d2      	ldr	r2, [r2, #12]
 8016368:	68f9      	ldr	r1, [r7, #12]
 801636a:	1a8a      	subs	r2, r1, r2
 801636c:	6879      	ldr	r1, [r7, #4]
 801636e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8016372:	9102      	str	r1, [sp, #8]
 8016374:	9201      	str	r2, [sp, #4]
 8016376:	9300      	str	r3, [sp, #0]
 8016378:	4603      	mov	r3, r0
 801637a:	462a      	mov	r2, r5
 801637c:	4621      	mov	r1, r4
 801637e:	4806      	ldr	r0, [pc, #24]	@ (8016398 <prvTCPWindowRx_ExpectedRX+0xd4>)
 8016380:	f00c fb4a 	bl	8022a18 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	697a      	ldr	r2, [r7, #20]
 8016388:	611a      	str	r2, [r3, #16]
        }
 801638a:	bf00      	nop
 801638c:	3718      	adds	r7, #24
 801638e:	46bd      	mov	sp, r7
 8016390:	bdb0      	pop	{r4, r5, r7, pc}
 8016392:	bf00      	nop
 8016394:	20001664 	.word	0x20001664
 8016398:	080277d4 	.word	0x080277d4

0801639c <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 801639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801639e:	b08f      	sub	sp, #60	@ 0x3c
 80163a0:	af04      	add	r7, sp, #16
 80163a2:	60f8      	str	r0, [r7, #12]
 80163a4:	60b9      	str	r1, [r7, #8]
 80163a6:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 80163a8:	f04f 33ff 	mov.w	r3, #4294967295
 80163ac:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80163ae:	68ba      	ldr	r2, [r7, #8]
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	4413      	add	r3, r2
 80163b4:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	691b      	ldr	r3, [r3, #16]
 80163ba:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80163bc:	6a39      	ldr	r1, [r7, #32]
 80163be:	68f8      	ldr	r0, [r7, #12]
 80163c0:	f7ff fd04 	bl	8015dcc <xTCPWindowRxFind>
 80163c4:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d006      	beq.n	80163da <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	689b      	ldr	r3, [r3, #8]
 80163d0:	461a      	mov	r2, r3
 80163d2:	6a3b      	ldr	r3, [r7, #32]
 80163d4:	4413      	add	r3, r2
 80163d6:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80163d8:	e7f0      	b.n	80163bc <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 80163da:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 80163dc:	4b45      	ldr	r3, [pc, #276]	@ (80164f4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	dd20      	ble.n	8016426 <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80163ea:	461d      	mov	r5, r3
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80163f2:	461e      	mov	r6, r3
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	68db      	ldr	r3, [r3, #12]
 80163f8:	68ba      	ldr	r2, [r7, #8]
 80163fa:	1ad0      	subs	r0, r2, r3
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	69fa      	ldr	r2, [r7, #28]
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	68b9      	ldr	r1, [r7, #8]
 8016406:	69fa      	ldr	r2, [r7, #28]
 8016408:	1a8a      	subs	r2, r1, r2
 801640a:	4614      	mov	r4, r2
 801640c:	68fa      	ldr	r2, [r7, #12]
 801640e:	68d2      	ldr	r2, [r2, #12]
 8016410:	6a39      	ldr	r1, [r7, #32]
 8016412:	1a8a      	subs	r2, r1, r2
 8016414:	9202      	str	r2, [sp, #8]
 8016416:	9401      	str	r4, [sp, #4]
 8016418:	9300      	str	r3, [sp, #0]
 801641a:	4603      	mov	r3, r0
 801641c:	4632      	mov	r2, r6
 801641e:	4629      	mov	r1, r5
 8016420:	4835      	ldr	r0, [pc, #212]	@ (80164f8 <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8016422:	f00c faf9 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	4a34      	ldr	r2, [pc, #208]	@ (80164fc <prvTCPWindowRx_UnexpectedRX+0x160>)
 801642a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	061a      	lsls	r2, r3, #24
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	021b      	lsls	r3, r3, #8
 8016436:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801643a:	431a      	orrs	r2, r3
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	0a1b      	lsrs	r3, r3, #8
 8016440:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016444:	431a      	orrs	r2, r3
 8016446:	68bb      	ldr	r3, [r7, #8]
 8016448:	0e1b      	lsrs	r3, r3, #24
 801644a:	431a      	orrs	r2, r3
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8016452:	6a3b      	ldr	r3, [r7, #32]
 8016454:	061a      	lsls	r2, r3, #24
 8016456:	6a3b      	ldr	r3, [r7, #32]
 8016458:	021b      	lsls	r3, r3, #8
 801645a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801645e:	431a      	orrs	r2, r3
 8016460:	6a3b      	ldr	r3, [r7, #32]
 8016462:	0a1b      	lsrs	r3, r3, #8
 8016464:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016468:	431a      	orrs	r2, r3
 801646a:	6a3b      	ldr	r3, [r7, #32]
 801646c:	0e1b      	lsrs	r3, r3, #24
 801646e:	431a      	orrs	r2, r3
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	220c      	movs	r2, #12
 801647a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 801647e:	68b9      	ldr	r1, [r7, #8]
 8016480:	68f8      	ldr	r0, [r7, #12]
 8016482:	f7ff fca3 	bl	8015dcc <xTCPWindowRxFind>
 8016486:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8016488:	69bb      	ldr	r3, [r7, #24]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d12d      	bne.n	80164ea <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	2301      	movs	r3, #1
 8016492:	68b9      	ldr	r1, [r7, #8]
 8016494:	68f8      	ldr	r0, [r7, #12]
 8016496:	f7ff fcc1 	bl	8015e1c <xTCPWindowNew>
 801649a:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801649c:	69bb      	ldr	r3, [r7, #24]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d104      	bne.n	80164ac <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2200      	movs	r2, #0
 80164a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80164aa:	e01e      	b.n	80164ea <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 80164ac:	4b11      	ldr	r3, [pc, #68]	@ (80164f4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d014      	beq.n	80164de <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80164ba:	4619      	mov	r1, r3
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80164c2:	4618      	mov	r0, r3
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	68db      	ldr	r3, [r3, #12]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	1ad2      	subs	r2, r2, r3
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80164d2:	9300      	str	r3, [sp, #0]
 80164d4:	4613      	mov	r3, r2
 80164d6:	4602      	mov	r2, r0
 80164d8:	4809      	ldr	r0, [pc, #36]	@ (8016500 <prvTCPWindowRx_UnexpectedRX+0x164>)
 80164da:	f00c fa9d 	bl	8022a18 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80164de:	68ba      	ldr	r2, [r7, #8]
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	1ad3      	subs	r3, r2, r3
 80164e4:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 80164e6:	697b      	ldr	r3, [r7, #20]
 80164e8:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 80164ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80164ec:	4618      	mov	r0, r3
 80164ee:	372c      	adds	r7, #44	@ 0x2c
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164f4:	20001664 	.word	0x20001664
 80164f8:	08027818 	.word	0x08027818
 80164fc:	0a050101 	.word	0x0a050101
 8016500:	08027858 	.word	0x08027858

08016504 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8016504:	b580      	push	{r7, lr}
 8016506:	b08c      	sub	sp, #48	@ 0x30
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
 8016510:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8016512:	f04f 33ff 	mov.w	r3, #4294967295
 8016516:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8016518:	68bb      	ldr	r3, [r7, #8]
 801651a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8016520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016522:	2200      	movs	r2, #0
 8016524:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	691b      	ldr	r3, [r3, #16]
 801652a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801652c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801652e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016530:	4413      	add	r3, r2
 8016532:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8016534:	69fa      	ldr	r2, [r7, #28]
 8016536:	6a3b      	ldr	r3, [r7, #32]
 8016538:	1ad3      	subs	r3, r2, r3
 801653a:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 801653c:	69bb      	ldr	r3, [r7, #24]
 801653e:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8016540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016542:	6a3b      	ldr	r3, [r7, #32]
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 801654c:	693b      	ldr	r3, [r7, #16]
 801654e:	2b00      	cmp	r3, #0
 8016550:	da18      	bge.n	8016584 <lTCPWindowRxCheck+0x80>
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	2b00      	cmp	r3, #0
 8016556:	dd15      	ble.n	8016584 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801655e:	1ad2      	subs	r2, r2, r3
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016564:	4824      	ldr	r0, [pc, #144]	@ (80165f8 <lTCPWindowRxCheck+0xf4>)
 8016566:	f00c fa57 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801656e:	1ad3      	subs	r3, r2, r3
 8016570:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8016572:	693b      	ldr	r3, [r7, #16]
 8016574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016576:	4413      	add	r3, r2
 8016578:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	425b      	negs	r3, r3
 801657e:	461a      	mov	r2, r3
 8016580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016582:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2200      	movs	r2, #0
 8016588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2200      	movs	r2, #0
 8016590:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8016592:	6a3a      	ldr	r2, [r7, #32]
 8016594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016596:	429a      	cmp	r2, r3
 8016598:	d110      	bne.n	80165bc <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d905      	bls.n	80165ae <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165a6:	4815      	ldr	r0, [pc, #84]	@ (80165fc <lTCPWindowRxCheck+0xf8>)
 80165a8:	f00c fa36 	bl	8022a18 <lUDPLoggingPrintf>
 80165ac:	e01f      	b.n	80165ee <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80165ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165b0:	68f8      	ldr	r0, [r7, #12]
 80165b2:	f7ff fe87 	bl	80162c4 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80165ba:	e018      	b.n	80165ee <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 80165bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165be:	3301      	adds	r3, #1
 80165c0:	6a3a      	ldr	r2, [r7, #32]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	d013      	beq.n	80165ee <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	dd10      	ble.n	80165ee <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	697a      	ldr	r2, [r7, #20]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	dd06      	ble.n	80165e2 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 80165d4:	683b      	ldr	r3, [r7, #0]
 80165d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165d8:	6979      	ldr	r1, [r7, #20]
 80165da:	4809      	ldr	r0, [pc, #36]	@ (8016600 <lTCPWindowRxCheck+0xfc>)
 80165dc:	f00c fa1c 	bl	8022a18 <lUDPLoggingPrintf>
 80165e0:	e005      	b.n	80165ee <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80165e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80165e6:	68f8      	ldr	r0, [r7, #12]
 80165e8:	f7ff fed8 	bl	801639c <prvTCPWindowRx_UnexpectedRX>
 80165ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80165ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80165f0:	4618      	mov	r0, r3
 80165f2:	3730      	adds	r7, #48	@ 0x30
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}
 80165f8:	08027888 	.word	0x08027888
 80165fc:	080278c8 	.word	0x080278c8
 8016600:	08027908 	.word	0x08027908

08016604 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8016604:	b480      	push	{r7}
 8016606:	b087      	sub	sp, #28
 8016608:	af00      	add	r7, sp, #0
 801660a:	60f8      	str	r0, [r7, #12]
 801660c:	60b9      	str	r1, [r7, #8]
 801660e:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8016610:	68fa      	ldr	r2, [r7, #12]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	4413      	add	r3, r2
 8016616:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8016618:	697a      	ldr	r2, [r7, #20]
 801661a:	68bb      	ldr	r3, [r7, #8]
 801661c:	429a      	cmp	r2, r3
 801661e:	db03      	blt.n	8016628 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8016620:	697a      	ldr	r2, [r7, #20]
 8016622:	68bb      	ldr	r3, [r7, #8]
 8016624:	1ad3      	subs	r3, r2, r3
 8016626:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8016628:	697b      	ldr	r3, [r7, #20]
        }
 801662a:	4618      	mov	r0, r3
 801662c:	371c      	adds	r7, #28
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr
	...

08016638 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8016638:	b580      	push	{r7, lr}
 801663a:	b088      	sub	sp, #32
 801663c:	af02      	add	r7, sp, #8
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	685a      	ldr	r2, [r3, #4]
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	689b      	ldr	r3, [r3, #8]
 801664c:	1ad3      	subs	r3, r2, r3
 801664e:	4619      	mov	r1, r3
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f7f4 fce7 	bl	800b024 <FreeRTOS_min_int32>
 8016656:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	689a      	ldr	r2, [r3, #8]
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	441a      	add	r2, r3
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	689a      	ldr	r2, [r3, #8]
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	429a      	cmp	r2, r3
 801666e:	db02      	blt.n	8016676 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	2200      	movs	r2, #0
 8016674:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801667a:	697b      	ldr	r3, [r7, #20]
 801667c:	441a      	add	r2, r3
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8016682:	4b12      	ldr	r3, [pc, #72]	@ (80166cc <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2b01      	cmp	r3, #1
 8016688:	dd1a      	ble.n	80166c0 <prvTCPWindowTxAdd_FrontSegment+0x88>
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016690:	2b17      	cmp	r3, #23
 8016692:	d015      	beq.n	80166c0 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	681a      	ldr	r2, [r3, #0]
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	69db      	ldr	r3, [r3, #28]
 801669c:	1ad1      	subs	r1, r2, r3
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	6898      	ldr	r0, [r3, #8]
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	69db      	ldr	r3, [r3, #28]
 80166aa:	1ad3      	subs	r3, r2, r3
 80166ac:	68ba      	ldr	r2, [r7, #8]
 80166ae:	68d2      	ldr	r2, [r2, #12]
 80166b0:	9201      	str	r2, [sp, #4]
 80166b2:	9300      	str	r3, [sp, #0]
 80166b4:	4603      	mov	r3, r0
 80166b6:	460a      	mov	r2, r1
 80166b8:	6879      	ldr	r1, [r7, #4]
 80166ba:	4805      	ldr	r0, [pc, #20]	@ (80166d0 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 80166bc:	f00c f9ac 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 80166c0:	697b      	ldr	r3, [r7, #20]
        }
 80166c2:	4618      	mov	r0, r3
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	20001664 	.word	0x20001664
 80166d0:	0802794c 	.word	0x0802794c

080166d4 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b08a      	sub	sp, #40	@ 0x28
 80166d8:	af00      	add	r7, sp, #0
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	60b9      	str	r1, [r7, #8]
 80166de:	607a      	str	r2, [r7, #4]
 80166e0:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 80166e6:	2300      	movs	r3, #0
 80166e8:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80166f2:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 80166f4:	69bb      	ldr	r3, [r7, #24]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d073      	beq.n	80167e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	689a      	ldr	r2, [r3, #8]
 80166fe:	69bb      	ldr	r3, [r7, #24]
 8016700:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8016702:	429a      	cmp	r2, r3
 8016704:	da6d      	bge.n	80167e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016706:	69bb      	ldr	r3, [r7, #24]
 8016708:	7d9b      	ldrb	r3, [r3, #22]
 801670a:	f003 0301 	and.w	r3, r3, #1
 801670e:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8016710:	2b00      	cmp	r3, #0
 8016712:	d166      	bne.n	80167e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8016714:	69bb      	ldr	r3, [r7, #24]
 8016716:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016718:	2b00      	cmp	r3, #0
 801671a:	d062      	beq.n	80167e2 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801671c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801671e:	69b9      	ldr	r1, [r7, #24]
 8016720:	68f8      	ldr	r0, [r7, #12]
 8016722:	f7ff ff89 	bl	8016638 <prvTCPWindowTxAdd_FrontSegment>
 8016726:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8016728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	1ad3      	subs	r3, r2, r3
 801672e:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8016730:	6a3a      	ldr	r2, [r7, #32]
 8016732:	697b      	ldr	r3, [r7, #20]
 8016734:	4413      	add	r3, r2
 8016736:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	6839      	ldr	r1, [r7, #0]
 801673c:	69f8      	ldr	r0, [r7, #28]
 801673e:	f7ff ff61 	bl	8016604 <lTCPIncrementTxPosition>
 8016742:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8016744:	e04d      	b.n	80167e2 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016750:	461a      	mov	r2, r3
 8016752:	2300      	movs	r3, #0
 8016754:	68f8      	ldr	r0, [r7, #12]
 8016756:	f7ff fb61 	bl	8015e1c <xTCPWindowNew>
 801675a:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 801675c:	69bb      	ldr	r3, [r7, #24]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d037      	beq.n	80167d2 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	685b      	ldr	r3, [r3, #4]
 8016766:	4619      	mov	r1, r3
 8016768:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801676a:	f7f4 fc5b 	bl	800b024 <FreeRTOS_min_int32>
 801676e:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8016770:	69bb      	ldr	r3, [r7, #24]
 8016772:	697a      	ldr	r2, [r7, #20]
 8016774:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8016776:	69bb      	ldr	r3, [r7, #24]
 8016778:	69fa      	ldr	r2, [r7, #28]
 801677a:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 801677c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	1ad3      	subs	r3, r2, r3
 8016782:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016784:	697a      	ldr	r2, [r7, #20]
 8016786:	6839      	ldr	r1, [r7, #0]
 8016788:	69f8      	ldr	r0, [r7, #28]
 801678a:	f7ff ff3b 	bl	8016604 <lTCPIncrementTxPosition>
 801678e:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	441a      	add	r2, r3
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801679c:	6a3a      	ldr	r2, [r7, #32]
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	4413      	add	r3, r2
 80167a2:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80167aa:	69bb      	ldr	r3, [r7, #24]
 80167ac:	3318      	adds	r3, #24
 80167ae:	4619      	mov	r1, r3
 80167b0:	4610      	mov	r0, r2
 80167b2:	f7ff fa63 	bl	8015c7c <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80167b6:	69bb      	ldr	r3, [r7, #24]
 80167b8:	689a      	ldr	r2, [r3, #8]
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	429a      	cmp	r2, r3
 80167c0:	da03      	bge.n	80167ca <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	69ba      	ldr	r2, [r7, #24]
 80167c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80167c8:	e00b      	b.n	80167e2 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2200      	movs	r2, #0
 80167ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 80167d0:	e007      	b.n	80167e2 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 80167d2:	6a3b      	ldr	r3, [r7, #32]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d008      	beq.n	80167ea <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 80167d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80167da:	4807      	ldr	r0, [pc, #28]	@ (80167f8 <lTCPWindowTxAdd+0x124>)
 80167dc:	f00c f91c 	bl	8022a18 <lUDPLoggingPrintf>
                    }

                    break;
 80167e0:	e003      	b.n	80167ea <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 80167e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	dcae      	bgt.n	8016746 <lTCPWindowTxAdd+0x72>
 80167e8:	e000      	b.n	80167ec <lTCPWindowTxAdd+0x118>
                    break;
 80167ea:	bf00      	nop
                }
            }

            return lDone;
 80167ec:	6a3b      	ldr	r3, [r7, #32]
        }
 80167ee:	4618      	mov	r0, r3
 80167f0:	3728      	adds	r7, #40	@ 0x28
 80167f2:	46bd      	mov	sp, r7
 80167f4:	bd80      	pop	{r7, pc}
 80167f6:	bf00      	nop
 80167f8:	08027994 	.word	0x08027994

080167fc <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 80167fc:	b480      	push	{r7}
 80167fe:	b083      	sub	sp, #12
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801680a:	2b00      	cmp	r3, #0
 801680c:	d101      	bne.n	8016812 <xTCPWindowTxDone+0x16>
 801680e:	2301      	movs	r3, #1
 8016810:	e000      	b.n	8016814 <xTCPWindowTxDone+0x18>
 8016812:	2300      	movs	r3, #0
        }
 8016814:	4618      	mov	r0, r3
 8016816:	370c      	adds	r7, #12
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr

08016820 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016820:	b580      	push	{r7, lr}
 8016822:	b086      	sub	sp, #24
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	3354      	adds	r3, #84	@ 0x54
 801682e:	4618      	mov	r0, r3
 8016830:	f7ff fbb5 	bl	8015f9e <xTCPWindowPeekHead>
 8016834:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d102      	bne.n	8016842 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 801683c:	2300      	movs	r3, #0
 801683e:	613b      	str	r3, [r7, #16]
 8016840:	e02f      	b.n	80168a2 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	6a1b      	ldr	r3, [r3, #32]
 801684a:	429a      	cmp	r2, r3
 801684c:	d306      	bcc.n	801685c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	6a1b      	ldr	r3, [r3, #32]
 8016856:	1ad3      	subs	r3, r2, r3
 8016858:	617b      	str	r3, [r7, #20]
 801685a:	e001      	b.n	8016860 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 801685c:	2300      	movs	r3, #0
 801685e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8016860:	6979      	ldr	r1, [r7, #20]
 8016862:	6838      	ldr	r0, [r7, #0]
 8016864:	f7f4 fbee 	bl	800b044 <FreeRTOS_min_uint32>
 8016868:	4602      	mov	r2, r0
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	1a9b      	subs	r3, r3, r2
 801686e:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	461a      	mov	r2, r3
 8016876:	68bb      	ldr	r3, [r7, #8]
 8016878:	4293      	cmp	r3, r2
 801687a:	d302      	bcc.n	8016882 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 801687c:	2301      	movs	r3, #1
 801687e:	613b      	str	r3, [r7, #16]
 8016880:	e001      	b.n	8016886 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8016882:	2300      	movs	r3, #0
 8016884:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8016886:	697b      	ldr	r3, [r7, #20]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d00a      	beq.n	80168a2 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	689b      	ldr	r3, [r3, #8]
 8016894:	4619      	mov	r1, r3
 8016896:	697b      	ldr	r3, [r7, #20]
 8016898:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801689a:	429a      	cmp	r2, r3
 801689c:	d201      	bcs.n	80168a2 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 801689e:	2300      	movs	r3, #0
 80168a0:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 80168a2:	693b      	ldr	r3, [r7, #16]
        }
 80168a4:	4618      	mov	r0, r3
 80168a6:	3718      	adds	r7, #24
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b08a      	sub	sp, #40	@ 0x28
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	60f8      	str	r0, [r7, #12]
 80168b4:	60b9      	str	r1, [r7, #8]
 80168b6:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	2200      	movs	r2, #0
 80168bc:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d002      	beq.n	80168cc <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 80168c6:	2301      	movs	r3, #1
 80168c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80168ca:	e050      	b.n	801696e <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	3368      	adds	r3, #104	@ 0x68
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7ff fb64 	bl	8015f9e <xTCPWindowPeekHead>
 80168d6:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 80168d8:	6a3b      	ldr	r3, [r7, #32]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d01f      	beq.n	801691e <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80168e2:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80168e4:	6a3b      	ldr	r3, [r7, #32]
 80168e6:	3310      	adds	r3, #16
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ff f9e4 	bl	8015cb6 <ulTimerGetAge>
 80168ee:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80168f0:	6a3b      	ldr	r3, [r7, #32]
 80168f2:	7d1b      	ldrb	r3, [r3, #20]
 80168f4:	461a      	mov	r2, r3
 80168f6:	2301      	movs	r3, #1
 80168f8:	4093      	lsls	r3, r2
 80168fa:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	69fa      	ldr	r2, [r7, #28]
 8016900:	fb02 f303 	mul.w	r3, r2, r3
 8016904:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8016906:	697a      	ldr	r2, [r7, #20]
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	429a      	cmp	r2, r3
 801690c:	d904      	bls.n	8016918 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 801690e:	697a      	ldr	r2, [r7, #20]
 8016910:	69bb      	ldr	r3, [r7, #24]
 8016912:	1ad2      	subs	r2, r2, r3
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8016918:	2301      	movs	r3, #1
 801691a:	627b      	str	r3, [r7, #36]	@ 0x24
 801691c:	e027      	b.n	801696e <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	3354      	adds	r3, #84	@ 0x54
 8016922:	4618      	mov	r0, r3
 8016924:	f7ff fb3b 	bl	8015f9e <xTCPWindowPeekHead>
 8016928:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d102      	bne.n	8016936 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8016930:	2300      	movs	r3, #0
 8016932:	627b      	str	r3, [r7, #36]	@ 0x24
 8016934:	e01b      	b.n	801696e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016936:	68b9      	ldr	r1, [r7, #8]
 8016938:	68f8      	ldr	r0, [r7, #12]
 801693a:	f7ff ff71 	bl	8016820 <prvTCPWindowTxHasSpace>
 801693e:	4603      	mov	r3, r0
 8016940:	2b00      	cmp	r3, #0
 8016942:	d102      	bne.n	801694a <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8016944:	2300      	movs	r3, #0
 8016946:	627b      	str	r3, [r7, #36]	@ 0x24
 8016948:	e011      	b.n	801696e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	781b      	ldrb	r3, [r3, #0]
 801694e:	f003 0302 	and.w	r3, r3, #2
 8016952:	b2db      	uxtb	r3, r3
 8016954:	2b00      	cmp	r3, #0
 8016956:	d008      	beq.n	801696a <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016958:	6a3b      	ldr	r3, [r7, #32]
 801695a:	689a      	ldr	r2, [r3, #8]
 801695c:	6a3b      	ldr	r3, [r7, #32]
 801695e:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016960:	429a      	cmp	r2, r3
 8016962:	da02      	bge.n	801696a <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8016964:	2300      	movs	r3, #0
 8016966:	627b      	str	r3, [r7, #36]	@ 0x24
 8016968:	e001      	b.n	801696e <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801696a:	2301      	movs	r3, #1
 801696c:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 801696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016970:	4618      	mov	r0, r3
 8016972:	3728      	adds	r7, #40	@ 0x28
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}

08016978 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8016978:	b590      	push	{r4, r7, lr}
 801697a:	b087      	sub	sp, #28
 801697c:	af02      	add	r7, sp, #8
 801697e:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	3368      	adds	r3, #104	@ 0x68
 8016984:	4618      	mov	r0, r3
 8016986:	f7ff fb0a 	bl	8015f9e <xTCPWindowPeekHead>
 801698a:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d043      	beq.n	8016a1a <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	7d1b      	ldrb	r3, [r3, #20]
 8016996:	461a      	mov	r2, r3
 8016998:	2301      	movs	r3, #1
 801699a:	4093      	lsls	r3, r2
 801699c:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80169a2:	461a      	mov	r2, r3
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	fb02 f303 	mul.w	r3, r2, r3
 80169aa:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	3310      	adds	r3, #16
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7ff f980 	bl	8015cb6 <ulTimerGetAge>
 80169b6:	4602      	mov	r2, r0
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	4293      	cmp	r3, r2
 80169bc:	d22b      	bcs.n	8016a16 <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	3368      	adds	r3, #104	@ 0x68
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff fad2 	bl	8015f6c <xTCPWindowGetHead>
 80169c8:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2200      	movs	r2, #0
 80169ce:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80169d0:	4b14      	ldr	r3, [pc, #80]	@ (8016a24 <pxTCPWindowTx_GetWaitQueue+0xac>)
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d020      	beq.n	8016a1a <pxTCPWindowTx_GetWaitQueue+0xa2>
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80169de:	2b17      	cmp	r3, #23
 80169e0:	d01b      	beq.n	8016a1a <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80169e8:	4618      	mov	r0, r3
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80169f0:	461c      	mov	r4, r3
 80169f2:	68fb      	ldr	r3, [r7, #12]
 80169f4:	6899      	ldr	r1, [r3, #8]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	69db      	ldr	r3, [r3, #28]
 80169fe:	1ad3      	subs	r3, r2, r3
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	6812      	ldr	r2, [r2, #0]
 8016a04:	9201      	str	r2, [sp, #4]
 8016a06:	9300      	str	r3, [sp, #0]
 8016a08:	460b      	mov	r3, r1
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	4601      	mov	r1, r0
 8016a0e:	4806      	ldr	r0, [pc, #24]	@ (8016a28 <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016a10:	f00c f802 	bl	8022a18 <lUDPLoggingPrintf>
 8016a14:	e001      	b.n	8016a1a <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8016a16:	2300      	movs	r3, #0
 8016a18:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
        }
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3714      	adds	r7, #20
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd90      	pop	{r4, r7, pc}
 8016a24:	20001664 	.word	0x20001664
 8016a28:	080279d0 	.word	0x080279d0

08016a2c <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8016a2c:	b590      	push	{r4, r7, lr}
 8016a2e:	b087      	sub	sp, #28
 8016a30:	af02      	add	r7, sp, #8
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	3354      	adds	r3, #84	@ 0x54
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7ff faaf 	bl	8015f9e <xTCPWindowPeekHead>
 8016a40:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d04f      	beq.n	8016ae8 <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	781b      	ldrb	r3, [r3, #0]
 8016a4c:	f003 0302 	and.w	r3, r3, #2
 8016a50:	b2db      	uxtb	r3, r3
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d008      	beq.n	8016a68 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	689a      	ldr	r2, [r3, #8]
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	da02      	bge.n	8016a68 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8016a62:	2300      	movs	r3, #0
 8016a64:	60fb      	str	r3, [r7, #12]
 8016a66:	e03f      	b.n	8016ae8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016a68:	6839      	ldr	r1, [r7, #0]
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7ff fed8 	bl	8016820 <prvTCPWindowTxHasSpace>
 8016a70:	4603      	mov	r3, r0
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d102      	bne.n	8016a7c <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8016a76:	2300      	movs	r3, #0
 8016a78:	60fb      	str	r3, [r7, #12]
 8016a7a:	e035      	b.n	8016ae8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	3354      	adds	r3, #84	@ 0x54
 8016a80:	4618      	mov	r0, r3
 8016a82:	f7ff fa73 	bl	8015f6c <xTCPWindowGetHead>
 8016a86:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016a8c:	68fa      	ldr	r2, [r7, #12]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d102      	bne.n	8016a98 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	68fa      	ldr	r2, [r7, #12]
 8016a9e:	6892      	ldr	r2, [r2, #8]
 8016aa0:	441a      	add	r2, r3
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016aa6:	4b13      	ldr	r3, [pc, #76]	@ (8016af4 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	2b01      	cmp	r3, #1
 8016aac:	dd1c      	ble.n	8016ae8 <pxTCPWindowTx_GetTXQueue+0xbc>
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016ab4:	2b17      	cmp	r3, #23
 8016ab6:	d017      	beq.n	8016ae8 <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016abe:	4618      	mov	r0, r3
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016ac6:	461c      	mov	r4, r3
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6899      	ldr	r1, [r3, #8]
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	69db      	ldr	r3, [r3, #28]
 8016ad4:	1ad3      	subs	r3, r2, r3
 8016ad6:	683a      	ldr	r2, [r7, #0]
 8016ad8:	9201      	str	r2, [sp, #4]
 8016ada:	9300      	str	r3, [sp, #0]
 8016adc:	460b      	mov	r3, r1
 8016ade:	4622      	mov	r2, r4
 8016ae0:	4601      	mov	r1, r0
 8016ae2:	4805      	ldr	r0, [pc, #20]	@ (8016af8 <pxTCPWindowTx_GetTXQueue+0xcc>)
 8016ae4:	f00b ff98 	bl	8022a18 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
        }
 8016aea:	4618      	mov	r0, r3
 8016aec:	3714      	adds	r7, #20
 8016aee:	46bd      	mov	sp, r7
 8016af0:	bd90      	pop	{r4, r7, pc}
 8016af2:	bf00      	nop
 8016af4:	20001664 	.word	0x20001664
 8016af8:	08027a1c 	.word	0x08027a1c

08016afc <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8016afc:	b590      	push	{r4, r7, lr}
 8016afe:	b08b      	sub	sp, #44	@ 0x2c
 8016b00:	af02      	add	r7, sp, #8
 8016b02:	60f8      	str	r0, [r7, #12]
 8016b04:	60b9      	str	r1, [r7, #8]
 8016b06:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	3340      	adds	r3, #64	@ 0x40
 8016b10:	4618      	mov	r0, r3
 8016b12:	f7ff fa2b 	bl	8015f6c <xTCPWindowGetHead>
 8016b16:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016b20:	69fb      	ldr	r3, [r7, #28]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d01c      	beq.n	8016b60 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8016b26:	4b41      	ldr	r3, [pc, #260]	@ (8016c2c <ulTCPWindowTxGet+0x130>)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d024      	beq.n	8016b78 <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016b34:	4618      	mov	r0, r3
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016b3c:	461c      	mov	r4, r3
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	6899      	ldr	r1, [r3, #8]
 8016b42:	69fb      	ldr	r3, [r7, #28]
 8016b44:	681a      	ldr	r2, [r3, #0]
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	69db      	ldr	r3, [r3, #28]
 8016b4a:	1ad3      	subs	r3, r2, r3
 8016b4c:	68ba      	ldr	r2, [r7, #8]
 8016b4e:	9201      	str	r2, [sp, #4]
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	460b      	mov	r3, r1
 8016b54:	4622      	mov	r2, r4
 8016b56:	4601      	mov	r1, r0
 8016b58:	4835      	ldr	r0, [pc, #212]	@ (8016c30 <ulTCPWindowTxGet+0x134>)
 8016b5a:	f00b ff5d 	bl	8022a18 <lUDPLoggingPrintf>
 8016b5e:	e00b      	b.n	8016b78 <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f7ff ff09 	bl	8016978 <pxTCPWindowTx_GetWaitQueue>
 8016b66:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d104      	bne.n	8016b78 <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8016b6e:	68b9      	ldr	r1, [r7, #8]
 8016b70:	68f8      	ldr	r0, [r7, #12]
 8016b72:	f7ff ff5b 	bl	8016a2c <pxTCPWindowTx_GetTXQueue>
 8016b76:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8016b78:	69fb      	ldr	r3, [r7, #28]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d051      	beq.n	8016c22 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8016b7e:	69fb      	ldr	r3, [r7, #28]
 8016b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d004      	beq.n	8016b90 <ulTCPWindowTxGet+0x94>
 8016b86:	f240 7136 	movw	r1, #1846	@ 0x736
 8016b8a:	482a      	ldr	r0, [pc, #168]	@ (8016c34 <ulTCPWindowTxGet+0x138>)
 8016b8c:	f7ea ff7e 	bl	8001a8c <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016b96:	69fb      	ldr	r3, [r7, #28]
 8016b98:	3318      	adds	r3, #24
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	4610      	mov	r0, r2
 8016b9e:	f7ff f86d 	bl	8015c7c <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8016ba2:	69fa      	ldr	r2, [r7, #28]
 8016ba4:	7d93      	ldrb	r3, [r2, #22]
 8016ba6:	f043 0301 	orr.w	r3, r3, #1
 8016baa:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8016bac:	69fb      	ldr	r3, [r7, #28]
 8016bae:	7d1b      	ldrb	r3, [r3, #20]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	b2da      	uxtb	r2, r3
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016bb8:	69fb      	ldr	r3, [r7, #28]
 8016bba:	7d1b      	ldrb	r3, [r3, #20]
 8016bbc:	2b04      	cmp	r3, #4
 8016bbe:	d120      	bne.n	8016c02 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	689a      	ldr	r2, [r3, #8]
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016bca:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016bcc:	429a      	cmp	r2, r3
 8016bce:	d918      	bls.n	8016c02 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016bd6:	005b      	lsls	r3, r3, #1
 8016bd8:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016be0:	4619      	mov	r1, r3
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016be8:	4618      	mov	r0, r3
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	689a      	ldr	r2, [r3, #8]
 8016bee:	8afb      	ldrh	r3, [r7, #22]
 8016bf0:	9300      	str	r3, [sp, #0]
 8016bf2:	4613      	mov	r3, r2
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	4810      	ldr	r0, [pc, #64]	@ (8016c38 <ulTCPWindowTxGet+0x13c>)
 8016bf8:	f00b ff0e 	bl	8022a18 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8016bfc:	8afa      	ldrh	r2, [r7, #22]
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	3310      	adds	r3, #16
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7ff f848 	bl	8015c9c <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	681a      	ldr	r2, [r3, #0]
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	68da      	ldr	r2, [r3, #12]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	689b      	ldr	r3, [r3, #8]
 8016c20:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016c22:	69bb      	ldr	r3, [r7, #24]
        }
 8016c24:	4618      	mov	r0, r3
 8016c26:	3724      	adds	r7, #36	@ 0x24
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	bd90      	pop	{r4, r7, pc}
 8016c2c:	20001664 	.word	0x20001664
 8016c30:	08027a68 	.word	0x08027a68
 8016c34:	08027704 	.word	0x08027704
 8016c38:	08027ab4 	.word	0x08027ab4

08016c3c <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	3310      	adds	r3, #16
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7ff f833 	bl	8015cb6 <ulTimerGetAge>
 8016c50:	4603      	mov	r3, r0
 8016c52:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c58:	68fa      	ldr	r2, [r7, #12]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	dc0e      	bgt.n	8016c7c <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c62:	4613      	mov	r3, r2
 8016c64:	00db      	lsls	r3, r3, #3
 8016c66:	1a9a      	subs	r2, r3, r2
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	4413      	add	r3, r2
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	da00      	bge.n	8016c72 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016c70:	3307      	adds	r3, #7
 8016c72:	10db      	asrs	r3, r3, #3
 8016c74:	461a      	mov	r2, r3
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	639a      	str	r2, [r3, #56]	@ 0x38
 8016c7a:	e00d      	b.n	8016c98 <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016c80:	4613      	mov	r3, r2
 8016c82:	005b      	lsls	r3, r3, #1
 8016c84:	441a      	add	r2, r3
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	4413      	add	r3, r2
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	da00      	bge.n	8016c90 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016c8e:	3303      	adds	r3, #3
 8016c90:	109b      	asrs	r3, r3, #2
 8016c92:	461a      	mov	r2, r3
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c9c:	2b31      	cmp	r3, #49	@ 0x31
 8016c9e:	dc02      	bgt.n	8016ca6 <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2232      	movs	r2, #50	@ 0x32
 8016ca4:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8016ca6:	bf00      	nop
 8016ca8:	3710      	adds	r7, #16
 8016caa:	46bd      	mov	sp, r7
 8016cac:	bd80      	pop	{r7, pc}
	...

08016cb0 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8016cb0:	b5b0      	push	{r4, r5, r7, lr}
 8016cb2:	b090      	sub	sp, #64	@ 0x40
 8016cb4:	af04      	add	r7, sp, #16
 8016cb6:	60f8      	str	r0, [r7, #12]
 8016cb8:	60b9      	str	r1, [r7, #8]
 8016cba:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	3398      	adds	r3, #152	@ 0x98
 8016cc8:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8016cca:	69fb      	ldr	r3, [r7, #28]
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016cd0:	e0a6      	b.n	8016e20 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cd8:	68db      	ldr	r3, [r3, #12]
 8016cda:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8016cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8016ce2:	69bb      	ldr	r3, [r7, #24]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016cea:	f7fe ff9c 	bl	8015c26 <xSequenceGreaterThan>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	f040 8094 	bne.w	8016e1e <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	f040 809c 	bne.w	8016e3a <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8016d02:	69bb      	ldr	r3, [r7, #24]
 8016d04:	689b      	ldr	r3, [r3, #8]
 8016d06:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016d08:	69bb      	ldr	r3, [r7, #24]
 8016d0a:	7d9b      	ldrb	r3, [r3, #22]
 8016d0c:	f003 0302 	and.w	r3, r3, #2
 8016d10:	b2db      	uxtb	r3, r3
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d144      	bne.n	8016da0 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8016d16:	69bb      	ldr	r3, [r7, #24]
 8016d18:	681a      	ldr	r2, [r3, #0]
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	6879      	ldr	r1, [r7, #4]
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7fe ff80 	bl	8015c26 <xSequenceGreaterThan>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d023      	beq.n	8016d74 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016d2c:	69bb      	ldr	r3, [r7, #24]
 8016d2e:	681a      	ldr	r2, [r3, #0]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	69db      	ldr	r3, [r3, #28]
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016d3e:	461c      	mov	r4, r3
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016d46:	461d      	mov	r5, r3
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	69db      	ldr	r3, [r3, #28]
 8016d4c:	693a      	ldr	r2, [r7, #16]
 8016d4e:	1ad0      	subs	r0, r2, r3
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	69db      	ldr	r3, [r3, #28]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	1ad3      	subs	r3, r2, r3
 8016d58:	6939      	ldr	r1, [r7, #16]
 8016d5a:	697a      	ldr	r2, [r7, #20]
 8016d5c:	440a      	add	r2, r1
 8016d5e:	9202      	str	r2, [sp, #8]
 8016d60:	693a      	ldr	r2, [r7, #16]
 8016d62:	9201      	str	r2, [sp, #4]
 8016d64:	9300      	str	r3, [sp, #0]
 8016d66:	4603      	mov	r3, r0
 8016d68:	462a      	mov	r2, r5
 8016d6a:	4621      	mov	r1, r4
 8016d6c:	4836      	ldr	r0, [pc, #216]	@ (8016e48 <prvTCPWindowTxCheckAck+0x198>)
 8016d6e:	f00b fe53 	bl	8022a18 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016d72:	e063      	b.n	8016e3c <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016d74:	69ba      	ldr	r2, [r7, #24]
 8016d76:	7d93      	ldrb	r3, [r2, #22]
 8016d78:	f043 0302 	orr.w	r3, r3, #2
 8016d7c:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	7d1b      	ldrb	r3, [r3, #20]
 8016d82:	2b01      	cmp	r3, #1
 8016d84:	d10a      	bne.n	8016d9c <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	697b      	ldr	r3, [r7, #20]
 8016d8c:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016d8e:	687a      	ldr	r2, [r7, #4]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d103      	bne.n	8016d9c <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016d94:	69b9      	ldr	r1, [r7, #24]
 8016d96:	68f8      	ldr	r0, [r7, #12]
 8016d98:	f7ff ff50 	bl	8016c3c <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	6a1b      	ldr	r3, [r3, #32]
 8016da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d128      	bne.n	8016dfc <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016daa:	4b28      	ldr	r3, [pc, #160]	@ (8016e4c <prvTCPWindowTxCheckAck+0x19c>)
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	dd15      	ble.n	8016dde <prvTCPWindowTxCheckAck+0x12e>
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016db8:	2b17      	cmp	r3, #23
 8016dba:	d010      	beq.n	8016dde <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	69db      	ldr	r3, [r3, #28]
 8016dc0:	68ba      	ldr	r2, [r7, #8]
 8016dc2:	1ad1      	subs	r1, r2, r3
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	69db      	ldr	r3, [r3, #28]
 8016dc8:	687a      	ldr	r2, [r7, #4]
 8016dca:	1ad0      	subs	r0, r2, r3
 8016dcc:	69bb      	ldr	r3, [r7, #24]
 8016dce:	681a      	ldr	r2, [r3, #0]
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	69db      	ldr	r3, [r3, #28]
 8016dd4:	1ad3      	subs	r3, r2, r3
 8016dd6:	4602      	mov	r2, r0
 8016dd8:	481d      	ldr	r0, [pc, #116]	@ (8016e50 <prvTCPWindowTxCheckAck+0x1a0>)
 8016dda:	f00b fe1d 	bl	8022a18 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6a1a      	ldr	r2, [r3, #32]
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	441a      	add	r2, r3
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8016dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016dec:	697b      	ldr	r3, [r7, #20]
 8016dee:	4413      	add	r3, r2
 8016df0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016df2:	69b8      	ldr	r0, [r7, #24]
 8016df4:	f7ff f8ec 	bl	8015fd0 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016dfc:	6a3b      	ldr	r3, [r7, #32]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d008      	beq.n	8016e14 <prvTCPWindowTxCheckAck+0x164>
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d004      	beq.n	8016e14 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	3318      	adds	r3, #24
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7ec fe38 	bl	8003a84 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e16:	697b      	ldr	r3, [r7, #20]
 8016e18:	4413      	add	r3, r2
 8016e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e1c:	e000      	b.n	8016e20 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016e1e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e22:	69fb      	ldr	r3, [r7, #28]
 8016e24:	429a      	cmp	r2, r3
 8016e26:	d009      	beq.n	8016e3c <prvTCPWindowTxCheckAck+0x18c>
 8016e28:	6879      	ldr	r1, [r7, #4]
 8016e2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016e2c:	f7fe fee5 	bl	8015bfa <xSequenceLessThan>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	f47f af4d 	bne.w	8016cd2 <prvTCPWindowTxCheckAck+0x22>
 8016e38:	e000      	b.n	8016e3c <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8016e3a:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016e3e:	4618      	mov	r0, r3
 8016e40:	3730      	adds	r7, #48	@ 0x30
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bdb0      	pop	{r4, r5, r7, pc}
 8016e46:	bf00      	nop
 8016e48:	08027aec 	.word	0x08027aec
 8016e4c:	20001664 	.word	0x20001664
 8016e50:	08027b34 	.word	0x08027b34

08016e54 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b086      	sub	sp, #24
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
 8016e5c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	3370      	adds	r3, #112	@ 0x70
 8016e66:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	685b      	ldr	r3, [r3, #4]
 8016e6c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016e6e:	e049      	b.n	8016f04 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016e70:	697b      	ldr	r3, [r7, #20]
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	7d9b      	ldrb	r3, [r3, #22]
 8016e80:	f003 0302 	and.w	r3, r3, #2
 8016e84:	b2db      	uxtb	r3, r3
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d13c      	bne.n	8016f04 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8016e8a:	68bb      	ldr	r3, [r7, #8]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	6839      	ldr	r1, [r7, #0]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7fe feb2 	bl	8015bfa <xSequenceLessThan>
 8016e96:	4603      	mov	r3, r0
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d033      	beq.n	8016f04 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	7d5b      	ldrb	r3, [r3, #21]
 8016ea0:	3301      	adds	r3, #1
 8016ea2:	b2da      	uxtb	r2, r3
 8016ea4:	68bb      	ldr	r3, [r7, #8]
 8016ea6:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	7d5b      	ldrb	r3, [r3, #21]
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d129      	bne.n	8016f04 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016eb6:	4b18      	ldr	r3, [pc, #96]	@ (8016f18 <prvTCPWindowFastRetransmit+0xc4>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	db11      	blt.n	8016ee2 <prvTCPWindowFastRetransmit+0x8e>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016ec4:	2b17      	cmp	r3, #23
 8016ec6:	d00c      	beq.n	8016ee2 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	681a      	ldr	r2, [r3, #0]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	69db      	ldr	r3, [r3, #28]
 8016ed0:	1ad1      	subs	r1, r2, r3
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	69db      	ldr	r3, [r3, #28]
 8016ed6:	683a      	ldr	r2, [r7, #0]
 8016ed8:	1ad3      	subs	r3, r2, r3
 8016eda:	461a      	mov	r2, r3
 8016edc:	480f      	ldr	r0, [pc, #60]	@ (8016f1c <prvTCPWindowFastRetransmit+0xc8>)
 8016ede:	f00b fd9b 	bl	8022a18 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	3318      	adds	r3, #24
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7ec fdcc 	bl	8003a84 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	3318      	adds	r3, #24
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	4610      	mov	r0, r2
 8016efa:	f7fe febf 	bl	8015c7c <vListInsertFifo>
                            ulCount++;
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	3301      	adds	r3, #1
 8016f02:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016f04:	697a      	ldr	r2, [r7, #20]
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d1b1      	bne.n	8016e70 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016f0c:	693b      	ldr	r3, [r7, #16]
        }
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3718      	adds	r7, #24
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	20001664 	.word	0x20001664
 8016f1c:	08027b70 	.word	0x08027b70

08016f20 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b084      	sub	sp, #16
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6a1b      	ldr	r3, [r3, #32]
 8016f2e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016f30:	68b9      	ldr	r1, [r7, #8]
 8016f32:	6838      	ldr	r0, [r7, #0]
 8016f34:	f7fe fe4c 	bl	8015bd0 <xSequenceLessThanOrEqual>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d002      	beq.n	8016f44 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	60fb      	str	r3, [r7, #12]
 8016f42:	e005      	b.n	8016f50 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016f44:	683a      	ldr	r2, [r7, #0]
 8016f46:	68b9      	ldr	r1, [r7, #8]
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f7ff feb1 	bl	8016cb0 <prvTCPWindowTxCheckAck>
 8016f4e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016f50:	68fb      	ldr	r3, [r7, #12]
        }
 8016f52:	4618      	mov	r0, r3
 8016f54:	3710      	adds	r7, #16
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
	...

08016f5c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016f5c:	b5b0      	push	{r4, r5, r7, lr}
 8016f5e:	b088      	sub	sp, #32
 8016f60:	af02      	add	r7, sp, #8
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	6a1b      	ldr	r3, [r3, #32]
 8016f6c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016f6e:	687a      	ldr	r2, [r7, #4]
 8016f70:	68b9      	ldr	r1, [r7, #8]
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f7ff fe9c 	bl	8016cb0 <prvTCPWindowTxCheckAck>
 8016f78:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8016f7a:	68b9      	ldr	r1, [r7, #8]
 8016f7c:	68f8      	ldr	r0, [r7, #12]
 8016f7e:	f7ff ff69 	bl	8016e54 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016f82:	4b16      	ldr	r3, [pc, #88]	@ (8016fdc <ulTCPWindowTxSack+0x80>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	dd23      	ble.n	8016fd2 <ulTCPWindowTxSack+0x76>
 8016f8a:	6979      	ldr	r1, [r7, #20]
 8016f8c:	68b8      	ldr	r0, [r7, #8]
 8016f8e:	f7fe fe4a 	bl	8015c26 <xSequenceGreaterThan>
 8016f92:	4603      	mov	r3, r0
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d01c      	beq.n	8016fd2 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016f9e:	461c      	mov	r4, r3
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016fa6:	461d      	mov	r5, r3
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	69db      	ldr	r3, [r3, #28]
 8016fac:	68ba      	ldr	r2, [r7, #8]
 8016fae:	1ad0      	subs	r0, r2, r3
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	69db      	ldr	r3, [r3, #28]
 8016fb4:	687a      	ldr	r2, [r7, #4]
 8016fb6:	1ad3      	subs	r3, r2, r3
 8016fb8:	68fa      	ldr	r2, [r7, #12]
 8016fba:	6a11      	ldr	r1, [r2, #32]
 8016fbc:	68fa      	ldr	r2, [r7, #12]
 8016fbe:	69d2      	ldr	r2, [r2, #28]
 8016fc0:	1a8a      	subs	r2, r1, r2
 8016fc2:	9201      	str	r2, [sp, #4]
 8016fc4:	9300      	str	r3, [sp, #0]
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	462a      	mov	r2, r5
 8016fca:	4621      	mov	r1, r4
 8016fcc:	4804      	ldr	r0, [pc, #16]	@ (8016fe0 <ulTCPWindowTxSack+0x84>)
 8016fce:	f00b fd23 	bl	8022a18 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016fd2:	693b      	ldr	r3, [r7, #16]
        }
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3718      	adds	r7, #24
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bdb0      	pop	{r4, r5, r7, pc}
 8016fdc:	20001664 	.word	0x20001664
 8016fe0:	08027bb0 	.word	0x08027bb0

08016fe4 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b084      	sub	sp, #16
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d014      	beq.n	801701c <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ff6:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	899b      	ldrh	r3, [r3, #12]
 8016ffc:	b29b      	uxth	r3, r3
 8016ffe:	2b08      	cmp	r3, #8
 8017000:	d004      	beq.n	801700c <vProcessGeneratedUDPPacket+0x28>
 8017002:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8017006:	4293      	cmp	r3, r2
 8017008:	d004      	beq.n	8017014 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 801700a:	e007      	b.n	801701c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 801700c:	6878      	ldr	r0, [r7, #4]
 801700e:	f000 f845 	bl	801709c <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8017012:	e003      	b.n	801701c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8017014:	6878      	ldr	r0, [r7, #4]
 8017016:	f000 fae3 	bl	80175e0 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 801701a:	bf00      	nop
        }
    }
}
 801701c:	bf00      	nop
 801701e:	3710      	adds	r7, #16
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}

08017024 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b086      	sub	sp, #24
 8017028:	af00      	add	r7, sp, #0
 801702a:	60f8      	str	r0, [r7, #12]
 801702c:	460b      	mov	r3, r1
 801702e:	607a      	str	r2, [r7, #4]
 8017030:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8017032:	2300      	movs	r3, #0
 8017034:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d103      	bne.n	8017044 <xProcessReceivedUDPPacket+0x20>
 801703c:	2178      	movs	r1, #120	@ 0x78
 801703e:	4816      	ldr	r0, [pc, #88]	@ (8017098 <xProcessReceivedUDPPacket+0x74>)
 8017040:	f7ea fd24 	bl	8001a8c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017048:	2b00      	cmp	r3, #0
 801704a:	d103      	bne.n	8017054 <xProcessReceivedUDPPacket+0x30>
 801704c:	2179      	movs	r1, #121	@ 0x79
 801704e:	4812      	ldr	r0, [pc, #72]	@ (8017098 <xProcessReceivedUDPPacket+0x74>)
 8017050:	f7ea fd1c 	bl	8001a8c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017058:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801705a:	693b      	ldr	r3, [r7, #16]
 801705c:	899b      	ldrh	r3, [r3, #12]
 801705e:	b29b      	uxth	r3, r3
 8017060:	2b08      	cmp	r3, #8
 8017062:	d004      	beq.n	801706e <xProcessReceivedUDPPacket+0x4a>
 8017064:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8017068:	4293      	cmp	r3, r2
 801706a:	d008      	beq.n	801707e <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 801706c:	e00f      	b.n	801708e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 801706e:	897b      	ldrh	r3, [r7, #10]
 8017070:	687a      	ldr	r2, [r7, #4]
 8017072:	4619      	mov	r1, r3
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f000 f92f 	bl	80172d8 <xProcessReceivedUDPPacket_IPv4>
 801707a:	6178      	str	r0, [r7, #20]
                break;
 801707c:	e007      	b.n	801708e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 801707e:	897b      	ldrh	r3, [r7, #10]
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	4619      	mov	r1, r3
 8017084:	68f8      	ldr	r0, [r7, #12]
 8017086:	f000 fbdd 	bl	8017844 <xProcessReceivedUDPPacket_IPv6>
 801708a:	6178      	str	r0, [r7, #20]
                break;
 801708c:	bf00      	nop
    }

    return xReturn;
 801708e:	697b      	ldr	r3, [r7, #20]
}
 8017090:	4618      	mov	r0, r3
 8017092:	3718      	adds	r7, #24
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}
 8017098:	08027be4 	.word	0x08027be4

0801709c <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08e      	sub	sp, #56	@ 0x38
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	695b      	ldr	r3, [r3, #20]
 80170a8:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170ae:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170b4:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d104      	bne.n	80170c8 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170c2:	3b2a      	subs	r3, #42	@ 0x2a
 80170c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80170c6:	e003      	b.n	80170d0 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170cc:	3b2a      	subs	r3, #42	@ 0x2a
 80170ce:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 80170d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80170d2:	f107 0208 	add.w	r2, r7, #8
 80170d6:	f107 030c 	add.w	r3, r7, #12
 80170da:	4618      	mov	r0, r3
 80170dc:	f7f0 fc4a 	bl	8007974 <eARPGetCacheEntry>
 80170e0:	4603      	mov	r3, r0
 80170e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d102      	bne.n	80170f4 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80170ee:	68ba      	ldr	r2, [r7, #8]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 80170f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80170f8:	2b02      	cmp	r3, #2
 80170fa:	f000 80a0 	beq.w	801723e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 80170fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017102:	2b01      	cmp	r3, #1
 8017104:	d176      	bne.n	80171f4 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8017106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017108:	330e      	adds	r3, #14
 801710a:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017110:	2b00      	cmp	r3, #0
 8017112:	d025      	beq.n	8017160 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8017114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017116:	3322      	adds	r3, #34	@ 0x22
 8017118:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 801711e:	6a3b      	ldr	r3, [r7, #32]
 8017120:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8017126:	6a3b      	ldr	r3, [r7, #32]
 8017128:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801712c:	b29b      	uxth	r3, r3
 801712e:	3308      	adds	r3, #8
 8017130:	b29a      	uxth	r2, r3
 8017132:	6a3b      	ldr	r3, [r7, #32]
 8017134:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8017136:	6a3b      	ldr	r3, [r7, #32]
 8017138:	889b      	ldrh	r3, [r3, #4]
 801713a:	b29b      	uxth	r3, r3
 801713c:	021b      	lsls	r3, r3, #8
 801713e:	b21a      	sxth	r2, r3
 8017140:	6a3b      	ldr	r3, [r7, #32]
 8017142:	889b      	ldrh	r3, [r3, #4]
 8017144:	b29b      	uxth	r3, r3
 8017146:	0a1b      	lsrs	r3, r3, #8
 8017148:	b29b      	uxth	r3, r3
 801714a:	b21b      	sxth	r3, r3
 801714c:	4313      	orrs	r3, r2
 801714e:	b21b      	sxth	r3, r3
 8017150:	b29a      	uxth	r2, r3
 8017152:	6a3b      	ldr	r3, [r7, #32]
 8017154:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8017156:	6a3b      	ldr	r3, [r7, #32]
 8017158:	2200      	movs	r2, #0
 801715a:	719a      	strb	r2, [r3, #6]
 801715c:	2200      	movs	r2, #0
 801715e:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8017160:	4b5b      	ldr	r3, [pc, #364]	@ (80172d0 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8017162:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017168:	3306      	adds	r3, #6
 801716a:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 801716c:	2218      	movs	r2, #24
 801716e:	69f9      	ldr	r1, [r7, #28]
 8017170:	69b8      	ldr	r0, [r7, #24]
 8017172:	f00b fe6d 	bl	8022e50 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801717a:	2b00      	cmp	r3, #0
 801717c:	d109      	bne.n	8017192 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 801717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017180:	2201      	movs	r2, #1
 8017182:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8017184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017186:	b29b      	uxth	r3, r3
 8017188:	331c      	adds	r3, #28
 801718a:	b29a      	uxth	r2, r3
 801718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801718e:	805a      	strh	r2, [r3, #2]
 8017190:	e005      	b.n	801719e <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8017192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017194:	b29b      	uxth	r3, r3
 8017196:	331c      	adds	r3, #28
 8017198:	b29a      	uxth	r2, r3
 801719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801719c:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 801719e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171a0:	885b      	ldrh	r3, [r3, #2]
 80171a2:	b29b      	uxth	r3, r3
 80171a4:	021b      	lsls	r3, r3, #8
 80171a6:	b21a      	sxth	r2, r3
 80171a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171aa:	885b      	ldrh	r3, [r3, #2]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	0a1b      	lsrs	r3, r3, #8
 80171b0:	b29b      	uxth	r3, r3
 80171b2:	b21b      	sxth	r3, r3
 80171b4:	4313      	orrs	r3, r2
 80171b6:	b21b      	sxth	r3, r3
 80171b8:	b29a      	uxth	r2, r3
 80171ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171bc:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	695a      	ldr	r2, [r3, #20]
 80171c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171c4:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d004      	beq.n	80171d8 <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171d2:	681a      	ldr	r2, [r3, #0]
 80171d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171d6:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80171d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171da:	2200      	movs	r2, #0
 80171dc:	719a      	strb	r2, [r3, #6]
 80171de:	2200      	movs	r2, #0
 80171e0:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	695b      	ldr	r3, [r3, #20]
 80171e6:	4a3b      	ldr	r2, [pc, #236]	@ (80172d4 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 80171e8:	4293      	cmp	r3, r2
 80171ea:	d128      	bne.n	801723e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 80171ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171ee:	2201      	movs	r2, #1
 80171f0:	721a      	strb	r2, [r3, #8]
 80171f2:	e024      	b.n	801723e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80171f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d11d      	bne.n	8017238 <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	2200      	movs	r2, #0
 8017200:	4619      	mov	r1, r3
 8017202:	2000      	movs	r0, #0
 8017204:	f7f0 faa2 	bl	800774c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	695b      	ldr	r3, [r3, #20]
 801720c:	210b      	movs	r1, #11
 801720e:	4618      	mov	r0, r3
 8017210:	f7f6 fe3a 	bl	800de88 <FreeRTOS_FindEndPointOnNetMask>
 8017214:	4602      	mov	r2, r0
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801721e:	2b00      	cmp	r3, #0
 8017220:	d103      	bne.n	801722a <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8017222:	2302      	movs	r3, #2
 8017224:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017228:	e009      	b.n	801723e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801722a:	68fa      	ldr	r2, [r7, #12]
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f7f0 fe07 	bl	8007e44 <vARPGenerateRequestPacket>
 8017236:	e002      	b.n	801723e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8017238:	2302      	movs	r3, #2
 801723a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 801723e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017242:	2b02      	cmp	r3, #2
 8017244:	d03d      	beq.n	80172c2 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801724a:	2b00      	cmp	r3, #0
 801724c:	d035      	beq.n	80172ba <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017252:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017256:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801725c:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 801725e:	693b      	ldr	r3, [r7, #16]
 8017260:	1d98      	adds	r0, r3, #6
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017266:	33e8      	adds	r3, #232	@ 0xe8
 8017268:	2206      	movs	r2, #6
 801726a:	4619      	mov	r1, r3
 801726c:	f00b fdf0 	bl	8022e50 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017274:	2b3b      	cmp	r3, #59	@ 0x3b
 8017276:	d812      	bhi.n	801729e <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801727c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801727e:	e008      	b.n	8017292 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017286:	4413      	add	r3, r2
 8017288:	2200      	movs	r2, #0
 801728a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801728e:	3301      	adds	r3, #1
 8017290:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017294:	2b3b      	cmp	r3, #59	@ 0x3b
 8017296:	ddf3      	ble.n	8017280 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	223c      	movs	r2, #60	@ 0x3c
 801729c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d011      	beq.n	80172c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80172a4:	697b      	ldr	r3, [r7, #20]
 80172a6:	68db      	ldr	r3, [r3, #12]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d00d      	beq.n	80172c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80172ac:	697b      	ldr	r3, [r7, #20]
 80172ae:	68db      	ldr	r3, [r3, #12]
 80172b0:	2201      	movs	r2, #1
 80172b2:	6879      	ldr	r1, [r7, #4]
 80172b4:	6978      	ldr	r0, [r7, #20]
 80172b6:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 80172b8:	e006      	b.n	80172c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f000 fca2 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
}
 80172c0:	e002      	b.n	80172c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f000 fc9e 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
}
 80172c8:	bf00      	nop
 80172ca:	3738      	adds	r7, #56	@ 0x38
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	08028310 	.word	0x08028310
 80172d4:	fc0000e0 	.word	0xfc0000e0

080172d8 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 80172d8:	b590      	push	{r4, r7, lr}
 80172da:	b099      	sub	sp, #100	@ 0x64
 80172dc:	af02      	add	r7, sp, #8
 80172de:	60f8      	str	r0, [r7, #12]
 80172e0:	460b      	mov	r3, r1
 80172e2:	607a      	str	r2, [r7, #4]
 80172e4:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 80172e6:	2301      	movs	r3, #1
 80172e8:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d104      	bne.n	80172fa <xProcessReceivedUDPPacket_IPv4+0x22>
 80172f0:	f240 116f 	movw	r1, #367	@ 0x16f
 80172f4:	4872      	ldr	r0, [pc, #456]	@ (80174c0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 80172f6:	f7ea fbc9 	bl	8001a8c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d104      	bne.n	801730c <xProcessReceivedUDPPacket_IPv4+0x34>
 8017302:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8017306:	486e      	ldr	r0, [pc, #440]	@ (80174c0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017308:	f7ea fbc0 	bl	8001a8c <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017310:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017316:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017318:	897b      	ldrh	r3, [r7, #10]
 801731a:	4618      	mov	r0, r3
 801731c:	f7f8 fb42 	bl	800f9a4 <pxUDPSocketLookup>
 8017320:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	2200      	movs	r2, #0
 8017326:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8017328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801732a:	2b00      	cmp	r3, #0
 801732c:	f000 8085 	beq.w	801743a <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8017330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017332:	2b00      	cmp	r3, #0
 8017334:	d018      	beq.n	8017368 <xProcessReceivedUDPPacket_IPv4+0x90>
 8017336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d014      	beq.n	8017368 <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 801733e:	68f8      	ldr	r0, [r7, #12]
 8017340:	f7f0 f8ee 	bl	8007520 <xCheckRequiresARPResolution>
 8017344:	4603      	mov	r3, r0
 8017346:	2b01      	cmp	r3, #1
 8017348:	d105      	bne.n	8017356 <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2201      	movs	r2, #1
 801734e:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8017350:	2300      	movs	r3, #0
 8017352:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8017354:	e0ae      	b.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8017356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017358:	1d9a      	adds	r2, r3, #6
 801735a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801735c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8017360:	4619      	mov	r1, r3
 8017362:	4610      	mov	r0, r2
 8017364:	f7f0 f9bc 	bl	80076e0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8017368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801736a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801736c:	2b00      	cmp	r3, #0
 801736e:	d02f      	beq.n	80173d0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017374:	332a      	adds	r3, #42	@ 0x2a
 8017376:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8017378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801737a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801737c:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017382:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	695b      	ldr	r3, [r3, #20]
 8017388:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801738a:	2302      	movs	r3, #2
 801738c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8017390:	2318      	movs	r3, #24
 8017392:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8017396:	897b      	ldrh	r3, [r7, #10]
 8017398:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801739a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801739c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80173a0:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80173a2:	2302      	movs	r3, #2
 80173a4:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80173a6:	2318      	movs	r3, #24
 80173a8:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173ae:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 80173b2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80173b6:	f107 0310 	add.w	r3, r7, #16
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80173be:	460b      	mov	r3, r1
 80173c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80173c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80173c4:	47a0      	blx	r4
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d001      	beq.n	80173d0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80173cc:	2300      	movs	r3, #0
 80173ce:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80173d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80173d2:	2b01      	cmp	r3, #1
 80173d4:	d16e      	bne.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80173d6:	f7ed fc3d 	bl	8004c54 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80173da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173dc:	3354      	adds	r3, #84	@ 0x54
 80173de:	68fa      	ldr	r2, [r7, #12]
 80173e0:	4611      	mov	r1, r2
 80173e2:	4618      	mov	r0, r3
 80173e4:	f7ec faf1 	bl	80039ca <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80173e8:	f7ed fc42 	bl	8004c70 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80173ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173ee:	685b      	ldr	r3, [r3, #4]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d005      	beq.n	8017400 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80173f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	2101      	movs	r1, #1
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7ec f9e0 	bl	80037c0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8017400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017404:	2b00      	cmp	r3, #0
 8017406:	d00c      	beq.n	8017422 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8017408:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801740a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801740c:	f003 0301 	and.w	r3, r3, #1
 8017410:	2b00      	cmp	r3, #0
 8017412:	d006      	beq.n	8017422 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	2101      	movs	r1, #1
 801741c:	4618      	mov	r0, r3
 801741e:	f7ec f9cf 	bl	80037c0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8017422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017426:	2b00      	cmp	r3, #0
 8017428:	d044      	beq.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801742a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801742c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801742e:	2300      	movs	r3, #0
 8017430:	2200      	movs	r2, #0
 8017432:	2100      	movs	r1, #0
 8017434:	f7ec fca0 	bl	8003d78 <xQueueGenericSend>
 8017438:	e03c      	b.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801743a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801743c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801743e:	b29b      	uxth	r3, r3
 8017440:	021b      	lsls	r3, r3, #8
 8017442:	b21a      	sxth	r2, r3
 8017444:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017446:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017448:	b29b      	uxth	r3, r3
 801744a:	0a1b      	lsrs	r3, r3, #8
 801744c:	b29b      	uxth	r3, r3
 801744e:	b21b      	sxth	r3, r3
 8017450:	4313      	orrs	r3, r2
 8017452:	b21b      	sxth	r3, r3
 8017454:	2b35      	cmp	r3, #53	@ 0x35
 8017456:	d10f      	bne.n	8017478 <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801745a:	1d98      	adds	r0, r3, #6
 801745c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801745e:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017466:	461a      	mov	r2, r3
 8017468:	f7f0 f970 	bl	800774c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	f7f0 fe02 	bl	8008076 <ulDNSHandlePacket>
 8017472:	4603      	mov	r3, r0
 8017474:	657b      	str	r3, [r7, #84]	@ 0x54
 8017476:	e01d      	b.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017478:	897b      	ldrh	r3, [r7, #10]
 801747a:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801747e:	4293      	cmp	r3, r2
 8017480:	d006      	beq.n	8017490 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8017482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017484:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017486:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017488:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801748c:	4293      	cmp	r3, r2
 801748e:	d10f      	bne.n	80174b0 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017492:	1d98      	adds	r0, r3, #6
 8017494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017496:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801749e:	461a      	mov	r2, r3
 80174a0:	f7f0 f954 	bl	800774c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80174a4:	68f8      	ldr	r0, [r7, #12]
 80174a6:	f7f0 fde6 	bl	8008076 <ulDNSHandlePacket>
 80174aa:	4603      	mov	r3, r0
 80174ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80174ae:	e001      	b.n	80174b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80174b0:	2300      	movs	r3, #0
 80174b2:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80174b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	375c      	adds	r7, #92	@ 0x5c
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd90      	pop	{r4, r7, pc}
 80174be:	bf00      	nop
 80174c0:	08027c14 	.word	0x08027c14

080174c4 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b086      	sub	sp, #24
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80174ce:	2000      	movs	r0, #0
 80174d0:	f7f6 fc02 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 80174d4:	6178      	str	r0, [r7, #20]
 80174d6:	e021      	b.n	801751c <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2b60      	cmp	r3, #96	@ 0x60
 80174dc:	d119      	bne.n	8017512 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 80174de:	697b      	ldr	r3, [r7, #20]
 80174e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80174e4:	f003 0304 	and.w	r3, r3, #4
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d011      	beq.n	8017512 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	3338      	adds	r3, #56	@ 0x38
 80174f2:	4618      	mov	r0, r3
 80174f4:	f7f6 ffd4 	bl	800e4a0 <xIPv6_GetIPType>
 80174f8:	4603      	mov	r3, r0
 80174fa:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80174fc:	7cfb      	ldrb	r3, [r7, #19]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d101      	bne.n	8017506 <pxGetEndpoint+0x42>
 8017502:	2301      	movs	r3, #1
 8017504:	e000      	b.n	8017508 <pxGetEndpoint+0x44>
 8017506:	2300      	movs	r3, #0
 8017508:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801750a:	68fa      	ldr	r2, [r7, #12]
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	429a      	cmp	r2, r3
 8017510:	d008      	beq.n	8017524 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8017512:	6979      	ldr	r1, [r7, #20]
 8017514:	2000      	movs	r0, #0
 8017516:	f7f6 fc01 	bl	800dd1c <FreeRTOS_NextEndPoint>
 801751a:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d1da      	bne.n	80174d8 <pxGetEndpoint+0x14>
 8017522:	e000      	b.n	8017526 <pxGetEndpoint+0x62>
                {
                    break;
 8017524:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8017526:	697b      	ldr	r3, [r7, #20]
}
 8017528:	4618      	mov	r0, r3
 801752a:	3718      	adds	r7, #24
 801752c:	46bd      	mov	sp, r7
 801752e:	bd80      	pop	{r7, pc}

08017530 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b084      	sub	sp, #16
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
 8017538:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801753a:	2300      	movs	r3, #0
 801753c:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	f103 0114 	add.w	r1, r3, #20
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017548:	2b00      	cmp	r3, #0
 801754a:	d001      	beq.n	8017550 <prvStartLookup+0x20>
 801754c:	4b1e      	ldr	r3, [pc, #120]	@ (80175c8 <prvStartLookup+0x98>)
 801754e:	e000      	b.n	8017552 <prvStartLookup+0x22>
 8017550:	4b1e      	ldr	r3, [pc, #120]	@ (80175cc <prvStartLookup+0x9c>)
 8017552:	461a      	mov	r2, r3
 8017554:	481e      	ldr	r0, [pc, #120]	@ (80175d0 <prvStartLookup+0xa0>)
 8017556:	f00b fa5f 	bl	8022a18 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801755e:	2b00      	cmp	r3, #0
 8017560:	d11f      	bne.n	80175a2 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	3314      	adds	r3, #20
 8017566:	4618      	mov	r0, r3
 8017568:	f7f6 ff9a 	bl	800e4a0 <xIPv6_GetIPType>
 801756c:	4603      	mov	r3, r0
 801756e:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8017570:	7bbb      	ldrb	r3, [r7, #14]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d101      	bne.n	801757a <prvStartLookup+0x4a>
 8017576:	2301      	movs	r3, #1
 8017578:	e000      	b.n	801757c <prvStartLookup+0x4c>
 801757a:	2300      	movs	r3, #0
 801757c:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 801757e:	68b9      	ldr	r1, [r7, #8]
 8017580:	2060      	movs	r0, #96	@ 0x60
 8017582:	f7ff ff9f 	bl	80174c4 <pxGetEndpoint>
 8017586:	4602      	mov	r2, r0
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017590:	2b00      	cmp	r3, #0
 8017592:	d001      	beq.n	8017598 <prvStartLookup+0x68>
 8017594:	4b0f      	ldr	r3, [pc, #60]	@ (80175d4 <prvStartLookup+0xa4>)
 8017596:	e000      	b.n	801759a <prvStartLookup+0x6a>
 8017598:	4b0f      	ldr	r3, [pc, #60]	@ (80175d8 <prvStartLookup+0xa8>)
 801759a:	4619      	mov	r1, r3
 801759c:	480f      	ldr	r0, [pc, #60]	@ (80175dc <prvStartLookup+0xac>)
 801759e:	f00b fa3b 	bl	8022a18 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d008      	beq.n	80175bc <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	3314      	adds	r3, #20
 80175ae:	4619      	mov	r1, r3
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7f5 f8b7 	bl	800c724 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	2201      	movs	r2, #1
 80175ba:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 80175bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3710      	adds	r7, #16
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	08027c48 	.word	0x08027c48
 80175cc:	08027c4c 	.word	0x08027c4c
 80175d0:	08027c50 	.word	0x08027c50
 80175d4:	08027c74 	.word	0x08027c74
 80175d8:	08027c78 	.word	0x08027c78
 80175dc:	08027c7c 	.word	0x08027c7c

080175e0 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80175e0:	b590      	push	{r4, r7, lr}
 80175e2:	b093      	sub	sp, #76	@ 0x4c
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 80175e8:	2300      	movs	r3, #0
 80175ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 80175ec:	2300      	movs	r3, #0
 80175ee:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 80175f0:	2300      	movs	r3, #0
 80175f2:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 80175f4:	2300      	movs	r3, #0
 80175f6:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175fc:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 80175fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017600:	330e      	adds	r3, #14
 8017602:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	3314      	adds	r3, #20
 8017608:	f107 040c 	add.w	r4, r7, #12
 801760c:	6818      	ldr	r0, [r3, #0]
 801760e:	6859      	ldr	r1, [r3, #4]
 8017610:	689a      	ldr	r2, [r3, #8]
 8017612:	68db      	ldr	r3, [r3, #12]
 8017614:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801761a:	2b00      	cmp	r3, #0
 801761c:	d107      	bne.n	801762e <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 801761e:	233e      	movs	r3, #62	@ 0x3e
 8017620:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017628:	1ad3      	subs	r3, r2, r3
 801762a:	643b      	str	r3, [r7, #64]	@ 0x40
 801762c:	e003      	b.n	8017636 <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017632:	3b3e      	subs	r3, #62	@ 0x3e
 8017634:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	3314      	adds	r3, #20
 801763a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801763c:	f107 021c 	add.w	r2, r7, #28
 8017640:	4618      	mov	r0, r3
 8017642:	f7f4 fe03 	bl	800c24c <eNDGetCacheEntry>
 8017646:	4603      	mov	r3, r0
 8017648:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 801764c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017650:	2b02      	cmp	r3, #2
 8017652:	f000 80b1 	beq.w	80177b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8017656:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801765a:	2b01      	cmp	r3, #1
 801765c:	f040 8095 	bne.w	801778a <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017660:	69fa      	ldr	r2, [r7, #28]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801766a:	2b00      	cmp	r3, #0
 801766c:	d109      	bne.n	8017682 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801766e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017670:	2260      	movs	r2, #96	@ 0x60
 8017672:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8017674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017676:	223a      	movs	r2, #58	@ 0x3a
 8017678:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 801767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801767c:	2280      	movs	r2, #128	@ 0x80
 801767e:	71da      	strb	r2, [r3, #7]
 8017680:	e05e      	b.n	8017740 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8017682:	2300      	movs	r3, #0
 8017684:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8017686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017688:	3336      	adds	r3, #54	@ 0x36
 801768a:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801768e:	2260      	movs	r2, #96	@ 0x60
 8017690:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8017692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017694:	2200      	movs	r2, #0
 8017696:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8017698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801769a:	2200      	movs	r2, #0
 801769c:	709a      	strb	r2, [r3, #2]
 801769e:	2200      	movs	r2, #0
 80176a0:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 80176a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176a4:	22ff      	movs	r2, #255	@ 0xff
 80176a6:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	3b36      	subs	r3, #54	@ 0x36
 80176b0:	b29a      	uxth	r2, r3
 80176b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176b4:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80176b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176b8:	2211      	movs	r2, #17
 80176ba:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	3b36      	subs	r3, #54	@ 0x36
 80176c4:	b29a      	uxth	r2, r3
 80176c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c8:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 80176ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176cc:	889b      	ldrh	r3, [r3, #4]
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	021b      	lsls	r3, r3, #8
 80176d2:	b21a      	sxth	r2, r3
 80176d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d6:	889b      	ldrh	r3, [r3, #4]
 80176d8:	b29b      	uxth	r3, r3
 80176da:	0a1b      	lsrs	r3, r3, #8
 80176dc:	b29b      	uxth	r3, r3
 80176de:	b21b      	sxth	r3, r3
 80176e0:	4313      	orrs	r3, r2
 80176e2:	b21b      	sxth	r3, r3
 80176e4:	b29a      	uxth	r2, r3
 80176e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176e8:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80176ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176f0:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80176f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176f8:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80176fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176fc:	889b      	ldrh	r3, [r3, #4]
 80176fe:	b29b      	uxth	r3, r3
 8017700:	021b      	lsls	r3, r3, #8
 8017702:	b21a      	sxth	r2, r3
 8017704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017706:	889b      	ldrh	r3, [r3, #4]
 8017708:	b29b      	uxth	r3, r3
 801770a:	0a1b      	lsrs	r3, r3, #8
 801770c:	b29b      	uxth	r3, r3
 801770e:	b21b      	sxth	r3, r3
 8017710:	4313      	orrs	r3, r2
 8017712:	b21b      	sxth	r3, r3
 8017714:	b29a      	uxth	r2, r3
 8017716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017718:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801771c:	2200      	movs	r2, #0
 801771e:	719a      	strb	r2, [r3, #6]
 8017720:	2200      	movs	r2, #0
 8017722:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017728:	2b00      	cmp	r3, #0
 801772a:	d009      	beq.n	8017740 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772e:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017736:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8017738:	2210      	movs	r2, #16
 801773a:	4619      	mov	r1, r3
 801773c:	f00b fb88 	bl	8022e50 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017744:	2b00      	cmp	r3, #0
 8017746:	d10e      	bne.n	8017766 <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8017748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801774a:	b29b      	uxth	r3, r3
 801774c:	3308      	adds	r3, #8
 801774e:	b29b      	uxth	r3, r3
 8017750:	021b      	lsls	r3, r3, #8
 8017752:	b29a      	uxth	r2, r3
 8017754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017756:	3308      	adds	r3, #8
 8017758:	0a1b      	lsrs	r3, r3, #8
 801775a:	b29b      	uxth	r3, r3
 801775c:	4313      	orrs	r3, r2
 801775e:	b29a      	uxth	r2, r3
 8017760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017762:	809a      	strh	r2, [r3, #4]
 8017764:	e028      	b.n	80177b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8017766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017768:	2211      	movs	r2, #17
 801776a:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 801776c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801776e:	b29b      	uxth	r3, r3
 8017770:	3308      	adds	r3, #8
 8017772:	b29b      	uxth	r3, r3
 8017774:	021b      	lsls	r3, r3, #8
 8017776:	b29a      	uxth	r2, r3
 8017778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801777a:	3308      	adds	r3, #8
 801777c:	0a1b      	lsrs	r3, r3, #8
 801777e:	b29b      	uxth	r3, r3
 8017780:	4313      	orrs	r3, r2
 8017782:	b29a      	uxth	r2, r3
 8017784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017786:	809a      	strh	r2, [r3, #4]
 8017788:	e016      	b.n	80177b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 801778a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801778e:	2b00      	cmp	r3, #0
 8017790:	d10f      	bne.n	80177b2 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d002      	beq.n	801779e <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017798:	69fa      	ldr	r2, [r7, #28]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 801779e:	f107 0320 	add.w	r3, r7, #32
 80177a2:	4619      	mov	r1, r3
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f7ff fec3 	bl	8017530 <prvStartLookup>
 80177aa:	4603      	mov	r3, r0
 80177ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80177b0:	e002      	b.n	80177b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80177b2:	2302      	movs	r3, #2
 80177b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 80177b8:	6a3b      	ldr	r3, [r7, #32]
 80177ba:	2b01      	cmp	r3, #1
 80177bc:	d03d      	beq.n	801783a <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 80177be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80177c2:	2b02      	cmp	r3, #2
 80177c4:	d036      	beq.n	8017834 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d02e      	beq.n	801782c <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80177d6:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177dc:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80177de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177e0:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80177e6:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80177e8:	2206      	movs	r2, #6
 80177ea:	4619      	mov	r1, r3
 80177ec:	f00b fb30 	bl	8022e50 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80177f6:	d812      	bhi.n	801781e <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80177fe:	e008      	b.n	8017812 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017806:	4413      	add	r3, r2
 8017808:	2200      	movs	r2, #0
 801780a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801780c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801780e:	3301      	adds	r3, #1
 8017810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017814:	2b3b      	cmp	r3, #59	@ 0x3b
 8017816:	ddf3      	ble.n	8017800 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	223c      	movs	r2, #60	@ 0x3c
 801781c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801781e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017820:	68db      	ldr	r3, [r3, #12]
 8017822:	2201      	movs	r2, #1
 8017824:	6879      	ldr	r1, [r7, #4]
 8017826:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017828:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801782a:	e006      	b.n	801783a <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 f9e9 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
}
 8017832:	e002      	b.n	801783a <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f000 f9e5 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
}
 801783a:	bf00      	nop
 801783c:	374c      	adds	r7, #76	@ 0x4c
 801783e:	46bd      	mov	sp, r7
 8017840:	bd90      	pop	{r4, r7, pc}
	...

08017844 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017844:	b590      	push	{r4, r7, lr}
 8017846:	b09b      	sub	sp, #108	@ 0x6c
 8017848:	af02      	add	r7, sp, #8
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	460b      	mov	r3, r1
 801784e:	607a      	str	r2, [r7, #4]
 8017850:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8017852:	2301      	movs	r3, #1
 8017854:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d104      	bne.n	8017866 <xProcessReceivedUDPPacket_IPv6+0x22>
 801785c:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8017860:	4874      	ldr	r0, [pc, #464]	@ (8017a34 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017862:	f7ea f913 	bl	8001a8c <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801786a:	2b00      	cmp	r3, #0
 801786c:	d104      	bne.n	8017878 <xProcessReceivedUDPPacket_IPv6+0x34>
 801786e:	f240 1187 	movw	r1, #391	@ 0x187
 8017872:	4870      	ldr	r0, [pc, #448]	@ (8017a34 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017874:	f7ea f90a 	bl	8001a8c <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801787c:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801787e:	897b      	ldrh	r3, [r7, #10]
 8017880:	4618      	mov	r0, r3
 8017882:	f7f8 f88f 	bl	800f9a4 <pxUDPSocketLookup>
 8017886:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2200      	movs	r2, #0
 801788c:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 801788e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017890:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017892:	b29b      	uxth	r3, r3
 8017894:	2b00      	cmp	r3, #0
 8017896:	d109      	bne.n	80178ac <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8017898:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801789a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801789c:	b29b      	uxth	r3, r3
 801789e:	4619      	mov	r1, r3
 80178a0:	4865      	ldr	r0, [pc, #404]	@ (8017a38 <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 80178a2:	f00b f8b9 	bl	8022a18 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80178aa:	e0bd      	b.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80178ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	f000 8091 	beq.w	80179d6 <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80178b4:	68f8      	ldr	r0, [r7, #12]
 80178b6:	f7ef fe33 	bl	8007520 <xCheckRequiresARPResolution>
 80178ba:	4603      	mov	r3, r0
 80178bc:	2b01      	cmp	r3, #1
 80178be:	d105      	bne.n	80178cc <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2201      	movs	r2, #1
 80178c4:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 80178c6:	2300      	movs	r3, #0
 80178c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 80178ca:	e0ad      	b.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80178cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178ce:	1d98      	adds	r0, r3, #6
 80178d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178d2:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80178da:	461a      	mov	r2, r3
 80178dc:	f7f4 fd64 	bl	800c3a8 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80178e0:	68f8      	ldr	r0, [r7, #12]
 80178e2:	f7f2 fe61 	bl	800a5a8 <uxIPHeaderSizePacket>
 80178e6:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80178e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d03d      	beq.n	801796c <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80178f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80178f6:	3316      	adds	r3, #22
 80178f8:	4413      	add	r3, r2
 80178fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80178fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80178fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017900:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017906:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8017908:	897b      	ldrh	r3, [r7, #10]
 801790a:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801790c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801790e:	3316      	adds	r3, #22
 8017910:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017914:	6818      	ldr	r0, [r3, #0]
 8017916:	6859      	ldr	r1, [r3, #4]
 8017918:	689a      	ldr	r2, [r3, #8]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801791e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017920:	3326      	adds	r3, #38	@ 0x26
 8017922:	f107 041c 	add.w	r4, r7, #28
 8017926:	6818      	ldr	r0, [r3, #0]
 8017928:	6859      	ldr	r1, [r3, #4]
 801792a:	689a      	ldr	r2, [r3, #8]
 801792c:	68db      	ldr	r3, [r3, #12]
 801792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017930:	230a      	movs	r3, #10
 8017932:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017936:	230a      	movs	r3, #10
 8017938:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801793a:	2318      	movs	r3, #24
 801793c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017940:	2318      	movs	r3, #24
 8017942:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8017944:	68fb      	ldr	r3, [r7, #12]
 8017946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017948:	3b3e      	subs	r3, #62	@ 0x3e
 801794a:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 801794c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017950:	f107 0314 	add.w	r3, r7, #20
 8017954:	9300      	str	r3, [sp, #0]
 8017956:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8017958:	4613      	mov	r3, r2
 801795a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801795c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801795e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017960:	47a0      	blx	r4
 8017962:	4603      	mov	r3, r0
 8017964:	2b00      	cmp	r3, #0
 8017966:	d001      	beq.n	801796c <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8017968:	2300      	movs	r3, #0
 801796a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 801796c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801796e:	2b01      	cmp	r3, #1
 8017970:	d15a      	bne.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017972:	f7ed f96f 	bl	8004c54 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8017976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017978:	3354      	adds	r3, #84	@ 0x54
 801797a:	68fa      	ldr	r2, [r7, #12]
 801797c:	4611      	mov	r1, r2
 801797e:	4618      	mov	r0, r3
 8017980:	f7ec f823 	bl	80039ca <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017984:	f7ed f974 	bl	8004c70 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8017988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801798a:	685b      	ldr	r3, [r3, #4]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d005      	beq.n	801799c <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	2101      	movs	r1, #1
 8017996:	4618      	mov	r0, r3
 8017998:	f7eb ff12 	bl	80037c0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801799c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801799e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d00c      	beq.n	80179be <xProcessReceivedUDPPacket_IPv6+0x17a>
 80179a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80179a8:	f003 0301 	and.w	r3, r3, #1
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d006      	beq.n	80179be <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80179b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	2101      	movs	r1, #1
 80179b8:	4618      	mov	r0, r3
 80179ba:	f7eb ff01 	bl	80037c0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80179be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d030      	beq.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80179c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80179c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80179ca:	2300      	movs	r3, #0
 80179cc:	2200      	movs	r2, #0
 80179ce:	2100      	movs	r1, #0
 80179d0:	f7ec f9d2 	bl	8003d78 <xQueueGenericSend>
 80179d4:	e028      	b.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80179d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80179d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80179da:	b29b      	uxth	r3, r3
 80179dc:	021b      	lsls	r3, r3, #8
 80179de:	b21a      	sxth	r2, r3
 80179e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80179e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80179e4:	b29b      	uxth	r3, r3
 80179e6:	0a1b      	lsrs	r3, r3, #8
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	b21b      	sxth	r3, r3
 80179ec:	4313      	orrs	r3, r2
 80179ee:	b21b      	sxth	r3, r3
 80179f0:	2b35      	cmp	r3, #53	@ 0x35
 80179f2:	d105      	bne.n	8017a00 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80179f4:	68f8      	ldr	r0, [r7, #12]
 80179f6:	f7f0 fb3e 	bl	8008076 <ulDNSHandlePacket>
 80179fa:	4603      	mov	r3, r0
 80179fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80179fe:	e013      	b.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017a00:	897b      	ldrh	r3, [r7, #10]
 8017a02:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017a06:	4293      	cmp	r3, r2
 8017a08:	d006      	beq.n	8017a18 <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 8017a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8017a0e:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017a10:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017a14:	4293      	cmp	r3, r2
 8017a16:	d105      	bne.n	8017a24 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017a18:	68f8      	ldr	r0, [r7, #12]
 8017a1a:	f7f0 fb2c 	bl	8008076 <ulDNSHandlePacket>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017a22:	e001      	b.n	8017a28 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017a24:	2300      	movs	r3, #0
 8017a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3764      	adds	r7, #100	@ 0x64
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd90      	pop	{r4, r7, pc}
 8017a32:	bf00      	nop
 8017a34:	08027ca4 	.word	0x08027ca4
 8017a38:	08027cd8 	.word	0x08027cd8

08017a3c <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8017a3c:	b480      	push	{r7}
 8017a3e:	b083      	sub	sp, #12
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8017a44:	2301      	movs	r3, #1
    }
 8017a46:	4618      	mov	r0, r3
 8017a48:	370c      	adds	r7, #12
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr

08017a52 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8017a52:	b480      	push	{r7}
 8017a54:	af00      	add	r7, sp, #0
    }
 8017a56:	bf00      	nop
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5e:	4770      	bx	lr

08017a60 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8017a66:	4b2e      	ldr	r3, [pc, #184]	@ (8017b20 <xNetworkBuffersInitialise+0xc0>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d149      	bne.n	8017b02 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8017a6e:	2140      	movs	r1, #64	@ 0x40
 8017a70:	2040      	movs	r0, #64	@ 0x40
 8017a72:	f7ec f957 	bl	8003d24 <xQueueCreateCountingSemaphore>
 8017a76:	4603      	mov	r3, r0
 8017a78:	4a29      	ldr	r2, [pc, #164]	@ (8017b20 <xNetworkBuffersInitialise+0xc0>)
 8017a7a:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8017a7c:	4b28      	ldr	r3, [pc, #160]	@ (8017b20 <xNetworkBuffersInitialise+0xc0>)
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d103      	bne.n	8017a8c <xNetworkBuffersInitialise+0x2c>
 8017a84:	21c3      	movs	r1, #195	@ 0xc3
 8017a86:	4827      	ldr	r0, [pc, #156]	@ (8017b24 <xNetworkBuffersInitialise+0xc4>)
 8017a88:	f7ea f800 	bl	8001a8c <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8017a8c:	4b24      	ldr	r3, [pc, #144]	@ (8017b20 <xNetworkBuffersInitialise+0xc0>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d036      	beq.n	8017b02 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017a94:	4824      	ldr	r0, [pc, #144]	@ (8017b28 <xNetworkBuffersInitialise+0xc8>)
 8017a96:	f7eb ff6b 	bl	8003970 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 8017a9a:	4824      	ldr	r0, [pc, #144]	@ (8017b2c <xNetworkBuffersInitialise+0xcc>)
 8017a9c:	f001 fa24 	bl	8018ee8 <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	603b      	str	r3, [r7, #0]
 8017aa4:	e027      	b.n	8017af6 <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8017aa6:	683a      	ldr	r2, [r7, #0]
 8017aa8:	4613      	mov	r3, r2
 8017aaa:	00db      	lsls	r3, r3, #3
 8017aac:	1a9b      	subs	r3, r3, r2
 8017aae:	00db      	lsls	r3, r3, #3
 8017ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8017b2c <xNetworkBuffersInitialise+0xcc>)
 8017ab2:	4413      	add	r3, r2
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	f7eb ff7b 	bl	80039b0 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 8017aba:	683a      	ldr	r2, [r7, #0]
 8017abc:	4613      	mov	r3, r2
 8017abe:	00db      	lsls	r3, r3, #3
 8017ac0:	1a9b      	subs	r3, r3, r2
 8017ac2:	00db      	lsls	r3, r3, #3
 8017ac4:	4a19      	ldr	r2, [pc, #100]	@ (8017b2c <xNetworkBuffersInitialise+0xcc>)
 8017ac6:	1899      	adds	r1, r3, r2
 8017ac8:	4818      	ldr	r0, [pc, #96]	@ (8017b2c <xNetworkBuffersInitialise+0xcc>)
 8017aca:	683a      	ldr	r2, [r7, #0]
 8017acc:	4613      	mov	r3, r2
 8017ace:	00db      	lsls	r3, r3, #3
 8017ad0:	1a9b      	subs	r3, r3, r2
 8017ad2:	00db      	lsls	r3, r3, #3
 8017ad4:	4403      	add	r3, r0
 8017ad6:	330c      	adds	r3, #12
 8017ad8:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8017ada:	683a      	ldr	r2, [r7, #0]
 8017adc:	4613      	mov	r3, r2
 8017ade:	00db      	lsls	r3, r3, #3
 8017ae0:	1a9b      	subs	r3, r3, r2
 8017ae2:	00db      	lsls	r3, r3, #3
 8017ae4:	4a11      	ldr	r2, [pc, #68]	@ (8017b2c <xNetworkBuffersInitialise+0xcc>)
 8017ae6:	4413      	add	r3, r2
 8017ae8:	4619      	mov	r1, r3
 8017aea:	480f      	ldr	r0, [pc, #60]	@ (8017b28 <xNetworkBuffersInitialise+0xc8>)
 8017aec:	f7eb ff91 	bl	8003a12 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	3301      	adds	r3, #1
 8017af4:	603b      	str	r3, [r7, #0]
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	2b3f      	cmp	r3, #63	@ 0x3f
 8017afa:	d9d4      	bls.n	8017aa6 <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8017afc:	4b0c      	ldr	r3, [pc, #48]	@ (8017b30 <xNetworkBuffersInitialise+0xd0>)
 8017afe:	2240      	movs	r2, #64	@ 0x40
 8017b00:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8017b02:	4b07      	ldr	r3, [pc, #28]	@ (8017b20 <xNetworkBuffersInitialise+0xc0>)
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d102      	bne.n	8017b10 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	607b      	str	r3, [r7, #4]
 8017b0e:	e001      	b.n	8017b14 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017b10:	2301      	movs	r3, #1
 8017b12:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017b14:	687b      	ldr	r3, [r7, #4]
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3708      	adds	r7, #8
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	20002480 	.word	0x20002480
 8017b24:	08027d18 	.word	0x08027d18
 8017b28:	20001668 	.word	0x20001668
 8017b2c:	20001680 	.word	0x20001680
 8017b30:	2000167c 	.word	0x2000167c

08017b34 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b086      	sub	sp, #24
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
 8017b3c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8017b42:	2300      	movs	r3, #0
 8017b44:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8017b46:	4b2a      	ldr	r3, [pc, #168]	@ (8017bf0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d04b      	beq.n	8017be6 <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8017b4e:	4b28      	ldr	r3, [pc, #160]	@ (8017bf0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	6839      	ldr	r1, [r7, #0]
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7ec fac7 	bl	80040e8 <xQueueSemaphoreTake>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d13d      	bne.n	8017bdc <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8017b60:	f7ee fef6 	bl	8006950 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8017b64:	4b23      	ldr	r3, [pc, #140]	@ (8017bf4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017b66:	68db      	ldr	r3, [r3, #12]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017b6c:	6978      	ldr	r0, [r7, #20]
 8017b6e:	f7ff ff65 	bl	8017a3c <bIsValidNetworkDescriptor>
 8017b72:	4603      	mov	r3, r0
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d009      	beq.n	8017b8c <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8017bf4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	d104      	bne.n	8017b8c <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8017b82:	697b      	ldr	r3, [r7, #20]
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7eb ff7d 	bl	8003a84 <uxListRemove>
 8017b8a:	e001      	b.n	8017b90 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8017b8c:	2301      	movs	r3, #1
 8017b8e:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017b90:	f7ee ff0a 	bl	80069a8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	2b01      	cmp	r3, #1
 8017b98:	d10b      	bne.n	8017bb2 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8017b9a:	6978      	ldr	r0, [r7, #20]
 8017b9c:	f7ff ff4e 	bl	8017a3c <bIsValidNetworkDescriptor>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	461a      	mov	r2, r3
 8017ba4:	6979      	ldr	r1, [r7, #20]
 8017ba6:	4814      	ldr	r0, [pc, #80]	@ (8017bf8 <pxGetNetworkBufferWithDescriptor+0xc4>)
 8017ba8:	f00a ff36 	bl	8022a18 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8017bac:	2300      	movs	r3, #0
 8017bae:	617b      	str	r3, [r7, #20]
 8017bb0:	e019      	b.n	8017be6 <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017bb2:	4b10      	ldr	r3, [pc, #64]	@ (8017bf4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8017bb8:	4b10      	ldr	r3, [pc, #64]	@ (8017bfc <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	68fa      	ldr	r2, [r7, #12]
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d202      	bcs.n	8017bc8 <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8017bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8017bfc <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	687a      	ldr	r2, [r7, #4]
 8017bcc:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8017bda:	e004      	b.n	8017be6 <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8017bdc:	f240 113b 	movw	r1, #315	@ 0x13b
 8017be0:	4807      	ldr	r0, [pc, #28]	@ (8017c00 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8017be2:	f7e9 ff53 	bl	8001a8c <vAssertCalled>
        }
    }

    return pxReturn;
 8017be6:	697b      	ldr	r3, [r7, #20]
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3718      	adds	r7, #24
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	20002480 	.word	0x20002480
 8017bf4:	20001668 	.word	0x20001668
 8017bf8:	08027d64 	.word	0x08027d64
 8017bfc:	2000167c 	.word	0x2000167c
 8017c00:	08027d18 	.word	0x08027d18

08017c04 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b084      	sub	sp, #16
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8017c0c:	6878      	ldr	r0, [r7, #4]
 8017c0e:	f7ff ff15 	bl	8017a3c <bIsValidNetworkDescriptor>
 8017c12:	4603      	mov	r3, r0
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d104      	bne.n	8017c22 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8017c18:	6879      	ldr	r1, [r7, #4]
 8017c1a:	4819      	ldr	r0, [pc, #100]	@ (8017c80 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8017c1c:	f00a fefc 	bl	8022a18 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017c20:	e029      	b.n	8017c76 <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017c22:	f7ee fe95 	bl	8006950 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	691b      	ldr	r3, [r3, #16]
 8017c2a:	4a16      	ldr	r2, [pc, #88]	@ (8017c84 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	d101      	bne.n	8017c34 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017c30:	2301      	movs	r3, #1
 8017c32:	e000      	b.n	8017c36 <vReleaseNetworkBufferAndDescriptor+0x32>
 8017c34:	2300      	movs	r3, #0
 8017c36:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d104      	bne.n	8017c48 <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	4619      	mov	r1, r3
 8017c42:	4810      	ldr	r0, [pc, #64]	@ (8017c84 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017c44:	f7eb fec1 	bl	80039ca <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8017c48:	f7ee feae 	bl	80069a8 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d008      	beq.n	8017c64 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017c52:	f000 f829 	bl	8017ca8 <uxGetNumberOfFreeNetworkBuffers>
 8017c56:	4603      	mov	r3, r0
 8017c58:	461a      	mov	r2, r3
 8017c5a:	6879      	ldr	r1, [r7, #4]
 8017c5c:	480a      	ldr	r0, [pc, #40]	@ (8017c88 <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017c5e:	f00a fedb 	bl	8022a18 <lUDPLoggingPrintf>
}
 8017c62:	e008      	b.n	8017c76 <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017c64:	4b09      	ldr	r3, [pc, #36]	@ (8017c8c <vReleaseNetworkBufferAndDescriptor+0x88>)
 8017c66:	6818      	ldr	r0, [r3, #0]
 8017c68:	2300      	movs	r3, #0
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	2100      	movs	r1, #0
 8017c6e:	f7ec f883 	bl	8003d78 <xQueueGenericSend>
            prvShowWarnings();
 8017c72:	f7ff feee 	bl	8017a52 <prvShowWarnings>
}
 8017c76:	bf00      	nop
 8017c78:	3710      	adds	r7, #16
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	08027da8 	.word	0x08027da8
 8017c84:	20001668 	.word	0x20001668
 8017c88:	08027de0 	.word	0x08027de0
 8017c8c:	20002480 	.word	0x20002480

08017c90 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017c90:	b480      	push	{r7}
 8017c92:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017c94:	4b03      	ldr	r3, [pc, #12]	@ (8017ca4 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8017c96:	681b      	ldr	r3, [r3, #0]
}
 8017c98:	4618      	mov	r0, r3
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr
 8017ca2:	bf00      	nop
 8017ca4:	2000167c 	.word	0x2000167c

08017ca8 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8017ca8:	b480      	push	{r7}
 8017caa:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017cac:	4b03      	ldr	r3, [pc, #12]	@ (8017cbc <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8017cae:	681b      	ldr	r3, [r3, #0]
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb8:	4770      	bx	lr
 8017cba:	bf00      	nop
 8017cbc:	20001668 	.word	0x20001668

08017cc0 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b085      	sub	sp, #20
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017cc8:	2300      	movs	r3, #0
 8017cca:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	4a11      	ldr	r2, [pc, #68]	@ (8017d14 <xHas_1F_PHYSPCS+0x54>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d016      	beq.n	8017d02 <xHas_1F_PHYSPCS+0x42>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8017d14 <xHas_1F_PHYSPCS+0x54>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d80f      	bhi.n	8017cfc <xHas_1F_PHYSPCS+0x3c>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	4a0e      	ldr	r2, [pc, #56]	@ (8017d18 <xHas_1F_PHYSPCS+0x58>)
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d00e      	beq.n	8017d02 <xHas_1F_PHYSPCS+0x42>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8017d18 <xHas_1F_PHYSPCS+0x58>)
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d807      	bhi.n	8017cfc <xHas_1F_PHYSPCS+0x3c>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	4a0b      	ldr	r2, [pc, #44]	@ (8017d1c <xHas_1F_PHYSPCS+0x5c>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d006      	beq.n	8017d02 <xHas_1F_PHYSPCS+0x42>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8017d20 <xHas_1F_PHYSPCS+0x60>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d002      	beq.n	8017d02 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8017cfc:	2301      	movs	r3, #1
 8017cfe:	60fb      	str	r3, [r7, #12]
            break;
 8017d00:	e000      	b.n	8017d04 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8017d02:	bf00      	nop
    }

    return xResult;
 8017d04:	68fb      	ldr	r3, [r7, #12]
}
 8017d06:	4618      	mov	r0, r3
 8017d08:	3714      	adds	r7, #20
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d10:	4770      	bx	lr
 8017d12:	bf00      	nop
 8017d14:	ff000710 	.word	0xff000710
 8017d18:	2000a250 	.word	0x2000a250
 8017d1c:	20005c90 	.word	0x20005c90
 8017d20:	2000a221 	.word	0x2000a221

08017d24 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017d24:	b480      	push	{r7}
 8017d26:	b085      	sub	sp, #20
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	4a0d      	ldr	r2, [pc, #52]	@ (8017d68 <xHas_19_PHYCR+0x44>)
 8017d34:	4293      	cmp	r3, r2
 8017d36:	d00b      	beq.n	8017d50 <xHas_19_PHYCR+0x2c>
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8017d68 <xHas_19_PHYCR+0x44>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d80a      	bhi.n	8017d56 <xHas_19_PHYCR+0x32>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	4a0a      	ldr	r2, [pc, #40]	@ (8017d6c <xHas_19_PHYCR+0x48>)
 8017d44:	4293      	cmp	r3, r2
 8017d46:	d003      	beq.n	8017d50 <xHas_19_PHYCR+0x2c>
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	4a09      	ldr	r2, [pc, #36]	@ (8017d70 <xHas_19_PHYCR+0x4c>)
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d102      	bne.n	8017d56 <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017d50:	2301      	movs	r3, #1
 8017d52:	60fb      	str	r3, [r7, #12]
            break;
 8017d54:	e000      	b.n	8017d58 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8017d56:	bf00      	nop
    }

    return xResult;
 8017d58:	68fb      	ldr	r3, [r7, #12]
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3714      	adds	r7, #20
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	2000a221 	.word	0x2000a221
 8017d6c:	0007c130 	.word	0x0007c130
 8017d70:	20005c90 	.word	0x20005c90

08017d74 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b084      	sub	sp, #16
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	60f8      	str	r0, [r7, #12]
 8017d7c:	60b9      	str	r1, [r7, #8]
 8017d7e:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017d80:	2240      	movs	r2, #64	@ 0x40
 8017d82:	2100      	movs	r1, #0
 8017d84:	68f8      	ldr	r0, [r7, #12]
 8017d86:	f00b f970 	bl	802306a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	68ba      	ldr	r2, [r7, #8]
 8017d8e:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	605a      	str	r2, [r3, #4]
}
 8017d96:	bf00      	nop
 8017d98:	3710      	adds	r7, #16
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
	...

08017da0 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b086      	sub	sp, #24
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	2200      	movs	r2, #0
 8017dac:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017dae:	2300      	movs	r3, #0
 8017db0:	617b      	str	r3, [r7, #20]
 8017db2:	e03a      	b.n	8017e2a <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017db4:	2300      	movs	r3, #0
 8017db6:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	f107 020c 	add.w	r2, r7, #12
 8017dc0:	2103      	movs	r1, #3
 8017dc2:	6978      	ldr	r0, [r7, #20]
 8017dc4:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017dcc:	4293      	cmp	r3, r2
 8017dce:	d029      	beq.n	8017e24 <xPhyDiscover+0x84>
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d026      	beq.n	8017e24 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f107 0208 	add.w	r2, r7, #8
 8017dde:	2102      	movs	r1, #2
 8017de0:	6978      	ldr	r0, [r7, #20]
 8017de2:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	041a      	lsls	r2, r3, #16
 8017de8:	68f9      	ldr	r1, [r7, #12]
 8017dea:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017dee:	400b      	ands	r3, r1
 8017df0:	4313      	orrs	r3, r2
 8017df2:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017df8:	697a      	ldr	r2, [r7, #20]
 8017dfa:	b2d1      	uxtb	r1, r2
 8017dfc:	687a      	ldr	r2, [r7, #4]
 8017dfe:	4413      	add	r3, r2
 8017e00:	460a      	mov	r2, r1
 8017e02:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	3202      	adds	r2, #2
 8017e0c:	6939      	ldr	r1, [r7, #16]
 8017e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e16:	1c5a      	adds	r2, r3, #1
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e20:	2b04      	cmp	r3, #4
 8017e22:	d005      	beq.n	8017e30 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	3301      	adds	r3, #1
 8017e28:	617b      	str	r3, [r7, #20]
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	2b1f      	cmp	r3, #31
 8017e2e:	ddc1      	ble.n	8017db4 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	dd05      	ble.n	8017e44 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	689b      	ldr	r3, [r3, #8]
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	4804      	ldr	r0, [pc, #16]	@ (8017e50 <xPhyDiscover+0xb0>)
 8017e40:	f00a fdea 	bl	8022a18 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	3718      	adds	r7, #24
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}
 8017e50:	08027e24 	.word	0x08027e24

08017e54 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b08c      	sub	sp, #48	@ 0x30
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
 8017e5c:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017e62:	2300      	movs	r3, #0
 8017e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e66:	e017      	b.n	8017e98 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017e68:	687a      	ldr	r2, [r7, #4]
 8017e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e6c:	4413      	add	r3, r2
 8017e6e:	3318      	adds	r3, #24
 8017e70:	781b      	ldrb	r3, [r3, #0]
 8017e72:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f107 0218 	add.w	r2, r7, #24
 8017e7c:	2100      	movs	r1, #0
 8017e7e:	69f8      	ldr	r0, [r7, #28]
 8017e80:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	69ba      	ldr	r2, [r7, #24]
 8017e88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017e8c:	2100      	movs	r1, #0
 8017e8e:	69f8      	ldr	r0, [r7, #28]
 8017e90:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e94:	3301      	adds	r3, #1
 8017e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017e9e:	429a      	cmp	r2, r3
 8017ea0:	dbe2      	blt.n	8017e68 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017ea6:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8017ea8:	f107 030c 	add.w	r3, r7, #12
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7ed fb8d 	bl	80055cc <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017eb6:	e01f      	b.n	8017ef8 <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017eb8:	687a      	ldr	r2, [r7, #4]
 8017eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ebc:	4413      	add	r3, r2
 8017ebe:	3318      	adds	r3, #24
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	f107 0218 	add.w	r2, r7, #24
 8017ecc:	2100      	movs	r1, #0
 8017ece:	6a38      	ldr	r0, [r7, #32]
 8017ed0:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017ed2:	69bb      	ldr	r3, [r7, #24]
 8017ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d10a      	bne.n	8017ef2 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017ede:	482d      	ldr	r0, [pc, #180]	@ (8017f94 <xPhyReset+0x140>)
 8017ee0:	f00a fd9a 	bl	8022a18 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017ee4:	2201      	movs	r2, #1
 8017ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8017eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017eee:	4313      	orrs	r3, r2
 8017ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017efe:	429a      	cmp	r2, r3
 8017f00:	dbda      	blt.n	8017eb8 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017f04:	683b      	ldr	r3, [r7, #0]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d013      	beq.n	8017f32 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017f0a:	f107 0214 	add.w	r2, r7, #20
 8017f0e:	f107 030c 	add.w	r3, r7, #12
 8017f12:	4611      	mov	r1, r2
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7ed fb91 	bl	800563c <xTaskCheckForTimeOut>
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d004      	beq.n	8017f2a <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017f22:	481d      	ldr	r0, [pc, #116]	@ (8017f98 <xPhyReset+0x144>)
 8017f24:	f00a fd78 	bl	8022a18 <lUDPLoggingPrintf>
            break;
 8017f28:	e004      	b.n	8017f34 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017f2a:	2032      	movs	r0, #50	@ 0x32
 8017f2c:	f7ec fdda 	bl	8004ae4 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017f30:	e7bf      	b.n	8017eb2 <xPhyReset+0x5e>
            break;
 8017f32:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017f34:	2300      	movs	r3, #0
 8017f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017f38:	e01e      	b.n	8017f78 <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8017f3a:	2201      	movs	r2, #1
 8017f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f3e:	409a      	lsls	r2, r3
 8017f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f42:	4013      	ands	r3, r2
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d114      	bne.n	8017f72 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f4c:	4413      	add	r3, r2
 8017f4e:	3318      	adds	r3, #24
 8017f50:	781b      	ldrb	r3, [r3, #0]
 8017f52:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f107 0218 	add.w	r2, r7, #24
 8017f5c:	2100      	movs	r1, #0
 8017f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f60:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	685b      	ldr	r3, [r3, #4]
 8017f66:	69ba      	ldr	r2, [r7, #24]
 8017f68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017f6c:	2100      	movs	r1, #0
 8017f6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f70:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f74:	3301      	adds	r3, #1
 8017f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	dbdb      	blt.n	8017f3a <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017f82:	2032      	movs	r0, #50	@ 0x32
 8017f84:	f7ec fdae 	bl	8004ae4 <vTaskDelay>

    return ulDoneMask;
 8017f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3730      	adds	r7, #48	@ 0x30
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	08027e30 	.word	0x08027e30
 8017f98:	08027e54 	.word	0x08027e54

08017f9c <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b088      	sub	sp, #32
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	dc05      	bgt.n	8017fba <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017fae:	487c      	ldr	r0, [pc, #496]	@ (80181a0 <xPhyConfigure+0x204>)
 8017fb0:	f00a fd32 	bl	8022a18 <lUDPLoggingPrintf>
        return -1;
 8017fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb8:	e0ed      	b.n	8018196 <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	2b03      	cmp	r3, #3
 8017fc0:	d107      	bne.n	8017fd2 <xPhyConfigure+0x36>
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	789b      	ldrb	r3, [r3, #2]
 8017fc6:	2b03      	cmp	r3, #3
 8017fc8:	d103      	bne.n	8017fd2 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8017fca:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017fce:	61fb      	str	r3, [r7, #28]
 8017fd0:	e044      	b.n	801805c <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	2b03      	cmp	r3, #3
 8017fdc:	d10d      	bne.n	8017ffa <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017fde:	683b      	ldr	r3, [r7, #0]
 8017fe0:	789b      	ldrb	r3, [r3, #2]
 8017fe2:	2b02      	cmp	r3, #2
 8017fe4:	d104      	bne.n	8017ff0 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8017fe6:	69fb      	ldr	r3, [r7, #28]
 8017fe8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017fec:	61fb      	str	r3, [r7, #28]
 8017fee:	e035      	b.n	801805c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017ff0:	69fb      	ldr	r3, [r7, #28]
 8017ff2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8017ff6:	61fb      	str	r3, [r7, #28]
 8017ff8:	e030      	b.n	801805c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	789b      	ldrb	r3, [r3, #2]
 8017ffe:	2b03      	cmp	r3, #3
 8018000:	d10d      	bne.n	801801e <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8018002:	683b      	ldr	r3, [r7, #0]
 8018004:	781b      	ldrb	r3, [r3, #0]
 8018006:	2b01      	cmp	r3, #1
 8018008:	d104      	bne.n	8018014 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8018010:	61fb      	str	r3, [r7, #28]
 8018012:	e023      	b.n	801805c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801801a:	61fb      	str	r3, [r7, #28]
 801801c:	e01e      	b.n	801805c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	2b02      	cmp	r3, #2
 8018024:	d10d      	bne.n	8018042 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	789b      	ldrb	r3, [r3, #2]
 801802a:	2b02      	cmp	r3, #2
 801802c:	d104      	bne.n	8018038 <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018034:	61fb      	str	r3, [r7, #28]
 8018036:	e011      	b.n	801805c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801803e:	61fb      	str	r3, [r7, #28]
 8018040:	e00c      	b.n	801805c <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	789b      	ldrb	r3, [r3, #2]
 8018046:	2b02      	cmp	r3, #2
 8018048:	d104      	bne.n	8018054 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 801804a:	69fb      	ldr	r3, [r7, #28]
 801804c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018050:	61fb      	str	r3, [r7, #28]
 8018052:	e003      	b.n	801805c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	f043 0320 	orr.w	r3, r3, #32
 801805a:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018060:	2201      	movs	r2, #1
 8018062:	fa02 f303 	lsl.w	r3, r2, r3
 8018066:	3b01      	subs	r3, #1
 8018068:	4619      	mov	r1, r3
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f7ff fef2 	bl	8017e54 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8018070:	2300      	movs	r3, #0
 8018072:	61bb      	str	r3, [r7, #24]
 8018074:	e080      	b.n	8018178 <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	69bb      	ldr	r3, [r7, #24]
 801807a:	4413      	add	r3, r2
 801807c:	3318      	adds	r3, #24
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	69ba      	ldr	r2, [r7, #24]
 8018086:	3202      	adds	r2, #2
 8018088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801808c:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	69fa      	ldr	r2, [r7, #28]
 8018094:	2104      	movs	r1, #4
 8018096:	6978      	ldr	r0, [r7, #20]
 8018098:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	f107 020c 	add.w	r2, r7, #12
 80180a2:	2100      	movs	r1, #0
 80180a4:	6978      	ldr	r0, [r7, #20]
 80180a6:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 80180ae:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80180b6:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 80180b8:	683b      	ldr	r3, [r7, #0]
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	2b02      	cmp	r3, #2
 80180be:	d003      	beq.n	80180c8 <xPhyConfigure+0x12c>
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	781b      	ldrb	r3, [r3, #0]
 80180c4:	2b03      	cmp	r3, #3
 80180c6:	d104      	bne.n	80180d2 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80180ce:	60fb      	str	r3, [r7, #12]
 80180d0:	e007      	b.n	80180e2 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	d103      	bne.n	80180e2 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80180e0:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 80180e2:	683b      	ldr	r3, [r7, #0]
 80180e4:	789b      	ldrb	r3, [r3, #2]
 80180e6:	2b02      	cmp	r3, #2
 80180e8:	d003      	beq.n	80180f2 <xPhyConfigure+0x156>
 80180ea:	683b      	ldr	r3, [r7, #0]
 80180ec:	789b      	ldrb	r3, [r3, #2]
 80180ee:	2b03      	cmp	r3, #3
 80180f0:	d104      	bne.n	80180fc <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80180f8:	60fb      	str	r3, [r7, #12]
 80180fa:	e007      	b.n	801810c <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 80180fc:	683b      	ldr	r3, [r7, #0]
 80180fe:	789b      	ldrb	r3, [r3, #2]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d103      	bne.n	801810c <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801810a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 801810c:	6938      	ldr	r0, [r7, #16]
 801810e:	f7ff fe09 	bl	8017d24 <xHas_19_PHYCR>
 8018112:	4603      	mov	r3, r0
 8018114:	2b00      	cmp	r3, #0
 8018116:	d026      	beq.n	8018166 <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f107 0208 	add.w	r2, r7, #8
 8018120:	2119      	movs	r1, #25
 8018122:	6978      	ldr	r0, [r7, #20]
 8018124:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801812c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 801812e:	683b      	ldr	r3, [r7, #0]
 8018130:	785b      	ldrb	r3, [r3, #1]
 8018132:	2b03      	cmp	r3, #3
 8018134:	d104      	bne.n	8018140 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801813c:	60bb      	str	r3, [r7, #8]
 801813e:	e00c      	b.n	801815a <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	785b      	ldrb	r3, [r3, #1]
 8018144:	2b02      	cmp	r3, #2
 8018146:	d104      	bne.n	8018152 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8018148:	68bb      	ldr	r3, [r7, #8]
 801814a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801814e:	60bb      	str	r3, [r7, #8]
 8018150:	e003      	b.n	801815a <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8018152:	68bb      	ldr	r3, [r7, #8]
 8018154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8018158:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	685b      	ldr	r3, [r3, #4]
 801815e:	68ba      	ldr	r2, [r7, #8]
 8018160:	2119      	movs	r1, #25
 8018162:	6978      	ldr	r0, [r7, #20]
 8018164:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	461a      	mov	r2, r3
 801816a:	69f9      	ldr	r1, [r7, #28]
 801816c:	480d      	ldr	r0, [pc, #52]	@ (80181a4 <xPhyConfigure+0x208>)
 801816e:	f00a fc53 	bl	8022a18 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	3301      	adds	r3, #1
 8018176:	61bb      	str	r3, [r7, #24]
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817c:	69ba      	ldr	r2, [r7, #24]
 801817e:	429a      	cmp	r2, r3
 8018180:	f6ff af79 	blt.w	8018076 <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	69fa      	ldr	r2, [r7, #28]
 8018192:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8018194:	2300      	movs	r3, #0
}
 8018196:	4618      	mov	r0, r3
 8018198:	3720      	adds	r7, #32
 801819a:	46bd      	mov	sp, r7
 801819c:	bd80      	pop	{r7, pc}
 801819e:	bf00      	nop
 80181a0:	08027e88 	.word	0x08027e88
 80181a4:	08027eac 	.word	0x08027eac

080181a8 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80181a8:	b590      	push	{r4, r7, lr}
 80181aa:	b095      	sub	sp, #84	@ 0x54
 80181ac:	af02      	add	r7, sp, #8
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80181b2:	683b      	ldr	r3, [r7, #0]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d101      	bne.n	80181bc <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	e18d      	b.n	80184d8 <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80181bc:	2300      	movs	r3, #0
 80181be:	647b      	str	r3, [r7, #68]	@ 0x44
 80181c0:	e020      	b.n	8018204 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 80181c2:	683a      	ldr	r2, [r7, #0]
 80181c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181c6:	fa22 f303 	lsr.w	r3, r2, r3
 80181ca:	f003 0301 	and.w	r3, r3, #1
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d015      	beq.n	80181fe <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80181d2:	687a      	ldr	r2, [r7, #4]
 80181d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80181d6:	4413      	add	r3, r2
 80181d8:	3318      	adds	r3, #24
 80181da:	781b      	ldrb	r3, [r3, #0]
 80181dc:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	687a      	ldr	r2, [r7, #4]
 80181e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80181e6:	2104      	movs	r1, #4
 80181e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80181ea:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	687a      	ldr	r2, [r7, #4]
 80181f2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80181f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80181f8:	2100      	movs	r1, #0
 80181fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80181fc:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80181fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018200:	3301      	adds	r3, #1
 8018202:	647b      	str	r3, [r7, #68]	@ 0x44
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018208:	461a      	mov	r2, r3
 801820a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801820c:	4293      	cmp	r3, r2
 801820e:	d3d8      	bcc.n	80181c2 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8018210:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018214:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8018216:	f107 0318 	add.w	r3, r7, #24
 801821a:	4618      	mov	r0, r3
 801821c:	f7ed f9d6 	bl	80055cc <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8018220:	2300      	movs	r3, #0
 8018222:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8018224:	2301      	movs	r3, #1
 8018226:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018228:	2300      	movs	r3, #0
 801822a:	647b      	str	r3, [r7, #68]	@ 0x44
 801822c:	e025      	b.n	801827a <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 801822e:	683a      	ldr	r2, [r7, #0]
 8018230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018232:	4013      	ands	r3, r2
 8018234:	2b00      	cmp	r3, #0
 8018236:	d01a      	beq.n	801826e <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8018238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801823a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801823c:	4013      	ands	r3, r2
 801823e:	2b00      	cmp	r3, #0
 8018240:	d115      	bne.n	801826e <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018246:	4413      	add	r3, r2
 8018248:	3318      	adds	r3, #24
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018256:	2101      	movs	r1, #1
 8018258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801825a:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 801825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801825e:	f003 0320 	and.w	r3, r3, #32
 8018262:	2b00      	cmp	r3, #0
 8018264:	d003      	beq.n	801826e <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8018266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801826a:	4313      	orrs	r3, r2
 801826c:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801826e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018270:	3301      	adds	r3, #1
 8018272:	647b      	str	r3, [r7, #68]	@ 0x44
 8018274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018276:	005b      	lsls	r3, r3, #1
 8018278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801827e:	461a      	mov	r2, r3
 8018280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018282:	4293      	cmp	r3, r2
 8018284:	d3d3      	bcc.n	801822e <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8018286:	683a      	ldr	r2, [r7, #0]
 8018288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801828a:	429a      	cmp	r2, r3
 801828c:	d013      	beq.n	80182b6 <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801828e:	f107 0220 	add.w	r2, r7, #32
 8018292:	f107 0318 	add.w	r3, r7, #24
 8018296:	4611      	mov	r1, r2
 8018298:	4618      	mov	r0, r3
 801829a:	f7ed f9cf 	bl	800563c <xTaskCheckForTimeOut>
 801829e:	4603      	mov	r3, r0
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d004      	beq.n	80182ae <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80182a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80182a6:	488e      	ldr	r0, [pc, #568]	@ (80184e0 <xPhyStartAutoNegotiation+0x338>)
 80182a8:	f00a fbb6 	bl	8022a18 <lUDPLoggingPrintf>
            break;
 80182ac:	e004      	b.n	80182b8 <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80182ae:	2032      	movs	r0, #50	@ 0x32
 80182b0:	f7ec fc18 	bl	8004ae4 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80182b4:	e7b6      	b.n	8018224 <xPhyStartAutoNegotiation+0x7c>
            break;
 80182b6:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80182b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	f000 810b 	beq.w	80184d6 <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 80182c0:	2301      	movs	r3, #1
 80182c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80182c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80182ca:	43db      	mvns	r3, r3
 80182cc:	401a      	ands	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80182d2:	2300      	movs	r3, #0
 80182d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80182d6:	e0f7      	b.n	80184c8 <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80182d8:	687a      	ldr	r2, [r7, #4]
 80182da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182dc:	4413      	add	r3, r2
 80182de:	3318      	adds	r3, #24
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80182e8:	3202      	adds	r2, #2
 80182ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182ee:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 80182f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80182f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182f4:	4013      	ands	r3, r2
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	f000 80df 	beq.w	80184ba <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	687a      	ldr	r2, [r7, #4]
 8018302:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018304:	2100      	movs	r1, #0
 8018306:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018308:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018312:	2101      	movs	r1, #1
 8018314:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018316:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8018318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801831a:	f003 0304 	and.w	r3, r3, #4
 801831e:	2b00      	cmp	r3, #0
 8018320:	d005      	beq.n	801832e <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018328:	431a      	orrs	r2, r3
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 801832e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018330:	4a6c      	ldr	r2, [pc, #432]	@ (80184e4 <xPhyStartAutoNegotiation+0x33c>)
 8018332:	4293      	cmp	r3, r2
 8018334:	d130      	bne.n	8018398 <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	f107 0214 	add.w	r2, r7, #20
 801833e:	211e      	movs	r1, #30
 8018340:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018342:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	f003 0307 	and.w	r3, r3, #7
 801834a:	3b01      	subs	r3, #1
 801834c:	2b05      	cmp	r3, #5
 801834e:	d814      	bhi.n	801837a <xPhyStartAutoNegotiation+0x1d2>
 8018350:	a201      	add	r2, pc, #4	@ (adr r2, 8018358 <xPhyStartAutoNegotiation+0x1b0>)
 8018352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018356:	bf00      	nop
 8018358:	08018371 	.word	0x08018371
 801835c:	0801837b 	.word	0x0801837b
 8018360:	0801837b 	.word	0x0801837b
 8018364:	0801837b 	.word	0x0801837b
 8018368:	08018371 	.word	0x08018371
 801836c:	0801837b 	.word	0x0801837b
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018372:	f043 0302 	orr.w	r3, r3, #2
 8018376:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018378:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	f003 0307 	and.w	r3, r3, #7
 8018380:	2b02      	cmp	r3, #2
 8018382:	d801      	bhi.n	8018388 <xPhyStartAutoNegotiation+0x1e0>
 8018384:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8018386:	e05b      	b.n	8018440 <xPhyStartAutoNegotiation+0x298>
 8018388:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 801838a:	2b01      	cmp	r3, #1
 801838c:	d858      	bhi.n	8018440 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018390:	f043 0304 	orr.w	r3, r3, #4
 8018394:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018396:	e053      	b.n	8018440 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8018398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801839a:	4a53      	ldr	r2, [pc, #332]	@ (80184e8 <xPhyStartAutoNegotiation+0x340>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d126      	bne.n	80183ee <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 80183a0:	2300      	movs	r3, #0
 80183a2:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 80183a4:	2300      	movs	r3, #0
 80183a6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	f107 0210 	add.w	r2, r7, #16
 80183b0:	211f      	movs	r1, #31
 80183b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80183b4:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 80183b6:	693b      	ldr	r3, [r7, #16]
 80183b8:	0a1b      	lsrs	r3, r3, #8
 80183ba:	f003 0307 	and.w	r3, r3, #7
 80183be:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 80183c0:	2300      	movs	r3, #0
 80183c2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 80183c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c6:	2b02      	cmp	r3, #2
 80183c8:	d002      	beq.n	80183d0 <xPhyStartAutoNegotiation+0x228>
 80183ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183cc:	2b05      	cmp	r3, #5
 80183ce:	d103      	bne.n	80183d8 <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80183d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183d2:	f043 0302 	orr.w	r3, r3, #2
 80183d6:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 80183d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183da:	2b05      	cmp	r3, #5
 80183dc:	d002      	beq.n	80183e4 <xPhyStartAutoNegotiation+0x23c>
 80183de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183e0:	2b06      	cmp	r3, #6
 80183e2:	d12d      	bne.n	8018440 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80183e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183e6:	f043 0304 	orr.w	r3, r3, #4
 80183ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80183ec:	e028      	b.n	8018440 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 80183ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80183f0:	f7ff fc66 	bl	8017cc0 <xHas_1F_PHYSPCS>
 80183f4:	4603      	mov	r3, r0
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d01b      	beq.n	8018432 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f107 020c 	add.w	r2, r7, #12
 8018402:	211f      	movs	r1, #31
 8018404:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018406:	4798      	blx	r3
                ulRegValue = 0;
 8018408:	2300      	movs	r3, #0
 801840a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	f003 0310 	and.w	r3, r3, #16
 8018412:	2b00      	cmp	r3, #0
 8018414:	d003      	beq.n	801841e <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018418:	f043 0304 	orr.w	r3, r3, #4
 801841c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	f003 030c 	and.w	r3, r3, #12
 8018424:	2b04      	cmp	r3, #4
 8018426:	d10b      	bne.n	8018440 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801842a:	f043 0302 	orr.w	r3, r3, #2
 801842e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018430:	e006      	b.n	8018440 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801843a:	2110      	movs	r1, #16
 801843c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801843e:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8018440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018444:	f003 0304 	and.w	r3, r3, #4
 8018448:	2b00      	cmp	r3, #0
 801844a:	d001      	beq.n	8018450 <xPhyStartAutoNegotiation+0x2a8>
 801844c:	4827      	ldr	r0, [pc, #156]	@ (80184ec <xPhyStartAutoNegotiation+0x344>)
 801844e:	e000      	b.n	8018452 <xPhyStartAutoNegotiation+0x2aa>
 8018450:	4827      	ldr	r0, [pc, #156]	@ (80184f0 <xPhyStartAutoNegotiation+0x348>)
 8018452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018454:	f003 0302 	and.w	r3, r3, #2
 8018458:	2b00      	cmp	r3, #0
 801845a:	d001      	beq.n	8018460 <xPhyStartAutoNegotiation+0x2b8>
 801845c:	240a      	movs	r4, #10
 801845e:	e000      	b.n	8018462 <xPhyStartAutoNegotiation+0x2ba>
 8018460:	2464      	movs	r4, #100	@ 0x64
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018468:	4013      	ands	r3, r2
 801846a:	2b00      	cmp	r3, #0
 801846c:	d001      	beq.n	8018472 <xPhyStartAutoNegotiation+0x2ca>
 801846e:	4b21      	ldr	r3, [pc, #132]	@ (80184f4 <xPhyStartAutoNegotiation+0x34c>)
 8018470:	e000      	b.n	8018474 <xPhyStartAutoNegotiation+0x2cc>
 8018472:	4b21      	ldr	r3, [pc, #132]	@ (80184f8 <xPhyStartAutoNegotiation+0x350>)
 8018474:	9300      	str	r3, [sp, #0]
 8018476:	4623      	mov	r3, r4
 8018478:	4602      	mov	r2, r0
 801847a:	4820      	ldr	r0, [pc, #128]	@ (80184fc <xPhyStartAutoNegotiation+0x354>)
 801847c:	f00a facc 	bl	8022a18 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8018480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018482:	f003 0304 	and.w	r3, r3, #4
 8018486:	2b00      	cmp	r3, #0
 8018488:	d004      	beq.n	8018494 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	2202      	movs	r2, #2
 801848e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018492:	e003      	b.n	801849c <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2201      	movs	r2, #1
 8018498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 801849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801849e:	f003 0302 	and.w	r3, r3, #2
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d004      	beq.n	80184b0 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	2201      	movs	r2, #1
 80184aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80184ae:	e005      	b.n	80184bc <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2202      	movs	r2, #2
 80184b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80184b8:	e000      	b.n	80184bc <xPhyStartAutoNegotiation+0x314>
                continue;
 80184ba:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80184bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184be:	3301      	adds	r3, #1
 80184c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80184c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184cc:	461a      	mov	r2, r3
 80184ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184d0:	4293      	cmp	r3, r2
 80184d2:	f4ff af01 	bcc.w	80182d8 <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 80184d6:	2300      	movs	r3, #0
}
 80184d8:	4618      	mov	r0, r3
 80184da:	374c      	adds	r7, #76	@ 0x4c
 80184dc:	46bd      	mov	sp, r7
 80184de:	bd90      	pop	{r4, r7, pc}
 80184e0:	08027ed0 	.word	0x08027ed0
 80184e4:	00221560 	.word	0x00221560
 80184e8:	00221550 	.word	0x00221550
 80184ec:	08027f1c 	.word	0x08027f1c
 80184f0:	08027f24 	.word	0x08027f24
 80184f4:	08027f2c 	.word	0x08027f2c
 80184f8:	08027f34 	.word	0x08027f34
 80184fc:	08027f38 	.word	0x08027f38

08018500 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b088      	sub	sp, #32
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801850a:	2301      	movs	r3, #1
 801850c:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 801850e:	2300      	movs	r3, #0
 8018510:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	2b00      	cmp	r3, #0
 8018516:	dd2b      	ble.n	8018570 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	331c      	adds	r3, #28
 801851c:	4618      	mov	r0, r3
 801851e:	f7ed f855 	bl	80055cc <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018528:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801852a:	2300      	movs	r3, #0
 801852c:	61bb      	str	r3, [r7, #24]
 801852e:	e019      	b.n	8018564 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018534:	69fb      	ldr	r3, [r7, #28]
 8018536:	4013      	ands	r3, r2
 8018538:	2b00      	cmp	r3, #0
 801853a:	d10d      	bne.n	8018558 <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	431a      	orrs	r2, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801854c:	4619      	mov	r1, r3
 801854e:	4842      	ldr	r0, [pc, #264]	@ (8018658 <xPhyCheckLinkStatus+0x158>)
 8018550:	f00a fa62 	bl	8022a18 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8018554:	2301      	movs	r3, #1
 8018556:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	3301      	adds	r3, #1
 801855c:	61bb      	str	r3, [r7, #24]
 801855e:	69fb      	ldr	r3, [r7, #28]
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	61fb      	str	r3, [r7, #28]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018568:	69ba      	ldr	r2, [r7, #24]
 801856a:	429a      	cmp	r2, r3
 801856c:	dbe0      	blt.n	8018530 <xPhyCheckLinkStatus+0x30>
 801856e:	e06e      	b.n	801864e <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	f103 021c 	add.w	r2, r3, #28
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	3324      	adds	r3, #36	@ 0x24
 801857a:	4619      	mov	r1, r3
 801857c:	4610      	mov	r0, r2
 801857e:	f7ed f85d 	bl	800563c <xTaskCheckForTimeOut>
 8018582:	4603      	mov	r3, r0
 8018584:	2b00      	cmp	r3, #0
 8018586:	d062      	beq.n	801864e <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018588:	2300      	movs	r3, #0
 801858a:	61bb      	str	r3, [r7, #24]
 801858c:	e045      	b.n	801861a <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801858e:	687a      	ldr	r2, [r7, #4]
 8018590:	69bb      	ldr	r3, [r7, #24]
 8018592:	4413      	add	r3, r2
 8018594:	3318      	adds	r3, #24
 8018596:	781b      	ldrb	r3, [r3, #0]
 8018598:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	f107 020c 	add.w	r2, r7, #12
 80185a2:	2101      	movs	r1, #1
 80185a4:	6938      	ldr	r0, [r7, #16]
 80185a6:	4798      	blx	r3
 80185a8:	4603      	mov	r3, r0
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d12f      	bne.n	801860e <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80185b2:	69fb      	ldr	r3, [r7, #28]
 80185b4:	4013      	ands	r3, r2
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	bf14      	ite	ne
 80185ba:	2301      	movne	r3, #1
 80185bc:	2300      	moveq	r3, #0
 80185be:	b2da      	uxtb	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	f003 0304 	and.w	r3, r3, #4
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	bf14      	ite	ne
 80185ca:	2301      	movne	r3, #1
 80185cc:	2300      	moveq	r3, #0
 80185ce:	b2db      	uxtb	r3, r3
 80185d0:	4053      	eors	r3, r2
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d01a      	beq.n	801860e <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	f003 0304 	and.w	r3, r3, #4
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d006      	beq.n	80185f0 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80185e6:	69fb      	ldr	r3, [r7, #28]
 80185e8:	431a      	orrs	r2, r3
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80185ee:	e006      	b.n	80185fe <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80185f4:	69fb      	ldr	r3, [r7, #28]
 80185f6:	43db      	mvns	r3, r3
 80185f8:	401a      	ands	r2, r3
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018602:	4619      	mov	r1, r3
 8018604:	4814      	ldr	r0, [pc, #80]	@ (8018658 <xPhyCheckLinkStatus+0x158>)
 8018606:	f00a fa07 	bl	8022a18 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801860a:	2301      	movs	r3, #1
 801860c:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	3301      	adds	r3, #1
 8018612:	61bb      	str	r3, [r7, #24]
 8018614:	69fb      	ldr	r3, [r7, #28]
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	61fb      	str	r3, [r7, #28]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801861e:	69ba      	ldr	r2, [r7, #24]
 8018620:	429a      	cmp	r2, r3
 8018622:	dbb4      	blt.n	801858e <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	331c      	adds	r3, #28
 8018628:	4618      	mov	r0, r3
 801862a:	f7ec ffcf 	bl	80055cc <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018632:	69fb      	ldr	r3, [r7, #28]
 8018634:	085b      	lsrs	r3, r3, #1
 8018636:	4013      	ands	r3, r2
 8018638:	2b00      	cmp	r3, #0
 801863a:	d004      	beq.n	8018646 <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018642:	625a      	str	r2, [r3, #36]	@ 0x24
 8018644:	e003      	b.n	801864e <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801864c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 801864e:	697b      	ldr	r3, [r7, #20]
}
 8018650:	4618      	mov	r0, r3
 8018652:	3720      	adds	r7, #32
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}
 8018658:	08027f6c 	.word	0x08027f6c

0801865c <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 801865c:	b480      	push	{r7}
 801865e:	b085      	sub	sp, #20
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8018664:	2300      	movs	r3, #0
 8018666:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018668:	2300      	movs	r3, #0
 801866a:	60bb      	str	r3, [r7, #8]
 801866c:	e013      	b.n	8018696 <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 801866e:	2201      	movs	r2, #1
 8018670:	68bb      	ldr	r3, [r7, #8]
 8018672:	fa02 f303 	lsl.w	r3, r2, r3
 8018676:	461a      	mov	r2, r3
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	4013      	ands	r3, r2
 801867c:	2b00      	cmp	r3, #0
 801867e:	d007      	beq.n	8018690 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8018680:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	fa22 f303 	lsr.w	r3, r2, r3
 801868a:	68fa      	ldr	r2, [r7, #12]
 801868c:	4313      	orrs	r3, r2
 801868e:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	3301      	adds	r3, #1
 8018694:	60bb      	str	r3, [r7, #8]
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	2b1f      	cmp	r3, #31
 801869a:	dde8      	ble.n	801866e <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 801869c:	68fb      	ldr	r3, [r7, #12]
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3714      	adds	r7, #20
 80186a2:	46bd      	mov	sp, r7
 80186a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a8:	4770      	bx	lr
	...

080186ac <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b087      	sub	sp, #28
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 80186b4:	f04f 33ff 	mov.w	r3, #4294967295
 80186b8:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80186ba:	2300      	movs	r3, #0
 80186bc:	613b      	str	r3, [r7, #16]
 80186be:	e024      	b.n	801870a <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 80186c0:	693b      	ldr	r3, [r7, #16]
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	4413      	add	r3, r2
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	461a      	mov	r2, r3
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	4053      	eors	r3, r2
 80186ce:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80186d0:	2300      	movs	r3, #0
 80186d2:	617b      	str	r3, [r7, #20]
 80186d4:	e013      	b.n	80186fe <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	f003 0301 	and.w	r3, r3, #1
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d008      	beq.n	80186f2 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	085c      	lsrs	r4, r3, #1
 80186e4:	480e      	ldr	r0, [pc, #56]	@ (8018720 <prvComputeCRC32_MAC+0x74>)
 80186e6:	f7ff ffb9 	bl	801865c <prvRevBits32>
 80186ea:	4603      	mov	r3, r0
 80186ec:	4063      	eors	r3, r4
 80186ee:	60fb      	str	r3, [r7, #12]
 80186f0:	e002      	b.n	80186f8 <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	085b      	lsrs	r3, r3, #1
 80186f6:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80186f8:	697b      	ldr	r3, [r7, #20]
 80186fa:	3301      	adds	r3, #1
 80186fc:	617b      	str	r3, [r7, #20]
 80186fe:	697b      	ldr	r3, [r7, #20]
 8018700:	2b07      	cmp	r3, #7
 8018702:	dde8      	ble.n	80186d6 <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8018704:	693b      	ldr	r3, [r7, #16]
 8018706:	3301      	adds	r3, #1
 8018708:	613b      	str	r3, [r7, #16]
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	2b05      	cmp	r3, #5
 801870e:	ddd7      	ble.n	80186c0 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8018710:	68fb      	ldr	r3, [r7, #12]
 8018712:	43db      	mvns	r3, r3
 8018714:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8018716:	68fb      	ldr	r3, [r7, #12]
}
 8018718:	4618      	mov	r0, r3
 801871a:	371c      	adds	r7, #28
 801871c:	46bd      	mov	sp, r7
 801871e:	bd90      	pop	{r4, r7, pc}
 8018720:	04c11db7 	.word	0x04c11db7

08018724 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b084      	sub	sp, #16
 8018728:	af00      	add	r7, sp, #0
 801872a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f7ff ffbd 	bl	80186ac <prvComputeCRC32_MAC>
 8018732:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f7ff ff91 	bl	801865c <prvRevBits32>
 801873a:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	0e9b      	lsrs	r3, r3, #26
}
 8018740:	4618      	mov	r0, r3
 8018742:	3710      	adds	r7, #16
 8018744:	46bd      	mov	sp, r7
 8018746:	bd80      	pop	{r7, pc}

08018748 <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b084      	sub	sp, #16
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8018752:	6838      	ldr	r0, [r7, #0]
 8018754:	f7ff ffe6 	bl	8018724 <prvComputeEthernet_MACHash>
 8018758:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	2b1f      	cmp	r3, #31
 801875e:	d80c      	bhi.n	801877a <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	691a      	ldr	r2, [r3, #16]
 8018766:	2101      	movs	r1, #1
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	fa01 f303 	lsl.w	r3, r1, r3
 801876e:	4619      	mov	r1, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	430a      	orrs	r2, r1
 8018776:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8018778:	e00d      	b.n	8018796 <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	695a      	ldr	r2, [r3, #20]
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	f003 031f 	and.w	r3, r3, #31
 8018786:	2101      	movs	r1, #1
 8018788:	fa01 f303 	lsl.w	r3, r1, r3
 801878c:	4619      	mov	r1, r3
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	430a      	orrs	r2, r1
 8018794:	615a      	str	r2, [r3, #20]
}
 8018796:	bf00      	nop
 8018798:	3710      	adds	r7, #16
 801879a:	46bd      	mov	sp, r7
 801879c:	bd80      	pop	{r7, pc}

0801879e <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 801879e:	b580      	push	{r7, lr}
 80187a0:	b086      	sub	sp, #24
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 80187a6:	230a      	movs	r3, #10
 80187a8:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 80187aa:	2300      	movs	r3, #0
 80187ac:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80187ae:	6939      	ldr	r1, [r7, #16]
 80187b0:	6878      	ldr	r0, [r7, #4]
 80187b2:	f7ff f9bf 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 80187b6:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d002      	beq.n	80187c4 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80187c2:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 80187c4:	697b      	ldr	r3, [r7, #20]
}
 80187c6:	4618      	mov	r0, r3
 80187c8:	3718      	adds	r7, #24
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
	...

080187d0 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b08e      	sub	sp, #56	@ 0x38
 80187d4:	af02      	add	r7, sp, #8
 80187d6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80187d8:	2300      	movs	r3, #0
 80187da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 80187dc:	2300      	movs	r3, #0
 80187de:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 80187e0:	4b8d      	ldr	r3, [pc, #564]	@ (8018a18 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	f040 8104 	bne.w	80189f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 80187ea:	4a8c      	ldr	r2, [pc, #560]	@ (8018a1c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7f5 fa71 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 80187f6:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 80187f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d104      	bne.n	8018808 <xSTM32H_NetworkInterfaceInitialise+0x38>
 80187fe:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8018802:	4887      	ldr	r0, [pc, #540]	@ (8018a20 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018804:	f7e9 f942 	bl	8001a8c <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8018808:	4b86      	ldr	r3, [pc, #536]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801880a:	4a87      	ldr	r2, [pc, #540]	@ (8018a28 <xSTM32H_NetworkInterfaceInitialise+0x258>)
 801880c:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 801880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018810:	33e8      	adds	r3, #232	@ 0xe8
 8018812:	4a84      	ldr	r2, [pc, #528]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018814:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8018816:	4b83      	ldr	r3, [pc, #524]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018818:	2201      	movs	r2, #1
 801881a:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 801881c:	4b81      	ldr	r3, [pc, #516]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801881e:	4a83      	ldr	r2, [pc, #524]	@ (8018a2c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018820:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018822:	4b80      	ldr	r3, [pc, #512]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018824:	4a82      	ldr	r2, [pc, #520]	@ (8018a30 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018826:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8018828:	4b7e      	ldr	r3, [pc, #504]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801882a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 801882e:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018830:	2260      	movs	r2, #96	@ 0x60
 8018832:	2100      	movs	r1, #0
 8018834:	487d      	ldr	r0, [pc, #500]	@ (8018a2c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018836:	f00a fc18 	bl	802306a <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801883a:	2260      	movs	r2, #96	@ 0x60
 801883c:	2100      	movs	r1, #0
 801883e:	487c      	ldr	r0, [pc, #496]	@ (8018a30 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018840:	f00a fc13 	bl	802306a <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8018844:	4877      	ldr	r0, [pc, #476]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018846:	f000 fc71 	bl	801912c <HAL_ETH_Init>
 801884a:	4603      	mov	r3, r0
 801884c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8018850:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018854:	2b00      	cmp	r3, #0
 8018856:	f040 80c9 	bne.w	80189ec <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801885a:	4b72      	ldr	r3, [pc, #456]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	6899      	ldr	r1, [r3, #8]
 8018860:	4b70      	ldr	r3, [pc, #448]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018862:	681a      	ldr	r2, [r3, #0]
 8018864:	f240 4316 	movw	r3, #1046	@ 0x416
 8018868:	430b      	orrs	r3, r1
 801886a:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 801886c:	2234      	movs	r2, #52	@ 0x34
 801886e:	2100      	movs	r1, #0
 8018870:	4870      	ldr	r0, [pc, #448]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018872:	f00a fbfa 	bl	802306a <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8018876:	4b6f      	ldr	r3, [pc, #444]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018878:	2220      	movs	r2, #32
 801887a:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 801887c:	4b6d      	ldr	r3, [pc, #436]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	f043 0301 	orr.w	r3, r3, #1
 8018884:	4a6b      	ldr	r2, [pc, #428]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018886:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8018888:	4b6a      	ldr	r3, [pc, #424]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801888a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801888e:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8018890:	4b68      	ldr	r3, [pc, #416]	@ (8018a34 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018892:	2200      	movs	r2, #0
 8018894:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8018896:	2104      	movs	r1, #4
 8018898:	2004      	movs	r0, #4
 801889a:	f7eb fa43 	bl	8003d24 <xQueueCreateCountingSemaphore>
 801889e:	4603      	mov	r3, r0
 80188a0:	4a65      	ldr	r2, [pc, #404]	@ (8018a38 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80188a2:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 80188a4:	4b64      	ldr	r3, [pc, #400]	@ (8018a38 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d104      	bne.n	80188b6 <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80188ac:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80188b0:	485b      	ldr	r0, [pc, #364]	@ (8018a20 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80188b2:	f7e9 f8eb 	bl	8001a8c <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80188b6:	2001      	movs	r0, #1
 80188b8:	f7eb fa1b 	bl	8003cf2 <xQueueCreateMutex>
 80188bc:	4603      	mov	r3, r0
 80188be:	4a5f      	ldr	r2, [pc, #380]	@ (8018a3c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80188c0:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 80188c2:	4b5e      	ldr	r3, [pc, #376]	@ (8018a3c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d104      	bne.n	80188d4 <xSTM32H_NetworkInterfaceInitialise+0x104>
 80188ca:	f240 117f 	movw	r1, #383	@ 0x17f
 80188ce:	4854      	ldr	r0, [pc, #336]	@ (8018a20 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80188d0:	f7e9 f8dc 	bl	8001a8c <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80188d4:	2300      	movs	r3, #0
 80188d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80188d8:	e015      	b.n	8018906 <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 80188da:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80188de:	f7ff ff5e 	bl	801879e <pucGetRXBuffer>
 80188e2:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d104      	bne.n	80188f4 <xSTM32H_NetworkInterfaceInitialise+0x124>
 80188ea:	f240 1189 	movw	r1, #393	@ 0x189
 80188ee:	484c      	ldr	r0, [pc, #304]	@ (8018a20 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80188f0:	f7e9 f8cc 	bl	8001a8c <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80188f4:	2300      	movs	r3, #0
 80188f6:	69fa      	ldr	r2, [r7, #28]
 80188f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80188fa:	484a      	ldr	r0, [pc, #296]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80188fc:	f000 fd02 	bl	8019304 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018902:	3301      	adds	r3, #1
 8018904:	627b      	str	r3, [r7, #36]	@ 0x24
 8018906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018908:	2b03      	cmp	r3, #3
 801890a:	d9e6      	bls.n	80188da <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 801890c:	494c      	ldr	r1, [pc, #304]	@ (8018a40 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 801890e:	4845      	ldr	r0, [pc, #276]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018910:	f7ff ff1a 	bl	8018748 <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018914:	494b      	ldr	r1, [pc, #300]	@ (8018a44 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8018916:	4843      	ldr	r0, [pc, #268]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018918:	f7ff ff16 	bl	8018748 <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 801891c:	e03a      	b.n	8018994 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 801891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018920:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018924:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018928:	b2db      	uxtb	r3, r3
 801892a:	2b00      	cmp	r3, #0
 801892c:	d002      	beq.n	8018934 <xSTM32H_NetworkInterfaceInitialise+0x164>
 801892e:	2b01      	cmp	r3, #1
 8018930:	d00d      	beq.n	801894e <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8018932:	e028      	b.n	8018986 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8018934:	4b3b      	ldr	r3, [pc, #236]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018936:	685a      	ldr	r2, [r3, #4]
 8018938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801893a:	33e8      	adds	r3, #232	@ 0xe8
 801893c:	429a      	cmp	r2, r3
 801893e:	d021      	beq.n	8018984 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8018940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018942:	33e8      	adds	r3, #232	@ 0xe8
 8018944:	4619      	mov	r1, r3
 8018946:	4837      	ldr	r0, [pc, #220]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018948:	f7ff fefe 	bl	8018748 <prvSetMAC_HashFilter>
                                break;
 801894c:	e01a      	b.n	8018984 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 801894e:	4a3e      	ldr	r2, [pc, #248]	@ (8018a48 <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8018950:	f107 0314 	add.w	r3, r7, #20
 8018954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018958:	6018      	str	r0, [r3, #0]
 801895a:	3304      	adds	r3, #4
 801895c:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 801895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018960:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018964:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 8018966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018968:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801896c:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 801896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018970:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8018974:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8018976:	f107 0314 	add.w	r3, r7, #20
 801897a:	4619      	mov	r1, r3
 801897c:	4829      	ldr	r0, [pc, #164]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801897e:	f7ff fee3 	bl	8018748 <prvSetMAC_HashFilter>
                               break;
 8018982:	e000      	b.n	8018986 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8018984:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 8018986:	4b25      	ldr	r3, [pc, #148]	@ (8018a1c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801898c:	4618      	mov	r0, r3
 801898e:	f7f5 f9c5 	bl	800dd1c <FreeRTOS_NextEndPoint>
 8018992:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8018994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018996:	2b00      	cmp	r3, #0
 8018998:	d1c1      	bne.n	801891e <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801899a:	4a2c      	ldr	r2, [pc, #176]	@ (8018a4c <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 801899c:	f107 030c 	add.w	r3, r7, #12
 80189a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80189a4:	6018      	str	r0, [r3, #0]
 80189a6:	3304      	adds	r3, #4
 80189a8:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80189aa:	f107 030c 	add.w	r3, r7, #12
 80189ae:	4619      	mov	r1, r3
 80189b0:	481c      	ldr	r0, [pc, #112]	@ (8018a24 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80189b2:	f7ff fec9 	bl	8018748 <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80189b6:	f000 f911 	bl	8018bdc <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80189ba:	2001      	movs	r0, #1
 80189bc:	f000 f926 	bl	8018c0c <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 80189c0:	4b23      	ldr	r3, [pc, #140]	@ (8018a50 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 80189c2:	9301      	str	r3, [sp, #4]
 80189c4:	2305      	movs	r3, #5
 80189c6:	9300      	str	r3, [sp, #0]
 80189c8:	2300      	movs	r3, #0
 80189ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80189ce:	4921      	ldr	r1, [pc, #132]	@ (8018a54 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 80189d0:	4821      	ldr	r0, [pc, #132]	@ (8018a58 <xSTM32H_NetworkInterfaceInitialise+0x288>)
 80189d2:	f7eb fea9 	bl	8004728 <xTaskCreate>
 80189d6:	4603      	mov	r3, r0
 80189d8:	2b01      	cmp	r3, #1
 80189da:	d103      	bne.n	80189e4 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 80189dc:	4b0e      	ldr	r3, [pc, #56]	@ (8018a18 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80189de:	2201      	movs	r2, #1
 80189e0:	701a      	strb	r2, [r3, #0]
 80189e2:	e006      	b.n	80189f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80189e4:	4b0c      	ldr	r3, [pc, #48]	@ (8018a18 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80189e6:	2202      	movs	r2, #2
 80189e8:	701a      	strb	r2, [r3, #0]
 80189ea:	e002      	b.n	80189f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80189ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018a18 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80189ee:	2202      	movs	r2, #2
 80189f0:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80189f2:	4b09      	ldr	r3, [pc, #36]	@ (8018a18 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80189f4:	781b      	ldrb	r3, [r3, #0]
 80189f6:	2b01      	cmp	r3, #1
 80189f8:	d108      	bne.n	8018a0c <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80189fa:	4b18      	ldr	r3, [pc, #96]	@ (8018a5c <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80189fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d004      	beq.n	8018a0c <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8018a02:	2301      	movs	r3, #1
 8018a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8018a06:	4816      	ldr	r0, [pc, #88]	@ (8018a60 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8018a08:	f00a f806 	bl	8022a18 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8018a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3730      	adds	r7, #48	@ 0x30
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}
 8018a16:	bf00      	nop
 8018a18:	20002488 	.word	0x20002488
 8018a1c:	2000253c 	.word	0x2000253c
 8018a20:	08027f94 	.word	0x08027f94
 8018a24:	20002494 	.word	0x20002494
 8018a28:	40028000 	.word	0x40028000
 8018a2c:	24040060 	.word	0x24040060
 8018a30:	24040000 	.word	0x24040000
 8018a34:	20002508 	.word	0x20002508
 8018a38:	2000248c 	.word	0x2000248c
 8018a3c:	20002490 	.word	0x20002490
 8018a40:	0802822c 	.word	0x0802822c
 8018a44:	08028234 	.word	0x08028234
 8018a48:	0802800c 	.word	0x0802800c
 8018a4c:	08028014 	.word	0x08028014
 8018a50:	20002540 	.word	0x20002540
 8018a54:	08027fe8 	.word	0x08027fe8
 8018a58:	08018fc1 	.word	0x08018fc1
 8018a5c:	20002544 	.word	0x20002544
 8018a60:	08027ff4 	.word	0x08027ff4

08018a64 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8018a64:	b480      	push	{r7}
 8018a66:	b085      	sub	sp, #20
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8018a6c:	4b07      	ldr	r3, [pc, #28]	@ (8018a8c <xSTM32H_GetPhyLinkStatus+0x28>)
 8018a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d002      	beq.n	8018a7a <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8018a74:	2301      	movs	r3, #1
 8018a76:	60fb      	str	r3, [r7, #12]
 8018a78:	e001      	b.n	8018a7e <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8018a7e:	68fb      	ldr	r3, [r7, #12]
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3714      	adds	r7, #20
 8018a84:	46bd      	mov	sp, r7
 8018a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8a:	4770      	bx	lr
 8018a8c:	20002544 	.word	0x20002544

08018a90 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	4a10      	ldr	r2, [pc, #64]	@ (8018ae0 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8018a9e:	2111      	movs	r1, #17
 8018aa0:	4810      	ldr	r0, [pc, #64]	@ (8018ae4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018aa2:	f00a ffe5 	bl	8023a70 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8018aa6:	2228      	movs	r2, #40	@ 0x28
 8018aa8:	2100      	movs	r1, #0
 8018aaa:	6838      	ldr	r0, [r7, #0]
 8018aac:	f00a fadd 	bl	802306a <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8018ab0:	683b      	ldr	r3, [r7, #0]
 8018ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8018ae4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018ab4:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8018ab6:	687a      	ldr	r2, [r7, #4]
 8018ab8:	683b      	ldr	r3, [r7, #0]
 8018aba:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	4a0a      	ldr	r2, [pc, #40]	@ (8018ae8 <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8018ac0:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	4a09      	ldr	r2, [pc, #36]	@ (8018aec <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8018ac6:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	4a09      	ldr	r2, [pc, #36]	@ (8018af0 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8018acc:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8018ace:	6838      	ldr	r0, [r7, #0]
 8018ad0:	f7f5 f82e 	bl	800db30 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8018ad4:	683b      	ldr	r3, [r7, #0]
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3708      	adds	r7, #8
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	0802801c 	.word	0x0802801c
 8018ae4:	20002584 	.word	0x20002584
 8018ae8:	080187d1 	.word	0x080187d1
 8018aec:	08018af5 	.word	0x08018af5
 8018af0:	08018a65 	.word	0x08018a65

08018af4 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b08a      	sub	sp, #40	@ 0x28
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	60f8      	str	r0, [r7, #12]
 8018afc:	60b9      	str	r1, [r7, #8]
 8018afe:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018b00:	2300      	movs	r3, #0
 8018b02:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8018b04:	2364      	movs	r3, #100	@ 0x64
 8018b06:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8018b08:	68f8      	ldr	r0, [r7, #12]
 8018b0a:	f7ff ffab 	bl	8018a64 <xSTM32H_GetPhyLinkStatus>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	2b01      	cmp	r3, #1
 8018b12:	d14c      	bne.n	8018bae <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018b14:	68bb      	ldr	r3, [r7, #8]
 8018b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b18:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d104      	bne.n	8018b2a <xSTM32H_NetworkInterfaceOutput+0x36>
 8018b20:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018b24:	4827      	ldr	r0, [pc, #156]	@ (8018bc4 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8018b26:	f7e8 ffb1 	bl	8001a8c <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 8018b2a:	69fb      	ldr	r3, [r7, #28]
 8018b2c:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8018b2e:	68bb      	ldr	r3, [r7, #8]
 8018b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8018b32:	617b      	str	r3, [r7, #20]
 8018b34:	2300      	movs	r3, #0
 8018b36:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8018b38:	68bb      	ldr	r3, [r7, #8]
 8018b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b3c:	4a22      	ldr	r2, [pc, #136]	@ (8018bc8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018b3e:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8018b40:	4a21      	ldr	r2, [pc, #132]	@ (8018bc8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018b42:	f107 0310 	add.w	r3, r7, #16
 8018b46:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8018b48:	4b20      	ldr	r3, [pc, #128]	@ (8018bcc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	6a39      	ldr	r1, [r7, #32]
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7eb faca 	bl	80040e8 <xQueueSemaphoreTake>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2b01      	cmp	r3, #1
 8018b58:	d003      	beq.n	8018b62 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8018b5a:	481d      	ldr	r0, [pc, #116]	@ (8018bd0 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8018b5c:	f009 ff5c 	bl	8022a18 <lUDPLoggingPrintf>
 8018b60:	e025      	b.n	8018bae <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8018b62:	f3bf 8f4f 	dsb	sy
}
 8018b66:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8018b68:	4b1a      	ldr	r3, [pc, #104]	@ (8018bd4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	6a39      	ldr	r1, [r7, #32]
 8018b6e:	4618      	mov	r0, r3
 8018b70:	f7eb faba 	bl	80040e8 <xQueueSemaphoreTake>
 8018b74:	4603      	mov	r3, r0
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d019      	beq.n	8018bae <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8018b7e:	4912      	ldr	r1, [pc, #72]	@ (8018bc8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018b80:	4815      	ldr	r0, [pc, #84]	@ (8018bd8 <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8018b82:	f000 fcef 	bl	8019564 <HAL_ETH_Transmit_IT>
 8018b86:	4603      	mov	r3, r0
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	d102      	bne.n	8018b92 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018b90:	e006      	b.n	8018ba0 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018b92:	4b0e      	ldr	r3, [pc, #56]	@ (8018bcc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018b94:	6818      	ldr	r0, [r3, #0]
 8018b96:	2300      	movs	r3, #0
 8018b98:	2200      	movs	r2, #0
 8018b9a:	2100      	movs	r1, #0
 8018b9c:	f7eb f8ec 	bl	8003d78 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8018ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8018bd4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018ba2:	6818      	ldr	r0, [r3, #0]
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	2100      	movs	r1, #0
 8018baa:	f7eb f8e5 	bl	8003d78 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d002      	beq.n	8018bba <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8018bb4:	68b8      	ldr	r0, [r7, #8]
 8018bb6:	f7ff f825 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8018bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3728      	adds	r7, #40	@ 0x28
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	08027f94 	.word	0x08027f94
 8018bc8:	20002508 	.word	0x20002508
 8018bcc:	2000248c 	.word	0x2000248c
 8018bd0:	08028024 	.word	0x08028024
 8018bd4:	20002490 	.word	0x20002490
 8018bd8:	20002494 	.word	0x20002494

08018bdc <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8018be0:	4a06      	ldr	r2, [pc, #24]	@ (8018bfc <prvMACBProbePhy+0x20>)
 8018be2:	4907      	ldr	r1, [pc, #28]	@ (8018c00 <prvMACBProbePhy+0x24>)
 8018be4:	4807      	ldr	r0, [pc, #28]	@ (8018c04 <prvMACBProbePhy+0x28>)
 8018be6:	f7ff f8c5 	bl	8017d74 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8018bea:	4806      	ldr	r0, [pc, #24]	@ (8018c04 <prvMACBProbePhy+0x28>)
 8018bec:	f7ff f8d8 	bl	8017da0 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8018bf0:	4905      	ldr	r1, [pc, #20]	@ (8018c08 <prvMACBProbePhy+0x2c>)
 8018bf2:	4804      	ldr	r0, [pc, #16]	@ (8018c04 <prvMACBProbePhy+0x28>)
 8018bf4:	f7ff f9d2 	bl	8017f9c <xPhyConfigure>
}
 8018bf8:	bf00      	nop
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	08018dfd 	.word	0x08018dfd
 8018c00:	08018dc5 	.word	0x08018dc5
 8018c04:	20002544 	.word	0x20002544
 8018c08:	0802832c 	.word	0x0802832c

08018c0c <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b09e      	sub	sp, #120	@ 0x78
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018c14:	2300      	movs	r3, #0
 8018c16:	677b      	str	r3, [r7, #116]	@ 0x74
 8018c18:	2300      	movs	r3, #0
 8018c1a:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8018c1c:	4b25      	ldr	r3, [pc, #148]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c20:	687a      	ldr	r2, [r7, #4]
 8018c22:	4619      	mov	r1, r3
 8018c24:	4824      	ldr	r0, [pc, #144]	@ (8018cb8 <prvEthernetUpdateConfig+0xac>)
 8018c26:	f009 fef7 	bl	8022a18 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d103      	bne.n	8018c38 <prvEthernetUpdateConfig+0x2c>
 8018c30:	4b20      	ldr	r3, [pc, #128]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d035      	beq.n	8018ca4 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8018c38:	4b1e      	ldr	r3, [pc, #120]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c3c:	2201      	movs	r2, #1
 8018c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018c42:	3b01      	subs	r3, #1
 8018c44:	4619      	mov	r1, r3
 8018c46:	481b      	ldr	r0, [pc, #108]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c48:	f7ff faae 	bl	80181a8 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8018c4c:	4b19      	ldr	r3, [pc, #100]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018c52:	2b02      	cmp	r3, #2
 8018c54:	d103      	bne.n	8018c5e <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8018c56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018c5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8018c5c:	e001      	b.n	8018c62 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018c62:	4b14      	ldr	r3, [pc, #80]	@ (8018cb4 <prvEthernetUpdateConfig+0xa8>)
 8018c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018c68:	2b01      	cmp	r3, #1
 8018c6a:	d102      	bne.n	8018c72 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018c70:	e002      	b.n	8018c78 <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018c72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018c76:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018c78:	f107 030c 	add.w	r3, r7, #12
 8018c7c:	4619      	mov	r1, r3
 8018c7e:	480f      	ldr	r0, [pc, #60]	@ (8018cbc <prvEthernetUpdateConfig+0xb0>)
 8018c80:	f000 ffcc 	bl	8019c1c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018c86:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8018c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018c8a:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018c8c:	f107 030c 	add.w	r3, r7, #12
 8018c90:	4619      	mov	r1, r3
 8018c92:	480a      	ldr	r0, [pc, #40]	@ (8018cbc <prvEthernetUpdateConfig+0xb0>)
 8018c94:	f001 f996 	bl	8019fc4 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8018c98:	2301      	movs	r3, #1
 8018c9a:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018c9c:	4807      	ldr	r0, [pc, #28]	@ (8018cbc <prvEthernetUpdateConfig+0xb0>)
 8018c9e:	f000 fb64 	bl	801936a <HAL_ETH_Start_IT>
 8018ca2:	e003      	b.n	8018cac <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018ca4:	4805      	ldr	r0, [pc, #20]	@ (8018cbc <prvEthernetUpdateConfig+0xb0>)
 8018ca6:	f000 fbe5 	bl	8019474 <HAL_ETH_Stop_IT>
    }
}
 8018caa:	bf00      	nop
 8018cac:	bf00      	nop
 8018cae:	3778      	adds	r7, #120	@ 0x78
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	20002544 	.word	0x20002544
 8018cb8:	0802805c 	.word	0x0802805c
 8018cbc:	20002494 	.word	0x20002494

08018cc0 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b08c      	sub	sp, #48	@ 0x30
 8018cc4:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8018cc6:	2300      	movs	r3, #0
 8018cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8018cce:	f107 0308 	add.w	r3, r7, #8
 8018cd2:	4619      	mov	r1, r3
 8018cd4:	4838      	ldr	r0, [pc, #224]	@ (8018db8 <prvNetworkInterfaceInput+0xf8>)
 8018cd6:	f000 fd19 	bl	801970c <HAL_ETH_GetRxData>
 8018cda:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8018cdc:	69fb      	ldr	r3, [r7, #28]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d101      	bne.n	8018ce6 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8018ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ce4:	e064      	b.n	8018db0 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8018ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ce8:	3301      	adds	r3, #1
 8018cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8018cec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018cf0:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8018cf2:	68bb      	ldr	r3, [r7, #8]
 8018cf4:	2b00      	cmp	r3, #0
 8018cf6:	d004      	beq.n	8018d02 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8018cf8:	68bb      	ldr	r3, [r7, #8]
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7f1 ff8d 	bl	800ac1a <pxPacketBuffer_to_NetworkBuffer>
 8018d00:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8018d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d102      	bne.n	8018d0e <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8018d08:	482c      	ldr	r0, [pc, #176]	@ (8018dbc <prvNetworkInterfaceInput+0xfc>)
 8018d0a:	f009 fe85 	bl	8022a18 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8018d0e:	2100      	movs	r1, #0
 8018d10:	69b8      	ldr	r0, [r7, #24]
 8018d12:	f7fe ff0f 	bl	8017b34 <pxGetNetworkBufferWithDescriptor>
 8018d16:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d102      	bne.n	8018d24 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018d22:	e005      	b.n	8018d30 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d002      	beq.n	8018d30 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8018d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d2c:	69fa      	ldr	r2, [r7, #28]
 8018d2e:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018d30:	2300      	movs	r3, #0
 8018d32:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018d34:	697b      	ldr	r3, [r7, #20]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d002      	beq.n	8018d40 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8018d3a:	697b      	ldr	r3, [r7, #20]
 8018d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d3e:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018d40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018d42:	481d      	ldr	r0, [pc, #116]	@ (8018db8 <prvNetworkInterfaceInput+0xf8>)
 8018d44:	f000 fd2a 	bl	801979c <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8018d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d0bd      	beq.n	8018cca <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d56:	4618      	mov	r0, r3
 8018d58:	f7f1 f8c6 	bl	8009ee8 <eConsiderFrameForProcessing>
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d002      	beq.n	8018d68 <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018d62:	2301      	movs	r3, #1
 8018d64:	623b      	str	r3, [r7, #32]
 8018d66:	e01c      	b.n	8018da2 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8018d68:	2301      	movs	r3, #1
 8018d6a:	703b      	strb	r3, [r7, #0]
 8018d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d6e:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018d70:	4b13      	ldr	r3, [pc, #76]	@ (8018dc0 <prvNetworkInterfaceInput+0x100>)
 8018d72:	681a      	ldr	r2, [r3, #0]
 8018d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d76:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8018d78:	4b11      	ldr	r3, [pc, #68]	@ (8018dc0 <prvNetworkInterfaceInput+0x100>)
 8018d7a:	681a      	ldr	r2, [r3, #0]
 8018d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d80:	4619      	mov	r1, r3
 8018d82:	4610      	mov	r0, r2
 8018d84:	f7f5 fa78 	bl	800e278 <FreeRTOS_MatchingEndpoint>
 8018d88:	4602      	mov	r2, r0
 8018d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018d8c:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018d8e:	463b      	mov	r3, r7
 8018d90:	2100      	movs	r1, #0
 8018d92:	4618      	mov	r0, r3
 8018d94:	f7f1 f854 	bl	8009e40 <xSendEventStructToIPTask>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d101      	bne.n	8018da2 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018d9e:	2301      	movs	r3, #1
 8018da0:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018da2:	6a3b      	ldr	r3, [r7, #32]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d090      	beq.n	8018cca <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8018da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018daa:	f7fe ff2b 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
    {
 8018dae:	e78c      	b.n	8018cca <prvNetworkInterfaceInput+0xa>
}
 8018db0:	4618      	mov	r0, r3
 8018db2:	3730      	adds	r7, #48	@ 0x30
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	20002494 	.word	0x20002494
 8018dbc:	08028090 	.word	0x08028090
 8018dc0:	2000253c 	.word	0x2000253c

08018dc4 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b086      	sub	sp, #24
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd4:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	68ba      	ldr	r2, [r7, #8]
 8018dda:	68f9      	ldr	r1, [r7, #12]
 8018ddc:	4806      	ldr	r0, [pc, #24]	@ (8018df8 <ETH_PHY_IO_ReadReg+0x34>)
 8018dde:	f000 fe75 	bl	8019acc <HAL_ETH_ReadPHYRegister>
 8018de2:	4603      	mov	r3, r0
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d101      	bne.n	8018dec <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8018de8:	2300      	movs	r3, #0
 8018dea:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018dec:	697b      	ldr	r3, [r7, #20]
}
 8018dee:	4618      	mov	r0, r3
 8018df0:	3718      	adds	r7, #24
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd80      	pop	{r7, pc}
 8018df6:	bf00      	nop
 8018df8:	20002494 	.word	0x20002494

08018dfc <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018e08:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0c:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	68ba      	ldr	r2, [r7, #8]
 8018e12:	68f9      	ldr	r1, [r7, #12]
 8018e14:	4806      	ldr	r0, [pc, #24]	@ (8018e30 <ETH_PHY_IO_WriteReg+0x34>)
 8018e16:	f000 fead 	bl	8019b74 <HAL_ETH_WritePHYRegister>
 8018e1a:	4603      	mov	r3, r0
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d101      	bne.n	8018e24 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018e20:	2300      	movs	r3, #0
 8018e22:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018e24:	697b      	ldr	r3, [r7, #20]
}
 8018e26:	4618      	mov	r0, r3
 8018e28:	3718      	adds	r7, #24
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	bd80      	pop	{r7, pc}
 8018e2e:	bf00      	nop
 8018e30:	20002494 	.word	0x20002494

08018e34 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8018e38:	4802      	ldr	r0, [pc, #8]	@ (8018e44 <ETH_IRQHandler+0x10>)
 8018e3a:	f000 fd27 	bl	801988c <HAL_ETH_IRQHandler>
}
 8018e3e:	bf00      	nop
 8018e40:	bd80      	pop	{r7, pc}
 8018e42:	bf00      	nop
 8018e44:	20002494 	.word	0x20002494

08018e48 <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b084      	sub	sp, #16
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018e50:	2300      	movs	r3, #0
 8018e52:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018e54:	4b10      	ldr	r3, [pc, #64]	@ (8018e98 <prvSetFlagsAndNotify+0x50>)
 8018e56:	681a      	ldr	r2, [r3, #0]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	4313      	orrs	r3, r2
 8018e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8018e98 <prvSetFlagsAndNotify+0x50>)
 8018e5e:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018e60:	4b0e      	ldr	r3, [pc, #56]	@ (8018e9c <prvSetFlagsAndNotify+0x54>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d012      	beq.n	8018e8e <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8018e68:	4b0c      	ldr	r3, [pc, #48]	@ (8018e9c <prvSetFlagsAndNotify+0x54>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	f107 020c 	add.w	r2, r7, #12
 8018e70:	2100      	movs	r1, #0
 8018e72:	4618      	mov	r0, r3
 8018e74:	f7ed fab6 	bl	80063e4 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d007      	beq.n	8018e8e <prvSetFlagsAndNotify+0x46>
 8018e7e:	4b08      	ldr	r3, [pc, #32]	@ (8018ea0 <prvSetFlagsAndNotify+0x58>)
 8018e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018e84:	601a      	str	r2, [r3, #0]
 8018e86:	f3bf 8f4f 	dsb	sy
 8018e8a:	f3bf 8f6f 	isb	sy
    }
}
 8018e8e:	bf00      	nop
 8018e90:	3710      	adds	r7, #16
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}
 8018e96:	bf00      	nop
 8018e98:	20002484 	.word	0x20002484
 8018e9c:	20002540 	.word	0x20002540
 8018ea0:	e000ed04 	.word	0xe000ed04

08018ea4 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018eac:	2002      	movs	r0, #2
 8018eae:	f7ff ffcb 	bl	8018e48 <prvSetFlagsAndNotify>
}
 8018eb2:	bf00      	nop
 8018eb4:	3708      	adds	r7, #8
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}

08018eba <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018eba:	b580      	push	{r7, lr}
 8018ebc:	b082      	sub	sp, #8
 8018ebe:	af00      	add	r7, sp, #0
 8018ec0:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018ec2:	2001      	movs	r0, #1
 8018ec4:	f7ff ffc0 	bl	8018e48 <prvSetFlagsAndNotify>
}
 8018ec8:	bf00      	nop
 8018eca:	3708      	adds	r7, #8
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}

08018ed0 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8018ed8:	2004      	movs	r0, #4
 8018eda:	f7ff ffb5 	bl	8018e48 <prvSetFlagsAndNotify>
}
 8018ede:	bf00      	nop
 8018ee0:	3708      	adds	r7, #8
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}
	...

08018ee8 <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8018ee8:	b480      	push	{r7}
 8018eea:	b085      	sub	sp, #20
 8018eec:	af00      	add	r7, sp, #0
 8018eee:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018ef0:	4b15      	ldr	r3, [pc, #84]	@ (8018f48 <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018ef2:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	60bb      	str	r3, [r7, #8]
 8018ef8:	e01c      	b.n	8018f34 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8018efa:	68ba      	ldr	r2, [r7, #8]
 8018efc:	4613      	mov	r3, r2
 8018efe:	00db      	lsls	r3, r3, #3
 8018f00:	1a9b      	subs	r3, r3, r2
 8018f02:	00db      	lsls	r3, r3, #3
 8018f04:	461a      	mov	r2, r3
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	4413      	add	r3, r2
 8018f0a:	68fa      	ldr	r2, [r7, #12]
 8018f0c:	320a      	adds	r2, #10
 8018f0e:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018f10:	68ba      	ldr	r2, [r7, #8]
 8018f12:	4613      	mov	r3, r2
 8018f14:	00db      	lsls	r3, r3, #3
 8018f16:	1a9b      	subs	r3, r3, r2
 8018f18:	00db      	lsls	r3, r3, #3
 8018f1a:	461a      	mov	r2, r3
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	4413      	add	r3, r2
 8018f20:	461a      	mov	r2, r3
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018f2c:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018f2e:	68bb      	ldr	r3, [r7, #8]
 8018f30:	3301      	adds	r3, #1
 8018f32:	60bb      	str	r3, [r7, #8]
 8018f34:	68bb      	ldr	r3, [r7, #8]
 8018f36:	2b3f      	cmp	r3, #63	@ 0x3f
 8018f38:	d9df      	bls.n	8018efa <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8018f3a:	bf00      	nop
 8018f3c:	bf00      	nop
 8018f3e:	3714      	adds	r7, #20
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr
 8018f48:	240400c0 	.word	0x240400c0

08018f4c <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b082      	sub	sp, #8
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8018f56:	f7ed fcfb 	bl	8006950 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681a      	ldr	r2, [r3, #0]
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	43db      	mvns	r3, r3
 8018f62:	401a      	ands	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8018f68:	f7ed fd1e 	bl	80069a8 <vPortExitCritical>
}
 8018f6c:	bf00      	nop
 8018f6e:	3708      	adds	r7, #8
 8018f70:	46bd      	mov	sp, r7
 8018f72:	bd80      	pop	{r7, pc}

08018f74 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018f74:	b480      	push	{r7}
 8018f76:	b087      	sub	sp, #28
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	3330      	adds	r3, #48	@ 0x30
 8018f84:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018f86:	2300      	movs	r3, #0
 8018f88:	617b      	str	r3, [r7, #20]
 8018f8a:	e00e      	b.n	8018faa <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	697a      	ldr	r2, [r7, #20]
 8018f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018f94:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	68db      	ldr	r3, [r3, #12]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	da02      	bge.n	8018fa4 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018f9e:	693b      	ldr	r3, [r7, #16]
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	3301      	adds	r3, #1
 8018fa8:	617b      	str	r3, [r7, #20]
 8018faa:	697b      	ldr	r3, [r7, #20]
 8018fac:	2b03      	cmp	r3, #3
 8018fae:	d9ed      	bls.n	8018f8c <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018fb0:	693b      	ldr	r3, [r7, #16]
    }
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	371c      	adds	r7, #28
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbc:	4770      	bx	lr
	...

08018fc0 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b088      	sub	sp, #32
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8018fc8:	2364      	movs	r3, #100	@ 0x64
 8018fca:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018fd0:	2304      	movs	r3, #4
 8018fd2:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8018fd8:	f7f1 ffb8 	bl	800af4c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018fdc:	4b43      	ldr	r3, [pc, #268]	@ (80190ec <prvEMACHandlerTask+0x12c>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f7eb f96f 	bl	80042c4 <uxQueueMessagesWaiting>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	f1c3 0304 	rsb	r3, r3, #4
 8018fec:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018fee:	69fa      	ldr	r2, [r7, #28]
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	429a      	cmp	r2, r3
 8018ff4:	d206      	bcs.n	8019004 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8018ffa:	2204      	movs	r2, #4
 8018ffc:	69f9      	ldr	r1, [r7, #28]
 8018ffe:	483c      	ldr	r0, [pc, #240]	@ (80190f0 <prvEMACHandlerTask+0x130>)
 8019000:	f009 fd0a 	bl	8022a18 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8019004:	483b      	ldr	r0, [pc, #236]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 8019006:	f7ff ffb5 	bl	8018f74 <uxGetOwnCount>
 801900a:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 801900c:	69ba      	ldr	r2, [r7, #24]
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	429a      	cmp	r2, r3
 8019012:	d906      	bls.n	8019022 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8019014:	68bb      	ldr	r3, [r7, #8]
 8019016:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8019018:	2204      	movs	r2, #4
 801901a:	69b9      	ldr	r1, [r7, #24]
 801901c:	4836      	ldr	r0, [pc, #216]	@ (80190f8 <prvEMACHandlerTask+0x138>)
 801901e:	f009 fcfb 	bl	8022a18 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8019022:	693a      	ldr	r2, [r7, #16]
 8019024:	2100      	movs	r1, #0
 8019026:	2000      	movs	r0, #0
 8019028:	f7ec fe6c 	bl	8005d04 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 801902c:	4b33      	ldr	r3, [pc, #204]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	f003 0301 	and.w	r3, r3, #1
 8019034:	2b00      	cmp	r3, #0
 8019036:	d006      	beq.n	8019046 <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8019038:	2101      	movs	r1, #1
 801903a:	4830      	ldr	r0, [pc, #192]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 801903c:	f7ff ff86 	bl	8018f4c <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8019040:	f7ff fe3e 	bl	8018cc0 <prvNetworkInterfaceInput>
 8019044:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8019046:	4b2d      	ldr	r3, [pc, #180]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	f003 0302 	and.w	r3, r3, #2
 801904e:	2b00      	cmp	r3, #0
 8019050:	d017      	beq.n	8019082 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8019052:	2102      	movs	r1, #2
 8019054:	4829      	ldr	r0, [pc, #164]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 8019056:	f7ff ff79 	bl	8018f4c <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 801905a:	4b29      	ldr	r3, [pc, #164]	@ (8019100 <prvEMACHandlerTask+0x140>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8019062:	4618      	mov	r0, r3
 8019064:	f7eb f840 	bl	80040e8 <xQueueSemaphoreTake>
 8019068:	4603      	mov	r3, r0
 801906a:	2b00      	cmp	r3, #0
 801906c:	d009      	beq.n	8019082 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 801906e:	4821      	ldr	r0, [pc, #132]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 8019070:	f001 fb04 	bl	801a67c <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8019074:	4b22      	ldr	r3, [pc, #136]	@ (8019100 <prvEMACHandlerTask+0x140>)
 8019076:	6818      	ldr	r0, [r3, #0]
 8019078:	2300      	movs	r3, #0
 801907a:	2200      	movs	r2, #0
 801907c:	2100      	movs	r1, #0
 801907e:	f7ea fe7b 	bl	8003d78 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8019082:	4b1e      	ldr	r3, [pc, #120]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	f003 0304 	and.w	r3, r3, #4
 801908a:	2b00      	cmp	r3, #0
 801908c:	d00f      	beq.n	80190ae <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 801908e:	2104      	movs	r1, #4
 8019090:	481a      	ldr	r0, [pc, #104]	@ (80190fc <prvEMACHandlerTask+0x13c>)
 8019092:	f7ff ff5b 	bl	8018f4c <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8019096:	4b17      	ldr	r3, [pc, #92]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 8019098:	2210      	movs	r2, #16
 801909a:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 801909c:	4815      	ldr	r0, [pc, #84]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 801909e:	f000 f964 	bl	801936a <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 80190a2:	f7ff fe0d 	bl	8018cc0 <prvNetworkInterfaceInput>
 80190a6:	4602      	mov	r2, r0
 80190a8:	697b      	ldr	r3, [r7, #20]
 80190aa:	4413      	add	r3, r2
 80190ac:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 80190ae:	6979      	ldr	r1, [r7, #20]
 80190b0:	4814      	ldr	r0, [pc, #80]	@ (8019104 <prvEMACHandlerTask+0x144>)
 80190b2:	f7ff fa25 	bl	8018500 <xPhyCheckLinkStatus>
 80190b6:	4603      	mov	r3, r0
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d08b      	beq.n	8018fd4 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 80190bc:	4b12      	ldr	r3, [pc, #72]	@ (8019108 <prvEMACHandlerTask+0x148>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7ff fccf 	bl	8018a64 <xSTM32H_GetPhyLinkStatus>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d10b      	bne.n	80190e4 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 80190cc:	4809      	ldr	r0, [pc, #36]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 80190ce:	f000 f9d1 	bl	8019474 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80190d2:	2260      	movs	r2, #96	@ 0x60
 80190d4:	2100      	movs	r1, #0
 80190d6:	480d      	ldr	r0, [pc, #52]	@ (801910c <prvEMACHandlerTask+0x14c>)
 80190d8:	f009 ffc7 	bl	802306a <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80190dc:	4805      	ldr	r0, [pc, #20]	@ (80190f4 <prvEMACHandlerTask+0x134>)
 80190de:	f001 facd 	bl	801a67c <ETH_Clear_Tx_Descriptors>
 80190e2:	e777      	b.n	8018fd4 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 80190e4:	2000      	movs	r0, #0
 80190e6:	f7ff fd91 	bl	8018c0c <prvEthernetUpdateConfig>
    {
 80190ea:	e773      	b.n	8018fd4 <prvEMACHandlerTask+0x14>
 80190ec:	2000248c 	.word	0x2000248c
 80190f0:	080280b4 	.word	0x080280b4
 80190f4:	20002494 	.word	0x20002494
 80190f8:	080280cc 	.word	0x080280cc
 80190fc:	20002484 	.word	0x20002484
 8019100:	20002490 	.word	0x20002490
 8019104:	20002544 	.word	0x20002544
 8019108:	2000253c 	.word	0x2000253c
 801910c:	24040060 	.word	0x24040060

08019110 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8019110:	b480      	push	{r7}
 8019112:	b083      	sub	sp, #12
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
 8019118:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	683a      	ldr	r2, [r7, #0]
 801911e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8019120:	bf00      	nop
 8019122:	370c      	adds	r7, #12
 8019124:	46bd      	mov	sp, r7
 8019126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912a:	4770      	bx	lr

0801912c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d101      	bne.n	801913e <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801913a:	2301      	movs	r3, #1
 801913c:	e0d4      	b.n	80192e8 <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019142:	2b00      	cmp	r3, #0
 8019144:	d102      	bne.n	801914c <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8019146:	6878      	ldr	r0, [r7, #4]
 8019148:	f7e9 fa0e 	bl	8002568 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2223      	movs	r2, #35	@ 0x23
 8019150:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019152:	4b67      	ldr	r3, [pc, #412]	@ (80192f0 <HAL_ETH_Init+0x1c4>)
 8019154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019158:	4a65      	ldr	r2, [pc, #404]	@ (80192f0 <HAL_ETH_Init+0x1c4>)
 801915a:	f043 0302 	orr.w	r3, r3, #2
 801915e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8019162:	4b63      	ldr	r3, [pc, #396]	@ (80192f0 <HAL_ETH_Init+0x1c4>)
 8019164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8019168:	f003 0302 	and.w	r3, r3, #2
 801916c:	60bb      	str	r3, [r7, #8]
 801916e:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	7a1b      	ldrb	r3, [r3, #8]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d103      	bne.n	8019180 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8019178:	2000      	movs	r0, #0
 801917a:	f001 fc17 	bl	801a9ac <HAL_SYSCFG_ETHInterfaceSelect>
 801917e:	e003      	b.n	8019188 <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8019180:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019184:	f001 fc12 	bl	801a9ac <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	687a      	ldr	r2, [r7, #4]
 8019194:	6812      	ldr	r2, [r2, #0]
 8019196:	f043 0301 	orr.w	r3, r3, #1
 801919a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801919e:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 80191a0:	f001 fbc8 	bl	801a934 <HAL_GetTick>
 80191a4:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80191a6:	e010      	b.n	80191ca <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80191a8:	f001 fbc4 	bl	801a934 <HAL_GetTick>
 80191ac:	4602      	mov	r2, r0
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	1ad3      	subs	r3, r2, r3
 80191b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80191b6:	d908      	bls.n	80191ca <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	2204      	movs	r2, #4
 80191bc:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 80191be:	21e0      	movs	r1, #224	@ 0xe0
 80191c0:	6878      	ldr	r0, [r7, #4]
 80191c2:	f7ff ffa5 	bl	8019110 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 80191c6:	2301      	movs	r3, #1
 80191c8:	e08e      	b.n	80192e8 <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f003 0301 	and.w	r3, r3, #1
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d1e5      	bne.n	80191a8 <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 80191dc:	6878      	ldr	r0, [r7, #4]
 80191de:	f001 f94b 	bl	801a478 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 80191e2:	f004 ff49 	bl	801e078 <HAL_RCC_GetHCLKFreq>
 80191e6:	4603      	mov	r3, r0
 80191e8:	4a42      	ldr	r2, [pc, #264]	@ (80192f4 <HAL_ETH_Init+0x1c8>)
 80191ea:	fba2 2303 	umull	r2, r3, r2, r3
 80191ee:	0c9a      	lsrs	r2, r3, #18
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	3a01      	subs	r2, #1
 80191f6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 80191fa:	6878      	ldr	r0, [r7, #4]
 80191fc:	f001 f89e 	bl	801a33c <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019208:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801920c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8019210:	687a      	ldr	r2, [r7, #4]
 8019212:	6812      	ldr	r2, [r2, #0]
 8019214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8019218:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801921c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	695b      	ldr	r3, [r3, #20]
 8019224:	f003 0303 	and.w	r3, r3, #3
 8019228:	2b00      	cmp	r3, #0
 801922a:	d008      	beq.n	801923e <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	2201      	movs	r2, #1
 8019230:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019232:	21e0      	movs	r1, #224	@ 0xe0
 8019234:	6878      	ldr	r0, [r7, #4]
 8019236:	f7ff ff6b 	bl	8019110 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801923a:	2301      	movs	r3, #1
 801923c:	e054      	b.n	80192e8 <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019246:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801924a:	4b2b      	ldr	r3, [pc, #172]	@ (80192f8 <HAL_ETH_Init+0x1cc>)
 801924c:	4013      	ands	r3, r2
 801924e:	687a      	ldr	r2, [r7, #4]
 8019250:	6952      	ldr	r2, [r2, #20]
 8019252:	0051      	lsls	r1, r2, #1
 8019254:	687a      	ldr	r2, [r7, #4]
 8019256:	6812      	ldr	r2, [r2, #0]
 8019258:	430b      	orrs	r3, r1
 801925a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801925e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8019262:	6878      	ldr	r0, [r7, #4]
 8019264:	f001 f960 	bl	801a528 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f001 f9a9 	bl	801a5c0 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	3305      	adds	r3, #5
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	021a      	lsls	r2, r3, #8
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	685b      	ldr	r3, [r3, #4]
 801927c:	3304      	adds	r3, #4
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	4619      	mov	r1, r3
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	430a      	orrs	r2, r1
 8019288:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	685b      	ldr	r3, [r3, #4]
 8019290:	3303      	adds	r3, #3
 8019292:	781b      	ldrb	r3, [r3, #0]
 8019294:	061a      	lsls	r2, r3, #24
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	685b      	ldr	r3, [r3, #4]
 801929a:	3302      	adds	r3, #2
 801929c:	781b      	ldrb	r3, [r3, #0]
 801929e:	041b      	lsls	r3, r3, #16
 80192a0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	3301      	adds	r3, #1
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80192ac:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	685b      	ldr	r3, [r3, #4]
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80192ba:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80192bc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2200      	movs	r2, #0
 80192c4:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	2210      	movs	r2, #16
 80192ca:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2210      	movs	r2, #16
 80192d0:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	4a09      	ldr	r2, [pc, #36]	@ (80192fc <HAL_ETH_Init+0x1d0>)
 80192d8:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	4a07      	ldr	r2, [pc, #28]	@ (8019300 <HAL_ETH_Init+0x1d4>)
 80192e2:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 80192e6:	2300      	movs	r3, #0
        }
 80192e8:	4618      	mov	r0, r3
 80192ea:	3710      	adds	r7, #16
 80192ec:	46bd      	mov	sp, r7
 80192ee:	bd80      	pop	{r7, pc}
 80192f0:	58024400 	.word	0x58024400
 80192f4:	431bde83 	.word	0x431bde83
 80192f8:	ffff8001 	.word	0xffff8001
 80192fc:	0c020060 	.word	0x0c020060
 8019300:	0c20c000 	.word	0x0c20c000

08019304 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8019304:	b480      	push	{r7}
 8019306:	b087      	sub	sp, #28
 8019308:	af00      	add	r7, sp, #0
 801930a:	60f8      	str	r0, [r7, #12]
 801930c:	60b9      	str	r1, [r7, #8]
 801930e:	607a      	str	r2, [r7, #4]
 8019310:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	68ba      	ldr	r2, [r7, #8]
 8019316:	320c      	adds	r2, #12
 8019318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801931c:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d002      	beq.n	801932a <HAL_ETH_DescAssignMemory+0x26>
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	2b03      	cmp	r3, #3
 8019328:	d904      	bls.n	8019334 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	2201      	movs	r2, #1
 801932e:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8019330:	2301      	movs	r3, #1
 8019332:	e014      	b.n	801935e <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8019334:	687a      	ldr	r2, [r7, #4]
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	697b      	ldr	r3, [r7, #20]
 801933e:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019340:	697b      	ldr	r3, [r7, #20]
 8019342:	68db      	ldr	r3, [r3, #12]
 8019344:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8019348:	697b      	ldr	r3, [r7, #20]
 801934a:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 801934c:	697b      	ldr	r3, [r7, #20]
 801934e:	68db      	ldr	r3, [r3, #12]
 8019350:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019354:	697b      	ldr	r3, [r7, #20]
 8019356:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 801935c:	2300      	movs	r3, #0
        }
 801935e:	4618      	mov	r0, r3
 8019360:	371c      	adds	r7, #28
 8019362:	46bd      	mov	sp, r7
 8019364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019368:	4770      	bx	lr

0801936a <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 801936a:	b480      	push	{r7}
 801936c:	b085      	sub	sp, #20
 801936e:	af00      	add	r7, sp, #0
 8019370:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019376:	2b10      	cmp	r3, #16
 8019378:	d175      	bne.n	8019466 <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	2223      	movs	r2, #35	@ 0x23
 801937e:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8019380:	2300      	movs	r3, #0
 8019382:	60fb      	str	r3, [r7, #12]
 8019384:	e00e      	b.n	80193a4 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	68fa      	ldr	r2, [r7, #12]
 801938a:	320c      	adds	r2, #12
 801938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019390:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	68db      	ldr	r3, [r3, #12]
 8019396:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	3301      	adds	r3, #1
 80193a2:	60fb      	str	r3, [r7, #12]
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	2b03      	cmp	r3, #3
 80193a8:	d9ed      	bls.n	8019386 <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	2201      	movs	r2, #1
 80193ae:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80193b0:	687b      	ldr	r3, [r7, #4]
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	681a      	ldr	r2, [r3, #0]
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	f042 0202 	orr.w	r2, r2, #2
 80193be:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	681a      	ldr	r2, [r3, #0]
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	f042 0201 	orr.w	r2, r2, #1
 80193ce:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	f042 0201 	orr.w	r2, r2, #1
 80193e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80193ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80193f0:	687a      	ldr	r2, [r7, #4]
 80193f2:	6812      	ldr	r2, [r2, #0]
 80193f4:	f043 0301 	orr.w	r3, r3, #1
 80193f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193fc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019408:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801940c:	687a      	ldr	r2, [r7, #4]
 801940e:	6812      	ldr	r2, [r2, #0]
 8019410:	f043 0301 	orr.w	r3, r3, #1
 8019414:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019418:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019424:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	6812      	ldr	r2, [r2, #0]
 801942c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8019430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019434:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019440:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681a      	ldr	r2, [r3, #0]
 8019448:	f24d 0341 	movw	r3, #53313	@ 0xd041
 801944c:	430b      	orrs	r3, r1
 801944e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019452:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	2210      	movs	r2, #16
 801945a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	2222      	movs	r2, #34	@ 0x22
 8019460:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8019462:	2300      	movs	r3, #0
 8019464:	e000      	b.n	8019468 <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8019466:	2301      	movs	r3, #1
            }
        }
 8019468:	4618      	mov	r0, r3
 801946a:	3714      	adds	r7, #20
 801946c:	46bd      	mov	sp, r7
 801946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019472:	4770      	bx	lr

08019474 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8019474:	b480      	push	{r7}
 8019476:	b085      	sub	sp, #20
 8019478:	af00      	add	r7, sp, #0
 801947a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019480:	2b00      	cmp	r3, #0
 8019482:	d066      	beq.n	8019552 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2223      	movs	r2, #35	@ 0x23
 8019488:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019492:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681a      	ldr	r2, [r3, #0]
 801949a:	4b31      	ldr	r3, [pc, #196]	@ (8019560 <HAL_ETH_Stop_IT+0xec>)
 801949c:	400b      	ands	r3, r1
 801949e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80194b2:	687a      	ldr	r2, [r7, #4]
 80194b4:	6812      	ldr	r2, [r2, #0]
 80194b6:	f023 0301 	bic.w	r3, r3, #1
 80194ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80194ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80194ce:	687a      	ldr	r2, [r7, #4]
 80194d0:	6812      	ldr	r2, [r2, #0]
 80194d2:	f023 0301 	bic.w	r3, r3, #1
 80194d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	681a      	ldr	r2, [r3, #0]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	f022 0201 	bic.w	r2, r2, #1
 80194ec:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	f042 0201 	orr.w	r2, r2, #1
 80194fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	681a      	ldr	r2, [r3, #0]
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	f022 0202 	bic.w	r2, r2, #2
 8019510:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019512:	2300      	movs	r3, #0
 8019514:	60fb      	str	r3, [r7, #12]
 8019516:	e00e      	b.n	8019536 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	68fa      	ldr	r2, [r7, #12]
 801951c:	320c      	adds	r2, #12
 801951e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019522:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019524:	68bb      	ldr	r3, [r7, #8]
 8019526:	68db      	ldr	r3, [r3, #12]
 8019528:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	3301      	adds	r3, #1
 8019534:	60fb      	str	r3, [r7, #12]
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2b03      	cmp	r3, #3
 801953a:	d9ed      	bls.n	8019518 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	2200      	movs	r2, #0
 8019540:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	2210      	movs	r2, #16
 8019546:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	2210      	movs	r2, #16
 801954c:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 801954e:	2300      	movs	r3, #0
 8019550:	e000      	b.n	8019554 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8019552:	2301      	movs	r3, #1
            }
        }
 8019554:	4618      	mov	r0, r3
 8019556:	3714      	adds	r7, #20
 8019558:	46bd      	mov	sp, r7
 801955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955e:	4770      	bx	lr
 8019560:	ffff2fbe 	.word	0xffff2fbe

08019564 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d107      	bne.n	8019584 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019578:	f043 0201 	orr.w	r2, r3, #1
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8019580:	2301      	movs	r3, #1
 8019582:	e039      	b.n	80195f8 <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019588:	2b10      	cmp	r3, #16
 801958a:	d134      	bne.n	80195f6 <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 801958c:	2201      	movs	r2, #1
 801958e:	6839      	ldr	r1, [r7, #0]
 8019590:	6878      	ldr	r0, [r7, #4]
 8019592:	f001 f8c1 	bl	801a718 <ETH_Prepare_Tx_Descriptors>
 8019596:	4603      	mov	r3, r0
 8019598:	2b00      	cmp	r3, #0
 801959a:	d007      	beq.n	80195ac <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80195a0:	f043 0202 	orr.w	r2, r3, #2
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 80195a8:	2301      	movs	r3, #1
 80195aa:	e025      	b.n	80195f8 <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195b0:	1c5a      	adds	r2, r3, #1
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195ba:	2b03      	cmp	r3, #3
 80195bc:	d904      	bls.n	80195c8 <HAL_ETH_Transmit_IT+0x64>
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195c2:	1f1a      	subs	r2, r3, #4
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	681a      	ldr	r2, [r3, #0]
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	3106      	adds	r1, #6
 80195d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80195d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80195dc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 80195e0:	f3bf 8f4f 	dsb	sy
}
 80195e4:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195ee:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 80195f2:	2300      	movs	r3, #0
 80195f4:	e000      	b.n	80195f8 <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 80195f6:	2301      	movs	r3, #1
            }
        }
 80195f8:	4618      	mov	r0, r3
 80195fa:	3708      	adds	r7, #8
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}

08019600 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8019600:	b580      	push	{r7, lr}
 8019602:	b08a      	sub	sp, #40	@ 0x28
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	3330      	adds	r3, #48	@ 0x30
 801960c:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 801960e:	69bb      	ldr	r3, [r7, #24]
 8019610:	691b      	ldr	r3, [r3, #16]
 8019612:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019614:	69bb      	ldr	r3, [r7, #24]
 8019616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801961c:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 801961e:	2300      	movs	r3, #0
 8019620:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8019622:	2300      	movs	r3, #0
 8019624:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8019626:	2300      	movs	r3, #0
 8019628:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801962a:	e055      	b.n	80196d8 <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 801962c:	697b      	ldr	r3, [r7, #20]
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8019632:	6a3b      	ldr	r3, [r7, #32]
 8019634:	3301      	adds	r3, #1
 8019636:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801963e:	2b00      	cmp	r3, #0
 8019640:	d006      	beq.n	8019650 <HAL_ETH_IsRxDataAvailable+0x50>
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019648:	2b00      	cmp	r3, #0
 801964a:	d001      	beq.n	8019650 <HAL_ETH_IsRxDataAvailable+0x50>
 801964c:	2301      	movs	r3, #1
 801964e:	e000      	b.n	8019652 <HAL_ETH_IsRxDataAvailable+0x52>
 8019650:	2300      	movs	r3, #0
 8019652:	2b00      	cmp	r3, #0
 8019654:	d104      	bne.n	8019660 <HAL_ETH_IsRxDataAvailable+0x60>
 8019656:	f240 4195 	movw	r1, #1173	@ 0x495
 801965a:	482b      	ldr	r0, [pc, #172]	@ (8019708 <HAL_ETH_IsRxDataAvailable+0x108>)
 801965c:	f7e8 fa16 	bl	8001a8c <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019666:	2b00      	cmp	r3, #0
 8019668:	d036      	beq.n	80196d8 <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 801966a:	693b      	ldr	r3, [r7, #16]
 801966c:	3301      	adds	r3, #1
 801966e:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8019670:	693b      	ldr	r3, [r7, #16]
 8019672:	2b01      	cmp	r3, #1
 8019674:	d101      	bne.n	801967a <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8019676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019678:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 801967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801967c:	3301      	adds	r3, #1
 801967e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019682:	2b03      	cmp	r3, #3
 8019684:	d902      	bls.n	801968c <HAL_ETH_IsRxDataAvailable+0x8c>
 8019686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019688:	3b04      	subs	r3, #4
 801968a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801968c:	69bb      	ldr	r3, [r7, #24]
 801968e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019694:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	68db      	ldr	r3, [r3, #12]
 801969a:	2b00      	cmp	r3, #0
 801969c:	db11      	blt.n	80196c2 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 801969e:	697b      	ldr	r3, [r7, #20]
 80196a0:	68db      	ldr	r3, [r3, #12]
 80196a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d00b      	beq.n	80196c2 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 80196aa:	69bb      	ldr	r3, [r7, #24]
 80196ac:	2201      	movs	r2, #1
 80196ae:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 80196b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196b2:	3301      	adds	r3, #1
 80196b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80196b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196b8:	2b03      	cmp	r3, #3
 80196ba:	d902      	bls.n	80196c2 <HAL_ETH_IsRxDataAvailable+0xc2>
 80196bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80196be:	3b04      	subs	r3, #4
 80196c0:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 80196c2:	69bb      	ldr	r3, [r7, #24]
 80196c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80196c6:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 80196c8:	69bb      	ldr	r3, [r7, #24]
 80196ca:	69fa      	ldr	r2, [r7, #28]
 80196cc:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 80196ce:	69bb      	ldr	r3, [r7, #24]
 80196d0:	693a      	ldr	r2, [r7, #16]
 80196d2:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 80196d4:	2301      	movs	r3, #1
 80196d6:	e012      	b.n	80196fe <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80196d8:	697b      	ldr	r3, [r7, #20]
 80196da:	68db      	ldr	r3, [r3, #12]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	db02      	blt.n	80196e6 <HAL_ETH_IsRxDataAvailable+0xe6>
 80196e0:	6a3b      	ldr	r3, [r7, #32]
 80196e2:	2b03      	cmp	r3, #3
 80196e4:	d9a2      	bls.n	801962c <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d004      	beq.n	80196f6 <HAL_ETH_IsRxDataAvailable+0xf6>
 80196ec:	f240 41db 	movw	r1, #1243	@ 0x4db
 80196f0:	4805      	ldr	r0, [pc, #20]	@ (8019708 <HAL_ETH_IsRxDataAvailable+0x108>)
 80196f2:	f7e8 f9cb 	bl	8001a8c <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	2200      	movs	r2, #0
 80196fa:	619a      	str	r2, [r3, #24]

            return 0;
 80196fc:	2300      	movs	r3, #0
        }
 80196fe:	4618      	mov	r0, r3
 8019700:	3728      	adds	r7, #40	@ 0x28
 8019702:	46bd      	mov	sp, r7
 8019704:	bd80      	pop	{r7, pc}
 8019706:	bf00      	nop
 8019708:	080280e4 	.word	0x080280e4

0801970c <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 801970c:	b580      	push	{r7, lr}
 801970e:	b086      	sub	sp, #24
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
 8019714:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	3330      	adds	r3, #48	@ 0x30
 801971a:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d104      	bne.n	801972c <HAL_ETH_GetRxData+0x20>
 8019722:	f240 511f 	movw	r1, #1311	@ 0x51f
 8019726:	481c      	ldr	r0, [pc, #112]	@ (8019798 <HAL_ETH_GetRxData+0x8c>)
 8019728:	f7e8 f9b0 	bl	8001a8c <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f7ff ff67 	bl	8019600 <HAL_ETH_IsRxDataAvailable>
 8019732:	4603      	mov	r3, r0
 8019734:	2b00      	cmp	r3, #0
 8019736:	d101      	bne.n	801973c <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8019738:	2300      	movs	r3, #0
 801973a:	e028      	b.n	801978e <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	695b      	ldr	r3, [r3, #20]
 8019740:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	693a      	ldr	r2, [r7, #16]
 8019746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801974a:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	699b      	ldr	r3, [r3, #24]
 8019750:	2b01      	cmp	r3, #1
 8019752:	d004      	beq.n	801975e <HAL_ETH_GetRxData+0x52>
 8019754:	f240 512a 	movw	r1, #1322	@ 0x52a
 8019758:	480f      	ldr	r0, [pc, #60]	@ (8019798 <HAL_ETH_GetRxData+0x8c>)
 801975a:	f7e8 f997 	bl	8001a8c <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	68db      	ldr	r3, [r3, #12]
 8019762:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019766:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	691b      	ldr	r3, [r3, #16]
 801976c:	461a      	mov	r2, r3
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8019772:	683b      	ldr	r3, [r7, #0]
 8019774:	68ba      	ldr	r2, [r7, #8]
 8019776:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	695b      	ldr	r3, [r3, #20]
 801977c:	68ba      	ldr	r2, [r7, #8]
 801977e:	429a      	cmp	r2, r3
 8019780:	d904      	bls.n	801978c <HAL_ETH_GetRxData+0x80>
 8019782:	f240 5133 	movw	r1, #1331	@ 0x533
 8019786:	4804      	ldr	r0, [pc, #16]	@ (8019798 <HAL_ETH_GetRxData+0x8c>)
 8019788:	f7e8 f980 	bl	8001a8c <vAssertCalled>

            return packet_length;
 801978c:	68bb      	ldr	r3, [r7, #8]
        }
 801978e:	4618      	mov	r0, r3
 8019790:	3718      	adds	r7, #24
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	080280e4 	.word	0x080280e4

0801979c <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 801979c:	b480      	push	{r7}
 801979e:	b08b      	sub	sp, #44	@ 0x2c
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	3330      	adds	r3, #48	@ 0x30
 80197aa:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	695b      	ldr	r3, [r3, #20]
 80197b0:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80197b2:	68fb      	ldr	r3, [r7, #12]
 80197b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80197b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80197ba:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	699b      	ldr	r3, [r3, #24]
 80197c0:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	699b      	ldr	r3, [r3, #24]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d101      	bne.n	80197ce <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 80197ca:	2301      	movs	r3, #1
 80197cc:	e057      	b.n	801987e <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	69db      	ldr	r3, [r3, #28]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d002      	beq.n	80197dc <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 80197d6:	69fb      	ldr	r3, [r7, #28]
 80197d8:	3301      	adds	r3, #1
 80197da:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80197dc:	2300      	movs	r3, #0
 80197de:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d005      	beq.n	80197f2 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 80197ea:	683a      	ldr	r2, [r7, #0]
 80197ec:	6a3b      	ldr	r3, [r7, #32]
 80197ee:	611a      	str	r2, [r3, #16]
 80197f0:	e002      	b.n	80197f8 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 80197f2:	6a3b      	ldr	r3, [r7, #32]
 80197f4:	691b      	ldr	r3, [r3, #16]
 80197f6:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 80197f8:	693a      	ldr	r2, [r7, #16]
 80197fa:	6a3b      	ldr	r3, [r7, #32]
 80197fc:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 80197fe:	6a3b      	ldr	r3, [r7, #32]
 8019800:	68db      	ldr	r3, [r3, #12]
 8019802:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019804:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019808:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	6a1b      	ldr	r3, [r3, #32]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d003      	beq.n	801981a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019812:	697b      	ldr	r3, [r7, #20]
 8019814:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019818:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801981a:	697b      	ldr	r3, [r7, #20]
 801981c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019820:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019822:	6a3b      	ldr	r3, [r7, #32]
 8019824:	697a      	ldr	r2, [r7, #20]
 8019826:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019828:	f3bf 8f4f 	dsb	sy
}
 801982c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801982e:	6a3b      	ldr	r3, [r7, #32]
 8019830:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8019832:	69fb      	ldr	r3, [r7, #28]
 8019834:	3b01      	subs	r3, #1
 8019836:	69ba      	ldr	r2, [r7, #24]
 8019838:	429a      	cmp	r2, r3
 801983a:	d211      	bcs.n	8019860 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 801983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801983e:	3301      	adds	r3, #1
 8019840:	627b      	str	r3, [r7, #36]	@ 0x24
 8019842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019844:	2b03      	cmp	r3, #3
 8019846:	d902      	bls.n	801984e <HAL_ETH_BuildRxDescriptors+0xb2>
 8019848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801984a:	3b04      	subs	r3, #4
 801984c:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019856:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8019858:	69bb      	ldr	r3, [r7, #24]
 801985a:	3301      	adds	r3, #1
 801985c:	61bb      	str	r3, [r7, #24]
            {
 801985e:	e7bf      	b.n	80197e0 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8019860:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681a      	ldr	r2, [r3, #0]
 8019866:	6a3b      	ldr	r3, [r7, #32]
 8019868:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801986c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2200      	movs	r2, #0
 8019874:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	2200      	movs	r2, #0
 801987a:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 801987c:	2300      	movs	r3, #0
        }
 801987e:	4618      	mov	r0, r3
 8019880:	372c      	adds	r7, #44	@ 0x2c
 8019882:	46bd      	mov	sp, r7
 8019884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019888:	4770      	bx	lr
	...

0801988c <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
 8019892:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801989c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80198a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80198a4:	2b40      	cmp	r3, #64	@ 0x40
 80198a6:	d115      	bne.n	80198d4 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80198b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80198b8:	2b40      	cmp	r3, #64	@ 0x40
 80198ba:	d10b      	bne.n	80198d4 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 80198bc:	6878      	ldr	r0, [r7, #4]
 80198be:	f7ff fafc 	bl	8018eba <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198ca:	461a      	mov	r2, r3
 80198cc:	f248 0340 	movw	r3, #32832	@ 0x8040
 80198d0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80198e0:	f003 0301 	and.w	r3, r3, #1
 80198e4:	2b01      	cmp	r3, #1
 80198e6:	d115      	bne.n	8019914 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80198f4:	f003 0301 	and.w	r3, r3, #1
 80198f8:	2b01      	cmp	r3, #1
 80198fa:	d10b      	bne.n	8019914 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f7ff fad1 	bl	8018ea4 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801990a:	461a      	mov	r2, r3
 801990c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019910:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801991c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019924:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019928:	d14f      	bne.n	80199ca <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019932:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801993a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801993e:	d144      	bne.n	80199ca <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019944:	f043 0208 	orr.w	r2, r3, #8
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019954:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801995c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019960:	d11d      	bne.n	801999e <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801996a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 801996e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8019972:	4013      	ands	r3, r2
 8019974:	687a      	ldr	r2, [r7, #4]
 8019976:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019980:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019984:	687a      	ldr	r2, [r7, #4]
 8019986:	6812      	ldr	r2, [r2, #0]
 8019988:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801998c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019990:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019994:	21e0      	movs	r1, #224	@ 0xe0
 8019996:	6878      	ldr	r0, [r7, #4]
 8019998:	f7ff fbba 	bl	8019110 <set_error_state>
 801999c:	e012      	b.n	80199c4 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80199a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80199aa:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80199ba:	461a      	mov	r2, r3
 80199bc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80199c0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 80199c4:	6878      	ldr	r0, [r7, #4]
 80199c6:	f7ff fa83 	bl	8018ed0 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80199d2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80199d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80199da:	d10f      	bne.n	80199fc <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80199e8:	21e0      	movs	r1, #224	@ 0xe0
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f7ff fb90 	bl	8019110 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f000 f843 	bl	8019a7c <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	2200      	movs	r2, #0
 80199fa:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019a04:	f003 0310 	and.w	r3, r3, #16
 8019a08:	2b10      	cmp	r3, #16
 8019a0a:	d10d      	bne.n	8019a28 <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019a14:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f000 f837 	bl	8019a90 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	2200      	movs	r2, #0
 8019a26:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019a30:	f003 0320 	and.w	r3, r3, #32
 8019a34:	2b20      	cmp	r3, #32
 8019a36:	d10d      	bne.n	8019a54 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019a40:	f003 020f 	and.w	r2, r3, #15
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8019a48:	6878      	ldr	r0, [r7, #4]
 8019a4a:	f000 f82b 	bl	8019aa4 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	2200      	movs	r2, #0
 8019a52:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8019a54:	4b08      	ldr	r3, [pc, #32]	@ (8019a78 <HAL_ETH_IRQHandler+0x1ec>)
 8019a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d006      	beq.n	8019a6e <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8019a60:	4b05      	ldr	r3, [pc, #20]	@ (8019a78 <HAL_ETH_IRQHandler+0x1ec>)
 8019a62:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8019a66:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	f000 f825 	bl	8019ab8 <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8019a6e:	bf00      	nop
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	58000080 	.word	0x58000080

08019a7c <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8019a7c:	b480      	push	{r7}
 8019a7e:	b083      	sub	sp, #12
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8019a84:	bf00      	nop
 8019a86:	370c      	adds	r7, #12
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8e:	4770      	bx	lr

08019a90 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019a90:	b480      	push	{r7}
 8019a92:	b083      	sub	sp, #12
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8019a98:	bf00      	nop
 8019a9a:	370c      	adds	r7, #12
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa2:	4770      	bx	lr

08019aa4 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8019aa4:	b480      	push	{r7}
 8019aa6:	b083      	sub	sp, #12
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8019aac:	bf00      	nop
 8019aae:	370c      	adds	r7, #12
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab6:	4770      	bx	lr

08019ab8 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8019ab8:	b480      	push	{r7}
 8019aba:	b083      	sub	sp, #12
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8019ac0:	bf00      	nop
 8019ac2:	370c      	adds	r7, #12
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aca:	4770      	bx	lr

08019acc <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b086      	sub	sp, #24
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	60f8      	str	r0, [r7, #12]
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019ada:	68fb      	ldr	r3, [r7, #12]
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019ae2:	f003 0301 	and.w	r3, r3, #1
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d001      	beq.n	8019aee <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8019aea:	2301      	movs	r3, #1
 8019aec:	e03e      	b.n	8019b6c <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019af6:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	055b      	lsls	r3, r3, #21
 8019b02:	4313      	orrs	r3, r2
 8019b04:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019b06:	697b      	ldr	r3, [r7, #20]
 8019b08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	041b      	lsls	r3, r3, #16
 8019b10:	4313      	orrs	r3, r2
 8019b12:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019b14:	697b      	ldr	r3, [r7, #20]
 8019b16:	f043 030c 	orr.w	r3, r3, #12
 8019b1a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8019b1c:	697b      	ldr	r3, [r7, #20]
 8019b1e:	f043 0301 	orr.w	r3, r3, #1
 8019b22:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	697a      	ldr	r2, [r7, #20]
 8019b2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019b2e:	f000 ff01 	bl	801a934 <HAL_GetTick>
 8019b32:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019b34:	e009      	b.n	8019b4a <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019b36:	f000 fefd 	bl	801a934 <HAL_GetTick>
 8019b3a:	4602      	mov	r2, r0
 8019b3c:	693b      	ldr	r3, [r7, #16]
 8019b3e:	1ad3      	subs	r3, r2, r3
 8019b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019b44:	d901      	bls.n	8019b4a <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8019b46:	2301      	movs	r3, #1
 8019b48:	e010      	b.n	8019b6c <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019b4a:	68fb      	ldr	r3, [r7, #12]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019b52:	f003 0301 	and.w	r3, r3, #1
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d1ed      	bne.n	8019b36 <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019b62:	b29b      	uxth	r3, r3
 8019b64:	461a      	mov	r2, r3
 8019b66:	683b      	ldr	r3, [r7, #0]
 8019b68:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8019b6a:	2300      	movs	r3, #0
        }
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3718      	adds	r7, #24
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b086      	sub	sp, #24
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	60b9      	str	r1, [r7, #8]
 8019b7e:	607a      	str	r2, [r7, #4]
 8019b80:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019b8a:	f003 0301 	and.w	r3, r3, #1
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d001      	beq.n	8019b96 <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019b92:	2301      	movs	r3, #1
 8019b94:	e03c      	b.n	8019c10 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019b9e:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8019ba6:	68bb      	ldr	r3, [r7, #8]
 8019ba8:	055b      	lsls	r3, r3, #21
 8019baa:	4313      	orrs	r3, r2
 8019bac:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019bae:	697b      	ldr	r3, [r7, #20]
 8019bb0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	041b      	lsls	r3, r3, #16
 8019bb8:	4313      	orrs	r3, r2
 8019bba:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	f023 030c 	bic.w	r3, r3, #12
 8019bc2:	f043 0304 	orr.w	r3, r3, #4
 8019bc6:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	f043 0301 	orr.w	r3, r3, #1
 8019bce:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	b29a      	uxth	r2, r3
 8019bd4:	4b10      	ldr	r3, [pc, #64]	@ (8019c18 <HAL_ETH_WritePHYRegister+0xa4>)
 8019bd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8019bda:	4a0f      	ldr	r2, [pc, #60]	@ (8019c18 <HAL_ETH_WritePHYRegister+0xa4>)
 8019bdc:	697b      	ldr	r3, [r7, #20]
 8019bde:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019be2:	f000 fea7 	bl	801a934 <HAL_GetTick>
 8019be6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019be8:	e009      	b.n	8019bfe <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019bea:	f000 fea3 	bl	801a934 <HAL_GetTick>
 8019bee:	4602      	mov	r2, r0
 8019bf0:	693b      	ldr	r3, [r7, #16]
 8019bf2:	1ad3      	subs	r3, r2, r3
 8019bf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019bf8:	d901      	bls.n	8019bfe <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8019bfa:	2301      	movs	r3, #1
 8019bfc:	e008      	b.n	8019c10 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019c06:	f003 0301 	and.w	r3, r3, #1
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d1ed      	bne.n	8019bea <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8019c0e:	2300      	movs	r3, #0
        }
 8019c10:	4618      	mov	r0, r3
 8019c12:	3718      	adds	r7, #24
 8019c14:	46bd      	mov	sp, r7
 8019c16:	bd80      	pop	{r7, pc}
 8019c18:	40028000 	.word	0x40028000

08019c1c <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019c1c:	b480      	push	{r7}
 8019c1e:	b083      	sub	sp, #12
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	6078      	str	r0, [r7, #4]
 8019c24:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019c26:	683b      	ldr	r3, [r7, #0]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d101      	bne.n	8019c30 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	e1c3      	b.n	8019fb8 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	f003 020c 	and.w	r2, r3, #12
 8019c3a:	683b      	ldr	r3, [r7, #0]
 8019c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	f003 0310 	and.w	r3, r3, #16
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	bf14      	ite	ne
 8019c4c:	2301      	movne	r3, #1
 8019c4e:	2300      	moveq	r3, #0
 8019c50:	b2db      	uxtb	r3, r3
 8019c52:	461a      	mov	r2, r3
 8019c54:	683b      	ldr	r3, [r7, #0]
 8019c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	bf0c      	ite	eq
 8019c76:	2301      	moveq	r3, #1
 8019c78:	2300      	movne	r3, #0
 8019c7a:	b2db      	uxtb	r3, r3
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	bf14      	ite	ne
 8019c92:	2301      	movne	r3, #1
 8019c94:	2300      	moveq	r3, #0
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	461a      	mov	r2, r3
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	bf0c      	ite	eq
 8019cac:	2301      	moveq	r3, #1
 8019cae:	2300      	movne	r3, #0
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	461a      	mov	r2, r3
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	bf14      	ite	ne
 8019cc6:	2301      	movne	r3, #1
 8019cc8:	2300      	moveq	r3, #0
 8019cca:	b2db      	uxtb	r3, r3
 8019ccc:	461a      	mov	r2, r3
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	bf14      	ite	ne
 8019ce0:	2301      	movne	r3, #1
 8019ce2:	2300      	moveq	r3, #0
 8019ce4:	b2db      	uxtb	r3, r3
 8019ce6:	461a      	mov	r2, r3
 8019ce8:	683b      	ldr	r3, [r7, #0]
 8019cea:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	bf14      	ite	ne
 8019d16:	2301      	movne	r3, #1
 8019d18:	2300      	moveq	r3, #0
 8019d1a:	b2db      	uxtb	r3, r3
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	bf0c      	ite	eq
 8019d30:	2301      	moveq	r3, #1
 8019d32:	2300      	movne	r3, #0
 8019d34:	b2db      	uxtb	r3, r3
 8019d36:	461a      	mov	r2, r3
 8019d38:	683b      	ldr	r3, [r7, #0]
 8019d3a:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	bf0c      	ite	eq
 8019d4a:	2301      	moveq	r3, #1
 8019d4c:	2300      	movne	r3, #0
 8019d4e:	b2db      	uxtb	r3, r3
 8019d50:	461a      	mov	r2, r3
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	bf14      	ite	ne
 8019d64:	2301      	movne	r3, #1
 8019d66:	2300      	moveq	r3, #0
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	461a      	mov	r2, r3
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	bf14      	ite	ne
 8019d7e:	2301      	movne	r3, #1
 8019d80:	2300      	moveq	r3, #0
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	461a      	mov	r2, r3
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	bf14      	ite	ne
 8019d98:	2301      	movne	r3, #1
 8019d9a:	2300      	moveq	r3, #0
 8019d9c:	b2db      	uxtb	r3, r3
 8019d9e:	461a      	mov	r2, r3
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	bf14      	ite	ne
 8019db2:	2301      	movne	r3, #1
 8019db4:	2300      	moveq	r3, #0
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	461a      	mov	r2, r3
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8019dc8:	683b      	ldr	r3, [r7, #0]
 8019dca:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	bf14      	ite	ne
 8019dda:	2301      	movne	r3, #1
 8019ddc:	2300      	moveq	r3, #0
 8019dde:	b2db      	uxtb	r3, r3
 8019de0:	461a      	mov	r2, r3
 8019de2:	683b      	ldr	r3, [r7, #0]
 8019de4:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	685b      	ldr	r3, [r3, #4]
 8019dfa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	685b      	ldr	r3, [r3, #4]
 8019e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	bf0c      	ite	eq
 8019e10:	2301      	moveq	r3, #1
 8019e12:	2300      	movne	r3, #0
 8019e14:	b2db      	uxtb	r3, r3
 8019e16:	461a      	mov	r2, r3
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	bf14      	ite	ne
 8019e2c:	2301      	movne	r3, #1
 8019e2e:	2300      	moveq	r3, #0
 8019e30:	b2db      	uxtb	r3, r3
 8019e32:	461a      	mov	r2, r3
 8019e34:	683b      	ldr	r3, [r7, #0]
 8019e36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	681b      	ldr	r3, [r3, #0]
 8019e3e:	685b      	ldr	r3, [r3, #4]
 8019e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	bf14      	ite	ne
 8019e48:	2301      	movne	r3, #1
 8019e4a:	2300      	moveq	r3, #0
 8019e4c:	b2db      	uxtb	r3, r3
 8019e4e:	461a      	mov	r2, r3
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	bf14      	ite	ne
 8019e64:	2301      	movne	r3, #1
 8019e66:	2300      	moveq	r3, #0
 8019e68:	b2db      	uxtb	r3, r3
 8019e6a:	461a      	mov	r2, r3
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	685b      	ldr	r3, [r3, #4]
 8019e78:	0e5b      	lsrs	r3, r3, #25
 8019e7a:	f003 021f 	and.w	r2, r3, #31
 8019e7e:	683b      	ldr	r3, [r7, #0]
 8019e80:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	68db      	ldr	r3, [r3, #12]
 8019e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	bf14      	ite	ne
 8019e90:	2301      	movne	r3, #1
 8019e92:	2300      	moveq	r3, #0
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	461a      	mov	r2, r3
 8019e98:	683b      	ldr	r3, [r7, #0]
 8019e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	f003 020f 	and.w	r2, r3, #15
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eb2:	f003 0302 	and.w	r3, r3, #2
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	bf14      	ite	ne
 8019eba:	2301      	movne	r3, #1
 8019ebc:	2300      	moveq	r3, #0
 8019ebe:	b2db      	uxtb	r3, r3
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	683b      	ldr	r3, [r7, #0]
 8019ec4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	bf0c      	ite	eq
 8019ed6:	2301      	moveq	r3, #1
 8019ed8:	2300      	movne	r3, #0
 8019eda:	b2db      	uxtb	r3, r3
 8019edc:	461a      	mov	r2, r3
 8019ede:	683b      	ldr	r3, [r7, #0]
 8019ee0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ef8:	0c1b      	lsrs	r3, r3, #16
 8019efa:	b29a      	uxth	r2, r3
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f08:	f003 0301 	and.w	r3, r3, #1
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	bf14      	ite	ne
 8019f10:	2301      	movne	r3, #1
 8019f12:	2300      	moveq	r3, #0
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	461a      	mov	r2, r3
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019f26:	f003 0302 	and.w	r3, r3, #2
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	bf14      	ite	ne
 8019f2e:	2301      	movne	r3, #1
 8019f30:	2300      	moveq	r3, #0
 8019f32:	b2db      	uxtb	r3, r3
 8019f34:	461a      	mov	r2, r3
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019f44:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019f54:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8019f58:	683b      	ldr	r3, [r7, #0]
 8019f5a:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019f64:	f003 0308 	and.w	r3, r3, #8
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	bf14      	ite	ne
 8019f6c:	2301      	movne	r3, #1
 8019f6e:	2300      	moveq	r3, #0
 8019f70:	b2db      	uxtb	r3, r3
 8019f72:	461a      	mov	r2, r3
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019f82:	f003 0310 	and.w	r3, r3, #16
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	bf14      	ite	ne
 8019f8a:	2301      	movne	r3, #1
 8019f8c:	2300      	moveq	r3, #0
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	461a      	mov	r2, r3
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	bf0c      	ite	eq
 8019fa8:	2301      	moveq	r3, #1
 8019faa:	2300      	movne	r3, #0
 8019fac:	b2db      	uxtb	r3, r3
 8019fae:	461a      	mov	r2, r3
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8019fb6:	2300      	movs	r3, #0
        }
 8019fb8:	4618      	mov	r0, r3
 8019fba:	370c      	adds	r7, #12
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc2:	4770      	bx	lr

08019fc4 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b082      	sub	sp, #8
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
 8019fcc:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019fce:	683b      	ldr	r3, [r7, #0]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d101      	bne.n	8019fd8 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	e00a      	b.n	8019fee <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019fdc:	2b10      	cmp	r3, #16
 8019fde:	d105      	bne.n	8019fec <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019fe0:	6839      	ldr	r1, [r7, #0]
 8019fe2:	6878      	ldr	r0, [r7, #4]
 8019fe4:	f000 f808 	bl	8019ff8 <ETH_SetMACConfig>

                return HAL_OK;
 8019fe8:	2300      	movs	r3, #0
 8019fea:	e000      	b.n	8019fee <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019fec:	2301      	movs	r3, #1
            }
        }
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3708      	adds	r7, #8
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
	...

08019ff8 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8019ff8:	b480      	push	{r7}
 8019ffa:	b085      	sub	sp, #20
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
 801a000:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 801a00a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 801a00c:	683b      	ldr	r3, [r7, #0]
 801a00e:	791b      	ldrb	r3, [r3, #4]
 801a010:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 801a012:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 801a014:	683b      	ldr	r3, [r7, #0]
 801a016:	7b1b      	ldrb	r3, [r3, #12]
 801a018:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 801a01a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	7b5b      	ldrb	r3, [r3, #13]
 801a020:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 801a022:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	7b9b      	ldrb	r3, [r3, #14]
 801a028:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 801a02a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	7bdb      	ldrb	r3, [r3, #15]
 801a030:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 801a032:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 801a034:	683a      	ldr	r2, [r7, #0]
 801a036:	7c12      	ldrb	r2, [r2, #16]
 801a038:	2a00      	cmp	r2, #0
 801a03a:	d102      	bne.n	801a042 <ETH_SetMACConfig+0x4a>
 801a03c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801a040:	e000      	b.n	801a044 <ETH_SetMACConfig+0x4c>
 801a042:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 801a044:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 801a046:	683a      	ldr	r2, [r7, #0]
 801a048:	7c52      	ldrb	r2, [r2, #17]
 801a04a:	2a00      	cmp	r2, #0
 801a04c:	d102      	bne.n	801a054 <ETH_SetMACConfig+0x5c>
 801a04e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 801a052:	e000      	b.n	801a056 <ETH_SetMACConfig+0x5e>
 801a054:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 801a056:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	7c9b      	ldrb	r3, [r3, #18]
 801a05c:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 801a05e:	431a      	orrs	r2, r3
                          macconf->Speed |
 801a060:	683b      	ldr	r3, [r7, #0]
 801a062:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 801a064:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 801a06a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801a06c:	683b      	ldr	r3, [r7, #0]
 801a06e:	7f1b      	ldrb	r3, [r3, #28]
 801a070:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 801a072:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 801a074:	683b      	ldr	r3, [r7, #0]
 801a076:	7f5b      	ldrb	r3, [r3, #29]
 801a078:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801a07a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 801a07c:	683a      	ldr	r2, [r7, #0]
 801a07e:	7f92      	ldrb	r2, [r2, #30]
 801a080:	2a00      	cmp	r2, #0
 801a082:	d102      	bne.n	801a08a <ETH_SetMACConfig+0x92>
 801a084:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a088:	e000      	b.n	801a08c <ETH_SetMACConfig+0x94>
 801a08a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 801a08c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801a08e:	683b      	ldr	r3, [r7, #0]
 801a090:	7fdb      	ldrb	r3, [r3, #31]
 801a092:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 801a094:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801a096:	683a      	ldr	r2, [r7, #0]
 801a098:	f892 2020 	ldrb.w	r2, [r2, #32]
 801a09c:	2a00      	cmp	r2, #0
 801a09e:	d102      	bne.n	801a0a6 <ETH_SetMACConfig+0xae>
 801a0a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801a0a4:	e000      	b.n	801a0a8 <ETH_SetMACConfig+0xb0>
 801a0a6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801a0a8:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801a0ae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801a0b6:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801a0b8:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 801a0be:	4313      	orrs	r3, r2
 801a0c0:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	681a      	ldr	r2, [r3, #0]
 801a0c8:	4b56      	ldr	r3, [pc, #344]	@ (801a224 <ETH_SetMACConfig+0x22c>)
 801a0ca:	4013      	ands	r3, r2
 801a0cc:	687a      	ldr	r2, [r7, #4]
 801a0ce:	6812      	ldr	r2, [r2, #0]
 801a0d0:	68f9      	ldr	r1, [r7, #12]
 801a0d2:	430b      	orrs	r3, r1
 801a0d4:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a0da:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 801a0dc:	683b      	ldr	r3, [r7, #0]
 801a0de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801a0e2:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801a0e4:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801a0e6:	683b      	ldr	r3, [r7, #0]
 801a0e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a0ec:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 801a0ee:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a0f6:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801a0f8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801a0fa:	683a      	ldr	r2, [r7, #0]
 801a0fc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 801a100:	2a00      	cmp	r2, #0
 801a102:	d102      	bne.n	801a10a <ETH_SetMACConfig+0x112>
 801a104:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a108:	e000      	b.n	801a10c <ETH_SetMACConfig+0x114>
 801a10a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 801a10c:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801a112:	4313      	orrs	r3, r2
 801a114:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	685a      	ldr	r2, [r3, #4]
 801a11c:	4b42      	ldr	r3, [pc, #264]	@ (801a228 <ETH_SetMACConfig+0x230>)
 801a11e:	4013      	ands	r3, r2
 801a120:	687a      	ldr	r2, [r7, #4]
 801a122:	6812      	ldr	r2, [r2, #0]
 801a124:	68f9      	ldr	r1, [r7, #12]
 801a126:	430b      	orrs	r3, r1
 801a128:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801a12a:	683b      	ldr	r3, [r7, #0]
 801a12c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801a130:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 801a132:	683b      	ldr	r3, [r7, #0]
 801a134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801a136:	4313      	orrs	r3, r2
 801a138:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	68da      	ldr	r2, [r3, #12]
 801a140:	4b3a      	ldr	r3, [pc, #232]	@ (801a22c <ETH_SetMACConfig+0x234>)
 801a142:	4013      	ands	r3, r2
 801a144:	687a      	ldr	r2, [r7, #4]
 801a146:	6812      	ldr	r2, [r2, #0]
 801a148:	68f9      	ldr	r1, [r7, #12]
 801a14a:	430b      	orrs	r3, r1
 801a14c:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 801a154:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801a15a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 801a15c:	683a      	ldr	r2, [r7, #0]
 801a15e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 801a162:	2a00      	cmp	r2, #0
 801a164:	d101      	bne.n	801a16a <ETH_SetMACConfig+0x172>
 801a166:	2280      	movs	r2, #128	@ 0x80
 801a168:	e000      	b.n	801a16c <ETH_SetMACConfig+0x174>
 801a16a:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 801a16c:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 801a16e:	683b      	ldr	r3, [r7, #0]
 801a170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a172:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801a174:	4313      	orrs	r3, r2
 801a176:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a17e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 801a182:	4013      	ands	r3, r2
 801a184:	687a      	ldr	r2, [r7, #4]
 801a186:	6812      	ldr	r2, [r2, #0]
 801a188:	68f9      	ldr	r1, [r7, #12]
 801a18a:	430b      	orrs	r3, r1
 801a18c:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801a194:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801a19c:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 801a19e:	4313      	orrs	r3, r2
 801a1a0:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a1aa:	f023 0103 	bic.w	r1, r3, #3
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	68fa      	ldr	r2, [r7, #12]
 801a1b4:	430a      	orrs	r2, r1
 801a1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 801a1c2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	430a      	orrs	r2, r1
 801a1d0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 801a1d4:	683b      	ldr	r3, [r7, #0]
 801a1d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a1d8:	683a      	ldr	r2, [r7, #0]
 801a1da:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 801a1de:	2a00      	cmp	r2, #0
 801a1e0:	d101      	bne.n	801a1e6 <ETH_SetMACConfig+0x1ee>
 801a1e2:	2240      	movs	r2, #64	@ 0x40
 801a1e4:	e000      	b.n	801a1e8 <ETH_SetMACConfig+0x1f0>
 801a1e6:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801a1e8:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801a1ea:	683b      	ldr	r3, [r7, #0]
 801a1ec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 801a1f0:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801a1f2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801a1fa:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 801a1fc:	4313      	orrs	r3, r2
 801a1fe:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801a208:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	68fa      	ldr	r2, [r7, #12]
 801a212:	430a      	orrs	r2, r1
 801a214:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801a218:	bf00      	nop
 801a21a:	3714      	adds	r7, #20
 801a21c:	46bd      	mov	sp, r7
 801a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a222:	4770      	bx	lr
 801a224:	00048083 	.word	0x00048083
 801a228:	c0f88000 	.word	0xc0f88000
 801a22c:	fffffef0 	.word	0xfffffef0

0801a230 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 801a230:	b480      	push	{r7}
 801a232:	b085      	sub	sp, #20
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]
 801a238:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	4b38      	ldr	r3, [pc, #224]	@ (801a328 <ETH_SetDMAConfig+0xf8>)
 801a246:	4013      	ands	r3, r2
 801a248:	683a      	ldr	r2, [r7, #0]
 801a24a:	6811      	ldr	r1, [r2, #0]
 801a24c:	687a      	ldr	r2, [r7, #4]
 801a24e:	6812      	ldr	r2, [r2, #0]
 801a250:	430b      	orrs	r3, r1
 801a252:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a256:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	791b      	ldrb	r3, [r3, #4]
 801a25c:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 801a25e:	683b      	ldr	r3, [r7, #0]
 801a260:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a262:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 801a264:	683b      	ldr	r3, [r7, #0]
 801a266:	7b1b      	ldrb	r3, [r3, #12]
 801a268:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a26a:	4313      	orrs	r3, r2
 801a26c:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a276:	685a      	ldr	r2, [r3, #4]
 801a278:	4b2c      	ldr	r3, [pc, #176]	@ (801a32c <ETH_SetDMAConfig+0xfc>)
 801a27a:	4013      	ands	r3, r2
 801a27c:	687a      	ldr	r2, [r7, #4]
 801a27e:	6812      	ldr	r2, [r2, #0]
 801a280:	68f9      	ldr	r1, [r7, #12]
 801a282:	430b      	orrs	r3, r1
 801a284:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a288:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	7b5b      	ldrb	r3, [r3, #13]
 801a28e:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 801a290:	683b      	ldr	r3, [r7, #0]
 801a292:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a294:	4313      	orrs	r3, r2
 801a296:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a2a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801a2a4:	4b22      	ldr	r3, [pc, #136]	@ (801a330 <ETH_SetDMAConfig+0x100>)
 801a2a6:	4013      	ands	r3, r2
 801a2a8:	687a      	ldr	r2, [r7, #4]
 801a2aa:	6812      	ldr	r2, [r2, #0]
 801a2ac:	68f9      	ldr	r1, [r7, #12]
 801a2ae:	430b      	orrs	r3, r1
 801a2b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a2b4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a2b8:	683b      	ldr	r3, [r7, #0]
 801a2ba:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	7d1b      	ldrb	r3, [r3, #20]
 801a2c0:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a2c2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 801a2c4:	683b      	ldr	r3, [r7, #0]
 801a2c6:	7f5b      	ldrb	r3, [r3, #29]
 801a2c8:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a2ca:	4313      	orrs	r3, r2
 801a2cc:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a2d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801a2da:	4b16      	ldr	r3, [pc, #88]	@ (801a334 <ETH_SetDMAConfig+0x104>)
 801a2dc:	4013      	ands	r3, r2
 801a2de:	687a      	ldr	r2, [r7, #4]
 801a2e0:	6812      	ldr	r2, [r2, #0]
 801a2e2:	68f9      	ldr	r1, [r7, #12]
 801a2e4:	430b      	orrs	r3, r1
 801a2e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a2ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a2ee:	683b      	ldr	r3, [r7, #0]
 801a2f0:	7f1b      	ldrb	r3, [r3, #28]
 801a2f2:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 801a2f4:	683b      	ldr	r3, [r7, #0]
 801a2f6:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a2f8:	4313      	orrs	r3, r2
 801a2fa:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a304:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801a308:	4b0b      	ldr	r3, [pc, #44]	@ (801a338 <ETH_SetDMAConfig+0x108>)
 801a30a:	4013      	ands	r3, r2
 801a30c:	687a      	ldr	r2, [r7, #4]
 801a30e:	6812      	ldr	r2, [r2, #0]
 801a310:	68f9      	ldr	r1, [r7, #12]
 801a312:	430b      	orrs	r3, r1
 801a314:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a318:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 801a31c:	bf00      	nop
 801a31e:	3714      	adds	r7, #20
 801a320:	46bd      	mov	sp, r7
 801a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a326:	4770      	bx	lr
 801a328:	ffff87fd 	.word	0xffff87fd
 801a32c:	ffff2ffe 	.word	0xffff2ffe
 801a330:	fffec000 	.word	0xfffec000
 801a334:	ffc0efef 	.word	0xffc0efef
 801a338:	7fc0ffff 	.word	0x7fc0ffff

0801a33c <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b0a4      	sub	sp, #144	@ 0x90
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801a344:	2301      	movs	r3, #1
 801a346:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a34a:	2300      	movs	r3, #0
 801a34c:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801a34e:	2300      	movs	r3, #0
 801a350:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a354:	2300      	movs	r3, #0
 801a356:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801a35a:	2301      	movs	r3, #1
 801a35c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801a360:	2301      	movs	r3, #1
 801a362:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801a366:	2301      	movs	r3, #1
 801a368:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 801a36c:	2300      	movs	r3, #0
 801a36e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801a372:	2301      	movs	r3, #1
 801a374:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a37c:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801a37e:	2300      	movs	r3, #0
 801a380:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801a384:	2300      	movs	r3, #0
 801a386:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801a388:	2300      	movs	r3, #0
 801a38a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801a38e:	2300      	movs	r3, #0
 801a390:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801a394:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801a398:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801a39a:	2300      	movs	r3, #0
 801a39c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 801a3a4:	2301      	movs	r3, #1
 801a3a6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a3b6:	2300      	movs	r3, #0
 801a3b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 801a3ce:	2301      	movs	r3, #1
 801a3d0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a3d4:	2320      	movs	r3, #32
 801a3d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801a3da:	2301      	movs	r3, #1
 801a3dc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a3e6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 801a3ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a3f0:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a3f8:	2302      	movs	r3, #2
 801a3fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 801a3fe:	2300      	movs	r3, #0
 801a400:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a404:	2300      	movs	r3, #0
 801a406:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a40a:	2300      	movs	r3, #0
 801a40c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 801a410:	2301      	movs	r3, #1
 801a412:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801a416:	2300      	movs	r3, #0
 801a418:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801a41a:	2301      	movs	r3, #1
 801a41c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 801a420:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a424:	4619      	mov	r1, r3
 801a426:	6878      	ldr	r0, [r7, #4]
 801a428:	f7ff fde6 	bl	8019ff8 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a42c:	2301      	movs	r3, #1
 801a42e:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a430:	2301      	movs	r3, #1
 801a432:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a434:	2300      	movs	r3, #0
 801a436:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801a438:	2300      	movs	r3, #0
 801a43a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 801a43e:	2300      	movs	r3, #0
 801a440:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a442:	2300      	movs	r3, #0
 801a444:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a446:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a44a:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a44c:	2300      	movs	r3, #0
 801a44e:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a450:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a454:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801a456:	2300      	movs	r3, #0
 801a458:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 801a45c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a460:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 801a462:	f107 0308 	add.w	r3, r7, #8
 801a466:	4619      	mov	r1, r3
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	f7ff fee1 	bl	801a230 <ETH_SetDMAConfig>
        }
 801a46e:	bf00      	nop
 801a470:	3790      	adds	r7, #144	@ 0x90
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
	...

0801a478 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801a488:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801a490:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801a492:	f003 fdf1 	bl	801e078 <HAL_RCC_GetHCLKFreq>
 801a496:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801a498:	68bb      	ldr	r3, [r7, #8]
 801a49a:	4a1e      	ldr	r2, [pc, #120]	@ (801a514 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 801a49c:	4293      	cmp	r3, r2
 801a49e:	d908      	bls.n	801a4b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	4a1d      	ldr	r2, [pc, #116]	@ (801a518 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	d804      	bhi.n	801a4b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a4ae:	60fb      	str	r3, [r7, #12]
 801a4b0:	e027      	b.n	801a502 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801a4b2:	68bb      	ldr	r3, [r7, #8]
 801a4b4:	4a18      	ldr	r2, [pc, #96]	@ (801a518 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a4b6:	4293      	cmp	r3, r2
 801a4b8:	d908      	bls.n	801a4cc <ETH_MAC_MDIO_ClkConfig+0x54>
 801a4ba:	68bb      	ldr	r3, [r7, #8]
 801a4bc:	4a17      	ldr	r2, [pc, #92]	@ (801a51c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	d204      	bcs.n	801a4cc <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801a4c8:	60fb      	str	r3, [r7, #12]
 801a4ca:	e01a      	b.n	801a502 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	4a13      	ldr	r2, [pc, #76]	@ (801a51c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a4d0:	4293      	cmp	r3, r2
 801a4d2:	d303      	bcc.n	801a4dc <ETH_MAC_MDIO_ClkConfig+0x64>
 801a4d4:	68bb      	ldr	r3, [r7, #8]
 801a4d6:	4a12      	ldr	r2, [pc, #72]	@ (801a520 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a4d8:	4293      	cmp	r3, r2
 801a4da:	d911      	bls.n	801a500 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 801a4dc:	68bb      	ldr	r3, [r7, #8]
 801a4de:	4a10      	ldr	r2, [pc, #64]	@ (801a520 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a4e0:	4293      	cmp	r3, r2
 801a4e2:	d908      	bls.n	801a4f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 801a4e4:	68bb      	ldr	r3, [r7, #8]
 801a4e6:	4a0f      	ldr	r2, [pc, #60]	@ (801a524 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801a4e8:	4293      	cmp	r3, r2
 801a4ea:	d804      	bhi.n	801a4f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a4f2:	60fb      	str	r3, [r7, #12]
 801a4f4:	e005      	b.n	801a502 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801a4f6:	68fb      	ldr	r3, [r7, #12]
 801a4f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a4fc:	60fb      	str	r3, [r7, #12]
 801a4fe:	e000      	b.n	801a502 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 801a500:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	68fa      	ldr	r2, [r7, #12]
 801a508:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 801a50c:	bf00      	nop
 801a50e:	3710      	adds	r7, #16
 801a510:	46bd      	mov	sp, r7
 801a512:	bd80      	pop	{r7, pc}
 801a514:	01312cff 	.word	0x01312cff
 801a518:	02160ebf 	.word	0x02160ebf
 801a51c:	03938700 	.word	0x03938700
 801a520:	05f5e0ff 	.word	0x05f5e0ff
 801a524:	08f0d17f 	.word	0x08f0d17f

0801a528 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a528:	b480      	push	{r7}
 801a52a:	b085      	sub	sp, #20
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a530:	2300      	movs	r3, #0
 801a532:	60fb      	str	r3, [r7, #12]
 801a534:	e01d      	b.n	801a572 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	68d9      	ldr	r1, [r3, #12]
 801a53a:	68fa      	ldr	r2, [r7, #12]
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	440b      	add	r3, r1
 801a546:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	2200      	movs	r2, #0
 801a54c:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a54e:	68bb      	ldr	r3, [r7, #8]
 801a550:	2200      	movs	r2, #0
 801a552:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	2200      	movs	r2, #0
 801a558:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801a55a:	68bb      	ldr	r3, [r7, #8]
 801a55c:	2200      	movs	r2, #0
 801a55e:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 801a560:	68b9      	ldr	r1, [r7, #8]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	68fa      	ldr	r2, [r7, #12]
 801a566:	3206      	adds	r2, #6
 801a568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	3301      	adds	r3, #1
 801a570:	60fb      	str	r3, [r7, #12]
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	2b03      	cmp	r3, #3
 801a576:	d9de      	bls.n	801a536 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2200      	movs	r2, #0
 801a57c:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	2200      	movs	r2, #0
 801a582:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a58c:	461a      	mov	r2, r3
 801a58e:	2303      	movs	r3, #3
 801a590:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	68da      	ldr	r2, [r3, #12]
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a5a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	68da      	ldr	r2, [r3, #12]
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a5b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 801a5b4:	bf00      	nop
 801a5b6:	3714      	adds	r7, #20
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr

0801a5c0 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a5c0:	b480      	push	{r7}
 801a5c2:	b085      	sub	sp, #20
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	60fb      	str	r3, [r7, #12]
 801a5cc:	e023      	b.n	801a616 <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	6919      	ldr	r1, [r3, #16]
 801a5d2:	68fa      	ldr	r2, [r7, #12]
 801a5d4:	4613      	mov	r3, r2
 801a5d6:	005b      	lsls	r3, r3, #1
 801a5d8:	4413      	add	r3, r2
 801a5da:	00db      	lsls	r3, r3, #3
 801a5dc:	440b      	add	r3, r1
 801a5de:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 801a5e0:	68bb      	ldr	r3, [r7, #8]
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801a5e6:	68bb      	ldr	r3, [r7, #8]
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 801a5ec:	68bb      	ldr	r3, [r7, #8]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 801a5f2:	68bb      	ldr	r3, [r7, #8]
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 801a5fe:	68bb      	ldr	r3, [r7, #8]
 801a600:	2200      	movs	r2, #0
 801a602:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 801a604:	68b9      	ldr	r1, [r7, #8]
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	68fa      	ldr	r2, [r7, #12]
 801a60a:	320c      	adds	r2, #12
 801a60c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	3301      	adds	r3, #1
 801a614:	60fb      	str	r3, [r7, #12]
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	2b03      	cmp	r3, #3
 801a61a:	d9d8      	bls.n	801a5ce <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2200      	movs	r2, #0
 801a620:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	2200      	movs	r2, #0
 801a626:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2200      	movs	r2, #0
 801a62c:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2200      	movs	r2, #0
 801a632:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	2200      	movs	r2, #0
 801a638:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a642:	461a      	mov	r2, r3
 801a644:	2303      	movs	r3, #3
 801a646:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	691a      	ldr	r2, [r3, #16]
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a656:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	691b      	ldr	r3, [r3, #16]
 801a65e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a66a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 801a66e:	bf00      	nop
 801a670:	3714      	adds	r7, #20
 801a672:	46bd      	mov	sp, r7
 801a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a678:	4770      	bx	lr
	...

0801a67c <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 801a67c:	b580      	push	{r7, lr}
 801a67e:	b086      	sub	sp, #24
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a688:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a68a:	e032      	b.n	801a6f2 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	697a      	ldr	r2, [r7, #20]
 801a690:	3206      	adds	r2, #6
 801a692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a696:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	68db      	ldr	r3, [r3, #12]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	db31      	blt.n	801a704 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 801a6a0:	693b      	ldr	r3, [r7, #16]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d02d      	beq.n	801a708 <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 801a6ac:	68f8      	ldr	r0, [r7, #12]
 801a6ae:	f7f0 fab4 	bl	800ac1a <pxPacketBuffer_to_NetworkBuffer>
 801a6b2:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 801a6b4:	68bb      	ldr	r3, [r7, #8]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d002      	beq.n	801a6c0 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801a6ba:	68b8      	ldr	r0, [r7, #8]
 801a6bc:	f7fd faa2 	bl	8017c04 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 801a6c0:	693b      	ldr	r3, [r7, #16]
 801a6c2:	2200      	movs	r2, #0
 801a6c4:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801a6c6:	697b      	ldr	r3, [r7, #20]
 801a6c8:	3301      	adds	r3, #1
 801a6ca:	617b      	str	r3, [r7, #20]
 801a6cc:	697b      	ldr	r3, [r7, #20]
 801a6ce:	2b03      	cmp	r3, #3
 801a6d0:	d902      	bls.n	801a6d8 <ETH_Clear_Tx_Descriptors+0x5c>
 801a6d2:	697b      	ldr	r3, [r7, #20]
 801a6d4:	3b04      	subs	r3, #4
 801a6d6:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	697a      	ldr	r2, [r7, #20]
 801a6dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801a6de:	f3bf 8f4f 	dsb	sy
}
 801a6e2:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 801a6e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a714 <ETH_Clear_Tx_Descriptors+0x98>)
 801a6e6:	6818      	ldr	r0, [r3, #0]
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	2100      	movs	r1, #0
 801a6ee:	f7e9 fb43 	bl	8003d78 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a6f2:	4b08      	ldr	r3, [pc, #32]	@ (801a714 <ETH_Clear_Tx_Descriptors+0x98>)
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	4618      	mov	r0, r3
 801a6f8:	f7e9 fde4 	bl	80042c4 <uxQueueMessagesWaiting>
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	2b04      	cmp	r3, #4
 801a700:	d1c4      	bne.n	801a68c <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 801a702:	e002      	b.n	801a70a <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 801a704:	bf00      	nop
 801a706:	e000      	b.n	801a70a <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801a708:	bf00      	nop
        }
 801a70a:	bf00      	nop
 801a70c:	3718      	adds	r7, #24
 801a70e:	46bd      	mov	sp, r7
 801a710:	bd80      	pop	{r7, pc}
 801a712:	bf00      	nop
 801a714:	2000248c 	.word	0x2000248c

0801a718 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801a718:	b480      	push	{r7}
 801a71a:	b08b      	sub	sp, #44	@ 0x2c
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	60f8      	str	r0, [r7, #12]
 801a720:	60b9      	str	r1, [r7, #8]
 801a722:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	3318      	adds	r3, #24
 801a728:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a72a:	6a3b      	ldr	r3, [r7, #32]
 801a72c:	691b      	ldr	r3, [r3, #16]
 801a72e:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801a730:	6a3b      	ldr	r3, [r7, #32]
 801a732:	69fa      	ldr	r2, [r7, #28]
 801a734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a738:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	689b      	ldr	r3, [r3, #8]
 801a73e:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	2200      	movs	r2, #0
 801a744:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801a746:	69bb      	ldr	r3, [r7, #24]
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 801a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a74e:	2b00      	cmp	r3, #0
 801a750:	da01      	bge.n	801a756 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 801a752:	2302      	movs	r3, #2
 801a754:	e05c      	b.n	801a810 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	461a      	mov	r2, r3
 801a75c:	69bb      	ldr	r3, [r7, #24]
 801a75e:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 801a760:	69bb      	ldr	r3, [r7, #24]
 801a762:	689a      	ldr	r2, [r3, #8]
 801a764:	4b2d      	ldr	r3, [pc, #180]	@ (801a81c <ETH_Prepare_Tx_Descriptors+0x104>)
 801a766:	4013      	ands	r3, r2
 801a768:	697a      	ldr	r2, [r7, #20]
 801a76a:	6852      	ldr	r2, [r2, #4]
 801a76c:	431a      	orrs	r2, r3
 801a76e:	69bb      	ldr	r3, [r7, #24]
 801a770:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a772:	69bb      	ldr	r3, [r7, #24]
 801a774:	2200      	movs	r2, #0
 801a776:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801a778:	69bb      	ldr	r3, [r7, #24]
 801a77a:	689a      	ldr	r2, [r3, #8]
 801a77c:	4b28      	ldr	r3, [pc, #160]	@ (801a820 <ETH_Prepare_Tx_Descriptors+0x108>)
 801a77e:	4013      	ands	r3, r2
 801a780:	69ba      	ldr	r2, [r7, #24]
 801a782:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 801a784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a786:	4b27      	ldr	r3, [pc, #156]	@ (801a824 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801a788:	4013      	ands	r3, r2
 801a78a:	68ba      	ldr	r2, [r7, #8]
 801a78c:	6852      	ldr	r2, [r2, #4]
 801a78e:	4313      	orrs	r3, r2
 801a790:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 801a792:	68bb      	ldr	r3, [r7, #8]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	f003 0301 	and.w	r3, r3, #1
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d006      	beq.n	801a7ac <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 801a79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a7a4:	68bb      	ldr	r3, [r7, #8]
 801a7a6:	695b      	ldr	r3, [r3, #20]
 801a7a8:	4313      	orrs	r3, r2
 801a7aa:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	f003 0320 	and.w	r3, r3, #32
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d006      	beq.n	801a7c6 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	691b      	ldr	r3, [r3, #16]
 801a7c2:	4313      	orrs	r3, r2
 801a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801a7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 801a7cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a7d4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801a7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a7dc:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d006      	beq.n	801a7f2 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a7e4:	69bb      	ldr	r3, [r7, #24]
 801a7e6:	689b      	ldr	r3, [r3, #8]
 801a7e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a7ec:	69bb      	ldr	r3, [r7, #24]
 801a7ee:	609a      	str	r2, [r3, #8]
 801a7f0:	e005      	b.n	801a7fe <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a7f2:	69bb      	ldr	r3, [r7, #24]
 801a7f4:	689b      	ldr	r3, [r3, #8]
 801a7f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a7fa:	69bb      	ldr	r3, [r7, #24]
 801a7fc:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801a7fe:	69bb      	ldr	r3, [r7, #24]
 801a800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a802:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 801a804:	69bb      	ldr	r3, [r7, #24]
 801a806:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a808:	f3bf 8f4f 	dsb	sy
}
 801a80c:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a80e:	2300      	movs	r3, #0
        }
 801a810:	4618      	mov	r0, r3
 801a812:	372c      	adds	r7, #44	@ 0x2c
 801a814:	46bd      	mov	sp, r7
 801a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81a:	4770      	bx	lr
 801a81c:	ffffc000 	.word	0xffffc000
 801a820:	c000ffff 	.word	0xc000ffff
 801a824:	ffff8000 	.word	0xffff8000

0801a828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	b082      	sub	sp, #8
 801a82c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a82e:	2003      	movs	r0, #3
 801a830:	f000 f9a0 	bl	801ab74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a834:	f003 faa6 	bl	801dd84 <HAL_RCC_GetSysClockFreq>
 801a838:	4602      	mov	r2, r0
 801a83a:	4b15      	ldr	r3, [pc, #84]	@ (801a890 <HAL_Init+0x68>)
 801a83c:	699b      	ldr	r3, [r3, #24]
 801a83e:	0a1b      	lsrs	r3, r3, #8
 801a840:	f003 030f 	and.w	r3, r3, #15
 801a844:	4913      	ldr	r1, [pc, #76]	@ (801a894 <HAL_Init+0x6c>)
 801a846:	5ccb      	ldrb	r3, [r1, r3]
 801a848:	f003 031f 	and.w	r3, r3, #31
 801a84c:	fa22 f303 	lsr.w	r3, r2, r3
 801a850:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a852:	4b0f      	ldr	r3, [pc, #60]	@ (801a890 <HAL_Init+0x68>)
 801a854:	699b      	ldr	r3, [r3, #24]
 801a856:	f003 030f 	and.w	r3, r3, #15
 801a85a:	4a0e      	ldr	r2, [pc, #56]	@ (801a894 <HAL_Init+0x6c>)
 801a85c:	5cd3      	ldrb	r3, [r2, r3]
 801a85e:	f003 031f 	and.w	r3, r3, #31
 801a862:	687a      	ldr	r2, [r7, #4]
 801a864:	fa22 f303 	lsr.w	r3, r2, r3
 801a868:	4a0b      	ldr	r2, [pc, #44]	@ (801a898 <HAL_Init+0x70>)
 801a86a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a86c:	4a0b      	ldr	r2, [pc, #44]	@ (801a89c <HAL_Init+0x74>)
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a872:	200f      	movs	r0, #15
 801a874:	f000 f814 	bl	801a8a0 <HAL_InitTick>
 801a878:	4603      	mov	r3, r0
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d001      	beq.n	801a882 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a87e:	2301      	movs	r3, #1
 801a880:	e002      	b.n	801a888 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a882:	f7e7 fe57 	bl	8002534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a886:	2300      	movs	r3, #0
}
 801a888:	4618      	mov	r0, r3
 801a88a:	3708      	adds	r7, #8
 801a88c:	46bd      	mov	sp, r7
 801a88e:	bd80      	pop	{r7, pc}
 801a890:	58024400 	.word	0x58024400
 801a894:	080281f4 	.word	0x080281f4
 801a898:	20000004 	.word	0x20000004
 801a89c:	20000000 	.word	0x20000000

0801a8a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a8a0:	b580      	push	{r7, lr}
 801a8a2:	b082      	sub	sp, #8
 801a8a4:	af00      	add	r7, sp, #0
 801a8a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a8a8:	4b15      	ldr	r3, [pc, #84]	@ (801a900 <HAL_InitTick+0x60>)
 801a8aa:	781b      	ldrb	r3, [r3, #0]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d101      	bne.n	801a8b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	e021      	b.n	801a8f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a8b4:	4b13      	ldr	r3, [pc, #76]	@ (801a904 <HAL_InitTick+0x64>)
 801a8b6:	681a      	ldr	r2, [r3, #0]
 801a8b8:	4b11      	ldr	r3, [pc, #68]	@ (801a900 <HAL_InitTick+0x60>)
 801a8ba:	781b      	ldrb	r3, [r3, #0]
 801a8bc:	4619      	mov	r1, r3
 801a8be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a8c2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a8c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f000 f985 	bl	801abda <HAL_SYSTICK_Config>
 801a8d0:	4603      	mov	r3, r0
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d001      	beq.n	801a8da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a8d6:	2301      	movs	r3, #1
 801a8d8:	e00e      	b.n	801a8f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	2b0f      	cmp	r3, #15
 801a8de:	d80a      	bhi.n	801a8f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	6879      	ldr	r1, [r7, #4]
 801a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8e8:	f000 f94f 	bl	801ab8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a8ec:	4a06      	ldr	r2, [pc, #24]	@ (801a908 <HAL_InitTick+0x68>)
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	e000      	b.n	801a8f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a8f6:	2301      	movs	r3, #1
}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	3708      	adds	r7, #8
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	20000024 	.word	0x20000024
 801a904:	20000000 	.word	0x20000000
 801a908:	20000020 	.word	0x20000020

0801a90c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a90c:	b480      	push	{r7}
 801a90e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a910:	4b06      	ldr	r3, [pc, #24]	@ (801a92c <HAL_IncTick+0x20>)
 801a912:	781b      	ldrb	r3, [r3, #0]
 801a914:	461a      	mov	r2, r3
 801a916:	4b06      	ldr	r3, [pc, #24]	@ (801a930 <HAL_IncTick+0x24>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4413      	add	r3, r2
 801a91c:	4a04      	ldr	r2, [pc, #16]	@ (801a930 <HAL_IncTick+0x24>)
 801a91e:	6013      	str	r3, [r2, #0]
}
 801a920:	bf00      	nop
 801a922:	46bd      	mov	sp, r7
 801a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a928:	4770      	bx	lr
 801a92a:	bf00      	nop
 801a92c:	20000024 	.word	0x20000024
 801a930:	20002598 	.word	0x20002598

0801a934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a934:	b480      	push	{r7}
 801a936:	af00      	add	r7, sp, #0
  return uwTick;
 801a938:	4b03      	ldr	r3, [pc, #12]	@ (801a948 <HAL_GetTick+0x14>)
 801a93a:	681b      	ldr	r3, [r3, #0]
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr
 801a946:	bf00      	nop
 801a948:	20002598 	.word	0x20002598

0801a94c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a954:	f7ff ffee 	bl	801a934 <HAL_GetTick>
 801a958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a964:	d005      	beq.n	801a972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a966:	4b0a      	ldr	r3, [pc, #40]	@ (801a990 <HAL_Delay+0x44>)
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	461a      	mov	r2, r3
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	4413      	add	r3, r2
 801a970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a972:	bf00      	nop
 801a974:	f7ff ffde 	bl	801a934 <HAL_GetTick>
 801a978:	4602      	mov	r2, r0
 801a97a:	68bb      	ldr	r3, [r7, #8]
 801a97c:	1ad3      	subs	r3, r2, r3
 801a97e:	68fa      	ldr	r2, [r7, #12]
 801a980:	429a      	cmp	r2, r3
 801a982:	d8f7      	bhi.n	801a974 <HAL_Delay+0x28>
  {
  }
}
 801a984:	bf00      	nop
 801a986:	bf00      	nop
 801a988:	3710      	adds	r7, #16
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	20000024 	.word	0x20000024

0801a994 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a994:	b480      	push	{r7}
 801a996:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a998:	4b03      	ldr	r3, [pc, #12]	@ (801a9a8 <HAL_GetREVID+0x14>)
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	0c1b      	lsrs	r3, r3, #16
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a6:	4770      	bx	lr
 801a9a8:	5c001000 	.word	0x5c001000

0801a9ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a9ac:	b480      	push	{r7}
 801a9ae:	b083      	sub	sp, #12
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a9b4:	4b06      	ldr	r3, [pc, #24]	@ (801a9d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a9bc:	4904      	ldr	r1, [pc, #16]	@ (801a9d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	4313      	orrs	r3, r2
 801a9c2:	604b      	str	r3, [r1, #4]
}
 801a9c4:	bf00      	nop
 801a9c6:	370c      	adds	r7, #12
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr
 801a9d0:	58000400 	.word	0x58000400

0801a9d4 <__NVIC_SetPriorityGrouping>:
{
 801a9d4:	b480      	push	{r7}
 801a9d6:	b085      	sub	sp, #20
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	f003 0307 	and.w	r3, r3, #7
 801a9e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a9e4:	4b0b      	ldr	r3, [pc, #44]	@ (801aa14 <__NVIC_SetPriorityGrouping+0x40>)
 801a9e6:	68db      	ldr	r3, [r3, #12]
 801a9e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a9ea:	68ba      	ldr	r2, [r7, #8]
 801a9ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a9f0:	4013      	ands	r3, r2
 801a9f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a9f8:	68bb      	ldr	r3, [r7, #8]
 801a9fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a9fc:	4b06      	ldr	r3, [pc, #24]	@ (801aa18 <__NVIC_SetPriorityGrouping+0x44>)
 801a9fe:	4313      	orrs	r3, r2
 801aa00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801aa02:	4a04      	ldr	r2, [pc, #16]	@ (801aa14 <__NVIC_SetPriorityGrouping+0x40>)
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	60d3      	str	r3, [r2, #12]
}
 801aa08:	bf00      	nop
 801aa0a:	3714      	adds	r7, #20
 801aa0c:	46bd      	mov	sp, r7
 801aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa12:	4770      	bx	lr
 801aa14:	e000ed00 	.word	0xe000ed00
 801aa18:	05fa0000 	.word	0x05fa0000

0801aa1c <__NVIC_GetPriorityGrouping>:
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801aa20:	4b04      	ldr	r3, [pc, #16]	@ (801aa34 <__NVIC_GetPriorityGrouping+0x18>)
 801aa22:	68db      	ldr	r3, [r3, #12]
 801aa24:	0a1b      	lsrs	r3, r3, #8
 801aa26:	f003 0307 	and.w	r3, r3, #7
}
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa32:	4770      	bx	lr
 801aa34:	e000ed00 	.word	0xe000ed00

0801aa38 <__NVIC_EnableIRQ>:
{
 801aa38:	b480      	push	{r7}
 801aa3a:	b083      	sub	sp, #12
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	4603      	mov	r3, r0
 801aa40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801aa42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	db0b      	blt.n	801aa62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801aa4a:	88fb      	ldrh	r3, [r7, #6]
 801aa4c:	f003 021f 	and.w	r2, r3, #31
 801aa50:	4907      	ldr	r1, [pc, #28]	@ (801aa70 <__NVIC_EnableIRQ+0x38>)
 801aa52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa56:	095b      	lsrs	r3, r3, #5
 801aa58:	2001      	movs	r0, #1
 801aa5a:	fa00 f202 	lsl.w	r2, r0, r2
 801aa5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801aa62:	bf00      	nop
 801aa64:	370c      	adds	r7, #12
 801aa66:	46bd      	mov	sp, r7
 801aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6c:	4770      	bx	lr
 801aa6e:	bf00      	nop
 801aa70:	e000e100 	.word	0xe000e100

0801aa74 <__NVIC_SetPriority>:
{
 801aa74:	b480      	push	{r7}
 801aa76:	b083      	sub	sp, #12
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	6039      	str	r1, [r7, #0]
 801aa7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801aa80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	db0a      	blt.n	801aa9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa88:	683b      	ldr	r3, [r7, #0]
 801aa8a:	b2da      	uxtb	r2, r3
 801aa8c:	490c      	ldr	r1, [pc, #48]	@ (801aac0 <__NVIC_SetPriority+0x4c>)
 801aa8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801aa92:	0112      	lsls	r2, r2, #4
 801aa94:	b2d2      	uxtb	r2, r2
 801aa96:	440b      	add	r3, r1
 801aa98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801aa9c:	e00a      	b.n	801aab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801aa9e:	683b      	ldr	r3, [r7, #0]
 801aaa0:	b2da      	uxtb	r2, r3
 801aaa2:	4908      	ldr	r1, [pc, #32]	@ (801aac4 <__NVIC_SetPriority+0x50>)
 801aaa4:	88fb      	ldrh	r3, [r7, #6]
 801aaa6:	f003 030f 	and.w	r3, r3, #15
 801aaaa:	3b04      	subs	r3, #4
 801aaac:	0112      	lsls	r2, r2, #4
 801aaae:	b2d2      	uxtb	r2, r2
 801aab0:	440b      	add	r3, r1
 801aab2:	761a      	strb	r2, [r3, #24]
}
 801aab4:	bf00      	nop
 801aab6:	370c      	adds	r7, #12
 801aab8:	46bd      	mov	sp, r7
 801aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aabe:	4770      	bx	lr
 801aac0:	e000e100 	.word	0xe000e100
 801aac4:	e000ed00 	.word	0xe000ed00

0801aac8 <NVIC_EncodePriority>:
{
 801aac8:	b480      	push	{r7}
 801aaca:	b089      	sub	sp, #36	@ 0x24
 801aacc:	af00      	add	r7, sp, #0
 801aace:	60f8      	str	r0, [r7, #12]
 801aad0:	60b9      	str	r1, [r7, #8]
 801aad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	f003 0307 	and.w	r3, r3, #7
 801aada:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801aadc:	69fb      	ldr	r3, [r7, #28]
 801aade:	f1c3 0307 	rsb	r3, r3, #7
 801aae2:	2b04      	cmp	r3, #4
 801aae4:	bf28      	it	cs
 801aae6:	2304      	movcs	r3, #4
 801aae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801aaea:	69fb      	ldr	r3, [r7, #28]
 801aaec:	3304      	adds	r3, #4
 801aaee:	2b06      	cmp	r3, #6
 801aaf0:	d902      	bls.n	801aaf8 <NVIC_EncodePriority+0x30>
 801aaf2:	69fb      	ldr	r3, [r7, #28]
 801aaf4:	3b03      	subs	r3, #3
 801aaf6:	e000      	b.n	801aafa <NVIC_EncodePriority+0x32>
 801aaf8:	2300      	movs	r3, #0
 801aafa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801aafc:	f04f 32ff 	mov.w	r2, #4294967295
 801ab00:	69bb      	ldr	r3, [r7, #24]
 801ab02:	fa02 f303 	lsl.w	r3, r2, r3
 801ab06:	43da      	mvns	r2, r3
 801ab08:	68bb      	ldr	r3, [r7, #8]
 801ab0a:	401a      	ands	r2, r3
 801ab0c:	697b      	ldr	r3, [r7, #20]
 801ab0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ab10:	f04f 31ff 	mov.w	r1, #4294967295
 801ab14:	697b      	ldr	r3, [r7, #20]
 801ab16:	fa01 f303 	lsl.w	r3, r1, r3
 801ab1a:	43d9      	mvns	r1, r3
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ab20:	4313      	orrs	r3, r2
}
 801ab22:	4618      	mov	r0, r3
 801ab24:	3724      	adds	r7, #36	@ 0x24
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr
	...

0801ab30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	3b01      	subs	r3, #1
 801ab3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ab40:	d301      	bcc.n	801ab46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ab42:	2301      	movs	r3, #1
 801ab44:	e00f      	b.n	801ab66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ab46:	4a0a      	ldr	r2, [pc, #40]	@ (801ab70 <SysTick_Config+0x40>)
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	3b01      	subs	r3, #1
 801ab4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ab4e:	210f      	movs	r1, #15
 801ab50:	f04f 30ff 	mov.w	r0, #4294967295
 801ab54:	f7ff ff8e 	bl	801aa74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801ab58:	4b05      	ldr	r3, [pc, #20]	@ (801ab70 <SysTick_Config+0x40>)
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801ab5e:	4b04      	ldr	r3, [pc, #16]	@ (801ab70 <SysTick_Config+0x40>)
 801ab60:	2207      	movs	r2, #7
 801ab62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801ab64:	2300      	movs	r3, #0
}
 801ab66:	4618      	mov	r0, r3
 801ab68:	3708      	adds	r7, #8
 801ab6a:	46bd      	mov	sp, r7
 801ab6c:	bd80      	pop	{r7, pc}
 801ab6e:	bf00      	nop
 801ab70:	e000e010 	.word	0xe000e010

0801ab74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801ab7c:	6878      	ldr	r0, [r7, #4]
 801ab7e:	f7ff ff29 	bl	801a9d4 <__NVIC_SetPriorityGrouping>
}
 801ab82:	bf00      	nop
 801ab84:	3708      	adds	r7, #8
 801ab86:	46bd      	mov	sp, r7
 801ab88:	bd80      	pop	{r7, pc}

0801ab8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801ab8a:	b580      	push	{r7, lr}
 801ab8c:	b086      	sub	sp, #24
 801ab8e:	af00      	add	r7, sp, #0
 801ab90:	4603      	mov	r3, r0
 801ab92:	60b9      	str	r1, [r7, #8]
 801ab94:	607a      	str	r2, [r7, #4]
 801ab96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801ab98:	f7ff ff40 	bl	801aa1c <__NVIC_GetPriorityGrouping>
 801ab9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801ab9e:	687a      	ldr	r2, [r7, #4]
 801aba0:	68b9      	ldr	r1, [r7, #8]
 801aba2:	6978      	ldr	r0, [r7, #20]
 801aba4:	f7ff ff90 	bl	801aac8 <NVIC_EncodePriority>
 801aba8:	4602      	mov	r2, r0
 801abaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801abae:	4611      	mov	r1, r2
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7ff ff5f 	bl	801aa74 <__NVIC_SetPriority>
}
 801abb6:	bf00      	nop
 801abb8:	3718      	adds	r7, #24
 801abba:	46bd      	mov	sp, r7
 801abbc:	bd80      	pop	{r7, pc}

0801abbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801abbe:	b580      	push	{r7, lr}
 801abc0:	b082      	sub	sp, #8
 801abc2:	af00      	add	r7, sp, #0
 801abc4:	4603      	mov	r3, r0
 801abc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801abc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801abcc:	4618      	mov	r0, r3
 801abce:	f7ff ff33 	bl	801aa38 <__NVIC_EnableIRQ>
}
 801abd2:	bf00      	nop
 801abd4:	3708      	adds	r7, #8
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}

0801abda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801abda:	b580      	push	{r7, lr}
 801abdc:	b082      	sub	sp, #8
 801abde:	af00      	add	r7, sp, #0
 801abe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801abe2:	6878      	ldr	r0, [r7, #4]
 801abe4:	f7ff ffa4 	bl	801ab30 <SysTick_Config>
 801abe8:	4603      	mov	r3, r0
}
 801abea:	4618      	mov	r0, r3
 801abec:	3708      	adds	r7, #8
 801abee:	46bd      	mov	sp, r7
 801abf0:	bd80      	pop	{r7, pc}
	...

0801abf4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801abf4:	b480      	push	{r7}
 801abf6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801abf8:	f3bf 8f5f 	dmb	sy
}
 801abfc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801abfe:	4b07      	ldr	r3, [pc, #28]	@ (801ac1c <HAL_MPU_Disable+0x28>)
 801ac00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac02:	4a06      	ldr	r2, [pc, #24]	@ (801ac1c <HAL_MPU_Disable+0x28>)
 801ac04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ac08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801ac0a:	4b05      	ldr	r3, [pc, #20]	@ (801ac20 <HAL_MPU_Disable+0x2c>)
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	605a      	str	r2, [r3, #4]
}
 801ac10:	bf00      	nop
 801ac12:	46bd      	mov	sp, r7
 801ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac18:	4770      	bx	lr
 801ac1a:	bf00      	nop
 801ac1c:	e000ed00 	.word	0xe000ed00
 801ac20:	e000ed90 	.word	0xe000ed90

0801ac24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801ac24:	b480      	push	{r7}
 801ac26:	b083      	sub	sp, #12
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801ac2c:	4a0b      	ldr	r2, [pc, #44]	@ (801ac5c <HAL_MPU_Enable+0x38>)
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	f043 0301 	orr.w	r3, r3, #1
 801ac34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801ac36:	4b0a      	ldr	r3, [pc, #40]	@ (801ac60 <HAL_MPU_Enable+0x3c>)
 801ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ac3a:	4a09      	ldr	r2, [pc, #36]	@ (801ac60 <HAL_MPU_Enable+0x3c>)
 801ac3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ac40:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801ac42:	f3bf 8f4f 	dsb	sy
}
 801ac46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801ac48:	f3bf 8f6f 	isb	sy
}
 801ac4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801ac4e:	bf00      	nop
 801ac50:	370c      	adds	r7, #12
 801ac52:	46bd      	mov	sp, r7
 801ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac58:	4770      	bx	lr
 801ac5a:	bf00      	nop
 801ac5c:	e000ed90 	.word	0xe000ed90
 801ac60:	e000ed00 	.word	0xe000ed00

0801ac64 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801ac64:	b480      	push	{r7}
 801ac66:	b083      	sub	sp, #12
 801ac68:	af00      	add	r7, sp, #0
 801ac6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	785a      	ldrb	r2, [r3, #1]
 801ac70:	4b1b      	ldr	r3, [pc, #108]	@ (801ace0 <HAL_MPU_ConfigRegion+0x7c>)
 801ac72:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801ac74:	4b1a      	ldr	r3, [pc, #104]	@ (801ace0 <HAL_MPU_ConfigRegion+0x7c>)
 801ac76:	691b      	ldr	r3, [r3, #16]
 801ac78:	4a19      	ldr	r2, [pc, #100]	@ (801ace0 <HAL_MPU_ConfigRegion+0x7c>)
 801ac7a:	f023 0301 	bic.w	r3, r3, #1
 801ac7e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801ac80:	4a17      	ldr	r2, [pc, #92]	@ (801ace0 <HAL_MPU_ConfigRegion+0x7c>)
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	685b      	ldr	r3, [r3, #4]
 801ac86:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	7b1b      	ldrb	r3, [r3, #12]
 801ac8c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	7adb      	ldrb	r3, [r3, #11]
 801ac92:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801ac94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	7a9b      	ldrb	r3, [r3, #10]
 801ac9a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801ac9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	7b5b      	ldrb	r3, [r3, #13]
 801aca2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	7b9b      	ldrb	r3, [r3, #14]
 801acaa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801acac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	7bdb      	ldrb	r3, [r3, #15]
 801acb2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801acb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	7a5b      	ldrb	r3, [r3, #9]
 801acba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801acbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	7a1b      	ldrb	r3, [r3, #8]
 801acc2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801acc4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801acc6:	687a      	ldr	r2, [r7, #4]
 801acc8:	7812      	ldrb	r2, [r2, #0]
 801acca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801accc:	4a04      	ldr	r2, [pc, #16]	@ (801ace0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801acce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801acd0:	6113      	str	r3, [r2, #16]
}
 801acd2:	bf00      	nop
 801acd4:	370c      	adds	r7, #12
 801acd6:	46bd      	mov	sp, r7
 801acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acdc:	4770      	bx	lr
 801acde:	bf00      	nop
 801ace0:	e000ed90 	.word	0xe000ed90

0801ace4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801ace4:	b580      	push	{r7, lr}
 801ace6:	b086      	sub	sp, #24
 801ace8:	af00      	add	r7, sp, #0
 801acea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801acec:	f7ff fe22 	bl	801a934 <HAL_GetTick>
 801acf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d101      	bne.n	801acfc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801acf8:	2301      	movs	r3, #1
 801acfa:	e316      	b.n	801b32a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	4a66      	ldr	r2, [pc, #408]	@ (801ae9c <HAL_DMA_Init+0x1b8>)
 801ad02:	4293      	cmp	r3, r2
 801ad04:	d04a      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	4a65      	ldr	r2, [pc, #404]	@ (801aea0 <HAL_DMA_Init+0x1bc>)
 801ad0c:	4293      	cmp	r3, r2
 801ad0e:	d045      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	4a63      	ldr	r2, [pc, #396]	@ (801aea4 <HAL_DMA_Init+0x1c0>)
 801ad16:	4293      	cmp	r3, r2
 801ad18:	d040      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	4a62      	ldr	r2, [pc, #392]	@ (801aea8 <HAL_DMA_Init+0x1c4>)
 801ad20:	4293      	cmp	r3, r2
 801ad22:	d03b      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	681b      	ldr	r3, [r3, #0]
 801ad28:	4a60      	ldr	r2, [pc, #384]	@ (801aeac <HAL_DMA_Init+0x1c8>)
 801ad2a:	4293      	cmp	r3, r2
 801ad2c:	d036      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	681b      	ldr	r3, [r3, #0]
 801ad32:	4a5f      	ldr	r2, [pc, #380]	@ (801aeb0 <HAL_DMA_Init+0x1cc>)
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d031      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	4a5d      	ldr	r2, [pc, #372]	@ (801aeb4 <HAL_DMA_Init+0x1d0>)
 801ad3e:	4293      	cmp	r3, r2
 801ad40:	d02c      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	4a5c      	ldr	r2, [pc, #368]	@ (801aeb8 <HAL_DMA_Init+0x1d4>)
 801ad48:	4293      	cmp	r3, r2
 801ad4a:	d027      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	4a5a      	ldr	r2, [pc, #360]	@ (801aebc <HAL_DMA_Init+0x1d8>)
 801ad52:	4293      	cmp	r3, r2
 801ad54:	d022      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	4a59      	ldr	r2, [pc, #356]	@ (801aec0 <HAL_DMA_Init+0x1dc>)
 801ad5c:	4293      	cmp	r3, r2
 801ad5e:	d01d      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	4a57      	ldr	r2, [pc, #348]	@ (801aec4 <HAL_DMA_Init+0x1e0>)
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d018      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	4a56      	ldr	r2, [pc, #344]	@ (801aec8 <HAL_DMA_Init+0x1e4>)
 801ad70:	4293      	cmp	r3, r2
 801ad72:	d013      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	4a54      	ldr	r2, [pc, #336]	@ (801aecc <HAL_DMA_Init+0x1e8>)
 801ad7a:	4293      	cmp	r3, r2
 801ad7c:	d00e      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	4a53      	ldr	r2, [pc, #332]	@ (801aed0 <HAL_DMA_Init+0x1ec>)
 801ad84:	4293      	cmp	r3, r2
 801ad86:	d009      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	4a51      	ldr	r2, [pc, #324]	@ (801aed4 <HAL_DMA_Init+0x1f0>)
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	d004      	beq.n	801ad9c <HAL_DMA_Init+0xb8>
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	4a50      	ldr	r2, [pc, #320]	@ (801aed8 <HAL_DMA_Init+0x1f4>)
 801ad98:	4293      	cmp	r3, r2
 801ad9a:	d101      	bne.n	801ada0 <HAL_DMA_Init+0xbc>
 801ad9c:	2301      	movs	r3, #1
 801ad9e:	e000      	b.n	801ada2 <HAL_DMA_Init+0xbe>
 801ada0:	2300      	movs	r3, #0
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	f000 813b 	beq.w	801b01e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2202      	movs	r2, #2
 801adac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2200      	movs	r2, #0
 801adb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	4a37      	ldr	r2, [pc, #220]	@ (801ae9c <HAL_DMA_Init+0x1b8>)
 801adbe:	4293      	cmp	r3, r2
 801adc0:	d04a      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	4a36      	ldr	r2, [pc, #216]	@ (801aea0 <HAL_DMA_Init+0x1bc>)
 801adc8:	4293      	cmp	r3, r2
 801adca:	d045      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	4a34      	ldr	r2, [pc, #208]	@ (801aea4 <HAL_DMA_Init+0x1c0>)
 801add2:	4293      	cmp	r3, r2
 801add4:	d040      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	4a33      	ldr	r2, [pc, #204]	@ (801aea8 <HAL_DMA_Init+0x1c4>)
 801addc:	4293      	cmp	r3, r2
 801adde:	d03b      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	4a31      	ldr	r2, [pc, #196]	@ (801aeac <HAL_DMA_Init+0x1c8>)
 801ade6:	4293      	cmp	r3, r2
 801ade8:	d036      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	4a30      	ldr	r2, [pc, #192]	@ (801aeb0 <HAL_DMA_Init+0x1cc>)
 801adf0:	4293      	cmp	r3, r2
 801adf2:	d031      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	4a2e      	ldr	r2, [pc, #184]	@ (801aeb4 <HAL_DMA_Init+0x1d0>)
 801adfa:	4293      	cmp	r3, r2
 801adfc:	d02c      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a2d      	ldr	r2, [pc, #180]	@ (801aeb8 <HAL_DMA_Init+0x1d4>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d027      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4a2b      	ldr	r2, [pc, #172]	@ (801aebc <HAL_DMA_Init+0x1d8>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d022      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a2a      	ldr	r2, [pc, #168]	@ (801aec0 <HAL_DMA_Init+0x1dc>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d01d      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4a28      	ldr	r2, [pc, #160]	@ (801aec4 <HAL_DMA_Init+0x1e0>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d018      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a27      	ldr	r2, [pc, #156]	@ (801aec8 <HAL_DMA_Init+0x1e4>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d013      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	4a25      	ldr	r2, [pc, #148]	@ (801aecc <HAL_DMA_Init+0x1e8>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d00e      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	4a24      	ldr	r2, [pc, #144]	@ (801aed0 <HAL_DMA_Init+0x1ec>)
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d009      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	4a22      	ldr	r2, [pc, #136]	@ (801aed4 <HAL_DMA_Init+0x1f0>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d004      	beq.n	801ae58 <HAL_DMA_Init+0x174>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	4a21      	ldr	r2, [pc, #132]	@ (801aed8 <HAL_DMA_Init+0x1f4>)
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d108      	bne.n	801ae6a <HAL_DMA_Init+0x186>
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	681a      	ldr	r2, [r3, #0]
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	f022 0201 	bic.w	r2, r2, #1
 801ae66:	601a      	str	r2, [r3, #0]
 801ae68:	e007      	b.n	801ae7a <HAL_DMA_Init+0x196>
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	681a      	ldr	r2, [r3, #0]
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	f022 0201 	bic.w	r2, r2, #1
 801ae78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ae7a:	e02f      	b.n	801aedc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801ae7c:	f7ff fd5a 	bl	801a934 <HAL_GetTick>
 801ae80:	4602      	mov	r2, r0
 801ae82:	693b      	ldr	r3, [r7, #16]
 801ae84:	1ad3      	subs	r3, r2, r3
 801ae86:	2b05      	cmp	r3, #5
 801ae88:	d928      	bls.n	801aedc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	2220      	movs	r2, #32
 801ae8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	2203      	movs	r2, #3
 801ae94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801ae98:	2301      	movs	r3, #1
 801ae9a:	e246      	b.n	801b32a <HAL_DMA_Init+0x646>
 801ae9c:	40020010 	.word	0x40020010
 801aea0:	40020028 	.word	0x40020028
 801aea4:	40020040 	.word	0x40020040
 801aea8:	40020058 	.word	0x40020058
 801aeac:	40020070 	.word	0x40020070
 801aeb0:	40020088 	.word	0x40020088
 801aeb4:	400200a0 	.word	0x400200a0
 801aeb8:	400200b8 	.word	0x400200b8
 801aebc:	40020410 	.word	0x40020410
 801aec0:	40020428 	.word	0x40020428
 801aec4:	40020440 	.word	0x40020440
 801aec8:	40020458 	.word	0x40020458
 801aecc:	40020470 	.word	0x40020470
 801aed0:	40020488 	.word	0x40020488
 801aed4:	400204a0 	.word	0x400204a0
 801aed8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	f003 0301 	and.w	r3, r3, #1
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d1c8      	bne.n	801ae7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801aef2:	697a      	ldr	r2, [r7, #20]
 801aef4:	4b83      	ldr	r3, [pc, #524]	@ (801b104 <HAL_DMA_Init+0x420>)
 801aef6:	4013      	ands	r3, r2
 801aef8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801af02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	691b      	ldr	r3, [r3, #16]
 801af08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801af0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	699b      	ldr	r3, [r3, #24]
 801af14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801af1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801af1c:	687b      	ldr	r3, [r7, #4]
 801af1e:	6a1b      	ldr	r3, [r3, #32]
 801af20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801af22:	697a      	ldr	r2, [r7, #20]
 801af24:	4313      	orrs	r3, r2
 801af26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af2c:	2b04      	cmp	r3, #4
 801af2e:	d107      	bne.n	801af40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801af38:	4313      	orrs	r3, r2
 801af3a:	697a      	ldr	r2, [r7, #20]
 801af3c:	4313      	orrs	r3, r2
 801af3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801af40:	4b71      	ldr	r3, [pc, #452]	@ (801b108 <HAL_DMA_Init+0x424>)
 801af42:	681a      	ldr	r2, [r3, #0]
 801af44:	4b71      	ldr	r3, [pc, #452]	@ (801b10c <HAL_DMA_Init+0x428>)
 801af46:	4013      	ands	r3, r2
 801af48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801af4c:	d328      	bcc.n	801afa0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	685b      	ldr	r3, [r3, #4]
 801af52:	2b28      	cmp	r3, #40	@ 0x28
 801af54:	d903      	bls.n	801af5e <HAL_DMA_Init+0x27a>
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801af5c:	d917      	bls.n	801af8e <HAL_DMA_Init+0x2aa>
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	685b      	ldr	r3, [r3, #4]
 801af62:	2b3e      	cmp	r3, #62	@ 0x3e
 801af64:	d903      	bls.n	801af6e <HAL_DMA_Init+0x28a>
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	2b42      	cmp	r3, #66	@ 0x42
 801af6c:	d90f      	bls.n	801af8e <HAL_DMA_Init+0x2aa>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	2b46      	cmp	r3, #70	@ 0x46
 801af74:	d903      	bls.n	801af7e <HAL_DMA_Init+0x29a>
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	685b      	ldr	r3, [r3, #4]
 801af7a:	2b48      	cmp	r3, #72	@ 0x48
 801af7c:	d907      	bls.n	801af8e <HAL_DMA_Init+0x2aa>
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	2b4e      	cmp	r3, #78	@ 0x4e
 801af84:	d905      	bls.n	801af92 <HAL_DMA_Init+0x2ae>
 801af86:	687b      	ldr	r3, [r7, #4]
 801af88:	685b      	ldr	r3, [r3, #4]
 801af8a:	2b52      	cmp	r3, #82	@ 0x52
 801af8c:	d801      	bhi.n	801af92 <HAL_DMA_Init+0x2ae>
 801af8e:	2301      	movs	r3, #1
 801af90:	e000      	b.n	801af94 <HAL_DMA_Init+0x2b0>
 801af92:	2300      	movs	r3, #0
 801af94:	2b00      	cmp	r3, #0
 801af96:	d003      	beq.n	801afa0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801af9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	697a      	ldr	r2, [r7, #20]
 801afa6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	695b      	ldr	r3, [r3, #20]
 801afae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801afb0:	697b      	ldr	r3, [r7, #20]
 801afb2:	f023 0307 	bic.w	r3, r3, #7
 801afb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afbc:	697a      	ldr	r2, [r7, #20]
 801afbe:	4313      	orrs	r3, r2
 801afc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801afc6:	2b04      	cmp	r3, #4
 801afc8:	d117      	bne.n	801affa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afce:	697a      	ldr	r2, [r7, #20]
 801afd0:	4313      	orrs	r3, r2
 801afd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d00e      	beq.n	801affa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801afdc:	6878      	ldr	r0, [r7, #4]
 801afde:	f001 fbff 	bl	801c7e0 <DMA_CheckFifoParam>
 801afe2:	4603      	mov	r3, r0
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d008      	beq.n	801affa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	2240      	movs	r2, #64	@ 0x40
 801afec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	2201      	movs	r2, #1
 801aff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801aff6:	2301      	movs	r3, #1
 801aff8:	e197      	b.n	801b32a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	697a      	ldr	r2, [r7, #20]
 801b000:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801b002:	6878      	ldr	r0, [r7, #4]
 801b004:	f001 fb3a 	bl	801c67c <DMA_CalcBaseAndBitshift>
 801b008:	4603      	mov	r3, r0
 801b00a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b010:	f003 031f 	and.w	r3, r3, #31
 801b014:	223f      	movs	r2, #63	@ 0x3f
 801b016:	409a      	lsls	r2, r3
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	609a      	str	r2, [r3, #8]
 801b01c:	e0cd      	b.n	801b1ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4a3b      	ldr	r2, [pc, #236]	@ (801b110 <HAL_DMA_Init+0x42c>)
 801b024:	4293      	cmp	r3, r2
 801b026:	d022      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4a39      	ldr	r2, [pc, #228]	@ (801b114 <HAL_DMA_Init+0x430>)
 801b02e:	4293      	cmp	r3, r2
 801b030:	d01d      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	4a38      	ldr	r2, [pc, #224]	@ (801b118 <HAL_DMA_Init+0x434>)
 801b038:	4293      	cmp	r3, r2
 801b03a:	d018      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	4a36      	ldr	r2, [pc, #216]	@ (801b11c <HAL_DMA_Init+0x438>)
 801b042:	4293      	cmp	r3, r2
 801b044:	d013      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4a35      	ldr	r2, [pc, #212]	@ (801b120 <HAL_DMA_Init+0x43c>)
 801b04c:	4293      	cmp	r3, r2
 801b04e:	d00e      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	4a33      	ldr	r2, [pc, #204]	@ (801b124 <HAL_DMA_Init+0x440>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d009      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4a32      	ldr	r2, [pc, #200]	@ (801b128 <HAL_DMA_Init+0x444>)
 801b060:	4293      	cmp	r3, r2
 801b062:	d004      	beq.n	801b06e <HAL_DMA_Init+0x38a>
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4a30      	ldr	r2, [pc, #192]	@ (801b12c <HAL_DMA_Init+0x448>)
 801b06a:	4293      	cmp	r3, r2
 801b06c:	d101      	bne.n	801b072 <HAL_DMA_Init+0x38e>
 801b06e:	2301      	movs	r3, #1
 801b070:	e000      	b.n	801b074 <HAL_DMA_Init+0x390>
 801b072:	2300      	movs	r3, #0
 801b074:	2b00      	cmp	r3, #0
 801b076:	f000 8097 	beq.w	801b1a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	4a24      	ldr	r2, [pc, #144]	@ (801b110 <HAL_DMA_Init+0x42c>)
 801b080:	4293      	cmp	r3, r2
 801b082:	d021      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	4a22      	ldr	r2, [pc, #136]	@ (801b114 <HAL_DMA_Init+0x430>)
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d01c      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4a21      	ldr	r2, [pc, #132]	@ (801b118 <HAL_DMA_Init+0x434>)
 801b094:	4293      	cmp	r3, r2
 801b096:	d017      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	4a1f      	ldr	r2, [pc, #124]	@ (801b11c <HAL_DMA_Init+0x438>)
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d012      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	4a1e      	ldr	r2, [pc, #120]	@ (801b120 <HAL_DMA_Init+0x43c>)
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d00d      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4a1c      	ldr	r2, [pc, #112]	@ (801b124 <HAL_DMA_Init+0x440>)
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d008      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	4a1b      	ldr	r2, [pc, #108]	@ (801b128 <HAL_DMA_Init+0x444>)
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d003      	beq.n	801b0c8 <HAL_DMA_Init+0x3e4>
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	4a19      	ldr	r2, [pc, #100]	@ (801b12c <HAL_DMA_Init+0x448>)
 801b0c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	2202      	movs	r2, #2
 801b0cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	681b      	ldr	r3, [r3, #0]
 801b0de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801b0e0:	697a      	ldr	r2, [r7, #20]
 801b0e2:	4b13      	ldr	r3, [pc, #76]	@ (801b130 <HAL_DMA_Init+0x44c>)
 801b0e4:	4013      	ands	r3, r2
 801b0e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	689b      	ldr	r3, [r3, #8]
 801b0ec:	2b40      	cmp	r3, #64	@ 0x40
 801b0ee:	d021      	beq.n	801b134 <HAL_DMA_Init+0x450>
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	689b      	ldr	r3, [r3, #8]
 801b0f4:	2b80      	cmp	r3, #128	@ 0x80
 801b0f6:	d102      	bne.n	801b0fe <HAL_DMA_Init+0x41a>
 801b0f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801b0fc:	e01b      	b.n	801b136 <HAL_DMA_Init+0x452>
 801b0fe:	2300      	movs	r3, #0
 801b100:	e019      	b.n	801b136 <HAL_DMA_Init+0x452>
 801b102:	bf00      	nop
 801b104:	fe10803f 	.word	0xfe10803f
 801b108:	5c001000 	.word	0x5c001000
 801b10c:	ffff0000 	.word	0xffff0000
 801b110:	58025408 	.word	0x58025408
 801b114:	5802541c 	.word	0x5802541c
 801b118:	58025430 	.word	0x58025430
 801b11c:	58025444 	.word	0x58025444
 801b120:	58025458 	.word	0x58025458
 801b124:	5802546c 	.word	0x5802546c
 801b128:	58025480 	.word	0x58025480
 801b12c:	58025494 	.word	0x58025494
 801b130:	fffe000f 	.word	0xfffe000f
 801b134:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801b136:	687a      	ldr	r2, [r7, #4]
 801b138:	68d2      	ldr	r2, [r2, #12]
 801b13a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801b13c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	691b      	ldr	r3, [r3, #16]
 801b142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801b144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	695b      	ldr	r3, [r3, #20]
 801b14a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801b14c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	699b      	ldr	r3, [r3, #24]
 801b152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801b154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	69db      	ldr	r3, [r3, #28]
 801b15a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801b15c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	6a1b      	ldr	r3, [r3, #32]
 801b162:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801b164:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801b166:	697a      	ldr	r2, [r7, #20]
 801b168:	4313      	orrs	r3, r2
 801b16a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	697a      	ldr	r2, [r7, #20]
 801b172:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	461a      	mov	r2, r3
 801b17a:	4b6e      	ldr	r3, [pc, #440]	@ (801b334 <HAL_DMA_Init+0x650>)
 801b17c:	4413      	add	r3, r2
 801b17e:	4a6e      	ldr	r2, [pc, #440]	@ (801b338 <HAL_DMA_Init+0x654>)
 801b180:	fba2 2303 	umull	r2, r3, r2, r3
 801b184:	091b      	lsrs	r3, r3, #4
 801b186:	009a      	lsls	r2, r3, #2
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801b18c:	6878      	ldr	r0, [r7, #4]
 801b18e:	f001 fa75 	bl	801c67c <DMA_CalcBaseAndBitshift>
 801b192:	4603      	mov	r3, r0
 801b194:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b19a:	f003 031f 	and.w	r3, r3, #31
 801b19e:	2201      	movs	r2, #1
 801b1a0:	409a      	lsls	r2, r3
 801b1a2:	68fb      	ldr	r3, [r7, #12]
 801b1a4:	605a      	str	r2, [r3, #4]
 801b1a6:	e008      	b.n	801b1ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	2240      	movs	r2, #64	@ 0x40
 801b1ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	2203      	movs	r2, #3
 801b1b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	e0b7      	b.n	801b32a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	4a5f      	ldr	r2, [pc, #380]	@ (801b33c <HAL_DMA_Init+0x658>)
 801b1c0:	4293      	cmp	r3, r2
 801b1c2:	d072      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	4a5d      	ldr	r2, [pc, #372]	@ (801b340 <HAL_DMA_Init+0x65c>)
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	d06d      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	4a5c      	ldr	r2, [pc, #368]	@ (801b344 <HAL_DMA_Init+0x660>)
 801b1d4:	4293      	cmp	r3, r2
 801b1d6:	d068      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	4a5a      	ldr	r2, [pc, #360]	@ (801b348 <HAL_DMA_Init+0x664>)
 801b1de:	4293      	cmp	r3, r2
 801b1e0:	d063      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	4a59      	ldr	r2, [pc, #356]	@ (801b34c <HAL_DMA_Init+0x668>)
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	d05e      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	4a57      	ldr	r2, [pc, #348]	@ (801b350 <HAL_DMA_Init+0x66c>)
 801b1f2:	4293      	cmp	r3, r2
 801b1f4:	d059      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	4a56      	ldr	r2, [pc, #344]	@ (801b354 <HAL_DMA_Init+0x670>)
 801b1fc:	4293      	cmp	r3, r2
 801b1fe:	d054      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	4a54      	ldr	r2, [pc, #336]	@ (801b358 <HAL_DMA_Init+0x674>)
 801b206:	4293      	cmp	r3, r2
 801b208:	d04f      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	4a53      	ldr	r2, [pc, #332]	@ (801b35c <HAL_DMA_Init+0x678>)
 801b210:	4293      	cmp	r3, r2
 801b212:	d04a      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	4a51      	ldr	r2, [pc, #324]	@ (801b360 <HAL_DMA_Init+0x67c>)
 801b21a:	4293      	cmp	r3, r2
 801b21c:	d045      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	4a50      	ldr	r2, [pc, #320]	@ (801b364 <HAL_DMA_Init+0x680>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d040      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	4a4e      	ldr	r2, [pc, #312]	@ (801b368 <HAL_DMA_Init+0x684>)
 801b22e:	4293      	cmp	r3, r2
 801b230:	d03b      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	4a4d      	ldr	r2, [pc, #308]	@ (801b36c <HAL_DMA_Init+0x688>)
 801b238:	4293      	cmp	r3, r2
 801b23a:	d036      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	4a4b      	ldr	r2, [pc, #300]	@ (801b370 <HAL_DMA_Init+0x68c>)
 801b242:	4293      	cmp	r3, r2
 801b244:	d031      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	4a4a      	ldr	r2, [pc, #296]	@ (801b374 <HAL_DMA_Init+0x690>)
 801b24c:	4293      	cmp	r3, r2
 801b24e:	d02c      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	4a48      	ldr	r2, [pc, #288]	@ (801b378 <HAL_DMA_Init+0x694>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d027      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	4a47      	ldr	r2, [pc, #284]	@ (801b37c <HAL_DMA_Init+0x698>)
 801b260:	4293      	cmp	r3, r2
 801b262:	d022      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	4a45      	ldr	r2, [pc, #276]	@ (801b380 <HAL_DMA_Init+0x69c>)
 801b26a:	4293      	cmp	r3, r2
 801b26c:	d01d      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	4a44      	ldr	r2, [pc, #272]	@ (801b384 <HAL_DMA_Init+0x6a0>)
 801b274:	4293      	cmp	r3, r2
 801b276:	d018      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	4a42      	ldr	r2, [pc, #264]	@ (801b388 <HAL_DMA_Init+0x6a4>)
 801b27e:	4293      	cmp	r3, r2
 801b280:	d013      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	4a41      	ldr	r2, [pc, #260]	@ (801b38c <HAL_DMA_Init+0x6a8>)
 801b288:	4293      	cmp	r3, r2
 801b28a:	d00e      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	4a3f      	ldr	r2, [pc, #252]	@ (801b390 <HAL_DMA_Init+0x6ac>)
 801b292:	4293      	cmp	r3, r2
 801b294:	d009      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4a3e      	ldr	r2, [pc, #248]	@ (801b394 <HAL_DMA_Init+0x6b0>)
 801b29c:	4293      	cmp	r3, r2
 801b29e:	d004      	beq.n	801b2aa <HAL_DMA_Init+0x5c6>
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	4a3c      	ldr	r2, [pc, #240]	@ (801b398 <HAL_DMA_Init+0x6b4>)
 801b2a6:	4293      	cmp	r3, r2
 801b2a8:	d101      	bne.n	801b2ae <HAL_DMA_Init+0x5ca>
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	e000      	b.n	801b2b0 <HAL_DMA_Init+0x5cc>
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d032      	beq.n	801b31a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b2b4:	6878      	ldr	r0, [r7, #4]
 801b2b6:	f001 fb0f 	bl	801c8d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	689b      	ldr	r3, [r3, #8]
 801b2be:	2b80      	cmp	r3, #128	@ 0x80
 801b2c0:	d102      	bne.n	801b2c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	685a      	ldr	r2, [r3, #4]
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b2d0:	b2d2      	uxtb	r2, r2
 801b2d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b2d8:	687a      	ldr	r2, [r7, #4]
 801b2da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b2dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	685b      	ldr	r3, [r3, #4]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d010      	beq.n	801b308 <HAL_DMA_Init+0x624>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	685b      	ldr	r3, [r3, #4]
 801b2ea:	2b08      	cmp	r3, #8
 801b2ec:	d80c      	bhi.n	801b308 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b2ee:	6878      	ldr	r0, [r7, #4]
 801b2f0:	f001 fb8c 	bl	801ca0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b2f8:	2200      	movs	r2, #0
 801b2fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b300:	687a      	ldr	r2, [r7, #4]
 801b302:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b304:	605a      	str	r2, [r3, #4]
 801b306:	e008      	b.n	801b31a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	2200      	movs	r2, #0
 801b30c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	2200      	movs	r2, #0
 801b312:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2200      	movs	r2, #0
 801b318:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	2200      	movs	r2, #0
 801b31e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	2201      	movs	r2, #1
 801b324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801b328:	2300      	movs	r3, #0
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3718      	adds	r7, #24
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	a7fdabf8 	.word	0xa7fdabf8
 801b338:	cccccccd 	.word	0xcccccccd
 801b33c:	40020010 	.word	0x40020010
 801b340:	40020028 	.word	0x40020028
 801b344:	40020040 	.word	0x40020040
 801b348:	40020058 	.word	0x40020058
 801b34c:	40020070 	.word	0x40020070
 801b350:	40020088 	.word	0x40020088
 801b354:	400200a0 	.word	0x400200a0
 801b358:	400200b8 	.word	0x400200b8
 801b35c:	40020410 	.word	0x40020410
 801b360:	40020428 	.word	0x40020428
 801b364:	40020440 	.word	0x40020440
 801b368:	40020458 	.word	0x40020458
 801b36c:	40020470 	.word	0x40020470
 801b370:	40020488 	.word	0x40020488
 801b374:	400204a0 	.word	0x400204a0
 801b378:	400204b8 	.word	0x400204b8
 801b37c:	58025408 	.word	0x58025408
 801b380:	5802541c 	.word	0x5802541c
 801b384:	58025430 	.word	0x58025430
 801b388:	58025444 	.word	0x58025444
 801b38c:	58025458 	.word	0x58025458
 801b390:	5802546c 	.word	0x5802546c
 801b394:	58025480 	.word	0x58025480
 801b398:	58025494 	.word	0x58025494

0801b39c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b39c:	b580      	push	{r7, lr}
 801b39e:	b084      	sub	sp, #16
 801b3a0:	af00      	add	r7, sp, #0
 801b3a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d101      	bne.n	801b3ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801b3aa:	2301      	movs	r3, #1
 801b3ac:	e237      	b.n	801b81e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b3b4:	b2db      	uxtb	r3, r3
 801b3b6:	2b02      	cmp	r3, #2
 801b3b8:	d004      	beq.n	801b3c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	2280      	movs	r2, #128	@ 0x80
 801b3be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b3c0:	2301      	movs	r3, #1
 801b3c2:	e22c      	b.n	801b81e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	4a5c      	ldr	r2, [pc, #368]	@ (801b53c <HAL_DMA_Abort_IT+0x1a0>)
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	d04a      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	4a5b      	ldr	r2, [pc, #364]	@ (801b540 <HAL_DMA_Abort_IT+0x1a4>)
 801b3d4:	4293      	cmp	r3, r2
 801b3d6:	d045      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	4a59      	ldr	r2, [pc, #356]	@ (801b544 <HAL_DMA_Abort_IT+0x1a8>)
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	d040      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	4a58      	ldr	r2, [pc, #352]	@ (801b548 <HAL_DMA_Abort_IT+0x1ac>)
 801b3e8:	4293      	cmp	r3, r2
 801b3ea:	d03b      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	4a56      	ldr	r2, [pc, #344]	@ (801b54c <HAL_DMA_Abort_IT+0x1b0>)
 801b3f2:	4293      	cmp	r3, r2
 801b3f4:	d036      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	4a55      	ldr	r2, [pc, #340]	@ (801b550 <HAL_DMA_Abort_IT+0x1b4>)
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	d031      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	4a53      	ldr	r2, [pc, #332]	@ (801b554 <HAL_DMA_Abort_IT+0x1b8>)
 801b406:	4293      	cmp	r3, r2
 801b408:	d02c      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	4a52      	ldr	r2, [pc, #328]	@ (801b558 <HAL_DMA_Abort_IT+0x1bc>)
 801b410:	4293      	cmp	r3, r2
 801b412:	d027      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	4a50      	ldr	r2, [pc, #320]	@ (801b55c <HAL_DMA_Abort_IT+0x1c0>)
 801b41a:	4293      	cmp	r3, r2
 801b41c:	d022      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	4a4f      	ldr	r2, [pc, #316]	@ (801b560 <HAL_DMA_Abort_IT+0x1c4>)
 801b424:	4293      	cmp	r3, r2
 801b426:	d01d      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	4a4d      	ldr	r2, [pc, #308]	@ (801b564 <HAL_DMA_Abort_IT+0x1c8>)
 801b42e:	4293      	cmp	r3, r2
 801b430:	d018      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	4a4c      	ldr	r2, [pc, #304]	@ (801b568 <HAL_DMA_Abort_IT+0x1cc>)
 801b438:	4293      	cmp	r3, r2
 801b43a:	d013      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	4a4a      	ldr	r2, [pc, #296]	@ (801b56c <HAL_DMA_Abort_IT+0x1d0>)
 801b442:	4293      	cmp	r3, r2
 801b444:	d00e      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	4a49      	ldr	r2, [pc, #292]	@ (801b570 <HAL_DMA_Abort_IT+0x1d4>)
 801b44c:	4293      	cmp	r3, r2
 801b44e:	d009      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	4a47      	ldr	r2, [pc, #284]	@ (801b574 <HAL_DMA_Abort_IT+0x1d8>)
 801b456:	4293      	cmp	r3, r2
 801b458:	d004      	beq.n	801b464 <HAL_DMA_Abort_IT+0xc8>
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	4a46      	ldr	r2, [pc, #280]	@ (801b578 <HAL_DMA_Abort_IT+0x1dc>)
 801b460:	4293      	cmp	r3, r2
 801b462:	d101      	bne.n	801b468 <HAL_DMA_Abort_IT+0xcc>
 801b464:	2301      	movs	r3, #1
 801b466:	e000      	b.n	801b46a <HAL_DMA_Abort_IT+0xce>
 801b468:	2300      	movs	r3, #0
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	f000 8086 	beq.w	801b57c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	2204      	movs	r2, #4
 801b474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	4a2f      	ldr	r2, [pc, #188]	@ (801b53c <HAL_DMA_Abort_IT+0x1a0>)
 801b47e:	4293      	cmp	r3, r2
 801b480:	d04a      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	4a2e      	ldr	r2, [pc, #184]	@ (801b540 <HAL_DMA_Abort_IT+0x1a4>)
 801b488:	4293      	cmp	r3, r2
 801b48a:	d045      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	4a2c      	ldr	r2, [pc, #176]	@ (801b544 <HAL_DMA_Abort_IT+0x1a8>)
 801b492:	4293      	cmp	r3, r2
 801b494:	d040      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	4a2b      	ldr	r2, [pc, #172]	@ (801b548 <HAL_DMA_Abort_IT+0x1ac>)
 801b49c:	4293      	cmp	r3, r2
 801b49e:	d03b      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	4a29      	ldr	r2, [pc, #164]	@ (801b54c <HAL_DMA_Abort_IT+0x1b0>)
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	d036      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	4a28      	ldr	r2, [pc, #160]	@ (801b550 <HAL_DMA_Abort_IT+0x1b4>)
 801b4b0:	4293      	cmp	r3, r2
 801b4b2:	d031      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	4a26      	ldr	r2, [pc, #152]	@ (801b554 <HAL_DMA_Abort_IT+0x1b8>)
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	d02c      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	4a25      	ldr	r2, [pc, #148]	@ (801b558 <HAL_DMA_Abort_IT+0x1bc>)
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d027      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	4a23      	ldr	r2, [pc, #140]	@ (801b55c <HAL_DMA_Abort_IT+0x1c0>)
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d022      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4a22      	ldr	r2, [pc, #136]	@ (801b560 <HAL_DMA_Abort_IT+0x1c4>)
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	d01d      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a20      	ldr	r2, [pc, #128]	@ (801b564 <HAL_DMA_Abort_IT+0x1c8>)
 801b4e2:	4293      	cmp	r3, r2
 801b4e4:	d018      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a1f      	ldr	r2, [pc, #124]	@ (801b568 <HAL_DMA_Abort_IT+0x1cc>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d013      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	4a1d      	ldr	r2, [pc, #116]	@ (801b56c <HAL_DMA_Abort_IT+0x1d0>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d00e      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	4a1c      	ldr	r2, [pc, #112]	@ (801b570 <HAL_DMA_Abort_IT+0x1d4>)
 801b500:	4293      	cmp	r3, r2
 801b502:	d009      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	4a1a      	ldr	r2, [pc, #104]	@ (801b574 <HAL_DMA_Abort_IT+0x1d8>)
 801b50a:	4293      	cmp	r3, r2
 801b50c:	d004      	beq.n	801b518 <HAL_DMA_Abort_IT+0x17c>
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	4a19      	ldr	r2, [pc, #100]	@ (801b578 <HAL_DMA_Abort_IT+0x1dc>)
 801b514:	4293      	cmp	r3, r2
 801b516:	d108      	bne.n	801b52a <HAL_DMA_Abort_IT+0x18e>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	681a      	ldr	r2, [r3, #0]
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	f022 0201 	bic.w	r2, r2, #1
 801b526:	601a      	str	r2, [r3, #0]
 801b528:	e178      	b.n	801b81c <HAL_DMA_Abort_IT+0x480>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	681a      	ldr	r2, [r3, #0]
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f022 0201 	bic.w	r2, r2, #1
 801b538:	601a      	str	r2, [r3, #0]
 801b53a:	e16f      	b.n	801b81c <HAL_DMA_Abort_IT+0x480>
 801b53c:	40020010 	.word	0x40020010
 801b540:	40020028 	.word	0x40020028
 801b544:	40020040 	.word	0x40020040
 801b548:	40020058 	.word	0x40020058
 801b54c:	40020070 	.word	0x40020070
 801b550:	40020088 	.word	0x40020088
 801b554:	400200a0 	.word	0x400200a0
 801b558:	400200b8 	.word	0x400200b8
 801b55c:	40020410 	.word	0x40020410
 801b560:	40020428 	.word	0x40020428
 801b564:	40020440 	.word	0x40020440
 801b568:	40020458 	.word	0x40020458
 801b56c:	40020470 	.word	0x40020470
 801b570:	40020488 	.word	0x40020488
 801b574:	400204a0 	.word	0x400204a0
 801b578:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	681a      	ldr	r2, [r3, #0]
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	f022 020e 	bic.w	r2, r2, #14
 801b58a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	4a6c      	ldr	r2, [pc, #432]	@ (801b744 <HAL_DMA_Abort_IT+0x3a8>)
 801b592:	4293      	cmp	r3, r2
 801b594:	d04a      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	4a6b      	ldr	r2, [pc, #428]	@ (801b748 <HAL_DMA_Abort_IT+0x3ac>)
 801b59c:	4293      	cmp	r3, r2
 801b59e:	d045      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	681b      	ldr	r3, [r3, #0]
 801b5a4:	4a69      	ldr	r2, [pc, #420]	@ (801b74c <HAL_DMA_Abort_IT+0x3b0>)
 801b5a6:	4293      	cmp	r3, r2
 801b5a8:	d040      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	4a68      	ldr	r2, [pc, #416]	@ (801b750 <HAL_DMA_Abort_IT+0x3b4>)
 801b5b0:	4293      	cmp	r3, r2
 801b5b2:	d03b      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	4a66      	ldr	r2, [pc, #408]	@ (801b754 <HAL_DMA_Abort_IT+0x3b8>)
 801b5ba:	4293      	cmp	r3, r2
 801b5bc:	d036      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	4a65      	ldr	r2, [pc, #404]	@ (801b758 <HAL_DMA_Abort_IT+0x3bc>)
 801b5c4:	4293      	cmp	r3, r2
 801b5c6:	d031      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	4a63      	ldr	r2, [pc, #396]	@ (801b75c <HAL_DMA_Abort_IT+0x3c0>)
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	d02c      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4a62      	ldr	r2, [pc, #392]	@ (801b760 <HAL_DMA_Abort_IT+0x3c4>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d027      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	4a60      	ldr	r2, [pc, #384]	@ (801b764 <HAL_DMA_Abort_IT+0x3c8>)
 801b5e2:	4293      	cmp	r3, r2
 801b5e4:	d022      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	4a5f      	ldr	r2, [pc, #380]	@ (801b768 <HAL_DMA_Abort_IT+0x3cc>)
 801b5ec:	4293      	cmp	r3, r2
 801b5ee:	d01d      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	4a5d      	ldr	r2, [pc, #372]	@ (801b76c <HAL_DMA_Abort_IT+0x3d0>)
 801b5f6:	4293      	cmp	r3, r2
 801b5f8:	d018      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	4a5c      	ldr	r2, [pc, #368]	@ (801b770 <HAL_DMA_Abort_IT+0x3d4>)
 801b600:	4293      	cmp	r3, r2
 801b602:	d013      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	4a5a      	ldr	r2, [pc, #360]	@ (801b774 <HAL_DMA_Abort_IT+0x3d8>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d00e      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	4a59      	ldr	r2, [pc, #356]	@ (801b778 <HAL_DMA_Abort_IT+0x3dc>)
 801b614:	4293      	cmp	r3, r2
 801b616:	d009      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	681b      	ldr	r3, [r3, #0]
 801b61c:	4a57      	ldr	r2, [pc, #348]	@ (801b77c <HAL_DMA_Abort_IT+0x3e0>)
 801b61e:	4293      	cmp	r3, r2
 801b620:	d004      	beq.n	801b62c <HAL_DMA_Abort_IT+0x290>
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	4a56      	ldr	r2, [pc, #344]	@ (801b780 <HAL_DMA_Abort_IT+0x3e4>)
 801b628:	4293      	cmp	r3, r2
 801b62a:	d108      	bne.n	801b63e <HAL_DMA_Abort_IT+0x2a2>
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	681a      	ldr	r2, [r3, #0]
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	f022 0201 	bic.w	r2, r2, #1
 801b63a:	601a      	str	r2, [r3, #0]
 801b63c:	e007      	b.n	801b64e <HAL_DMA_Abort_IT+0x2b2>
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	681a      	ldr	r2, [r3, #0]
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	f022 0201 	bic.w	r2, r2, #1
 801b64c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	4a3c      	ldr	r2, [pc, #240]	@ (801b744 <HAL_DMA_Abort_IT+0x3a8>)
 801b654:	4293      	cmp	r3, r2
 801b656:	d072      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	681b      	ldr	r3, [r3, #0]
 801b65c:	4a3a      	ldr	r2, [pc, #232]	@ (801b748 <HAL_DMA_Abort_IT+0x3ac>)
 801b65e:	4293      	cmp	r3, r2
 801b660:	d06d      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	681b      	ldr	r3, [r3, #0]
 801b666:	4a39      	ldr	r2, [pc, #228]	@ (801b74c <HAL_DMA_Abort_IT+0x3b0>)
 801b668:	4293      	cmp	r3, r2
 801b66a:	d068      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	4a37      	ldr	r2, [pc, #220]	@ (801b750 <HAL_DMA_Abort_IT+0x3b4>)
 801b672:	4293      	cmp	r3, r2
 801b674:	d063      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	681b      	ldr	r3, [r3, #0]
 801b67a:	4a36      	ldr	r2, [pc, #216]	@ (801b754 <HAL_DMA_Abort_IT+0x3b8>)
 801b67c:	4293      	cmp	r3, r2
 801b67e:	d05e      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	4a34      	ldr	r2, [pc, #208]	@ (801b758 <HAL_DMA_Abort_IT+0x3bc>)
 801b686:	4293      	cmp	r3, r2
 801b688:	d059      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	4a33      	ldr	r2, [pc, #204]	@ (801b75c <HAL_DMA_Abort_IT+0x3c0>)
 801b690:	4293      	cmp	r3, r2
 801b692:	d054      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	4a31      	ldr	r2, [pc, #196]	@ (801b760 <HAL_DMA_Abort_IT+0x3c4>)
 801b69a:	4293      	cmp	r3, r2
 801b69c:	d04f      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	4a30      	ldr	r2, [pc, #192]	@ (801b764 <HAL_DMA_Abort_IT+0x3c8>)
 801b6a4:	4293      	cmp	r3, r2
 801b6a6:	d04a      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	4a2e      	ldr	r2, [pc, #184]	@ (801b768 <HAL_DMA_Abort_IT+0x3cc>)
 801b6ae:	4293      	cmp	r3, r2
 801b6b0:	d045      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	4a2d      	ldr	r2, [pc, #180]	@ (801b76c <HAL_DMA_Abort_IT+0x3d0>)
 801b6b8:	4293      	cmp	r3, r2
 801b6ba:	d040      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	4a2b      	ldr	r2, [pc, #172]	@ (801b770 <HAL_DMA_Abort_IT+0x3d4>)
 801b6c2:	4293      	cmp	r3, r2
 801b6c4:	d03b      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	4a2a      	ldr	r2, [pc, #168]	@ (801b774 <HAL_DMA_Abort_IT+0x3d8>)
 801b6cc:	4293      	cmp	r3, r2
 801b6ce:	d036      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	681b      	ldr	r3, [r3, #0]
 801b6d4:	4a28      	ldr	r2, [pc, #160]	@ (801b778 <HAL_DMA_Abort_IT+0x3dc>)
 801b6d6:	4293      	cmp	r3, r2
 801b6d8:	d031      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	4a27      	ldr	r2, [pc, #156]	@ (801b77c <HAL_DMA_Abort_IT+0x3e0>)
 801b6e0:	4293      	cmp	r3, r2
 801b6e2:	d02c      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	4a25      	ldr	r2, [pc, #148]	@ (801b780 <HAL_DMA_Abort_IT+0x3e4>)
 801b6ea:	4293      	cmp	r3, r2
 801b6ec:	d027      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	4a24      	ldr	r2, [pc, #144]	@ (801b784 <HAL_DMA_Abort_IT+0x3e8>)
 801b6f4:	4293      	cmp	r3, r2
 801b6f6:	d022      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	4a22      	ldr	r2, [pc, #136]	@ (801b788 <HAL_DMA_Abort_IT+0x3ec>)
 801b6fe:	4293      	cmp	r3, r2
 801b700:	d01d      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	4a21      	ldr	r2, [pc, #132]	@ (801b78c <HAL_DMA_Abort_IT+0x3f0>)
 801b708:	4293      	cmp	r3, r2
 801b70a:	d018      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	4a1f      	ldr	r2, [pc, #124]	@ (801b790 <HAL_DMA_Abort_IT+0x3f4>)
 801b712:	4293      	cmp	r3, r2
 801b714:	d013      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	4a1e      	ldr	r2, [pc, #120]	@ (801b794 <HAL_DMA_Abort_IT+0x3f8>)
 801b71c:	4293      	cmp	r3, r2
 801b71e:	d00e      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	4a1c      	ldr	r2, [pc, #112]	@ (801b798 <HAL_DMA_Abort_IT+0x3fc>)
 801b726:	4293      	cmp	r3, r2
 801b728:	d009      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	4a1b      	ldr	r2, [pc, #108]	@ (801b79c <HAL_DMA_Abort_IT+0x400>)
 801b730:	4293      	cmp	r3, r2
 801b732:	d004      	beq.n	801b73e <HAL_DMA_Abort_IT+0x3a2>
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	4a19      	ldr	r2, [pc, #100]	@ (801b7a0 <HAL_DMA_Abort_IT+0x404>)
 801b73a:	4293      	cmp	r3, r2
 801b73c:	d132      	bne.n	801b7a4 <HAL_DMA_Abort_IT+0x408>
 801b73e:	2301      	movs	r3, #1
 801b740:	e031      	b.n	801b7a6 <HAL_DMA_Abort_IT+0x40a>
 801b742:	bf00      	nop
 801b744:	40020010 	.word	0x40020010
 801b748:	40020028 	.word	0x40020028
 801b74c:	40020040 	.word	0x40020040
 801b750:	40020058 	.word	0x40020058
 801b754:	40020070 	.word	0x40020070
 801b758:	40020088 	.word	0x40020088
 801b75c:	400200a0 	.word	0x400200a0
 801b760:	400200b8 	.word	0x400200b8
 801b764:	40020410 	.word	0x40020410
 801b768:	40020428 	.word	0x40020428
 801b76c:	40020440 	.word	0x40020440
 801b770:	40020458 	.word	0x40020458
 801b774:	40020470 	.word	0x40020470
 801b778:	40020488 	.word	0x40020488
 801b77c:	400204a0 	.word	0x400204a0
 801b780:	400204b8 	.word	0x400204b8
 801b784:	58025408 	.word	0x58025408
 801b788:	5802541c 	.word	0x5802541c
 801b78c:	58025430 	.word	0x58025430
 801b790:	58025444 	.word	0x58025444
 801b794:	58025458 	.word	0x58025458
 801b798:	5802546c 	.word	0x5802546c
 801b79c:	58025480 	.word	0x58025480
 801b7a0:	58025494 	.word	0x58025494
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d028      	beq.n	801b7fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b7b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b7b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b7be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b7c4:	f003 031f 	and.w	r3, r3, #31
 801b7c8:	2201      	movs	r2, #1
 801b7ca:	409a      	lsls	r2, r3
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b7d4:	687a      	ldr	r2, [r7, #4]
 801b7d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b7d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d00c      	beq.n	801b7fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7e6:	681a      	ldr	r2, [r3, #0]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b7ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b7f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b7f6:	687a      	ldr	r2, [r7, #4]
 801b7f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b7fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2201      	movs	r2, #1
 801b800:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	2200      	movs	r2, #0
 801b808:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b810:	2b00      	cmp	r3, #0
 801b812:	d003      	beq.n	801b81c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b814:	687b      	ldr	r3, [r7, #4]
 801b816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b818:	6878      	ldr	r0, [r7, #4]
 801b81a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b81c:	2300      	movs	r3, #0
}
 801b81e:	4618      	mov	r0, r3
 801b820:	3710      	adds	r7, #16
 801b822:	46bd      	mov	sp, r7
 801b824:	bd80      	pop	{r7, pc}
 801b826:	bf00      	nop

0801b828 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b828:	b580      	push	{r7, lr}
 801b82a:	b08a      	sub	sp, #40	@ 0x28
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b830:	2300      	movs	r3, #0
 801b832:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b834:	4b67      	ldr	r3, [pc, #412]	@ (801b9d4 <HAL_DMA_IRQHandler+0x1ac>)
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	4a67      	ldr	r2, [pc, #412]	@ (801b9d8 <HAL_DMA_IRQHandler+0x1b0>)
 801b83a:	fba2 2303 	umull	r2, r3, r2, r3
 801b83e:	0a9b      	lsrs	r3, r3, #10
 801b840:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b846:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b84c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b84e:	6a3b      	ldr	r3, [r7, #32]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b854:	69fb      	ldr	r3, [r7, #28]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	4a5f      	ldr	r2, [pc, #380]	@ (801b9dc <HAL_DMA_IRQHandler+0x1b4>)
 801b860:	4293      	cmp	r3, r2
 801b862:	d04a      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	4a5d      	ldr	r2, [pc, #372]	@ (801b9e0 <HAL_DMA_IRQHandler+0x1b8>)
 801b86a:	4293      	cmp	r3, r2
 801b86c:	d045      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	4a5c      	ldr	r2, [pc, #368]	@ (801b9e4 <HAL_DMA_IRQHandler+0x1bc>)
 801b874:	4293      	cmp	r3, r2
 801b876:	d040      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	4a5a      	ldr	r2, [pc, #360]	@ (801b9e8 <HAL_DMA_IRQHandler+0x1c0>)
 801b87e:	4293      	cmp	r3, r2
 801b880:	d03b      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	681b      	ldr	r3, [r3, #0]
 801b886:	4a59      	ldr	r2, [pc, #356]	@ (801b9ec <HAL_DMA_IRQHandler+0x1c4>)
 801b888:	4293      	cmp	r3, r2
 801b88a:	d036      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	681b      	ldr	r3, [r3, #0]
 801b890:	4a57      	ldr	r2, [pc, #348]	@ (801b9f0 <HAL_DMA_IRQHandler+0x1c8>)
 801b892:	4293      	cmp	r3, r2
 801b894:	d031      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	4a56      	ldr	r2, [pc, #344]	@ (801b9f4 <HAL_DMA_IRQHandler+0x1cc>)
 801b89c:	4293      	cmp	r3, r2
 801b89e:	d02c      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	4a54      	ldr	r2, [pc, #336]	@ (801b9f8 <HAL_DMA_IRQHandler+0x1d0>)
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d027      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	681b      	ldr	r3, [r3, #0]
 801b8ae:	4a53      	ldr	r2, [pc, #332]	@ (801b9fc <HAL_DMA_IRQHandler+0x1d4>)
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d022      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	4a51      	ldr	r2, [pc, #324]	@ (801ba00 <HAL_DMA_IRQHandler+0x1d8>)
 801b8ba:	4293      	cmp	r3, r2
 801b8bc:	d01d      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	4a50      	ldr	r2, [pc, #320]	@ (801ba04 <HAL_DMA_IRQHandler+0x1dc>)
 801b8c4:	4293      	cmp	r3, r2
 801b8c6:	d018      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	4a4e      	ldr	r2, [pc, #312]	@ (801ba08 <HAL_DMA_IRQHandler+0x1e0>)
 801b8ce:	4293      	cmp	r3, r2
 801b8d0:	d013      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4a4d      	ldr	r2, [pc, #308]	@ (801ba0c <HAL_DMA_IRQHandler+0x1e4>)
 801b8d8:	4293      	cmp	r3, r2
 801b8da:	d00e      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	4a4b      	ldr	r2, [pc, #300]	@ (801ba10 <HAL_DMA_IRQHandler+0x1e8>)
 801b8e2:	4293      	cmp	r3, r2
 801b8e4:	d009      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	681b      	ldr	r3, [r3, #0]
 801b8ea:	4a4a      	ldr	r2, [pc, #296]	@ (801ba14 <HAL_DMA_IRQHandler+0x1ec>)
 801b8ec:	4293      	cmp	r3, r2
 801b8ee:	d004      	beq.n	801b8fa <HAL_DMA_IRQHandler+0xd2>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	4a48      	ldr	r2, [pc, #288]	@ (801ba18 <HAL_DMA_IRQHandler+0x1f0>)
 801b8f6:	4293      	cmp	r3, r2
 801b8f8:	d101      	bne.n	801b8fe <HAL_DMA_IRQHandler+0xd6>
 801b8fa:	2301      	movs	r3, #1
 801b8fc:	e000      	b.n	801b900 <HAL_DMA_IRQHandler+0xd8>
 801b8fe:	2300      	movs	r3, #0
 801b900:	2b00      	cmp	r3, #0
 801b902:	f000 842b 	beq.w	801c15c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b90a:	f003 031f 	and.w	r3, r3, #31
 801b90e:	2208      	movs	r2, #8
 801b910:	409a      	lsls	r2, r3
 801b912:	69bb      	ldr	r3, [r7, #24]
 801b914:	4013      	ands	r3, r2
 801b916:	2b00      	cmp	r3, #0
 801b918:	f000 80a2 	beq.w	801ba60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	4a2e      	ldr	r2, [pc, #184]	@ (801b9dc <HAL_DMA_IRQHandler+0x1b4>)
 801b922:	4293      	cmp	r3, r2
 801b924:	d04a      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	4a2d      	ldr	r2, [pc, #180]	@ (801b9e0 <HAL_DMA_IRQHandler+0x1b8>)
 801b92c:	4293      	cmp	r3, r2
 801b92e:	d045      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b930:	687b      	ldr	r3, [r7, #4]
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	4a2b      	ldr	r2, [pc, #172]	@ (801b9e4 <HAL_DMA_IRQHandler+0x1bc>)
 801b936:	4293      	cmp	r3, r2
 801b938:	d040      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	4a2a      	ldr	r2, [pc, #168]	@ (801b9e8 <HAL_DMA_IRQHandler+0x1c0>)
 801b940:	4293      	cmp	r3, r2
 801b942:	d03b      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	4a28      	ldr	r2, [pc, #160]	@ (801b9ec <HAL_DMA_IRQHandler+0x1c4>)
 801b94a:	4293      	cmp	r3, r2
 801b94c:	d036      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	4a27      	ldr	r2, [pc, #156]	@ (801b9f0 <HAL_DMA_IRQHandler+0x1c8>)
 801b954:	4293      	cmp	r3, r2
 801b956:	d031      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	4a25      	ldr	r2, [pc, #148]	@ (801b9f4 <HAL_DMA_IRQHandler+0x1cc>)
 801b95e:	4293      	cmp	r3, r2
 801b960:	d02c      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4a24      	ldr	r2, [pc, #144]	@ (801b9f8 <HAL_DMA_IRQHandler+0x1d0>)
 801b968:	4293      	cmp	r3, r2
 801b96a:	d027      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	4a22      	ldr	r2, [pc, #136]	@ (801b9fc <HAL_DMA_IRQHandler+0x1d4>)
 801b972:	4293      	cmp	r3, r2
 801b974:	d022      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	4a21      	ldr	r2, [pc, #132]	@ (801ba00 <HAL_DMA_IRQHandler+0x1d8>)
 801b97c:	4293      	cmp	r3, r2
 801b97e:	d01d      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b980:	687b      	ldr	r3, [r7, #4]
 801b982:	681b      	ldr	r3, [r3, #0]
 801b984:	4a1f      	ldr	r2, [pc, #124]	@ (801ba04 <HAL_DMA_IRQHandler+0x1dc>)
 801b986:	4293      	cmp	r3, r2
 801b988:	d018      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	681b      	ldr	r3, [r3, #0]
 801b98e:	4a1e      	ldr	r2, [pc, #120]	@ (801ba08 <HAL_DMA_IRQHandler+0x1e0>)
 801b990:	4293      	cmp	r3, r2
 801b992:	d013      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b994:	687b      	ldr	r3, [r7, #4]
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	4a1c      	ldr	r2, [pc, #112]	@ (801ba0c <HAL_DMA_IRQHandler+0x1e4>)
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d00e      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	4a1b      	ldr	r2, [pc, #108]	@ (801ba10 <HAL_DMA_IRQHandler+0x1e8>)
 801b9a4:	4293      	cmp	r3, r2
 801b9a6:	d009      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	4a19      	ldr	r2, [pc, #100]	@ (801ba14 <HAL_DMA_IRQHandler+0x1ec>)
 801b9ae:	4293      	cmp	r3, r2
 801b9b0:	d004      	beq.n	801b9bc <HAL_DMA_IRQHandler+0x194>
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	4a18      	ldr	r2, [pc, #96]	@ (801ba18 <HAL_DMA_IRQHandler+0x1f0>)
 801b9b8:	4293      	cmp	r3, r2
 801b9ba:	d12f      	bne.n	801ba1c <HAL_DMA_IRQHandler+0x1f4>
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	681b      	ldr	r3, [r3, #0]
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	f003 0304 	and.w	r3, r3, #4
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	bf14      	ite	ne
 801b9ca:	2301      	movne	r3, #1
 801b9cc:	2300      	moveq	r3, #0
 801b9ce:	b2db      	uxtb	r3, r3
 801b9d0:	e02e      	b.n	801ba30 <HAL_DMA_IRQHandler+0x208>
 801b9d2:	bf00      	nop
 801b9d4:	20000000 	.word	0x20000000
 801b9d8:	1b4e81b5 	.word	0x1b4e81b5
 801b9dc:	40020010 	.word	0x40020010
 801b9e0:	40020028 	.word	0x40020028
 801b9e4:	40020040 	.word	0x40020040
 801b9e8:	40020058 	.word	0x40020058
 801b9ec:	40020070 	.word	0x40020070
 801b9f0:	40020088 	.word	0x40020088
 801b9f4:	400200a0 	.word	0x400200a0
 801b9f8:	400200b8 	.word	0x400200b8
 801b9fc:	40020410 	.word	0x40020410
 801ba00:	40020428 	.word	0x40020428
 801ba04:	40020440 	.word	0x40020440
 801ba08:	40020458 	.word	0x40020458
 801ba0c:	40020470 	.word	0x40020470
 801ba10:	40020488 	.word	0x40020488
 801ba14:	400204a0 	.word	0x400204a0
 801ba18:	400204b8 	.word	0x400204b8
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	f003 0308 	and.w	r3, r3, #8
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	bf14      	ite	ne
 801ba2a:	2301      	movne	r3, #1
 801ba2c:	2300      	moveq	r3, #0
 801ba2e:	b2db      	uxtb	r3, r3
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d015      	beq.n	801ba60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	681a      	ldr	r2, [r3, #0]
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	f022 0204 	bic.w	r2, r2, #4
 801ba42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ba48:	f003 031f 	and.w	r3, r3, #31
 801ba4c:	2208      	movs	r2, #8
 801ba4e:	409a      	lsls	r2, r3
 801ba50:	6a3b      	ldr	r3, [r7, #32]
 801ba52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ba58:	f043 0201 	orr.w	r2, r3, #1
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ba64:	f003 031f 	and.w	r3, r3, #31
 801ba68:	69ba      	ldr	r2, [r7, #24]
 801ba6a:	fa22 f303 	lsr.w	r3, r2, r3
 801ba6e:	f003 0301 	and.w	r3, r3, #1
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d06e      	beq.n	801bb54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	4a69      	ldr	r2, [pc, #420]	@ (801bc20 <HAL_DMA_IRQHandler+0x3f8>)
 801ba7c:	4293      	cmp	r3, r2
 801ba7e:	d04a      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4a67      	ldr	r2, [pc, #412]	@ (801bc24 <HAL_DMA_IRQHandler+0x3fc>)
 801ba86:	4293      	cmp	r3, r2
 801ba88:	d045      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	4a66      	ldr	r2, [pc, #408]	@ (801bc28 <HAL_DMA_IRQHandler+0x400>)
 801ba90:	4293      	cmp	r3, r2
 801ba92:	d040      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	4a64      	ldr	r2, [pc, #400]	@ (801bc2c <HAL_DMA_IRQHandler+0x404>)
 801ba9a:	4293      	cmp	r3, r2
 801ba9c:	d03b      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	4a63      	ldr	r2, [pc, #396]	@ (801bc30 <HAL_DMA_IRQHandler+0x408>)
 801baa4:	4293      	cmp	r3, r2
 801baa6:	d036      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	4a61      	ldr	r2, [pc, #388]	@ (801bc34 <HAL_DMA_IRQHandler+0x40c>)
 801baae:	4293      	cmp	r3, r2
 801bab0:	d031      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	4a60      	ldr	r2, [pc, #384]	@ (801bc38 <HAL_DMA_IRQHandler+0x410>)
 801bab8:	4293      	cmp	r3, r2
 801baba:	d02c      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	4a5e      	ldr	r2, [pc, #376]	@ (801bc3c <HAL_DMA_IRQHandler+0x414>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	d027      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	4a5d      	ldr	r2, [pc, #372]	@ (801bc40 <HAL_DMA_IRQHandler+0x418>)
 801bacc:	4293      	cmp	r3, r2
 801bace:	d022      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	4a5b      	ldr	r2, [pc, #364]	@ (801bc44 <HAL_DMA_IRQHandler+0x41c>)
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d01d      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	4a5a      	ldr	r2, [pc, #360]	@ (801bc48 <HAL_DMA_IRQHandler+0x420>)
 801bae0:	4293      	cmp	r3, r2
 801bae2:	d018      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	4a58      	ldr	r2, [pc, #352]	@ (801bc4c <HAL_DMA_IRQHandler+0x424>)
 801baea:	4293      	cmp	r3, r2
 801baec:	d013      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4a57      	ldr	r2, [pc, #348]	@ (801bc50 <HAL_DMA_IRQHandler+0x428>)
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d00e      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4a55      	ldr	r2, [pc, #340]	@ (801bc54 <HAL_DMA_IRQHandler+0x42c>)
 801bafe:	4293      	cmp	r3, r2
 801bb00:	d009      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	4a54      	ldr	r2, [pc, #336]	@ (801bc58 <HAL_DMA_IRQHandler+0x430>)
 801bb08:	4293      	cmp	r3, r2
 801bb0a:	d004      	beq.n	801bb16 <HAL_DMA_IRQHandler+0x2ee>
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a52      	ldr	r2, [pc, #328]	@ (801bc5c <HAL_DMA_IRQHandler+0x434>)
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d10a      	bne.n	801bb2c <HAL_DMA_IRQHandler+0x304>
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	695b      	ldr	r3, [r3, #20]
 801bb1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	bf14      	ite	ne
 801bb24:	2301      	movne	r3, #1
 801bb26:	2300      	moveq	r3, #0
 801bb28:	b2db      	uxtb	r3, r3
 801bb2a:	e003      	b.n	801bb34 <HAL_DMA_IRQHandler+0x30c>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	681b      	ldr	r3, [r3, #0]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	2300      	movs	r3, #0
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	d00d      	beq.n	801bb54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb3c:	f003 031f 	and.w	r3, r3, #31
 801bb40:	2201      	movs	r2, #1
 801bb42:	409a      	lsls	r2, r3
 801bb44:	6a3b      	ldr	r3, [r7, #32]
 801bb46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bb4c:	f043 0202 	orr.w	r2, r3, #2
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb58:	f003 031f 	and.w	r3, r3, #31
 801bb5c:	2204      	movs	r2, #4
 801bb5e:	409a      	lsls	r2, r3
 801bb60:	69bb      	ldr	r3, [r7, #24]
 801bb62:	4013      	ands	r3, r2
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	f000 808f 	beq.w	801bc88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	4a2c      	ldr	r2, [pc, #176]	@ (801bc20 <HAL_DMA_IRQHandler+0x3f8>)
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d04a      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	4a2a      	ldr	r2, [pc, #168]	@ (801bc24 <HAL_DMA_IRQHandler+0x3fc>)
 801bb7a:	4293      	cmp	r3, r2
 801bb7c:	d045      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	4a29      	ldr	r2, [pc, #164]	@ (801bc28 <HAL_DMA_IRQHandler+0x400>)
 801bb84:	4293      	cmp	r3, r2
 801bb86:	d040      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	4a27      	ldr	r2, [pc, #156]	@ (801bc2c <HAL_DMA_IRQHandler+0x404>)
 801bb8e:	4293      	cmp	r3, r2
 801bb90:	d03b      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	4a26      	ldr	r2, [pc, #152]	@ (801bc30 <HAL_DMA_IRQHandler+0x408>)
 801bb98:	4293      	cmp	r3, r2
 801bb9a:	d036      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	681b      	ldr	r3, [r3, #0]
 801bba0:	4a24      	ldr	r2, [pc, #144]	@ (801bc34 <HAL_DMA_IRQHandler+0x40c>)
 801bba2:	4293      	cmp	r3, r2
 801bba4:	d031      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	4a23      	ldr	r2, [pc, #140]	@ (801bc38 <HAL_DMA_IRQHandler+0x410>)
 801bbac:	4293      	cmp	r3, r2
 801bbae:	d02c      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	681b      	ldr	r3, [r3, #0]
 801bbb4:	4a21      	ldr	r2, [pc, #132]	@ (801bc3c <HAL_DMA_IRQHandler+0x414>)
 801bbb6:	4293      	cmp	r3, r2
 801bbb8:	d027      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	4a20      	ldr	r2, [pc, #128]	@ (801bc40 <HAL_DMA_IRQHandler+0x418>)
 801bbc0:	4293      	cmp	r3, r2
 801bbc2:	d022      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	4a1e      	ldr	r2, [pc, #120]	@ (801bc44 <HAL_DMA_IRQHandler+0x41c>)
 801bbca:	4293      	cmp	r3, r2
 801bbcc:	d01d      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	4a1d      	ldr	r2, [pc, #116]	@ (801bc48 <HAL_DMA_IRQHandler+0x420>)
 801bbd4:	4293      	cmp	r3, r2
 801bbd6:	d018      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	4a1b      	ldr	r2, [pc, #108]	@ (801bc4c <HAL_DMA_IRQHandler+0x424>)
 801bbde:	4293      	cmp	r3, r2
 801bbe0:	d013      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	4a1a      	ldr	r2, [pc, #104]	@ (801bc50 <HAL_DMA_IRQHandler+0x428>)
 801bbe8:	4293      	cmp	r3, r2
 801bbea:	d00e      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	4a18      	ldr	r2, [pc, #96]	@ (801bc54 <HAL_DMA_IRQHandler+0x42c>)
 801bbf2:	4293      	cmp	r3, r2
 801bbf4:	d009      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	681b      	ldr	r3, [r3, #0]
 801bbfa:	4a17      	ldr	r2, [pc, #92]	@ (801bc58 <HAL_DMA_IRQHandler+0x430>)
 801bbfc:	4293      	cmp	r3, r2
 801bbfe:	d004      	beq.n	801bc0a <HAL_DMA_IRQHandler+0x3e2>
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	4a15      	ldr	r2, [pc, #84]	@ (801bc5c <HAL_DMA_IRQHandler+0x434>)
 801bc06:	4293      	cmp	r3, r2
 801bc08:	d12a      	bne.n	801bc60 <HAL_DMA_IRQHandler+0x438>
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	681b      	ldr	r3, [r3, #0]
 801bc10:	f003 0302 	and.w	r3, r3, #2
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	bf14      	ite	ne
 801bc18:	2301      	movne	r3, #1
 801bc1a:	2300      	moveq	r3, #0
 801bc1c:	b2db      	uxtb	r3, r3
 801bc1e:	e023      	b.n	801bc68 <HAL_DMA_IRQHandler+0x440>
 801bc20:	40020010 	.word	0x40020010
 801bc24:	40020028 	.word	0x40020028
 801bc28:	40020040 	.word	0x40020040
 801bc2c:	40020058 	.word	0x40020058
 801bc30:	40020070 	.word	0x40020070
 801bc34:	40020088 	.word	0x40020088
 801bc38:	400200a0 	.word	0x400200a0
 801bc3c:	400200b8 	.word	0x400200b8
 801bc40:	40020410 	.word	0x40020410
 801bc44:	40020428 	.word	0x40020428
 801bc48:	40020440 	.word	0x40020440
 801bc4c:	40020458 	.word	0x40020458
 801bc50:	40020470 	.word	0x40020470
 801bc54:	40020488 	.word	0x40020488
 801bc58:	400204a0 	.word	0x400204a0
 801bc5c:	400204b8 	.word	0x400204b8
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	2300      	movs	r3, #0
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d00d      	beq.n	801bc88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc70:	f003 031f 	and.w	r3, r3, #31
 801bc74:	2204      	movs	r2, #4
 801bc76:	409a      	lsls	r2, r3
 801bc78:	6a3b      	ldr	r3, [r7, #32]
 801bc7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bc80:	f043 0204 	orr.w	r2, r3, #4
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bc8c:	f003 031f 	and.w	r3, r3, #31
 801bc90:	2210      	movs	r2, #16
 801bc92:	409a      	lsls	r2, r3
 801bc94:	69bb      	ldr	r3, [r7, #24]
 801bc96:	4013      	ands	r3, r2
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	f000 80a6 	beq.w	801bdea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	4a85      	ldr	r2, [pc, #532]	@ (801beb8 <HAL_DMA_IRQHandler+0x690>)
 801bca4:	4293      	cmp	r3, r2
 801bca6:	d04a      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	4a83      	ldr	r2, [pc, #524]	@ (801bebc <HAL_DMA_IRQHandler+0x694>)
 801bcae:	4293      	cmp	r3, r2
 801bcb0:	d045      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	4a82      	ldr	r2, [pc, #520]	@ (801bec0 <HAL_DMA_IRQHandler+0x698>)
 801bcb8:	4293      	cmp	r3, r2
 801bcba:	d040      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	681b      	ldr	r3, [r3, #0]
 801bcc0:	4a80      	ldr	r2, [pc, #512]	@ (801bec4 <HAL_DMA_IRQHandler+0x69c>)
 801bcc2:	4293      	cmp	r3, r2
 801bcc4:	d03b      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	681b      	ldr	r3, [r3, #0]
 801bcca:	4a7f      	ldr	r2, [pc, #508]	@ (801bec8 <HAL_DMA_IRQHandler+0x6a0>)
 801bccc:	4293      	cmp	r3, r2
 801bcce:	d036      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	4a7d      	ldr	r2, [pc, #500]	@ (801becc <HAL_DMA_IRQHandler+0x6a4>)
 801bcd6:	4293      	cmp	r3, r2
 801bcd8:	d031      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	4a7c      	ldr	r2, [pc, #496]	@ (801bed0 <HAL_DMA_IRQHandler+0x6a8>)
 801bce0:	4293      	cmp	r3, r2
 801bce2:	d02c      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	681b      	ldr	r3, [r3, #0]
 801bce8:	4a7a      	ldr	r2, [pc, #488]	@ (801bed4 <HAL_DMA_IRQHandler+0x6ac>)
 801bcea:	4293      	cmp	r3, r2
 801bcec:	d027      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	4a79      	ldr	r2, [pc, #484]	@ (801bed8 <HAL_DMA_IRQHandler+0x6b0>)
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	d022      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	4a77      	ldr	r2, [pc, #476]	@ (801bedc <HAL_DMA_IRQHandler+0x6b4>)
 801bcfe:	4293      	cmp	r3, r2
 801bd00:	d01d      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	4a76      	ldr	r2, [pc, #472]	@ (801bee0 <HAL_DMA_IRQHandler+0x6b8>)
 801bd08:	4293      	cmp	r3, r2
 801bd0a:	d018      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	4a74      	ldr	r2, [pc, #464]	@ (801bee4 <HAL_DMA_IRQHandler+0x6bc>)
 801bd12:	4293      	cmp	r3, r2
 801bd14:	d013      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	681b      	ldr	r3, [r3, #0]
 801bd1a:	4a73      	ldr	r2, [pc, #460]	@ (801bee8 <HAL_DMA_IRQHandler+0x6c0>)
 801bd1c:	4293      	cmp	r3, r2
 801bd1e:	d00e      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	4a71      	ldr	r2, [pc, #452]	@ (801beec <HAL_DMA_IRQHandler+0x6c4>)
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d009      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	4a70      	ldr	r2, [pc, #448]	@ (801bef0 <HAL_DMA_IRQHandler+0x6c8>)
 801bd30:	4293      	cmp	r3, r2
 801bd32:	d004      	beq.n	801bd3e <HAL_DMA_IRQHandler+0x516>
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	4a6e      	ldr	r2, [pc, #440]	@ (801bef4 <HAL_DMA_IRQHandler+0x6cc>)
 801bd3a:	4293      	cmp	r3, r2
 801bd3c:	d10a      	bne.n	801bd54 <HAL_DMA_IRQHandler+0x52c>
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	f003 0308 	and.w	r3, r3, #8
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	bf14      	ite	ne
 801bd4c:	2301      	movne	r3, #1
 801bd4e:	2300      	moveq	r3, #0
 801bd50:	b2db      	uxtb	r3, r3
 801bd52:	e009      	b.n	801bd68 <HAL_DMA_IRQHandler+0x540>
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	f003 0304 	and.w	r3, r3, #4
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	bf14      	ite	ne
 801bd62:	2301      	movne	r3, #1
 801bd64:	2300      	moveq	r3, #0
 801bd66:	b2db      	uxtb	r3, r3
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d03e      	beq.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd70:	f003 031f 	and.w	r3, r3, #31
 801bd74:	2210      	movs	r2, #16
 801bd76:	409a      	lsls	r2, r3
 801bd78:	6a3b      	ldr	r3, [r7, #32]
 801bd7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d018      	beq.n	801bdbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d108      	bne.n	801bdaa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	d024      	beq.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bda4:	6878      	ldr	r0, [r7, #4]
 801bda6:	4798      	blx	r3
 801bda8:	e01f      	b.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d01b      	beq.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bdb6:	6878      	ldr	r0, [r7, #4]
 801bdb8:	4798      	blx	r3
 801bdba:	e016      	b.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d107      	bne.n	801bdda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	681b      	ldr	r3, [r3, #0]
 801bdce:	681a      	ldr	r2, [r3, #0]
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	f022 0208 	bic.w	r2, r2, #8
 801bdd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d003      	beq.n	801bdea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bde6:	6878      	ldr	r0, [r7, #4]
 801bde8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bdee:	f003 031f 	and.w	r3, r3, #31
 801bdf2:	2220      	movs	r2, #32
 801bdf4:	409a      	lsls	r2, r3
 801bdf6:	69bb      	ldr	r3, [r7, #24]
 801bdf8:	4013      	ands	r3, r2
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	f000 8110 	beq.w	801c020 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	4a2c      	ldr	r2, [pc, #176]	@ (801beb8 <HAL_DMA_IRQHandler+0x690>)
 801be06:	4293      	cmp	r3, r2
 801be08:	d04a      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	4a2b      	ldr	r2, [pc, #172]	@ (801bebc <HAL_DMA_IRQHandler+0x694>)
 801be10:	4293      	cmp	r3, r2
 801be12:	d045      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	4a29      	ldr	r2, [pc, #164]	@ (801bec0 <HAL_DMA_IRQHandler+0x698>)
 801be1a:	4293      	cmp	r3, r2
 801be1c:	d040      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	4a28      	ldr	r2, [pc, #160]	@ (801bec4 <HAL_DMA_IRQHandler+0x69c>)
 801be24:	4293      	cmp	r3, r2
 801be26:	d03b      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	4a26      	ldr	r2, [pc, #152]	@ (801bec8 <HAL_DMA_IRQHandler+0x6a0>)
 801be2e:	4293      	cmp	r3, r2
 801be30:	d036      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	4a25      	ldr	r2, [pc, #148]	@ (801becc <HAL_DMA_IRQHandler+0x6a4>)
 801be38:	4293      	cmp	r3, r2
 801be3a:	d031      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	4a23      	ldr	r2, [pc, #140]	@ (801bed0 <HAL_DMA_IRQHandler+0x6a8>)
 801be42:	4293      	cmp	r3, r2
 801be44:	d02c      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	4a22      	ldr	r2, [pc, #136]	@ (801bed4 <HAL_DMA_IRQHandler+0x6ac>)
 801be4c:	4293      	cmp	r3, r2
 801be4e:	d027      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	4a20      	ldr	r2, [pc, #128]	@ (801bed8 <HAL_DMA_IRQHandler+0x6b0>)
 801be56:	4293      	cmp	r3, r2
 801be58:	d022      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	4a1f      	ldr	r2, [pc, #124]	@ (801bedc <HAL_DMA_IRQHandler+0x6b4>)
 801be60:	4293      	cmp	r3, r2
 801be62:	d01d      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	681b      	ldr	r3, [r3, #0]
 801be68:	4a1d      	ldr	r2, [pc, #116]	@ (801bee0 <HAL_DMA_IRQHandler+0x6b8>)
 801be6a:	4293      	cmp	r3, r2
 801be6c:	d018      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	4a1c      	ldr	r2, [pc, #112]	@ (801bee4 <HAL_DMA_IRQHandler+0x6bc>)
 801be74:	4293      	cmp	r3, r2
 801be76:	d013      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	4a1a      	ldr	r2, [pc, #104]	@ (801bee8 <HAL_DMA_IRQHandler+0x6c0>)
 801be7e:	4293      	cmp	r3, r2
 801be80:	d00e      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	681b      	ldr	r3, [r3, #0]
 801be86:	4a19      	ldr	r2, [pc, #100]	@ (801beec <HAL_DMA_IRQHandler+0x6c4>)
 801be88:	4293      	cmp	r3, r2
 801be8a:	d009      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	4a17      	ldr	r2, [pc, #92]	@ (801bef0 <HAL_DMA_IRQHandler+0x6c8>)
 801be92:	4293      	cmp	r3, r2
 801be94:	d004      	beq.n	801bea0 <HAL_DMA_IRQHandler+0x678>
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	4a16      	ldr	r2, [pc, #88]	@ (801bef4 <HAL_DMA_IRQHandler+0x6cc>)
 801be9c:	4293      	cmp	r3, r2
 801be9e:	d12b      	bne.n	801bef8 <HAL_DMA_IRQHandler+0x6d0>
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	f003 0310 	and.w	r3, r3, #16
 801beaa:	2b00      	cmp	r3, #0
 801beac:	bf14      	ite	ne
 801beae:	2301      	movne	r3, #1
 801beb0:	2300      	moveq	r3, #0
 801beb2:	b2db      	uxtb	r3, r3
 801beb4:	e02a      	b.n	801bf0c <HAL_DMA_IRQHandler+0x6e4>
 801beb6:	bf00      	nop
 801beb8:	40020010 	.word	0x40020010
 801bebc:	40020028 	.word	0x40020028
 801bec0:	40020040 	.word	0x40020040
 801bec4:	40020058 	.word	0x40020058
 801bec8:	40020070 	.word	0x40020070
 801becc:	40020088 	.word	0x40020088
 801bed0:	400200a0 	.word	0x400200a0
 801bed4:	400200b8 	.word	0x400200b8
 801bed8:	40020410 	.word	0x40020410
 801bedc:	40020428 	.word	0x40020428
 801bee0:	40020440 	.word	0x40020440
 801bee4:	40020458 	.word	0x40020458
 801bee8:	40020470 	.word	0x40020470
 801beec:	40020488 	.word	0x40020488
 801bef0:	400204a0 	.word	0x400204a0
 801bef4:	400204b8 	.word	0x400204b8
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	681b      	ldr	r3, [r3, #0]
 801befe:	f003 0302 	and.w	r3, r3, #2
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	bf14      	ite	ne
 801bf06:	2301      	movne	r3, #1
 801bf08:	2300      	moveq	r3, #0
 801bf0a:	b2db      	uxtb	r3, r3
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	f000 8087 	beq.w	801c020 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bf12:	687b      	ldr	r3, [r7, #4]
 801bf14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bf16:	f003 031f 	and.w	r3, r3, #31
 801bf1a:	2220      	movs	r2, #32
 801bf1c:	409a      	lsls	r2, r3
 801bf1e:	6a3b      	ldr	r3, [r7, #32]
 801bf20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	2b04      	cmp	r3, #4
 801bf2c:	d139      	bne.n	801bfa2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	681b      	ldr	r3, [r3, #0]
 801bf32:	681a      	ldr	r2, [r3, #0]
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	f022 0216 	bic.w	r2, r2, #22
 801bf3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	695a      	ldr	r2, [r3, #20]
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bf4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bf4e:	687b      	ldr	r3, [r7, #4]
 801bf50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d103      	bne.n	801bf5e <HAL_DMA_IRQHandler+0x736>
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d007      	beq.n	801bf6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	681a      	ldr	r2, [r3, #0]
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	f022 0208 	bic.w	r2, r2, #8
 801bf6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bf72:	f003 031f 	and.w	r3, r3, #31
 801bf76:	223f      	movs	r2, #63	@ 0x3f
 801bf78:	409a      	lsls	r2, r3
 801bf7a:	6a3b      	ldr	r3, [r7, #32]
 801bf7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	2201      	movs	r2, #1
 801bf82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	2200      	movs	r2, #0
 801bf8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	f000 834a 	beq.w	801c62c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	4798      	blx	r3
          }
          return;
 801bfa0:	e344      	b.n	801c62c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d018      	beq.n	801bfe2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d108      	bne.n	801bfd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d02c      	beq.n	801c020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bfca:	6878      	ldr	r0, [r7, #4]
 801bfcc:	4798      	blx	r3
 801bfce:	e027      	b.n	801c020 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d023      	beq.n	801c020 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bfdc:	6878      	ldr	r0, [r7, #4]
 801bfde:	4798      	blx	r3
 801bfe0:	e01e      	b.n	801c020 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	681b      	ldr	r3, [r3, #0]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d10f      	bne.n	801c010 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	681a      	ldr	r2, [r3, #0]
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	f022 0210 	bic.w	r2, r2, #16
 801bffe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	2201      	movs	r2, #1
 801c004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	2200      	movs	r2, #0
 801c00c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c014:	2b00      	cmp	r3, #0
 801c016:	d003      	beq.n	801c020 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c01c:	6878      	ldr	r0, [r7, #4]
 801c01e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c024:	2b00      	cmp	r3, #0
 801c026:	f000 8306 	beq.w	801c636 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c02e:	f003 0301 	and.w	r3, r3, #1
 801c032:	2b00      	cmp	r3, #0
 801c034:	f000 8088 	beq.w	801c148 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	2204      	movs	r2, #4
 801c03c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	4a7a      	ldr	r2, [pc, #488]	@ (801c230 <HAL_DMA_IRQHandler+0xa08>)
 801c046:	4293      	cmp	r3, r2
 801c048:	d04a      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	4a79      	ldr	r2, [pc, #484]	@ (801c234 <HAL_DMA_IRQHandler+0xa0c>)
 801c050:	4293      	cmp	r3, r2
 801c052:	d045      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	4a77      	ldr	r2, [pc, #476]	@ (801c238 <HAL_DMA_IRQHandler+0xa10>)
 801c05a:	4293      	cmp	r3, r2
 801c05c:	d040      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	4a76      	ldr	r2, [pc, #472]	@ (801c23c <HAL_DMA_IRQHandler+0xa14>)
 801c064:	4293      	cmp	r3, r2
 801c066:	d03b      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	4a74      	ldr	r2, [pc, #464]	@ (801c240 <HAL_DMA_IRQHandler+0xa18>)
 801c06e:	4293      	cmp	r3, r2
 801c070:	d036      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	4a73      	ldr	r2, [pc, #460]	@ (801c244 <HAL_DMA_IRQHandler+0xa1c>)
 801c078:	4293      	cmp	r3, r2
 801c07a:	d031      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	4a71      	ldr	r2, [pc, #452]	@ (801c248 <HAL_DMA_IRQHandler+0xa20>)
 801c082:	4293      	cmp	r3, r2
 801c084:	d02c      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	4a70      	ldr	r2, [pc, #448]	@ (801c24c <HAL_DMA_IRQHandler+0xa24>)
 801c08c:	4293      	cmp	r3, r2
 801c08e:	d027      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	4a6e      	ldr	r2, [pc, #440]	@ (801c250 <HAL_DMA_IRQHandler+0xa28>)
 801c096:	4293      	cmp	r3, r2
 801c098:	d022      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	4a6d      	ldr	r2, [pc, #436]	@ (801c254 <HAL_DMA_IRQHandler+0xa2c>)
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	d01d      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	4a6b      	ldr	r2, [pc, #428]	@ (801c258 <HAL_DMA_IRQHandler+0xa30>)
 801c0aa:	4293      	cmp	r3, r2
 801c0ac:	d018      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	4a6a      	ldr	r2, [pc, #424]	@ (801c25c <HAL_DMA_IRQHandler+0xa34>)
 801c0b4:	4293      	cmp	r3, r2
 801c0b6:	d013      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	4a68      	ldr	r2, [pc, #416]	@ (801c260 <HAL_DMA_IRQHandler+0xa38>)
 801c0be:	4293      	cmp	r3, r2
 801c0c0:	d00e      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	4a67      	ldr	r2, [pc, #412]	@ (801c264 <HAL_DMA_IRQHandler+0xa3c>)
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	d009      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	4a65      	ldr	r2, [pc, #404]	@ (801c268 <HAL_DMA_IRQHandler+0xa40>)
 801c0d2:	4293      	cmp	r3, r2
 801c0d4:	d004      	beq.n	801c0e0 <HAL_DMA_IRQHandler+0x8b8>
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	4a64      	ldr	r2, [pc, #400]	@ (801c26c <HAL_DMA_IRQHandler+0xa44>)
 801c0dc:	4293      	cmp	r3, r2
 801c0de:	d108      	bne.n	801c0f2 <HAL_DMA_IRQHandler+0x8ca>
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	681a      	ldr	r2, [r3, #0]
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	f022 0201 	bic.w	r2, r2, #1
 801c0ee:	601a      	str	r2, [r3, #0]
 801c0f0:	e007      	b.n	801c102 <HAL_DMA_IRQHandler+0x8da>
 801c0f2:	687b      	ldr	r3, [r7, #4]
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	681a      	ldr	r2, [r3, #0]
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	f022 0201 	bic.w	r2, r2, #1
 801c100:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	3301      	adds	r3, #1
 801c106:	60fb      	str	r3, [r7, #12]
 801c108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d307      	bcc.n	801c11e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	f003 0301 	and.w	r3, r3, #1
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d1f2      	bne.n	801c102 <HAL_DMA_IRQHandler+0x8da>
 801c11c:	e000      	b.n	801c120 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801c11e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	f003 0301 	and.w	r3, r3, #1
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d004      	beq.n	801c138 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	2203      	movs	r2, #3
 801c132:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801c136:	e003      	b.n	801c140 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	2201      	movs	r2, #1
 801c13c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	2200      	movs	r2, #0
 801c144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	f000 8272 	beq.w	801c636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	4798      	blx	r3
 801c15a:	e26c      	b.n	801c636 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4a43      	ldr	r2, [pc, #268]	@ (801c270 <HAL_DMA_IRQHandler+0xa48>)
 801c162:	4293      	cmp	r3, r2
 801c164:	d022      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	4a42      	ldr	r2, [pc, #264]	@ (801c274 <HAL_DMA_IRQHandler+0xa4c>)
 801c16c:	4293      	cmp	r3, r2
 801c16e:	d01d      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	681b      	ldr	r3, [r3, #0]
 801c174:	4a40      	ldr	r2, [pc, #256]	@ (801c278 <HAL_DMA_IRQHandler+0xa50>)
 801c176:	4293      	cmp	r3, r2
 801c178:	d018      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	4a3f      	ldr	r2, [pc, #252]	@ (801c27c <HAL_DMA_IRQHandler+0xa54>)
 801c180:	4293      	cmp	r3, r2
 801c182:	d013      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	4a3d      	ldr	r2, [pc, #244]	@ (801c280 <HAL_DMA_IRQHandler+0xa58>)
 801c18a:	4293      	cmp	r3, r2
 801c18c:	d00e      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	4a3c      	ldr	r2, [pc, #240]	@ (801c284 <HAL_DMA_IRQHandler+0xa5c>)
 801c194:	4293      	cmp	r3, r2
 801c196:	d009      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	4a3a      	ldr	r2, [pc, #232]	@ (801c288 <HAL_DMA_IRQHandler+0xa60>)
 801c19e:	4293      	cmp	r3, r2
 801c1a0:	d004      	beq.n	801c1ac <HAL_DMA_IRQHandler+0x984>
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	681b      	ldr	r3, [r3, #0]
 801c1a6:	4a39      	ldr	r2, [pc, #228]	@ (801c28c <HAL_DMA_IRQHandler+0xa64>)
 801c1a8:	4293      	cmp	r3, r2
 801c1aa:	d101      	bne.n	801c1b0 <HAL_DMA_IRQHandler+0x988>
 801c1ac:	2301      	movs	r3, #1
 801c1ae:	e000      	b.n	801c1b2 <HAL_DMA_IRQHandler+0x98a>
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	f000 823f 	beq.w	801c636 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1c4:	f003 031f 	and.w	r3, r3, #31
 801c1c8:	2204      	movs	r2, #4
 801c1ca:	409a      	lsls	r2, r3
 801c1cc:	697b      	ldr	r3, [r7, #20]
 801c1ce:	4013      	ands	r3, r2
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	f000 80cd 	beq.w	801c370 <HAL_DMA_IRQHandler+0xb48>
 801c1d6:	693b      	ldr	r3, [r7, #16]
 801c1d8:	f003 0304 	and.w	r3, r3, #4
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f000 80c7 	beq.w	801c370 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c1e6:	f003 031f 	and.w	r3, r3, #31
 801c1ea:	2204      	movs	r2, #4
 801c1ec:	409a      	lsls	r2, r3
 801c1ee:	69fb      	ldr	r3, [r7, #28]
 801c1f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1f2:	693b      	ldr	r3, [r7, #16]
 801c1f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d049      	beq.n	801c290 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c1fc:	693b      	ldr	r3, [r7, #16]
 801c1fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c202:	2b00      	cmp	r3, #0
 801c204:	d109      	bne.n	801c21a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	f000 8210 	beq.w	801c630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c214:	6878      	ldr	r0, [r7, #4]
 801c216:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c218:	e20a      	b.n	801c630 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c21e:	2b00      	cmp	r3, #0
 801c220:	f000 8206 	beq.w	801c630 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c22c:	e200      	b.n	801c630 <HAL_DMA_IRQHandler+0xe08>
 801c22e:	bf00      	nop
 801c230:	40020010 	.word	0x40020010
 801c234:	40020028 	.word	0x40020028
 801c238:	40020040 	.word	0x40020040
 801c23c:	40020058 	.word	0x40020058
 801c240:	40020070 	.word	0x40020070
 801c244:	40020088 	.word	0x40020088
 801c248:	400200a0 	.word	0x400200a0
 801c24c:	400200b8 	.word	0x400200b8
 801c250:	40020410 	.word	0x40020410
 801c254:	40020428 	.word	0x40020428
 801c258:	40020440 	.word	0x40020440
 801c25c:	40020458 	.word	0x40020458
 801c260:	40020470 	.word	0x40020470
 801c264:	40020488 	.word	0x40020488
 801c268:	400204a0 	.word	0x400204a0
 801c26c:	400204b8 	.word	0x400204b8
 801c270:	58025408 	.word	0x58025408
 801c274:	5802541c 	.word	0x5802541c
 801c278:	58025430 	.word	0x58025430
 801c27c:	58025444 	.word	0x58025444
 801c280:	58025458 	.word	0x58025458
 801c284:	5802546c 	.word	0x5802546c
 801c288:	58025480 	.word	0x58025480
 801c28c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c290:	693b      	ldr	r3, [r7, #16]
 801c292:	f003 0320 	and.w	r3, r3, #32
 801c296:	2b00      	cmp	r3, #0
 801c298:	d160      	bne.n	801c35c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	4a7f      	ldr	r2, [pc, #508]	@ (801c49c <HAL_DMA_IRQHandler+0xc74>)
 801c2a0:	4293      	cmp	r3, r2
 801c2a2:	d04a      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	4a7d      	ldr	r2, [pc, #500]	@ (801c4a0 <HAL_DMA_IRQHandler+0xc78>)
 801c2aa:	4293      	cmp	r3, r2
 801c2ac:	d045      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	4a7c      	ldr	r2, [pc, #496]	@ (801c4a4 <HAL_DMA_IRQHandler+0xc7c>)
 801c2b4:	4293      	cmp	r3, r2
 801c2b6:	d040      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	4a7a      	ldr	r2, [pc, #488]	@ (801c4a8 <HAL_DMA_IRQHandler+0xc80>)
 801c2be:	4293      	cmp	r3, r2
 801c2c0:	d03b      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	4a79      	ldr	r2, [pc, #484]	@ (801c4ac <HAL_DMA_IRQHandler+0xc84>)
 801c2c8:	4293      	cmp	r3, r2
 801c2ca:	d036      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	4a77      	ldr	r2, [pc, #476]	@ (801c4b0 <HAL_DMA_IRQHandler+0xc88>)
 801c2d2:	4293      	cmp	r3, r2
 801c2d4:	d031      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	681b      	ldr	r3, [r3, #0]
 801c2da:	4a76      	ldr	r2, [pc, #472]	@ (801c4b4 <HAL_DMA_IRQHandler+0xc8c>)
 801c2dc:	4293      	cmp	r3, r2
 801c2de:	d02c      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	4a74      	ldr	r2, [pc, #464]	@ (801c4b8 <HAL_DMA_IRQHandler+0xc90>)
 801c2e6:	4293      	cmp	r3, r2
 801c2e8:	d027      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	4a73      	ldr	r2, [pc, #460]	@ (801c4bc <HAL_DMA_IRQHandler+0xc94>)
 801c2f0:	4293      	cmp	r3, r2
 801c2f2:	d022      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	4a71      	ldr	r2, [pc, #452]	@ (801c4c0 <HAL_DMA_IRQHandler+0xc98>)
 801c2fa:	4293      	cmp	r3, r2
 801c2fc:	d01d      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	4a70      	ldr	r2, [pc, #448]	@ (801c4c4 <HAL_DMA_IRQHandler+0xc9c>)
 801c304:	4293      	cmp	r3, r2
 801c306:	d018      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	4a6e      	ldr	r2, [pc, #440]	@ (801c4c8 <HAL_DMA_IRQHandler+0xca0>)
 801c30e:	4293      	cmp	r3, r2
 801c310:	d013      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	4a6d      	ldr	r2, [pc, #436]	@ (801c4cc <HAL_DMA_IRQHandler+0xca4>)
 801c318:	4293      	cmp	r3, r2
 801c31a:	d00e      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	4a6b      	ldr	r2, [pc, #428]	@ (801c4d0 <HAL_DMA_IRQHandler+0xca8>)
 801c322:	4293      	cmp	r3, r2
 801c324:	d009      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	4a6a      	ldr	r2, [pc, #424]	@ (801c4d4 <HAL_DMA_IRQHandler+0xcac>)
 801c32c:	4293      	cmp	r3, r2
 801c32e:	d004      	beq.n	801c33a <HAL_DMA_IRQHandler+0xb12>
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	681b      	ldr	r3, [r3, #0]
 801c334:	4a68      	ldr	r2, [pc, #416]	@ (801c4d8 <HAL_DMA_IRQHandler+0xcb0>)
 801c336:	4293      	cmp	r3, r2
 801c338:	d108      	bne.n	801c34c <HAL_DMA_IRQHandler+0xb24>
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	681a      	ldr	r2, [r3, #0]
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	f022 0208 	bic.w	r2, r2, #8
 801c348:	601a      	str	r2, [r3, #0]
 801c34a:	e007      	b.n	801c35c <HAL_DMA_IRQHandler+0xb34>
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	681b      	ldr	r3, [r3, #0]
 801c350:	681a      	ldr	r2, [r3, #0]
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	f022 0204 	bic.w	r2, r2, #4
 801c35a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c360:	2b00      	cmp	r3, #0
 801c362:	f000 8165 	beq.w	801c630 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c36a:	6878      	ldr	r0, [r7, #4]
 801c36c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c36e:	e15f      	b.n	801c630 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c374:	f003 031f 	and.w	r3, r3, #31
 801c378:	2202      	movs	r2, #2
 801c37a:	409a      	lsls	r2, r3
 801c37c:	697b      	ldr	r3, [r7, #20]
 801c37e:	4013      	ands	r3, r2
 801c380:	2b00      	cmp	r3, #0
 801c382:	f000 80c5 	beq.w	801c510 <HAL_DMA_IRQHandler+0xce8>
 801c386:	693b      	ldr	r3, [r7, #16]
 801c388:	f003 0302 	and.w	r3, r3, #2
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	f000 80bf 	beq.w	801c510 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c396:	f003 031f 	and.w	r3, r3, #31
 801c39a:	2202      	movs	r2, #2
 801c39c:	409a      	lsls	r2, r3
 801c39e:	69fb      	ldr	r3, [r7, #28]
 801c3a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c3a2:	693b      	ldr	r3, [r7, #16]
 801c3a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d018      	beq.n	801c3de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c3ac:	693b      	ldr	r3, [r7, #16]
 801c3ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d109      	bne.n	801c3ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	f000 813a 	beq.w	801c634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c3c4:	6878      	ldr	r0, [r7, #4]
 801c3c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c3c8:	e134      	b.n	801c634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	f000 8130 	beq.w	801c634 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c3d8:	6878      	ldr	r0, [r7, #4]
 801c3da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c3dc:	e12a      	b.n	801c634 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c3de:	693b      	ldr	r3, [r7, #16]
 801c3e0:	f003 0320 	and.w	r3, r3, #32
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	f040 8089 	bne.w	801c4fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	4a2b      	ldr	r2, [pc, #172]	@ (801c49c <HAL_DMA_IRQHandler+0xc74>)
 801c3f0:	4293      	cmp	r3, r2
 801c3f2:	d04a      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	4a29      	ldr	r2, [pc, #164]	@ (801c4a0 <HAL_DMA_IRQHandler+0xc78>)
 801c3fa:	4293      	cmp	r3, r2
 801c3fc:	d045      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	4a28      	ldr	r2, [pc, #160]	@ (801c4a4 <HAL_DMA_IRQHandler+0xc7c>)
 801c404:	4293      	cmp	r3, r2
 801c406:	d040      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	681b      	ldr	r3, [r3, #0]
 801c40c:	4a26      	ldr	r2, [pc, #152]	@ (801c4a8 <HAL_DMA_IRQHandler+0xc80>)
 801c40e:	4293      	cmp	r3, r2
 801c410:	d03b      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	4a25      	ldr	r2, [pc, #148]	@ (801c4ac <HAL_DMA_IRQHandler+0xc84>)
 801c418:	4293      	cmp	r3, r2
 801c41a:	d036      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	4a23      	ldr	r2, [pc, #140]	@ (801c4b0 <HAL_DMA_IRQHandler+0xc88>)
 801c422:	4293      	cmp	r3, r2
 801c424:	d031      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	4a22      	ldr	r2, [pc, #136]	@ (801c4b4 <HAL_DMA_IRQHandler+0xc8c>)
 801c42c:	4293      	cmp	r3, r2
 801c42e:	d02c      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	4a20      	ldr	r2, [pc, #128]	@ (801c4b8 <HAL_DMA_IRQHandler+0xc90>)
 801c436:	4293      	cmp	r3, r2
 801c438:	d027      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	681b      	ldr	r3, [r3, #0]
 801c43e:	4a1f      	ldr	r2, [pc, #124]	@ (801c4bc <HAL_DMA_IRQHandler+0xc94>)
 801c440:	4293      	cmp	r3, r2
 801c442:	d022      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	4a1d      	ldr	r2, [pc, #116]	@ (801c4c0 <HAL_DMA_IRQHandler+0xc98>)
 801c44a:	4293      	cmp	r3, r2
 801c44c:	d01d      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	681b      	ldr	r3, [r3, #0]
 801c452:	4a1c      	ldr	r2, [pc, #112]	@ (801c4c4 <HAL_DMA_IRQHandler+0xc9c>)
 801c454:	4293      	cmp	r3, r2
 801c456:	d018      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	681b      	ldr	r3, [r3, #0]
 801c45c:	4a1a      	ldr	r2, [pc, #104]	@ (801c4c8 <HAL_DMA_IRQHandler+0xca0>)
 801c45e:	4293      	cmp	r3, r2
 801c460:	d013      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	681b      	ldr	r3, [r3, #0]
 801c466:	4a19      	ldr	r2, [pc, #100]	@ (801c4cc <HAL_DMA_IRQHandler+0xca4>)
 801c468:	4293      	cmp	r3, r2
 801c46a:	d00e      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681b      	ldr	r3, [r3, #0]
 801c470:	4a17      	ldr	r2, [pc, #92]	@ (801c4d0 <HAL_DMA_IRQHandler+0xca8>)
 801c472:	4293      	cmp	r3, r2
 801c474:	d009      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	4a16      	ldr	r2, [pc, #88]	@ (801c4d4 <HAL_DMA_IRQHandler+0xcac>)
 801c47c:	4293      	cmp	r3, r2
 801c47e:	d004      	beq.n	801c48a <HAL_DMA_IRQHandler+0xc62>
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	4a14      	ldr	r2, [pc, #80]	@ (801c4d8 <HAL_DMA_IRQHandler+0xcb0>)
 801c486:	4293      	cmp	r3, r2
 801c488:	d128      	bne.n	801c4dc <HAL_DMA_IRQHandler+0xcb4>
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	681a      	ldr	r2, [r3, #0]
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	f022 0214 	bic.w	r2, r2, #20
 801c498:	601a      	str	r2, [r3, #0]
 801c49a:	e027      	b.n	801c4ec <HAL_DMA_IRQHandler+0xcc4>
 801c49c:	40020010 	.word	0x40020010
 801c4a0:	40020028 	.word	0x40020028
 801c4a4:	40020040 	.word	0x40020040
 801c4a8:	40020058 	.word	0x40020058
 801c4ac:	40020070 	.word	0x40020070
 801c4b0:	40020088 	.word	0x40020088
 801c4b4:	400200a0 	.word	0x400200a0
 801c4b8:	400200b8 	.word	0x400200b8
 801c4bc:	40020410 	.word	0x40020410
 801c4c0:	40020428 	.word	0x40020428
 801c4c4:	40020440 	.word	0x40020440
 801c4c8:	40020458 	.word	0x40020458
 801c4cc:	40020470 	.word	0x40020470
 801c4d0:	40020488 	.word	0x40020488
 801c4d4:	400204a0 	.word	0x400204a0
 801c4d8:	400204b8 	.word	0x400204b8
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	681a      	ldr	r2, [r3, #0]
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	f022 020a 	bic.w	r2, r2, #10
 801c4ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	2201      	movs	r2, #1
 801c4f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c500:	2b00      	cmp	r3, #0
 801c502:	f000 8097 	beq.w	801c634 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c50e:	e091      	b.n	801c634 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c514:	f003 031f 	and.w	r3, r3, #31
 801c518:	2208      	movs	r2, #8
 801c51a:	409a      	lsls	r2, r3
 801c51c:	697b      	ldr	r3, [r7, #20]
 801c51e:	4013      	ands	r3, r2
 801c520:	2b00      	cmp	r3, #0
 801c522:	f000 8088 	beq.w	801c636 <HAL_DMA_IRQHandler+0xe0e>
 801c526:	693b      	ldr	r3, [r7, #16]
 801c528:	f003 0308 	and.w	r3, r3, #8
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	f000 8082 	beq.w	801c636 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	4a41      	ldr	r2, [pc, #260]	@ (801c63c <HAL_DMA_IRQHandler+0xe14>)
 801c538:	4293      	cmp	r3, r2
 801c53a:	d04a      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	681b      	ldr	r3, [r3, #0]
 801c540:	4a3f      	ldr	r2, [pc, #252]	@ (801c640 <HAL_DMA_IRQHandler+0xe18>)
 801c542:	4293      	cmp	r3, r2
 801c544:	d045      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	681b      	ldr	r3, [r3, #0]
 801c54a:	4a3e      	ldr	r2, [pc, #248]	@ (801c644 <HAL_DMA_IRQHandler+0xe1c>)
 801c54c:	4293      	cmp	r3, r2
 801c54e:	d040      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	4a3c      	ldr	r2, [pc, #240]	@ (801c648 <HAL_DMA_IRQHandler+0xe20>)
 801c556:	4293      	cmp	r3, r2
 801c558:	d03b      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	681b      	ldr	r3, [r3, #0]
 801c55e:	4a3b      	ldr	r2, [pc, #236]	@ (801c64c <HAL_DMA_IRQHandler+0xe24>)
 801c560:	4293      	cmp	r3, r2
 801c562:	d036      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	4a39      	ldr	r2, [pc, #228]	@ (801c650 <HAL_DMA_IRQHandler+0xe28>)
 801c56a:	4293      	cmp	r3, r2
 801c56c:	d031      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	4a38      	ldr	r2, [pc, #224]	@ (801c654 <HAL_DMA_IRQHandler+0xe2c>)
 801c574:	4293      	cmp	r3, r2
 801c576:	d02c      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	4a36      	ldr	r2, [pc, #216]	@ (801c658 <HAL_DMA_IRQHandler+0xe30>)
 801c57e:	4293      	cmp	r3, r2
 801c580:	d027      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	681b      	ldr	r3, [r3, #0]
 801c586:	4a35      	ldr	r2, [pc, #212]	@ (801c65c <HAL_DMA_IRQHandler+0xe34>)
 801c588:	4293      	cmp	r3, r2
 801c58a:	d022      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	4a33      	ldr	r2, [pc, #204]	@ (801c660 <HAL_DMA_IRQHandler+0xe38>)
 801c592:	4293      	cmp	r3, r2
 801c594:	d01d      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	4a32      	ldr	r2, [pc, #200]	@ (801c664 <HAL_DMA_IRQHandler+0xe3c>)
 801c59c:	4293      	cmp	r3, r2
 801c59e:	d018      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	4a30      	ldr	r2, [pc, #192]	@ (801c668 <HAL_DMA_IRQHandler+0xe40>)
 801c5a6:	4293      	cmp	r3, r2
 801c5a8:	d013      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	4a2f      	ldr	r2, [pc, #188]	@ (801c66c <HAL_DMA_IRQHandler+0xe44>)
 801c5b0:	4293      	cmp	r3, r2
 801c5b2:	d00e      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	4a2d      	ldr	r2, [pc, #180]	@ (801c670 <HAL_DMA_IRQHandler+0xe48>)
 801c5ba:	4293      	cmp	r3, r2
 801c5bc:	d009      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	4a2c      	ldr	r2, [pc, #176]	@ (801c674 <HAL_DMA_IRQHandler+0xe4c>)
 801c5c4:	4293      	cmp	r3, r2
 801c5c6:	d004      	beq.n	801c5d2 <HAL_DMA_IRQHandler+0xdaa>
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	4a2a      	ldr	r2, [pc, #168]	@ (801c678 <HAL_DMA_IRQHandler+0xe50>)
 801c5ce:	4293      	cmp	r3, r2
 801c5d0:	d108      	bne.n	801c5e4 <HAL_DMA_IRQHandler+0xdbc>
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	681a      	ldr	r2, [r3, #0]
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	f022 021c 	bic.w	r2, r2, #28
 801c5e0:	601a      	str	r2, [r3, #0]
 801c5e2:	e007      	b.n	801c5f4 <HAL_DMA_IRQHandler+0xdcc>
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	681a      	ldr	r2, [r3, #0]
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	f022 020e 	bic.w	r2, r2, #14
 801c5f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c5f8:	f003 031f 	and.w	r3, r3, #31
 801c5fc:	2201      	movs	r2, #1
 801c5fe:	409a      	lsls	r2, r3
 801c600:	69fb      	ldr	r3, [r7, #28]
 801c602:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	2201      	movs	r2, #1
 801c608:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	2201      	movs	r2, #1
 801c60e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	2200      	movs	r2, #0
 801c616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d009      	beq.n	801c636 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c626:	6878      	ldr	r0, [r7, #4]
 801c628:	4798      	blx	r3
 801c62a:	e004      	b.n	801c636 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801c62c:	bf00      	nop
 801c62e:	e002      	b.n	801c636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c630:	bf00      	nop
 801c632:	e000      	b.n	801c636 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c634:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801c636:	3728      	adds	r7, #40	@ 0x28
 801c638:	46bd      	mov	sp, r7
 801c63a:	bd80      	pop	{r7, pc}
 801c63c:	40020010 	.word	0x40020010
 801c640:	40020028 	.word	0x40020028
 801c644:	40020040 	.word	0x40020040
 801c648:	40020058 	.word	0x40020058
 801c64c:	40020070 	.word	0x40020070
 801c650:	40020088 	.word	0x40020088
 801c654:	400200a0 	.word	0x400200a0
 801c658:	400200b8 	.word	0x400200b8
 801c65c:	40020410 	.word	0x40020410
 801c660:	40020428 	.word	0x40020428
 801c664:	40020440 	.word	0x40020440
 801c668:	40020458 	.word	0x40020458
 801c66c:	40020470 	.word	0x40020470
 801c670:	40020488 	.word	0x40020488
 801c674:	400204a0 	.word	0x400204a0
 801c678:	400204b8 	.word	0x400204b8

0801c67c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c67c:	b480      	push	{r7}
 801c67e:	b085      	sub	sp, #20
 801c680:	af00      	add	r7, sp, #0
 801c682:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	4a42      	ldr	r2, [pc, #264]	@ (801c794 <DMA_CalcBaseAndBitshift+0x118>)
 801c68a:	4293      	cmp	r3, r2
 801c68c:	d04a      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	681b      	ldr	r3, [r3, #0]
 801c692:	4a41      	ldr	r2, [pc, #260]	@ (801c798 <DMA_CalcBaseAndBitshift+0x11c>)
 801c694:	4293      	cmp	r3, r2
 801c696:	d045      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	4a3f      	ldr	r2, [pc, #252]	@ (801c79c <DMA_CalcBaseAndBitshift+0x120>)
 801c69e:	4293      	cmp	r3, r2
 801c6a0:	d040      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4a3e      	ldr	r2, [pc, #248]	@ (801c7a0 <DMA_CalcBaseAndBitshift+0x124>)
 801c6a8:	4293      	cmp	r3, r2
 801c6aa:	d03b      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	4a3c      	ldr	r2, [pc, #240]	@ (801c7a4 <DMA_CalcBaseAndBitshift+0x128>)
 801c6b2:	4293      	cmp	r3, r2
 801c6b4:	d036      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	4a3b      	ldr	r2, [pc, #236]	@ (801c7a8 <DMA_CalcBaseAndBitshift+0x12c>)
 801c6bc:	4293      	cmp	r3, r2
 801c6be:	d031      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	4a39      	ldr	r2, [pc, #228]	@ (801c7ac <DMA_CalcBaseAndBitshift+0x130>)
 801c6c6:	4293      	cmp	r3, r2
 801c6c8:	d02c      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	4a38      	ldr	r2, [pc, #224]	@ (801c7b0 <DMA_CalcBaseAndBitshift+0x134>)
 801c6d0:	4293      	cmp	r3, r2
 801c6d2:	d027      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	4a36      	ldr	r2, [pc, #216]	@ (801c7b4 <DMA_CalcBaseAndBitshift+0x138>)
 801c6da:	4293      	cmp	r3, r2
 801c6dc:	d022      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6de:	687b      	ldr	r3, [r7, #4]
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	4a35      	ldr	r2, [pc, #212]	@ (801c7b8 <DMA_CalcBaseAndBitshift+0x13c>)
 801c6e4:	4293      	cmp	r3, r2
 801c6e6:	d01d      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	4a33      	ldr	r2, [pc, #204]	@ (801c7bc <DMA_CalcBaseAndBitshift+0x140>)
 801c6ee:	4293      	cmp	r3, r2
 801c6f0:	d018      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6f2:	687b      	ldr	r3, [r7, #4]
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	4a32      	ldr	r2, [pc, #200]	@ (801c7c0 <DMA_CalcBaseAndBitshift+0x144>)
 801c6f8:	4293      	cmp	r3, r2
 801c6fa:	d013      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	4a30      	ldr	r2, [pc, #192]	@ (801c7c4 <DMA_CalcBaseAndBitshift+0x148>)
 801c702:	4293      	cmp	r3, r2
 801c704:	d00e      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	4a2f      	ldr	r2, [pc, #188]	@ (801c7c8 <DMA_CalcBaseAndBitshift+0x14c>)
 801c70c:	4293      	cmp	r3, r2
 801c70e:	d009      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	4a2d      	ldr	r2, [pc, #180]	@ (801c7cc <DMA_CalcBaseAndBitshift+0x150>)
 801c716:	4293      	cmp	r3, r2
 801c718:	d004      	beq.n	801c724 <DMA_CalcBaseAndBitshift+0xa8>
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	4a2c      	ldr	r2, [pc, #176]	@ (801c7d0 <DMA_CalcBaseAndBitshift+0x154>)
 801c720:	4293      	cmp	r3, r2
 801c722:	d101      	bne.n	801c728 <DMA_CalcBaseAndBitshift+0xac>
 801c724:	2301      	movs	r3, #1
 801c726:	e000      	b.n	801c72a <DMA_CalcBaseAndBitshift+0xae>
 801c728:	2300      	movs	r3, #0
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d024      	beq.n	801c778 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	681b      	ldr	r3, [r3, #0]
 801c732:	b2db      	uxtb	r3, r3
 801c734:	3b10      	subs	r3, #16
 801c736:	4a27      	ldr	r2, [pc, #156]	@ (801c7d4 <DMA_CalcBaseAndBitshift+0x158>)
 801c738:	fba2 2303 	umull	r2, r3, r2, r3
 801c73c:	091b      	lsrs	r3, r3, #4
 801c73e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	f003 0307 	and.w	r3, r3, #7
 801c746:	4a24      	ldr	r2, [pc, #144]	@ (801c7d8 <DMA_CalcBaseAndBitshift+0x15c>)
 801c748:	5cd3      	ldrb	r3, [r2, r3]
 801c74a:	461a      	mov	r2, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	2b03      	cmp	r3, #3
 801c754:	d908      	bls.n	801c768 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	461a      	mov	r2, r3
 801c75c:	4b1f      	ldr	r3, [pc, #124]	@ (801c7dc <DMA_CalcBaseAndBitshift+0x160>)
 801c75e:	4013      	ands	r3, r2
 801c760:	1d1a      	adds	r2, r3, #4
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	659a      	str	r2, [r3, #88]	@ 0x58
 801c766:	e00d      	b.n	801c784 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	461a      	mov	r2, r3
 801c76e:	4b1b      	ldr	r3, [pc, #108]	@ (801c7dc <DMA_CalcBaseAndBitshift+0x160>)
 801c770:	4013      	ands	r3, r2
 801c772:	687a      	ldr	r2, [r7, #4]
 801c774:	6593      	str	r3, [r2, #88]	@ 0x58
 801c776:	e005      	b.n	801c784 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801c788:	4618      	mov	r0, r3
 801c78a:	3714      	adds	r7, #20
 801c78c:	46bd      	mov	sp, r7
 801c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c792:	4770      	bx	lr
 801c794:	40020010 	.word	0x40020010
 801c798:	40020028 	.word	0x40020028
 801c79c:	40020040 	.word	0x40020040
 801c7a0:	40020058 	.word	0x40020058
 801c7a4:	40020070 	.word	0x40020070
 801c7a8:	40020088 	.word	0x40020088
 801c7ac:	400200a0 	.word	0x400200a0
 801c7b0:	400200b8 	.word	0x400200b8
 801c7b4:	40020410 	.word	0x40020410
 801c7b8:	40020428 	.word	0x40020428
 801c7bc:	40020440 	.word	0x40020440
 801c7c0:	40020458 	.word	0x40020458
 801c7c4:	40020470 	.word	0x40020470
 801c7c8:	40020488 	.word	0x40020488
 801c7cc:	400204a0 	.word	0x400204a0
 801c7d0:	400204b8 	.word	0x400204b8
 801c7d4:	aaaaaaab 	.word	0xaaaaaaab
 801c7d8:	08028330 	.word	0x08028330
 801c7dc:	fffffc00 	.word	0xfffffc00

0801c7e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c7e0:	b480      	push	{r7}
 801c7e2:	b085      	sub	sp, #20
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c7e8:	2300      	movs	r3, #0
 801c7ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	699b      	ldr	r3, [r3, #24]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d120      	bne.n	801c836 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c7f8:	2b03      	cmp	r3, #3
 801c7fa:	d858      	bhi.n	801c8ae <DMA_CheckFifoParam+0xce>
 801c7fc:	a201      	add	r2, pc, #4	@ (adr r2, 801c804 <DMA_CheckFifoParam+0x24>)
 801c7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c802:	bf00      	nop
 801c804:	0801c815 	.word	0x0801c815
 801c808:	0801c827 	.word	0x0801c827
 801c80c:	0801c815 	.word	0x0801c815
 801c810:	0801c8af 	.word	0x0801c8af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d048      	beq.n	801c8b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c820:	2301      	movs	r3, #1
 801c822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c824:	e045      	b.n	801c8b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c82a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c82e:	d142      	bne.n	801c8b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c830:	2301      	movs	r3, #1
 801c832:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c834:	e03f      	b.n	801c8b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	699b      	ldr	r3, [r3, #24]
 801c83a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c83e:	d123      	bne.n	801c888 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c844:	2b03      	cmp	r3, #3
 801c846:	d838      	bhi.n	801c8ba <DMA_CheckFifoParam+0xda>
 801c848:	a201      	add	r2, pc, #4	@ (adr r2, 801c850 <DMA_CheckFifoParam+0x70>)
 801c84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c84e:	bf00      	nop
 801c850:	0801c861 	.word	0x0801c861
 801c854:	0801c867 	.word	0x0801c867
 801c858:	0801c861 	.word	0x0801c861
 801c85c:	0801c879 	.word	0x0801c879
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c860:	2301      	movs	r3, #1
 801c862:	73fb      	strb	r3, [r7, #15]
        break;
 801c864:	e030      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c86a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c86e:	2b00      	cmp	r3, #0
 801c870:	d025      	beq.n	801c8be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c872:	2301      	movs	r3, #1
 801c874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c876:	e022      	b.n	801c8be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c87c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c880:	d11f      	bne.n	801c8c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c882:	2301      	movs	r3, #1
 801c884:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c886:	e01c      	b.n	801c8c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c88c:	2b02      	cmp	r3, #2
 801c88e:	d902      	bls.n	801c896 <DMA_CheckFifoParam+0xb6>
 801c890:	2b03      	cmp	r3, #3
 801c892:	d003      	beq.n	801c89c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c894:	e018      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c896:	2301      	movs	r3, #1
 801c898:	73fb      	strb	r3, [r7, #15]
        break;
 801c89a:	e015      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	d00e      	beq.n	801c8c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c8a8:	2301      	movs	r3, #1
 801c8aa:	73fb      	strb	r3, [r7, #15]
    break;
 801c8ac:	e00b      	b.n	801c8c6 <DMA_CheckFifoParam+0xe6>
        break;
 801c8ae:	bf00      	nop
 801c8b0:	e00a      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c8b2:	bf00      	nop
 801c8b4:	e008      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c8b6:	bf00      	nop
 801c8b8:	e006      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c8ba:	bf00      	nop
 801c8bc:	e004      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c8be:	bf00      	nop
 801c8c0:	e002      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c8c2:	bf00      	nop
 801c8c4:	e000      	b.n	801c8c8 <DMA_CheckFifoParam+0xe8>
    break;
 801c8c6:	bf00      	nop
    }
  }

  return status;
 801c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	3714      	adds	r7, #20
 801c8ce:	46bd      	mov	sp, r7
 801c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d4:	4770      	bx	lr
 801c8d6:	bf00      	nop

0801c8d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c8d8:	b480      	push	{r7}
 801c8da:	b085      	sub	sp, #20
 801c8dc:	af00      	add	r7, sp, #0
 801c8de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c8e0:	687b      	ldr	r3, [r7, #4]
 801c8e2:	681b      	ldr	r3, [r3, #0]
 801c8e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	4a38      	ldr	r2, [pc, #224]	@ (801c9cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c8ec:	4293      	cmp	r3, r2
 801c8ee:	d022      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	4a36      	ldr	r2, [pc, #216]	@ (801c9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c8f6:	4293      	cmp	r3, r2
 801c8f8:	d01d      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	4a35      	ldr	r2, [pc, #212]	@ (801c9d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c900:	4293      	cmp	r3, r2
 801c902:	d018      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4a33      	ldr	r2, [pc, #204]	@ (801c9d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c90a:	4293      	cmp	r3, r2
 801c90c:	d013      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	681b      	ldr	r3, [r3, #0]
 801c912:	4a32      	ldr	r2, [pc, #200]	@ (801c9dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c914:	4293      	cmp	r3, r2
 801c916:	d00e      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	4a30      	ldr	r2, [pc, #192]	@ (801c9e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c91e:	4293      	cmp	r3, r2
 801c920:	d009      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	4a2f      	ldr	r2, [pc, #188]	@ (801c9e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c928:	4293      	cmp	r3, r2
 801c92a:	d004      	beq.n	801c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	4a2d      	ldr	r2, [pc, #180]	@ (801c9e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c932:	4293      	cmp	r3, r2
 801c934:	d101      	bne.n	801c93a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c936:	2301      	movs	r3, #1
 801c938:	e000      	b.n	801c93c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c93a:	2300      	movs	r3, #0
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d01a      	beq.n	801c976 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	b2db      	uxtb	r3, r3
 801c946:	3b08      	subs	r3, #8
 801c948:	4a28      	ldr	r2, [pc, #160]	@ (801c9ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c94a:	fba2 2303 	umull	r2, r3, r2, r3
 801c94e:	091b      	lsrs	r3, r3, #4
 801c950:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c952:	68fa      	ldr	r2, [r7, #12]
 801c954:	4b26      	ldr	r3, [pc, #152]	@ (801c9f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c956:	4413      	add	r3, r2
 801c958:	009b      	lsls	r3, r3, #2
 801c95a:	461a      	mov	r2, r3
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	4a24      	ldr	r2, [pc, #144]	@ (801c9f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c964:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c966:	68fb      	ldr	r3, [r7, #12]
 801c968:	f003 031f 	and.w	r3, r3, #31
 801c96c:	2201      	movs	r2, #1
 801c96e:	409a      	lsls	r2, r3
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c974:	e024      	b.n	801c9c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	3b10      	subs	r3, #16
 801c97e:	4a1e      	ldr	r2, [pc, #120]	@ (801c9f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c980:	fba2 2303 	umull	r2, r3, r2, r3
 801c984:	091b      	lsrs	r3, r3, #4
 801c986:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c988:	68bb      	ldr	r3, [r7, #8]
 801c98a:	4a1c      	ldr	r2, [pc, #112]	@ (801c9fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c98c:	4293      	cmp	r3, r2
 801c98e:	d806      	bhi.n	801c99e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c990:	68bb      	ldr	r3, [r7, #8]
 801c992:	4a1b      	ldr	r2, [pc, #108]	@ (801ca00 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c994:	4293      	cmp	r3, r2
 801c996:	d902      	bls.n	801c99e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	3308      	adds	r3, #8
 801c99c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c99e:	68fa      	ldr	r2, [r7, #12]
 801c9a0:	4b18      	ldr	r3, [pc, #96]	@ (801ca04 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c9a2:	4413      	add	r3, r2
 801c9a4:	009b      	lsls	r3, r3, #2
 801c9a6:	461a      	mov	r2, r3
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	4a16      	ldr	r2, [pc, #88]	@ (801ca08 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c9b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c9b2:	68fb      	ldr	r3, [r7, #12]
 801c9b4:	f003 031f 	and.w	r3, r3, #31
 801c9b8:	2201      	movs	r2, #1
 801c9ba:	409a      	lsls	r2, r3
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c9c0:	bf00      	nop
 801c9c2:	3714      	adds	r7, #20
 801c9c4:	46bd      	mov	sp, r7
 801c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ca:	4770      	bx	lr
 801c9cc:	58025408 	.word	0x58025408
 801c9d0:	5802541c 	.word	0x5802541c
 801c9d4:	58025430 	.word	0x58025430
 801c9d8:	58025444 	.word	0x58025444
 801c9dc:	58025458 	.word	0x58025458
 801c9e0:	5802546c 	.word	0x5802546c
 801c9e4:	58025480 	.word	0x58025480
 801c9e8:	58025494 	.word	0x58025494
 801c9ec:	cccccccd 	.word	0xcccccccd
 801c9f0:	16009600 	.word	0x16009600
 801c9f4:	58025880 	.word	0x58025880
 801c9f8:	aaaaaaab 	.word	0xaaaaaaab
 801c9fc:	400204b8 	.word	0x400204b8
 801ca00:	4002040f 	.word	0x4002040f
 801ca04:	10008200 	.word	0x10008200
 801ca08:	40020880 	.word	0x40020880

0801ca0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801ca0c:	b480      	push	{r7}
 801ca0e:	b085      	sub	sp, #20
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	685b      	ldr	r3, [r3, #4]
 801ca18:	b2db      	uxtb	r3, r3
 801ca1a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d04a      	beq.n	801cab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	2b08      	cmp	r3, #8
 801ca26:	d847      	bhi.n	801cab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4a25      	ldr	r2, [pc, #148]	@ (801cac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801ca2e:	4293      	cmp	r3, r2
 801ca30:	d022      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	4a24      	ldr	r2, [pc, #144]	@ (801cac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801ca38:	4293      	cmp	r3, r2
 801ca3a:	d01d      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	4a22      	ldr	r2, [pc, #136]	@ (801cacc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801ca42:	4293      	cmp	r3, r2
 801ca44:	d018      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	681b      	ldr	r3, [r3, #0]
 801ca4a:	4a21      	ldr	r2, [pc, #132]	@ (801cad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801ca4c:	4293      	cmp	r3, r2
 801ca4e:	d013      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	4a1f      	ldr	r2, [pc, #124]	@ (801cad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801ca56:	4293      	cmp	r3, r2
 801ca58:	d00e      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca5a:	687b      	ldr	r3, [r7, #4]
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	4a1e      	ldr	r2, [pc, #120]	@ (801cad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801ca60:	4293      	cmp	r3, r2
 801ca62:	d009      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	4a1c      	ldr	r2, [pc, #112]	@ (801cadc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801ca6a:	4293      	cmp	r3, r2
 801ca6c:	d004      	beq.n	801ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	4a1b      	ldr	r2, [pc, #108]	@ (801cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801ca74:	4293      	cmp	r3, r2
 801ca76:	d101      	bne.n	801ca7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801ca78:	2301      	movs	r3, #1
 801ca7a:	e000      	b.n	801ca7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801ca7c:	2300      	movs	r3, #0
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d00a      	beq.n	801ca98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801ca82:	68fa      	ldr	r2, [r7, #12]
 801ca84:	4b17      	ldr	r3, [pc, #92]	@ (801cae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801ca86:	4413      	add	r3, r2
 801ca88:	009b      	lsls	r3, r3, #2
 801ca8a:	461a      	mov	r2, r3
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	4a15      	ldr	r2, [pc, #84]	@ (801cae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801ca94:	671a      	str	r2, [r3, #112]	@ 0x70
 801ca96:	e009      	b.n	801caac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801ca98:	68fa      	ldr	r2, [r7, #12]
 801ca9a:	4b14      	ldr	r3, [pc, #80]	@ (801caec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801ca9c:	4413      	add	r3, r2
 801ca9e:	009b      	lsls	r3, r3, #2
 801caa0:	461a      	mov	r2, r3
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	4a11      	ldr	r2, [pc, #68]	@ (801caf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801caaa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	3b01      	subs	r3, #1
 801cab0:	2201      	movs	r2, #1
 801cab2:	409a      	lsls	r2, r3
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801cab8:	bf00      	nop
 801caba:	3714      	adds	r7, #20
 801cabc:	46bd      	mov	sp, r7
 801cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cac2:	4770      	bx	lr
 801cac4:	58025408 	.word	0x58025408
 801cac8:	5802541c 	.word	0x5802541c
 801cacc:	58025430 	.word	0x58025430
 801cad0:	58025444 	.word	0x58025444
 801cad4:	58025458 	.word	0x58025458
 801cad8:	5802546c 	.word	0x5802546c
 801cadc:	58025480 	.word	0x58025480
 801cae0:	58025494 	.word	0x58025494
 801cae4:	1600963f 	.word	0x1600963f
 801cae8:	58025940 	.word	0x58025940
 801caec:	1000823f 	.word	0x1000823f
 801caf0:	40020940 	.word	0x40020940

0801caf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801caf4:	b480      	push	{r7}
 801caf6:	b089      	sub	sp, #36	@ 0x24
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
 801cafc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801cafe:	2300      	movs	r3, #0
 801cb00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801cb02:	4b89      	ldr	r3, [pc, #548]	@ (801cd28 <HAL_GPIO_Init+0x234>)
 801cb04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801cb06:	e194      	b.n	801ce32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801cb08:	683b      	ldr	r3, [r7, #0]
 801cb0a:	681a      	ldr	r2, [r3, #0]
 801cb0c:	2101      	movs	r1, #1
 801cb0e:	69fb      	ldr	r3, [r7, #28]
 801cb10:	fa01 f303 	lsl.w	r3, r1, r3
 801cb14:	4013      	ands	r3, r2
 801cb16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801cb18:	693b      	ldr	r3, [r7, #16]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	f000 8186 	beq.w	801ce2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	685b      	ldr	r3, [r3, #4]
 801cb24:	f003 0303 	and.w	r3, r3, #3
 801cb28:	2b01      	cmp	r3, #1
 801cb2a:	d005      	beq.n	801cb38 <HAL_GPIO_Init+0x44>
 801cb2c:	683b      	ldr	r3, [r7, #0]
 801cb2e:	685b      	ldr	r3, [r3, #4]
 801cb30:	f003 0303 	and.w	r3, r3, #3
 801cb34:	2b02      	cmp	r3, #2
 801cb36:	d130      	bne.n	801cb9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	689b      	ldr	r3, [r3, #8]
 801cb3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801cb3e:	69fb      	ldr	r3, [r7, #28]
 801cb40:	005b      	lsls	r3, r3, #1
 801cb42:	2203      	movs	r2, #3
 801cb44:	fa02 f303 	lsl.w	r3, r2, r3
 801cb48:	43db      	mvns	r3, r3
 801cb4a:	69ba      	ldr	r2, [r7, #24]
 801cb4c:	4013      	ands	r3, r2
 801cb4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801cb50:	683b      	ldr	r3, [r7, #0]
 801cb52:	68da      	ldr	r2, [r3, #12]
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	005b      	lsls	r3, r3, #1
 801cb58:	fa02 f303 	lsl.w	r3, r2, r3
 801cb5c:	69ba      	ldr	r2, [r7, #24]
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	69ba      	ldr	r2, [r7, #24]
 801cb66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801cb68:	687b      	ldr	r3, [r7, #4]
 801cb6a:	685b      	ldr	r3, [r3, #4]
 801cb6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801cb6e:	2201      	movs	r2, #1
 801cb70:	69fb      	ldr	r3, [r7, #28]
 801cb72:	fa02 f303 	lsl.w	r3, r2, r3
 801cb76:	43db      	mvns	r3, r3
 801cb78:	69ba      	ldr	r2, [r7, #24]
 801cb7a:	4013      	ands	r3, r2
 801cb7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801cb7e:	683b      	ldr	r3, [r7, #0]
 801cb80:	685b      	ldr	r3, [r3, #4]
 801cb82:	091b      	lsrs	r3, r3, #4
 801cb84:	f003 0201 	and.w	r2, r3, #1
 801cb88:	69fb      	ldr	r3, [r7, #28]
 801cb8a:	fa02 f303 	lsl.w	r3, r2, r3
 801cb8e:	69ba      	ldr	r2, [r7, #24]
 801cb90:	4313      	orrs	r3, r2
 801cb92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	69ba      	ldr	r2, [r7, #24]
 801cb98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	685b      	ldr	r3, [r3, #4]
 801cb9e:	f003 0303 	and.w	r3, r3, #3
 801cba2:	2b03      	cmp	r3, #3
 801cba4:	d017      	beq.n	801cbd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	68db      	ldr	r3, [r3, #12]
 801cbaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801cbac:	69fb      	ldr	r3, [r7, #28]
 801cbae:	005b      	lsls	r3, r3, #1
 801cbb0:	2203      	movs	r2, #3
 801cbb2:	fa02 f303 	lsl.w	r3, r2, r3
 801cbb6:	43db      	mvns	r3, r3
 801cbb8:	69ba      	ldr	r2, [r7, #24]
 801cbba:	4013      	ands	r3, r2
 801cbbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801cbbe:	683b      	ldr	r3, [r7, #0]
 801cbc0:	689a      	ldr	r2, [r3, #8]
 801cbc2:	69fb      	ldr	r3, [r7, #28]
 801cbc4:	005b      	lsls	r3, r3, #1
 801cbc6:	fa02 f303 	lsl.w	r3, r2, r3
 801cbca:	69ba      	ldr	r2, [r7, #24]
 801cbcc:	4313      	orrs	r3, r2
 801cbce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	69ba      	ldr	r2, [r7, #24]
 801cbd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801cbd6:	683b      	ldr	r3, [r7, #0]
 801cbd8:	685b      	ldr	r3, [r3, #4]
 801cbda:	f003 0303 	and.w	r3, r3, #3
 801cbde:	2b02      	cmp	r3, #2
 801cbe0:	d123      	bne.n	801cc2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801cbe2:	69fb      	ldr	r3, [r7, #28]
 801cbe4:	08da      	lsrs	r2, r3, #3
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	3208      	adds	r2, #8
 801cbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cbee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801cbf0:	69fb      	ldr	r3, [r7, #28]
 801cbf2:	f003 0307 	and.w	r3, r3, #7
 801cbf6:	009b      	lsls	r3, r3, #2
 801cbf8:	220f      	movs	r2, #15
 801cbfa:	fa02 f303 	lsl.w	r3, r2, r3
 801cbfe:	43db      	mvns	r3, r3
 801cc00:	69ba      	ldr	r2, [r7, #24]
 801cc02:	4013      	ands	r3, r2
 801cc04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801cc06:	683b      	ldr	r3, [r7, #0]
 801cc08:	691a      	ldr	r2, [r3, #16]
 801cc0a:	69fb      	ldr	r3, [r7, #28]
 801cc0c:	f003 0307 	and.w	r3, r3, #7
 801cc10:	009b      	lsls	r3, r3, #2
 801cc12:	fa02 f303 	lsl.w	r3, r2, r3
 801cc16:	69ba      	ldr	r2, [r7, #24]
 801cc18:	4313      	orrs	r3, r2
 801cc1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801cc1c:	69fb      	ldr	r3, [r7, #28]
 801cc1e:	08da      	lsrs	r2, r3, #3
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	3208      	adds	r2, #8
 801cc24:	69b9      	ldr	r1, [r7, #24]
 801cc26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801cc30:	69fb      	ldr	r3, [r7, #28]
 801cc32:	005b      	lsls	r3, r3, #1
 801cc34:	2203      	movs	r2, #3
 801cc36:	fa02 f303 	lsl.w	r3, r2, r3
 801cc3a:	43db      	mvns	r3, r3
 801cc3c:	69ba      	ldr	r2, [r7, #24]
 801cc3e:	4013      	ands	r3, r2
 801cc40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	685b      	ldr	r3, [r3, #4]
 801cc46:	f003 0203 	and.w	r2, r3, #3
 801cc4a:	69fb      	ldr	r3, [r7, #28]
 801cc4c:	005b      	lsls	r3, r3, #1
 801cc4e:	fa02 f303 	lsl.w	r3, r2, r3
 801cc52:	69ba      	ldr	r2, [r7, #24]
 801cc54:	4313      	orrs	r3, r2
 801cc56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	69ba      	ldr	r2, [r7, #24]
 801cc5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	685b      	ldr	r3, [r3, #4]
 801cc62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	f000 80e0 	beq.w	801ce2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801cc6c:	4b2f      	ldr	r3, [pc, #188]	@ (801cd2c <HAL_GPIO_Init+0x238>)
 801cc6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801cc72:	4a2e      	ldr	r2, [pc, #184]	@ (801cd2c <HAL_GPIO_Init+0x238>)
 801cc74:	f043 0302 	orr.w	r3, r3, #2
 801cc78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801cc7c:	4b2b      	ldr	r3, [pc, #172]	@ (801cd2c <HAL_GPIO_Init+0x238>)
 801cc7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801cc82:	f003 0302 	and.w	r3, r3, #2
 801cc86:	60fb      	str	r3, [r7, #12]
 801cc88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801cc8a:	4a29      	ldr	r2, [pc, #164]	@ (801cd30 <HAL_GPIO_Init+0x23c>)
 801cc8c:	69fb      	ldr	r3, [r7, #28]
 801cc8e:	089b      	lsrs	r3, r3, #2
 801cc90:	3302      	adds	r3, #2
 801cc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801cc98:	69fb      	ldr	r3, [r7, #28]
 801cc9a:	f003 0303 	and.w	r3, r3, #3
 801cc9e:	009b      	lsls	r3, r3, #2
 801cca0:	220f      	movs	r2, #15
 801cca2:	fa02 f303 	lsl.w	r3, r2, r3
 801cca6:	43db      	mvns	r3, r3
 801cca8:	69ba      	ldr	r2, [r7, #24]
 801ccaa:	4013      	ands	r3, r2
 801ccac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	4a20      	ldr	r2, [pc, #128]	@ (801cd34 <HAL_GPIO_Init+0x240>)
 801ccb2:	4293      	cmp	r3, r2
 801ccb4:	d052      	beq.n	801cd5c <HAL_GPIO_Init+0x268>
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	4a1f      	ldr	r2, [pc, #124]	@ (801cd38 <HAL_GPIO_Init+0x244>)
 801ccba:	4293      	cmp	r3, r2
 801ccbc:	d031      	beq.n	801cd22 <HAL_GPIO_Init+0x22e>
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	4a1e      	ldr	r2, [pc, #120]	@ (801cd3c <HAL_GPIO_Init+0x248>)
 801ccc2:	4293      	cmp	r3, r2
 801ccc4:	d02b      	beq.n	801cd1e <HAL_GPIO_Init+0x22a>
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	4a1d      	ldr	r2, [pc, #116]	@ (801cd40 <HAL_GPIO_Init+0x24c>)
 801ccca:	4293      	cmp	r3, r2
 801cccc:	d025      	beq.n	801cd1a <HAL_GPIO_Init+0x226>
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	4a1c      	ldr	r2, [pc, #112]	@ (801cd44 <HAL_GPIO_Init+0x250>)
 801ccd2:	4293      	cmp	r3, r2
 801ccd4:	d01f      	beq.n	801cd16 <HAL_GPIO_Init+0x222>
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	4a1b      	ldr	r2, [pc, #108]	@ (801cd48 <HAL_GPIO_Init+0x254>)
 801ccda:	4293      	cmp	r3, r2
 801ccdc:	d019      	beq.n	801cd12 <HAL_GPIO_Init+0x21e>
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	4a1a      	ldr	r2, [pc, #104]	@ (801cd4c <HAL_GPIO_Init+0x258>)
 801cce2:	4293      	cmp	r3, r2
 801cce4:	d013      	beq.n	801cd0e <HAL_GPIO_Init+0x21a>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	4a19      	ldr	r2, [pc, #100]	@ (801cd50 <HAL_GPIO_Init+0x25c>)
 801ccea:	4293      	cmp	r3, r2
 801ccec:	d00d      	beq.n	801cd0a <HAL_GPIO_Init+0x216>
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	4a18      	ldr	r2, [pc, #96]	@ (801cd54 <HAL_GPIO_Init+0x260>)
 801ccf2:	4293      	cmp	r3, r2
 801ccf4:	d007      	beq.n	801cd06 <HAL_GPIO_Init+0x212>
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	4a17      	ldr	r2, [pc, #92]	@ (801cd58 <HAL_GPIO_Init+0x264>)
 801ccfa:	4293      	cmp	r3, r2
 801ccfc:	d101      	bne.n	801cd02 <HAL_GPIO_Init+0x20e>
 801ccfe:	2309      	movs	r3, #9
 801cd00:	e02d      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd02:	230a      	movs	r3, #10
 801cd04:	e02b      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd06:	2308      	movs	r3, #8
 801cd08:	e029      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd0a:	2307      	movs	r3, #7
 801cd0c:	e027      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd0e:	2306      	movs	r3, #6
 801cd10:	e025      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd12:	2305      	movs	r3, #5
 801cd14:	e023      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd16:	2304      	movs	r3, #4
 801cd18:	e021      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd1a:	2303      	movs	r3, #3
 801cd1c:	e01f      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd1e:	2302      	movs	r3, #2
 801cd20:	e01d      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd22:	2301      	movs	r3, #1
 801cd24:	e01b      	b.n	801cd5e <HAL_GPIO_Init+0x26a>
 801cd26:	bf00      	nop
 801cd28:	58000080 	.word	0x58000080
 801cd2c:	58024400 	.word	0x58024400
 801cd30:	58000400 	.word	0x58000400
 801cd34:	58020000 	.word	0x58020000
 801cd38:	58020400 	.word	0x58020400
 801cd3c:	58020800 	.word	0x58020800
 801cd40:	58020c00 	.word	0x58020c00
 801cd44:	58021000 	.word	0x58021000
 801cd48:	58021400 	.word	0x58021400
 801cd4c:	58021800 	.word	0x58021800
 801cd50:	58021c00 	.word	0x58021c00
 801cd54:	58022000 	.word	0x58022000
 801cd58:	58022400 	.word	0x58022400
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	69fa      	ldr	r2, [r7, #28]
 801cd60:	f002 0203 	and.w	r2, r2, #3
 801cd64:	0092      	lsls	r2, r2, #2
 801cd66:	4093      	lsls	r3, r2
 801cd68:	69ba      	ldr	r2, [r7, #24]
 801cd6a:	4313      	orrs	r3, r2
 801cd6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cd6e:	4938      	ldr	r1, [pc, #224]	@ (801ce50 <HAL_GPIO_Init+0x35c>)
 801cd70:	69fb      	ldr	r3, [r7, #28]
 801cd72:	089b      	lsrs	r3, r3, #2
 801cd74:	3302      	adds	r3, #2
 801cd76:	69ba      	ldr	r2, [r7, #24]
 801cd78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801cd7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cd84:	693b      	ldr	r3, [r7, #16]
 801cd86:	43db      	mvns	r3, r3
 801cd88:	69ba      	ldr	r2, [r7, #24]
 801cd8a:	4013      	ands	r3, r2
 801cd8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801cd8e:	683b      	ldr	r3, [r7, #0]
 801cd90:	685b      	ldr	r3, [r3, #4]
 801cd92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d003      	beq.n	801cda2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801cd9a:	69ba      	ldr	r2, [r7, #24]
 801cd9c:	693b      	ldr	r3, [r7, #16]
 801cd9e:	4313      	orrs	r3, r2
 801cda0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801cda2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cda6:	69bb      	ldr	r3, [r7, #24]
 801cda8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801cdaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cdae:	685b      	ldr	r3, [r3, #4]
 801cdb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cdb2:	693b      	ldr	r3, [r7, #16]
 801cdb4:	43db      	mvns	r3, r3
 801cdb6:	69ba      	ldr	r2, [r7, #24]
 801cdb8:	4013      	ands	r3, r2
 801cdba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801cdbc:	683b      	ldr	r3, [r7, #0]
 801cdbe:	685b      	ldr	r3, [r3, #4]
 801cdc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d003      	beq.n	801cdd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801cdc8:	69ba      	ldr	r2, [r7, #24]
 801cdca:	693b      	ldr	r3, [r7, #16]
 801cdcc:	4313      	orrs	r3, r2
 801cdce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801cdd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cdd4:	69bb      	ldr	r3, [r7, #24]
 801cdd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801cdd8:	697b      	ldr	r3, [r7, #20]
 801cdda:	685b      	ldr	r3, [r3, #4]
 801cddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cdde:	693b      	ldr	r3, [r7, #16]
 801cde0:	43db      	mvns	r3, r3
 801cde2:	69ba      	ldr	r2, [r7, #24]
 801cde4:	4013      	ands	r3, r2
 801cde6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cde8:	683b      	ldr	r3, [r7, #0]
 801cdea:	685b      	ldr	r3, [r3, #4]
 801cdec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cdf0:	2b00      	cmp	r3, #0
 801cdf2:	d003      	beq.n	801cdfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801cdf4:	69ba      	ldr	r2, [r7, #24]
 801cdf6:	693b      	ldr	r3, [r7, #16]
 801cdf8:	4313      	orrs	r3, r2
 801cdfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	69ba      	ldr	r2, [r7, #24]
 801ce00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801ce02:	697b      	ldr	r3, [r7, #20]
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ce08:	693b      	ldr	r3, [r7, #16]
 801ce0a:	43db      	mvns	r3, r3
 801ce0c:	69ba      	ldr	r2, [r7, #24]
 801ce0e:	4013      	ands	r3, r2
 801ce10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ce12:	683b      	ldr	r3, [r7, #0]
 801ce14:	685b      	ldr	r3, [r3, #4]
 801ce16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d003      	beq.n	801ce26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801ce1e:	69ba      	ldr	r2, [r7, #24]
 801ce20:	693b      	ldr	r3, [r7, #16]
 801ce22:	4313      	orrs	r3, r2
 801ce24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ce26:	697b      	ldr	r3, [r7, #20]
 801ce28:	69ba      	ldr	r2, [r7, #24]
 801ce2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ce2c:	69fb      	ldr	r3, [r7, #28]
 801ce2e:	3301      	adds	r3, #1
 801ce30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ce32:	683b      	ldr	r3, [r7, #0]
 801ce34:	681a      	ldr	r2, [r3, #0]
 801ce36:	69fb      	ldr	r3, [r7, #28]
 801ce38:	fa22 f303 	lsr.w	r3, r2, r3
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	f47f ae63 	bne.w	801cb08 <HAL_GPIO_Init+0x14>
  }
}
 801ce42:	bf00      	nop
 801ce44:	bf00      	nop
 801ce46:	3724      	adds	r7, #36	@ 0x24
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce4e:	4770      	bx	lr
 801ce50:	58000400 	.word	0x58000400

0801ce54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ce54:	b480      	push	{r7}
 801ce56:	b083      	sub	sp, #12
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	460b      	mov	r3, r1
 801ce5e:	807b      	strh	r3, [r7, #2]
 801ce60:	4613      	mov	r3, r2
 801ce62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ce64:	787b      	ldrb	r3, [r7, #1]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d003      	beq.n	801ce72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ce6a:	887a      	ldrh	r2, [r7, #2]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ce70:	e003      	b.n	801ce7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ce72:	887b      	ldrh	r3, [r7, #2]
 801ce74:	041a      	lsls	r2, r3, #16
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	619a      	str	r2, [r3, #24]
}
 801ce7a:	bf00      	nop
 801ce7c:	370c      	adds	r7, #12
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce84:	4770      	bx	lr
	...

0801ce88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d101      	bne.n	801ce9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ce96:	2301      	movs	r3, #1
 801ce98:	e08b      	b.n	801cfb2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cea0:	b2db      	uxtb	r3, r3
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d106      	bne.n	801ceb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	2200      	movs	r2, #0
 801ceaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801ceae:	6878      	ldr	r0, [r7, #4]
 801ceb0:	f7e5 fc36 	bl	8002720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2224      	movs	r2, #36	@ 0x24
 801ceb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	681a      	ldr	r2, [r3, #0]
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	f022 0201 	bic.w	r2, r2, #1
 801ceca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	685a      	ldr	r2, [r3, #4]
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801ced8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	689a      	ldr	r2, [r3, #8]
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801ceea:	687b      	ldr	r3, [r7, #4]
 801ceec:	68db      	ldr	r3, [r3, #12]
 801ceee:	2b01      	cmp	r3, #1
 801cef0:	d107      	bne.n	801cf02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	689a      	ldr	r2, [r3, #8]
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801cefe:	609a      	str	r2, [r3, #8]
 801cf00:	e006      	b.n	801cf10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	689a      	ldr	r2, [r3, #8]
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	681b      	ldr	r3, [r3, #0]
 801cf0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801cf0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	68db      	ldr	r3, [r3, #12]
 801cf14:	2b02      	cmp	r3, #2
 801cf16:	d108      	bne.n	801cf2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	685a      	ldr	r2, [r3, #4]
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801cf26:	605a      	str	r2, [r3, #4]
 801cf28:	e007      	b.n	801cf3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	681b      	ldr	r3, [r3, #0]
 801cf2e:	685a      	ldr	r2, [r3, #4]
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801cf38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	6859      	ldr	r1, [r3, #4]
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	681a      	ldr	r2, [r3, #0]
 801cf44:	4b1d      	ldr	r3, [pc, #116]	@ (801cfbc <HAL_I2C_Init+0x134>)
 801cf46:	430b      	orrs	r3, r1
 801cf48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	68da      	ldr	r2, [r3, #12]
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cf58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	691a      	ldr	r2, [r3, #16]
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	695b      	ldr	r3, [r3, #20]
 801cf62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	699b      	ldr	r3, [r3, #24]
 801cf6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	430a      	orrs	r2, r1
 801cf72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	69d9      	ldr	r1, [r3, #28]
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	6a1a      	ldr	r2, [r3, #32]
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	430a      	orrs	r2, r1
 801cf82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	681a      	ldr	r2, [r3, #0]
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	681b      	ldr	r3, [r3, #0]
 801cf8e:	f042 0201 	orr.w	r2, r2, #1
 801cf92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	2200      	movs	r2, #0
 801cf98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	2220      	movs	r2, #32
 801cf9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801cfa2:	687b      	ldr	r3, [r7, #4]
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	2200      	movs	r2, #0
 801cfac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801cfb0:	2300      	movs	r3, #0
}
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	3708      	adds	r7, #8
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	bd80      	pop	{r7, pc}
 801cfba:	bf00      	nop
 801cfbc:	02008000 	.word	0x02008000

0801cfc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801cfc0:	b480      	push	{r7}
 801cfc2:	b083      	sub	sp, #12
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
 801cfc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cfd0:	b2db      	uxtb	r3, r3
 801cfd2:	2b20      	cmp	r3, #32
 801cfd4:	d138      	bne.n	801d048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cfdc:	2b01      	cmp	r3, #1
 801cfde:	d101      	bne.n	801cfe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801cfe0:	2302      	movs	r3, #2
 801cfe2:	e032      	b.n	801d04a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	2201      	movs	r2, #1
 801cfe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cfec:	687b      	ldr	r3, [r7, #4]
 801cfee:	2224      	movs	r2, #36	@ 0x24
 801cff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	681b      	ldr	r3, [r3, #0]
 801cff8:	681a      	ldr	r2, [r3, #0]
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	f022 0201 	bic.w	r2, r2, #1
 801d002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	681a      	ldr	r2, [r3, #0]
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801d012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	6819      	ldr	r1, [r3, #0]
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	681b      	ldr	r3, [r3, #0]
 801d01e:	683a      	ldr	r2, [r7, #0]
 801d020:	430a      	orrs	r2, r1
 801d022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	681a      	ldr	r2, [r3, #0]
 801d02a:	687b      	ldr	r3, [r7, #4]
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	f042 0201 	orr.w	r2, r2, #1
 801d032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2220      	movs	r2, #32
 801d038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	2200      	movs	r2, #0
 801d040:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801d044:	2300      	movs	r3, #0
 801d046:	e000      	b.n	801d04a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801d048:	2302      	movs	r3, #2
  }
}
 801d04a:	4618      	mov	r0, r3
 801d04c:	370c      	adds	r7, #12
 801d04e:	46bd      	mov	sp, r7
 801d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d054:	4770      	bx	lr

0801d056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801d056:	b480      	push	{r7}
 801d058:	b085      	sub	sp, #20
 801d05a:	af00      	add	r7, sp, #0
 801d05c:	6078      	str	r0, [r7, #4]
 801d05e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801d066:	b2db      	uxtb	r3, r3
 801d068:	2b20      	cmp	r3, #32
 801d06a:	d139      	bne.n	801d0e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801d072:	2b01      	cmp	r3, #1
 801d074:	d101      	bne.n	801d07a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801d076:	2302      	movs	r3, #2
 801d078:	e033      	b.n	801d0e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	2201      	movs	r2, #1
 801d07e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	2224      	movs	r2, #36	@ 0x24
 801d086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	681a      	ldr	r2, [r3, #0]
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	f022 0201 	bic.w	r2, r2, #1
 801d098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801d0a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801d0aa:	683b      	ldr	r3, [r7, #0]
 801d0ac:	021b      	lsls	r3, r3, #8
 801d0ae:	68fa      	ldr	r2, [r7, #12]
 801d0b0:	4313      	orrs	r3, r2
 801d0b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	68fa      	ldr	r2, [r7, #12]
 801d0ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	681a      	ldr	r2, [r3, #0]
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	f042 0201 	orr.w	r2, r2, #1
 801d0ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	2220      	movs	r2, #32
 801d0d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801d0d4:	687b      	ldr	r3, [r7, #4]
 801d0d6:	2200      	movs	r2, #0
 801d0d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801d0dc:	2300      	movs	r3, #0
 801d0de:	e000      	b.n	801d0e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801d0e0:	2302      	movs	r3, #2
  }
}
 801d0e2:	4618      	mov	r0, r3
 801d0e4:	3714      	adds	r7, #20
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ec:	4770      	bx	lr
	...

0801d0f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b084      	sub	sp, #16
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801d0f8:	4b19      	ldr	r3, [pc, #100]	@ (801d160 <HAL_PWREx_ConfigSupply+0x70>)
 801d0fa:	68db      	ldr	r3, [r3, #12]
 801d0fc:	f003 0304 	and.w	r3, r3, #4
 801d100:	2b04      	cmp	r3, #4
 801d102:	d00a      	beq.n	801d11a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801d104:	4b16      	ldr	r3, [pc, #88]	@ (801d160 <HAL_PWREx_ConfigSupply+0x70>)
 801d106:	68db      	ldr	r3, [r3, #12]
 801d108:	f003 0307 	and.w	r3, r3, #7
 801d10c:	687a      	ldr	r2, [r7, #4]
 801d10e:	429a      	cmp	r2, r3
 801d110:	d001      	beq.n	801d116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801d112:	2301      	movs	r3, #1
 801d114:	e01f      	b.n	801d156 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801d116:	2300      	movs	r3, #0
 801d118:	e01d      	b.n	801d156 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801d11a:	4b11      	ldr	r3, [pc, #68]	@ (801d160 <HAL_PWREx_ConfigSupply+0x70>)
 801d11c:	68db      	ldr	r3, [r3, #12]
 801d11e:	f023 0207 	bic.w	r2, r3, #7
 801d122:	490f      	ldr	r1, [pc, #60]	@ (801d160 <HAL_PWREx_ConfigSupply+0x70>)
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	4313      	orrs	r3, r2
 801d128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801d12a:	f7fd fc03 	bl	801a934 <HAL_GetTick>
 801d12e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801d130:	e009      	b.n	801d146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801d132:	f7fd fbff 	bl	801a934 <HAL_GetTick>
 801d136:	4602      	mov	r2, r0
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	1ad3      	subs	r3, r2, r3
 801d13c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801d140:	d901      	bls.n	801d146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801d142:	2301      	movs	r3, #1
 801d144:	e007      	b.n	801d156 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801d146:	4b06      	ldr	r3, [pc, #24]	@ (801d160 <HAL_PWREx_ConfigSupply+0x70>)
 801d148:	685b      	ldr	r3, [r3, #4]
 801d14a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d14e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d152:	d1ee      	bne.n	801d132 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801d154:	2300      	movs	r3, #0
}
 801d156:	4618      	mov	r0, r3
 801d158:	3710      	adds	r7, #16
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bd80      	pop	{r7, pc}
 801d15e:	bf00      	nop
 801d160:	58024800 	.word	0x58024800

0801d164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801d164:	b580      	push	{r7, lr}
 801d166:	b08c      	sub	sp, #48	@ 0x30
 801d168:	af00      	add	r7, sp, #0
 801d16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d102      	bne.n	801d178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801d172:	2301      	movs	r3, #1
 801d174:	f000 bc48 	b.w	801da08 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	f003 0301 	and.w	r3, r3, #1
 801d180:	2b00      	cmp	r3, #0
 801d182:	f000 8088 	beq.w	801d296 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d186:	4b99      	ldr	r3, [pc, #612]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d188:	691b      	ldr	r3, [r3, #16]
 801d18a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d190:	4b96      	ldr	r3, [pc, #600]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d194:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801d196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d198:	2b10      	cmp	r3, #16
 801d19a:	d007      	beq.n	801d1ac <HAL_RCC_OscConfig+0x48>
 801d19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d19e:	2b18      	cmp	r3, #24
 801d1a0:	d111      	bne.n	801d1c6 <HAL_RCC_OscConfig+0x62>
 801d1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1a4:	f003 0303 	and.w	r3, r3, #3
 801d1a8:	2b02      	cmp	r3, #2
 801d1aa:	d10c      	bne.n	801d1c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d1ac:	4b8f      	ldr	r3, [pc, #572]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	d06d      	beq.n	801d294 <HAL_RCC_OscConfig+0x130>
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	685b      	ldr	r3, [r3, #4]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d169      	bne.n	801d294 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801d1c0:	2301      	movs	r3, #1
 801d1c2:	f000 bc21 	b.w	801da08 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	685b      	ldr	r3, [r3, #4]
 801d1ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d1ce:	d106      	bne.n	801d1de <HAL_RCC_OscConfig+0x7a>
 801d1d0:	4b86      	ldr	r3, [pc, #536]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	4a85      	ldr	r2, [pc, #532]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d1da:	6013      	str	r3, [r2, #0]
 801d1dc:	e02e      	b.n	801d23c <HAL_RCC_OscConfig+0xd8>
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	685b      	ldr	r3, [r3, #4]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d10c      	bne.n	801d200 <HAL_RCC_OscConfig+0x9c>
 801d1e6:	4b81      	ldr	r3, [pc, #516]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	4a80      	ldr	r2, [pc, #512]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d1f0:	6013      	str	r3, [r2, #0]
 801d1f2:	4b7e      	ldr	r3, [pc, #504]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	4a7d      	ldr	r2, [pc, #500]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d1f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d1fc:	6013      	str	r3, [r2, #0]
 801d1fe:	e01d      	b.n	801d23c <HAL_RCC_OscConfig+0xd8>
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	685b      	ldr	r3, [r3, #4]
 801d204:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d208:	d10c      	bne.n	801d224 <HAL_RCC_OscConfig+0xc0>
 801d20a:	4b78      	ldr	r3, [pc, #480]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	4a77      	ldr	r2, [pc, #476]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d214:	6013      	str	r3, [r2, #0]
 801d216:	4b75      	ldr	r3, [pc, #468]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	4a74      	ldr	r2, [pc, #464]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d21c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d220:	6013      	str	r3, [r2, #0]
 801d222:	e00b      	b.n	801d23c <HAL_RCC_OscConfig+0xd8>
 801d224:	4b71      	ldr	r3, [pc, #452]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	4a70      	ldr	r2, [pc, #448]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d22a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d22e:	6013      	str	r3, [r2, #0]
 801d230:	4b6e      	ldr	r3, [pc, #440]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d232:	681b      	ldr	r3, [r3, #0]
 801d234:	4a6d      	ldr	r2, [pc, #436]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d236:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d23a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	685b      	ldr	r3, [r3, #4]
 801d240:	2b00      	cmp	r3, #0
 801d242:	d013      	beq.n	801d26c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d244:	f7fd fb76 	bl	801a934 <HAL_GetTick>
 801d248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d24a:	e008      	b.n	801d25e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d24c:	f7fd fb72 	bl	801a934 <HAL_GetTick>
 801d250:	4602      	mov	r2, r0
 801d252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d254:	1ad3      	subs	r3, r2, r3
 801d256:	2b64      	cmp	r3, #100	@ 0x64
 801d258:	d901      	bls.n	801d25e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d25a:	2303      	movs	r3, #3
 801d25c:	e3d4      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d25e:	4b63      	ldr	r3, [pc, #396]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d266:	2b00      	cmp	r3, #0
 801d268:	d0f0      	beq.n	801d24c <HAL_RCC_OscConfig+0xe8>
 801d26a:	e014      	b.n	801d296 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d26c:	f7fd fb62 	bl	801a934 <HAL_GetTick>
 801d270:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d272:	e008      	b.n	801d286 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d274:	f7fd fb5e 	bl	801a934 <HAL_GetTick>
 801d278:	4602      	mov	r2, r0
 801d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d27c:	1ad3      	subs	r3, r2, r3
 801d27e:	2b64      	cmp	r3, #100	@ 0x64
 801d280:	d901      	bls.n	801d286 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d282:	2303      	movs	r3, #3
 801d284:	e3c0      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d286:	4b59      	ldr	r3, [pc, #356]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d288:	681b      	ldr	r3, [r3, #0]
 801d28a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d1f0      	bne.n	801d274 <HAL_RCC_OscConfig+0x110>
 801d292:	e000      	b.n	801d296 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	f003 0302 	and.w	r3, r3, #2
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	f000 80ca 	beq.w	801d438 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d2a4:	4b51      	ldr	r3, [pc, #324]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d2a6:	691b      	ldr	r3, [r3, #16]
 801d2a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d2ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d2ae:	4b4f      	ldr	r3, [pc, #316]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d2b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801d2b4:	6a3b      	ldr	r3, [r7, #32]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d007      	beq.n	801d2ca <HAL_RCC_OscConfig+0x166>
 801d2ba:	6a3b      	ldr	r3, [r7, #32]
 801d2bc:	2b18      	cmp	r3, #24
 801d2be:	d156      	bne.n	801d36e <HAL_RCC_OscConfig+0x20a>
 801d2c0:	69fb      	ldr	r3, [r7, #28]
 801d2c2:	f003 0303 	and.w	r3, r3, #3
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d151      	bne.n	801d36e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d2ca:	4b48      	ldr	r3, [pc, #288]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d2cc:	681b      	ldr	r3, [r3, #0]
 801d2ce:	f003 0304 	and.w	r3, r3, #4
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d005      	beq.n	801d2e2 <HAL_RCC_OscConfig+0x17e>
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	68db      	ldr	r3, [r3, #12]
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	d101      	bne.n	801d2e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801d2de:	2301      	movs	r3, #1
 801d2e0:	e392      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d2e2:	4b42      	ldr	r3, [pc, #264]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	f023 0219 	bic.w	r2, r3, #25
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	68db      	ldr	r3, [r3, #12]
 801d2ee:	493f      	ldr	r1, [pc, #252]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d2f0:	4313      	orrs	r3, r2
 801d2f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d2f4:	f7fd fb1e 	bl	801a934 <HAL_GetTick>
 801d2f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d2fa:	e008      	b.n	801d30e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d2fc:	f7fd fb1a 	bl	801a934 <HAL_GetTick>
 801d300:	4602      	mov	r2, r0
 801d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d304:	1ad3      	subs	r3, r2, r3
 801d306:	2b02      	cmp	r3, #2
 801d308:	d901      	bls.n	801d30e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801d30a:	2303      	movs	r3, #3
 801d30c:	e37c      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d30e:	4b37      	ldr	r3, [pc, #220]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	f003 0304 	and.w	r3, r3, #4
 801d316:	2b00      	cmp	r3, #0
 801d318:	d0f0      	beq.n	801d2fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d31a:	f7fd fb3b 	bl	801a994 <HAL_GetREVID>
 801d31e:	4603      	mov	r3, r0
 801d320:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d324:	4293      	cmp	r3, r2
 801d326:	d817      	bhi.n	801d358 <HAL_RCC_OscConfig+0x1f4>
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	691b      	ldr	r3, [r3, #16]
 801d32c:	2b40      	cmp	r3, #64	@ 0x40
 801d32e:	d108      	bne.n	801d342 <HAL_RCC_OscConfig+0x1de>
 801d330:	4b2e      	ldr	r3, [pc, #184]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d332:	685b      	ldr	r3, [r3, #4]
 801d334:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d338:	4a2c      	ldr	r2, [pc, #176]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d33a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d33e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d340:	e07a      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d342:	4b2a      	ldr	r3, [pc, #168]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d344:	685b      	ldr	r3, [r3, #4]
 801d346:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d34a:	687b      	ldr	r3, [r7, #4]
 801d34c:	691b      	ldr	r3, [r3, #16]
 801d34e:	031b      	lsls	r3, r3, #12
 801d350:	4926      	ldr	r1, [pc, #152]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d352:	4313      	orrs	r3, r2
 801d354:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d356:	e06f      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d358:	4b24      	ldr	r3, [pc, #144]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d35a:	685b      	ldr	r3, [r3, #4]
 801d35c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	691b      	ldr	r3, [r3, #16]
 801d364:	061b      	lsls	r3, r3, #24
 801d366:	4921      	ldr	r1, [pc, #132]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d368:	4313      	orrs	r3, r2
 801d36a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d36c:	e064      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	68db      	ldr	r3, [r3, #12]
 801d372:	2b00      	cmp	r3, #0
 801d374:	d047      	beq.n	801d406 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d376:	4b1d      	ldr	r3, [pc, #116]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	f023 0219 	bic.w	r2, r3, #25
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	68db      	ldr	r3, [r3, #12]
 801d382:	491a      	ldr	r1, [pc, #104]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d384:	4313      	orrs	r3, r2
 801d386:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d388:	f7fd fad4 	bl	801a934 <HAL_GetTick>
 801d38c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d38e:	e008      	b.n	801d3a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d390:	f7fd fad0 	bl	801a934 <HAL_GetTick>
 801d394:	4602      	mov	r2, r0
 801d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d398:	1ad3      	subs	r3, r2, r3
 801d39a:	2b02      	cmp	r3, #2
 801d39c:	d901      	bls.n	801d3a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801d39e:	2303      	movs	r3, #3
 801d3a0:	e332      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d3a2:	4b12      	ldr	r3, [pc, #72]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	f003 0304 	and.w	r3, r3, #4
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d0f0      	beq.n	801d390 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d3ae:	f7fd faf1 	bl	801a994 <HAL_GetREVID>
 801d3b2:	4603      	mov	r3, r0
 801d3b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	d819      	bhi.n	801d3f0 <HAL_RCC_OscConfig+0x28c>
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	691b      	ldr	r3, [r3, #16]
 801d3c0:	2b40      	cmp	r3, #64	@ 0x40
 801d3c2:	d108      	bne.n	801d3d6 <HAL_RCC_OscConfig+0x272>
 801d3c4:	4b09      	ldr	r3, [pc, #36]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d3c6:	685b      	ldr	r3, [r3, #4]
 801d3c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d3cc:	4a07      	ldr	r2, [pc, #28]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3d2:	6053      	str	r3, [r2, #4]
 801d3d4:	e030      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
 801d3d6:	4b05      	ldr	r3, [pc, #20]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d3d8:	685b      	ldr	r3, [r3, #4]
 801d3da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	691b      	ldr	r3, [r3, #16]
 801d3e2:	031b      	lsls	r3, r3, #12
 801d3e4:	4901      	ldr	r1, [pc, #4]	@ (801d3ec <HAL_RCC_OscConfig+0x288>)
 801d3e6:	4313      	orrs	r3, r2
 801d3e8:	604b      	str	r3, [r1, #4]
 801d3ea:	e025      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
 801d3ec:	58024400 	.word	0x58024400
 801d3f0:	4b9a      	ldr	r3, [pc, #616]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d3f2:	685b      	ldr	r3, [r3, #4]
 801d3f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	691b      	ldr	r3, [r3, #16]
 801d3fc:	061b      	lsls	r3, r3, #24
 801d3fe:	4997      	ldr	r1, [pc, #604]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d400:	4313      	orrs	r3, r2
 801d402:	604b      	str	r3, [r1, #4]
 801d404:	e018      	b.n	801d438 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d406:	4b95      	ldr	r3, [pc, #596]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	4a94      	ldr	r2, [pc, #592]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d40c:	f023 0301 	bic.w	r3, r3, #1
 801d410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d412:	f7fd fa8f 	bl	801a934 <HAL_GetTick>
 801d416:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d418:	e008      	b.n	801d42c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d41a:	f7fd fa8b 	bl	801a934 <HAL_GetTick>
 801d41e:	4602      	mov	r2, r0
 801d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d422:	1ad3      	subs	r3, r2, r3
 801d424:	2b02      	cmp	r3, #2
 801d426:	d901      	bls.n	801d42c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801d428:	2303      	movs	r3, #3
 801d42a:	e2ed      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d42c:	4b8b      	ldr	r3, [pc, #556]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	f003 0304 	and.w	r3, r3, #4
 801d434:	2b00      	cmp	r3, #0
 801d436:	d1f0      	bne.n	801d41a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	f003 0310 	and.w	r3, r3, #16
 801d440:	2b00      	cmp	r3, #0
 801d442:	f000 80a9 	beq.w	801d598 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d446:	4b85      	ldr	r3, [pc, #532]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d448:	691b      	ldr	r3, [r3, #16]
 801d44a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d44e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d450:	4b82      	ldr	r3, [pc, #520]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d454:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801d456:	69bb      	ldr	r3, [r7, #24]
 801d458:	2b08      	cmp	r3, #8
 801d45a:	d007      	beq.n	801d46c <HAL_RCC_OscConfig+0x308>
 801d45c:	69bb      	ldr	r3, [r7, #24]
 801d45e:	2b18      	cmp	r3, #24
 801d460:	d13a      	bne.n	801d4d8 <HAL_RCC_OscConfig+0x374>
 801d462:	697b      	ldr	r3, [r7, #20]
 801d464:	f003 0303 	and.w	r3, r3, #3
 801d468:	2b01      	cmp	r3, #1
 801d46a:	d135      	bne.n	801d4d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d46c:	4b7b      	ldr	r3, [pc, #492]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d474:	2b00      	cmp	r3, #0
 801d476:	d005      	beq.n	801d484 <HAL_RCC_OscConfig+0x320>
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	69db      	ldr	r3, [r3, #28]
 801d47c:	2b80      	cmp	r3, #128	@ 0x80
 801d47e:	d001      	beq.n	801d484 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801d480:	2301      	movs	r3, #1
 801d482:	e2c1      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d484:	f7fd fa86 	bl	801a994 <HAL_GetREVID>
 801d488:	4603      	mov	r3, r0
 801d48a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d48e:	4293      	cmp	r3, r2
 801d490:	d817      	bhi.n	801d4c2 <HAL_RCC_OscConfig+0x35e>
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	6a1b      	ldr	r3, [r3, #32]
 801d496:	2b20      	cmp	r3, #32
 801d498:	d108      	bne.n	801d4ac <HAL_RCC_OscConfig+0x348>
 801d49a:	4b70      	ldr	r3, [pc, #448]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d49c:	685b      	ldr	r3, [r3, #4]
 801d49e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d4a2:	4a6e      	ldr	r2, [pc, #440]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d4a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d4aa:	e075      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d4ac:	4b6b      	ldr	r3, [pc, #428]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4ae:	685b      	ldr	r3, [r3, #4]
 801d4b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	6a1b      	ldr	r3, [r3, #32]
 801d4b8:	069b      	lsls	r3, r3, #26
 801d4ba:	4968      	ldr	r1, [pc, #416]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4bc:	4313      	orrs	r3, r2
 801d4be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d4c0:	e06a      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d4c2:	4b66      	ldr	r3, [pc, #408]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4c4:	68db      	ldr	r3, [r3, #12]
 801d4c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	6a1b      	ldr	r3, [r3, #32]
 801d4ce:	061b      	lsls	r3, r3, #24
 801d4d0:	4962      	ldr	r1, [pc, #392]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4d2:	4313      	orrs	r3, r2
 801d4d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d4d6:	e05f      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	69db      	ldr	r3, [r3, #28]
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d042      	beq.n	801d566 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801d4e0:	4b5e      	ldr	r3, [pc, #376]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	4a5d      	ldr	r2, [pc, #372]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d4ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d4ec:	f7fd fa22 	bl	801a934 <HAL_GetTick>
 801d4f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d4f2:	e008      	b.n	801d506 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d4f4:	f7fd fa1e 	bl	801a934 <HAL_GetTick>
 801d4f8:	4602      	mov	r2, r0
 801d4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4fc:	1ad3      	subs	r3, r2, r3
 801d4fe:	2b02      	cmp	r3, #2
 801d500:	d901      	bls.n	801d506 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801d502:	2303      	movs	r3, #3
 801d504:	e280      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d506:	4b55      	ldr	r3, [pc, #340]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d0f0      	beq.n	801d4f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d512:	f7fd fa3f 	bl	801a994 <HAL_GetREVID>
 801d516:	4603      	mov	r3, r0
 801d518:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d51c:	4293      	cmp	r3, r2
 801d51e:	d817      	bhi.n	801d550 <HAL_RCC_OscConfig+0x3ec>
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	6a1b      	ldr	r3, [r3, #32]
 801d524:	2b20      	cmp	r3, #32
 801d526:	d108      	bne.n	801d53a <HAL_RCC_OscConfig+0x3d6>
 801d528:	4b4c      	ldr	r3, [pc, #304]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d52a:	685b      	ldr	r3, [r3, #4]
 801d52c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d530:	4a4a      	ldr	r2, [pc, #296]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d532:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d536:	6053      	str	r3, [r2, #4]
 801d538:	e02e      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
 801d53a:	4b48      	ldr	r3, [pc, #288]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	6a1b      	ldr	r3, [r3, #32]
 801d546:	069b      	lsls	r3, r3, #26
 801d548:	4944      	ldr	r1, [pc, #272]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d54a:	4313      	orrs	r3, r2
 801d54c:	604b      	str	r3, [r1, #4]
 801d54e:	e023      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
 801d550:	4b42      	ldr	r3, [pc, #264]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d552:	68db      	ldr	r3, [r3, #12]
 801d554:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	6a1b      	ldr	r3, [r3, #32]
 801d55c:	061b      	lsls	r3, r3, #24
 801d55e:	493f      	ldr	r1, [pc, #252]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d560:	4313      	orrs	r3, r2
 801d562:	60cb      	str	r3, [r1, #12]
 801d564:	e018      	b.n	801d598 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801d566:	4b3d      	ldr	r3, [pc, #244]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	4a3c      	ldr	r2, [pc, #240]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d56c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d572:	f7fd f9df 	bl	801a934 <HAL_GetTick>
 801d576:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d578:	e008      	b.n	801d58c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d57a:	f7fd f9db 	bl	801a934 <HAL_GetTick>
 801d57e:	4602      	mov	r2, r0
 801d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d582:	1ad3      	subs	r3, r2, r3
 801d584:	2b02      	cmp	r3, #2
 801d586:	d901      	bls.n	801d58c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801d588:	2303      	movs	r3, #3
 801d58a:	e23d      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d58c:	4b33      	ldr	r3, [pc, #204]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d594:	2b00      	cmp	r3, #0
 801d596:	d1f0      	bne.n	801d57a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	f003 0308 	and.w	r3, r3, #8
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d036      	beq.n	801d612 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	695b      	ldr	r3, [r3, #20]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d019      	beq.n	801d5e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d5ac:	4b2b      	ldr	r3, [pc, #172]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d5ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5b0:	4a2a      	ldr	r2, [pc, #168]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d5b2:	f043 0301 	orr.w	r3, r3, #1
 801d5b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d5b8:	f7fd f9bc 	bl	801a934 <HAL_GetTick>
 801d5bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d5be:	e008      	b.n	801d5d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d5c0:	f7fd f9b8 	bl	801a934 <HAL_GetTick>
 801d5c4:	4602      	mov	r2, r0
 801d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5c8:	1ad3      	subs	r3, r2, r3
 801d5ca:	2b02      	cmp	r3, #2
 801d5cc:	d901      	bls.n	801d5d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801d5ce:	2303      	movs	r3, #3
 801d5d0:	e21a      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d5d2:	4b22      	ldr	r3, [pc, #136]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5d6:	f003 0302 	and.w	r3, r3, #2
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d0f0      	beq.n	801d5c0 <HAL_RCC_OscConfig+0x45c>
 801d5de:	e018      	b.n	801d612 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d5e0:	4b1e      	ldr	r3, [pc, #120]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d5e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d5e4:	4a1d      	ldr	r2, [pc, #116]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d5e6:	f023 0301 	bic.w	r3, r3, #1
 801d5ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d5ec:	f7fd f9a2 	bl	801a934 <HAL_GetTick>
 801d5f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d5f2:	e008      	b.n	801d606 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d5f4:	f7fd f99e 	bl	801a934 <HAL_GetTick>
 801d5f8:	4602      	mov	r2, r0
 801d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5fc:	1ad3      	subs	r3, r2, r3
 801d5fe:	2b02      	cmp	r3, #2
 801d600:	d901      	bls.n	801d606 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801d602:	2303      	movs	r3, #3
 801d604:	e200      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d606:	4b15      	ldr	r3, [pc, #84]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d60a:	f003 0302 	and.w	r3, r3, #2
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d1f0      	bne.n	801d5f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	f003 0320 	and.w	r3, r3, #32
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d039      	beq.n	801d692 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	699b      	ldr	r3, [r3, #24]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d01c      	beq.n	801d660 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d626:	4b0d      	ldr	r3, [pc, #52]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	4a0c      	ldr	r2, [pc, #48]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d62c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d632:	f7fd f97f 	bl	801a934 <HAL_GetTick>
 801d636:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d638:	e008      	b.n	801d64c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d63a:	f7fd f97b 	bl	801a934 <HAL_GetTick>
 801d63e:	4602      	mov	r2, r0
 801d640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d642:	1ad3      	subs	r3, r2, r3
 801d644:	2b02      	cmp	r3, #2
 801d646:	d901      	bls.n	801d64c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d648:	2303      	movs	r3, #3
 801d64a:	e1dd      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d64c:	4b03      	ldr	r3, [pc, #12]	@ (801d65c <HAL_RCC_OscConfig+0x4f8>)
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d654:	2b00      	cmp	r3, #0
 801d656:	d0f0      	beq.n	801d63a <HAL_RCC_OscConfig+0x4d6>
 801d658:	e01b      	b.n	801d692 <HAL_RCC_OscConfig+0x52e>
 801d65a:	bf00      	nop
 801d65c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d660:	4b9b      	ldr	r3, [pc, #620]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	4a9a      	ldr	r2, [pc, #616]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d66a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d66c:	f7fd f962 	bl	801a934 <HAL_GetTick>
 801d670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d672:	e008      	b.n	801d686 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d674:	f7fd f95e 	bl	801a934 <HAL_GetTick>
 801d678:	4602      	mov	r2, r0
 801d67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d67c:	1ad3      	subs	r3, r2, r3
 801d67e:	2b02      	cmp	r3, #2
 801d680:	d901      	bls.n	801d686 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d682:	2303      	movs	r3, #3
 801d684:	e1c0      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d686:	4b92      	ldr	r3, [pc, #584]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d1f0      	bne.n	801d674 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	681b      	ldr	r3, [r3, #0]
 801d696:	f003 0304 	and.w	r3, r3, #4
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	f000 8081 	beq.w	801d7a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d6a0:	4b8c      	ldr	r3, [pc, #560]	@ (801d8d4 <HAL_RCC_OscConfig+0x770>)
 801d6a2:	681b      	ldr	r3, [r3, #0]
 801d6a4:	4a8b      	ldr	r2, [pc, #556]	@ (801d8d4 <HAL_RCC_OscConfig+0x770>)
 801d6a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d6aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d6ac:	f7fd f942 	bl	801a934 <HAL_GetTick>
 801d6b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d6b2:	e008      	b.n	801d6c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d6b4:	f7fd f93e 	bl	801a934 <HAL_GetTick>
 801d6b8:	4602      	mov	r2, r0
 801d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6bc:	1ad3      	subs	r3, r2, r3
 801d6be:	2b64      	cmp	r3, #100	@ 0x64
 801d6c0:	d901      	bls.n	801d6c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d6c2:	2303      	movs	r3, #3
 801d6c4:	e1a0      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d6c6:	4b83      	ldr	r3, [pc, #524]	@ (801d8d4 <HAL_RCC_OscConfig+0x770>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d0f0      	beq.n	801d6b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	689b      	ldr	r3, [r3, #8]
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d106      	bne.n	801d6e8 <HAL_RCC_OscConfig+0x584>
 801d6da:	4b7d      	ldr	r3, [pc, #500]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6de:	4a7c      	ldr	r2, [pc, #496]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d6e0:	f043 0301 	orr.w	r3, r3, #1
 801d6e4:	6713      	str	r3, [r2, #112]	@ 0x70
 801d6e6:	e02d      	b.n	801d744 <HAL_RCC_OscConfig+0x5e0>
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	689b      	ldr	r3, [r3, #8]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d10c      	bne.n	801d70a <HAL_RCC_OscConfig+0x5a6>
 801d6f0:	4b77      	ldr	r3, [pc, #476]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d6f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d6f4:	4a76      	ldr	r2, [pc, #472]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d6f6:	f023 0301 	bic.w	r3, r3, #1
 801d6fa:	6713      	str	r3, [r2, #112]	@ 0x70
 801d6fc:	4b74      	ldr	r3, [pc, #464]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d6fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d700:	4a73      	ldr	r2, [pc, #460]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d702:	f023 0304 	bic.w	r3, r3, #4
 801d706:	6713      	str	r3, [r2, #112]	@ 0x70
 801d708:	e01c      	b.n	801d744 <HAL_RCC_OscConfig+0x5e0>
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	689b      	ldr	r3, [r3, #8]
 801d70e:	2b05      	cmp	r3, #5
 801d710:	d10c      	bne.n	801d72c <HAL_RCC_OscConfig+0x5c8>
 801d712:	4b6f      	ldr	r3, [pc, #444]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d716:	4a6e      	ldr	r2, [pc, #440]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d718:	f043 0304 	orr.w	r3, r3, #4
 801d71c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d71e:	4b6c      	ldr	r3, [pc, #432]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d722:	4a6b      	ldr	r2, [pc, #428]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d724:	f043 0301 	orr.w	r3, r3, #1
 801d728:	6713      	str	r3, [r2, #112]	@ 0x70
 801d72a:	e00b      	b.n	801d744 <HAL_RCC_OscConfig+0x5e0>
 801d72c:	4b68      	ldr	r3, [pc, #416]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d72e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d730:	4a67      	ldr	r2, [pc, #412]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d732:	f023 0301 	bic.w	r3, r3, #1
 801d736:	6713      	str	r3, [r2, #112]	@ 0x70
 801d738:	4b65      	ldr	r3, [pc, #404]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d73c:	4a64      	ldr	r2, [pc, #400]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d73e:	f023 0304 	bic.w	r3, r3, #4
 801d742:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	689b      	ldr	r3, [r3, #8]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d015      	beq.n	801d778 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d74c:	f7fd f8f2 	bl	801a934 <HAL_GetTick>
 801d750:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d752:	e00a      	b.n	801d76a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d754:	f7fd f8ee 	bl	801a934 <HAL_GetTick>
 801d758:	4602      	mov	r2, r0
 801d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d75c:	1ad3      	subs	r3, r2, r3
 801d75e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d762:	4293      	cmp	r3, r2
 801d764:	d901      	bls.n	801d76a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d766:	2303      	movs	r3, #3
 801d768:	e14e      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d76a:	4b59      	ldr	r3, [pc, #356]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d76e:	f003 0302 	and.w	r3, r3, #2
 801d772:	2b00      	cmp	r3, #0
 801d774:	d0ee      	beq.n	801d754 <HAL_RCC_OscConfig+0x5f0>
 801d776:	e014      	b.n	801d7a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d778:	f7fd f8dc 	bl	801a934 <HAL_GetTick>
 801d77c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d77e:	e00a      	b.n	801d796 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d780:	f7fd f8d8 	bl	801a934 <HAL_GetTick>
 801d784:	4602      	mov	r2, r0
 801d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d788:	1ad3      	subs	r3, r2, r3
 801d78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d78e:	4293      	cmp	r3, r2
 801d790:	d901      	bls.n	801d796 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d792:	2303      	movs	r3, #3
 801d794:	e138      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d796:	4b4e      	ldr	r3, [pc, #312]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d79a:	f003 0302 	and.w	r3, r3, #2
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d1ee      	bne.n	801d780 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	f000 812d 	beq.w	801da06 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d7ac:	4b48      	ldr	r3, [pc, #288]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d7ae:	691b      	ldr	r3, [r3, #16]
 801d7b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d7b4:	2b18      	cmp	r3, #24
 801d7b6:	f000 80bd 	beq.w	801d934 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d7be:	2b02      	cmp	r3, #2
 801d7c0:	f040 809e 	bne.w	801d900 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d7c4:	4b42      	ldr	r3, [pc, #264]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	4a41      	ldr	r2, [pc, #260]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d7ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d7ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d7d0:	f7fd f8b0 	bl	801a934 <HAL_GetTick>
 801d7d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d7d6:	e008      	b.n	801d7ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d7d8:	f7fd f8ac 	bl	801a934 <HAL_GetTick>
 801d7dc:	4602      	mov	r2, r0
 801d7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7e0:	1ad3      	subs	r3, r2, r3
 801d7e2:	2b02      	cmp	r3, #2
 801d7e4:	d901      	bls.n	801d7ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d7e6:	2303      	movs	r3, #3
 801d7e8:	e10e      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d7ea:	4b39      	ldr	r3, [pc, #228]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d1f0      	bne.n	801d7d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d7f6:	4b36      	ldr	r3, [pc, #216]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d7f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d7fa:	4b37      	ldr	r3, [pc, #220]	@ (801d8d8 <HAL_RCC_OscConfig+0x774>)
 801d7fc:	4013      	ands	r3, r2
 801d7fe:	687a      	ldr	r2, [r7, #4]
 801d800:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d802:	687a      	ldr	r2, [r7, #4]
 801d804:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d806:	0112      	lsls	r2, r2, #4
 801d808:	430a      	orrs	r2, r1
 801d80a:	4931      	ldr	r1, [pc, #196]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d80c:	4313      	orrs	r3, r2
 801d80e:	628b      	str	r3, [r1, #40]	@ 0x28
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d814:	3b01      	subs	r3, #1
 801d816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d81e:	3b01      	subs	r3, #1
 801d820:	025b      	lsls	r3, r3, #9
 801d822:	b29b      	uxth	r3, r3
 801d824:	431a      	orrs	r2, r3
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d82a:	3b01      	subs	r3, #1
 801d82c:	041b      	lsls	r3, r3, #16
 801d82e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d832:	431a      	orrs	r2, r3
 801d834:	687b      	ldr	r3, [r7, #4]
 801d836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d838:	3b01      	subs	r3, #1
 801d83a:	061b      	lsls	r3, r3, #24
 801d83c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d840:	4923      	ldr	r1, [pc, #140]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d842:	4313      	orrs	r3, r2
 801d844:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d846:	4b22      	ldr	r3, [pc, #136]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d84a:	4a21      	ldr	r2, [pc, #132]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d84c:	f023 0301 	bic.w	r3, r3, #1
 801d850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d852:	4b1f      	ldr	r3, [pc, #124]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d856:	4b21      	ldr	r3, [pc, #132]	@ (801d8dc <HAL_RCC_OscConfig+0x778>)
 801d858:	4013      	ands	r3, r2
 801d85a:	687a      	ldr	r2, [r7, #4]
 801d85c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d85e:	00d2      	lsls	r2, r2, #3
 801d860:	491b      	ldr	r1, [pc, #108]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d862:	4313      	orrs	r3, r2
 801d864:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d866:	4b1a      	ldr	r3, [pc, #104]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d86a:	f023 020c 	bic.w	r2, r3, #12
 801d86e:	687b      	ldr	r3, [r7, #4]
 801d870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d872:	4917      	ldr	r1, [pc, #92]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d874:	4313      	orrs	r3, r2
 801d876:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d878:	4b15      	ldr	r3, [pc, #84]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d87a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d87c:	f023 0202 	bic.w	r2, r3, #2
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d884:	4912      	ldr	r1, [pc, #72]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d886:	4313      	orrs	r3, r2
 801d888:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d88a:	4b11      	ldr	r3, [pc, #68]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d88e:	4a10      	ldr	r2, [pc, #64]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d890:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d896:	4b0e      	ldr	r3, [pc, #56]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d89a:	4a0d      	ldr	r2, [pc, #52]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d89c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d8a2:	4b0b      	ldr	r3, [pc, #44]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8a6:	4a0a      	ldr	r2, [pc, #40]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d8ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d8ae:	4b08      	ldr	r3, [pc, #32]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8b2:	4a07      	ldr	r2, [pc, #28]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8b4:	f043 0301 	orr.w	r3, r3, #1
 801d8b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d8ba:	4b05      	ldr	r3, [pc, #20]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	4a04      	ldr	r2, [pc, #16]	@ (801d8d0 <HAL_RCC_OscConfig+0x76c>)
 801d8c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d8c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d8c6:	f7fd f835 	bl	801a934 <HAL_GetTick>
 801d8ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d8cc:	e011      	b.n	801d8f2 <HAL_RCC_OscConfig+0x78e>
 801d8ce:	bf00      	nop
 801d8d0:	58024400 	.word	0x58024400
 801d8d4:	58024800 	.word	0x58024800
 801d8d8:	fffffc0c 	.word	0xfffffc0c
 801d8dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d8e0:	f7fd f828 	bl	801a934 <HAL_GetTick>
 801d8e4:	4602      	mov	r2, r0
 801d8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d8e8:	1ad3      	subs	r3, r2, r3
 801d8ea:	2b02      	cmp	r3, #2
 801d8ec:	d901      	bls.n	801d8f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d8ee:	2303      	movs	r3, #3
 801d8f0:	e08a      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d8f2:	4b47      	ldr	r3, [pc, #284]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d0f0      	beq.n	801d8e0 <HAL_RCC_OscConfig+0x77c>
 801d8fe:	e082      	b.n	801da06 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d900:	4b43      	ldr	r3, [pc, #268]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d902:	681b      	ldr	r3, [r3, #0]
 801d904:	4a42      	ldr	r2, [pc, #264]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d90a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d90c:	f7fd f812 	bl	801a934 <HAL_GetTick>
 801d910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d912:	e008      	b.n	801d926 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d914:	f7fd f80e 	bl	801a934 <HAL_GetTick>
 801d918:	4602      	mov	r2, r0
 801d91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d91c:	1ad3      	subs	r3, r2, r3
 801d91e:	2b02      	cmp	r3, #2
 801d920:	d901      	bls.n	801d926 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d922:	2303      	movs	r3, #3
 801d924:	e070      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d926:	4b3a      	ldr	r3, [pc, #232]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d1f0      	bne.n	801d914 <HAL_RCC_OscConfig+0x7b0>
 801d932:	e068      	b.n	801da06 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d934:	4b36      	ldr	r3, [pc, #216]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d938:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d93a:	4b35      	ldr	r3, [pc, #212]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d93c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d93e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d944:	2b01      	cmp	r3, #1
 801d946:	d031      	beq.n	801d9ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d948:	693b      	ldr	r3, [r7, #16]
 801d94a:	f003 0203 	and.w	r2, r3, #3
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d952:	429a      	cmp	r2, r3
 801d954:	d12a      	bne.n	801d9ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d956:	693b      	ldr	r3, [r7, #16]
 801d958:	091b      	lsrs	r3, r3, #4
 801d95a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d962:	429a      	cmp	r2, r3
 801d964:	d122      	bne.n	801d9ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d970:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d972:	429a      	cmp	r2, r3
 801d974:	d11a      	bne.n	801d9ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	0a5b      	lsrs	r3, r3, #9
 801d97a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d97e:	687b      	ldr	r3, [r7, #4]
 801d980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d982:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d984:	429a      	cmp	r2, r3
 801d986:	d111      	bne.n	801d9ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	0c1b      	lsrs	r3, r3, #16
 801d98c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d994:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d996:	429a      	cmp	r2, r3
 801d998:	d108      	bne.n	801d9ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	0e1b      	lsrs	r3, r3, #24
 801d99e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d9a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	d001      	beq.n	801d9b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d9ac:	2301      	movs	r3, #1
 801d9ae:	e02b      	b.n	801da08 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d9b0:	4b17      	ldr	r3, [pc, #92]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d9b4:	08db      	lsrs	r3, r3, #3
 801d9b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d9ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d9c0:	693a      	ldr	r2, [r7, #16]
 801d9c2:	429a      	cmp	r2, r3
 801d9c4:	d01f      	beq.n	801da06 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d9c6:	4b12      	ldr	r3, [pc, #72]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9ca:	4a11      	ldr	r2, [pc, #68]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9cc:	f023 0301 	bic.w	r3, r3, #1
 801d9d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d9d2:	f7fc ffaf 	bl	801a934 <HAL_GetTick>
 801d9d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d9d8:	bf00      	nop
 801d9da:	f7fc ffab 	bl	801a934 <HAL_GetTick>
 801d9de:	4602      	mov	r2, r0
 801d9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d0f9      	beq.n	801d9da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d9e6:	4b0a      	ldr	r3, [pc, #40]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d9ea:	4b0a      	ldr	r3, [pc, #40]	@ (801da14 <HAL_RCC_OscConfig+0x8b0>)
 801d9ec:	4013      	ands	r3, r2
 801d9ee:	687a      	ldr	r2, [r7, #4]
 801d9f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d9f2:	00d2      	lsls	r2, r2, #3
 801d9f4:	4906      	ldr	r1, [pc, #24]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9f6:	4313      	orrs	r3, r2
 801d9f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d9fa:	4b05      	ldr	r3, [pc, #20]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9fe:	4a04      	ldr	r2, [pc, #16]	@ (801da10 <HAL_RCC_OscConfig+0x8ac>)
 801da00:	f043 0301 	orr.w	r3, r3, #1
 801da04:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801da06:	2300      	movs	r3, #0
}
 801da08:	4618      	mov	r0, r3
 801da0a:	3730      	adds	r7, #48	@ 0x30
 801da0c:	46bd      	mov	sp, r7
 801da0e:	bd80      	pop	{r7, pc}
 801da10:	58024400 	.word	0x58024400
 801da14:	ffff0007 	.word	0xffff0007

0801da18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801da18:	b580      	push	{r7, lr}
 801da1a:	b086      	sub	sp, #24
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
 801da20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d101      	bne.n	801da2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801da28:	2301      	movs	r3, #1
 801da2a:	e19c      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801da2c:	4b8a      	ldr	r3, [pc, #552]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801da2e:	681b      	ldr	r3, [r3, #0]
 801da30:	f003 030f 	and.w	r3, r3, #15
 801da34:	683a      	ldr	r2, [r7, #0]
 801da36:	429a      	cmp	r2, r3
 801da38:	d910      	bls.n	801da5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801da3a:	4b87      	ldr	r3, [pc, #540]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	f023 020f 	bic.w	r2, r3, #15
 801da42:	4985      	ldr	r1, [pc, #532]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801da44:	683b      	ldr	r3, [r7, #0]
 801da46:	4313      	orrs	r3, r2
 801da48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801da4a:	4b83      	ldr	r3, [pc, #524]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	f003 030f 	and.w	r3, r3, #15
 801da52:	683a      	ldr	r2, [r7, #0]
 801da54:	429a      	cmp	r2, r3
 801da56:	d001      	beq.n	801da5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801da58:	2301      	movs	r3, #1
 801da5a:	e184      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	f003 0304 	and.w	r3, r3, #4
 801da64:	2b00      	cmp	r3, #0
 801da66:	d010      	beq.n	801da8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	691a      	ldr	r2, [r3, #16]
 801da6c:	4b7b      	ldr	r3, [pc, #492]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801da6e:	699b      	ldr	r3, [r3, #24]
 801da70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801da74:	429a      	cmp	r2, r3
 801da76:	d908      	bls.n	801da8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801da78:	4b78      	ldr	r3, [pc, #480]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801da7a:	699b      	ldr	r3, [r3, #24]
 801da7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	691b      	ldr	r3, [r3, #16]
 801da84:	4975      	ldr	r1, [pc, #468]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801da86:	4313      	orrs	r3, r2
 801da88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	f003 0308 	and.w	r3, r3, #8
 801da92:	2b00      	cmp	r3, #0
 801da94:	d010      	beq.n	801dab8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	695a      	ldr	r2, [r3, #20]
 801da9a:	4b70      	ldr	r3, [pc, #448]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801da9c:	69db      	ldr	r3, [r3, #28]
 801da9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801daa2:	429a      	cmp	r2, r3
 801daa4:	d908      	bls.n	801dab8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801daa6:	4b6d      	ldr	r3, [pc, #436]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801daa8:	69db      	ldr	r3, [r3, #28]
 801daaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	695b      	ldr	r3, [r3, #20]
 801dab2:	496a      	ldr	r1, [pc, #424]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dab4:	4313      	orrs	r3, r2
 801dab6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	f003 0310 	and.w	r3, r3, #16
 801dac0:	2b00      	cmp	r3, #0
 801dac2:	d010      	beq.n	801dae6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801dac4:	687b      	ldr	r3, [r7, #4]
 801dac6:	699a      	ldr	r2, [r3, #24]
 801dac8:	4b64      	ldr	r3, [pc, #400]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801daca:	69db      	ldr	r3, [r3, #28]
 801dacc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801dad0:	429a      	cmp	r2, r3
 801dad2:	d908      	bls.n	801dae6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801dad4:	4b61      	ldr	r3, [pc, #388]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dad6:	69db      	ldr	r3, [r3, #28]
 801dad8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	699b      	ldr	r3, [r3, #24]
 801dae0:	495e      	ldr	r1, [pc, #376]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dae2:	4313      	orrs	r3, r2
 801dae4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	f003 0320 	and.w	r3, r3, #32
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d010      	beq.n	801db14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	69da      	ldr	r2, [r3, #28]
 801daf6:	4b59      	ldr	r3, [pc, #356]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801daf8:	6a1b      	ldr	r3, [r3, #32]
 801dafa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dafe:	429a      	cmp	r2, r3
 801db00:	d908      	bls.n	801db14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801db02:	4b56      	ldr	r3, [pc, #344]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db04:	6a1b      	ldr	r3, [r3, #32]
 801db06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	69db      	ldr	r3, [r3, #28]
 801db0e:	4953      	ldr	r1, [pc, #332]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db10:	4313      	orrs	r3, r2
 801db12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	f003 0302 	and.w	r3, r3, #2
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d010      	beq.n	801db42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	68da      	ldr	r2, [r3, #12]
 801db24:	4b4d      	ldr	r3, [pc, #308]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db26:	699b      	ldr	r3, [r3, #24]
 801db28:	f003 030f 	and.w	r3, r3, #15
 801db2c:	429a      	cmp	r2, r3
 801db2e:	d908      	bls.n	801db42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801db30:	4b4a      	ldr	r3, [pc, #296]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db32:	699b      	ldr	r3, [r3, #24]
 801db34:	f023 020f 	bic.w	r2, r3, #15
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	68db      	ldr	r3, [r3, #12]
 801db3c:	4947      	ldr	r1, [pc, #284]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db3e:	4313      	orrs	r3, r2
 801db40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	f003 0301 	and.w	r3, r3, #1
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d055      	beq.n	801dbfa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801db4e:	4b43      	ldr	r3, [pc, #268]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db50:	699b      	ldr	r3, [r3, #24]
 801db52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	689b      	ldr	r3, [r3, #8]
 801db5a:	4940      	ldr	r1, [pc, #256]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db5c:	4313      	orrs	r3, r2
 801db5e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	685b      	ldr	r3, [r3, #4]
 801db64:	2b02      	cmp	r3, #2
 801db66:	d107      	bne.n	801db78 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801db68:	4b3c      	ldr	r3, [pc, #240]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801db70:	2b00      	cmp	r3, #0
 801db72:	d121      	bne.n	801dbb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801db74:	2301      	movs	r3, #1
 801db76:	e0f6      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	685b      	ldr	r3, [r3, #4]
 801db7c:	2b03      	cmp	r3, #3
 801db7e:	d107      	bne.n	801db90 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801db80:	4b36      	ldr	r3, [pc, #216]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d115      	bne.n	801dbb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801db8c:	2301      	movs	r3, #1
 801db8e:	e0ea      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801db90:	687b      	ldr	r3, [r7, #4]
 801db92:	685b      	ldr	r3, [r3, #4]
 801db94:	2b01      	cmp	r3, #1
 801db96:	d107      	bne.n	801dba8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801db98:	4b30      	ldr	r3, [pc, #192]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d109      	bne.n	801dbb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801dba4:	2301      	movs	r3, #1
 801dba6:	e0de      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801dba8:	4b2c      	ldr	r3, [pc, #176]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	f003 0304 	and.w	r3, r3, #4
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d101      	bne.n	801dbb8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801dbb4:	2301      	movs	r3, #1
 801dbb6:	e0d6      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801dbb8:	4b28      	ldr	r3, [pc, #160]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dbba:	691b      	ldr	r3, [r3, #16]
 801dbbc:	f023 0207 	bic.w	r2, r3, #7
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	685b      	ldr	r3, [r3, #4]
 801dbc4:	4925      	ldr	r1, [pc, #148]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dbc6:	4313      	orrs	r3, r2
 801dbc8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dbca:	f7fc feb3 	bl	801a934 <HAL_GetTick>
 801dbce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801dbd0:	e00a      	b.n	801dbe8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801dbd2:	f7fc feaf 	bl	801a934 <HAL_GetTick>
 801dbd6:	4602      	mov	r2, r0
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	1ad3      	subs	r3, r2, r3
 801dbdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801dbe0:	4293      	cmp	r3, r2
 801dbe2:	d901      	bls.n	801dbe8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801dbe4:	2303      	movs	r3, #3
 801dbe6:	e0be      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801dbe8:	4b1c      	ldr	r3, [pc, #112]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dbea:	691b      	ldr	r3, [r3, #16]
 801dbec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	685b      	ldr	r3, [r3, #4]
 801dbf4:	00db      	lsls	r3, r3, #3
 801dbf6:	429a      	cmp	r2, r3
 801dbf8:	d1eb      	bne.n	801dbd2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	f003 0302 	and.w	r3, r3, #2
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d010      	beq.n	801dc28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	68da      	ldr	r2, [r3, #12]
 801dc0a:	4b14      	ldr	r3, [pc, #80]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dc0c:	699b      	ldr	r3, [r3, #24]
 801dc0e:	f003 030f 	and.w	r3, r3, #15
 801dc12:	429a      	cmp	r2, r3
 801dc14:	d208      	bcs.n	801dc28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801dc16:	4b11      	ldr	r3, [pc, #68]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dc18:	699b      	ldr	r3, [r3, #24]
 801dc1a:	f023 020f 	bic.w	r2, r3, #15
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	68db      	ldr	r3, [r3, #12]
 801dc22:	490e      	ldr	r1, [pc, #56]	@ (801dc5c <HAL_RCC_ClockConfig+0x244>)
 801dc24:	4313      	orrs	r3, r2
 801dc26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801dc28:	4b0b      	ldr	r3, [pc, #44]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	f003 030f 	and.w	r3, r3, #15
 801dc30:	683a      	ldr	r2, [r7, #0]
 801dc32:	429a      	cmp	r2, r3
 801dc34:	d214      	bcs.n	801dc60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801dc36:	4b08      	ldr	r3, [pc, #32]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	f023 020f 	bic.w	r2, r3, #15
 801dc3e:	4906      	ldr	r1, [pc, #24]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801dc40:	683b      	ldr	r3, [r7, #0]
 801dc42:	4313      	orrs	r3, r2
 801dc44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801dc46:	4b04      	ldr	r3, [pc, #16]	@ (801dc58 <HAL_RCC_ClockConfig+0x240>)
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	f003 030f 	and.w	r3, r3, #15
 801dc4e:	683a      	ldr	r2, [r7, #0]
 801dc50:	429a      	cmp	r2, r3
 801dc52:	d005      	beq.n	801dc60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801dc54:	2301      	movs	r3, #1
 801dc56:	e086      	b.n	801dd66 <HAL_RCC_ClockConfig+0x34e>
 801dc58:	52002000 	.word	0x52002000
 801dc5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	f003 0304 	and.w	r3, r3, #4
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d010      	beq.n	801dc8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	691a      	ldr	r2, [r3, #16]
 801dc70:	4b3f      	ldr	r3, [pc, #252]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dc72:	699b      	ldr	r3, [r3, #24]
 801dc74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dc78:	429a      	cmp	r2, r3
 801dc7a:	d208      	bcs.n	801dc8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801dc7c:	4b3c      	ldr	r3, [pc, #240]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dc7e:	699b      	ldr	r3, [r3, #24]
 801dc80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	691b      	ldr	r3, [r3, #16]
 801dc88:	4939      	ldr	r1, [pc, #228]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dc8a:	4313      	orrs	r3, r2
 801dc8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	f003 0308 	and.w	r3, r3, #8
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d010      	beq.n	801dcbc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	695a      	ldr	r2, [r3, #20]
 801dc9e:	4b34      	ldr	r3, [pc, #208]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dca0:	69db      	ldr	r3, [r3, #28]
 801dca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dca6:	429a      	cmp	r2, r3
 801dca8:	d208      	bcs.n	801dcbc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801dcaa:	4b31      	ldr	r3, [pc, #196]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dcac:	69db      	ldr	r3, [r3, #28]
 801dcae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801dcb2:	687b      	ldr	r3, [r7, #4]
 801dcb4:	695b      	ldr	r3, [r3, #20]
 801dcb6:	492e      	ldr	r1, [pc, #184]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dcb8:	4313      	orrs	r3, r2
 801dcba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	f003 0310 	and.w	r3, r3, #16
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d010      	beq.n	801dcea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	699a      	ldr	r2, [r3, #24]
 801dccc:	4b28      	ldr	r3, [pc, #160]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dcce:	69db      	ldr	r3, [r3, #28]
 801dcd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801dcd4:	429a      	cmp	r2, r3
 801dcd6:	d208      	bcs.n	801dcea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801dcd8:	4b25      	ldr	r3, [pc, #148]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dcda:	69db      	ldr	r3, [r3, #28]
 801dcdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	699b      	ldr	r3, [r3, #24]
 801dce4:	4922      	ldr	r1, [pc, #136]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dce6:	4313      	orrs	r3, r2
 801dce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	f003 0320 	and.w	r3, r3, #32
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d010      	beq.n	801dd18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	69da      	ldr	r2, [r3, #28]
 801dcfa:	4b1d      	ldr	r3, [pc, #116]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dcfc:	6a1b      	ldr	r3, [r3, #32]
 801dcfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dd02:	429a      	cmp	r2, r3
 801dd04:	d208      	bcs.n	801dd18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801dd06:	4b1a      	ldr	r3, [pc, #104]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dd08:	6a1b      	ldr	r3, [r3, #32]
 801dd0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	69db      	ldr	r3, [r3, #28]
 801dd12:	4917      	ldr	r1, [pc, #92]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dd14:	4313      	orrs	r3, r2
 801dd16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801dd18:	f000 f834 	bl	801dd84 <HAL_RCC_GetSysClockFreq>
 801dd1c:	4602      	mov	r2, r0
 801dd1e:	4b14      	ldr	r3, [pc, #80]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dd20:	699b      	ldr	r3, [r3, #24]
 801dd22:	0a1b      	lsrs	r3, r3, #8
 801dd24:	f003 030f 	and.w	r3, r3, #15
 801dd28:	4912      	ldr	r1, [pc, #72]	@ (801dd74 <HAL_RCC_ClockConfig+0x35c>)
 801dd2a:	5ccb      	ldrb	r3, [r1, r3]
 801dd2c:	f003 031f 	and.w	r3, r3, #31
 801dd30:	fa22 f303 	lsr.w	r3, r2, r3
 801dd34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801dd36:	4b0e      	ldr	r3, [pc, #56]	@ (801dd70 <HAL_RCC_ClockConfig+0x358>)
 801dd38:	699b      	ldr	r3, [r3, #24]
 801dd3a:	f003 030f 	and.w	r3, r3, #15
 801dd3e:	4a0d      	ldr	r2, [pc, #52]	@ (801dd74 <HAL_RCC_ClockConfig+0x35c>)
 801dd40:	5cd3      	ldrb	r3, [r2, r3]
 801dd42:	f003 031f 	and.w	r3, r3, #31
 801dd46:	693a      	ldr	r2, [r7, #16]
 801dd48:	fa22 f303 	lsr.w	r3, r2, r3
 801dd4c:	4a0a      	ldr	r2, [pc, #40]	@ (801dd78 <HAL_RCC_ClockConfig+0x360>)
 801dd4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801dd50:	4a0a      	ldr	r2, [pc, #40]	@ (801dd7c <HAL_RCC_ClockConfig+0x364>)
 801dd52:	693b      	ldr	r3, [r7, #16]
 801dd54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801dd56:	4b0a      	ldr	r3, [pc, #40]	@ (801dd80 <HAL_RCC_ClockConfig+0x368>)
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7fc fda0 	bl	801a8a0 <HAL_InitTick>
 801dd60:	4603      	mov	r3, r0
 801dd62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801dd64:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd66:	4618      	mov	r0, r3
 801dd68:	3718      	adds	r7, #24
 801dd6a:	46bd      	mov	sp, r7
 801dd6c:	bd80      	pop	{r7, pc}
 801dd6e:	bf00      	nop
 801dd70:	58024400 	.word	0x58024400
 801dd74:	080281f4 	.word	0x080281f4
 801dd78:	20000004 	.word	0x20000004
 801dd7c:	20000000 	.word	0x20000000
 801dd80:	20000020 	.word	0x20000020

0801dd84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801dd84:	b480      	push	{r7}
 801dd86:	b089      	sub	sp, #36	@ 0x24
 801dd88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801dd8a:	4bb3      	ldr	r3, [pc, #716]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd8c:	691b      	ldr	r3, [r3, #16]
 801dd8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801dd92:	2b18      	cmp	r3, #24
 801dd94:	f200 8155 	bhi.w	801e042 <HAL_RCC_GetSysClockFreq+0x2be>
 801dd98:	a201      	add	r2, pc, #4	@ (adr r2, 801dda0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801dd9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dd9e:	bf00      	nop
 801dda0:	0801de05 	.word	0x0801de05
 801dda4:	0801e043 	.word	0x0801e043
 801dda8:	0801e043 	.word	0x0801e043
 801ddac:	0801e043 	.word	0x0801e043
 801ddb0:	0801e043 	.word	0x0801e043
 801ddb4:	0801e043 	.word	0x0801e043
 801ddb8:	0801e043 	.word	0x0801e043
 801ddbc:	0801e043 	.word	0x0801e043
 801ddc0:	0801de2b 	.word	0x0801de2b
 801ddc4:	0801e043 	.word	0x0801e043
 801ddc8:	0801e043 	.word	0x0801e043
 801ddcc:	0801e043 	.word	0x0801e043
 801ddd0:	0801e043 	.word	0x0801e043
 801ddd4:	0801e043 	.word	0x0801e043
 801ddd8:	0801e043 	.word	0x0801e043
 801dddc:	0801e043 	.word	0x0801e043
 801dde0:	0801de31 	.word	0x0801de31
 801dde4:	0801e043 	.word	0x0801e043
 801dde8:	0801e043 	.word	0x0801e043
 801ddec:	0801e043 	.word	0x0801e043
 801ddf0:	0801e043 	.word	0x0801e043
 801ddf4:	0801e043 	.word	0x0801e043
 801ddf8:	0801e043 	.word	0x0801e043
 801ddfc:	0801e043 	.word	0x0801e043
 801de00:	0801de37 	.word	0x0801de37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801de04:	4b94      	ldr	r3, [pc, #592]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	f003 0320 	and.w	r3, r3, #32
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d009      	beq.n	801de24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801de10:	4b91      	ldr	r3, [pc, #580]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	08db      	lsrs	r3, r3, #3
 801de16:	f003 0303 	and.w	r3, r3, #3
 801de1a:	4a90      	ldr	r2, [pc, #576]	@ (801e05c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801de1c:	fa22 f303 	lsr.w	r3, r2, r3
 801de20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801de22:	e111      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801de24:	4b8d      	ldr	r3, [pc, #564]	@ (801e05c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801de26:	61bb      	str	r3, [r7, #24]
      break;
 801de28:	e10e      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801de2a:	4b8d      	ldr	r3, [pc, #564]	@ (801e060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801de2c:	61bb      	str	r3, [r7, #24]
      break;
 801de2e:	e10b      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801de30:	4b8c      	ldr	r3, [pc, #560]	@ (801e064 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801de32:	61bb      	str	r3, [r7, #24]
      break;
 801de34:	e108      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801de36:	4b88      	ldr	r3, [pc, #544]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de3a:	f003 0303 	and.w	r3, r3, #3
 801de3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801de40:	4b85      	ldr	r3, [pc, #532]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de44:	091b      	lsrs	r3, r3, #4
 801de46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801de4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801de4c:	4b82      	ldr	r3, [pc, #520]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de50:	f003 0301 	and.w	r3, r3, #1
 801de54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801de56:	4b80      	ldr	r3, [pc, #512]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801de5a:	08db      	lsrs	r3, r3, #3
 801de5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de60:	68fa      	ldr	r2, [r7, #12]
 801de62:	fb02 f303 	mul.w	r3, r2, r3
 801de66:	ee07 3a90 	vmov	s15, r3
 801de6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801de72:	693b      	ldr	r3, [r7, #16]
 801de74:	2b00      	cmp	r3, #0
 801de76:	f000 80e1 	beq.w	801e03c <HAL_RCC_GetSysClockFreq+0x2b8>
 801de7a:	697b      	ldr	r3, [r7, #20]
 801de7c:	2b02      	cmp	r3, #2
 801de7e:	f000 8083 	beq.w	801df88 <HAL_RCC_GetSysClockFreq+0x204>
 801de82:	697b      	ldr	r3, [r7, #20]
 801de84:	2b02      	cmp	r3, #2
 801de86:	f200 80a1 	bhi.w	801dfcc <HAL_RCC_GetSysClockFreq+0x248>
 801de8a:	697b      	ldr	r3, [r7, #20]
 801de8c:	2b00      	cmp	r3, #0
 801de8e:	d003      	beq.n	801de98 <HAL_RCC_GetSysClockFreq+0x114>
 801de90:	697b      	ldr	r3, [r7, #20]
 801de92:	2b01      	cmp	r3, #1
 801de94:	d056      	beq.n	801df44 <HAL_RCC_GetSysClockFreq+0x1c0>
 801de96:	e099      	b.n	801dfcc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801de98:	4b6f      	ldr	r3, [pc, #444]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de9a:	681b      	ldr	r3, [r3, #0]
 801de9c:	f003 0320 	and.w	r3, r3, #32
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d02d      	beq.n	801df00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dea4:	4b6c      	ldr	r3, [pc, #432]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	08db      	lsrs	r3, r3, #3
 801deaa:	f003 0303 	and.w	r3, r3, #3
 801deae:	4a6b      	ldr	r2, [pc, #428]	@ (801e05c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801deb0:	fa22 f303 	lsr.w	r3, r2, r3
 801deb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	ee07 3a90 	vmov	s15, r3
 801debc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dec0:	693b      	ldr	r3, [r7, #16]
 801dec2:	ee07 3a90 	vmov	s15, r3
 801dec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801deca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dece:	4b62      	ldr	r3, [pc, #392]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ded0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ded2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ded6:	ee07 3a90 	vmov	s15, r3
 801deda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dede:	ed97 6a02 	vldr	s12, [r7, #8]
 801dee2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801e068 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801deea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801deee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801def2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801def6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801defa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801defe:	e087      	b.n	801e010 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801df00:	693b      	ldr	r3, [r7, #16]
 801df02:	ee07 3a90 	vmov	s15, r3
 801df06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801e06c <HAL_RCC_GetSysClockFreq+0x2e8>
 801df0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df12:	4b51      	ldr	r3, [pc, #324]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801df14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801df16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df1a:	ee07 3a90 	vmov	s15, r3
 801df1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df22:	ed97 6a02 	vldr	s12, [r7, #8]
 801df26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801e068 <HAL_RCC_GetSysClockFreq+0x2e4>
 801df2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801df36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801df42:	e065      	b.n	801e010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801df44:	693b      	ldr	r3, [r7, #16]
 801df46:	ee07 3a90 	vmov	s15, r3
 801df4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801e070 <HAL_RCC_GetSysClockFreq+0x2ec>
 801df52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df56:	4b40      	ldr	r3, [pc, #256]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801df58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801df5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df5e:	ee07 3a90 	vmov	s15, r3
 801df62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df66:	ed97 6a02 	vldr	s12, [r7, #8]
 801df6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801e068 <HAL_RCC_GetSysClockFreq+0x2e4>
 801df6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801df7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801df86:	e043      	b.n	801e010 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801df88:	693b      	ldr	r3, [r7, #16]
 801df8a:	ee07 3a90 	vmov	s15, r3
 801df8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801e074 <HAL_RCC_GetSysClockFreq+0x2f0>
 801df96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df9a:	4b2f      	ldr	r3, [pc, #188]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801df9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801df9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfa2:	ee07 3a90 	vmov	s15, r3
 801dfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dfaa:	ed97 6a02 	vldr	s12, [r7, #8]
 801dfae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801e068 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dfba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dfc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dfca:	e021      	b.n	801e010 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	ee07 3a90 	vmov	s15, r3
 801dfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801e070 <HAL_RCC_GetSysClockFreq+0x2ec>
 801dfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dfde:	4b1e      	ldr	r3, [pc, #120]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfe6:	ee07 3a90 	vmov	s15, r3
 801dfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dfee:	ed97 6a02 	vldr	s12, [r7, #8]
 801dff2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801e068 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e006:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e00a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801e00e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801e010:	4b11      	ldr	r3, [pc, #68]	@ (801e058 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801e012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e014:	0a5b      	lsrs	r3, r3, #9
 801e016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e01a:	3301      	adds	r3, #1
 801e01c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801e01e:	683b      	ldr	r3, [r7, #0]
 801e020:	ee07 3a90 	vmov	s15, r3
 801e024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e028:	edd7 6a07 	vldr	s13, [r7, #28]
 801e02c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e034:	ee17 3a90 	vmov	r3, s15
 801e038:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801e03a:	e005      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801e03c:	2300      	movs	r3, #0
 801e03e:	61bb      	str	r3, [r7, #24]
      break;
 801e040:	e002      	b.n	801e048 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801e042:	4b07      	ldr	r3, [pc, #28]	@ (801e060 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801e044:	61bb      	str	r3, [r7, #24]
      break;
 801e046:	bf00      	nop
  }

  return sysclockfreq;
 801e048:	69bb      	ldr	r3, [r7, #24]
}
 801e04a:	4618      	mov	r0, r3
 801e04c:	3724      	adds	r7, #36	@ 0x24
 801e04e:	46bd      	mov	sp, r7
 801e050:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e054:	4770      	bx	lr
 801e056:	bf00      	nop
 801e058:	58024400 	.word	0x58024400
 801e05c:	03d09000 	.word	0x03d09000
 801e060:	003d0900 	.word	0x003d0900
 801e064:	017d7840 	.word	0x017d7840
 801e068:	46000000 	.word	0x46000000
 801e06c:	4c742400 	.word	0x4c742400
 801e070:	4a742400 	.word	0x4a742400
 801e074:	4bbebc20 	.word	0x4bbebc20

0801e078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	b082      	sub	sp, #8
 801e07c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801e07e:	f7ff fe81 	bl	801dd84 <HAL_RCC_GetSysClockFreq>
 801e082:	4602      	mov	r2, r0
 801e084:	4b10      	ldr	r3, [pc, #64]	@ (801e0c8 <HAL_RCC_GetHCLKFreq+0x50>)
 801e086:	699b      	ldr	r3, [r3, #24]
 801e088:	0a1b      	lsrs	r3, r3, #8
 801e08a:	f003 030f 	and.w	r3, r3, #15
 801e08e:	490f      	ldr	r1, [pc, #60]	@ (801e0cc <HAL_RCC_GetHCLKFreq+0x54>)
 801e090:	5ccb      	ldrb	r3, [r1, r3]
 801e092:	f003 031f 	and.w	r3, r3, #31
 801e096:	fa22 f303 	lsr.w	r3, r2, r3
 801e09a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801e09c:	4b0a      	ldr	r3, [pc, #40]	@ (801e0c8 <HAL_RCC_GetHCLKFreq+0x50>)
 801e09e:	699b      	ldr	r3, [r3, #24]
 801e0a0:	f003 030f 	and.w	r3, r3, #15
 801e0a4:	4a09      	ldr	r2, [pc, #36]	@ (801e0cc <HAL_RCC_GetHCLKFreq+0x54>)
 801e0a6:	5cd3      	ldrb	r3, [r2, r3]
 801e0a8:	f003 031f 	and.w	r3, r3, #31
 801e0ac:	687a      	ldr	r2, [r7, #4]
 801e0ae:	fa22 f303 	lsr.w	r3, r2, r3
 801e0b2:	4a07      	ldr	r2, [pc, #28]	@ (801e0d0 <HAL_RCC_GetHCLKFreq+0x58>)
 801e0b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801e0b6:	4a07      	ldr	r2, [pc, #28]	@ (801e0d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801e0bc:	4b04      	ldr	r3, [pc, #16]	@ (801e0d0 <HAL_RCC_GetHCLKFreq+0x58>)
 801e0be:	681b      	ldr	r3, [r3, #0]
}
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	3708      	adds	r7, #8
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	bd80      	pop	{r7, pc}
 801e0c8:	58024400 	.word	0x58024400
 801e0cc:	080281f4 	.word	0x080281f4
 801e0d0:	20000004 	.word	0x20000004
 801e0d4:	20000000 	.word	0x20000000

0801e0d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801e0dc:	f7ff ffcc 	bl	801e078 <HAL_RCC_GetHCLKFreq>
 801e0e0:	4602      	mov	r2, r0
 801e0e2:	4b06      	ldr	r3, [pc, #24]	@ (801e0fc <HAL_RCC_GetPCLK1Freq+0x24>)
 801e0e4:	69db      	ldr	r3, [r3, #28]
 801e0e6:	091b      	lsrs	r3, r3, #4
 801e0e8:	f003 0307 	and.w	r3, r3, #7
 801e0ec:	4904      	ldr	r1, [pc, #16]	@ (801e100 <HAL_RCC_GetPCLK1Freq+0x28>)
 801e0ee:	5ccb      	ldrb	r3, [r1, r3]
 801e0f0:	f003 031f 	and.w	r3, r3, #31
 801e0f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	bd80      	pop	{r7, pc}
 801e0fc:	58024400 	.word	0x58024400
 801e100:	080281f4 	.word	0x080281f4

0801e104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801e108:	f7ff ffb6 	bl	801e078 <HAL_RCC_GetHCLKFreq>
 801e10c:	4602      	mov	r2, r0
 801e10e:	4b06      	ldr	r3, [pc, #24]	@ (801e128 <HAL_RCC_GetPCLK2Freq+0x24>)
 801e110:	69db      	ldr	r3, [r3, #28]
 801e112:	0a1b      	lsrs	r3, r3, #8
 801e114:	f003 0307 	and.w	r3, r3, #7
 801e118:	4904      	ldr	r1, [pc, #16]	@ (801e12c <HAL_RCC_GetPCLK2Freq+0x28>)
 801e11a:	5ccb      	ldrb	r3, [r1, r3]
 801e11c:	f003 031f 	and.w	r3, r3, #31
 801e120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801e124:	4618      	mov	r0, r3
 801e126:	bd80      	pop	{r7, pc}
 801e128:	58024400 	.word	0x58024400
 801e12c:	080281f4 	.word	0x080281f4

0801e130 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801e130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e134:	b0ca      	sub	sp, #296	@ 0x128
 801e136:	af00      	add	r7, sp, #0
 801e138:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801e13c:	2300      	movs	r3, #0
 801e13e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801e142:	2300      	movs	r3, #0
 801e144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801e148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e150:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801e154:	2500      	movs	r5, #0
 801e156:	ea54 0305 	orrs.w	r3, r4, r5
 801e15a:	d049      	beq.n	801e1f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801e15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e160:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e162:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e166:	d02f      	beq.n	801e1c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801e168:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e16c:	d828      	bhi.n	801e1c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801e16e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e172:	d01a      	beq.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801e174:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e178:	d822      	bhi.n	801e1c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d003      	beq.n	801e186 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801e17e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e182:	d007      	beq.n	801e194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801e184:	e01c      	b.n	801e1c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e186:	4bb8      	ldr	r3, [pc, #736]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e18a:	4ab7      	ldr	r2, [pc, #732]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e18c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e192:	e01a      	b.n	801e1ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e198:	3308      	adds	r3, #8
 801e19a:	2102      	movs	r1, #2
 801e19c:	4618      	mov	r0, r3
 801e19e:	f001 fc8f 	bl	801fac0 <RCCEx_PLL2_Config>
 801e1a2:	4603      	mov	r3, r0
 801e1a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e1a8:	e00f      	b.n	801e1ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1ae:	3328      	adds	r3, #40	@ 0x28
 801e1b0:	2102      	movs	r1, #2
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	f001 fd36 	bl	801fc24 <RCCEx_PLL3_Config>
 801e1b8:	4603      	mov	r3, r0
 801e1ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801e1be:	e004      	b.n	801e1ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1c6:	e000      	b.n	801e1ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801e1c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	d10a      	bne.n	801e1e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801e1d2:	4ba5      	ldr	r3, [pc, #660]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e1d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e1da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e1e0:	4aa1      	ldr	r2, [pc, #644]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1e2:	430b      	orrs	r3, r1
 801e1e4:	6513      	str	r3, [r2, #80]	@ 0x50
 801e1e6:	e003      	b.n	801e1f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801e1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801e1fc:	f04f 0900 	mov.w	r9, #0
 801e200:	ea58 0309 	orrs.w	r3, r8, r9
 801e204:	d047      	beq.n	801e296 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801e206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e20a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e20c:	2b04      	cmp	r3, #4
 801e20e:	d82a      	bhi.n	801e266 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801e210:	a201      	add	r2, pc, #4	@ (adr r2, 801e218 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801e212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e216:	bf00      	nop
 801e218:	0801e22d 	.word	0x0801e22d
 801e21c:	0801e23b 	.word	0x0801e23b
 801e220:	0801e251 	.word	0x0801e251
 801e224:	0801e26f 	.word	0x0801e26f
 801e228:	0801e26f 	.word	0x0801e26f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e22c:	4b8e      	ldr	r3, [pc, #568]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e230:	4a8d      	ldr	r2, [pc, #564]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e238:	e01a      	b.n	801e270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e23e:	3308      	adds	r3, #8
 801e240:	2100      	movs	r1, #0
 801e242:	4618      	mov	r0, r3
 801e244:	f001 fc3c 	bl	801fac0 <RCCEx_PLL2_Config>
 801e248:	4603      	mov	r3, r0
 801e24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e24e:	e00f      	b.n	801e270 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e254:	3328      	adds	r3, #40	@ 0x28
 801e256:	2100      	movs	r1, #0
 801e258:	4618      	mov	r0, r3
 801e25a:	f001 fce3 	bl	801fc24 <RCCEx_PLL3_Config>
 801e25e:	4603      	mov	r3, r0
 801e260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e264:	e004      	b.n	801e270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e266:	2301      	movs	r3, #1
 801e268:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e26c:	e000      	b.n	801e270 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801e26e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e274:	2b00      	cmp	r3, #0
 801e276:	d10a      	bne.n	801e28e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801e278:	4b7b      	ldr	r3, [pc, #492]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e27a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e27c:	f023 0107 	bic.w	r1, r3, #7
 801e280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e286:	4a78      	ldr	r2, [pc, #480]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e288:	430b      	orrs	r3, r1
 801e28a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e28c:	e003      	b.n	801e296 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e28e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801e296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e29e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801e2a2:	f04f 0b00 	mov.w	fp, #0
 801e2a6:	ea5a 030b 	orrs.w	r3, sl, fp
 801e2aa:	d04c      	beq.n	801e346 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801e2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e2b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2b6:	d030      	beq.n	801e31a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801e2b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e2bc:	d829      	bhi.n	801e312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e2be:	2bc0      	cmp	r3, #192	@ 0xc0
 801e2c0:	d02d      	beq.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801e2c2:	2bc0      	cmp	r3, #192	@ 0xc0
 801e2c4:	d825      	bhi.n	801e312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e2c6:	2b80      	cmp	r3, #128	@ 0x80
 801e2c8:	d018      	beq.n	801e2fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801e2ca:	2b80      	cmp	r3, #128	@ 0x80
 801e2cc:	d821      	bhi.n	801e312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d002      	beq.n	801e2d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801e2d2:	2b40      	cmp	r3, #64	@ 0x40
 801e2d4:	d007      	beq.n	801e2e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801e2d6:	e01c      	b.n	801e312 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e2d8:	4b63      	ldr	r3, [pc, #396]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e2dc:	4a62      	ldr	r2, [pc, #392]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e2de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e2e4:	e01c      	b.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2ea:	3308      	adds	r3, #8
 801e2ec:	2100      	movs	r1, #0
 801e2ee:	4618      	mov	r0, r3
 801e2f0:	f001 fbe6 	bl	801fac0 <RCCEx_PLL2_Config>
 801e2f4:	4603      	mov	r3, r0
 801e2f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e2fa:	e011      	b.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e300:	3328      	adds	r3, #40	@ 0x28
 801e302:	2100      	movs	r1, #0
 801e304:	4618      	mov	r0, r3
 801e306:	f001 fc8d 	bl	801fc24 <RCCEx_PLL3_Config>
 801e30a:	4603      	mov	r3, r0
 801e30c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e310:	e006      	b.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e312:	2301      	movs	r3, #1
 801e314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e318:	e002      	b.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e31a:	bf00      	nop
 801e31c:	e000      	b.n	801e320 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e31e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e324:	2b00      	cmp	r3, #0
 801e326:	d10a      	bne.n	801e33e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801e328:	4b4f      	ldr	r3, [pc, #316]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e32c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801e330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e336:	4a4c      	ldr	r2, [pc, #304]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e338:	430b      	orrs	r3, r1
 801e33a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e33c:	e003      	b.n	801e346 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e33e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801e346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e34e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e352:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801e356:	2300      	movs	r3, #0
 801e358:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801e35c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801e360:	460b      	mov	r3, r1
 801e362:	4313      	orrs	r3, r2
 801e364:	d053      	beq.n	801e40e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801e366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e36a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e36e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e372:	d035      	beq.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801e374:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e378:	d82e      	bhi.n	801e3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e37a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e37e:	d031      	beq.n	801e3e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801e380:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e384:	d828      	bhi.n	801e3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e386:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e38a:	d01a      	beq.n	801e3c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801e38c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e390:	d822      	bhi.n	801e3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e392:	2b00      	cmp	r3, #0
 801e394:	d003      	beq.n	801e39e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801e396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e39a:	d007      	beq.n	801e3ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801e39c:	e01c      	b.n	801e3d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e39e:	4b32      	ldr	r3, [pc, #200]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3a2:	4a31      	ldr	r2, [pc, #196]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e3a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e3a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e3aa:	e01c      	b.n	801e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3b0:	3308      	adds	r3, #8
 801e3b2:	2100      	movs	r1, #0
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f001 fb83 	bl	801fac0 <RCCEx_PLL2_Config>
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e3c0:	e011      	b.n	801e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c6:	3328      	adds	r3, #40	@ 0x28
 801e3c8:	2100      	movs	r1, #0
 801e3ca:	4618      	mov	r0, r3
 801e3cc:	f001 fc2a 	bl	801fc24 <RCCEx_PLL3_Config>
 801e3d0:	4603      	mov	r3, r0
 801e3d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e3d6:	e006      	b.n	801e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e3d8:	2301      	movs	r3, #1
 801e3da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3de:	e002      	b.n	801e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e3e0:	bf00      	nop
 801e3e2:	e000      	b.n	801e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e3e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	d10b      	bne.n	801e406 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801e3ee:	4b1e      	ldr	r3, [pc, #120]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e3f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801e3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e3fe:	4a1a      	ldr	r2, [pc, #104]	@ (801e468 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e400:	430b      	orrs	r3, r1
 801e402:	6593      	str	r3, [r2, #88]	@ 0x58
 801e404:	e003      	b.n	801e40e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e40a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801e40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e416:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e41a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801e41e:	2300      	movs	r3, #0
 801e420:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e424:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801e428:	460b      	mov	r3, r1
 801e42a:	4313      	orrs	r3, r2
 801e42c:	d056      	beq.n	801e4dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801e42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e436:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e43a:	d038      	beq.n	801e4ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801e43c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e440:	d831      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e442:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e446:	d034      	beq.n	801e4b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801e448:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e44c:	d82b      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e44e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e452:	d01d      	beq.n	801e490 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801e454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e458:	d825      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e45a:	2b00      	cmp	r3, #0
 801e45c:	d006      	beq.n	801e46c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801e45e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e462:	d00a      	beq.n	801e47a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e464:	e01f      	b.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e466:	bf00      	nop
 801e468:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e46c:	4ba2      	ldr	r3, [pc, #648]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e470:	4aa1      	ldr	r2, [pc, #644]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e478:	e01c      	b.n	801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e47e:	3308      	adds	r3, #8
 801e480:	2100      	movs	r1, #0
 801e482:	4618      	mov	r0, r3
 801e484:	f001 fb1c 	bl	801fac0 <RCCEx_PLL2_Config>
 801e488:	4603      	mov	r3, r0
 801e48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e48e:	e011      	b.n	801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e494:	3328      	adds	r3, #40	@ 0x28
 801e496:	2100      	movs	r1, #0
 801e498:	4618      	mov	r0, r3
 801e49a:	f001 fbc3 	bl	801fc24 <RCCEx_PLL3_Config>
 801e49e:	4603      	mov	r3, r0
 801e4a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e4a4:	e006      	b.n	801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e4a6:	2301      	movs	r3, #1
 801e4a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e4ac:	e002      	b.n	801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e4ae:	bf00      	nop
 801e4b0:	e000      	b.n	801e4b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e4b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e4b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d10b      	bne.n	801e4d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801e4bc:	4b8e      	ldr	r3, [pc, #568]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e4be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e4c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801e4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e4cc:	4a8a      	ldr	r2, [pc, #552]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e4ce:	430b      	orrs	r3, r1
 801e4d0:	6593      	str	r3, [r2, #88]	@ 0x58
 801e4d2:	e003      	b.n	801e4dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801e4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801e4e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801e4ec:	2300      	movs	r3, #0
 801e4ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801e4f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801e4f6:	460b      	mov	r3, r1
 801e4f8:	4313      	orrs	r3, r2
 801e4fa:	d03a      	beq.n	801e572 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801e4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e502:	2b30      	cmp	r3, #48	@ 0x30
 801e504:	d01f      	beq.n	801e546 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801e506:	2b30      	cmp	r3, #48	@ 0x30
 801e508:	d819      	bhi.n	801e53e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e50a:	2b20      	cmp	r3, #32
 801e50c:	d00c      	beq.n	801e528 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801e50e:	2b20      	cmp	r3, #32
 801e510:	d815      	bhi.n	801e53e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e512:	2b00      	cmp	r3, #0
 801e514:	d019      	beq.n	801e54a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801e516:	2b10      	cmp	r3, #16
 801e518:	d111      	bne.n	801e53e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e51a:	4b77      	ldr	r3, [pc, #476]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e51e:	4a76      	ldr	r2, [pc, #472]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e526:	e011      	b.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e52c:	3308      	adds	r3, #8
 801e52e:	2102      	movs	r1, #2
 801e530:	4618      	mov	r0, r3
 801e532:	f001 fac5 	bl	801fac0 <RCCEx_PLL2_Config>
 801e536:	4603      	mov	r3, r0
 801e538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e53c:	e006      	b.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e53e:	2301      	movs	r3, #1
 801e540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e544:	e002      	b.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e546:	bf00      	nop
 801e548:	e000      	b.n	801e54c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e54a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e54c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e550:	2b00      	cmp	r3, #0
 801e552:	d10a      	bne.n	801e56a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801e554:	4b68      	ldr	r3, [pc, #416]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e558:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e562:	4a65      	ldr	r2, [pc, #404]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e564:	430b      	orrs	r3, r1
 801e566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e568:	e003      	b.n	801e572 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e56a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e56e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801e572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e57a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801e57e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801e582:	2300      	movs	r3, #0
 801e584:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801e588:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801e58c:	460b      	mov	r3, r1
 801e58e:	4313      	orrs	r3, r2
 801e590:	d051      	beq.n	801e636 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801e592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e59c:	d035      	beq.n	801e60a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801e59e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e5a2:	d82e      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e5a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e5a8:	d031      	beq.n	801e60e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801e5aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e5ae:	d828      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e5b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e5b4:	d01a      	beq.n	801e5ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801e5b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e5ba:	d822      	bhi.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d003      	beq.n	801e5c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801e5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e5c4:	d007      	beq.n	801e5d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801e5c6:	e01c      	b.n	801e602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e5c8:	4b4b      	ldr	r3, [pc, #300]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e5cc:	4a4a      	ldr	r2, [pc, #296]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e5ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e5d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e5d4:	e01c      	b.n	801e610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5da:	3308      	adds	r3, #8
 801e5dc:	2100      	movs	r1, #0
 801e5de:	4618      	mov	r0, r3
 801e5e0:	f001 fa6e 	bl	801fac0 <RCCEx_PLL2_Config>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e5ea:	e011      	b.n	801e610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5f0:	3328      	adds	r3, #40	@ 0x28
 801e5f2:	2100      	movs	r1, #0
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f001 fb15 	bl	801fc24 <RCCEx_PLL3_Config>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e600:	e006      	b.n	801e610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e602:	2301      	movs	r3, #1
 801e604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e608:	e002      	b.n	801e610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e60a:	bf00      	nop
 801e60c:	e000      	b.n	801e610 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e60e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e614:	2b00      	cmp	r3, #0
 801e616:	d10a      	bne.n	801e62e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e618:	4b37      	ldr	r3, [pc, #220]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e61c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e626:	4a34      	ldr	r2, [pc, #208]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e628:	430b      	orrs	r3, r1
 801e62a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e62c:	e003      	b.n	801e636 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e642:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e646:	2300      	movs	r3, #0
 801e648:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e64c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e650:	460b      	mov	r3, r1
 801e652:	4313      	orrs	r3, r2
 801e654:	d056      	beq.n	801e704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e65a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e65c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e660:	d033      	beq.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e662:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e666:	d82c      	bhi.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e668:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e66c:	d02f      	beq.n	801e6ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e66e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e672:	d826      	bhi.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e678:	d02b      	beq.n	801e6d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e67a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e67e:	d820      	bhi.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e684:	d012      	beq.n	801e6ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e68a:	d81a      	bhi.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d022      	beq.n	801e6d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e694:	d115      	bne.n	801e6c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e69a:	3308      	adds	r3, #8
 801e69c:	2101      	movs	r1, #1
 801e69e:	4618      	mov	r0, r3
 801e6a0:	f001 fa0e 	bl	801fac0 <RCCEx_PLL2_Config>
 801e6a4:	4603      	mov	r3, r0
 801e6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e6aa:	e015      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b0:	3328      	adds	r3, #40	@ 0x28
 801e6b2:	2101      	movs	r1, #1
 801e6b4:	4618      	mov	r0, r3
 801e6b6:	f001 fab5 	bl	801fc24 <RCCEx_PLL3_Config>
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e6c0:	e00a      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e6c2:	2301      	movs	r3, #1
 801e6c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e6c8:	e006      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e6ca:	bf00      	nop
 801e6cc:	e004      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e6ce:	bf00      	nop
 801e6d0:	e002      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e6d2:	bf00      	nop
 801e6d4:	e000      	b.n	801e6d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e6d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d10d      	bne.n	801e6fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e6e0:	4b05      	ldr	r3, [pc, #20]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e6e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e6ee:	4a02      	ldr	r2, [pc, #8]	@ (801e6f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e6f0:	430b      	orrs	r3, r1
 801e6f2:	6513      	str	r3, [r2, #80]	@ 0x50
 801e6f4:	e006      	b.n	801e704 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e6f6:	bf00      	nop
 801e6f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e70c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e714:	2300      	movs	r3, #0
 801e716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e71a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e71e:	460b      	mov	r3, r1
 801e720:	4313      	orrs	r3, r2
 801e722:	d055      	beq.n	801e7d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e72c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e730:	d033      	beq.n	801e79a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e736:	d82c      	bhi.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e73c:	d02f      	beq.n	801e79e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e73e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e742:	d826      	bhi.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e748:	d02b      	beq.n	801e7a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e74a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e74e:	d820      	bhi.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e754:	d012      	beq.n	801e77c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e75a:	d81a      	bhi.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d022      	beq.n	801e7a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e764:	d115      	bne.n	801e792 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e76a:	3308      	adds	r3, #8
 801e76c:	2101      	movs	r1, #1
 801e76e:	4618      	mov	r0, r3
 801e770:	f001 f9a6 	bl	801fac0 <RCCEx_PLL2_Config>
 801e774:	4603      	mov	r3, r0
 801e776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e77a:	e015      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e780:	3328      	adds	r3, #40	@ 0x28
 801e782:	2101      	movs	r1, #1
 801e784:	4618      	mov	r0, r3
 801e786:	f001 fa4d 	bl	801fc24 <RCCEx_PLL3_Config>
 801e78a:	4603      	mov	r3, r0
 801e78c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e790:	e00a      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e792:	2301      	movs	r3, #1
 801e794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e798:	e006      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e79a:	bf00      	nop
 801e79c:	e004      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e79e:	bf00      	nop
 801e7a0:	e002      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e7a2:	bf00      	nop
 801e7a4:	e000      	b.n	801e7a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e7a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e7a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d10b      	bne.n	801e7c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e7b0:	4ba3      	ldr	r3, [pc, #652]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e7b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e7c0:	4a9f      	ldr	r2, [pc, #636]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7c2:	430b      	orrs	r3, r1
 801e7c4:	6593      	str	r3, [r2, #88]	@ 0x58
 801e7c6:	e003      	b.n	801e7d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e7c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e7dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e7e0:	2300      	movs	r3, #0
 801e7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e7e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e7ea:	460b      	mov	r3, r1
 801e7ec:	4313      	orrs	r3, r2
 801e7ee:	d037      	beq.n	801e860 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e7fa:	d00e      	beq.n	801e81a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e7fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e800:	d816      	bhi.n	801e830 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e802:	2b00      	cmp	r3, #0
 801e804:	d018      	beq.n	801e838 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e80a:	d111      	bne.n	801e830 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e80c:	4b8c      	ldr	r3, [pc, #560]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e80e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e810:	4a8b      	ldr	r2, [pc, #556]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e818:	e00f      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e81a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e81e:	3308      	adds	r3, #8
 801e820:	2101      	movs	r1, #1
 801e822:	4618      	mov	r0, r3
 801e824:	f001 f94c 	bl	801fac0 <RCCEx_PLL2_Config>
 801e828:	4603      	mov	r3, r0
 801e82a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e82e:	e004      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e830:	2301      	movs	r3, #1
 801e832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e836:	e000      	b.n	801e83a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e838:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e83a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d10a      	bne.n	801e858 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e842:	4b7f      	ldr	r3, [pc, #508]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e846:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e84e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e850:	4a7b      	ldr	r2, [pc, #492]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e852:	430b      	orrs	r3, r1
 801e854:	6513      	str	r3, [r2, #80]	@ 0x50
 801e856:	e003      	b.n	801e860 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e85c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e868:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e86c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e870:	2300      	movs	r3, #0
 801e872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e876:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e87a:	460b      	mov	r3, r1
 801e87c:	4313      	orrs	r3, r2
 801e87e:	d039      	beq.n	801e8f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e886:	2b03      	cmp	r3, #3
 801e888:	d81c      	bhi.n	801e8c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e88a:	a201      	add	r2, pc, #4	@ (adr r2, 801e890 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e890:	0801e8cd 	.word	0x0801e8cd
 801e894:	0801e8a1 	.word	0x0801e8a1
 801e898:	0801e8af 	.word	0x0801e8af
 801e89c:	0801e8cd 	.word	0x0801e8cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e8a0:	4b67      	ldr	r3, [pc, #412]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8a4:	4a66      	ldr	r2, [pc, #408]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e8a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e8ac:	e00f      	b.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8b2:	3308      	adds	r3, #8
 801e8b4:	2102      	movs	r1, #2
 801e8b6:	4618      	mov	r0, r3
 801e8b8:	f001 f902 	bl	801fac0 <RCCEx_PLL2_Config>
 801e8bc:	4603      	mov	r3, r0
 801e8be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e8c2:	e004      	b.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e8c4:	2301      	movs	r3, #1
 801e8c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e8ca:	e000      	b.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8d2:	2b00      	cmp	r3, #0
 801e8d4:	d10a      	bne.n	801e8ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e8d6:	4b5a      	ldr	r3, [pc, #360]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e8d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e8da:	f023 0103 	bic.w	r1, r3, #3
 801e8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e8e4:	4a56      	ldr	r2, [pc, #344]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e8e6:	430b      	orrs	r3, r1
 801e8e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e8ea:	e003      	b.n	801e8f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e8ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e8f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e900:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e904:	2300      	movs	r3, #0
 801e906:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e90a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e90e:	460b      	mov	r3, r1
 801e910:	4313      	orrs	r3, r2
 801e912:	f000 809f 	beq.w	801ea54 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e916:	4b4b      	ldr	r3, [pc, #300]	@ (801ea44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e918:	681b      	ldr	r3, [r3, #0]
 801e91a:	4a4a      	ldr	r2, [pc, #296]	@ (801ea44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e91c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e922:	f7fc f807 	bl	801a934 <HAL_GetTick>
 801e926:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e92a:	e00b      	b.n	801e944 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e92c:	f7fc f802 	bl	801a934 <HAL_GetTick>
 801e930:	4602      	mov	r2, r0
 801e932:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e936:	1ad3      	subs	r3, r2, r3
 801e938:	2b64      	cmp	r3, #100	@ 0x64
 801e93a:	d903      	bls.n	801e944 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e93c:	2303      	movs	r3, #3
 801e93e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e942:	e005      	b.n	801e950 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e944:	4b3f      	ldr	r3, [pc, #252]	@ (801ea44 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e94c:	2b00      	cmp	r3, #0
 801e94e:	d0ed      	beq.n	801e92c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e954:	2b00      	cmp	r3, #0
 801e956:	d179      	bne.n	801ea4c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e958:	4b39      	ldr	r3, [pc, #228]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e95a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e95c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e960:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e964:	4053      	eors	r3, r2
 801e966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d015      	beq.n	801e99a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e96e:	4b34      	ldr	r3, [pc, #208]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e976:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e97a:	4b31      	ldr	r3, [pc, #196]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e97e:	4a30      	ldr	r2, [pc, #192]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e984:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e986:	4b2e      	ldr	r3, [pc, #184]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e98a:	4a2d      	ldr	r2, [pc, #180]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e98c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e990:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e992:	4a2b      	ldr	r2, [pc, #172]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e998:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e99e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e9a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e9a6:	d118      	bne.n	801e9da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e9a8:	f7fb ffc4 	bl	801a934 <HAL_GetTick>
 801e9ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e9b0:	e00d      	b.n	801e9ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e9b2:	f7fb ffbf 	bl	801a934 <HAL_GetTick>
 801e9b6:	4602      	mov	r2, r0
 801e9b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e9bc:	1ad2      	subs	r2, r2, r3
 801e9be:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e9c2:	429a      	cmp	r2, r3
 801e9c4:	d903      	bls.n	801e9ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e9c6:	2303      	movs	r3, #3
 801e9c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e9cc:	e005      	b.n	801e9da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e9ce:	4b1c      	ldr	r3, [pc, #112]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e9d2:	f003 0302 	and.w	r3, r3, #2
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d0eb      	beq.n	801e9b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d129      	bne.n	801ea36 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e9ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e9ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e9f2:	d10e      	bne.n	801ea12 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e9f4:	4b12      	ldr	r3, [pc, #72]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e9f6:	691b      	ldr	r3, [r3, #16]
 801e9f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ea04:	091a      	lsrs	r2, r3, #4
 801ea06:	4b10      	ldr	r3, [pc, #64]	@ (801ea48 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801ea08:	4013      	ands	r3, r2
 801ea0a:	4a0d      	ldr	r2, [pc, #52]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ea0c:	430b      	orrs	r3, r1
 801ea0e:	6113      	str	r3, [r2, #16]
 801ea10:	e005      	b.n	801ea1e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801ea12:	4b0b      	ldr	r3, [pc, #44]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ea14:	691b      	ldr	r3, [r3, #16]
 801ea16:	4a0a      	ldr	r2, [pc, #40]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ea18:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ea1c:	6113      	str	r3, [r2, #16]
 801ea1e:	4b08      	ldr	r3, [pc, #32]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ea20:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801ea22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ea2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ea2e:	4a04      	ldr	r2, [pc, #16]	@ (801ea40 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ea30:	430b      	orrs	r3, r1
 801ea32:	6713      	str	r3, [r2, #112]	@ 0x70
 801ea34:	e00e      	b.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ea36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ea3e:	e009      	b.n	801ea54 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801ea40:	58024400 	.word	0x58024400
 801ea44:	58024800 	.word	0x58024800
 801ea48:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801ea54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea5c:	f002 0301 	and.w	r3, r2, #1
 801ea60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801ea64:	2300      	movs	r3, #0
 801ea66:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801ea6a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801ea6e:	460b      	mov	r3, r1
 801ea70:	4313      	orrs	r3, r2
 801ea72:	f000 8089 	beq.w	801eb88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801ea76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ea7c:	2b28      	cmp	r3, #40	@ 0x28
 801ea7e:	d86b      	bhi.n	801eb58 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801ea80:	a201      	add	r2, pc, #4	@ (adr r2, 801ea88 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801ea82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea86:	bf00      	nop
 801ea88:	0801eb61 	.word	0x0801eb61
 801ea8c:	0801eb59 	.word	0x0801eb59
 801ea90:	0801eb59 	.word	0x0801eb59
 801ea94:	0801eb59 	.word	0x0801eb59
 801ea98:	0801eb59 	.word	0x0801eb59
 801ea9c:	0801eb59 	.word	0x0801eb59
 801eaa0:	0801eb59 	.word	0x0801eb59
 801eaa4:	0801eb59 	.word	0x0801eb59
 801eaa8:	0801eb2d 	.word	0x0801eb2d
 801eaac:	0801eb59 	.word	0x0801eb59
 801eab0:	0801eb59 	.word	0x0801eb59
 801eab4:	0801eb59 	.word	0x0801eb59
 801eab8:	0801eb59 	.word	0x0801eb59
 801eabc:	0801eb59 	.word	0x0801eb59
 801eac0:	0801eb59 	.word	0x0801eb59
 801eac4:	0801eb59 	.word	0x0801eb59
 801eac8:	0801eb43 	.word	0x0801eb43
 801eacc:	0801eb59 	.word	0x0801eb59
 801ead0:	0801eb59 	.word	0x0801eb59
 801ead4:	0801eb59 	.word	0x0801eb59
 801ead8:	0801eb59 	.word	0x0801eb59
 801eadc:	0801eb59 	.word	0x0801eb59
 801eae0:	0801eb59 	.word	0x0801eb59
 801eae4:	0801eb59 	.word	0x0801eb59
 801eae8:	0801eb61 	.word	0x0801eb61
 801eaec:	0801eb59 	.word	0x0801eb59
 801eaf0:	0801eb59 	.word	0x0801eb59
 801eaf4:	0801eb59 	.word	0x0801eb59
 801eaf8:	0801eb59 	.word	0x0801eb59
 801eafc:	0801eb59 	.word	0x0801eb59
 801eb00:	0801eb59 	.word	0x0801eb59
 801eb04:	0801eb59 	.word	0x0801eb59
 801eb08:	0801eb61 	.word	0x0801eb61
 801eb0c:	0801eb59 	.word	0x0801eb59
 801eb10:	0801eb59 	.word	0x0801eb59
 801eb14:	0801eb59 	.word	0x0801eb59
 801eb18:	0801eb59 	.word	0x0801eb59
 801eb1c:	0801eb59 	.word	0x0801eb59
 801eb20:	0801eb59 	.word	0x0801eb59
 801eb24:	0801eb59 	.word	0x0801eb59
 801eb28:	0801eb61 	.word	0x0801eb61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801eb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb30:	3308      	adds	r3, #8
 801eb32:	2101      	movs	r1, #1
 801eb34:	4618      	mov	r0, r3
 801eb36:	f000 ffc3 	bl	801fac0 <RCCEx_PLL2_Config>
 801eb3a:	4603      	mov	r3, r0
 801eb3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801eb40:	e00f      	b.n	801eb62 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb46:	3328      	adds	r3, #40	@ 0x28
 801eb48:	2101      	movs	r1, #1
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	f001 f86a 	bl	801fc24 <RCCEx_PLL3_Config>
 801eb50:	4603      	mov	r3, r0
 801eb52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801eb56:	e004      	b.n	801eb62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eb58:	2301      	movs	r3, #1
 801eb5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eb5e:	e000      	b.n	801eb62 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801eb60:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eb62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d10a      	bne.n	801eb80 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801eb6a:	4bbf      	ldr	r3, [pc, #764]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb6e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801eb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801eb78:	4abb      	ldr	r2, [pc, #748]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb7a:	430b      	orrs	r3, r1
 801eb7c:	6553      	str	r3, [r2, #84]	@ 0x54
 801eb7e:	e003      	b.n	801eb88 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801eb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb90:	f002 0302 	and.w	r3, r2, #2
 801eb94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801eb98:	2300      	movs	r3, #0
 801eb9a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801eb9e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801eba2:	460b      	mov	r3, r1
 801eba4:	4313      	orrs	r3, r2
 801eba6:	d041      	beq.n	801ec2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801eba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ebae:	2b05      	cmp	r3, #5
 801ebb0:	d824      	bhi.n	801ebfc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801ebb2:	a201      	add	r2, pc, #4	@ (adr r2, 801ebb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801ebb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ebb8:	0801ec05 	.word	0x0801ec05
 801ebbc:	0801ebd1 	.word	0x0801ebd1
 801ebc0:	0801ebe7 	.word	0x0801ebe7
 801ebc4:	0801ec05 	.word	0x0801ec05
 801ebc8:	0801ec05 	.word	0x0801ec05
 801ebcc:	0801ec05 	.word	0x0801ec05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ebd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebd4:	3308      	adds	r3, #8
 801ebd6:	2101      	movs	r1, #1
 801ebd8:	4618      	mov	r0, r3
 801ebda:	f000 ff71 	bl	801fac0 <RCCEx_PLL2_Config>
 801ebde:	4603      	mov	r3, r0
 801ebe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ebe4:	e00f      	b.n	801ec06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ebe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebea:	3328      	adds	r3, #40	@ 0x28
 801ebec:	2101      	movs	r1, #1
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f001 f818 	bl	801fc24 <RCCEx_PLL3_Config>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801ebfa:	e004      	b.n	801ec06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ec02:	e000      	b.n	801ec06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801ec04:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ec06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec0a:	2b00      	cmp	r3, #0
 801ec0c:	d10a      	bne.n	801ec24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801ec0e:	4b96      	ldr	r3, [pc, #600]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ec10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ec12:	f023 0107 	bic.w	r1, r3, #7
 801ec16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ec1c:	4a92      	ldr	r2, [pc, #584]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ec1e:	430b      	orrs	r3, r1
 801ec20:	6553      	str	r3, [r2, #84]	@ 0x54
 801ec22:	e003      	b.n	801ec2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ec2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec34:	f002 0304 	and.w	r3, r2, #4
 801ec38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ec42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801ec46:	460b      	mov	r3, r1
 801ec48:	4313      	orrs	r3, r2
 801ec4a:	d044      	beq.n	801ecd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801ec4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ec54:	2b05      	cmp	r3, #5
 801ec56:	d825      	bhi.n	801eca4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801ec58:	a201      	add	r2, pc, #4	@ (adr r2, 801ec60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801ec5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec5e:	bf00      	nop
 801ec60:	0801ecad 	.word	0x0801ecad
 801ec64:	0801ec79 	.word	0x0801ec79
 801ec68:	0801ec8f 	.word	0x0801ec8f
 801ec6c:	0801ecad 	.word	0x0801ecad
 801ec70:	0801ecad 	.word	0x0801ecad
 801ec74:	0801ecad 	.word	0x0801ecad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ec78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec7c:	3308      	adds	r3, #8
 801ec7e:	2101      	movs	r1, #1
 801ec80:	4618      	mov	r0, r3
 801ec82:	f000 ff1d 	bl	801fac0 <RCCEx_PLL2_Config>
 801ec86:	4603      	mov	r3, r0
 801ec88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801ec8c:	e00f      	b.n	801ecae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec92:	3328      	adds	r3, #40	@ 0x28
 801ec94:	2101      	movs	r1, #1
 801ec96:	4618      	mov	r0, r3
 801ec98:	f000 ffc4 	bl	801fc24 <RCCEx_PLL3_Config>
 801ec9c:	4603      	mov	r3, r0
 801ec9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eca2:	e004      	b.n	801ecae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eca4:	2301      	movs	r3, #1
 801eca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ecaa:	e000      	b.n	801ecae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801ecac:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ecae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	d10b      	bne.n	801ecce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801ecb6:	4b6c      	ldr	r3, [pc, #432]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ecb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ecba:	f023 0107 	bic.w	r1, r3, #7
 801ecbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ecc6:	4a68      	ldr	r2, [pc, #416]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ecc8:	430b      	orrs	r3, r1
 801ecca:	6593      	str	r3, [r2, #88]	@ 0x58
 801eccc:	e003      	b.n	801ecd6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ecce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ecd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ecd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecde:	f002 0320 	and.w	r3, r2, #32
 801ece2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801ece6:	2300      	movs	r3, #0
 801ece8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801ecec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801ecf0:	460b      	mov	r3, r1
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	d055      	beq.n	801eda2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801ecf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ecfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ed02:	d033      	beq.n	801ed6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801ed04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ed08:	d82c      	bhi.n	801ed64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ed0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ed0e:	d02f      	beq.n	801ed70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801ed10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ed14:	d826      	bhi.n	801ed64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ed16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ed1a:	d02b      	beq.n	801ed74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801ed1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801ed20:	d820      	bhi.n	801ed64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ed22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ed26:	d012      	beq.n	801ed4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801ed28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ed2c:	d81a      	bhi.n	801ed64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d022      	beq.n	801ed78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801ed32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ed36:	d115      	bne.n	801ed64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ed38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed3c:	3308      	adds	r3, #8
 801ed3e:	2100      	movs	r1, #0
 801ed40:	4618      	mov	r0, r3
 801ed42:	f000 febd 	bl	801fac0 <RCCEx_PLL2_Config>
 801ed46:	4603      	mov	r3, r0
 801ed48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ed4c:	e015      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ed4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed52:	3328      	adds	r3, #40	@ 0x28
 801ed54:	2102      	movs	r1, #2
 801ed56:	4618      	mov	r0, r3
 801ed58:	f000 ff64 	bl	801fc24 <RCCEx_PLL3_Config>
 801ed5c:	4603      	mov	r3, r0
 801ed5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801ed62:	e00a      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ed64:	2301      	movs	r3, #1
 801ed66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ed6a:	e006      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ed6c:	bf00      	nop
 801ed6e:	e004      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ed70:	bf00      	nop
 801ed72:	e002      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ed74:	bf00      	nop
 801ed76:	e000      	b.n	801ed7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ed78:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ed7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d10b      	bne.n	801ed9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ed82:	4b39      	ldr	r3, [pc, #228]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ed84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ed86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ed8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ed92:	4a35      	ldr	r2, [pc, #212]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ed94:	430b      	orrs	r3, r1
 801ed96:	6553      	str	r3, [r2, #84]	@ 0x54
 801ed98:	e003      	b.n	801eda2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801eda2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edaa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801edae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801edb2:	2300      	movs	r3, #0
 801edb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801edb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801edbc:	460b      	mov	r3, r1
 801edbe:	4313      	orrs	r3, r2
 801edc0:	d058      	beq.n	801ee74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801edc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801edca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801edce:	d033      	beq.n	801ee38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801edd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801edd4:	d82c      	bhi.n	801ee30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801edd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801edda:	d02f      	beq.n	801ee3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801eddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ede0:	d826      	bhi.n	801ee30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ede2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ede6:	d02b      	beq.n	801ee40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801ede8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801edec:	d820      	bhi.n	801ee30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801edee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801edf2:	d012      	beq.n	801ee1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801edf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801edf8:	d81a      	bhi.n	801ee30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d022      	beq.n	801ee44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801edfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ee02:	d115      	bne.n	801ee30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ee04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee08:	3308      	adds	r3, #8
 801ee0a:	2100      	movs	r1, #0
 801ee0c:	4618      	mov	r0, r3
 801ee0e:	f000 fe57 	bl	801fac0 <RCCEx_PLL2_Config>
 801ee12:	4603      	mov	r3, r0
 801ee14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ee18:	e015      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ee1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee1e:	3328      	adds	r3, #40	@ 0x28
 801ee20:	2102      	movs	r1, #2
 801ee22:	4618      	mov	r0, r3
 801ee24:	f000 fefe 	bl	801fc24 <RCCEx_PLL3_Config>
 801ee28:	4603      	mov	r3, r0
 801ee2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ee2e:	e00a      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ee30:	2301      	movs	r3, #1
 801ee32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ee36:	e006      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ee38:	bf00      	nop
 801ee3a:	e004      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ee3c:	bf00      	nop
 801ee3e:	e002      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ee40:	bf00      	nop
 801ee42:	e000      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ee44:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ee46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d10e      	bne.n	801ee6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ee4e:	4b06      	ldr	r3, [pc, #24]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ee50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ee52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801ee56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ee5e:	4a02      	ldr	r2, [pc, #8]	@ (801ee68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ee60:	430b      	orrs	r3, r1
 801ee62:	6593      	str	r3, [r2, #88]	@ 0x58
 801ee64:	e006      	b.n	801ee74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ee66:	bf00      	nop
 801ee68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ee74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ee80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ee84:	2300      	movs	r3, #0
 801ee86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ee8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ee8e:	460b      	mov	r3, r1
 801ee90:	4313      	orrs	r3, r2
 801ee92:	d055      	beq.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ee94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ee9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eea0:	d033      	beq.n	801ef0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801eea2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eea6:	d82c      	bhi.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801eeac:	d02f      	beq.n	801ef0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801eeae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801eeb2:	d826      	bhi.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eeb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801eeb8:	d02b      	beq.n	801ef12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801eeba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801eebe:	d820      	bhi.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eec0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801eec4:	d012      	beq.n	801eeec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801eec6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801eeca:	d81a      	bhi.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d022      	beq.n	801ef16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801eed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801eed4:	d115      	bne.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeda:	3308      	adds	r3, #8
 801eedc:	2100      	movs	r1, #0
 801eede:	4618      	mov	r0, r3
 801eee0:	f000 fdee 	bl	801fac0 <RCCEx_PLL2_Config>
 801eee4:	4603      	mov	r3, r0
 801eee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801eeea:	e015      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eef0:	3328      	adds	r3, #40	@ 0x28
 801eef2:	2102      	movs	r1, #2
 801eef4:	4618      	mov	r0, r3
 801eef6:	f000 fe95 	bl	801fc24 <RCCEx_PLL3_Config>
 801eefa:	4603      	mov	r3, r0
 801eefc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ef00:	e00a      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ef02:	2301      	movs	r3, #1
 801ef04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef08:	e006      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ef0a:	bf00      	nop
 801ef0c:	e004      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ef0e:	bf00      	nop
 801ef10:	e002      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ef12:	bf00      	nop
 801ef14:	e000      	b.n	801ef18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ef16:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d10b      	bne.n	801ef38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ef20:	4ba1      	ldr	r3, [pc, #644]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ef24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801ef28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ef30:	4a9d      	ldr	r2, [pc, #628]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef32:	430b      	orrs	r3, r1
 801ef34:	6593      	str	r3, [r2, #88]	@ 0x58
 801ef36:	e003      	b.n	801ef40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ef40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef48:	f002 0308 	and.w	r3, r2, #8
 801ef4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ef50:	2300      	movs	r3, #0
 801ef52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801ef56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801ef5a:	460b      	mov	r3, r1
 801ef5c:	4313      	orrs	r3, r2
 801ef5e:	d01e      	beq.n	801ef9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801ef60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ef68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ef6c:	d10c      	bne.n	801ef88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ef6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef72:	3328      	adds	r3, #40	@ 0x28
 801ef74:	2102      	movs	r1, #2
 801ef76:	4618      	mov	r0, r3
 801ef78:	f000 fe54 	bl	801fc24 <RCCEx_PLL3_Config>
 801ef7c:	4603      	mov	r3, r0
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d002      	beq.n	801ef88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801ef82:	2301      	movs	r3, #1
 801ef84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801ef88:	4b87      	ldr	r3, [pc, #540]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ef90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ef98:	4a83      	ldr	r2, [pc, #524]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef9a:	430b      	orrs	r3, r1
 801ef9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ef9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efa6:	f002 0310 	and.w	r3, r2, #16
 801efaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801efae:	2300      	movs	r3, #0
 801efb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801efb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801efb8:	460b      	mov	r3, r1
 801efba:	4313      	orrs	r3, r2
 801efbc:	d01e      	beq.n	801effc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801efbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801efc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801efca:	d10c      	bne.n	801efe6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801efcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efd0:	3328      	adds	r3, #40	@ 0x28
 801efd2:	2102      	movs	r1, #2
 801efd4:	4618      	mov	r0, r3
 801efd6:	f000 fe25 	bl	801fc24 <RCCEx_PLL3_Config>
 801efda:	4603      	mov	r3, r0
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d002      	beq.n	801efe6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801efe0:	2301      	movs	r3, #1
 801efe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801efe6:	4b70      	ldr	r3, [pc, #448]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801efea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801efee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801eff6:	4a6c      	ldr	r2, [pc, #432]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eff8:	430b      	orrs	r3, r1
 801effa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801effc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f000:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f004:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801f008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801f00c:	2300      	movs	r3, #0
 801f00e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801f012:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801f016:	460b      	mov	r3, r1
 801f018:	4313      	orrs	r3, r2
 801f01a:	d03e      	beq.n	801f09a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801f01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801f024:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801f028:	d022      	beq.n	801f070 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801f02a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801f02e:	d81b      	bhi.n	801f068 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801f030:	2b00      	cmp	r3, #0
 801f032:	d003      	beq.n	801f03c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801f034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f038:	d00b      	beq.n	801f052 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801f03a:	e015      	b.n	801f068 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f040:	3308      	adds	r3, #8
 801f042:	2100      	movs	r1, #0
 801f044:	4618      	mov	r0, r3
 801f046:	f000 fd3b 	bl	801fac0 <RCCEx_PLL2_Config>
 801f04a:	4603      	mov	r3, r0
 801f04c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801f050:	e00f      	b.n	801f072 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f056:	3328      	adds	r3, #40	@ 0x28
 801f058:	2102      	movs	r1, #2
 801f05a:	4618      	mov	r0, r3
 801f05c:	f000 fde2 	bl	801fc24 <RCCEx_PLL3_Config>
 801f060:	4603      	mov	r3, r0
 801f062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801f066:	e004      	b.n	801f072 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f068:	2301      	movs	r3, #1
 801f06a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f06e:	e000      	b.n	801f072 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801f070:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f076:	2b00      	cmp	r3, #0
 801f078:	d10b      	bne.n	801f092 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801f07a:	4b4b      	ldr	r3, [pc, #300]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f07c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801f07e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801f082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801f08a:	4a47      	ldr	r2, [pc, #284]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f08c:	430b      	orrs	r3, r1
 801f08e:	6593      	str	r3, [r2, #88]	@ 0x58
 801f090:	e003      	b.n	801f09a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801f09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801f0a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f0a8:	2300      	movs	r3, #0
 801f0aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f0ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801f0b0:	460b      	mov	r3, r1
 801f0b2:	4313      	orrs	r3, r2
 801f0b4:	d03b      	beq.n	801f12e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801f0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f0be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f0c2:	d01f      	beq.n	801f104 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801f0c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801f0c8:	d818      	bhi.n	801f0fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801f0ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f0ce:	d003      	beq.n	801f0d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801f0d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801f0d4:	d007      	beq.n	801f0e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801f0d6:	e011      	b.n	801f0fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f0d8:	4b33      	ldr	r3, [pc, #204]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f0dc:	4a32      	ldr	r2, [pc, #200]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f0de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801f0e4:	e00f      	b.n	801f106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0ea:	3328      	adds	r3, #40	@ 0x28
 801f0ec:	2101      	movs	r1, #1
 801f0ee:	4618      	mov	r0, r3
 801f0f0:	f000 fd98 	bl	801fc24 <RCCEx_PLL3_Config>
 801f0f4:	4603      	mov	r3, r0
 801f0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801f0fa:	e004      	b.n	801f106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f0fc:	2301      	movs	r3, #1
 801f0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f102:	e000      	b.n	801f106 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801f104:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d10b      	bne.n	801f126 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801f10e:	4b26      	ldr	r3, [pc, #152]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f112:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801f116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f11e:	4a22      	ldr	r2, [pc, #136]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f120:	430b      	orrs	r3, r1
 801f122:	6553      	str	r3, [r2, #84]	@ 0x54
 801f124:	e003      	b.n	801f12e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f12a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801f12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f136:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801f13a:	673b      	str	r3, [r7, #112]	@ 0x70
 801f13c:	2300      	movs	r3, #0
 801f13e:	677b      	str	r3, [r7, #116]	@ 0x74
 801f140:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801f144:	460b      	mov	r3, r1
 801f146:	4313      	orrs	r3, r2
 801f148:	d034      	beq.n	801f1b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801f14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f150:	2b00      	cmp	r3, #0
 801f152:	d003      	beq.n	801f15c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801f154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f158:	d007      	beq.n	801f16a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801f15a:	e011      	b.n	801f180 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f15c:	4b12      	ldr	r3, [pc, #72]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f160:	4a11      	ldr	r2, [pc, #68]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801f168:	e00e      	b.n	801f188 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f16e:	3308      	adds	r3, #8
 801f170:	2102      	movs	r1, #2
 801f172:	4618      	mov	r0, r3
 801f174:	f000 fca4 	bl	801fac0 <RCCEx_PLL2_Config>
 801f178:	4603      	mov	r3, r0
 801f17a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801f17e:	e003      	b.n	801f188 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801f180:	2301      	movs	r3, #1
 801f182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f186:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	d10d      	bne.n	801f1ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801f190:	4b05      	ldr	r3, [pc, #20]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f194:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801f198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f19c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f19e:	4a02      	ldr	r2, [pc, #8]	@ (801f1a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801f1a0:	430b      	orrs	r3, r1
 801f1a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801f1a4:	e006      	b.n	801f1b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801f1a6:	bf00      	nop
 801f1a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f1ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801f1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801f1c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f1c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801f1ca:	460b      	mov	r3, r1
 801f1cc:	4313      	orrs	r3, r2
 801f1ce:	d00c      	beq.n	801f1ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801f1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1d4:	3328      	adds	r3, #40	@ 0x28
 801f1d6:	2102      	movs	r1, #2
 801f1d8:	4618      	mov	r0, r3
 801f1da:	f000 fd23 	bl	801fc24 <RCCEx_PLL3_Config>
 801f1de:	4603      	mov	r3, r0
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d002      	beq.n	801f1ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801f1e4:	2301      	movs	r3, #1
 801f1e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801f1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801f1f6:	663b      	str	r3, [r7, #96]	@ 0x60
 801f1f8:	2300      	movs	r3, #0
 801f1fa:	667b      	str	r3, [r7, #100]	@ 0x64
 801f1fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801f200:	460b      	mov	r3, r1
 801f202:	4313      	orrs	r3, r2
 801f204:	d038      	beq.n	801f278 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801f206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f20e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f212:	d018      	beq.n	801f246 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801f214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f218:	d811      	bhi.n	801f23e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f21a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f21e:	d014      	beq.n	801f24a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801f220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f224:	d80b      	bhi.n	801f23e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f226:	2b00      	cmp	r3, #0
 801f228:	d011      	beq.n	801f24e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801f22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f22e:	d106      	bne.n	801f23e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f230:	4bc3      	ldr	r3, [pc, #780]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f234:	4ac2      	ldr	r2, [pc, #776]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f23a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801f23c:	e008      	b.n	801f250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f23e:	2301      	movs	r3, #1
 801f240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f244:	e004      	b.n	801f250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f246:	bf00      	nop
 801f248:	e002      	b.n	801f250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f24a:	bf00      	nop
 801f24c:	e000      	b.n	801f250 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f24e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f254:	2b00      	cmp	r3, #0
 801f256:	d10b      	bne.n	801f270 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801f258:	4bb9      	ldr	r3, [pc, #740]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f25a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f25c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801f260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f268:	4ab5      	ldr	r2, [pc, #724]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f26a:	430b      	orrs	r3, r1
 801f26c:	6553      	str	r3, [r2, #84]	@ 0x54
 801f26e:	e003      	b.n	801f278 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801f278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f280:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801f284:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f286:	2300      	movs	r3, #0
 801f288:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f28a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801f28e:	460b      	mov	r3, r1
 801f290:	4313      	orrs	r3, r2
 801f292:	d009      	beq.n	801f2a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801f294:	4baa      	ldr	r3, [pc, #680]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f298:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f2a2:	4aa7      	ldr	r2, [pc, #668]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f2a4:	430b      	orrs	r3, r1
 801f2a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801f2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801f2b4:	653b      	str	r3, [r7, #80]	@ 0x50
 801f2b6:	2300      	movs	r3, #0
 801f2b8:	657b      	str	r3, [r7, #84]	@ 0x54
 801f2ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801f2be:	460b      	mov	r3, r1
 801f2c0:	4313      	orrs	r3, r2
 801f2c2:	d00a      	beq.n	801f2da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801f2c4:	4b9e      	ldr	r3, [pc, #632]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f2c6:	691b      	ldr	r3, [r3, #16]
 801f2c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801f2cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f2d4:	4a9a      	ldr	r2, [pc, #616]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f2d6:	430b      	orrs	r3, r1
 801f2d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801f2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801f2e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f2e8:	2300      	movs	r3, #0
 801f2ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f2ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801f2f0:	460b      	mov	r3, r1
 801f2f2:	4313      	orrs	r3, r2
 801f2f4:	d009      	beq.n	801f30a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801f2f6:	4b92      	ldr	r3, [pc, #584]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f2f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f2fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801f2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f304:	4a8e      	ldr	r2, [pc, #568]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f306:	430b      	orrs	r3, r1
 801f308:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801f30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f312:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801f316:	643b      	str	r3, [r7, #64]	@ 0x40
 801f318:	2300      	movs	r3, #0
 801f31a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f31c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801f320:	460b      	mov	r3, r1
 801f322:	4313      	orrs	r3, r2
 801f324:	d00e      	beq.n	801f344 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801f326:	4b86      	ldr	r3, [pc, #536]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f328:	691b      	ldr	r3, [r3, #16]
 801f32a:	4a85      	ldr	r2, [pc, #532]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f32c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f330:	6113      	str	r3, [r2, #16]
 801f332:	4b83      	ldr	r3, [pc, #524]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f334:	6919      	ldr	r1, [r3, #16]
 801f336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f33a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801f33e:	4a80      	ldr	r2, [pc, #512]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f340:	430b      	orrs	r3, r1
 801f342:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801f344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f34c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801f350:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f352:	2300      	movs	r3, #0
 801f354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f356:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801f35a:	460b      	mov	r3, r1
 801f35c:	4313      	orrs	r3, r2
 801f35e:	d009      	beq.n	801f374 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801f360:	4b77      	ldr	r3, [pc, #476]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f364:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801f368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f36c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f36e:	4a74      	ldr	r2, [pc, #464]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f370:	430b      	orrs	r3, r1
 801f372:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801f374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801f380:	633b      	str	r3, [r7, #48]	@ 0x30
 801f382:	2300      	movs	r3, #0
 801f384:	637b      	str	r3, [r7, #52]	@ 0x34
 801f386:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801f38a:	460b      	mov	r3, r1
 801f38c:	4313      	orrs	r3, r2
 801f38e:	d00a      	beq.n	801f3a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801f390:	4b6b      	ldr	r3, [pc, #428]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f394:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801f398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f3a0:	4a67      	ldr	r2, [pc, #412]	@ (801f540 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f3a2:	430b      	orrs	r3, r1
 801f3a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801f3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ae:	2100      	movs	r1, #0
 801f3b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f3b2:	f003 0301 	and.w	r3, r3, #1
 801f3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f3b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801f3bc:	460b      	mov	r3, r1
 801f3be:	4313      	orrs	r3, r2
 801f3c0:	d011      	beq.n	801f3e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f3c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f3c6:	3308      	adds	r3, #8
 801f3c8:	2100      	movs	r1, #0
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	f000 fb78 	bl	801fac0 <RCCEx_PLL2_Config>
 801f3d0:	4603      	mov	r3, r0
 801f3d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f3da:	2b00      	cmp	r3, #0
 801f3dc:	d003      	beq.n	801f3e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f3de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f3e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801f3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3ee:	2100      	movs	r1, #0
 801f3f0:	6239      	str	r1, [r7, #32]
 801f3f2:	f003 0302 	and.w	r3, r3, #2
 801f3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801f3f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f3fc:	460b      	mov	r3, r1
 801f3fe:	4313      	orrs	r3, r2
 801f400:	d011      	beq.n	801f426 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801f402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f406:	3308      	adds	r3, #8
 801f408:	2101      	movs	r1, #1
 801f40a:	4618      	mov	r0, r3
 801f40c:	f000 fb58 	bl	801fac0 <RCCEx_PLL2_Config>
 801f410:	4603      	mov	r3, r0
 801f412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d003      	beq.n	801f426 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f41e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801f426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f42e:	2100      	movs	r1, #0
 801f430:	61b9      	str	r1, [r7, #24]
 801f432:	f003 0304 	and.w	r3, r3, #4
 801f436:	61fb      	str	r3, [r7, #28]
 801f438:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f43c:	460b      	mov	r3, r1
 801f43e:	4313      	orrs	r3, r2
 801f440:	d011      	beq.n	801f466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f446:	3308      	adds	r3, #8
 801f448:	2102      	movs	r1, #2
 801f44a:	4618      	mov	r0, r3
 801f44c:	f000 fb38 	bl	801fac0 <RCCEx_PLL2_Config>
 801f450:	4603      	mov	r3, r0
 801f452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f45a:	2b00      	cmp	r3, #0
 801f45c:	d003      	beq.n	801f466 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f45e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801f466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f46e:	2100      	movs	r1, #0
 801f470:	6139      	str	r1, [r7, #16]
 801f472:	f003 0308 	and.w	r3, r3, #8
 801f476:	617b      	str	r3, [r7, #20]
 801f478:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f47c:	460b      	mov	r3, r1
 801f47e:	4313      	orrs	r3, r2
 801f480:	d011      	beq.n	801f4a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f486:	3328      	adds	r3, #40	@ 0x28
 801f488:	2100      	movs	r1, #0
 801f48a:	4618      	mov	r0, r3
 801f48c:	f000 fbca 	bl	801fc24 <RCCEx_PLL3_Config>
 801f490:	4603      	mov	r3, r0
 801f492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801f496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d003      	beq.n	801f4a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f49e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f4a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801f4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ae:	2100      	movs	r1, #0
 801f4b0:	60b9      	str	r1, [r7, #8]
 801f4b2:	f003 0310 	and.w	r3, r3, #16
 801f4b6:	60fb      	str	r3, [r7, #12]
 801f4b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f4bc:	460b      	mov	r3, r1
 801f4be:	4313      	orrs	r3, r2
 801f4c0:	d011      	beq.n	801f4e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f4c6:	3328      	adds	r3, #40	@ 0x28
 801f4c8:	2101      	movs	r1, #1
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	f000 fbaa 	bl	801fc24 <RCCEx_PLL3_Config>
 801f4d0:	4603      	mov	r3, r0
 801f4d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f4da:	2b00      	cmp	r3, #0
 801f4dc:	d003      	beq.n	801f4e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f4de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f4e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801f4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ee:	2100      	movs	r1, #0
 801f4f0:	6039      	str	r1, [r7, #0]
 801f4f2:	f003 0320 	and.w	r3, r3, #32
 801f4f6:	607b      	str	r3, [r7, #4]
 801f4f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f4fc:	460b      	mov	r3, r1
 801f4fe:	4313      	orrs	r3, r2
 801f500:	d011      	beq.n	801f526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f506:	3328      	adds	r3, #40	@ 0x28
 801f508:	2102      	movs	r1, #2
 801f50a:	4618      	mov	r0, r3
 801f50c:	f000 fb8a 	bl	801fc24 <RCCEx_PLL3_Config>
 801f510:	4603      	mov	r3, r0
 801f512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d003      	beq.n	801f526 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f51e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801f526:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d101      	bne.n	801f532 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801f52e:	2300      	movs	r3, #0
 801f530:	e000      	b.n	801f534 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801f532:	2301      	movs	r3, #1
}
 801f534:	4618      	mov	r0, r3
 801f536:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801f53a:	46bd      	mov	sp, r7
 801f53c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f540:	58024400 	.word	0x58024400

0801f544 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f544:	b580      	push	{r7, lr}
 801f546:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f548:	f7fe fd96 	bl	801e078 <HAL_RCC_GetHCLKFreq>
 801f54c:	4602      	mov	r2, r0
 801f54e:	4b06      	ldr	r3, [pc, #24]	@ (801f568 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f550:	6a1b      	ldr	r3, [r3, #32]
 801f552:	091b      	lsrs	r3, r3, #4
 801f554:	f003 0307 	and.w	r3, r3, #7
 801f558:	4904      	ldr	r1, [pc, #16]	@ (801f56c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f55a:	5ccb      	ldrb	r3, [r1, r3]
 801f55c:	f003 031f 	and.w	r3, r3, #31
 801f560:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f564:	4618      	mov	r0, r3
 801f566:	bd80      	pop	{r7, pc}
 801f568:	58024400 	.word	0x58024400
 801f56c:	080281f4 	.word	0x080281f4

0801f570 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f570:	b480      	push	{r7}
 801f572:	b089      	sub	sp, #36	@ 0x24
 801f574:	af00      	add	r7, sp, #0
 801f576:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f578:	4ba1      	ldr	r3, [pc, #644]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f57c:	f003 0303 	and.w	r3, r3, #3
 801f580:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f582:	4b9f      	ldr	r3, [pc, #636]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f586:	0b1b      	lsrs	r3, r3, #12
 801f588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f58c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f58e:	4b9c      	ldr	r3, [pc, #624]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f592:	091b      	lsrs	r3, r3, #4
 801f594:	f003 0301 	and.w	r3, r3, #1
 801f598:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f59a:	4b99      	ldr	r3, [pc, #612]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f59e:	08db      	lsrs	r3, r3, #3
 801f5a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f5a4:	693a      	ldr	r2, [r7, #16]
 801f5a6:	fb02 f303 	mul.w	r3, r2, r3
 801f5aa:	ee07 3a90 	vmov	s15, r3
 801f5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f5b6:	697b      	ldr	r3, [r7, #20]
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	f000 8111 	beq.w	801f7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f5be:	69bb      	ldr	r3, [r7, #24]
 801f5c0:	2b02      	cmp	r3, #2
 801f5c2:	f000 8083 	beq.w	801f6cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f5c6:	69bb      	ldr	r3, [r7, #24]
 801f5c8:	2b02      	cmp	r3, #2
 801f5ca:	f200 80a1 	bhi.w	801f710 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f5ce:	69bb      	ldr	r3, [r7, #24]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d003      	beq.n	801f5dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f5d4:	69bb      	ldr	r3, [r7, #24]
 801f5d6:	2b01      	cmp	r3, #1
 801f5d8:	d056      	beq.n	801f688 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f5da:	e099      	b.n	801f710 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f5dc:	4b88      	ldr	r3, [pc, #544]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	f003 0320 	and.w	r3, r3, #32
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	d02d      	beq.n	801f644 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f5e8:	4b85      	ldr	r3, [pc, #532]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	08db      	lsrs	r3, r3, #3
 801f5ee:	f003 0303 	and.w	r3, r3, #3
 801f5f2:	4a84      	ldr	r2, [pc, #528]	@ (801f804 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f5f4:	fa22 f303 	lsr.w	r3, r2, r3
 801f5f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f5fa:	68bb      	ldr	r3, [r7, #8]
 801f5fc:	ee07 3a90 	vmov	s15, r3
 801f600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f604:	697b      	ldr	r3, [r7, #20]
 801f606:	ee07 3a90 	vmov	s15, r3
 801f60a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f612:	4b7b      	ldr	r3, [pc, #492]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f61a:	ee07 3a90 	vmov	s15, r3
 801f61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f622:	ed97 6a03 	vldr	s12, [r7, #12]
 801f626:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f63e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f642:	e087      	b.n	801f754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f644:	697b      	ldr	r3, [r7, #20]
 801f646:	ee07 3a90 	vmov	s15, r3
 801f64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f64e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f80c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f656:	4b6a      	ldr	r3, [pc, #424]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f65e:	ee07 3a90 	vmov	s15, r3
 801f662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f666:	ed97 6a03 	vldr	s12, [r7, #12]
 801f66a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f686:	e065      	b.n	801f754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f688:	697b      	ldr	r3, [r7, #20]
 801f68a:	ee07 3a90 	vmov	s15, r3
 801f68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f692:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f69a:	4b59      	ldr	r3, [pc, #356]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6a2:	ee07 3a90 	vmov	s15, r3
 801f6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 801f6ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f6ca:	e043      	b.n	801f754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f6cc:	697b      	ldr	r3, [r7, #20]
 801f6ce:	ee07 3a90 	vmov	s15, r3
 801f6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6de:	4b48      	ldr	r3, [pc, #288]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6e6:	ee07 3a90 	vmov	s15, r3
 801f6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 801f6f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f706:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f70e:	e021      	b.n	801f754 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f710:	697b      	ldr	r3, [r7, #20]
 801f712:	ee07 3a90 	vmov	s15, r3
 801f716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f71a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f810 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f722:	4b37      	ldr	r3, [pc, #220]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f72a:	ee07 3a90 	vmov	s15, r3
 801f72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f732:	ed97 6a03 	vldr	s12, [r7, #12]
 801f736:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f808 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f752:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f754:	4b2a      	ldr	r3, [pc, #168]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f758:	0a5b      	lsrs	r3, r3, #9
 801f75a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f75e:	ee07 3a90 	vmov	s15, r3
 801f762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f76a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f76e:	edd7 6a07 	vldr	s13, [r7, #28]
 801f772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f77a:	ee17 2a90 	vmov	r2, s15
 801f77e:	687b      	ldr	r3, [r7, #4]
 801f780:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f782:	4b1f      	ldr	r3, [pc, #124]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f786:	0c1b      	lsrs	r3, r3, #16
 801f788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f78c:	ee07 3a90 	vmov	s15, r3
 801f790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f794:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f798:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f79c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f7a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f7a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f7a8:	ee17 2a90 	vmov	r2, s15
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f7b0:	4b13      	ldr	r3, [pc, #76]	@ (801f800 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f7b4:	0e1b      	lsrs	r3, r3, #24
 801f7b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f7ba:	ee07 3a90 	vmov	s15, r3
 801f7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f7c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f7ca:	edd7 6a07 	vldr	s13, [r7, #28]
 801f7ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f7d6:	ee17 2a90 	vmov	r2, s15
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f7de:	e008      	b.n	801f7f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	2200      	movs	r2, #0
 801f7ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	2200      	movs	r2, #0
 801f7f0:	609a      	str	r2, [r3, #8]
}
 801f7f2:	bf00      	nop
 801f7f4:	3724      	adds	r7, #36	@ 0x24
 801f7f6:	46bd      	mov	sp, r7
 801f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7fc:	4770      	bx	lr
 801f7fe:	bf00      	nop
 801f800:	58024400 	.word	0x58024400
 801f804:	03d09000 	.word	0x03d09000
 801f808:	46000000 	.word	0x46000000
 801f80c:	4c742400 	.word	0x4c742400
 801f810:	4a742400 	.word	0x4a742400
 801f814:	4bbebc20 	.word	0x4bbebc20

0801f818 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f818:	b480      	push	{r7}
 801f81a:	b089      	sub	sp, #36	@ 0x24
 801f81c:	af00      	add	r7, sp, #0
 801f81e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f820:	4ba1      	ldr	r3, [pc, #644]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f824:	f003 0303 	and.w	r3, r3, #3
 801f828:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f82a:	4b9f      	ldr	r3, [pc, #636]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f82c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f82e:	0d1b      	lsrs	r3, r3, #20
 801f830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f834:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f836:	4b9c      	ldr	r3, [pc, #624]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f83a:	0a1b      	lsrs	r3, r3, #8
 801f83c:	f003 0301 	and.w	r3, r3, #1
 801f840:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f842:	4b99      	ldr	r3, [pc, #612]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f846:	08db      	lsrs	r3, r3, #3
 801f848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f84c:	693a      	ldr	r2, [r7, #16]
 801f84e:	fb02 f303 	mul.w	r3, r2, r3
 801f852:	ee07 3a90 	vmov	s15, r3
 801f856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f85a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f85e:	697b      	ldr	r3, [r7, #20]
 801f860:	2b00      	cmp	r3, #0
 801f862:	f000 8111 	beq.w	801fa88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f866:	69bb      	ldr	r3, [r7, #24]
 801f868:	2b02      	cmp	r3, #2
 801f86a:	f000 8083 	beq.w	801f974 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f86e:	69bb      	ldr	r3, [r7, #24]
 801f870:	2b02      	cmp	r3, #2
 801f872:	f200 80a1 	bhi.w	801f9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f876:	69bb      	ldr	r3, [r7, #24]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	d003      	beq.n	801f884 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f87c:	69bb      	ldr	r3, [r7, #24]
 801f87e:	2b01      	cmp	r3, #1
 801f880:	d056      	beq.n	801f930 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f882:	e099      	b.n	801f9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f884:	4b88      	ldr	r3, [pc, #544]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	f003 0320 	and.w	r3, r3, #32
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d02d      	beq.n	801f8ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f890:	4b85      	ldr	r3, [pc, #532]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f892:	681b      	ldr	r3, [r3, #0]
 801f894:	08db      	lsrs	r3, r3, #3
 801f896:	f003 0303 	and.w	r3, r3, #3
 801f89a:	4a84      	ldr	r2, [pc, #528]	@ (801faac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f89c:	fa22 f303 	lsr.w	r3, r2, r3
 801f8a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f8a2:	68bb      	ldr	r3, [r7, #8]
 801f8a4:	ee07 3a90 	vmov	s15, r3
 801f8a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f8ac:	697b      	ldr	r3, [r7, #20]
 801f8ae:	ee07 3a90 	vmov	s15, r3
 801f8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8ba:	4b7b      	ldr	r3, [pc, #492]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f8c2:	ee07 3a90 	vmov	s15, r3
 801f8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f8ca:	ed97 6a03 	vldr	s12, [r7, #12]
 801f8ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f8da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f8e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f8ea:	e087      	b.n	801f9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f8ec:	697b      	ldr	r3, [r7, #20]
 801f8ee:	ee07 3a90 	vmov	s15, r3
 801f8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f8f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801fab4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f8fe:	4b6a      	ldr	r3, [pc, #424]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f906:	ee07 3a90 	vmov	s15, r3
 801f90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f90e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f912:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f926:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f92a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f92e:	e065      	b.n	801f9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	ee07 3a90 	vmov	s15, r3
 801f936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f93a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801fab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f942:	4b59      	ldr	r3, [pc, #356]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f94a:	ee07 3a90 	vmov	s15, r3
 801f94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f952:	ed97 6a03 	vldr	s12, [r7, #12]
 801f956:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f96e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f972:	e043      	b.n	801f9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f974:	697b      	ldr	r3, [r7, #20]
 801f976:	ee07 3a90 	vmov	s15, r3
 801f97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f97e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801fabc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f986:	4b48      	ldr	r3, [pc, #288]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f98e:	ee07 3a90 	vmov	s15, r3
 801f992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f996:	ed97 6a03 	vldr	s12, [r7, #12]
 801f99a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f9b6:	e021      	b.n	801f9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f9b8:	697b      	ldr	r3, [r7, #20]
 801f9ba:	ee07 3a90 	vmov	s15, r3
 801f9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f9c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801fab8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f9ca:	4b37      	ldr	r3, [pc, #220]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f9d2:	ee07 3a90 	vmov	s15, r3
 801f9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f9da:	ed97 6a03 	vldr	s12, [r7, #12]
 801f9de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801fab0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f9fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f9fc:	4b2a      	ldr	r3, [pc, #168]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fa00:	0a5b      	lsrs	r3, r3, #9
 801fa02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801fa06:	ee07 3a90 	vmov	s15, r3
 801fa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fa0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa12:	ee37 7a87 	vadd.f32	s14, s15, s14
 801fa16:	edd7 6a07 	vldr	s13, [r7, #28]
 801fa1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fa1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801fa22:	ee17 2a90 	vmov	r2, s15
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801fa2a:	4b1f      	ldr	r3, [pc, #124]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801fa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fa2e:	0c1b      	lsrs	r3, r3, #16
 801fa30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801fa34:	ee07 3a90 	vmov	s15, r3
 801fa38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fa3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa40:	ee37 7a87 	vadd.f32	s14, s15, s14
 801fa44:	edd7 6a07 	vldr	s13, [r7, #28]
 801fa48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fa4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801fa50:	ee17 2a90 	vmov	r2, s15
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801fa58:	4b13      	ldr	r3, [pc, #76]	@ (801faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801fa5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fa5c:	0e1b      	lsrs	r3, r3, #24
 801fa5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801fa62:	ee07 3a90 	vmov	s15, r3
 801fa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801fa6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801fa72:	edd7 6a07 	vldr	s13, [r7, #28]
 801fa76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fa7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801fa7e:	ee17 2a90 	vmov	r2, s15
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801fa86:	e008      	b.n	801fa9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	2200      	movs	r2, #0
 801fa8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	2200      	movs	r2, #0
 801fa92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	2200      	movs	r2, #0
 801fa98:	609a      	str	r2, [r3, #8]
}
 801fa9a:	bf00      	nop
 801fa9c:	3724      	adds	r7, #36	@ 0x24
 801fa9e:	46bd      	mov	sp, r7
 801faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faa4:	4770      	bx	lr
 801faa6:	bf00      	nop
 801faa8:	58024400 	.word	0x58024400
 801faac:	03d09000 	.word	0x03d09000
 801fab0:	46000000 	.word	0x46000000
 801fab4:	4c742400 	.word	0x4c742400
 801fab8:	4a742400 	.word	0x4a742400
 801fabc:	4bbebc20 	.word	0x4bbebc20

0801fac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b084      	sub	sp, #16
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
 801fac8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801faca:	2300      	movs	r3, #0
 801facc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801face:	4b53      	ldr	r3, [pc, #332]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fad2:	f003 0303 	and.w	r3, r3, #3
 801fad6:	2b03      	cmp	r3, #3
 801fad8:	d101      	bne.n	801fade <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801fada:	2301      	movs	r3, #1
 801fadc:	e099      	b.n	801fc12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801fade:	4b4f      	ldr	r3, [pc, #316]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	4a4e      	ldr	r2, [pc, #312]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fae4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801fae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801faea:	f7fa ff23 	bl	801a934 <HAL_GetTick>
 801faee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801faf0:	e008      	b.n	801fb04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801faf2:	f7fa ff1f 	bl	801a934 <HAL_GetTick>
 801faf6:	4602      	mov	r2, r0
 801faf8:	68bb      	ldr	r3, [r7, #8]
 801fafa:	1ad3      	subs	r3, r2, r3
 801fafc:	2b02      	cmp	r3, #2
 801fafe:	d901      	bls.n	801fb04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fb00:	2303      	movs	r3, #3
 801fb02:	e086      	b.n	801fc12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801fb04:	4b45      	ldr	r3, [pc, #276]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb06:	681b      	ldr	r3, [r3, #0]
 801fb08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d1f0      	bne.n	801faf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801fb10:	4b42      	ldr	r3, [pc, #264]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fb14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801fb18:	687b      	ldr	r3, [r7, #4]
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	031b      	lsls	r3, r3, #12
 801fb1e:	493f      	ldr	r1, [pc, #252]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb20:	4313      	orrs	r3, r2
 801fb22:	628b      	str	r3, [r1, #40]	@ 0x28
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	685b      	ldr	r3, [r3, #4]
 801fb28:	3b01      	subs	r3, #1
 801fb2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	689b      	ldr	r3, [r3, #8]
 801fb32:	3b01      	subs	r3, #1
 801fb34:	025b      	lsls	r3, r3, #9
 801fb36:	b29b      	uxth	r3, r3
 801fb38:	431a      	orrs	r2, r3
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	68db      	ldr	r3, [r3, #12]
 801fb3e:	3b01      	subs	r3, #1
 801fb40:	041b      	lsls	r3, r3, #16
 801fb42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fb46:	431a      	orrs	r2, r3
 801fb48:	687b      	ldr	r3, [r7, #4]
 801fb4a:	691b      	ldr	r3, [r3, #16]
 801fb4c:	3b01      	subs	r3, #1
 801fb4e:	061b      	lsls	r3, r3, #24
 801fb50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fb54:	4931      	ldr	r1, [pc, #196]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb56:	4313      	orrs	r3, r2
 801fb58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801fb5a:	4b30      	ldr	r3, [pc, #192]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	695b      	ldr	r3, [r3, #20]
 801fb66:	492d      	ldr	r1, [pc, #180]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb68:	4313      	orrs	r3, r2
 801fb6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801fb6c:	4b2b      	ldr	r3, [pc, #172]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb70:	f023 0220 	bic.w	r2, r3, #32
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	699b      	ldr	r3, [r3, #24]
 801fb78:	4928      	ldr	r1, [pc, #160]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb7a:	4313      	orrs	r3, r2
 801fb7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801fb7e:	4b27      	ldr	r3, [pc, #156]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb82:	4a26      	ldr	r2, [pc, #152]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb84:	f023 0310 	bic.w	r3, r3, #16
 801fb88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801fb8a:	4b24      	ldr	r3, [pc, #144]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fb8e:	4b24      	ldr	r3, [pc, #144]	@ (801fc20 <RCCEx_PLL2_Config+0x160>)
 801fb90:	4013      	ands	r3, r2
 801fb92:	687a      	ldr	r2, [r7, #4]
 801fb94:	69d2      	ldr	r2, [r2, #28]
 801fb96:	00d2      	lsls	r2, r2, #3
 801fb98:	4920      	ldr	r1, [pc, #128]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fb9a:	4313      	orrs	r3, r2
 801fb9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801fb9e:	4b1f      	ldr	r3, [pc, #124]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fba2:	4a1e      	ldr	r2, [pc, #120]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fba4:	f043 0310 	orr.w	r3, r3, #16
 801fba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d106      	bne.n	801fbbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801fbb0:	4b1a      	ldr	r3, [pc, #104]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbb4:	4a19      	ldr	r2, [pc, #100]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801fbba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fbbc:	e00f      	b.n	801fbde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fbbe:	683b      	ldr	r3, [r7, #0]
 801fbc0:	2b01      	cmp	r3, #1
 801fbc2:	d106      	bne.n	801fbd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801fbc4:	4b15      	ldr	r3, [pc, #84]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbc8:	4a14      	ldr	r2, [pc, #80]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fbce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fbd0:	e005      	b.n	801fbde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801fbd2:	4b12      	ldr	r3, [pc, #72]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fbd6:	4a11      	ldr	r2, [pc, #68]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801fbdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801fbde:	4b0f      	ldr	r3, [pc, #60]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	4a0e      	ldr	r2, [pc, #56]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fbe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801fbe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fbea:	f7fa fea3 	bl	801a934 <HAL_GetTick>
 801fbee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fbf0:	e008      	b.n	801fc04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801fbf2:	f7fa fe9f 	bl	801a934 <HAL_GetTick>
 801fbf6:	4602      	mov	r2, r0
 801fbf8:	68bb      	ldr	r3, [r7, #8]
 801fbfa:	1ad3      	subs	r3, r2, r3
 801fbfc:	2b02      	cmp	r3, #2
 801fbfe:	d901      	bls.n	801fc04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fc00:	2303      	movs	r3, #3
 801fc02:	e006      	b.n	801fc12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fc04:	4b05      	ldr	r3, [pc, #20]	@ (801fc1c <RCCEx_PLL2_Config+0x15c>)
 801fc06:	681b      	ldr	r3, [r3, #0]
 801fc08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	d0f0      	beq.n	801fbf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801fc10:	7bfb      	ldrb	r3, [r7, #15]
}
 801fc12:	4618      	mov	r0, r3
 801fc14:	3710      	adds	r7, #16
 801fc16:	46bd      	mov	sp, r7
 801fc18:	bd80      	pop	{r7, pc}
 801fc1a:	bf00      	nop
 801fc1c:	58024400 	.word	0x58024400
 801fc20:	ffff0007 	.word	0xffff0007

0801fc24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801fc24:	b580      	push	{r7, lr}
 801fc26:	b084      	sub	sp, #16
 801fc28:	af00      	add	r7, sp, #0
 801fc2a:	6078      	str	r0, [r7, #4]
 801fc2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801fc32:	4b53      	ldr	r3, [pc, #332]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc36:	f003 0303 	and.w	r3, r3, #3
 801fc3a:	2b03      	cmp	r3, #3
 801fc3c:	d101      	bne.n	801fc42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801fc3e:	2301      	movs	r3, #1
 801fc40:	e099      	b.n	801fd76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801fc42:	4b4f      	ldr	r3, [pc, #316]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	4a4e      	ldr	r2, [pc, #312]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801fc4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fc4e:	f7fa fe71 	bl	801a934 <HAL_GetTick>
 801fc52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fc54:	e008      	b.n	801fc68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fc56:	f7fa fe6d 	bl	801a934 <HAL_GetTick>
 801fc5a:	4602      	mov	r2, r0
 801fc5c:	68bb      	ldr	r3, [r7, #8]
 801fc5e:	1ad3      	subs	r3, r2, r3
 801fc60:	2b02      	cmp	r3, #2
 801fc62:	d901      	bls.n	801fc68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fc64:	2303      	movs	r3, #3
 801fc66:	e086      	b.n	801fd76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fc68:	4b45      	ldr	r3, [pc, #276]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fc70:	2b00      	cmp	r3, #0
 801fc72:	d1f0      	bne.n	801fc56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801fc74:	4b42      	ldr	r3, [pc, #264]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fc78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801fc7c:	687b      	ldr	r3, [r7, #4]
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	051b      	lsls	r3, r3, #20
 801fc82:	493f      	ldr	r1, [pc, #252]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fc84:	4313      	orrs	r3, r2
 801fc86:	628b      	str	r3, [r1, #40]	@ 0x28
 801fc88:	687b      	ldr	r3, [r7, #4]
 801fc8a:	685b      	ldr	r3, [r3, #4]
 801fc8c:	3b01      	subs	r3, #1
 801fc8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	689b      	ldr	r3, [r3, #8]
 801fc96:	3b01      	subs	r3, #1
 801fc98:	025b      	lsls	r3, r3, #9
 801fc9a:	b29b      	uxth	r3, r3
 801fc9c:	431a      	orrs	r2, r3
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	68db      	ldr	r3, [r3, #12]
 801fca2:	3b01      	subs	r3, #1
 801fca4:	041b      	lsls	r3, r3, #16
 801fca6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801fcaa:	431a      	orrs	r2, r3
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	691b      	ldr	r3, [r3, #16]
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	061b      	lsls	r3, r3, #24
 801fcb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fcb8:	4931      	ldr	r1, [pc, #196]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcba:	4313      	orrs	r3, r2
 801fcbc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801fcbe:	4b30      	ldr	r3, [pc, #192]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	695b      	ldr	r3, [r3, #20]
 801fcca:	492d      	ldr	r1, [pc, #180]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fccc:	4313      	orrs	r3, r2
 801fcce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801fcd0:	4b2b      	ldr	r3, [pc, #172]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fcd4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	699b      	ldr	r3, [r3, #24]
 801fcdc:	4928      	ldr	r1, [pc, #160]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcde:	4313      	orrs	r3, r2
 801fce0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801fce2:	4b27      	ldr	r3, [pc, #156]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fce6:	4a26      	ldr	r2, [pc, #152]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fcec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801fcee:	4b24      	ldr	r3, [pc, #144]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fcf2:	4b24      	ldr	r3, [pc, #144]	@ (801fd84 <RCCEx_PLL3_Config+0x160>)
 801fcf4:	4013      	ands	r3, r2
 801fcf6:	687a      	ldr	r2, [r7, #4]
 801fcf8:	69d2      	ldr	r2, [r2, #28]
 801fcfa:	00d2      	lsls	r2, r2, #3
 801fcfc:	4920      	ldr	r1, [pc, #128]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fcfe:	4313      	orrs	r3, r2
 801fd00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801fd02:	4b1f      	ldr	r3, [pc, #124]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd06:	4a1e      	ldr	r2, [pc, #120]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801fd0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fd0e:	683b      	ldr	r3, [r7, #0]
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d106      	bne.n	801fd22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fd14:	4b1a      	ldr	r3, [pc, #104]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd18:	4a19      	ldr	r2, [pc, #100]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fd1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fd20:	e00f      	b.n	801fd42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fd22:	683b      	ldr	r3, [r7, #0]
 801fd24:	2b01      	cmp	r3, #1
 801fd26:	d106      	bne.n	801fd36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fd28:	4b15      	ldr	r3, [pc, #84]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd2c:	4a14      	ldr	r2, [pc, #80]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fd32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fd34:	e005      	b.n	801fd42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fd36:	4b12      	ldr	r3, [pc, #72]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fd3a:	4a11      	ldr	r2, [pc, #68]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fd40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fd42:	4b0f      	ldr	r3, [pc, #60]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd44:	681b      	ldr	r3, [r3, #0]
 801fd46:	4a0e      	ldr	r2, [pc, #56]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fd4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fd4e:	f7fa fdf1 	bl	801a934 <HAL_GetTick>
 801fd52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fd54:	e008      	b.n	801fd68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fd56:	f7fa fded 	bl	801a934 <HAL_GetTick>
 801fd5a:	4602      	mov	r2, r0
 801fd5c:	68bb      	ldr	r3, [r7, #8]
 801fd5e:	1ad3      	subs	r3, r2, r3
 801fd60:	2b02      	cmp	r3, #2
 801fd62:	d901      	bls.n	801fd68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fd64:	2303      	movs	r3, #3
 801fd66:	e006      	b.n	801fd76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fd68:	4b05      	ldr	r3, [pc, #20]	@ (801fd80 <RCCEx_PLL3_Config+0x15c>)
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d0f0      	beq.n	801fd56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fd74:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd76:	4618      	mov	r0, r3
 801fd78:	3710      	adds	r7, #16
 801fd7a:	46bd      	mov	sp, r7
 801fd7c:	bd80      	pop	{r7, pc}
 801fd7e:	bf00      	nop
 801fd80:	58024400 	.word	0x58024400
 801fd84:	ffff0007 	.word	0xffff0007

0801fd88 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b084      	sub	sp, #16
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	2b00      	cmp	r3, #0
 801fd94:	d101      	bne.n	801fd9a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801fd96:	2301      	movs	r3, #1
 801fd98:	e054      	b.n	801fe44 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	7a5b      	ldrb	r3, [r3, #9]
 801fd9e:	b2db      	uxtb	r3, r3
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d105      	bne.n	801fdb0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801fda4:	687b      	ldr	r3, [r7, #4]
 801fda6:	2200      	movs	r2, #0
 801fda8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801fdaa:	6878      	ldr	r0, [r7, #4]
 801fdac:	f7e2 fd22 	bl	80027f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	2202      	movs	r2, #2
 801fdb4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	f023 0120 	bic.w	r1, r3, #32
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	685a      	ldr	r2, [r3, #4]
 801fdc4:	687b      	ldr	r3, [r7, #4]
 801fdc6:	681b      	ldr	r3, [r3, #0]
 801fdc8:	430a      	orrs	r2, r1
 801fdca:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	681a      	ldr	r2, [r3, #0]
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	f042 0204 	orr.w	r2, r2, #4
 801fdda:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	685b      	ldr	r3, [r3, #4]
 801fde2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fde6:	2b40      	cmp	r3, #64	@ 0x40
 801fde8:	d104      	bne.n	801fdf4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	2204      	movs	r2, #4
 801fdee:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 801fdf0:	2301      	movs	r3, #1
 801fdf2:	e027      	b.n	801fe44 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 801fdf4:	f7fa fd9e 	bl	801a934 <HAL_GetTick>
 801fdf8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801fdfa:	e015      	b.n	801fe28 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801fdfc:	f7fa fd9a 	bl	801a934 <HAL_GetTick>
 801fe00:	4602      	mov	r2, r0
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	1ad3      	subs	r3, r2, r3
 801fe06:	2b02      	cmp	r3, #2
 801fe08:	d90e      	bls.n	801fe28 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801fe0a:	687b      	ldr	r3, [r7, #4]
 801fe0c:	681b      	ldr	r3, [r3, #0]
 801fe0e:	685b      	ldr	r3, [r3, #4]
 801fe10:	f003 0304 	and.w	r3, r3, #4
 801fe14:	2b04      	cmp	r3, #4
 801fe16:	d107      	bne.n	801fe28 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	2204      	movs	r2, #4
 801fe1c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	2202      	movs	r2, #2
 801fe22:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801fe24:	2301      	movs	r3, #1
 801fe26:	e00d      	b.n	801fe44 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	685b      	ldr	r3, [r3, #4]
 801fe2e:	f003 0304 	and.w	r3, r3, #4
 801fe32:	2b04      	cmp	r3, #4
 801fe34:	d0e2      	beq.n	801fdfc <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	2201      	movs	r2, #1
 801fe3a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	2200      	movs	r2, #0
 801fe40:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801fe42:	2300      	movs	r3, #0
}
 801fe44:	4618      	mov	r0, r3
 801fe46:	3710      	adds	r7, #16
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	bd80      	pop	{r7, pc}

0801fe4c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801fe4c:	b580      	push	{r7, lr}
 801fe4e:	b084      	sub	sp, #16
 801fe50:	af00      	add	r7, sp, #0
 801fe52:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	2b00      	cmp	r3, #0
 801fe58:	d101      	bne.n	801fe5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801fe5a:	2301      	movs	r3, #1
 801fe5c:	e10f      	b.n	802007e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	2200      	movs	r2, #0
 801fe62:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	4a87      	ldr	r2, [pc, #540]	@ (8020088 <HAL_SPI_Init+0x23c>)
 801fe6a:	4293      	cmp	r3, r2
 801fe6c:	d00f      	beq.n	801fe8e <HAL_SPI_Init+0x42>
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	4a86      	ldr	r2, [pc, #536]	@ (802008c <HAL_SPI_Init+0x240>)
 801fe74:	4293      	cmp	r3, r2
 801fe76:	d00a      	beq.n	801fe8e <HAL_SPI_Init+0x42>
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	681b      	ldr	r3, [r3, #0]
 801fe7c:	4a84      	ldr	r2, [pc, #528]	@ (8020090 <HAL_SPI_Init+0x244>)
 801fe7e:	4293      	cmp	r3, r2
 801fe80:	d005      	beq.n	801fe8e <HAL_SPI_Init+0x42>
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	68db      	ldr	r3, [r3, #12]
 801fe86:	2b0f      	cmp	r3, #15
 801fe88:	d901      	bls.n	801fe8e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801fe8a:	2301      	movs	r3, #1
 801fe8c:	e0f7      	b.n	802007e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801fe8e:	6878      	ldr	r0, [r7, #4]
 801fe90:	f000 fbba 	bl	8020608 <SPI_GetPacketSize>
 801fe94:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	4a7b      	ldr	r2, [pc, #492]	@ (8020088 <HAL_SPI_Init+0x23c>)
 801fe9c:	4293      	cmp	r3, r2
 801fe9e:	d00c      	beq.n	801feba <HAL_SPI_Init+0x6e>
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	681b      	ldr	r3, [r3, #0]
 801fea4:	4a79      	ldr	r2, [pc, #484]	@ (802008c <HAL_SPI_Init+0x240>)
 801fea6:	4293      	cmp	r3, r2
 801fea8:	d007      	beq.n	801feba <HAL_SPI_Init+0x6e>
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	681b      	ldr	r3, [r3, #0]
 801feae:	4a78      	ldr	r2, [pc, #480]	@ (8020090 <HAL_SPI_Init+0x244>)
 801feb0:	4293      	cmp	r3, r2
 801feb2:	d002      	beq.n	801feba <HAL_SPI_Init+0x6e>
 801feb4:	68fb      	ldr	r3, [r7, #12]
 801feb6:	2b08      	cmp	r3, #8
 801feb8:	d811      	bhi.n	801fede <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801febe:	4a72      	ldr	r2, [pc, #456]	@ (8020088 <HAL_SPI_Init+0x23c>)
 801fec0:	4293      	cmp	r3, r2
 801fec2:	d009      	beq.n	801fed8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	4a70      	ldr	r2, [pc, #448]	@ (802008c <HAL_SPI_Init+0x240>)
 801feca:	4293      	cmp	r3, r2
 801fecc:	d004      	beq.n	801fed8 <HAL_SPI_Init+0x8c>
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	681b      	ldr	r3, [r3, #0]
 801fed2:	4a6f      	ldr	r2, [pc, #444]	@ (8020090 <HAL_SPI_Init+0x244>)
 801fed4:	4293      	cmp	r3, r2
 801fed6:	d104      	bne.n	801fee2 <HAL_SPI_Init+0x96>
 801fed8:	68fb      	ldr	r3, [r7, #12]
 801feda:	2b10      	cmp	r3, #16
 801fedc:	d901      	bls.n	801fee2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801fede:	2301      	movs	r3, #1
 801fee0:	e0cd      	b.n	802007e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fee8:	b2db      	uxtb	r3, r3
 801feea:	2b00      	cmp	r3, #0
 801feec:	d106      	bne.n	801fefc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	2200      	movs	r2, #0
 801fef2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801fef6:	6878      	ldr	r0, [r7, #4]
 801fef8:	f7e2 fcb6 	bl	8002868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	2202      	movs	r2, #2
 801ff00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	681a      	ldr	r2, [r3, #0]
 801ff0a:	687b      	ldr	r3, [r7, #4]
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	f022 0201 	bic.w	r2, r2, #1
 801ff12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	689b      	ldr	r3, [r3, #8]
 801ff1a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801ff1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ff20:	687b      	ldr	r3, [r7, #4]
 801ff22:	699b      	ldr	r3, [r3, #24]
 801ff24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ff28:	d119      	bne.n	801ff5e <HAL_SPI_Init+0x112>
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	685b      	ldr	r3, [r3, #4]
 801ff2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801ff32:	d103      	bne.n	801ff3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d008      	beq.n	801ff4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d10c      	bne.n	801ff5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ff48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ff4c:	d107      	bne.n	801ff5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	681b      	ldr	r3, [r3, #0]
 801ff52:	681a      	ldr	r2, [r3, #0]
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	681b      	ldr	r3, [r3, #0]
 801ff58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801ff5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	685b      	ldr	r3, [r3, #4]
 801ff62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d00f      	beq.n	801ff8a <HAL_SPI_Init+0x13e>
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	68db      	ldr	r3, [r3, #12]
 801ff6e:	2b06      	cmp	r3, #6
 801ff70:	d90b      	bls.n	801ff8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	681b      	ldr	r3, [r3, #0]
 801ff78:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	430a      	orrs	r2, r1
 801ff86:	601a      	str	r2, [r3, #0]
 801ff88:	e007      	b.n	801ff9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	681b      	ldr	r3, [r3, #0]
 801ff8e:	681a      	ldr	r2, [r3, #0]
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	681b      	ldr	r3, [r3, #0]
 801ff94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ff98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	69da      	ldr	r2, [r3, #28]
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ffa2:	431a      	orrs	r2, r3
 801ffa4:	68bb      	ldr	r3, [r7, #8]
 801ffa6:	431a      	orrs	r2, r3
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ffac:	ea42 0103 	orr.w	r1, r2, r3
 801ffb0:	687b      	ldr	r3, [r7, #4]
 801ffb2:	68da      	ldr	r2, [r3, #12]
 801ffb4:	687b      	ldr	r3, [r7, #4]
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	430a      	orrs	r2, r1
 801ffba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ffc4:	431a      	orrs	r2, r3
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ffca:	431a      	orrs	r2, r3
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	699b      	ldr	r3, [r3, #24]
 801ffd0:	431a      	orrs	r2, r3
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	691b      	ldr	r3, [r3, #16]
 801ffd6:	431a      	orrs	r2, r3
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	695b      	ldr	r3, [r3, #20]
 801ffdc:	431a      	orrs	r2, r3
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	6a1b      	ldr	r3, [r3, #32]
 801ffe2:	431a      	orrs	r2, r3
 801ffe4:	687b      	ldr	r3, [r7, #4]
 801ffe6:	685b      	ldr	r3, [r3, #4]
 801ffe8:	431a      	orrs	r2, r3
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ffee:	431a      	orrs	r2, r3
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	689b      	ldr	r3, [r3, #8]
 801fff4:	431a      	orrs	r2, r3
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801fffa:	ea42 0103 	orr.w	r1, r2, r3
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	430a      	orrs	r2, r1
 8020008:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	685b      	ldr	r3, [r3, #4]
 802000e:	2b00      	cmp	r3, #0
 8020010:	d113      	bne.n	802003a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	689b      	ldr	r3, [r3, #8]
 8020018:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020024:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	689b      	ldr	r3, [r3, #8]
 802002c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8020038:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	681b      	ldr	r3, [r3, #0]
 802003e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8020040:	687b      	ldr	r3, [r7, #4]
 8020042:	681b      	ldr	r3, [r3, #0]
 8020044:	f022 0201 	bic.w	r2, r2, #1
 8020048:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	685b      	ldr	r3, [r3, #4]
 802004e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8020052:	2b00      	cmp	r3, #0
 8020054:	d00a      	beq.n	802006c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	68db      	ldr	r3, [r3, #12]
 802005c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	681b      	ldr	r3, [r3, #0]
 8020068:	430a      	orrs	r2, r1
 802006a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	2200      	movs	r2, #0
 8020070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	2201      	movs	r2, #1
 8020078:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 802007c:	2300      	movs	r3, #0
}
 802007e:	4618      	mov	r0, r3
 8020080:	3710      	adds	r7, #16
 8020082:	46bd      	mov	sp, r7
 8020084:	bd80      	pop	{r7, pc}
 8020086:	bf00      	nop
 8020088:	40013000 	.word	0x40013000
 802008c:	40003800 	.word	0x40003800
 8020090:	40003c00 	.word	0x40003c00

08020094 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8020094:	b580      	push	{r7, lr}
 8020096:	b08a      	sub	sp, #40	@ 0x28
 8020098:	af00      	add	r7, sp, #0
 802009a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	691b      	ldr	r3, [r3, #16]
 80200a2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	695b      	ldr	r3, [r3, #20]
 80200aa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80200ac:	6a3a      	ldr	r2, [r7, #32]
 80200ae:	69fb      	ldr	r3, [r7, #28]
 80200b0:	4013      	ands	r3, r2
 80200b2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	689b      	ldr	r3, [r3, #8]
 80200ba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80200bc:	2300      	movs	r3, #0
 80200be:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80200c6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	681b      	ldr	r3, [r3, #0]
 80200cc:	3330      	adds	r3, #48	@ 0x30
 80200ce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80200d0:	69fb      	ldr	r3, [r7, #28]
 80200d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d010      	beq.n	80200fc <HAL_SPI_IRQHandler+0x68>
 80200da:	6a3b      	ldr	r3, [r7, #32]
 80200dc:	f003 0308 	and.w	r3, r3, #8
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	d00b      	beq.n	80200fc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	681b      	ldr	r3, [r3, #0]
 80200e8:	699a      	ldr	r2, [r3, #24]
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80200f2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80200f4:	6878      	ldr	r0, [r7, #4]
 80200f6:	f000 f9c3 	bl	8020480 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80200fa:	e192      	b.n	8020422 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80200fc:	69bb      	ldr	r3, [r7, #24]
 80200fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020102:	2b00      	cmp	r3, #0
 8020104:	d113      	bne.n	802012e <HAL_SPI_IRQHandler+0x9a>
 8020106:	69bb      	ldr	r3, [r7, #24]
 8020108:	f003 0320 	and.w	r3, r3, #32
 802010c:	2b00      	cmp	r3, #0
 802010e:	d10e      	bne.n	802012e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8020110:	69bb      	ldr	r3, [r7, #24]
 8020112:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8020116:	2b00      	cmp	r3, #0
 8020118:	d009      	beq.n	802012e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802011e:	6878      	ldr	r0, [r7, #4]
 8020120:	4798      	blx	r3
    hspi->RxISR(hspi);
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020126:	6878      	ldr	r0, [r7, #4]
 8020128:	4798      	blx	r3
    handled = 1UL;
 802012a:	2301      	movs	r3, #1
 802012c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 802012e:	69bb      	ldr	r3, [r7, #24]
 8020130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020134:	2b00      	cmp	r3, #0
 8020136:	d10f      	bne.n	8020158 <HAL_SPI_IRQHandler+0xc4>
 8020138:	69bb      	ldr	r3, [r7, #24]
 802013a:	f003 0301 	and.w	r3, r3, #1
 802013e:	2b00      	cmp	r3, #0
 8020140:	d00a      	beq.n	8020158 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8020142:	69bb      	ldr	r3, [r7, #24]
 8020144:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8020148:	2b00      	cmp	r3, #0
 802014a:	d105      	bne.n	8020158 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 802014c:	687b      	ldr	r3, [r7, #4]
 802014e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8020150:	6878      	ldr	r0, [r7, #4]
 8020152:	4798      	blx	r3
    handled = 1UL;
 8020154:	2301      	movs	r3, #1
 8020156:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8020158:	69bb      	ldr	r3, [r7, #24]
 802015a:	f003 0320 	and.w	r3, r3, #32
 802015e:	2b00      	cmp	r3, #0
 8020160:	d10f      	bne.n	8020182 <HAL_SPI_IRQHandler+0xee>
 8020162:	69bb      	ldr	r3, [r7, #24]
 8020164:	f003 0302 	and.w	r3, r3, #2
 8020168:	2b00      	cmp	r3, #0
 802016a:	d00a      	beq.n	8020182 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 802016c:	69bb      	ldr	r3, [r7, #24]
 802016e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8020172:	2b00      	cmp	r3, #0
 8020174:	d105      	bne.n	8020182 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802017a:	6878      	ldr	r0, [r7, #4]
 802017c:	4798      	blx	r3
    handled = 1UL;
 802017e:	2301      	movs	r3, #1
 8020180:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8020182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020184:	2b00      	cmp	r3, #0
 8020186:	f040 8147 	bne.w	8020418 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 802018a:	69bb      	ldr	r3, [r7, #24]
 802018c:	f003 0308 	and.w	r3, r3, #8
 8020190:	2b00      	cmp	r3, #0
 8020192:	f000 808b 	beq.w	80202ac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	681b      	ldr	r3, [r3, #0]
 802019a:	699a      	ldr	r2, [r3, #24]
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	f042 0208 	orr.w	r2, r2, #8
 80201a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	699a      	ldr	r2, [r3, #24]
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	681b      	ldr	r3, [r3, #0]
 80201b0:	f042 0210 	orr.w	r2, r2, #16
 80201b4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	699a      	ldr	r2, [r3, #24]
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	681b      	ldr	r3, [r3, #0]
 80201c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80201c4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	691a      	ldr	r2, [r3, #16]
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	f022 0208 	bic.w	r2, r2, #8
 80201d4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	689b      	ldr	r3, [r3, #8]
 80201dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80201e0:	2b00      	cmp	r3, #0
 80201e2:	d13d      	bne.n	8020260 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80201e4:	e036      	b.n	8020254 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	68db      	ldr	r3, [r3, #12]
 80201ea:	2b0f      	cmp	r3, #15
 80201ec:	d90b      	bls.n	8020206 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	681a      	ldr	r2, [r3, #0]
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80201f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80201f8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80201fe:	1d1a      	adds	r2, r3, #4
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	665a      	str	r2, [r3, #100]	@ 0x64
 8020204:	e01d      	b.n	8020242 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	68db      	ldr	r3, [r3, #12]
 802020a:	2b07      	cmp	r3, #7
 802020c:	d90b      	bls.n	8020226 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020212:	68fa      	ldr	r2, [r7, #12]
 8020214:	8812      	ldrh	r2, [r2, #0]
 8020216:	b292      	uxth	r2, r2
 8020218:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802021e:	1c9a      	adds	r2, r3, #2
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	665a      	str	r2, [r3, #100]	@ 0x64
 8020224:	e00d      	b.n	8020242 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	681b      	ldr	r3, [r3, #0]
 802022a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020232:	7812      	ldrb	r2, [r2, #0]
 8020234:	b2d2      	uxtb	r2, r2
 8020236:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802023c:	1c5a      	adds	r2, r3, #1
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8020248:	b29b      	uxth	r3, r3
 802024a:	3b01      	subs	r3, #1
 802024c:	b29a      	uxth	r2, r3
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 802025a:	b29b      	uxth	r3, r3
 802025c:	2b00      	cmp	r3, #0
 802025e:	d1c2      	bne.n	80201e6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8020260:	6878      	ldr	r0, [r7, #4]
 8020262:	f000 f931 	bl	80204c8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	2201      	movs	r2, #1
 802026a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020274:	2b00      	cmp	r3, #0
 8020276:	d003      	beq.n	8020280 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8020278:	6878      	ldr	r0, [r7, #4]
 802027a:	f000 f8f7 	bl	802046c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 802027e:	e0d0      	b.n	8020422 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8020280:	7cfb      	ldrb	r3, [r7, #19]
 8020282:	2b05      	cmp	r3, #5
 8020284:	d103      	bne.n	802028e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8020286:	6878      	ldr	r0, [r7, #4]
 8020288:	f000 f8e6 	bl	8020458 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 802028c:	e0c6      	b.n	802041c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 802028e:	7cfb      	ldrb	r3, [r7, #19]
 8020290:	2b04      	cmp	r3, #4
 8020292:	d103      	bne.n	802029c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8020294:	6878      	ldr	r0, [r7, #4]
 8020296:	f000 f8d5 	bl	8020444 <HAL_SPI_RxCpltCallback>
    return;
 802029a:	e0bf      	b.n	802041c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 802029c:	7cfb      	ldrb	r3, [r7, #19]
 802029e:	2b03      	cmp	r3, #3
 80202a0:	f040 80bc 	bne.w	802041c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80202a4:	6878      	ldr	r0, [r7, #4]
 80202a6:	f000 f8c3 	bl	8020430 <HAL_SPI_TxCpltCallback>
    return;
 80202aa:	e0b7      	b.n	802041c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80202ac:	69bb      	ldr	r3, [r7, #24]
 80202ae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	f000 80b5 	beq.w	8020422 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80202b8:	69bb      	ldr	r3, [r7, #24]
 80202ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80202be:	2b00      	cmp	r3, #0
 80202c0:	d00f      	beq.n	80202e2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202c8:	f043 0204 	orr.w	r2, r3, #4
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	699a      	ldr	r2, [r3, #24]
 80202d8:	687b      	ldr	r3, [r7, #4]
 80202da:	681b      	ldr	r3, [r3, #0]
 80202dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80202e0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80202e2:	69bb      	ldr	r3, [r7, #24]
 80202e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	d00f      	beq.n	802030c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202f2:	f043 0201 	orr.w	r2, r3, #1
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	699a      	ldr	r2, [r3, #24]
 8020302:	687b      	ldr	r3, [r7, #4]
 8020304:	681b      	ldr	r3, [r3, #0]
 8020306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802030a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 802030c:	69bb      	ldr	r3, [r7, #24]
 802030e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020312:	2b00      	cmp	r3, #0
 8020314:	d00f      	beq.n	8020336 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802031c:	f043 0208 	orr.w	r2, r3, #8
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	699a      	ldr	r2, [r3, #24]
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	681b      	ldr	r3, [r3, #0]
 8020330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020334:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8020336:	69bb      	ldr	r3, [r7, #24]
 8020338:	f003 0320 	and.w	r3, r3, #32
 802033c:	2b00      	cmp	r3, #0
 802033e:	d00f      	beq.n	8020360 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020346:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	699a      	ldr	r2, [r3, #24]
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	f042 0220 	orr.w	r2, r2, #32
 802035e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020366:	2b00      	cmp	r3, #0
 8020368:	d05a      	beq.n	8020420 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	681b      	ldr	r3, [r3, #0]
 802036e:	681a      	ldr	r2, [r3, #0]
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	681b      	ldr	r3, [r3, #0]
 8020374:	f022 0201 	bic.w	r2, r2, #1
 8020378:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	681b      	ldr	r3, [r3, #0]
 802037e:	6919      	ldr	r1, [r3, #16]
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	681a      	ldr	r2, [r3, #0]
 8020384:	4b28      	ldr	r3, [pc, #160]	@ (8020428 <HAL_SPI_IRQHandler+0x394>)
 8020386:	400b      	ands	r3, r1
 8020388:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 802038a:	697b      	ldr	r3, [r7, #20]
 802038c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8020390:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8020394:	d138      	bne.n	8020408 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	689a      	ldr	r2, [r3, #8]
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	681b      	ldr	r3, [r3, #0]
 80203a0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80203a4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d013      	beq.n	80203d6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80203b2:	4a1e      	ldr	r2, [pc, #120]	@ (802042c <HAL_SPI_IRQHandler+0x398>)
 80203b4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80203b6:	687b      	ldr	r3, [r7, #4]
 80203b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80203ba:	4618      	mov	r0, r3
 80203bc:	f7fa ffee 	bl	801b39c <HAL_DMA_Abort_IT>
 80203c0:	4603      	mov	r3, r0
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d007      	beq.n	80203d6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80203cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d020      	beq.n	8020420 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80203e2:	4a12      	ldr	r2, [pc, #72]	@ (802042c <HAL_SPI_IRQHandler+0x398>)
 80203e4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80203ea:	4618      	mov	r0, r3
 80203ec:	f7fa ffd6 	bl	801b39c <HAL_DMA_Abort_IT>
 80203f0:	4603      	mov	r3, r0
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d014      	beq.n	8020420 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80203fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8020406:	e00b      	b.n	8020420 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	2201      	movs	r2, #1
 802040c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8020410:	6878      	ldr	r0, [r7, #4]
 8020412:	f000 f82b 	bl	802046c <HAL_SPI_ErrorCallback>
    return;
 8020416:	e003      	b.n	8020420 <HAL_SPI_IRQHandler+0x38c>
    return;
 8020418:	bf00      	nop
 802041a:	e002      	b.n	8020422 <HAL_SPI_IRQHandler+0x38e>
    return;
 802041c:	bf00      	nop
 802041e:	e000      	b.n	8020422 <HAL_SPI_IRQHandler+0x38e>
    return;
 8020420:	bf00      	nop
  }
}
 8020422:	3728      	adds	r7, #40	@ 0x28
 8020424:	46bd      	mov	sp, r7
 8020426:	bd80      	pop	{r7, pc}
 8020428:	fffffc94 	.word	0xfffffc94
 802042c:	08020495 	.word	0x08020495

08020430 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020430:	b480      	push	{r7}
 8020432:	b083      	sub	sp, #12
 8020434:	af00      	add	r7, sp, #0
 8020436:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8020438:	bf00      	nop
 802043a:	370c      	adds	r7, #12
 802043c:	46bd      	mov	sp, r7
 802043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020442:	4770      	bx	lr

08020444 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020444:	b480      	push	{r7}
 8020446:	b083      	sub	sp, #12
 8020448:	af00      	add	r7, sp, #0
 802044a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 802044c:	bf00      	nop
 802044e:	370c      	adds	r7, #12
 8020450:	46bd      	mov	sp, r7
 8020452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020456:	4770      	bx	lr

08020458 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020458:	b480      	push	{r7}
 802045a:	b083      	sub	sp, #12
 802045c:	af00      	add	r7, sp, #0
 802045e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8020460:	bf00      	nop
 8020462:	370c      	adds	r7, #12
 8020464:	46bd      	mov	sp, r7
 8020466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046a:	4770      	bx	lr

0802046c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 802046c:	b480      	push	{r7}
 802046e:	b083      	sub	sp, #12
 8020470:	af00      	add	r7, sp, #0
 8020472:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8020474:	bf00      	nop
 8020476:	370c      	adds	r7, #12
 8020478:	46bd      	mov	sp, r7
 802047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802047e:	4770      	bx	lr

08020480 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020480:	b480      	push	{r7}
 8020482:	b083      	sub	sp, #12
 8020484:	af00      	add	r7, sp, #0
 8020486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8020488:	bf00      	nop
 802048a:	370c      	adds	r7, #12
 802048c:	46bd      	mov	sp, r7
 802048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020492:	4770      	bx	lr

08020494 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8020494:	b580      	push	{r7, lr}
 8020496:	b084      	sub	sp, #16
 8020498:	af00      	add	r7, sp, #0
 802049a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80204a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	2200      	movs	r2, #0
 80204a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80204aa:	68fb      	ldr	r3, [r7, #12]
 80204ac:	2200      	movs	r2, #0
 80204ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80204b2:	68fb      	ldr	r3, [r7, #12]
 80204b4:	2201      	movs	r2, #1
 80204b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80204ba:	68f8      	ldr	r0, [r7, #12]
 80204bc:	f7ff ffd6 	bl	802046c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80204c0:	bf00      	nop
 80204c2:	3710      	adds	r7, #16
 80204c4:	46bd      	mov	sp, r7
 80204c6:	bd80      	pop	{r7, pc}

080204c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80204c8:	b480      	push	{r7}
 80204ca:	b085      	sub	sp, #20
 80204cc:	af00      	add	r7, sp, #0
 80204ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	681b      	ldr	r3, [r3, #0]
 80204d4:	695b      	ldr	r3, [r3, #20]
 80204d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	699a      	ldr	r2, [r3, #24]
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	681b      	ldr	r3, [r3, #0]
 80204e2:	f042 0208 	orr.w	r2, r2, #8
 80204e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	681b      	ldr	r3, [r3, #0]
 80204ec:	699a      	ldr	r2, [r3, #24]
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	f042 0210 	orr.w	r2, r2, #16
 80204f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	681a      	ldr	r2, [r3, #0]
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	681b      	ldr	r3, [r3, #0]
 8020502:	f022 0201 	bic.w	r2, r2, #1
 8020506:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	6919      	ldr	r1, [r3, #16]
 802050e:	687b      	ldr	r3, [r7, #4]
 8020510:	681a      	ldr	r2, [r3, #0]
 8020512:	4b3c      	ldr	r3, [pc, #240]	@ (8020604 <SPI_CloseTransfer+0x13c>)
 8020514:	400b      	ands	r3, r1
 8020516:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	681b      	ldr	r3, [r3, #0]
 802051c:	689a      	ldr	r2, [r3, #8]
 802051e:	687b      	ldr	r3, [r7, #4]
 8020520:	681b      	ldr	r3, [r3, #0]
 8020522:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8020526:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 802052e:	b2db      	uxtb	r3, r3
 8020530:	2b04      	cmp	r3, #4
 8020532:	d014      	beq.n	802055e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8020534:	68fb      	ldr	r3, [r7, #12]
 8020536:	f003 0320 	and.w	r3, r3, #32
 802053a:	2b00      	cmp	r3, #0
 802053c:	d00f      	beq.n	802055e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802053e:	687b      	ldr	r3, [r7, #4]
 8020540:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020544:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020548:	687b      	ldr	r3, [r7, #4]
 802054a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	681b      	ldr	r3, [r3, #0]
 8020552:	699a      	ldr	r2, [r3, #24]
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	f042 0220 	orr.w	r2, r2, #32
 802055c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8020564:	b2db      	uxtb	r3, r3
 8020566:	2b03      	cmp	r3, #3
 8020568:	d014      	beq.n	8020594 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020570:	2b00      	cmp	r3, #0
 8020572:	d00f      	beq.n	8020594 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802057a:	f043 0204 	orr.w	r2, r3, #4
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	699a      	ldr	r2, [r3, #24]
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8020592:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 802059a:	2b00      	cmp	r3, #0
 802059c:	d00f      	beq.n	80205be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80205a4:	f043 0201 	orr.w	r2, r3, #1
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80205ae:	687b      	ldr	r3, [r7, #4]
 80205b0:	681b      	ldr	r3, [r3, #0]
 80205b2:	699a      	ldr	r2, [r3, #24]
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	681b      	ldr	r3, [r3, #0]
 80205b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80205bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80205be:	68fb      	ldr	r3, [r7, #12]
 80205c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d00f      	beq.n	80205e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80205c8:	687b      	ldr	r3, [r7, #4]
 80205ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80205ce:	f043 0208 	orr.w	r2, r3, #8
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	699a      	ldr	r2, [r3, #24]
 80205de:	687b      	ldr	r3, [r7, #4]
 80205e0:	681b      	ldr	r3, [r3, #0]
 80205e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80205e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	2200      	movs	r2, #0
 80205ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	2200      	movs	r2, #0
 80205f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80205f8:	bf00      	nop
 80205fa:	3714      	adds	r7, #20
 80205fc:	46bd      	mov	sp, r7
 80205fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020602:	4770      	bx	lr
 8020604:	fffffc90 	.word	0xfffffc90

08020608 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8020608:	b480      	push	{r7}
 802060a:	b085      	sub	sp, #20
 802060c:	af00      	add	r7, sp, #0
 802060e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8020610:	687b      	ldr	r3, [r7, #4]
 8020612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020614:	095b      	lsrs	r3, r3, #5
 8020616:	3301      	adds	r3, #1
 8020618:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	68db      	ldr	r3, [r3, #12]
 802061e:	3301      	adds	r3, #1
 8020620:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8020622:	68bb      	ldr	r3, [r7, #8]
 8020624:	3307      	adds	r3, #7
 8020626:	08db      	lsrs	r3, r3, #3
 8020628:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 802062a:	68bb      	ldr	r3, [r7, #8]
 802062c:	68fa      	ldr	r2, [r7, #12]
 802062e:	fb02 f303 	mul.w	r3, r2, r3
}
 8020632:	4618      	mov	r0, r3
 8020634:	3714      	adds	r7, #20
 8020636:	46bd      	mov	sp, r7
 8020638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802063c:	4770      	bx	lr

0802063e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802063e:	b580      	push	{r7, lr}
 8020640:	b082      	sub	sp, #8
 8020642:	af00      	add	r7, sp, #0
 8020644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	2b00      	cmp	r3, #0
 802064a:	d101      	bne.n	8020650 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802064c:	2301      	movs	r3, #1
 802064e:	e049      	b.n	80206e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020656:	b2db      	uxtb	r3, r3
 8020658:	2b00      	cmp	r3, #0
 802065a:	d106      	bne.n	802066a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	2200      	movs	r2, #0
 8020660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8020664:	6878      	ldr	r0, [r7, #4]
 8020666:	f7e2 facb 	bl	8002c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	2202      	movs	r2, #2
 802066e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	681a      	ldr	r2, [r3, #0]
 8020676:	687b      	ldr	r3, [r7, #4]
 8020678:	3304      	adds	r3, #4
 802067a:	4619      	mov	r1, r3
 802067c:	4610      	mov	r0, r2
 802067e:	f000 fb1b 	bl	8020cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	2201      	movs	r2, #1
 8020686:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	2201      	movs	r2, #1
 802068e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	2201      	movs	r2, #1
 8020696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 802069a:	687b      	ldr	r3, [r7, #4]
 802069c:	2201      	movs	r2, #1
 802069e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80206a2:	687b      	ldr	r3, [r7, #4]
 80206a4:	2201      	movs	r2, #1
 80206a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	2201      	movs	r2, #1
 80206ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	2201      	movs	r2, #1
 80206b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80206ba:	687b      	ldr	r3, [r7, #4]
 80206bc:	2201      	movs	r2, #1
 80206be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80206c2:	687b      	ldr	r3, [r7, #4]
 80206c4:	2201      	movs	r2, #1
 80206c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	2201      	movs	r2, #1
 80206ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	2201      	movs	r2, #1
 80206d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80206da:	687b      	ldr	r3, [r7, #4]
 80206dc:	2201      	movs	r2, #1
 80206de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80206e2:	2300      	movs	r3, #0
}
 80206e4:	4618      	mov	r0, r3
 80206e6:	3708      	adds	r7, #8
 80206e8:	46bd      	mov	sp, r7
 80206ea:	bd80      	pop	{r7, pc}

080206ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80206ec:	b480      	push	{r7}
 80206ee:	b085      	sub	sp, #20
 80206f0:	af00      	add	r7, sp, #0
 80206f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80206fa:	b2db      	uxtb	r3, r3
 80206fc:	2b01      	cmp	r3, #1
 80206fe:	d001      	beq.n	8020704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8020700:	2301      	movs	r3, #1
 8020702:	e054      	b.n	80207ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	2202      	movs	r2, #2
 8020708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	68da      	ldr	r2, [r3, #12]
 8020712:	687b      	ldr	r3, [r7, #4]
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	f042 0201 	orr.w	r2, r2, #1
 802071a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	4a26      	ldr	r2, [pc, #152]	@ (80207bc <HAL_TIM_Base_Start_IT+0xd0>)
 8020722:	4293      	cmp	r3, r2
 8020724:	d022      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802072e:	d01d      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	4a22      	ldr	r2, [pc, #136]	@ (80207c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8020736:	4293      	cmp	r3, r2
 8020738:	d018      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	4a21      	ldr	r2, [pc, #132]	@ (80207c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8020740:	4293      	cmp	r3, r2
 8020742:	d013      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 8020744:	687b      	ldr	r3, [r7, #4]
 8020746:	681b      	ldr	r3, [r3, #0]
 8020748:	4a1f      	ldr	r2, [pc, #124]	@ (80207c8 <HAL_TIM_Base_Start_IT+0xdc>)
 802074a:	4293      	cmp	r3, r2
 802074c:	d00e      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	681b      	ldr	r3, [r3, #0]
 8020752:	4a1e      	ldr	r2, [pc, #120]	@ (80207cc <HAL_TIM_Base_Start_IT+0xe0>)
 8020754:	4293      	cmp	r3, r2
 8020756:	d009      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	681b      	ldr	r3, [r3, #0]
 802075c:	4a1c      	ldr	r2, [pc, #112]	@ (80207d0 <HAL_TIM_Base_Start_IT+0xe4>)
 802075e:	4293      	cmp	r3, r2
 8020760:	d004      	beq.n	802076c <HAL_TIM_Base_Start_IT+0x80>
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	681b      	ldr	r3, [r3, #0]
 8020766:	4a1b      	ldr	r2, [pc, #108]	@ (80207d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8020768:	4293      	cmp	r3, r2
 802076a:	d115      	bne.n	8020798 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	681b      	ldr	r3, [r3, #0]
 8020770:	689a      	ldr	r2, [r3, #8]
 8020772:	4b19      	ldr	r3, [pc, #100]	@ (80207d8 <HAL_TIM_Base_Start_IT+0xec>)
 8020774:	4013      	ands	r3, r2
 8020776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020778:	68fb      	ldr	r3, [r7, #12]
 802077a:	2b06      	cmp	r3, #6
 802077c:	d015      	beq.n	80207aa <HAL_TIM_Base_Start_IT+0xbe>
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020784:	d011      	beq.n	80207aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	681b      	ldr	r3, [r3, #0]
 802078a:	681a      	ldr	r2, [r3, #0]
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	681b      	ldr	r3, [r3, #0]
 8020790:	f042 0201 	orr.w	r2, r2, #1
 8020794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8020796:	e008      	b.n	80207aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	681b      	ldr	r3, [r3, #0]
 802079c:	681a      	ldr	r2, [r3, #0]
 802079e:	687b      	ldr	r3, [r7, #4]
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	f042 0201 	orr.w	r2, r2, #1
 80207a6:	601a      	str	r2, [r3, #0]
 80207a8:	e000      	b.n	80207ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80207aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80207ac:	2300      	movs	r3, #0
}
 80207ae:	4618      	mov	r0, r3
 80207b0:	3714      	adds	r7, #20
 80207b2:	46bd      	mov	sp, r7
 80207b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207b8:	4770      	bx	lr
 80207ba:	bf00      	nop
 80207bc:	40010000 	.word	0x40010000
 80207c0:	40000400 	.word	0x40000400
 80207c4:	40000800 	.word	0x40000800
 80207c8:	40000c00 	.word	0x40000c00
 80207cc:	40010400 	.word	0x40010400
 80207d0:	40001800 	.word	0x40001800
 80207d4:	40014000 	.word	0x40014000
 80207d8:	00010007 	.word	0x00010007

080207dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80207dc:	b580      	push	{r7, lr}
 80207de:	b082      	sub	sp, #8
 80207e0:	af00      	add	r7, sp, #0
 80207e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80207e4:	687b      	ldr	r3, [r7, #4]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d101      	bne.n	80207ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80207ea:	2301      	movs	r3, #1
 80207ec:	e049      	b.n	8020882 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80207f4:	b2db      	uxtb	r3, r3
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d106      	bne.n	8020808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	2200      	movs	r2, #0
 80207fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8020802:	6878      	ldr	r0, [r7, #4]
 8020804:	f000 f841 	bl	802088a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	2202      	movs	r2, #2
 802080c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	681a      	ldr	r2, [r3, #0]
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	3304      	adds	r3, #4
 8020818:	4619      	mov	r1, r3
 802081a:	4610      	mov	r0, r2
 802081c:	f000 fa4c 	bl	8020cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	2201      	movs	r2, #1
 8020824:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	2201      	movs	r2, #1
 802082c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	2201      	movs	r2, #1
 8020834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	2201      	movs	r2, #1
 802083c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	2201      	movs	r2, #1
 8020844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	2201      	movs	r2, #1
 802084c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	2201      	movs	r2, #1
 8020854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020858:	687b      	ldr	r3, [r7, #4]
 802085a:	2201      	movs	r2, #1
 802085c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	2201      	movs	r2, #1
 8020864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	2201      	movs	r2, #1
 802086c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2201      	movs	r2, #1
 8020874:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020878:	687b      	ldr	r3, [r7, #4]
 802087a:	2201      	movs	r2, #1
 802087c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8020880:	2300      	movs	r3, #0
}
 8020882:	4618      	mov	r0, r3
 8020884:	3708      	adds	r7, #8
 8020886:	46bd      	mov	sp, r7
 8020888:	bd80      	pop	{r7, pc}

0802088a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 802088a:	b480      	push	{r7}
 802088c:	b083      	sub	sp, #12
 802088e:	af00      	add	r7, sp, #0
 8020890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8020892:	bf00      	nop
 8020894:	370c      	adds	r7, #12
 8020896:	46bd      	mov	sp, r7
 8020898:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089c:	4770      	bx	lr
	...

080208a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	b086      	sub	sp, #24
 80208a4:	af00      	add	r7, sp, #0
 80208a6:	60f8      	str	r0, [r7, #12]
 80208a8:	60b9      	str	r1, [r7, #8]
 80208aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80208ac:	2300      	movs	r3, #0
 80208ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80208b6:	2b01      	cmp	r3, #1
 80208b8:	d101      	bne.n	80208be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80208ba:	2302      	movs	r3, #2
 80208bc:	e0ff      	b.n	8020abe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80208be:	68fb      	ldr	r3, [r7, #12]
 80208c0:	2201      	movs	r2, #1
 80208c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	2b14      	cmp	r3, #20
 80208ca:	f200 80f0 	bhi.w	8020aae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80208ce:	a201      	add	r2, pc, #4	@ (adr r2, 80208d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80208d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208d4:	08020929 	.word	0x08020929
 80208d8:	08020aaf 	.word	0x08020aaf
 80208dc:	08020aaf 	.word	0x08020aaf
 80208e0:	08020aaf 	.word	0x08020aaf
 80208e4:	08020969 	.word	0x08020969
 80208e8:	08020aaf 	.word	0x08020aaf
 80208ec:	08020aaf 	.word	0x08020aaf
 80208f0:	08020aaf 	.word	0x08020aaf
 80208f4:	080209ab 	.word	0x080209ab
 80208f8:	08020aaf 	.word	0x08020aaf
 80208fc:	08020aaf 	.word	0x08020aaf
 8020900:	08020aaf 	.word	0x08020aaf
 8020904:	080209eb 	.word	0x080209eb
 8020908:	08020aaf 	.word	0x08020aaf
 802090c:	08020aaf 	.word	0x08020aaf
 8020910:	08020aaf 	.word	0x08020aaf
 8020914:	08020a2d 	.word	0x08020a2d
 8020918:	08020aaf 	.word	0x08020aaf
 802091c:	08020aaf 	.word	0x08020aaf
 8020920:	08020aaf 	.word	0x08020aaf
 8020924:	08020a6d 	.word	0x08020a6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020928:	68fb      	ldr	r3, [r7, #12]
 802092a:	681b      	ldr	r3, [r3, #0]
 802092c:	68b9      	ldr	r1, [r7, #8]
 802092e:	4618      	mov	r0, r3
 8020930:	f000 fa68 	bl	8020e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020934:	68fb      	ldr	r3, [r7, #12]
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	699a      	ldr	r2, [r3, #24]
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	681b      	ldr	r3, [r3, #0]
 802093e:	f042 0208 	orr.w	r2, r2, #8
 8020942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020944:	68fb      	ldr	r3, [r7, #12]
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	699a      	ldr	r2, [r3, #24]
 802094a:	68fb      	ldr	r3, [r7, #12]
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	f022 0204 	bic.w	r2, r2, #4
 8020952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020954:	68fb      	ldr	r3, [r7, #12]
 8020956:	681b      	ldr	r3, [r3, #0]
 8020958:	6999      	ldr	r1, [r3, #24]
 802095a:	68bb      	ldr	r3, [r7, #8]
 802095c:	691a      	ldr	r2, [r3, #16]
 802095e:	68fb      	ldr	r3, [r7, #12]
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	430a      	orrs	r2, r1
 8020964:	619a      	str	r2, [r3, #24]
      break;
 8020966:	e0a5      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	68b9      	ldr	r1, [r7, #8]
 802096e:	4618      	mov	r0, r3
 8020970:	f000 fad8 	bl	8020f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	699a      	ldr	r2, [r3, #24]
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	681b      	ldr	r3, [r3, #0]
 802097e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	699a      	ldr	r2, [r3, #24]
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	681b      	ldr	r3, [r3, #0]
 802098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020994:	68fb      	ldr	r3, [r7, #12]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	6999      	ldr	r1, [r3, #24]
 802099a:	68bb      	ldr	r3, [r7, #8]
 802099c:	691b      	ldr	r3, [r3, #16]
 802099e:	021a      	lsls	r2, r3, #8
 80209a0:	68fb      	ldr	r3, [r7, #12]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	430a      	orrs	r2, r1
 80209a6:	619a      	str	r2, [r3, #24]
      break;
 80209a8:	e084      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80209aa:	68fb      	ldr	r3, [r7, #12]
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	68b9      	ldr	r1, [r7, #8]
 80209b0:	4618      	mov	r0, r3
 80209b2:	f000 fb41 	bl	8021038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80209b6:	68fb      	ldr	r3, [r7, #12]
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	69da      	ldr	r2, [r3, #28]
 80209bc:	68fb      	ldr	r3, [r7, #12]
 80209be:	681b      	ldr	r3, [r3, #0]
 80209c0:	f042 0208 	orr.w	r2, r2, #8
 80209c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80209c6:	68fb      	ldr	r3, [r7, #12]
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	69da      	ldr	r2, [r3, #28]
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	f022 0204 	bic.w	r2, r2, #4
 80209d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80209d6:	68fb      	ldr	r3, [r7, #12]
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	69d9      	ldr	r1, [r3, #28]
 80209dc:	68bb      	ldr	r3, [r7, #8]
 80209de:	691a      	ldr	r2, [r3, #16]
 80209e0:	68fb      	ldr	r3, [r7, #12]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	430a      	orrs	r2, r1
 80209e6:	61da      	str	r2, [r3, #28]
      break;
 80209e8:	e064      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80209ea:	68fb      	ldr	r3, [r7, #12]
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	68b9      	ldr	r1, [r7, #8]
 80209f0:	4618      	mov	r0, r3
 80209f2:	f000 fba9 	bl	8021148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80209f6:	68fb      	ldr	r3, [r7, #12]
 80209f8:	681b      	ldr	r3, [r3, #0]
 80209fa:	69da      	ldr	r2, [r3, #28]
 80209fc:	68fb      	ldr	r3, [r7, #12]
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020a06:	68fb      	ldr	r3, [r7, #12]
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	69da      	ldr	r2, [r3, #28]
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020a16:	68fb      	ldr	r3, [r7, #12]
 8020a18:	681b      	ldr	r3, [r3, #0]
 8020a1a:	69d9      	ldr	r1, [r3, #28]
 8020a1c:	68bb      	ldr	r3, [r7, #8]
 8020a1e:	691b      	ldr	r3, [r3, #16]
 8020a20:	021a      	lsls	r2, r3, #8
 8020a22:	68fb      	ldr	r3, [r7, #12]
 8020a24:	681b      	ldr	r3, [r3, #0]
 8020a26:	430a      	orrs	r2, r1
 8020a28:	61da      	str	r2, [r3, #28]
      break;
 8020a2a:	e043      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	681b      	ldr	r3, [r3, #0]
 8020a30:	68b9      	ldr	r1, [r7, #8]
 8020a32:	4618      	mov	r0, r3
 8020a34:	f000 fbf2 	bl	802121c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020a38:	68fb      	ldr	r3, [r7, #12]
 8020a3a:	681b      	ldr	r3, [r3, #0]
 8020a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020a3e:	68fb      	ldr	r3, [r7, #12]
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	f042 0208 	orr.w	r2, r2, #8
 8020a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	f022 0204 	bic.w	r2, r2, #4
 8020a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020a58:	68fb      	ldr	r3, [r7, #12]
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8020a5e:	68bb      	ldr	r3, [r7, #8]
 8020a60:	691a      	ldr	r2, [r3, #16]
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	430a      	orrs	r2, r1
 8020a68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020a6a:	e023      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8020a6c:	68fb      	ldr	r3, [r7, #12]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	68b9      	ldr	r1, [r7, #8]
 8020a72:	4618      	mov	r0, r3
 8020a74:	f000 fc36 	bl	80212e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	681b      	ldr	r3, [r3, #0]
 8020a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020a7e:	68fb      	ldr	r3, [r7, #12]
 8020a80:	681b      	ldr	r3, [r3, #0]
 8020a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	681b      	ldr	r3, [r3, #0]
 8020a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8020a98:	68fb      	ldr	r3, [r7, #12]
 8020a9a:	681b      	ldr	r3, [r3, #0]
 8020a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8020a9e:	68bb      	ldr	r3, [r7, #8]
 8020aa0:	691b      	ldr	r3, [r3, #16]
 8020aa2:	021a      	lsls	r2, r3, #8
 8020aa4:	68fb      	ldr	r3, [r7, #12]
 8020aa6:	681b      	ldr	r3, [r3, #0]
 8020aa8:	430a      	orrs	r2, r1
 8020aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8020aac:	e002      	b.n	8020ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8020aae:	2301      	movs	r3, #1
 8020ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8020ab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8020ab4:	68fb      	ldr	r3, [r7, #12]
 8020ab6:	2200      	movs	r2, #0
 8020ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8020abe:	4618      	mov	r0, r3
 8020ac0:	3718      	adds	r7, #24
 8020ac2:	46bd      	mov	sp, r7
 8020ac4:	bd80      	pop	{r7, pc}
 8020ac6:	bf00      	nop

08020ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020ac8:	b580      	push	{r7, lr}
 8020aca:	b084      	sub	sp, #16
 8020acc:	af00      	add	r7, sp, #0
 8020ace:	6078      	str	r0, [r7, #4]
 8020ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8020ad2:	2300      	movs	r3, #0
 8020ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020adc:	2b01      	cmp	r3, #1
 8020ade:	d101      	bne.n	8020ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8020ae0:	2302      	movs	r3, #2
 8020ae2:	e0dc      	b.n	8020c9e <HAL_TIM_ConfigClockSource+0x1d6>
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	2201      	movs	r2, #1
 8020ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	2202      	movs	r2, #2
 8020af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	689b      	ldr	r3, [r3, #8]
 8020afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020afc:	68ba      	ldr	r2, [r7, #8]
 8020afe:	4b6a      	ldr	r3, [pc, #424]	@ (8020ca8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8020b00:	4013      	ands	r3, r2
 8020b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020b04:	68bb      	ldr	r3, [r7, #8]
 8020b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	68ba      	ldr	r2, [r7, #8]
 8020b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020b14:	683b      	ldr	r3, [r7, #0]
 8020b16:	681b      	ldr	r3, [r3, #0]
 8020b18:	4a64      	ldr	r2, [pc, #400]	@ (8020cac <HAL_TIM_ConfigClockSource+0x1e4>)
 8020b1a:	4293      	cmp	r3, r2
 8020b1c:	f000 80a9 	beq.w	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020b20:	4a62      	ldr	r2, [pc, #392]	@ (8020cac <HAL_TIM_ConfigClockSource+0x1e4>)
 8020b22:	4293      	cmp	r3, r2
 8020b24:	f200 80ae 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b28:	4a61      	ldr	r2, [pc, #388]	@ (8020cb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8020b2a:	4293      	cmp	r3, r2
 8020b2c:	f000 80a1 	beq.w	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020b30:	4a5f      	ldr	r2, [pc, #380]	@ (8020cb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8020b32:	4293      	cmp	r3, r2
 8020b34:	f200 80a6 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b38:	4a5e      	ldr	r2, [pc, #376]	@ (8020cb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020b3a:	4293      	cmp	r3, r2
 8020b3c:	f000 8099 	beq.w	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020b40:	4a5c      	ldr	r2, [pc, #368]	@ (8020cb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020b42:	4293      	cmp	r3, r2
 8020b44:	f200 809e 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020b4c:	f000 8091 	beq.w	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020b50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020b54:	f200 8096 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020b5c:	f000 8089 	beq.w	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020b64:	f200 808e 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020b6c:	d03e      	beq.n	8020bec <HAL_TIM_ConfigClockSource+0x124>
 8020b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020b72:	f200 8087 	bhi.w	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020b7a:	f000 8086 	beq.w	8020c8a <HAL_TIM_ConfigClockSource+0x1c2>
 8020b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020b82:	d87f      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b84:	2b70      	cmp	r3, #112	@ 0x70
 8020b86:	d01a      	beq.n	8020bbe <HAL_TIM_ConfigClockSource+0xf6>
 8020b88:	2b70      	cmp	r3, #112	@ 0x70
 8020b8a:	d87b      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b8c:	2b60      	cmp	r3, #96	@ 0x60
 8020b8e:	d050      	beq.n	8020c32 <HAL_TIM_ConfigClockSource+0x16a>
 8020b90:	2b60      	cmp	r3, #96	@ 0x60
 8020b92:	d877      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b94:	2b50      	cmp	r3, #80	@ 0x50
 8020b96:	d03c      	beq.n	8020c12 <HAL_TIM_ConfigClockSource+0x14a>
 8020b98:	2b50      	cmp	r3, #80	@ 0x50
 8020b9a:	d873      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020b9c:	2b40      	cmp	r3, #64	@ 0x40
 8020b9e:	d058      	beq.n	8020c52 <HAL_TIM_ConfigClockSource+0x18a>
 8020ba0:	2b40      	cmp	r3, #64	@ 0x40
 8020ba2:	d86f      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020ba4:	2b30      	cmp	r3, #48	@ 0x30
 8020ba6:	d064      	beq.n	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020ba8:	2b30      	cmp	r3, #48	@ 0x30
 8020baa:	d86b      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020bac:	2b20      	cmp	r3, #32
 8020bae:	d060      	beq.n	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020bb0:	2b20      	cmp	r3, #32
 8020bb2:	d867      	bhi.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d05c      	beq.n	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020bb8:	2b10      	cmp	r3, #16
 8020bba:	d05a      	beq.n	8020c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8020bbc:	e062      	b.n	8020c84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8020bc2:	683b      	ldr	r3, [r7, #0]
 8020bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020bc6:	683b      	ldr	r3, [r7, #0]
 8020bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020bca:	683b      	ldr	r3, [r7, #0]
 8020bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8020bce:	f000 fc6d 	bl	80214ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	689b      	ldr	r3, [r3, #8]
 8020bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020bda:	68bb      	ldr	r3, [r7, #8]
 8020bdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8020be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	68ba      	ldr	r2, [r7, #8]
 8020be8:	609a      	str	r2, [r3, #8]
      break;
 8020bea:	e04f      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8020bf0:	683b      	ldr	r3, [r7, #0]
 8020bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020bf4:	683b      	ldr	r3, [r7, #0]
 8020bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020bf8:	683b      	ldr	r3, [r7, #0]
 8020bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8020bfc:	f000 fc56 	bl	80214ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	689a      	ldr	r2, [r3, #8]
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	681b      	ldr	r3, [r3, #0]
 8020c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8020c0e:	609a      	str	r2, [r3, #8]
      break;
 8020c10:	e03c      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020c1a:	683b      	ldr	r3, [r7, #0]
 8020c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020c1e:	461a      	mov	r2, r3
 8020c20:	f000 fbc6 	bl	80213b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020c24:	687b      	ldr	r3, [r7, #4]
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	2150      	movs	r1, #80	@ 0x50
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	f000 fc20 	bl	8021470 <TIM_ITRx_SetConfig>
      break;
 8020c30:	e02c      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020c36:	683b      	ldr	r3, [r7, #0]
 8020c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020c3a:	683b      	ldr	r3, [r7, #0]
 8020c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8020c3e:	461a      	mov	r2, r3
 8020c40:	f000 fbe5 	bl	802140e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	2160      	movs	r1, #96	@ 0x60
 8020c4a:	4618      	mov	r0, r3
 8020c4c:	f000 fc10 	bl	8021470 <TIM_ITRx_SetConfig>
      break;
 8020c50:	e01c      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020c56:	683b      	ldr	r3, [r7, #0]
 8020c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020c5a:	683b      	ldr	r3, [r7, #0]
 8020c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020c5e:	461a      	mov	r2, r3
 8020c60:	f000 fba6 	bl	80213b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	2140      	movs	r1, #64	@ 0x40
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f000 fc00 	bl	8021470 <TIM_ITRx_SetConfig>
      break;
 8020c70:	e00c      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	681a      	ldr	r2, [r3, #0]
 8020c76:	683b      	ldr	r3, [r7, #0]
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	4619      	mov	r1, r3
 8020c7c:	4610      	mov	r0, r2
 8020c7e:	f000 fbf7 	bl	8021470 <TIM_ITRx_SetConfig>
      break;
 8020c82:	e003      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8020c84:	2301      	movs	r3, #1
 8020c86:	73fb      	strb	r3, [r7, #15]
      break;
 8020c88:	e000      	b.n	8020c8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8020c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	2201      	movs	r2, #1
 8020c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	2200      	movs	r2, #0
 8020c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8020c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8020c9e:	4618      	mov	r0, r3
 8020ca0:	3710      	adds	r7, #16
 8020ca2:	46bd      	mov	sp, r7
 8020ca4:	bd80      	pop	{r7, pc}
 8020ca6:	bf00      	nop
 8020ca8:	ffceff88 	.word	0xffceff88
 8020cac:	00100040 	.word	0x00100040
 8020cb0:	00100030 	.word	0x00100030
 8020cb4:	00100020 	.word	0x00100020

08020cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8020cb8:	b480      	push	{r7}
 8020cba:	b085      	sub	sp, #20
 8020cbc:	af00      	add	r7, sp, #0
 8020cbe:	6078      	str	r0, [r7, #4]
 8020cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	4a46      	ldr	r2, [pc, #280]	@ (8020de4 <TIM_Base_SetConfig+0x12c>)
 8020ccc:	4293      	cmp	r3, r2
 8020cce:	d013      	beq.n	8020cf8 <TIM_Base_SetConfig+0x40>
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020cd6:	d00f      	beq.n	8020cf8 <TIM_Base_SetConfig+0x40>
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	4a43      	ldr	r2, [pc, #268]	@ (8020de8 <TIM_Base_SetConfig+0x130>)
 8020cdc:	4293      	cmp	r3, r2
 8020cde:	d00b      	beq.n	8020cf8 <TIM_Base_SetConfig+0x40>
 8020ce0:	687b      	ldr	r3, [r7, #4]
 8020ce2:	4a42      	ldr	r2, [pc, #264]	@ (8020dec <TIM_Base_SetConfig+0x134>)
 8020ce4:	4293      	cmp	r3, r2
 8020ce6:	d007      	beq.n	8020cf8 <TIM_Base_SetConfig+0x40>
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	4a41      	ldr	r2, [pc, #260]	@ (8020df0 <TIM_Base_SetConfig+0x138>)
 8020cec:	4293      	cmp	r3, r2
 8020cee:	d003      	beq.n	8020cf8 <TIM_Base_SetConfig+0x40>
 8020cf0:	687b      	ldr	r3, [r7, #4]
 8020cf2:	4a40      	ldr	r2, [pc, #256]	@ (8020df4 <TIM_Base_SetConfig+0x13c>)
 8020cf4:	4293      	cmp	r3, r2
 8020cf6:	d108      	bne.n	8020d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020cf8:	68fb      	ldr	r3, [r7, #12]
 8020cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020d00:	683b      	ldr	r3, [r7, #0]
 8020d02:	685b      	ldr	r3, [r3, #4]
 8020d04:	68fa      	ldr	r2, [r7, #12]
 8020d06:	4313      	orrs	r3, r2
 8020d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	4a35      	ldr	r2, [pc, #212]	@ (8020de4 <TIM_Base_SetConfig+0x12c>)
 8020d0e:	4293      	cmp	r3, r2
 8020d10:	d01f      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d12:	687b      	ldr	r3, [r7, #4]
 8020d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020d18:	d01b      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d1a:	687b      	ldr	r3, [r7, #4]
 8020d1c:	4a32      	ldr	r2, [pc, #200]	@ (8020de8 <TIM_Base_SetConfig+0x130>)
 8020d1e:	4293      	cmp	r3, r2
 8020d20:	d017      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	4a31      	ldr	r2, [pc, #196]	@ (8020dec <TIM_Base_SetConfig+0x134>)
 8020d26:	4293      	cmp	r3, r2
 8020d28:	d013      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	4a30      	ldr	r2, [pc, #192]	@ (8020df0 <TIM_Base_SetConfig+0x138>)
 8020d2e:	4293      	cmp	r3, r2
 8020d30:	d00f      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d32:	687b      	ldr	r3, [r7, #4]
 8020d34:	4a2f      	ldr	r2, [pc, #188]	@ (8020df4 <TIM_Base_SetConfig+0x13c>)
 8020d36:	4293      	cmp	r3, r2
 8020d38:	d00b      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8020df8 <TIM_Base_SetConfig+0x140>)
 8020d3e:	4293      	cmp	r3, r2
 8020d40:	d007      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	4a2d      	ldr	r2, [pc, #180]	@ (8020dfc <TIM_Base_SetConfig+0x144>)
 8020d46:	4293      	cmp	r3, r2
 8020d48:	d003      	beq.n	8020d52 <TIM_Base_SetConfig+0x9a>
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8020e00 <TIM_Base_SetConfig+0x148>)
 8020d4e:	4293      	cmp	r3, r2
 8020d50:	d108      	bne.n	8020d64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020d52:	68fb      	ldr	r3, [r7, #12]
 8020d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020d5a:	683b      	ldr	r3, [r7, #0]
 8020d5c:	68db      	ldr	r3, [r3, #12]
 8020d5e:	68fa      	ldr	r2, [r7, #12]
 8020d60:	4313      	orrs	r3, r2
 8020d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020d64:	68fb      	ldr	r3, [r7, #12]
 8020d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020d6a:	683b      	ldr	r3, [r7, #0]
 8020d6c:	695b      	ldr	r3, [r3, #20]
 8020d6e:	4313      	orrs	r3, r2
 8020d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	68fa      	ldr	r2, [r7, #12]
 8020d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020d78:	683b      	ldr	r3, [r7, #0]
 8020d7a:	689a      	ldr	r2, [r3, #8]
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	681a      	ldr	r2, [r3, #0]
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	4a16      	ldr	r2, [pc, #88]	@ (8020de4 <TIM_Base_SetConfig+0x12c>)
 8020d8c:	4293      	cmp	r3, r2
 8020d8e:	d00f      	beq.n	8020db0 <TIM_Base_SetConfig+0xf8>
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	4a18      	ldr	r2, [pc, #96]	@ (8020df4 <TIM_Base_SetConfig+0x13c>)
 8020d94:	4293      	cmp	r3, r2
 8020d96:	d00b      	beq.n	8020db0 <TIM_Base_SetConfig+0xf8>
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	4a17      	ldr	r2, [pc, #92]	@ (8020df8 <TIM_Base_SetConfig+0x140>)
 8020d9c:	4293      	cmp	r3, r2
 8020d9e:	d007      	beq.n	8020db0 <TIM_Base_SetConfig+0xf8>
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	4a16      	ldr	r2, [pc, #88]	@ (8020dfc <TIM_Base_SetConfig+0x144>)
 8020da4:	4293      	cmp	r3, r2
 8020da6:	d003      	beq.n	8020db0 <TIM_Base_SetConfig+0xf8>
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	4a15      	ldr	r2, [pc, #84]	@ (8020e00 <TIM_Base_SetConfig+0x148>)
 8020dac:	4293      	cmp	r3, r2
 8020dae:	d103      	bne.n	8020db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020db0:	683b      	ldr	r3, [r7, #0]
 8020db2:	691a      	ldr	r2, [r3, #16]
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	2201      	movs	r2, #1
 8020dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	691b      	ldr	r3, [r3, #16]
 8020dc2:	f003 0301 	and.w	r3, r3, #1
 8020dc6:	2b01      	cmp	r3, #1
 8020dc8:	d105      	bne.n	8020dd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	691b      	ldr	r3, [r3, #16]
 8020dce:	f023 0201 	bic.w	r2, r3, #1
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	611a      	str	r2, [r3, #16]
  }
}
 8020dd6:	bf00      	nop
 8020dd8:	3714      	adds	r7, #20
 8020dda:	46bd      	mov	sp, r7
 8020ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de0:	4770      	bx	lr
 8020de2:	bf00      	nop
 8020de4:	40010000 	.word	0x40010000
 8020de8:	40000400 	.word	0x40000400
 8020dec:	40000800 	.word	0x40000800
 8020df0:	40000c00 	.word	0x40000c00
 8020df4:	40010400 	.word	0x40010400
 8020df8:	40014000 	.word	0x40014000
 8020dfc:	40014400 	.word	0x40014400
 8020e00:	40014800 	.word	0x40014800

08020e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020e04:	b480      	push	{r7}
 8020e06:	b087      	sub	sp, #28
 8020e08:	af00      	add	r7, sp, #0
 8020e0a:	6078      	str	r0, [r7, #4]
 8020e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	6a1b      	ldr	r3, [r3, #32]
 8020e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020e14:	687b      	ldr	r3, [r7, #4]
 8020e16:	6a1b      	ldr	r3, [r3, #32]
 8020e18:	f023 0201 	bic.w	r2, r3, #1
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	685b      	ldr	r3, [r3, #4]
 8020e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	699b      	ldr	r3, [r3, #24]
 8020e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020e2c:	68fa      	ldr	r2, [r7, #12]
 8020e2e:	4b37      	ldr	r3, [pc, #220]	@ (8020f0c <TIM_OC1_SetConfig+0x108>)
 8020e30:	4013      	ands	r3, r2
 8020e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020e34:	68fb      	ldr	r3, [r7, #12]
 8020e36:	f023 0303 	bic.w	r3, r3, #3
 8020e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020e3c:	683b      	ldr	r3, [r7, #0]
 8020e3e:	681b      	ldr	r3, [r3, #0]
 8020e40:	68fa      	ldr	r2, [r7, #12]
 8020e42:	4313      	orrs	r3, r2
 8020e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020e46:	697b      	ldr	r3, [r7, #20]
 8020e48:	f023 0302 	bic.w	r3, r3, #2
 8020e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020e4e:	683b      	ldr	r3, [r7, #0]
 8020e50:	689b      	ldr	r3, [r3, #8]
 8020e52:	697a      	ldr	r2, [r7, #20]
 8020e54:	4313      	orrs	r3, r2
 8020e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8020f10 <TIM_OC1_SetConfig+0x10c>)
 8020e5c:	4293      	cmp	r3, r2
 8020e5e:	d00f      	beq.n	8020e80 <TIM_OC1_SetConfig+0x7c>
 8020e60:	687b      	ldr	r3, [r7, #4]
 8020e62:	4a2c      	ldr	r2, [pc, #176]	@ (8020f14 <TIM_OC1_SetConfig+0x110>)
 8020e64:	4293      	cmp	r3, r2
 8020e66:	d00b      	beq.n	8020e80 <TIM_OC1_SetConfig+0x7c>
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8020f18 <TIM_OC1_SetConfig+0x114>)
 8020e6c:	4293      	cmp	r3, r2
 8020e6e:	d007      	beq.n	8020e80 <TIM_OC1_SetConfig+0x7c>
 8020e70:	687b      	ldr	r3, [r7, #4]
 8020e72:	4a2a      	ldr	r2, [pc, #168]	@ (8020f1c <TIM_OC1_SetConfig+0x118>)
 8020e74:	4293      	cmp	r3, r2
 8020e76:	d003      	beq.n	8020e80 <TIM_OC1_SetConfig+0x7c>
 8020e78:	687b      	ldr	r3, [r7, #4]
 8020e7a:	4a29      	ldr	r2, [pc, #164]	@ (8020f20 <TIM_OC1_SetConfig+0x11c>)
 8020e7c:	4293      	cmp	r3, r2
 8020e7e:	d10c      	bne.n	8020e9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020e80:	697b      	ldr	r3, [r7, #20]
 8020e82:	f023 0308 	bic.w	r3, r3, #8
 8020e86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	68db      	ldr	r3, [r3, #12]
 8020e8c:	697a      	ldr	r2, [r7, #20]
 8020e8e:	4313      	orrs	r3, r2
 8020e90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020e92:	697b      	ldr	r3, [r7, #20]
 8020e94:	f023 0304 	bic.w	r3, r3, #4
 8020e98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8020f10 <TIM_OC1_SetConfig+0x10c>)
 8020e9e:	4293      	cmp	r3, r2
 8020ea0:	d00f      	beq.n	8020ec2 <TIM_OC1_SetConfig+0xbe>
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8020f14 <TIM_OC1_SetConfig+0x110>)
 8020ea6:	4293      	cmp	r3, r2
 8020ea8:	d00b      	beq.n	8020ec2 <TIM_OC1_SetConfig+0xbe>
 8020eaa:	687b      	ldr	r3, [r7, #4]
 8020eac:	4a1a      	ldr	r2, [pc, #104]	@ (8020f18 <TIM_OC1_SetConfig+0x114>)
 8020eae:	4293      	cmp	r3, r2
 8020eb0:	d007      	beq.n	8020ec2 <TIM_OC1_SetConfig+0xbe>
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	4a19      	ldr	r2, [pc, #100]	@ (8020f1c <TIM_OC1_SetConfig+0x118>)
 8020eb6:	4293      	cmp	r3, r2
 8020eb8:	d003      	beq.n	8020ec2 <TIM_OC1_SetConfig+0xbe>
 8020eba:	687b      	ldr	r3, [r7, #4]
 8020ebc:	4a18      	ldr	r2, [pc, #96]	@ (8020f20 <TIM_OC1_SetConfig+0x11c>)
 8020ebe:	4293      	cmp	r3, r2
 8020ec0:	d111      	bne.n	8020ee6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020ec2:	693b      	ldr	r3, [r7, #16]
 8020ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020eca:	693b      	ldr	r3, [r7, #16]
 8020ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020ed2:	683b      	ldr	r3, [r7, #0]
 8020ed4:	695b      	ldr	r3, [r3, #20]
 8020ed6:	693a      	ldr	r2, [r7, #16]
 8020ed8:	4313      	orrs	r3, r2
 8020eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020edc:	683b      	ldr	r3, [r7, #0]
 8020ede:	699b      	ldr	r3, [r3, #24]
 8020ee0:	693a      	ldr	r2, [r7, #16]
 8020ee2:	4313      	orrs	r3, r2
 8020ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	693a      	ldr	r2, [r7, #16]
 8020eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	68fa      	ldr	r2, [r7, #12]
 8020ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020ef2:	683b      	ldr	r3, [r7, #0]
 8020ef4:	685a      	ldr	r2, [r3, #4]
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	697a      	ldr	r2, [r7, #20]
 8020efe:	621a      	str	r2, [r3, #32]
}
 8020f00:	bf00      	nop
 8020f02:	371c      	adds	r7, #28
 8020f04:	46bd      	mov	sp, r7
 8020f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f0a:	4770      	bx	lr
 8020f0c:	fffeff8f 	.word	0xfffeff8f
 8020f10:	40010000 	.word	0x40010000
 8020f14:	40010400 	.word	0x40010400
 8020f18:	40014000 	.word	0x40014000
 8020f1c:	40014400 	.word	0x40014400
 8020f20:	40014800 	.word	0x40014800

08020f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020f24:	b480      	push	{r7}
 8020f26:	b087      	sub	sp, #28
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	6078      	str	r0, [r7, #4]
 8020f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	6a1b      	ldr	r3, [r3, #32]
 8020f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020f34:	687b      	ldr	r3, [r7, #4]
 8020f36:	6a1b      	ldr	r3, [r3, #32]
 8020f38:	f023 0210 	bic.w	r2, r3, #16
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	685b      	ldr	r3, [r3, #4]
 8020f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020f46:	687b      	ldr	r3, [r7, #4]
 8020f48:	699b      	ldr	r3, [r3, #24]
 8020f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020f4c:	68fa      	ldr	r2, [r7, #12]
 8020f4e:	4b34      	ldr	r3, [pc, #208]	@ (8021020 <TIM_OC2_SetConfig+0xfc>)
 8020f50:	4013      	ands	r3, r2
 8020f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020f5c:	683b      	ldr	r3, [r7, #0]
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	021b      	lsls	r3, r3, #8
 8020f62:	68fa      	ldr	r2, [r7, #12]
 8020f64:	4313      	orrs	r3, r2
 8020f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020f68:	697b      	ldr	r3, [r7, #20]
 8020f6a:	f023 0320 	bic.w	r3, r3, #32
 8020f6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020f70:	683b      	ldr	r3, [r7, #0]
 8020f72:	689b      	ldr	r3, [r3, #8]
 8020f74:	011b      	lsls	r3, r3, #4
 8020f76:	697a      	ldr	r2, [r7, #20]
 8020f78:	4313      	orrs	r3, r2
 8020f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	4a29      	ldr	r2, [pc, #164]	@ (8021024 <TIM_OC2_SetConfig+0x100>)
 8020f80:	4293      	cmp	r3, r2
 8020f82:	d003      	beq.n	8020f8c <TIM_OC2_SetConfig+0x68>
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	4a28      	ldr	r2, [pc, #160]	@ (8021028 <TIM_OC2_SetConfig+0x104>)
 8020f88:	4293      	cmp	r3, r2
 8020f8a:	d10d      	bne.n	8020fa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020f8c:	697b      	ldr	r3, [r7, #20]
 8020f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020f94:	683b      	ldr	r3, [r7, #0]
 8020f96:	68db      	ldr	r3, [r3, #12]
 8020f98:	011b      	lsls	r3, r3, #4
 8020f9a:	697a      	ldr	r2, [r7, #20]
 8020f9c:	4313      	orrs	r3, r2
 8020f9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020fa0:	697b      	ldr	r3, [r7, #20]
 8020fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020fa6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	4a1e      	ldr	r2, [pc, #120]	@ (8021024 <TIM_OC2_SetConfig+0x100>)
 8020fac:	4293      	cmp	r3, r2
 8020fae:	d00f      	beq.n	8020fd0 <TIM_OC2_SetConfig+0xac>
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8021028 <TIM_OC2_SetConfig+0x104>)
 8020fb4:	4293      	cmp	r3, r2
 8020fb6:	d00b      	beq.n	8020fd0 <TIM_OC2_SetConfig+0xac>
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	4a1c      	ldr	r2, [pc, #112]	@ (802102c <TIM_OC2_SetConfig+0x108>)
 8020fbc:	4293      	cmp	r3, r2
 8020fbe:	d007      	beq.n	8020fd0 <TIM_OC2_SetConfig+0xac>
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8021030 <TIM_OC2_SetConfig+0x10c>)
 8020fc4:	4293      	cmp	r3, r2
 8020fc6:	d003      	beq.n	8020fd0 <TIM_OC2_SetConfig+0xac>
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	4a1a      	ldr	r2, [pc, #104]	@ (8021034 <TIM_OC2_SetConfig+0x110>)
 8020fcc:	4293      	cmp	r3, r2
 8020fce:	d113      	bne.n	8020ff8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020fd0:	693b      	ldr	r3, [r7, #16]
 8020fd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020fd8:	693b      	ldr	r3, [r7, #16]
 8020fda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020fe0:	683b      	ldr	r3, [r7, #0]
 8020fe2:	695b      	ldr	r3, [r3, #20]
 8020fe4:	009b      	lsls	r3, r3, #2
 8020fe6:	693a      	ldr	r2, [r7, #16]
 8020fe8:	4313      	orrs	r3, r2
 8020fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020fec:	683b      	ldr	r3, [r7, #0]
 8020fee:	699b      	ldr	r3, [r3, #24]
 8020ff0:	009b      	lsls	r3, r3, #2
 8020ff2:	693a      	ldr	r2, [r7, #16]
 8020ff4:	4313      	orrs	r3, r2
 8020ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	693a      	ldr	r2, [r7, #16]
 8020ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	68fa      	ldr	r2, [r7, #12]
 8021002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8021004:	683b      	ldr	r3, [r7, #0]
 8021006:	685a      	ldr	r2, [r3, #4]
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	697a      	ldr	r2, [r7, #20]
 8021010:	621a      	str	r2, [r3, #32]
}
 8021012:	bf00      	nop
 8021014:	371c      	adds	r7, #28
 8021016:	46bd      	mov	sp, r7
 8021018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802101c:	4770      	bx	lr
 802101e:	bf00      	nop
 8021020:	feff8fff 	.word	0xfeff8fff
 8021024:	40010000 	.word	0x40010000
 8021028:	40010400 	.word	0x40010400
 802102c:	40014000 	.word	0x40014000
 8021030:	40014400 	.word	0x40014400
 8021034:	40014800 	.word	0x40014800

08021038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8021038:	b480      	push	{r7}
 802103a:	b087      	sub	sp, #28
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
 8021040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	6a1b      	ldr	r3, [r3, #32]
 8021046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	6a1b      	ldr	r3, [r3, #32]
 802104c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	685b      	ldr	r3, [r3, #4]
 8021058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	69db      	ldr	r3, [r3, #28]
 802105e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8021060:	68fa      	ldr	r2, [r7, #12]
 8021062:	4b33      	ldr	r3, [pc, #204]	@ (8021130 <TIM_OC3_SetConfig+0xf8>)
 8021064:	4013      	ands	r3, r2
 8021066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8021068:	68fb      	ldr	r3, [r7, #12]
 802106a:	f023 0303 	bic.w	r3, r3, #3
 802106e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	68fa      	ldr	r2, [r7, #12]
 8021076:	4313      	orrs	r3, r2
 8021078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802107a:	697b      	ldr	r3, [r7, #20]
 802107c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8021080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8021082:	683b      	ldr	r3, [r7, #0]
 8021084:	689b      	ldr	r3, [r3, #8]
 8021086:	021b      	lsls	r3, r3, #8
 8021088:	697a      	ldr	r2, [r7, #20]
 802108a:	4313      	orrs	r3, r2
 802108c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802108e:	687b      	ldr	r3, [r7, #4]
 8021090:	4a28      	ldr	r2, [pc, #160]	@ (8021134 <TIM_OC3_SetConfig+0xfc>)
 8021092:	4293      	cmp	r3, r2
 8021094:	d003      	beq.n	802109e <TIM_OC3_SetConfig+0x66>
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	4a27      	ldr	r2, [pc, #156]	@ (8021138 <TIM_OC3_SetConfig+0x100>)
 802109a:	4293      	cmp	r3, r2
 802109c:	d10d      	bne.n	80210ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802109e:	697b      	ldr	r3, [r7, #20]
 80210a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80210a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80210a6:	683b      	ldr	r3, [r7, #0]
 80210a8:	68db      	ldr	r3, [r3, #12]
 80210aa:	021b      	lsls	r3, r3, #8
 80210ac:	697a      	ldr	r2, [r7, #20]
 80210ae:	4313      	orrs	r3, r2
 80210b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80210b2:	697b      	ldr	r3, [r7, #20]
 80210b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80210b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80210ba:	687b      	ldr	r3, [r7, #4]
 80210bc:	4a1d      	ldr	r2, [pc, #116]	@ (8021134 <TIM_OC3_SetConfig+0xfc>)
 80210be:	4293      	cmp	r3, r2
 80210c0:	d00f      	beq.n	80210e2 <TIM_OC3_SetConfig+0xaa>
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	4a1c      	ldr	r2, [pc, #112]	@ (8021138 <TIM_OC3_SetConfig+0x100>)
 80210c6:	4293      	cmp	r3, r2
 80210c8:	d00b      	beq.n	80210e2 <TIM_OC3_SetConfig+0xaa>
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	4a1b      	ldr	r2, [pc, #108]	@ (802113c <TIM_OC3_SetConfig+0x104>)
 80210ce:	4293      	cmp	r3, r2
 80210d0:	d007      	beq.n	80210e2 <TIM_OC3_SetConfig+0xaa>
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	4a1a      	ldr	r2, [pc, #104]	@ (8021140 <TIM_OC3_SetConfig+0x108>)
 80210d6:	4293      	cmp	r3, r2
 80210d8:	d003      	beq.n	80210e2 <TIM_OC3_SetConfig+0xaa>
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	4a19      	ldr	r2, [pc, #100]	@ (8021144 <TIM_OC3_SetConfig+0x10c>)
 80210de:	4293      	cmp	r3, r2
 80210e0:	d113      	bne.n	802110a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80210e2:	693b      	ldr	r3, [r7, #16]
 80210e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80210e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80210ea:	693b      	ldr	r3, [r7, #16]
 80210ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80210f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80210f2:	683b      	ldr	r3, [r7, #0]
 80210f4:	695b      	ldr	r3, [r3, #20]
 80210f6:	011b      	lsls	r3, r3, #4
 80210f8:	693a      	ldr	r2, [r7, #16]
 80210fa:	4313      	orrs	r3, r2
 80210fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80210fe:	683b      	ldr	r3, [r7, #0]
 8021100:	699b      	ldr	r3, [r3, #24]
 8021102:	011b      	lsls	r3, r3, #4
 8021104:	693a      	ldr	r2, [r7, #16]
 8021106:	4313      	orrs	r3, r2
 8021108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802110a:	687b      	ldr	r3, [r7, #4]
 802110c:	693a      	ldr	r2, [r7, #16]
 802110e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8021110:	687b      	ldr	r3, [r7, #4]
 8021112:	68fa      	ldr	r2, [r7, #12]
 8021114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8021116:	683b      	ldr	r3, [r7, #0]
 8021118:	685a      	ldr	r2, [r3, #4]
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	697a      	ldr	r2, [r7, #20]
 8021122:	621a      	str	r2, [r3, #32]
}
 8021124:	bf00      	nop
 8021126:	371c      	adds	r7, #28
 8021128:	46bd      	mov	sp, r7
 802112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802112e:	4770      	bx	lr
 8021130:	fffeff8f 	.word	0xfffeff8f
 8021134:	40010000 	.word	0x40010000
 8021138:	40010400 	.word	0x40010400
 802113c:	40014000 	.word	0x40014000
 8021140:	40014400 	.word	0x40014400
 8021144:	40014800 	.word	0x40014800

08021148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8021148:	b480      	push	{r7}
 802114a:	b087      	sub	sp, #28
 802114c:	af00      	add	r7, sp, #0
 802114e:	6078      	str	r0, [r7, #4]
 8021150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	6a1b      	ldr	r3, [r3, #32]
 8021156:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	6a1b      	ldr	r3, [r3, #32]
 802115c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021164:	687b      	ldr	r3, [r7, #4]
 8021166:	685b      	ldr	r3, [r3, #4]
 8021168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802116a:	687b      	ldr	r3, [r7, #4]
 802116c:	69db      	ldr	r3, [r3, #28]
 802116e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8021170:	68fa      	ldr	r2, [r7, #12]
 8021172:	4b24      	ldr	r3, [pc, #144]	@ (8021204 <TIM_OC4_SetConfig+0xbc>)
 8021174:	4013      	ands	r3, r2
 8021176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8021178:	68fb      	ldr	r3, [r7, #12]
 802117a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802117e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021180:	683b      	ldr	r3, [r7, #0]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	021b      	lsls	r3, r3, #8
 8021186:	68fa      	ldr	r2, [r7, #12]
 8021188:	4313      	orrs	r3, r2
 802118a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802118c:	693b      	ldr	r3, [r7, #16]
 802118e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8021192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8021194:	683b      	ldr	r3, [r7, #0]
 8021196:	689b      	ldr	r3, [r3, #8]
 8021198:	031b      	lsls	r3, r3, #12
 802119a:	693a      	ldr	r2, [r7, #16]
 802119c:	4313      	orrs	r3, r2
 802119e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	4a19      	ldr	r2, [pc, #100]	@ (8021208 <TIM_OC4_SetConfig+0xc0>)
 80211a4:	4293      	cmp	r3, r2
 80211a6:	d00f      	beq.n	80211c8 <TIM_OC4_SetConfig+0x80>
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	4a18      	ldr	r2, [pc, #96]	@ (802120c <TIM_OC4_SetConfig+0xc4>)
 80211ac:	4293      	cmp	r3, r2
 80211ae:	d00b      	beq.n	80211c8 <TIM_OC4_SetConfig+0x80>
 80211b0:	687b      	ldr	r3, [r7, #4]
 80211b2:	4a17      	ldr	r2, [pc, #92]	@ (8021210 <TIM_OC4_SetConfig+0xc8>)
 80211b4:	4293      	cmp	r3, r2
 80211b6:	d007      	beq.n	80211c8 <TIM_OC4_SetConfig+0x80>
 80211b8:	687b      	ldr	r3, [r7, #4]
 80211ba:	4a16      	ldr	r2, [pc, #88]	@ (8021214 <TIM_OC4_SetConfig+0xcc>)
 80211bc:	4293      	cmp	r3, r2
 80211be:	d003      	beq.n	80211c8 <TIM_OC4_SetConfig+0x80>
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	4a15      	ldr	r2, [pc, #84]	@ (8021218 <TIM_OC4_SetConfig+0xd0>)
 80211c4:	4293      	cmp	r3, r2
 80211c6:	d109      	bne.n	80211dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80211c8:	697b      	ldr	r3, [r7, #20]
 80211ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80211ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80211d0:	683b      	ldr	r3, [r7, #0]
 80211d2:	695b      	ldr	r3, [r3, #20]
 80211d4:	019b      	lsls	r3, r3, #6
 80211d6:	697a      	ldr	r2, [r7, #20]
 80211d8:	4313      	orrs	r3, r2
 80211da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	697a      	ldr	r2, [r7, #20]
 80211e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	68fa      	ldr	r2, [r7, #12]
 80211e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80211e8:	683b      	ldr	r3, [r7, #0]
 80211ea:	685a      	ldr	r2, [r3, #4]
 80211ec:	687b      	ldr	r3, [r7, #4]
 80211ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	693a      	ldr	r2, [r7, #16]
 80211f4:	621a      	str	r2, [r3, #32]
}
 80211f6:	bf00      	nop
 80211f8:	371c      	adds	r7, #28
 80211fa:	46bd      	mov	sp, r7
 80211fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021200:	4770      	bx	lr
 8021202:	bf00      	nop
 8021204:	feff8fff 	.word	0xfeff8fff
 8021208:	40010000 	.word	0x40010000
 802120c:	40010400 	.word	0x40010400
 8021210:	40014000 	.word	0x40014000
 8021214:	40014400 	.word	0x40014400
 8021218:	40014800 	.word	0x40014800

0802121c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 802121c:	b480      	push	{r7}
 802121e:	b087      	sub	sp, #28
 8021220:	af00      	add	r7, sp, #0
 8021222:	6078      	str	r0, [r7, #4]
 8021224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8021226:	687b      	ldr	r3, [r7, #4]
 8021228:	6a1b      	ldr	r3, [r3, #32]
 802122a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	6a1b      	ldr	r3, [r3, #32]
 8021230:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8021234:	687b      	ldr	r3, [r7, #4]
 8021236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	685b      	ldr	r3, [r3, #4]
 802123c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8021244:	68fa      	ldr	r2, [r7, #12]
 8021246:	4b21      	ldr	r3, [pc, #132]	@ (80212cc <TIM_OC5_SetConfig+0xb0>)
 8021248:	4013      	ands	r3, r2
 802124a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802124c:	683b      	ldr	r3, [r7, #0]
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	68fa      	ldr	r2, [r7, #12]
 8021252:	4313      	orrs	r3, r2
 8021254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8021256:	693b      	ldr	r3, [r7, #16]
 8021258:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 802125c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802125e:	683b      	ldr	r3, [r7, #0]
 8021260:	689b      	ldr	r3, [r3, #8]
 8021262:	041b      	lsls	r3, r3, #16
 8021264:	693a      	ldr	r2, [r7, #16]
 8021266:	4313      	orrs	r3, r2
 8021268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	4a18      	ldr	r2, [pc, #96]	@ (80212d0 <TIM_OC5_SetConfig+0xb4>)
 802126e:	4293      	cmp	r3, r2
 8021270:	d00f      	beq.n	8021292 <TIM_OC5_SetConfig+0x76>
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	4a17      	ldr	r2, [pc, #92]	@ (80212d4 <TIM_OC5_SetConfig+0xb8>)
 8021276:	4293      	cmp	r3, r2
 8021278:	d00b      	beq.n	8021292 <TIM_OC5_SetConfig+0x76>
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	4a16      	ldr	r2, [pc, #88]	@ (80212d8 <TIM_OC5_SetConfig+0xbc>)
 802127e:	4293      	cmp	r3, r2
 8021280:	d007      	beq.n	8021292 <TIM_OC5_SetConfig+0x76>
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	4a15      	ldr	r2, [pc, #84]	@ (80212dc <TIM_OC5_SetConfig+0xc0>)
 8021286:	4293      	cmp	r3, r2
 8021288:	d003      	beq.n	8021292 <TIM_OC5_SetConfig+0x76>
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	4a14      	ldr	r2, [pc, #80]	@ (80212e0 <TIM_OC5_SetConfig+0xc4>)
 802128e:	4293      	cmp	r3, r2
 8021290:	d109      	bne.n	80212a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8021292:	697b      	ldr	r3, [r7, #20]
 8021294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802129a:	683b      	ldr	r3, [r7, #0]
 802129c:	695b      	ldr	r3, [r3, #20]
 802129e:	021b      	lsls	r3, r3, #8
 80212a0:	697a      	ldr	r2, [r7, #20]
 80212a2:	4313      	orrs	r3, r2
 80212a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	697a      	ldr	r2, [r7, #20]
 80212aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	68fa      	ldr	r2, [r7, #12]
 80212b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80212b2:	683b      	ldr	r3, [r7, #0]
 80212b4:	685a      	ldr	r2, [r3, #4]
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	693a      	ldr	r2, [r7, #16]
 80212be:	621a      	str	r2, [r3, #32]
}
 80212c0:	bf00      	nop
 80212c2:	371c      	adds	r7, #28
 80212c4:	46bd      	mov	sp, r7
 80212c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ca:	4770      	bx	lr
 80212cc:	fffeff8f 	.word	0xfffeff8f
 80212d0:	40010000 	.word	0x40010000
 80212d4:	40010400 	.word	0x40010400
 80212d8:	40014000 	.word	0x40014000
 80212dc:	40014400 	.word	0x40014400
 80212e0:	40014800 	.word	0x40014800

080212e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80212e4:	b480      	push	{r7}
 80212e6:	b087      	sub	sp, #28
 80212e8:	af00      	add	r7, sp, #0
 80212ea:	6078      	str	r0, [r7, #4]
 80212ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	6a1b      	ldr	r3, [r3, #32]
 80212f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80212f4:	687b      	ldr	r3, [r7, #4]
 80212f6:	6a1b      	ldr	r3, [r3, #32]
 80212f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	685b      	ldr	r3, [r3, #4]
 8021304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802130a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 802130c:	68fa      	ldr	r2, [r7, #12]
 802130e:	4b22      	ldr	r3, [pc, #136]	@ (8021398 <TIM_OC6_SetConfig+0xb4>)
 8021310:	4013      	ands	r3, r2
 8021312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021314:	683b      	ldr	r3, [r7, #0]
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	021b      	lsls	r3, r3, #8
 802131a:	68fa      	ldr	r2, [r7, #12]
 802131c:	4313      	orrs	r3, r2
 802131e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8021320:	693b      	ldr	r3, [r7, #16]
 8021322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8021326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8021328:	683b      	ldr	r3, [r7, #0]
 802132a:	689b      	ldr	r3, [r3, #8]
 802132c:	051b      	lsls	r3, r3, #20
 802132e:	693a      	ldr	r2, [r7, #16]
 8021330:	4313      	orrs	r3, r2
 8021332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	4a19      	ldr	r2, [pc, #100]	@ (802139c <TIM_OC6_SetConfig+0xb8>)
 8021338:	4293      	cmp	r3, r2
 802133a:	d00f      	beq.n	802135c <TIM_OC6_SetConfig+0x78>
 802133c:	687b      	ldr	r3, [r7, #4]
 802133e:	4a18      	ldr	r2, [pc, #96]	@ (80213a0 <TIM_OC6_SetConfig+0xbc>)
 8021340:	4293      	cmp	r3, r2
 8021342:	d00b      	beq.n	802135c <TIM_OC6_SetConfig+0x78>
 8021344:	687b      	ldr	r3, [r7, #4]
 8021346:	4a17      	ldr	r2, [pc, #92]	@ (80213a4 <TIM_OC6_SetConfig+0xc0>)
 8021348:	4293      	cmp	r3, r2
 802134a:	d007      	beq.n	802135c <TIM_OC6_SetConfig+0x78>
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	4a16      	ldr	r2, [pc, #88]	@ (80213a8 <TIM_OC6_SetConfig+0xc4>)
 8021350:	4293      	cmp	r3, r2
 8021352:	d003      	beq.n	802135c <TIM_OC6_SetConfig+0x78>
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	4a15      	ldr	r2, [pc, #84]	@ (80213ac <TIM_OC6_SetConfig+0xc8>)
 8021358:	4293      	cmp	r3, r2
 802135a:	d109      	bne.n	8021370 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 802135c:	697b      	ldr	r3, [r7, #20]
 802135e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8021364:	683b      	ldr	r3, [r7, #0]
 8021366:	695b      	ldr	r3, [r3, #20]
 8021368:	029b      	lsls	r3, r3, #10
 802136a:	697a      	ldr	r2, [r7, #20]
 802136c:	4313      	orrs	r3, r2
 802136e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	697a      	ldr	r2, [r7, #20]
 8021374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	68fa      	ldr	r2, [r7, #12]
 802137a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 802137c:	683b      	ldr	r3, [r7, #0]
 802137e:	685a      	ldr	r2, [r3, #4]
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	693a      	ldr	r2, [r7, #16]
 8021388:	621a      	str	r2, [r3, #32]
}
 802138a:	bf00      	nop
 802138c:	371c      	adds	r7, #28
 802138e:	46bd      	mov	sp, r7
 8021390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021394:	4770      	bx	lr
 8021396:	bf00      	nop
 8021398:	feff8fff 	.word	0xfeff8fff
 802139c:	40010000 	.word	0x40010000
 80213a0:	40010400 	.word	0x40010400
 80213a4:	40014000 	.word	0x40014000
 80213a8:	40014400 	.word	0x40014400
 80213ac:	40014800 	.word	0x40014800

080213b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80213b0:	b480      	push	{r7}
 80213b2:	b087      	sub	sp, #28
 80213b4:	af00      	add	r7, sp, #0
 80213b6:	60f8      	str	r0, [r7, #12]
 80213b8:	60b9      	str	r1, [r7, #8]
 80213ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80213bc:	68fb      	ldr	r3, [r7, #12]
 80213be:	6a1b      	ldr	r3, [r3, #32]
 80213c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80213c2:	68fb      	ldr	r3, [r7, #12]
 80213c4:	6a1b      	ldr	r3, [r3, #32]
 80213c6:	f023 0201 	bic.w	r2, r3, #1
 80213ca:	68fb      	ldr	r3, [r7, #12]
 80213cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80213ce:	68fb      	ldr	r3, [r7, #12]
 80213d0:	699b      	ldr	r3, [r3, #24]
 80213d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80213d4:	693b      	ldr	r3, [r7, #16]
 80213d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80213da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	011b      	lsls	r3, r3, #4
 80213e0:	693a      	ldr	r2, [r7, #16]
 80213e2:	4313      	orrs	r3, r2
 80213e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80213e6:	697b      	ldr	r3, [r7, #20]
 80213e8:	f023 030a 	bic.w	r3, r3, #10
 80213ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80213ee:	697a      	ldr	r2, [r7, #20]
 80213f0:	68bb      	ldr	r3, [r7, #8]
 80213f2:	4313      	orrs	r3, r2
 80213f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80213f6:	68fb      	ldr	r3, [r7, #12]
 80213f8:	693a      	ldr	r2, [r7, #16]
 80213fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80213fc:	68fb      	ldr	r3, [r7, #12]
 80213fe:	697a      	ldr	r2, [r7, #20]
 8021400:	621a      	str	r2, [r3, #32]
}
 8021402:	bf00      	nop
 8021404:	371c      	adds	r7, #28
 8021406:	46bd      	mov	sp, r7
 8021408:	f85d 7b04 	ldr.w	r7, [sp], #4
 802140c:	4770      	bx	lr

0802140e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802140e:	b480      	push	{r7}
 8021410:	b087      	sub	sp, #28
 8021412:	af00      	add	r7, sp, #0
 8021414:	60f8      	str	r0, [r7, #12]
 8021416:	60b9      	str	r1, [r7, #8]
 8021418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	6a1b      	ldr	r3, [r3, #32]
 802141e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	6a1b      	ldr	r3, [r3, #32]
 8021424:	f023 0210 	bic.w	r2, r3, #16
 8021428:	68fb      	ldr	r3, [r7, #12]
 802142a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802142c:	68fb      	ldr	r3, [r7, #12]
 802142e:	699b      	ldr	r3, [r3, #24]
 8021430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8021432:	693b      	ldr	r3, [r7, #16]
 8021434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8021438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	031b      	lsls	r3, r3, #12
 802143e:	693a      	ldr	r2, [r7, #16]
 8021440:	4313      	orrs	r3, r2
 8021442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 802144a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 802144c:	68bb      	ldr	r3, [r7, #8]
 802144e:	011b      	lsls	r3, r3, #4
 8021450:	697a      	ldr	r2, [r7, #20]
 8021452:	4313      	orrs	r3, r2
 8021454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021456:	68fb      	ldr	r3, [r7, #12]
 8021458:	693a      	ldr	r2, [r7, #16]
 802145a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802145c:	68fb      	ldr	r3, [r7, #12]
 802145e:	697a      	ldr	r2, [r7, #20]
 8021460:	621a      	str	r2, [r3, #32]
}
 8021462:	bf00      	nop
 8021464:	371c      	adds	r7, #28
 8021466:	46bd      	mov	sp, r7
 8021468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802146c:	4770      	bx	lr
	...

08021470 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8021470:	b480      	push	{r7}
 8021472:	b085      	sub	sp, #20
 8021474:	af00      	add	r7, sp, #0
 8021476:	6078      	str	r0, [r7, #4]
 8021478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	689b      	ldr	r3, [r3, #8]
 802147e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8021480:	68fa      	ldr	r2, [r7, #12]
 8021482:	4b09      	ldr	r3, [pc, #36]	@ (80214a8 <TIM_ITRx_SetConfig+0x38>)
 8021484:	4013      	ands	r3, r2
 8021486:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8021488:	683a      	ldr	r2, [r7, #0]
 802148a:	68fb      	ldr	r3, [r7, #12]
 802148c:	4313      	orrs	r3, r2
 802148e:	f043 0307 	orr.w	r3, r3, #7
 8021492:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	68fa      	ldr	r2, [r7, #12]
 8021498:	609a      	str	r2, [r3, #8]
}
 802149a:	bf00      	nop
 802149c:	3714      	adds	r7, #20
 802149e:	46bd      	mov	sp, r7
 80214a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214a4:	4770      	bx	lr
 80214a6:	bf00      	nop
 80214a8:	ffcfff8f 	.word	0xffcfff8f

080214ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80214ac:	b480      	push	{r7}
 80214ae:	b087      	sub	sp, #28
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	60f8      	str	r0, [r7, #12]
 80214b4:	60b9      	str	r1, [r7, #8]
 80214b6:	607a      	str	r2, [r7, #4]
 80214b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80214ba:	68fb      	ldr	r3, [r7, #12]
 80214bc:	689b      	ldr	r3, [r3, #8]
 80214be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80214c0:	697b      	ldr	r3, [r7, #20]
 80214c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80214c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80214c8:	683b      	ldr	r3, [r7, #0]
 80214ca:	021a      	lsls	r2, r3, #8
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	431a      	orrs	r2, r3
 80214d0:	68bb      	ldr	r3, [r7, #8]
 80214d2:	4313      	orrs	r3, r2
 80214d4:	697a      	ldr	r2, [r7, #20]
 80214d6:	4313      	orrs	r3, r2
 80214d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80214da:	68fb      	ldr	r3, [r7, #12]
 80214dc:	697a      	ldr	r2, [r7, #20]
 80214de:	609a      	str	r2, [r3, #8]
}
 80214e0:	bf00      	nop
 80214e2:	371c      	adds	r7, #28
 80214e4:	46bd      	mov	sp, r7
 80214e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ea:	4770      	bx	lr

080214ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80214ec:	b480      	push	{r7}
 80214ee:	b085      	sub	sp, #20
 80214f0:	af00      	add	r7, sp, #0
 80214f2:	6078      	str	r0, [r7, #4]
 80214f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80214fc:	2b01      	cmp	r3, #1
 80214fe:	d101      	bne.n	8021504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8021500:	2302      	movs	r3, #2
 8021502:	e06d      	b.n	80215e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	2201      	movs	r2, #1
 8021508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	2202      	movs	r2, #2
 8021510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	681b      	ldr	r3, [r3, #0]
 8021518:	685b      	ldr	r3, [r3, #4]
 802151a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	689b      	ldr	r3, [r3, #8]
 8021522:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	681b      	ldr	r3, [r3, #0]
 8021528:	4a30      	ldr	r2, [pc, #192]	@ (80215ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802152a:	4293      	cmp	r3, r2
 802152c:	d004      	beq.n	8021538 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	4a2f      	ldr	r2, [pc, #188]	@ (80215f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021534:	4293      	cmp	r3, r2
 8021536:	d108      	bne.n	802154a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8021538:	68fb      	ldr	r3, [r7, #12]
 802153a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 802153e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8021540:	683b      	ldr	r3, [r7, #0]
 8021542:	685b      	ldr	r3, [r3, #4]
 8021544:	68fa      	ldr	r2, [r7, #12]
 8021546:	4313      	orrs	r3, r2
 8021548:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802154a:	68fb      	ldr	r3, [r7, #12]
 802154c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8021550:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8021552:	683b      	ldr	r3, [r7, #0]
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	68fa      	ldr	r2, [r7, #12]
 8021558:	4313      	orrs	r3, r2
 802155a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	681b      	ldr	r3, [r3, #0]
 8021560:	68fa      	ldr	r2, [r7, #12]
 8021562:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021564:	687b      	ldr	r3, [r7, #4]
 8021566:	681b      	ldr	r3, [r3, #0]
 8021568:	4a20      	ldr	r2, [pc, #128]	@ (80215ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 802156a:	4293      	cmp	r3, r2
 802156c:	d022      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	681b      	ldr	r3, [r3, #0]
 8021572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021576:	d01d      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	681b      	ldr	r3, [r3, #0]
 802157c:	4a1d      	ldr	r2, [pc, #116]	@ (80215f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 802157e:	4293      	cmp	r3, r2
 8021580:	d018      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021582:	687b      	ldr	r3, [r7, #4]
 8021584:	681b      	ldr	r3, [r3, #0]
 8021586:	4a1c      	ldr	r2, [pc, #112]	@ (80215f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8021588:	4293      	cmp	r3, r2
 802158a:	d013      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	4a1a      	ldr	r2, [pc, #104]	@ (80215fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8021592:	4293      	cmp	r3, r2
 8021594:	d00e      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	681b      	ldr	r3, [r3, #0]
 802159a:	4a15      	ldr	r2, [pc, #84]	@ (80215f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802159c:	4293      	cmp	r3, r2
 802159e:	d009      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	681b      	ldr	r3, [r3, #0]
 80215a4:	4a16      	ldr	r2, [pc, #88]	@ (8021600 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80215a6:	4293      	cmp	r3, r2
 80215a8:	d004      	beq.n	80215b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	681b      	ldr	r3, [r3, #0]
 80215ae:	4a15      	ldr	r2, [pc, #84]	@ (8021604 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80215b0:	4293      	cmp	r3, r2
 80215b2:	d10c      	bne.n	80215ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80215b4:	68bb      	ldr	r3, [r7, #8]
 80215b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80215ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80215bc:	683b      	ldr	r3, [r7, #0]
 80215be:	689b      	ldr	r3, [r3, #8]
 80215c0:	68ba      	ldr	r2, [r7, #8]
 80215c2:	4313      	orrs	r3, r2
 80215c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80215c6:	687b      	ldr	r3, [r7, #4]
 80215c8:	681b      	ldr	r3, [r3, #0]
 80215ca:	68ba      	ldr	r2, [r7, #8]
 80215cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	2201      	movs	r2, #1
 80215d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	2200      	movs	r2, #0
 80215da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80215de:	2300      	movs	r3, #0
}
 80215e0:	4618      	mov	r0, r3
 80215e2:	3714      	adds	r7, #20
 80215e4:	46bd      	mov	sp, r7
 80215e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ea:	4770      	bx	lr
 80215ec:	40010000 	.word	0x40010000
 80215f0:	40010400 	.word	0x40010400
 80215f4:	40000400 	.word	0x40000400
 80215f8:	40000800 	.word	0x40000800
 80215fc:	40000c00 	.word	0x40000c00
 8021600:	40001800 	.word	0x40001800
 8021604:	40014000 	.word	0x40014000

08021608 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021608:	b580      	push	{r7, lr}
 802160a:	b082      	sub	sp, #8
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	2b00      	cmp	r3, #0
 8021614:	d101      	bne.n	802161a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021616:	2301      	movs	r3, #1
 8021618:	e042      	b.n	80216a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021620:	2b00      	cmp	r3, #0
 8021622:	d106      	bne.n	8021632 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	2200      	movs	r2, #0
 8021628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802162c:	6878      	ldr	r0, [r7, #4]
 802162e:	f7e1 fc9f 	bl	8002f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	2224      	movs	r2, #36	@ 0x24
 8021636:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	681b      	ldr	r3, [r3, #0]
 802163e:	681a      	ldr	r2, [r3, #0]
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	f022 0201 	bic.w	r2, r2, #1
 8021648:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802164a:	687b      	ldr	r3, [r7, #4]
 802164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802164e:	2b00      	cmp	r3, #0
 8021650:	d002      	beq.n	8021658 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8021652:	6878      	ldr	r0, [r7, #4]
 8021654:	f000 fd90 	bl	8022178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f000 f825 	bl	80216a8 <UART_SetConfig>
 802165e:	4603      	mov	r3, r0
 8021660:	2b01      	cmp	r3, #1
 8021662:	d101      	bne.n	8021668 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8021664:	2301      	movs	r3, #1
 8021666:	e01b      	b.n	80216a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	685a      	ldr	r2, [r3, #4]
 802166e:	687b      	ldr	r3, [r7, #4]
 8021670:	681b      	ldr	r3, [r3, #0]
 8021672:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8021676:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8021678:	687b      	ldr	r3, [r7, #4]
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	689a      	ldr	r2, [r3, #8]
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	681b      	ldr	r3, [r3, #0]
 8021682:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8021686:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	681b      	ldr	r3, [r3, #0]
 802168c:	681a      	ldr	r2, [r3, #0]
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	f042 0201 	orr.w	r2, r2, #1
 8021696:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8021698:	6878      	ldr	r0, [r7, #4]
 802169a:	f000 fe0f 	bl	80222bc <UART_CheckIdleState>
 802169e:	4603      	mov	r3, r0
}
 80216a0:	4618      	mov	r0, r3
 80216a2:	3708      	adds	r7, #8
 80216a4:	46bd      	mov	sp, r7
 80216a6:	bd80      	pop	{r7, pc}

080216a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80216a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80216ac:	b092      	sub	sp, #72	@ 0x48
 80216ae:	af00      	add	r7, sp, #0
 80216b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80216b2:	2300      	movs	r3, #0
 80216b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80216b8:	697b      	ldr	r3, [r7, #20]
 80216ba:	689a      	ldr	r2, [r3, #8]
 80216bc:	697b      	ldr	r3, [r7, #20]
 80216be:	691b      	ldr	r3, [r3, #16]
 80216c0:	431a      	orrs	r2, r3
 80216c2:	697b      	ldr	r3, [r7, #20]
 80216c4:	695b      	ldr	r3, [r3, #20]
 80216c6:	431a      	orrs	r2, r3
 80216c8:	697b      	ldr	r3, [r7, #20]
 80216ca:	69db      	ldr	r3, [r3, #28]
 80216cc:	4313      	orrs	r3, r2
 80216ce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80216d0:	697b      	ldr	r3, [r7, #20]
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	681a      	ldr	r2, [r3, #0]
 80216d6:	4bbe      	ldr	r3, [pc, #760]	@ (80219d0 <UART_SetConfig+0x328>)
 80216d8:	4013      	ands	r3, r2
 80216da:	697a      	ldr	r2, [r7, #20]
 80216dc:	6812      	ldr	r2, [r2, #0]
 80216de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80216e0:	430b      	orrs	r3, r1
 80216e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80216e4:	697b      	ldr	r3, [r7, #20]
 80216e6:	681b      	ldr	r3, [r3, #0]
 80216e8:	685b      	ldr	r3, [r3, #4]
 80216ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80216ee:	697b      	ldr	r3, [r7, #20]
 80216f0:	68da      	ldr	r2, [r3, #12]
 80216f2:	697b      	ldr	r3, [r7, #20]
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	430a      	orrs	r2, r1
 80216f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80216fa:	697b      	ldr	r3, [r7, #20]
 80216fc:	699b      	ldr	r3, [r3, #24]
 80216fe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8021700:	697b      	ldr	r3, [r7, #20]
 8021702:	681b      	ldr	r3, [r3, #0]
 8021704:	4ab3      	ldr	r2, [pc, #716]	@ (80219d4 <UART_SetConfig+0x32c>)
 8021706:	4293      	cmp	r3, r2
 8021708:	d004      	beq.n	8021714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802170a:	697b      	ldr	r3, [r7, #20]
 802170c:	6a1b      	ldr	r3, [r3, #32]
 802170e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021710:	4313      	orrs	r3, r2
 8021712:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021714:	697b      	ldr	r3, [r7, #20]
 8021716:	681b      	ldr	r3, [r3, #0]
 8021718:	689a      	ldr	r2, [r3, #8]
 802171a:	4baf      	ldr	r3, [pc, #700]	@ (80219d8 <UART_SetConfig+0x330>)
 802171c:	4013      	ands	r3, r2
 802171e:	697a      	ldr	r2, [r7, #20]
 8021720:	6812      	ldr	r2, [r2, #0]
 8021722:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8021724:	430b      	orrs	r3, r1
 8021726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021728:	697b      	ldr	r3, [r7, #20]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802172e:	f023 010f 	bic.w	r1, r3, #15
 8021732:	697b      	ldr	r3, [r7, #20]
 8021734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021736:	697b      	ldr	r3, [r7, #20]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	430a      	orrs	r2, r1
 802173c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802173e:	697b      	ldr	r3, [r7, #20]
 8021740:	681b      	ldr	r3, [r3, #0]
 8021742:	4aa6      	ldr	r2, [pc, #664]	@ (80219dc <UART_SetConfig+0x334>)
 8021744:	4293      	cmp	r3, r2
 8021746:	d177      	bne.n	8021838 <UART_SetConfig+0x190>
 8021748:	4ba5      	ldr	r3, [pc, #660]	@ (80219e0 <UART_SetConfig+0x338>)
 802174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802174c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021750:	2b28      	cmp	r3, #40	@ 0x28
 8021752:	d86d      	bhi.n	8021830 <UART_SetConfig+0x188>
 8021754:	a201      	add	r2, pc, #4	@ (adr r2, 802175c <UART_SetConfig+0xb4>)
 8021756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802175a:	bf00      	nop
 802175c:	08021801 	.word	0x08021801
 8021760:	08021831 	.word	0x08021831
 8021764:	08021831 	.word	0x08021831
 8021768:	08021831 	.word	0x08021831
 802176c:	08021831 	.word	0x08021831
 8021770:	08021831 	.word	0x08021831
 8021774:	08021831 	.word	0x08021831
 8021778:	08021831 	.word	0x08021831
 802177c:	08021809 	.word	0x08021809
 8021780:	08021831 	.word	0x08021831
 8021784:	08021831 	.word	0x08021831
 8021788:	08021831 	.word	0x08021831
 802178c:	08021831 	.word	0x08021831
 8021790:	08021831 	.word	0x08021831
 8021794:	08021831 	.word	0x08021831
 8021798:	08021831 	.word	0x08021831
 802179c:	08021811 	.word	0x08021811
 80217a0:	08021831 	.word	0x08021831
 80217a4:	08021831 	.word	0x08021831
 80217a8:	08021831 	.word	0x08021831
 80217ac:	08021831 	.word	0x08021831
 80217b0:	08021831 	.word	0x08021831
 80217b4:	08021831 	.word	0x08021831
 80217b8:	08021831 	.word	0x08021831
 80217bc:	08021819 	.word	0x08021819
 80217c0:	08021831 	.word	0x08021831
 80217c4:	08021831 	.word	0x08021831
 80217c8:	08021831 	.word	0x08021831
 80217cc:	08021831 	.word	0x08021831
 80217d0:	08021831 	.word	0x08021831
 80217d4:	08021831 	.word	0x08021831
 80217d8:	08021831 	.word	0x08021831
 80217dc:	08021821 	.word	0x08021821
 80217e0:	08021831 	.word	0x08021831
 80217e4:	08021831 	.word	0x08021831
 80217e8:	08021831 	.word	0x08021831
 80217ec:	08021831 	.word	0x08021831
 80217f0:	08021831 	.word	0x08021831
 80217f4:	08021831 	.word	0x08021831
 80217f8:	08021831 	.word	0x08021831
 80217fc:	08021829 	.word	0x08021829
 8021800:	2301      	movs	r3, #1
 8021802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021806:	e222      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021808:	2304      	movs	r3, #4
 802180a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802180e:	e21e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021810:	2308      	movs	r3, #8
 8021812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021816:	e21a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021818:	2310      	movs	r3, #16
 802181a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802181e:	e216      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021820:	2320      	movs	r3, #32
 8021822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021826:	e212      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021828:	2340      	movs	r3, #64	@ 0x40
 802182a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802182e:	e20e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021830:	2380      	movs	r3, #128	@ 0x80
 8021832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021836:	e20a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021838:	697b      	ldr	r3, [r7, #20]
 802183a:	681b      	ldr	r3, [r3, #0]
 802183c:	4a69      	ldr	r2, [pc, #420]	@ (80219e4 <UART_SetConfig+0x33c>)
 802183e:	4293      	cmp	r3, r2
 8021840:	d130      	bne.n	80218a4 <UART_SetConfig+0x1fc>
 8021842:	4b67      	ldr	r3, [pc, #412]	@ (80219e0 <UART_SetConfig+0x338>)
 8021844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021846:	f003 0307 	and.w	r3, r3, #7
 802184a:	2b05      	cmp	r3, #5
 802184c:	d826      	bhi.n	802189c <UART_SetConfig+0x1f4>
 802184e:	a201      	add	r2, pc, #4	@ (adr r2, 8021854 <UART_SetConfig+0x1ac>)
 8021850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021854:	0802186d 	.word	0x0802186d
 8021858:	08021875 	.word	0x08021875
 802185c:	0802187d 	.word	0x0802187d
 8021860:	08021885 	.word	0x08021885
 8021864:	0802188d 	.word	0x0802188d
 8021868:	08021895 	.word	0x08021895
 802186c:	2300      	movs	r3, #0
 802186e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021872:	e1ec      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021874:	2304      	movs	r3, #4
 8021876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802187a:	e1e8      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802187c:	2308      	movs	r3, #8
 802187e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021882:	e1e4      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021884:	2310      	movs	r3, #16
 8021886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802188a:	e1e0      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802188c:	2320      	movs	r3, #32
 802188e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021892:	e1dc      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021894:	2340      	movs	r3, #64	@ 0x40
 8021896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802189a:	e1d8      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802189c:	2380      	movs	r3, #128	@ 0x80
 802189e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218a2:	e1d4      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80218a4:	697b      	ldr	r3, [r7, #20]
 80218a6:	681b      	ldr	r3, [r3, #0]
 80218a8:	4a4f      	ldr	r2, [pc, #316]	@ (80219e8 <UART_SetConfig+0x340>)
 80218aa:	4293      	cmp	r3, r2
 80218ac:	d130      	bne.n	8021910 <UART_SetConfig+0x268>
 80218ae:	4b4c      	ldr	r3, [pc, #304]	@ (80219e0 <UART_SetConfig+0x338>)
 80218b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80218b2:	f003 0307 	and.w	r3, r3, #7
 80218b6:	2b05      	cmp	r3, #5
 80218b8:	d826      	bhi.n	8021908 <UART_SetConfig+0x260>
 80218ba:	a201      	add	r2, pc, #4	@ (adr r2, 80218c0 <UART_SetConfig+0x218>)
 80218bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218c0:	080218d9 	.word	0x080218d9
 80218c4:	080218e1 	.word	0x080218e1
 80218c8:	080218e9 	.word	0x080218e9
 80218cc:	080218f1 	.word	0x080218f1
 80218d0:	080218f9 	.word	0x080218f9
 80218d4:	08021901 	.word	0x08021901
 80218d8:	2300      	movs	r3, #0
 80218da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218de:	e1b6      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80218e0:	2304      	movs	r3, #4
 80218e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218e6:	e1b2      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80218e8:	2308      	movs	r3, #8
 80218ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ee:	e1ae      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80218f0:	2310      	movs	r3, #16
 80218f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218f6:	e1aa      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80218f8:	2320      	movs	r3, #32
 80218fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218fe:	e1a6      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021900:	2340      	movs	r3, #64	@ 0x40
 8021902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021906:	e1a2      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021908:	2380      	movs	r3, #128	@ 0x80
 802190a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802190e:	e19e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021910:	697b      	ldr	r3, [r7, #20]
 8021912:	681b      	ldr	r3, [r3, #0]
 8021914:	4a35      	ldr	r2, [pc, #212]	@ (80219ec <UART_SetConfig+0x344>)
 8021916:	4293      	cmp	r3, r2
 8021918:	d130      	bne.n	802197c <UART_SetConfig+0x2d4>
 802191a:	4b31      	ldr	r3, [pc, #196]	@ (80219e0 <UART_SetConfig+0x338>)
 802191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802191e:	f003 0307 	and.w	r3, r3, #7
 8021922:	2b05      	cmp	r3, #5
 8021924:	d826      	bhi.n	8021974 <UART_SetConfig+0x2cc>
 8021926:	a201      	add	r2, pc, #4	@ (adr r2, 802192c <UART_SetConfig+0x284>)
 8021928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802192c:	08021945 	.word	0x08021945
 8021930:	0802194d 	.word	0x0802194d
 8021934:	08021955 	.word	0x08021955
 8021938:	0802195d 	.word	0x0802195d
 802193c:	08021965 	.word	0x08021965
 8021940:	0802196d 	.word	0x0802196d
 8021944:	2300      	movs	r3, #0
 8021946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802194a:	e180      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802194c:	2304      	movs	r3, #4
 802194e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021952:	e17c      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021954:	2308      	movs	r3, #8
 8021956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802195a:	e178      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802195c:	2310      	movs	r3, #16
 802195e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021962:	e174      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021964:	2320      	movs	r3, #32
 8021966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802196a:	e170      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802196c:	2340      	movs	r3, #64	@ 0x40
 802196e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021972:	e16c      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021974:	2380      	movs	r3, #128	@ 0x80
 8021976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802197a:	e168      	b.n	8021c4e <UART_SetConfig+0x5a6>
 802197c:	697b      	ldr	r3, [r7, #20]
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	4a1b      	ldr	r2, [pc, #108]	@ (80219f0 <UART_SetConfig+0x348>)
 8021982:	4293      	cmp	r3, r2
 8021984:	d142      	bne.n	8021a0c <UART_SetConfig+0x364>
 8021986:	4b16      	ldr	r3, [pc, #88]	@ (80219e0 <UART_SetConfig+0x338>)
 8021988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802198a:	f003 0307 	and.w	r3, r3, #7
 802198e:	2b05      	cmp	r3, #5
 8021990:	d838      	bhi.n	8021a04 <UART_SetConfig+0x35c>
 8021992:	a201      	add	r2, pc, #4	@ (adr r2, 8021998 <UART_SetConfig+0x2f0>)
 8021994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021998:	080219b1 	.word	0x080219b1
 802199c:	080219b9 	.word	0x080219b9
 80219a0:	080219c1 	.word	0x080219c1
 80219a4:	080219c9 	.word	0x080219c9
 80219a8:	080219f5 	.word	0x080219f5
 80219ac:	080219fd 	.word	0x080219fd
 80219b0:	2300      	movs	r3, #0
 80219b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219b6:	e14a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80219b8:	2304      	movs	r3, #4
 80219ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219be:	e146      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80219c0:	2308      	movs	r3, #8
 80219c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219c6:	e142      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80219c8:	2310      	movs	r3, #16
 80219ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219ce:	e13e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80219d0:	cfff69f3 	.word	0xcfff69f3
 80219d4:	58000c00 	.word	0x58000c00
 80219d8:	11fff4ff 	.word	0x11fff4ff
 80219dc:	40011000 	.word	0x40011000
 80219e0:	58024400 	.word	0x58024400
 80219e4:	40004400 	.word	0x40004400
 80219e8:	40004800 	.word	0x40004800
 80219ec:	40004c00 	.word	0x40004c00
 80219f0:	40005000 	.word	0x40005000
 80219f4:	2320      	movs	r3, #32
 80219f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80219fa:	e128      	b.n	8021c4e <UART_SetConfig+0x5a6>
 80219fc:	2340      	movs	r3, #64	@ 0x40
 80219fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021a02:	e124      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021a04:	2380      	movs	r3, #128	@ 0x80
 8021a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021a0a:	e120      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021a0c:	697b      	ldr	r3, [r7, #20]
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	4acb      	ldr	r2, [pc, #812]	@ (8021d40 <UART_SetConfig+0x698>)
 8021a12:	4293      	cmp	r3, r2
 8021a14:	d176      	bne.n	8021b04 <UART_SetConfig+0x45c>
 8021a16:	4bcb      	ldr	r3, [pc, #812]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021a1e:	2b28      	cmp	r3, #40	@ 0x28
 8021a20:	d86c      	bhi.n	8021afc <UART_SetConfig+0x454>
 8021a22:	a201      	add	r2, pc, #4	@ (adr r2, 8021a28 <UART_SetConfig+0x380>)
 8021a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021a28:	08021acd 	.word	0x08021acd
 8021a2c:	08021afd 	.word	0x08021afd
 8021a30:	08021afd 	.word	0x08021afd
 8021a34:	08021afd 	.word	0x08021afd
 8021a38:	08021afd 	.word	0x08021afd
 8021a3c:	08021afd 	.word	0x08021afd
 8021a40:	08021afd 	.word	0x08021afd
 8021a44:	08021afd 	.word	0x08021afd
 8021a48:	08021ad5 	.word	0x08021ad5
 8021a4c:	08021afd 	.word	0x08021afd
 8021a50:	08021afd 	.word	0x08021afd
 8021a54:	08021afd 	.word	0x08021afd
 8021a58:	08021afd 	.word	0x08021afd
 8021a5c:	08021afd 	.word	0x08021afd
 8021a60:	08021afd 	.word	0x08021afd
 8021a64:	08021afd 	.word	0x08021afd
 8021a68:	08021add 	.word	0x08021add
 8021a6c:	08021afd 	.word	0x08021afd
 8021a70:	08021afd 	.word	0x08021afd
 8021a74:	08021afd 	.word	0x08021afd
 8021a78:	08021afd 	.word	0x08021afd
 8021a7c:	08021afd 	.word	0x08021afd
 8021a80:	08021afd 	.word	0x08021afd
 8021a84:	08021afd 	.word	0x08021afd
 8021a88:	08021ae5 	.word	0x08021ae5
 8021a8c:	08021afd 	.word	0x08021afd
 8021a90:	08021afd 	.word	0x08021afd
 8021a94:	08021afd 	.word	0x08021afd
 8021a98:	08021afd 	.word	0x08021afd
 8021a9c:	08021afd 	.word	0x08021afd
 8021aa0:	08021afd 	.word	0x08021afd
 8021aa4:	08021afd 	.word	0x08021afd
 8021aa8:	08021aed 	.word	0x08021aed
 8021aac:	08021afd 	.word	0x08021afd
 8021ab0:	08021afd 	.word	0x08021afd
 8021ab4:	08021afd 	.word	0x08021afd
 8021ab8:	08021afd 	.word	0x08021afd
 8021abc:	08021afd 	.word	0x08021afd
 8021ac0:	08021afd 	.word	0x08021afd
 8021ac4:	08021afd 	.word	0x08021afd
 8021ac8:	08021af5 	.word	0x08021af5
 8021acc:	2301      	movs	r3, #1
 8021ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ad2:	e0bc      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021ad4:	2304      	movs	r3, #4
 8021ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ada:	e0b8      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021adc:	2308      	movs	r3, #8
 8021ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021ae2:	e0b4      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021ae4:	2310      	movs	r3, #16
 8021ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021aea:	e0b0      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021aec:	2320      	movs	r3, #32
 8021aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021af2:	e0ac      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021af4:	2340      	movs	r3, #64	@ 0x40
 8021af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021afa:	e0a8      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021afc:	2380      	movs	r3, #128	@ 0x80
 8021afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b02:	e0a4      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b04:	697b      	ldr	r3, [r7, #20]
 8021b06:	681b      	ldr	r3, [r3, #0]
 8021b08:	4a8f      	ldr	r2, [pc, #572]	@ (8021d48 <UART_SetConfig+0x6a0>)
 8021b0a:	4293      	cmp	r3, r2
 8021b0c:	d130      	bne.n	8021b70 <UART_SetConfig+0x4c8>
 8021b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021b12:	f003 0307 	and.w	r3, r3, #7
 8021b16:	2b05      	cmp	r3, #5
 8021b18:	d826      	bhi.n	8021b68 <UART_SetConfig+0x4c0>
 8021b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8021b20 <UART_SetConfig+0x478>)
 8021b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b20:	08021b39 	.word	0x08021b39
 8021b24:	08021b41 	.word	0x08021b41
 8021b28:	08021b49 	.word	0x08021b49
 8021b2c:	08021b51 	.word	0x08021b51
 8021b30:	08021b59 	.word	0x08021b59
 8021b34:	08021b61 	.word	0x08021b61
 8021b38:	2300      	movs	r3, #0
 8021b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b3e:	e086      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b40:	2304      	movs	r3, #4
 8021b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b46:	e082      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b48:	2308      	movs	r3, #8
 8021b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b4e:	e07e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b50:	2310      	movs	r3, #16
 8021b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b56:	e07a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b58:	2320      	movs	r3, #32
 8021b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b5e:	e076      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b60:	2340      	movs	r3, #64	@ 0x40
 8021b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b66:	e072      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b68:	2380      	movs	r3, #128	@ 0x80
 8021b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021b6e:	e06e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021b70:	697b      	ldr	r3, [r7, #20]
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	4a75      	ldr	r2, [pc, #468]	@ (8021d4c <UART_SetConfig+0x6a4>)
 8021b76:	4293      	cmp	r3, r2
 8021b78:	d130      	bne.n	8021bdc <UART_SetConfig+0x534>
 8021b7a:	4b72      	ldr	r3, [pc, #456]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021b7e:	f003 0307 	and.w	r3, r3, #7
 8021b82:	2b05      	cmp	r3, #5
 8021b84:	d826      	bhi.n	8021bd4 <UART_SetConfig+0x52c>
 8021b86:	a201      	add	r2, pc, #4	@ (adr r2, 8021b8c <UART_SetConfig+0x4e4>)
 8021b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b8c:	08021ba5 	.word	0x08021ba5
 8021b90:	08021bad 	.word	0x08021bad
 8021b94:	08021bb5 	.word	0x08021bb5
 8021b98:	08021bbd 	.word	0x08021bbd
 8021b9c:	08021bc5 	.word	0x08021bc5
 8021ba0:	08021bcd 	.word	0x08021bcd
 8021ba4:	2300      	movs	r3, #0
 8021ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021baa:	e050      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bac:	2304      	movs	r3, #4
 8021bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bb2:	e04c      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bb4:	2308      	movs	r3, #8
 8021bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bba:	e048      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bbc:	2310      	movs	r3, #16
 8021bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bc2:	e044      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bc4:	2320      	movs	r3, #32
 8021bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bca:	e040      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bcc:	2340      	movs	r3, #64	@ 0x40
 8021bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bd2:	e03c      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bd4:	2380      	movs	r3, #128	@ 0x80
 8021bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021bda:	e038      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021bdc:	697b      	ldr	r3, [r7, #20]
 8021bde:	681b      	ldr	r3, [r3, #0]
 8021be0:	4a5b      	ldr	r2, [pc, #364]	@ (8021d50 <UART_SetConfig+0x6a8>)
 8021be2:	4293      	cmp	r3, r2
 8021be4:	d130      	bne.n	8021c48 <UART_SetConfig+0x5a0>
 8021be6:	4b57      	ldr	r3, [pc, #348]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021bea:	f003 0307 	and.w	r3, r3, #7
 8021bee:	2b05      	cmp	r3, #5
 8021bf0:	d826      	bhi.n	8021c40 <UART_SetConfig+0x598>
 8021bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8021bf8 <UART_SetConfig+0x550>)
 8021bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021bf8:	08021c11 	.word	0x08021c11
 8021bfc:	08021c19 	.word	0x08021c19
 8021c00:	08021c21 	.word	0x08021c21
 8021c04:	08021c29 	.word	0x08021c29
 8021c08:	08021c31 	.word	0x08021c31
 8021c0c:	08021c39 	.word	0x08021c39
 8021c10:	2302      	movs	r3, #2
 8021c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c16:	e01a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c18:	2304      	movs	r3, #4
 8021c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c1e:	e016      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c20:	2308      	movs	r3, #8
 8021c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c26:	e012      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c28:	2310      	movs	r3, #16
 8021c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c2e:	e00e      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c30:	2320      	movs	r3, #32
 8021c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c36:	e00a      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c38:	2340      	movs	r3, #64	@ 0x40
 8021c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c3e:	e006      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c40:	2380      	movs	r3, #128	@ 0x80
 8021c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021c46:	e002      	b.n	8021c4e <UART_SetConfig+0x5a6>
 8021c48:	2380      	movs	r3, #128	@ 0x80
 8021c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8021c4e:	697b      	ldr	r3, [r7, #20]
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	4a3f      	ldr	r2, [pc, #252]	@ (8021d50 <UART_SetConfig+0x6a8>)
 8021c54:	4293      	cmp	r3, r2
 8021c56:	f040 80f8 	bne.w	8021e4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021c5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021c5e:	2b20      	cmp	r3, #32
 8021c60:	dc46      	bgt.n	8021cf0 <UART_SetConfig+0x648>
 8021c62:	2b02      	cmp	r3, #2
 8021c64:	f2c0 8082 	blt.w	8021d6c <UART_SetConfig+0x6c4>
 8021c68:	3b02      	subs	r3, #2
 8021c6a:	2b1e      	cmp	r3, #30
 8021c6c:	d87e      	bhi.n	8021d6c <UART_SetConfig+0x6c4>
 8021c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8021c74 <UART_SetConfig+0x5cc>)
 8021c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021c74:	08021cf7 	.word	0x08021cf7
 8021c78:	08021d6d 	.word	0x08021d6d
 8021c7c:	08021cff 	.word	0x08021cff
 8021c80:	08021d6d 	.word	0x08021d6d
 8021c84:	08021d6d 	.word	0x08021d6d
 8021c88:	08021d6d 	.word	0x08021d6d
 8021c8c:	08021d0f 	.word	0x08021d0f
 8021c90:	08021d6d 	.word	0x08021d6d
 8021c94:	08021d6d 	.word	0x08021d6d
 8021c98:	08021d6d 	.word	0x08021d6d
 8021c9c:	08021d6d 	.word	0x08021d6d
 8021ca0:	08021d6d 	.word	0x08021d6d
 8021ca4:	08021d6d 	.word	0x08021d6d
 8021ca8:	08021d6d 	.word	0x08021d6d
 8021cac:	08021d1f 	.word	0x08021d1f
 8021cb0:	08021d6d 	.word	0x08021d6d
 8021cb4:	08021d6d 	.word	0x08021d6d
 8021cb8:	08021d6d 	.word	0x08021d6d
 8021cbc:	08021d6d 	.word	0x08021d6d
 8021cc0:	08021d6d 	.word	0x08021d6d
 8021cc4:	08021d6d 	.word	0x08021d6d
 8021cc8:	08021d6d 	.word	0x08021d6d
 8021ccc:	08021d6d 	.word	0x08021d6d
 8021cd0:	08021d6d 	.word	0x08021d6d
 8021cd4:	08021d6d 	.word	0x08021d6d
 8021cd8:	08021d6d 	.word	0x08021d6d
 8021cdc:	08021d6d 	.word	0x08021d6d
 8021ce0:	08021d6d 	.word	0x08021d6d
 8021ce4:	08021d6d 	.word	0x08021d6d
 8021ce8:	08021d6d 	.word	0x08021d6d
 8021cec:	08021d5f 	.word	0x08021d5f
 8021cf0:	2b40      	cmp	r3, #64	@ 0x40
 8021cf2:	d037      	beq.n	8021d64 <UART_SetConfig+0x6bc>
 8021cf4:	e03a      	b.n	8021d6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021cf6:	f7fd fc25 	bl	801f544 <HAL_RCCEx_GetD3PCLK1Freq>
 8021cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021cfc:	e03c      	b.n	8021d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021d02:	4618      	mov	r0, r3
 8021d04:	f7fd fc34 	bl	801f570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d0c:	e034      	b.n	8021d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021d0e:	f107 0318 	add.w	r3, r7, #24
 8021d12:	4618      	mov	r0, r3
 8021d14:	f7fd fd80 	bl	801f818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021d18:	69fb      	ldr	r3, [r7, #28]
 8021d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d1c:	e02c      	b.n	8021d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021d1e:	4b09      	ldr	r3, [pc, #36]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	f003 0320 	and.w	r3, r3, #32
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d016      	beq.n	8021d58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021d2a:	4b06      	ldr	r3, [pc, #24]	@ (8021d44 <UART_SetConfig+0x69c>)
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	08db      	lsrs	r3, r3, #3
 8021d30:	f003 0303 	and.w	r3, r3, #3
 8021d34:	4a07      	ldr	r2, [pc, #28]	@ (8021d54 <UART_SetConfig+0x6ac>)
 8021d36:	fa22 f303 	lsr.w	r3, r2, r3
 8021d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021d3c:	e01c      	b.n	8021d78 <UART_SetConfig+0x6d0>
 8021d3e:	bf00      	nop
 8021d40:	40011400 	.word	0x40011400
 8021d44:	58024400 	.word	0x58024400
 8021d48:	40007800 	.word	0x40007800
 8021d4c:	40007c00 	.word	0x40007c00
 8021d50:	58000c00 	.word	0x58000c00
 8021d54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021d58:	4b9d      	ldr	r3, [pc, #628]	@ (8021fd0 <UART_SetConfig+0x928>)
 8021d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d5c:	e00c      	b.n	8021d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021d5e:	4b9d      	ldr	r3, [pc, #628]	@ (8021fd4 <UART_SetConfig+0x92c>)
 8021d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d62:	e009      	b.n	8021d78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021d6a:	e005      	b.n	8021d78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8021d6c:	2300      	movs	r3, #0
 8021d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021d70:	2301      	movs	r3, #1
 8021d72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021d76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d7a:	2b00      	cmp	r3, #0
 8021d7c:	f000 81de 	beq.w	802213c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021d80:	697b      	ldr	r3, [r7, #20]
 8021d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021d84:	4a94      	ldr	r2, [pc, #592]	@ (8021fd8 <UART_SetConfig+0x930>)
 8021d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021d8a:	461a      	mov	r2, r3
 8021d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8021d92:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021d94:	697b      	ldr	r3, [r7, #20]
 8021d96:	685a      	ldr	r2, [r3, #4]
 8021d98:	4613      	mov	r3, r2
 8021d9a:	005b      	lsls	r3, r3, #1
 8021d9c:	4413      	add	r3, r2
 8021d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d305      	bcc.n	8021db0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021da4:	697b      	ldr	r3, [r7, #20]
 8021da6:	685b      	ldr	r3, [r3, #4]
 8021da8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021daa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021dac:	429a      	cmp	r2, r3
 8021dae:	d903      	bls.n	8021db8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8021db0:	2301      	movs	r3, #1
 8021db2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021db6:	e1c1      	b.n	802213c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021dba:	2200      	movs	r2, #0
 8021dbc:	60bb      	str	r3, [r7, #8]
 8021dbe:	60fa      	str	r2, [r7, #12]
 8021dc0:	697b      	ldr	r3, [r7, #20]
 8021dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021dc4:	4a84      	ldr	r2, [pc, #528]	@ (8021fd8 <UART_SetConfig+0x930>)
 8021dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021dca:	b29b      	uxth	r3, r3
 8021dcc:	2200      	movs	r2, #0
 8021dce:	603b      	str	r3, [r7, #0]
 8021dd0:	607a      	str	r2, [r7, #4]
 8021dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021dda:	f7de fae9 	bl	80003b0 <__aeabi_uldivmod>
 8021dde:	4602      	mov	r2, r0
 8021de0:	460b      	mov	r3, r1
 8021de2:	4610      	mov	r0, r2
 8021de4:	4619      	mov	r1, r3
 8021de6:	f04f 0200 	mov.w	r2, #0
 8021dea:	f04f 0300 	mov.w	r3, #0
 8021dee:	020b      	lsls	r3, r1, #8
 8021df0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021df4:	0202      	lsls	r2, r0, #8
 8021df6:	6979      	ldr	r1, [r7, #20]
 8021df8:	6849      	ldr	r1, [r1, #4]
 8021dfa:	0849      	lsrs	r1, r1, #1
 8021dfc:	2000      	movs	r0, #0
 8021dfe:	460c      	mov	r4, r1
 8021e00:	4605      	mov	r5, r0
 8021e02:	eb12 0804 	adds.w	r8, r2, r4
 8021e06:	eb43 0905 	adc.w	r9, r3, r5
 8021e0a:	697b      	ldr	r3, [r7, #20]
 8021e0c:	685b      	ldr	r3, [r3, #4]
 8021e0e:	2200      	movs	r2, #0
 8021e10:	469a      	mov	sl, r3
 8021e12:	4693      	mov	fp, r2
 8021e14:	4652      	mov	r2, sl
 8021e16:	465b      	mov	r3, fp
 8021e18:	4640      	mov	r0, r8
 8021e1a:	4649      	mov	r1, r9
 8021e1c:	f7de fac8 	bl	80003b0 <__aeabi_uldivmod>
 8021e20:	4602      	mov	r2, r0
 8021e22:	460b      	mov	r3, r1
 8021e24:	4613      	mov	r3, r2
 8021e26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8021e2e:	d308      	bcc.n	8021e42 <UART_SetConfig+0x79a>
 8021e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021e36:	d204      	bcs.n	8021e42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021e38:	697b      	ldr	r3, [r7, #20]
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021e3e:	60da      	str	r2, [r3, #12]
 8021e40:	e17c      	b.n	802213c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021e42:	2301      	movs	r3, #1
 8021e44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021e48:	e178      	b.n	802213c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021e4a:	697b      	ldr	r3, [r7, #20]
 8021e4c:	69db      	ldr	r3, [r3, #28]
 8021e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021e52:	f040 80c5 	bne.w	8021fe0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021e56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021e5a:	2b20      	cmp	r3, #32
 8021e5c:	dc48      	bgt.n	8021ef0 <UART_SetConfig+0x848>
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	db7b      	blt.n	8021f5a <UART_SetConfig+0x8b2>
 8021e62:	2b20      	cmp	r3, #32
 8021e64:	d879      	bhi.n	8021f5a <UART_SetConfig+0x8b2>
 8021e66:	a201      	add	r2, pc, #4	@ (adr r2, 8021e6c <UART_SetConfig+0x7c4>)
 8021e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021e6c:	08021ef7 	.word	0x08021ef7
 8021e70:	08021eff 	.word	0x08021eff
 8021e74:	08021f5b 	.word	0x08021f5b
 8021e78:	08021f5b 	.word	0x08021f5b
 8021e7c:	08021f07 	.word	0x08021f07
 8021e80:	08021f5b 	.word	0x08021f5b
 8021e84:	08021f5b 	.word	0x08021f5b
 8021e88:	08021f5b 	.word	0x08021f5b
 8021e8c:	08021f17 	.word	0x08021f17
 8021e90:	08021f5b 	.word	0x08021f5b
 8021e94:	08021f5b 	.word	0x08021f5b
 8021e98:	08021f5b 	.word	0x08021f5b
 8021e9c:	08021f5b 	.word	0x08021f5b
 8021ea0:	08021f5b 	.word	0x08021f5b
 8021ea4:	08021f5b 	.word	0x08021f5b
 8021ea8:	08021f5b 	.word	0x08021f5b
 8021eac:	08021f27 	.word	0x08021f27
 8021eb0:	08021f5b 	.word	0x08021f5b
 8021eb4:	08021f5b 	.word	0x08021f5b
 8021eb8:	08021f5b 	.word	0x08021f5b
 8021ebc:	08021f5b 	.word	0x08021f5b
 8021ec0:	08021f5b 	.word	0x08021f5b
 8021ec4:	08021f5b 	.word	0x08021f5b
 8021ec8:	08021f5b 	.word	0x08021f5b
 8021ecc:	08021f5b 	.word	0x08021f5b
 8021ed0:	08021f5b 	.word	0x08021f5b
 8021ed4:	08021f5b 	.word	0x08021f5b
 8021ed8:	08021f5b 	.word	0x08021f5b
 8021edc:	08021f5b 	.word	0x08021f5b
 8021ee0:	08021f5b 	.word	0x08021f5b
 8021ee4:	08021f5b 	.word	0x08021f5b
 8021ee8:	08021f5b 	.word	0x08021f5b
 8021eec:	08021f4d 	.word	0x08021f4d
 8021ef0:	2b40      	cmp	r3, #64	@ 0x40
 8021ef2:	d02e      	beq.n	8021f52 <UART_SetConfig+0x8aa>
 8021ef4:	e031      	b.n	8021f5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021ef6:	f7fc f8ef 	bl	801e0d8 <HAL_RCC_GetPCLK1Freq>
 8021efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021efc:	e033      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021efe:	f7fc f901 	bl	801e104 <HAL_RCC_GetPCLK2Freq>
 8021f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021f04:	e02f      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021f0a:	4618      	mov	r0, r3
 8021f0c:	f7fd fb30 	bl	801f570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021f14:	e027      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021f16:	f107 0318 	add.w	r3, r7, #24
 8021f1a:	4618      	mov	r0, r3
 8021f1c:	f7fd fc7c 	bl	801f818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021f20:	69fb      	ldr	r3, [r7, #28]
 8021f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021f24:	e01f      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021f26:	4b2d      	ldr	r3, [pc, #180]	@ (8021fdc <UART_SetConfig+0x934>)
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	f003 0320 	and.w	r3, r3, #32
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d009      	beq.n	8021f46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021f32:	4b2a      	ldr	r3, [pc, #168]	@ (8021fdc <UART_SetConfig+0x934>)
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	08db      	lsrs	r3, r3, #3
 8021f38:	f003 0303 	and.w	r3, r3, #3
 8021f3c:	4a24      	ldr	r2, [pc, #144]	@ (8021fd0 <UART_SetConfig+0x928>)
 8021f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8021f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021f44:	e00f      	b.n	8021f66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021f46:	4b22      	ldr	r3, [pc, #136]	@ (8021fd0 <UART_SetConfig+0x928>)
 8021f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021f4a:	e00c      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021f4c:	4b21      	ldr	r3, [pc, #132]	@ (8021fd4 <UART_SetConfig+0x92c>)
 8021f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021f50:	e009      	b.n	8021f66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021f58:	e005      	b.n	8021f66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8021f5a:	2300      	movs	r3, #0
 8021f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021f5e:	2301      	movs	r3, #1
 8021f60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	f000 80e7 	beq.w	802213c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021f6e:	697b      	ldr	r3, [r7, #20]
 8021f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021f72:	4a19      	ldr	r2, [pc, #100]	@ (8021fd8 <UART_SetConfig+0x930>)
 8021f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021f78:	461a      	mov	r2, r3
 8021f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021f80:	005a      	lsls	r2, r3, #1
 8021f82:	697b      	ldr	r3, [r7, #20]
 8021f84:	685b      	ldr	r3, [r3, #4]
 8021f86:	085b      	lsrs	r3, r3, #1
 8021f88:	441a      	add	r2, r3
 8021f8a:	697b      	ldr	r3, [r7, #20]
 8021f8c:	685b      	ldr	r3, [r3, #4]
 8021f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021f96:	2b0f      	cmp	r3, #15
 8021f98:	d916      	bls.n	8021fc8 <UART_SetConfig+0x920>
 8021f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021fa0:	d212      	bcs.n	8021fc8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021fa4:	b29b      	uxth	r3, r3
 8021fa6:	f023 030f 	bic.w	r3, r3, #15
 8021faa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021fae:	085b      	lsrs	r3, r3, #1
 8021fb0:	b29b      	uxth	r3, r3
 8021fb2:	f003 0307 	and.w	r3, r3, #7
 8021fb6:	b29a      	uxth	r2, r3
 8021fb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021fba:	4313      	orrs	r3, r2
 8021fbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8021fbe:	697b      	ldr	r3, [r7, #20]
 8021fc0:	681b      	ldr	r3, [r3, #0]
 8021fc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021fc4:	60da      	str	r2, [r3, #12]
 8021fc6:	e0b9      	b.n	802213c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021fc8:	2301      	movs	r3, #1
 8021fca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021fce:	e0b5      	b.n	802213c <UART_SetConfig+0xa94>
 8021fd0:	03d09000 	.word	0x03d09000
 8021fd4:	003d0900 	.word	0x003d0900
 8021fd8:	08028338 	.word	0x08028338
 8021fdc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021fe0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021fe4:	2b20      	cmp	r3, #32
 8021fe6:	dc49      	bgt.n	802207c <UART_SetConfig+0x9d4>
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	db7c      	blt.n	80220e6 <UART_SetConfig+0xa3e>
 8021fec:	2b20      	cmp	r3, #32
 8021fee:	d87a      	bhi.n	80220e6 <UART_SetConfig+0xa3e>
 8021ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8021ff8 <UART_SetConfig+0x950>)
 8021ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ff6:	bf00      	nop
 8021ff8:	08022083 	.word	0x08022083
 8021ffc:	0802208b 	.word	0x0802208b
 8022000:	080220e7 	.word	0x080220e7
 8022004:	080220e7 	.word	0x080220e7
 8022008:	08022093 	.word	0x08022093
 802200c:	080220e7 	.word	0x080220e7
 8022010:	080220e7 	.word	0x080220e7
 8022014:	080220e7 	.word	0x080220e7
 8022018:	080220a3 	.word	0x080220a3
 802201c:	080220e7 	.word	0x080220e7
 8022020:	080220e7 	.word	0x080220e7
 8022024:	080220e7 	.word	0x080220e7
 8022028:	080220e7 	.word	0x080220e7
 802202c:	080220e7 	.word	0x080220e7
 8022030:	080220e7 	.word	0x080220e7
 8022034:	080220e7 	.word	0x080220e7
 8022038:	080220b3 	.word	0x080220b3
 802203c:	080220e7 	.word	0x080220e7
 8022040:	080220e7 	.word	0x080220e7
 8022044:	080220e7 	.word	0x080220e7
 8022048:	080220e7 	.word	0x080220e7
 802204c:	080220e7 	.word	0x080220e7
 8022050:	080220e7 	.word	0x080220e7
 8022054:	080220e7 	.word	0x080220e7
 8022058:	080220e7 	.word	0x080220e7
 802205c:	080220e7 	.word	0x080220e7
 8022060:	080220e7 	.word	0x080220e7
 8022064:	080220e7 	.word	0x080220e7
 8022068:	080220e7 	.word	0x080220e7
 802206c:	080220e7 	.word	0x080220e7
 8022070:	080220e7 	.word	0x080220e7
 8022074:	080220e7 	.word	0x080220e7
 8022078:	080220d9 	.word	0x080220d9
 802207c:	2b40      	cmp	r3, #64	@ 0x40
 802207e:	d02e      	beq.n	80220de <UART_SetConfig+0xa36>
 8022080:	e031      	b.n	80220e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022082:	f7fc f829 	bl	801e0d8 <HAL_RCC_GetPCLK1Freq>
 8022086:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8022088:	e033      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802208a:	f7fc f83b 	bl	801e104 <HAL_RCC_GetPCLK2Freq>
 802208e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8022090:	e02f      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8022092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022096:	4618      	mov	r0, r3
 8022098:	f7fd fa6a 	bl	801f570 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802209e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80220a0:	e027      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80220a2:	f107 0318 	add.w	r3, r7, #24
 80220a6:	4618      	mov	r0, r3
 80220a8:	f7fd fbb6 	bl	801f818 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80220ac:	69fb      	ldr	r3, [r7, #28]
 80220ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80220b0:	e01f      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80220b2:	4b2d      	ldr	r3, [pc, #180]	@ (8022168 <UART_SetConfig+0xac0>)
 80220b4:	681b      	ldr	r3, [r3, #0]
 80220b6:	f003 0320 	and.w	r3, r3, #32
 80220ba:	2b00      	cmp	r3, #0
 80220bc:	d009      	beq.n	80220d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80220be:	4b2a      	ldr	r3, [pc, #168]	@ (8022168 <UART_SetConfig+0xac0>)
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	08db      	lsrs	r3, r3, #3
 80220c4:	f003 0303 	and.w	r3, r3, #3
 80220c8:	4a28      	ldr	r2, [pc, #160]	@ (802216c <UART_SetConfig+0xac4>)
 80220ca:	fa22 f303 	lsr.w	r3, r2, r3
 80220ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80220d0:	e00f      	b.n	80220f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80220d2:	4b26      	ldr	r3, [pc, #152]	@ (802216c <UART_SetConfig+0xac4>)
 80220d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80220d6:	e00c      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80220d8:	4b25      	ldr	r3, [pc, #148]	@ (8022170 <UART_SetConfig+0xac8>)
 80220da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80220dc:	e009      	b.n	80220f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80220de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80220e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80220e4:	e005      	b.n	80220f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80220e6:	2300      	movs	r3, #0
 80220e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80220ea:	2301      	movs	r3, #1
 80220ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80220f0:	bf00      	nop
    }

    if (pclk != 0U)
 80220f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d021      	beq.n	802213c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80220f8:	697b      	ldr	r3, [r7, #20]
 80220fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80220fc:	4a1d      	ldr	r2, [pc, #116]	@ (8022174 <UART_SetConfig+0xacc>)
 80220fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022102:	461a      	mov	r2, r3
 8022104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022106:	fbb3 f2f2 	udiv	r2, r3, r2
 802210a:	697b      	ldr	r3, [r7, #20]
 802210c:	685b      	ldr	r3, [r3, #4]
 802210e:	085b      	lsrs	r3, r3, #1
 8022110:	441a      	add	r2, r3
 8022112:	697b      	ldr	r3, [r7, #20]
 8022114:	685b      	ldr	r3, [r3, #4]
 8022116:	fbb2 f3f3 	udiv	r3, r2, r3
 802211a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802211c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802211e:	2b0f      	cmp	r3, #15
 8022120:	d909      	bls.n	8022136 <UART_SetConfig+0xa8e>
 8022122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022128:	d205      	bcs.n	8022136 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802212a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802212c:	b29a      	uxth	r2, r3
 802212e:	697b      	ldr	r3, [r7, #20]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	60da      	str	r2, [r3, #12]
 8022134:	e002      	b.n	802213c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8022136:	2301      	movs	r3, #1
 8022138:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802213c:	697b      	ldr	r3, [r7, #20]
 802213e:	2201      	movs	r2, #1
 8022140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8022144:	697b      	ldr	r3, [r7, #20]
 8022146:	2201      	movs	r2, #1
 8022148:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802214c:	697b      	ldr	r3, [r7, #20]
 802214e:	2200      	movs	r2, #0
 8022150:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8022152:	697b      	ldr	r3, [r7, #20]
 8022154:	2200      	movs	r2, #0
 8022156:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8022158:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 802215c:	4618      	mov	r0, r3
 802215e:	3748      	adds	r7, #72	@ 0x48
 8022160:	46bd      	mov	sp, r7
 8022162:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022166:	bf00      	nop
 8022168:	58024400 	.word	0x58024400
 802216c:	03d09000 	.word	0x03d09000
 8022170:	003d0900 	.word	0x003d0900
 8022174:	08028338 	.word	0x08028338

08022178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8022178:	b480      	push	{r7}
 802217a:	b083      	sub	sp, #12
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022184:	f003 0308 	and.w	r3, r3, #8
 8022188:	2b00      	cmp	r3, #0
 802218a:	d00a      	beq.n	80221a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802218c:	687b      	ldr	r3, [r7, #4]
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	685b      	ldr	r3, [r3, #4]
 8022192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802219a:	687b      	ldr	r3, [r7, #4]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	430a      	orrs	r2, r1
 80221a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221a6:	f003 0301 	and.w	r3, r3, #1
 80221aa:	2b00      	cmp	r3, #0
 80221ac:	d00a      	beq.n	80221c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80221ae:	687b      	ldr	r3, [r7, #4]
 80221b0:	681b      	ldr	r3, [r3, #0]
 80221b2:	685b      	ldr	r3, [r3, #4]
 80221b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	430a      	orrs	r2, r1
 80221c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221c8:	f003 0302 	and.w	r3, r3, #2
 80221cc:	2b00      	cmp	r3, #0
 80221ce:	d00a      	beq.n	80221e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	685b      	ldr	r3, [r3, #4]
 80221d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	430a      	orrs	r2, r1
 80221e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221ea:	f003 0304 	and.w	r3, r3, #4
 80221ee:	2b00      	cmp	r3, #0
 80221f0:	d00a      	beq.n	8022208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80221f2:	687b      	ldr	r3, [r7, #4]
 80221f4:	681b      	ldr	r3, [r3, #0]
 80221f6:	685b      	ldr	r3, [r3, #4]
 80221f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80221fc:	687b      	ldr	r3, [r7, #4]
 80221fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022200:	687b      	ldr	r3, [r7, #4]
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	430a      	orrs	r2, r1
 8022206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8022208:	687b      	ldr	r3, [r7, #4]
 802220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802220c:	f003 0310 	and.w	r3, r3, #16
 8022210:	2b00      	cmp	r3, #0
 8022212:	d00a      	beq.n	802222a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8022214:	687b      	ldr	r3, [r7, #4]
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	689b      	ldr	r3, [r3, #8]
 802221a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 802221e:	687b      	ldr	r3, [r7, #4]
 8022220:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	430a      	orrs	r2, r1
 8022228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802222e:	f003 0320 	and.w	r3, r3, #32
 8022232:	2b00      	cmp	r3, #0
 8022234:	d00a      	beq.n	802224c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8022236:	687b      	ldr	r3, [r7, #4]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	689b      	ldr	r3, [r3, #8]
 802223c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8022240:	687b      	ldr	r3, [r7, #4]
 8022242:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8022244:	687b      	ldr	r3, [r7, #4]
 8022246:	681b      	ldr	r3, [r3, #0]
 8022248:	430a      	orrs	r2, r1
 802224a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802224c:	687b      	ldr	r3, [r7, #4]
 802224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022254:	2b00      	cmp	r3, #0
 8022256:	d01a      	beq.n	802228e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8022258:	687b      	ldr	r3, [r7, #4]
 802225a:	681b      	ldr	r3, [r3, #0]
 802225c:	685b      	ldr	r3, [r3, #4]
 802225e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	430a      	orrs	r2, r1
 802226c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022276:	d10a      	bne.n	802228e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	681b      	ldr	r3, [r3, #0]
 802227c:	685b      	ldr	r3, [r3, #4]
 802227e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8022282:	687b      	ldr	r3, [r7, #4]
 8022284:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8022286:	687b      	ldr	r3, [r7, #4]
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	430a      	orrs	r2, r1
 802228c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022296:	2b00      	cmp	r3, #0
 8022298:	d00a      	beq.n	80222b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802229a:	687b      	ldr	r3, [r7, #4]
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	685b      	ldr	r3, [r3, #4]
 80222a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80222a8:	687b      	ldr	r3, [r7, #4]
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	430a      	orrs	r2, r1
 80222ae:	605a      	str	r2, [r3, #4]
  }
}
 80222b0:	bf00      	nop
 80222b2:	370c      	adds	r7, #12
 80222b4:	46bd      	mov	sp, r7
 80222b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ba:	4770      	bx	lr

080222bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b098      	sub	sp, #96	@ 0x60
 80222c0:	af02      	add	r7, sp, #8
 80222c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	2200      	movs	r2, #0
 80222c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80222cc:	f7f8 fb32 	bl	801a934 <HAL_GetTick>
 80222d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	681b      	ldr	r3, [r3, #0]
 80222d6:	681b      	ldr	r3, [r3, #0]
 80222d8:	f003 0308 	and.w	r3, r3, #8
 80222dc:	2b08      	cmp	r3, #8
 80222de:	d12f      	bne.n	8022340 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80222e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80222e4:	9300      	str	r3, [sp, #0]
 80222e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80222e8:	2200      	movs	r2, #0
 80222ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80222ee:	6878      	ldr	r0, [r7, #4]
 80222f0:	f000 f88e 	bl	8022410 <UART_WaitOnFlagUntilTimeout>
 80222f4:	4603      	mov	r3, r0
 80222f6:	2b00      	cmp	r3, #0
 80222f8:	d022      	beq.n	8022340 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80222fa:	687b      	ldr	r3, [r7, #4]
 80222fc:	681b      	ldr	r3, [r3, #0]
 80222fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022302:	e853 3f00 	ldrex	r3, [r3]
 8022306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8022308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802230a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802230e:	653b      	str	r3, [r7, #80]	@ 0x50
 8022310:	687b      	ldr	r3, [r7, #4]
 8022312:	681b      	ldr	r3, [r3, #0]
 8022314:	461a      	mov	r2, r3
 8022316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022318:	647b      	str	r3, [r7, #68]	@ 0x44
 802231a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802231c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802231e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8022320:	e841 2300 	strex	r3, r2, [r1]
 8022324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8022326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022328:	2b00      	cmp	r3, #0
 802232a:	d1e6      	bne.n	80222fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802232c:	687b      	ldr	r3, [r7, #4]
 802232e:	2220      	movs	r2, #32
 8022330:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	2200      	movs	r2, #0
 8022338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802233c:	2303      	movs	r3, #3
 802233e:	e063      	b.n	8022408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	f003 0304 	and.w	r3, r3, #4
 802234a:	2b04      	cmp	r3, #4
 802234c:	d149      	bne.n	80223e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802234e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8022352:	9300      	str	r3, [sp, #0]
 8022354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022356:	2200      	movs	r2, #0
 8022358:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802235c:	6878      	ldr	r0, [r7, #4]
 802235e:	f000 f857 	bl	8022410 <UART_WaitOnFlagUntilTimeout>
 8022362:	4603      	mov	r3, r0
 8022364:	2b00      	cmp	r3, #0
 8022366:	d03c      	beq.n	80223e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022368:	687b      	ldr	r3, [r7, #4]
 802236a:	681b      	ldr	r3, [r3, #0]
 802236c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022370:	e853 3f00 	ldrex	r3, [r3]
 8022374:	623b      	str	r3, [r7, #32]
   return(result);
 8022376:	6a3b      	ldr	r3, [r7, #32]
 8022378:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802237c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	681b      	ldr	r3, [r3, #0]
 8022382:	461a      	mov	r2, r3
 8022384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022386:	633b      	str	r3, [r7, #48]	@ 0x30
 8022388:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802238a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802238c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802238e:	e841 2300 	strex	r3, r2, [r1]
 8022392:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8022394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022396:	2b00      	cmp	r3, #0
 8022398:	d1e6      	bne.n	8022368 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802239a:	687b      	ldr	r3, [r7, #4]
 802239c:	681b      	ldr	r3, [r3, #0]
 802239e:	3308      	adds	r3, #8
 80223a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80223a2:	693b      	ldr	r3, [r7, #16]
 80223a4:	e853 3f00 	ldrex	r3, [r3]
 80223a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80223aa:	68fb      	ldr	r3, [r7, #12]
 80223ac:	f023 0301 	bic.w	r3, r3, #1
 80223b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	681b      	ldr	r3, [r3, #0]
 80223b6:	3308      	adds	r3, #8
 80223b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80223ba:	61fa      	str	r2, [r7, #28]
 80223bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80223be:	69b9      	ldr	r1, [r7, #24]
 80223c0:	69fa      	ldr	r2, [r7, #28]
 80223c2:	e841 2300 	strex	r3, r2, [r1]
 80223c6:	617b      	str	r3, [r7, #20]
   return(result);
 80223c8:	697b      	ldr	r3, [r7, #20]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	d1e5      	bne.n	802239a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	2220      	movs	r2, #32
 80223d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	2200      	movs	r2, #0
 80223da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80223de:	2303      	movs	r3, #3
 80223e0:	e012      	b.n	8022408 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	2220      	movs	r2, #32
 80223e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	2220      	movs	r2, #32
 80223ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	2200      	movs	r2, #0
 80223f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80223f8:	687b      	ldr	r3, [r7, #4]
 80223fa:	2200      	movs	r2, #0
 80223fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80223fe:	687b      	ldr	r3, [r7, #4]
 8022400:	2200      	movs	r2, #0
 8022402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022406:	2300      	movs	r3, #0
}
 8022408:	4618      	mov	r0, r3
 802240a:	3758      	adds	r7, #88	@ 0x58
 802240c:	46bd      	mov	sp, r7
 802240e:	bd80      	pop	{r7, pc}

08022410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8022410:	b580      	push	{r7, lr}
 8022412:	b084      	sub	sp, #16
 8022414:	af00      	add	r7, sp, #0
 8022416:	60f8      	str	r0, [r7, #12]
 8022418:	60b9      	str	r1, [r7, #8]
 802241a:	603b      	str	r3, [r7, #0]
 802241c:	4613      	mov	r3, r2
 802241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022420:	e04f      	b.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8022422:	69bb      	ldr	r3, [r7, #24]
 8022424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022428:	d04b      	beq.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802242a:	f7f8 fa83 	bl	801a934 <HAL_GetTick>
 802242e:	4602      	mov	r2, r0
 8022430:	683b      	ldr	r3, [r7, #0]
 8022432:	1ad3      	subs	r3, r2, r3
 8022434:	69ba      	ldr	r2, [r7, #24]
 8022436:	429a      	cmp	r2, r3
 8022438:	d302      	bcc.n	8022440 <UART_WaitOnFlagUntilTimeout+0x30>
 802243a:	69bb      	ldr	r3, [r7, #24]
 802243c:	2b00      	cmp	r3, #0
 802243e:	d101      	bne.n	8022444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8022440:	2303      	movs	r3, #3
 8022442:	e04e      	b.n	80224e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8022444:	68fb      	ldr	r3, [r7, #12]
 8022446:	681b      	ldr	r3, [r3, #0]
 8022448:	681b      	ldr	r3, [r3, #0]
 802244a:	f003 0304 	and.w	r3, r3, #4
 802244e:	2b00      	cmp	r3, #0
 8022450:	d037      	beq.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8022452:	68bb      	ldr	r3, [r7, #8]
 8022454:	2b80      	cmp	r3, #128	@ 0x80
 8022456:	d034      	beq.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8022458:	68bb      	ldr	r3, [r7, #8]
 802245a:	2b40      	cmp	r3, #64	@ 0x40
 802245c:	d031      	beq.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802245e:	68fb      	ldr	r3, [r7, #12]
 8022460:	681b      	ldr	r3, [r3, #0]
 8022462:	69db      	ldr	r3, [r3, #28]
 8022464:	f003 0308 	and.w	r3, r3, #8
 8022468:	2b08      	cmp	r3, #8
 802246a:	d110      	bne.n	802248e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802246c:	68fb      	ldr	r3, [r7, #12]
 802246e:	681b      	ldr	r3, [r3, #0]
 8022470:	2208      	movs	r2, #8
 8022472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8022474:	68f8      	ldr	r0, [r7, #12]
 8022476:	f000 f839 	bl	80224ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802247a:	68fb      	ldr	r3, [r7, #12]
 802247c:	2208      	movs	r2, #8
 802247e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8022482:	68fb      	ldr	r3, [r7, #12]
 8022484:	2200      	movs	r2, #0
 8022486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802248a:	2301      	movs	r3, #1
 802248c:	e029      	b.n	80224e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802248e:	68fb      	ldr	r3, [r7, #12]
 8022490:	681b      	ldr	r3, [r3, #0]
 8022492:	69db      	ldr	r3, [r3, #28]
 8022494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802249c:	d111      	bne.n	80224c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802249e:	68fb      	ldr	r3, [r7, #12]
 80224a0:	681b      	ldr	r3, [r3, #0]
 80224a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80224a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80224a8:	68f8      	ldr	r0, [r7, #12]
 80224aa:	f000 f81f 	bl	80224ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80224ae:	68fb      	ldr	r3, [r7, #12]
 80224b0:	2220      	movs	r2, #32
 80224b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80224b6:	68fb      	ldr	r3, [r7, #12]
 80224b8:	2200      	movs	r2, #0
 80224ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80224be:	2303      	movs	r3, #3
 80224c0:	e00f      	b.n	80224e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80224c2:	68fb      	ldr	r3, [r7, #12]
 80224c4:	681b      	ldr	r3, [r3, #0]
 80224c6:	69da      	ldr	r2, [r3, #28]
 80224c8:	68bb      	ldr	r3, [r7, #8]
 80224ca:	4013      	ands	r3, r2
 80224cc:	68ba      	ldr	r2, [r7, #8]
 80224ce:	429a      	cmp	r2, r3
 80224d0:	bf0c      	ite	eq
 80224d2:	2301      	moveq	r3, #1
 80224d4:	2300      	movne	r3, #0
 80224d6:	b2db      	uxtb	r3, r3
 80224d8:	461a      	mov	r2, r3
 80224da:	79fb      	ldrb	r3, [r7, #7]
 80224dc:	429a      	cmp	r2, r3
 80224de:	d0a0      	beq.n	8022422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80224e0:	2300      	movs	r3, #0
}
 80224e2:	4618      	mov	r0, r3
 80224e4:	3710      	adds	r7, #16
 80224e6:	46bd      	mov	sp, r7
 80224e8:	bd80      	pop	{r7, pc}
	...

080224ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80224ec:	b480      	push	{r7}
 80224ee:	b095      	sub	sp, #84	@ 0x54
 80224f0:	af00      	add	r7, sp, #0
 80224f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80224fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80224fc:	e853 3f00 	ldrex	r3, [r3]
 8022500:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8022502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	681b      	ldr	r3, [r3, #0]
 802250e:	461a      	mov	r2, r3
 8022510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022512:	643b      	str	r3, [r7, #64]	@ 0x40
 8022514:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022516:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022518:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802251a:	e841 2300 	strex	r3, r2, [r1]
 802251e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8022520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022522:	2b00      	cmp	r3, #0
 8022524:	d1e6      	bne.n	80224f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022526:	687b      	ldr	r3, [r7, #4]
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	3308      	adds	r3, #8
 802252c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802252e:	6a3b      	ldr	r3, [r7, #32]
 8022530:	e853 3f00 	ldrex	r3, [r3]
 8022534:	61fb      	str	r3, [r7, #28]
   return(result);
 8022536:	69fa      	ldr	r2, [r7, #28]
 8022538:	4b1e      	ldr	r3, [pc, #120]	@ (80225b4 <UART_EndRxTransfer+0xc8>)
 802253a:	4013      	ands	r3, r2
 802253c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	3308      	adds	r3, #8
 8022544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022548:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802254a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802254c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802254e:	e841 2300 	strex	r3, r2, [r1]
 8022552:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022556:	2b00      	cmp	r3, #0
 8022558:	d1e5      	bne.n	8022526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802255a:	687b      	ldr	r3, [r7, #4]
 802255c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802255e:	2b01      	cmp	r3, #1
 8022560:	d118      	bne.n	8022594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	681b      	ldr	r3, [r3, #0]
 8022566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022568:	68fb      	ldr	r3, [r7, #12]
 802256a:	e853 3f00 	ldrex	r3, [r3]
 802256e:	60bb      	str	r3, [r7, #8]
   return(result);
 8022570:	68bb      	ldr	r3, [r7, #8]
 8022572:	f023 0310 	bic.w	r3, r3, #16
 8022576:	647b      	str	r3, [r7, #68]	@ 0x44
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	461a      	mov	r2, r3
 802257e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022580:	61bb      	str	r3, [r7, #24]
 8022582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022584:	6979      	ldr	r1, [r7, #20]
 8022586:	69ba      	ldr	r2, [r7, #24]
 8022588:	e841 2300 	strex	r3, r2, [r1]
 802258c:	613b      	str	r3, [r7, #16]
   return(result);
 802258e:	693b      	ldr	r3, [r7, #16]
 8022590:	2b00      	cmp	r3, #0
 8022592:	d1e6      	bne.n	8022562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	2220      	movs	r2, #32
 8022598:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	2200      	movs	r2, #0
 80225a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80225a2:	687b      	ldr	r3, [r7, #4]
 80225a4:	2200      	movs	r2, #0
 80225a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80225a8:	bf00      	nop
 80225aa:	3754      	adds	r7, #84	@ 0x54
 80225ac:	46bd      	mov	sp, r7
 80225ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225b2:	4770      	bx	lr
 80225b4:	effffffe 	.word	0xeffffffe

080225b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80225b8:	b480      	push	{r7}
 80225ba:	b085      	sub	sp, #20
 80225bc:	af00      	add	r7, sp, #0
 80225be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80225c0:	687b      	ldr	r3, [r7, #4]
 80225c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80225c6:	2b01      	cmp	r3, #1
 80225c8:	d101      	bne.n	80225ce <HAL_UARTEx_DisableFifoMode+0x16>
 80225ca:	2302      	movs	r3, #2
 80225cc:	e027      	b.n	802261e <HAL_UARTEx_DisableFifoMode+0x66>
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	2201      	movs	r2, #1
 80225d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	2224      	movs	r2, #36	@ 0x24
 80225da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80225de:	687b      	ldr	r3, [r7, #4]
 80225e0:	681b      	ldr	r3, [r3, #0]
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	681a      	ldr	r2, [r3, #0]
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	681b      	ldr	r3, [r3, #0]
 80225f0:	f022 0201 	bic.w	r2, r2, #1
 80225f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80225f6:	68fb      	ldr	r3, [r7, #12]
 80225f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80225fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	2200      	movs	r2, #0
 8022602:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	681b      	ldr	r3, [r3, #0]
 8022608:	68fa      	ldr	r2, [r7, #12]
 802260a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	2220      	movs	r2, #32
 8022610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	2200      	movs	r2, #0
 8022618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802261c:	2300      	movs	r3, #0
}
 802261e:	4618      	mov	r0, r3
 8022620:	3714      	adds	r7, #20
 8022622:	46bd      	mov	sp, r7
 8022624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022628:	4770      	bx	lr

0802262a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802262a:	b580      	push	{r7, lr}
 802262c:	b084      	sub	sp, #16
 802262e:	af00      	add	r7, sp, #0
 8022630:	6078      	str	r0, [r7, #4]
 8022632:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802263a:	2b01      	cmp	r3, #1
 802263c:	d101      	bne.n	8022642 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802263e:	2302      	movs	r3, #2
 8022640:	e02d      	b.n	802269e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	2201      	movs	r2, #1
 8022646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802264a:	687b      	ldr	r3, [r7, #4]
 802264c:	2224      	movs	r2, #36	@ 0x24
 802264e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022652:	687b      	ldr	r3, [r7, #4]
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	681b      	ldr	r3, [r3, #0]
 8022658:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	681a      	ldr	r2, [r3, #0]
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	f022 0201 	bic.w	r2, r2, #1
 8022668:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	689b      	ldr	r3, [r3, #8]
 8022670:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	683a      	ldr	r2, [r7, #0]
 802267a:	430a      	orrs	r2, r1
 802267c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802267e:	6878      	ldr	r0, [r7, #4]
 8022680:	f000 f850 	bl	8022724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022684:	687b      	ldr	r3, [r7, #4]
 8022686:	681b      	ldr	r3, [r3, #0]
 8022688:	68fa      	ldr	r2, [r7, #12]
 802268a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	2220      	movs	r2, #32
 8022690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	2200      	movs	r2, #0
 8022698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802269c:	2300      	movs	r3, #0
}
 802269e:	4618      	mov	r0, r3
 80226a0:	3710      	adds	r7, #16
 80226a2:	46bd      	mov	sp, r7
 80226a4:	bd80      	pop	{r7, pc}

080226a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80226a6:	b580      	push	{r7, lr}
 80226a8:	b084      	sub	sp, #16
 80226aa:	af00      	add	r7, sp, #0
 80226ac:	6078      	str	r0, [r7, #4]
 80226ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80226b0:	687b      	ldr	r3, [r7, #4]
 80226b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80226b6:	2b01      	cmp	r3, #1
 80226b8:	d101      	bne.n	80226be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80226ba:	2302      	movs	r3, #2
 80226bc:	e02d      	b.n	802271a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	2201      	movs	r2, #1
 80226c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80226c6:	687b      	ldr	r3, [r7, #4]
 80226c8:	2224      	movs	r2, #36	@ 0x24
 80226ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	681b      	ldr	r3, [r3, #0]
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	681a      	ldr	r2, [r3, #0]
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	681b      	ldr	r3, [r3, #0]
 80226e0:	f022 0201 	bic.w	r2, r2, #1
 80226e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80226e6:	687b      	ldr	r3, [r7, #4]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	689b      	ldr	r3, [r3, #8]
 80226ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	683a      	ldr	r2, [r7, #0]
 80226f6:	430a      	orrs	r2, r1
 80226f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80226fa:	6878      	ldr	r0, [r7, #4]
 80226fc:	f000 f812 	bl	8022724 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	681b      	ldr	r3, [r3, #0]
 8022704:	68fa      	ldr	r2, [r7, #12]
 8022706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022708:	687b      	ldr	r3, [r7, #4]
 802270a:	2220      	movs	r2, #32
 802270c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022710:	687b      	ldr	r3, [r7, #4]
 8022712:	2200      	movs	r2, #0
 8022714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022718:	2300      	movs	r3, #0
}
 802271a:	4618      	mov	r0, r3
 802271c:	3710      	adds	r7, #16
 802271e:	46bd      	mov	sp, r7
 8022720:	bd80      	pop	{r7, pc}
	...

08022724 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022724:	b480      	push	{r7}
 8022726:	b085      	sub	sp, #20
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022730:	2b00      	cmp	r3, #0
 8022732:	d108      	bne.n	8022746 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	2201      	movs	r2, #1
 8022738:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 802273c:	687b      	ldr	r3, [r7, #4]
 802273e:	2201      	movs	r2, #1
 8022740:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022744:	e031      	b.n	80227aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022746:	2310      	movs	r3, #16
 8022748:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802274a:	2310      	movs	r3, #16
 802274c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	681b      	ldr	r3, [r3, #0]
 8022752:	689b      	ldr	r3, [r3, #8]
 8022754:	0e5b      	lsrs	r3, r3, #25
 8022756:	b2db      	uxtb	r3, r3
 8022758:	f003 0307 	and.w	r3, r3, #7
 802275c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	689b      	ldr	r3, [r3, #8]
 8022764:	0f5b      	lsrs	r3, r3, #29
 8022766:	b2db      	uxtb	r3, r3
 8022768:	f003 0307 	and.w	r3, r3, #7
 802276c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 802276e:	7bbb      	ldrb	r3, [r7, #14]
 8022770:	7b3a      	ldrb	r2, [r7, #12]
 8022772:	4911      	ldr	r1, [pc, #68]	@ (80227b8 <UARTEx_SetNbDataToProcess+0x94>)
 8022774:	5c8a      	ldrb	r2, [r1, r2]
 8022776:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802277a:	7b3a      	ldrb	r2, [r7, #12]
 802277c:	490f      	ldr	r1, [pc, #60]	@ (80227bc <UARTEx_SetNbDataToProcess+0x98>)
 802277e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022780:	fb93 f3f2 	sdiv	r3, r3, r2
 8022784:	b29a      	uxth	r2, r3
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802278c:	7bfb      	ldrb	r3, [r7, #15]
 802278e:	7b7a      	ldrb	r2, [r7, #13]
 8022790:	4909      	ldr	r1, [pc, #36]	@ (80227b8 <UARTEx_SetNbDataToProcess+0x94>)
 8022792:	5c8a      	ldrb	r2, [r1, r2]
 8022794:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8022798:	7b7a      	ldrb	r2, [r7, #13]
 802279a:	4908      	ldr	r1, [pc, #32]	@ (80227bc <UARTEx_SetNbDataToProcess+0x98>)
 802279c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802279e:	fb93 f3f2 	sdiv	r3, r3, r2
 80227a2:	b29a      	uxth	r2, r3
 80227a4:	687b      	ldr	r3, [r7, #4]
 80227a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80227aa:	bf00      	nop
 80227ac:	3714      	adds	r7, #20
 80227ae:	46bd      	mov	sp, r7
 80227b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b4:	4770      	bx	lr
 80227b6:	bf00      	nop
 80227b8:	08028350 	.word	0x08028350
 80227bc:	08028358 	.word	0x08028358

080227c0 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 80227c0:	b580      	push	{r7, lr}
 80227c2:	b082      	sub	sp, #8
 80227c4:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 80227c6:	4b15      	ldr	r3, [pc, #84]	@ (802281c <prvInitialiseLogging+0x5c>)
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d120      	bne.n	8022810 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80227ce:	f7e3 f85f 	bl	8005890 <xTaskGetSchedulerState>
 80227d2:	4603      	mov	r3, r0
 80227d4:	2b02      	cmp	r3, #2
 80227d6:	d11b      	bne.n	8022810 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 80227d8:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 80227dc:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 80227de:	6878      	ldr	r0, [r7, #4]
 80227e0:	f7e4 f9b8 	bl	8006b54 <pvPortMalloc>
 80227e4:	4603      	mov	r3, r0
 80227e6:	4a0e      	ldr	r2, [pc, #56]	@ (8022820 <prvInitialiseLogging+0x60>)
 80227e8:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 80227ea:	4b0d      	ldr	r3, [pc, #52]	@ (8022820 <prvInitialiseLogging+0x60>)
 80227ec:	681b      	ldr	r3, [r3, #0]
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	d00e      	beq.n	8022810 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 80227f2:	4b0b      	ldr	r3, [pc, #44]	@ (8022820 <prvInitialiseLogging+0x60>)
 80227f4:	681b      	ldr	r3, [r3, #0]
 80227f6:	687a      	ldr	r2, [r7, #4]
 80227f8:	2100      	movs	r1, #0
 80227fa:	4618      	mov	r0, r3
 80227fc:	f000 fc35 	bl	802306a <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8022800:	4b07      	ldr	r3, [pc, #28]	@ (8022820 <prvInitialiseLogging+0x60>)
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8022808:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 802280a:	4b04      	ldr	r3, [pc, #16]	@ (802281c <prvInitialiseLogging+0x5c>)
 802280c:	2201      	movs	r2, #1
 802280e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8022810:	4b02      	ldr	r3, [pc, #8]	@ (802281c <prvInitialiseLogging+0x5c>)
 8022812:	681b      	ldr	r3, [r3, #0]
}
 8022814:	4618      	mov	r0, r3
 8022816:	3708      	adds	r7, #8
 8022818:	46bd      	mov	sp, r7
 802281a:	bd80      	pop	{r7, pc}
 802281c:	20002680 	.word	0x20002680
 8022820:	20002670 	.word	0x20002670

08022824 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8022824:	b580      	push	{r7, lr}
 8022826:	b086      	sub	sp, #24
 8022828:	af02      	add	r7, sp, #8
 802282a:	6078      	str	r0, [r7, #4]
 802282c:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 802282e:	2300      	movs	r3, #0
 8022830:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8022832:	4b24      	ldr	r3, [pc, #144]	@ (80228c4 <prvGetMessageFromStreamBuffer+0xa0>)
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	2b00      	cmp	r3, #0
 8022838:	d03f      	beq.n	80228ba <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 802283a:	4b22      	ldr	r3, [pc, #136]	@ (80228c4 <prvGetMessageFromStreamBuffer+0xa0>)
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	4618      	mov	r0, r3
 8022840:	f7ee fdb7 	bl	80113b2 <uxStreamBufferGetSize>
 8022844:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8022846:	68fb      	ldr	r3, [r7, #12]
 8022848:	2b04      	cmp	r3, #4
 802284a:	d936      	bls.n	80228ba <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 802284c:	f7e2 fa02 	bl	8004c54 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8022850:	4b1c      	ldr	r3, [pc, #112]	@ (80228c4 <prvGetMessageFromStreamBuffer+0xa0>)
 8022852:	6818      	ldr	r0, [r3, #0]
 8022854:	f107 0208 	add.w	r2, r7, #8
 8022858:	2300      	movs	r3, #0
 802285a:	9300      	str	r3, [sp, #0]
 802285c:	2304      	movs	r3, #4
 802285e:	2100      	movs	r1, #0
 8022860:	f7ee fec5 	bl	80115ee <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8022864:	68bb      	ldr	r3, [r7, #8]
 8022866:	683a      	ldr	r2, [r7, #0]
 8022868:	429a      	cmp	r2, r3
 802286a:	d216      	bcs.n	802289a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 802286c:	4b15      	ldr	r3, [pc, #84]	@ (80228c4 <prvGetMessageFromStreamBuffer+0xa0>)
 802286e:	6818      	ldr	r0, [r3, #0]
 8022870:	68bb      	ldr	r3, [r7, #8]
 8022872:	2200      	movs	r2, #0
 8022874:	9200      	str	r2, [sp, #0]
 8022876:	4a14      	ldr	r2, [pc, #80]	@ (80228c8 <prvGetMessageFromStreamBuffer+0xa4>)
 8022878:	2100      	movs	r1, #0
 802287a:	f7ee feb8 	bl	80115ee <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 802287e:	683a      	ldr	r2, [r7, #0]
 8022880:	4911      	ldr	r1, [pc, #68]	@ (80228c8 <prvGetMessageFromStreamBuffer+0xa4>)
 8022882:	6878      	ldr	r0, [r7, #4]
 8022884:	f000 fae4 	bl	8022e50 <memcpy>
					xMessageLength = xBufferLength;
 8022888:	683b      	ldr	r3, [r7, #0]
 802288a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 802288c:	683b      	ldr	r3, [r7, #0]
 802288e:	3b01      	subs	r3, #1
 8022890:	687a      	ldr	r2, [r7, #4]
 8022892:	4413      	add	r3, r2
 8022894:	2200      	movs	r2, #0
 8022896:	701a      	strb	r2, [r3, #0]
 8022898:	e00d      	b.n	80228b6 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 802289a:	4b0a      	ldr	r3, [pc, #40]	@ (80228c4 <prvGetMessageFromStreamBuffer+0xa0>)
 802289c:	6818      	ldr	r0, [r3, #0]
 802289e:	68bb      	ldr	r3, [r7, #8]
 80228a0:	2200      	movs	r2, #0
 80228a2:	9200      	str	r2, [sp, #0]
 80228a4:	687a      	ldr	r2, [r7, #4]
 80228a6:	2100      	movs	r1, #0
 80228a8:	f7ee fea1 	bl	80115ee <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 80228ac:	68bb      	ldr	r3, [r7, #8]
 80228ae:	687a      	ldr	r2, [r7, #4]
 80228b0:	4413      	add	r3, r2
 80228b2:	2200      	movs	r2, #0
 80228b4:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 80228b6:	f7e2 f9db 	bl	8004c70 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 80228ba:	68bb      	ldr	r3, [r7, #8]
}
 80228bc:	4618      	mov	r0, r3
 80228be:	3710      	adds	r7, #16
 80228c0:	46bd      	mov	sp, r7
 80228c2:	bd80      	pop	{r7, pc}
 80228c4:	20002670 	.word	0x20002670
 80228c8:	200025a8 	.word	0x200025a8

080228cc <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 80228cc:	b580      	push	{r7, lr}
 80228ce:	b08e      	sub	sp, #56	@ 0x38
 80228d0:	af04      	add	r7, sp, #16
 80228d2:	6078      	str	r0, [r7, #4]
 80228d4:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 80228d6:	4b49      	ldr	r3, [pc, #292]	@ (80229fc <prvBufferFormattedString+0x130>)
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d104      	bne.n	80228e8 <prvBufferFormattedString+0x1c>
 80228de:	f44f 7199 	mov.w	r1, #306	@ 0x132
 80228e2:	4847      	ldr	r0, [pc, #284]	@ (8022a00 <prvBufferFormattedString+0x134>)
 80228e4:	f7df f8d2 	bl	8001a8c <vAssertCalled>

	vTaskSuspendAll();
 80228e8:	f7e2 f9b4 	bl	8004c54 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 80228ec:	f000 fa2a 	bl	8022d44 <ullGetHighResolutionTime>
 80228f0:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 80228f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80228f8:	4a42      	ldr	r2, [pc, #264]	@ (8022a04 <prvBufferFormattedString+0x138>)
 80228fa:	f04f 0300 	mov.w	r3, #0
 80228fe:	f7dd fd57 	bl	80003b0 <__aeabi_uldivmod>
 8022902:	4602      	mov	r2, r0
 8022904:	460b      	mov	r3, r1
 8022906:	4613      	mov	r3, r2
 8022908:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802290a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802290e:	4a3d      	ldr	r2, [pc, #244]	@ (8022a04 <prvBufferFormattedString+0x138>)
 8022910:	f04f 0300 	mov.w	r3, #0
 8022914:	f7dd fd4c 	bl	80003b0 <__aeabi_uldivmod>
 8022918:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 802291c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022924:	f04f 0300 	mov.w	r3, #0
 8022928:	f7dd fd42 	bl	80003b0 <__aeabi_uldivmod>
 802292c:	4602      	mov	r2, r0
 802292e:	460b      	mov	r3, r1
 8022930:	4613      	mov	r3, r2
 8022932:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8022934:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022938:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 802293c:	f04f 0300 	mov.w	r3, #0
 8022940:	f7dd fd36 	bl	80003b0 <__aeabi_uldivmod>
 8022944:	4613      	mov	r3, r2
 8022946:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8022948:	2000      	movs	r0, #0
 802294a:	f7e2 faa5 	bl	8004e98 <pcTaskGetName>
 802294e:	4603      	mov	r3, r0
 8022950:	9302      	str	r3, [sp, #8]
 8022952:	697b      	ldr	r3, [r7, #20]
 8022954:	9301      	str	r3, [sp, #4]
 8022956:	69bb      	ldr	r3, [r7, #24]
 8022958:	9300      	str	r3, [sp, #0]
 802295a:	69fb      	ldr	r3, [r7, #28]
 802295c:	4a2a      	ldr	r2, [pc, #168]	@ (8022a08 <prvBufferFormattedString+0x13c>)
 802295e:	21c8      	movs	r1, #200	@ 0xc8
 8022960:	482a      	ldr	r0, [pc, #168]	@ (8022a0c <prvBufferFormattedString+0x140>)
 8022962:	f001 f885 	bl	8023a70 <snprintf>
 8022966:	4603      	mov	r3, r0
 8022968:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	4a27      	ldr	r2, [pc, #156]	@ (8022a0c <prvBufferFormattedString+0x140>)
 802296e:	1898      	adds	r0, r3, r2
 8022970:	68fb      	ldr	r3, [r7, #12]
 8022972:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8022976:	683b      	ldr	r3, [r7, #0]
 8022978:	687a      	ldr	r2, [r7, #4]
 802297a:	f001 f85d 	bl	8023a38 <vsnprintf>
 802297e:	4603      	mov	r3, r0
 8022980:	461a      	mov	r2, r3
 8022982:	68fb      	ldr	r3, [r7, #12]
 8022984:	4413      	add	r3, r2
 8022986:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8022988:	4b1c      	ldr	r3, [pc, #112]	@ (80229fc <prvBufferFormattedString+0x130>)
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	4618      	mov	r0, r3
 802298e:	f7ee fcee 	bl	801136e <uxStreamBufferGetSpace>
 8022992:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8022994:	68fb      	ldr	r3, [r7, #12]
 8022996:	3304      	adds	r3, #4
 8022998:	693a      	ldr	r2, [r7, #16]
 802299a:	429a      	cmp	r2, r3
 802299c:	d90e      	bls.n	80229bc <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802299e:	4b17      	ldr	r3, [pc, #92]	@ (80229fc <prvBufferFormattedString+0x130>)
 80229a0:	6818      	ldr	r0, [r3, #0]
 80229a2:	f107 020c 	add.w	r2, r7, #12
 80229a6:	2304      	movs	r3, #4
 80229a8:	2100      	movs	r1, #0
 80229aa:	f7ee fda0 	bl	80114ee <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 80229ae:	4b13      	ldr	r3, [pc, #76]	@ (80229fc <prvBufferFormattedString+0x130>)
 80229b0:	6818      	ldr	r0, [r3, #0]
 80229b2:	68fb      	ldr	r3, [r7, #12]
 80229b4:	4a15      	ldr	r2, [pc, #84]	@ (8022a0c <prvBufferFormattedString+0x140>)
 80229b6:	2100      	movs	r1, #0
 80229b8:	f7ee fd99 	bl	80114ee <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 80229bc:	f7e2 f958 	bl	8004c70 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 80229c0:	4b13      	ldr	r3, [pc, #76]	@ (8022a10 <prvBufferFormattedString+0x144>)
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	d10a      	bne.n	80229de <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 80229c8:	68fb      	ldr	r3, [r7, #12]
 80229ca:	4619      	mov	r1, r3
 80229cc:	480f      	ldr	r0, [pc, #60]	@ (8022a0c <prvBufferFormattedString+0x140>)
 80229ce:	f000 f85b 	bl	8022a88 <vUDPLoggingHook>
		uxSkipCount++;
 80229d2:	4b10      	ldr	r3, [pc, #64]	@ (8022a14 <prvBufferFormattedString+0x148>)
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	3301      	adds	r3, #1
 80229d8:	4a0e      	ldr	r2, [pc, #56]	@ (8022a14 <prvBufferFormattedString+0x148>)
 80229da:	6013      	str	r3, [r2, #0]
 80229dc:	e008      	b.n	80229f0 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 80229de:	4b0c      	ldr	r3, [pc, #48]	@ (8022a10 <prvBufferFormattedString+0x144>)
 80229e0:	6818      	ldr	r0, [r3, #0]
 80229e2:	2300      	movs	r3, #0
 80229e4:	9300      	str	r3, [sp, #0]
 80229e6:	2302      	movs	r3, #2
 80229e8:	2200      	movs	r2, #0
 80229ea:	2100      	movs	r1, #0
 80229ec:	f7e3 fa96 	bl	8005f1c <xTaskGenericNotify>
	}

	return xLength;
 80229f0:	68fb      	ldr	r3, [r7, #12]
}
 80229f2:	4618      	mov	r0, r3
 80229f4:	3728      	adds	r7, #40	@ 0x28
 80229f6:	46bd      	mov	sp, r7
 80229f8:	bd80      	pop	{r7, pc}
 80229fa:	bf00      	nop
 80229fc:	20002670 	.word	0x20002670
 8022a00:	08028138 	.word	0x08028138
 8022a04:	000f4240 	.word	0x000f4240
 8022a08:	08028160 	.word	0x08028160
 8022a0c:	200025a8 	.word	0x200025a8
 8022a10:	20002674 	.word	0x20002674
 8022a14:	20002678 	.word	0x20002678

08022a18 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8022a18:	b40f      	push	{r0, r1, r2, r3}
 8022a1a:	b580      	push	{r7, lr}
 8022a1c:	b082      	sub	sp, #8
 8022a1e:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8022a20:	f7ff fece 	bl	80227c0 <prvInitialiseLogging>
 8022a24:	4603      	mov	r3, r0
 8022a26:	2b00      	cmp	r3, #0
 8022a28:	d008      	beq.n	8022a3c <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8022a2a:	f107 0314 	add.w	r3, r7, #20
 8022a2e:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8022a30:	6839      	ldr	r1, [r7, #0]
 8022a32:	6938      	ldr	r0, [r7, #16]
 8022a34:	f7ff ff4a 	bl	80228cc <prvBufferFormattedString>
 8022a38:	6078      	str	r0, [r7, #4]
 8022a3a:	e001      	b.n	8022a40 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8022a40:	687b      	ldr	r3, [r7, #4]
}
 8022a42:	4618      	mov	r0, r3
 8022a44:	3708      	adds	r7, #8
 8022a46:	46bd      	mov	sp, r7
 8022a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022a4c:	b004      	add	sp, #16
 8022a4e:	4770      	bx	lr

08022a50 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8022a50:	b580      	push	{r7, lr}
 8022a52:	b082      	sub	sp, #8
 8022a54:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8022a56:	4b08      	ldr	r3, [pc, #32]	@ (8022a78 <vUDPLoggingTaskCreate+0x28>)
 8022a58:	9301      	str	r3, [sp, #4]
 8022a5a:	2302      	movs	r3, #2
 8022a5c:	9300      	str	r3, [sp, #0]
 8022a5e:	2300      	movs	r3, #0
 8022a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8022a64:	4905      	ldr	r1, [pc, #20]	@ (8022a7c <vUDPLoggingTaskCreate+0x2c>)
 8022a66:	4806      	ldr	r0, [pc, #24]	@ (8022a80 <vUDPLoggingTaskCreate+0x30>)
 8022a68:	f7e1 fe5e 	bl	8004728 <xTaskCreate>
 8022a6c:	4603      	mov	r3, r0
 8022a6e:	4a05      	ldr	r2, [pc, #20]	@ (8022a84 <vUDPLoggingTaskCreate+0x34>)
 8022a70:	6013      	str	r3, [r2, #0]
}
 8022a72:	bf00      	nop
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}
 8022a78:	20002674 	.word	0x20002674
 8022a7c:	08028178 	.word	0x08028178
 8022a80:	08022aa1 	.word	0x08022aa1
 8022a84:	2000267c 	.word	0x2000267c

08022a88 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8022a88:	b480      	push	{r7}
 8022a8a:	b083      	sub	sp, #12
 8022a8c:	af00      	add	r7, sp, #0
 8022a8e:	6078      	str	r0, [r7, #4]
 8022a90:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8022a92:	bf00      	nop
 8022a94:	370c      	adds	r7, #12
 8022a96:	46bd      	mov	sp, r7
 8022a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a9c:	4770      	bx	lr
	...

08022aa0 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8022aa0:	b580      	push	{r7, lr}
 8022aa2:	b098      	sub	sp, #96	@ 0x60
 8022aa4:	af02      	add	r7, sp, #8
 8022aa6:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8022aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8022aac:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022aae:	2000      	movs	r0, #0
 8022ab0:	f7eb f912 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 8022ab4:	6538      	str	r0, [r7, #80]	@ 0x50
 8022ab6:	e01c      	b.n	8022af2 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8022ab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022aba:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022abe:	f003 0310 	and.w	r3, r3, #16
 8022ac2:	b2db      	uxtb	r3, r3
 8022ac4:	2b00      	cmp	r3, #0
 8022ac6:	d00f      	beq.n	8022ae8 <prvLoggingTask+0x48>
 8022ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d009      	beq.n	8022ae2 <prvLoggingTask+0x42>
 8022ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022ad0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022ad4:	f003 0304 	and.w	r3, r3, #4
 8022ad8:	b2db      	uxtb	r3, r3
 8022ada:	2b00      	cmp	r3, #0
 8022adc:	d101      	bne.n	8022ae2 <prvLoggingTask+0x42>
 8022ade:	2301      	movs	r3, #1
 8022ae0:	e000      	b.n	8022ae4 <prvLoggingTask+0x44>
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	2b00      	cmp	r3, #0
 8022ae6:	d108      	bne.n	8022afa <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022ae8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8022aea:	2000      	movs	r0, #0
 8022aec:	f7eb f916 	bl	800dd1c <FreeRTOS_NextEndPoint>
 8022af0:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8022af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d1df      	bne.n	8022ab8 <prvLoggingTask+0x18>
 8022af8:	e000      	b.n	8022afc <prvLoggingTask+0x5c>
				{
					break;
 8022afa:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8022afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022afe:	2b00      	cmp	r3, #0
 8022b00:	d000      	beq.n	8022b04 <prvLoggingTask+0x64>
			{
				break;
 8022b02:	e004      	b.n	8022b0e <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8022b04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022b08:	f7e1 ffec 	bl	8004ae4 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022b0c:	e7cf      	b.n	8022aae <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8022b0e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8022b10:	f7e1 ffe8 	bl	8004ae4 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8022b14:	2211      	movs	r2, #17
 8022b16:	2102      	movs	r1, #2
 8022b18:	2002      	movs	r0, #2
 8022b1a:	f7eb fe59 	bl	800e7d0 <FreeRTOS_socket>
 8022b1e:	4603      	mov	r3, r0
 8022b20:	4a4c      	ldr	r2, [pc, #304]	@ (8022c54 <prvLoggingTask+0x1b4>)
 8022b22:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8022b24:	4b4b      	ldr	r3, [pc, #300]	@ (8022c54 <prvLoggingTask+0x1b4>)
 8022b26:	681b      	ldr	r3, [r3, #0]
 8022b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022b2c:	d0ef      	beq.n	8022b0e <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 8022b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d104      	bne.n	8022b3e <prvLoggingTask+0x9e>
 8022b34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022b38:	4847      	ldr	r0, [pc, #284]	@ (8022c58 <prvLoggingTask+0x1b8>)
 8022b3a:	f7de ffa7 	bl	8001a8c <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 8022b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022b40:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d104      	bne.n	8022b52 <prvLoggingTask+0xb2>
 8022b48:	f240 11df 	movw	r1, #479	@ 0x1df
 8022b4c:	4842      	ldr	r0, [pc, #264]	@ (8022c58 <prvLoggingTask+0x1b8>)
 8022b4e:	f7de ff9d 	bl	8001a8c <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8022b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022b54:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022b58:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8022b5a:	f246 2309 	movw	r3, #25097	@ 0x6209
 8022b5e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8022b60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8022b66:	4b3b      	ldr	r3, [pc, #236]	@ (8022c54 <prvLoggingTask+0x1b4>)
 8022b68:	681b      	ldr	r3, [r3, #0]
 8022b6a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8022b6e:	2218      	movs	r2, #24
 8022b70:	4618      	mov	r0, r3
 8022b72:	f7ec f81d 	bl	800ebb0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8022b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022b78:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8022b7a:	4b36      	ldr	r3, [pc, #216]	@ (8022c54 <prvLoggingTask+0x1b4>)
 8022b7c:	6818      	ldr	r0, [r3, #0]
 8022b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022b82:	2204      	movs	r2, #4
 8022b84:	9200      	str	r2, [sp, #0]
 8022b86:	2201      	movs	r2, #1
 8022b88:	2100      	movs	r1, #0
 8022b8a:	f7ec fddb 	bl	800f744 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8022b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022b90:	2101      	movs	r1, #1
 8022b92:	2000      	movs	r0, #0
 8022b94:	f7e3 f8b6 	bl	8005d04 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8022b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022b9a:	691b      	ldr	r3, [r3, #16]
 8022b9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8022b9e:	4798      	blx	r3
 8022ba0:	4603      	mov	r3, r0
 8022ba2:	2b00      	cmp	r3, #0
 8022ba4:	d0f3      	beq.n	8022b8e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	657b      	str	r3, [r7, #84]	@ 0x54
 8022baa:	e04c      	b.n	8022c46 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8022bac:	21c8      	movs	r1, #200	@ 0xc8
 8022bae:	482b      	ldr	r0, [pc, #172]	@ (8022c5c <prvLoggingTask+0x1bc>)
 8022bb0:	f7ff fe38 	bl	8022824 <prvGetMessageFromStreamBuffer>
 8022bb4:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8022bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	d048      	beq.n	8022c4e <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022bbc:	2000      	movs	r0, #0
 8022bbe:	f7eb f88b 	bl	800dcd8 <FreeRTOS_FirstEndPoint>
 8022bc2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8022bc4:	e02a      	b.n	8022c1c <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8022bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022bc8:	2b00      	cmp	r3, #0
 8022bca:	d022      	beq.n	8022c12 <prvLoggingTask+0x172>
 8022bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022bce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022bd2:	f003 0304 	and.w	r3, r3, #4
 8022bd6:	b2db      	uxtb	r3, r3
 8022bd8:	2b00      	cmp	r3, #0
 8022bda:	d11a      	bne.n	8022c12 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8022bdc:	2318      	movs	r3, #24
 8022bde:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8022be0:	2302      	movs	r3, #2
 8022be2:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022be6:	681a      	ldr	r2, [r3, #0]
 8022be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022bea:	685b      	ldr	r3, [r3, #4]
 8022bec:	43db      	mvns	r3, r3
 8022bee:	4313      	orrs	r3, r2
 8022bf0:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8022bf2:	f246 3309 	movw	r3, #25353	@ 0x6309
 8022bf6:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8022bf8:	4b16      	ldr	r3, [pc, #88]	@ (8022c54 <prvLoggingTask+0x1b4>)
 8022bfa:	6818      	ldr	r0, [r3, #0]
 8022bfc:	2318      	movs	r3, #24
 8022bfe:	9301      	str	r3, [sp, #4]
 8022c00:	f107 030c 	add.w	r3, r7, #12
 8022c04:	9300      	str	r3, [sp, #0]
 8022c06:	2300      	movs	r3, #0
 8022c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022c0a:	4914      	ldr	r1, [pc, #80]	@ (8022c5c <prvLoggingTask+0x1bc>)
 8022c0c:	f7eb ff60 	bl	800ead0 <FreeRTOS_sendto>
							}
							break;
 8022c10:	e007      	b.n	8022c22 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8022c12:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8022c14:	2000      	movs	r0, #0
 8022c16:	f7eb f881 	bl	800dd1c <FreeRTOS_NextEndPoint>
 8022c1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8022c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d1d1      	bne.n	8022bc6 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8022c22:	4b0f      	ldr	r3, [pc, #60]	@ (8022c60 <prvLoggingTask+0x1c0>)
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d005      	beq.n	8022c36 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8022c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8022c60 <prvLoggingTask+0x1c0>)
 8022c2c:	681b      	ldr	r3, [r3, #0]
 8022c2e:	3b01      	subs	r3, #1
 8022c30:	4a0b      	ldr	r2, [pc, #44]	@ (8022c60 <prvLoggingTask+0x1c0>)
 8022c32:	6013      	str	r3, [r2, #0]
 8022c34:	e004      	b.n	8022c40 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8022c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022c38:	4619      	mov	r1, r3
 8022c3a:	4808      	ldr	r0, [pc, #32]	@ (8022c5c <prvLoggingTask+0x1bc>)
 8022c3c:	f7ff ff24 	bl	8022a88 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022c42:	3301      	adds	r3, #1
 8022c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8022c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022c48:	2b13      	cmp	r3, #19
 8022c4a:	ddaf      	ble.n	8022bac <prvLoggingTask+0x10c>
 8022c4c:	e79f      	b.n	8022b8e <prvLoggingTask+0xee>
					break;
 8022c4e:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8022c50:	e79d      	b.n	8022b8e <prvLoggingTask+0xee>
 8022c52:	bf00      	nop
 8022c54:	20000028 	.word	0x20000028
 8022c58:	08028138 	.word	0x08028138
 8022c5c:	20002684 	.word	0x20002684
 8022c60:	20002678 	.word	0x20002678

08022c64 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8022c64:	b480      	push	{r7}
 8022c66:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8022c68:	4b0c      	ldr	r3, [pc, #48]	@ (8022c9c <TIM2_IRQHandler+0x38>)
 8022c6a:	681b      	ldr	r3, [r3, #0]
 8022c6c:	691b      	ldr	r3, [r3, #16]
 8022c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8022ca0 <TIM2_IRQHandler+0x3c>)
 8022c70:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8022c72:	4b0b      	ldr	r3, [pc, #44]	@ (8022ca0 <TIM2_IRQHandler+0x3c>)
 8022c74:	681b      	ldr	r3, [r3, #0]
 8022c76:	f003 0301 	and.w	r3, r3, #1
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	d009      	beq.n	8022c92 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8022c7e:	4b07      	ldr	r3, [pc, #28]	@ (8022c9c <TIM2_IRQHandler+0x38>)
 8022c80:	681b      	ldr	r3, [r3, #0]
 8022c82:	f06f 0201 	mvn.w	r2, #1
 8022c86:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8022c88:	4b06      	ldr	r3, [pc, #24]	@ (8022ca4 <TIM2_IRQHandler+0x40>)
 8022c8a:	681b      	ldr	r3, [r3, #0]
 8022c8c:	3301      	adds	r3, #1
 8022c8e:	4a05      	ldr	r2, [pc, #20]	@ (8022ca4 <TIM2_IRQHandler+0x40>)
 8022c90:	6013      	str	r3, [r2, #0]
	}
}
 8022c92:	bf00      	nop
 8022c94:	46bd      	mov	sp, r7
 8022c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c9a:	4770      	bx	lr
 8022c9c:	20000458 	.word	0x20000458
 8022ca0:	20002750 	.word	0x20002750
 8022ca4:	2000274c 	.word	0x2000274c

08022ca8 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b082      	sub	sp, #8
 8022cac:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8022cae:	4b20      	ldr	r3, [pc, #128]	@ (8022d30 <vStartHighResolutionTimer+0x88>)
 8022cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8022d30 <vStartHighResolutionTimer+0x88>)
 8022cb6:	f043 0301 	orr.w	r3, r3, #1
 8022cba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8022cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8022d30 <vStartHighResolutionTimer+0x88>)
 8022cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022cc4:	f003 0301 	and.w	r3, r3, #1
 8022cc8:	607b      	str	r3, [r7, #4]
 8022cca:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8022ccc:	4b19      	ldr	r3, [pc, #100]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022cd2:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022cd4:	23c8      	movs	r3, #200	@ 0xc8
 8022cd6:	3b01      	subs	r3, #1
 8022cd8:	4a16      	ldr	r2, [pc, #88]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cda:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8022cdc:	4b15      	ldr	r3, [pc, #84]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cde:	2200      	movs	r2, #0
 8022ce0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8022ce2:	4b15      	ldr	r3, [pc, #84]	@ (8022d38 <vStartHighResolutionTimer+0x90>)
 8022ce4:	3b01      	subs	r3, #1
 8022ce6:	4a13      	ldr	r2, [pc, #76]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022ce8:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8022cea:	4b12      	ldr	r3, [pc, #72]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cec:	2200      	movs	r2, #0
 8022cee:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8022cf0:	4b10      	ldr	r3, [pc, #64]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cf2:	2200      	movs	r2, #0
 8022cf4:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022cf8:	2201      	movs	r2, #1
 8022cfa:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	2105      	movs	r1, #5
 8022d00:	201c      	movs	r0, #28
 8022d02:	f7f7 ff42 	bl	801ab8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022d06:	201c      	movs	r0, #28
 8022d08:	f7f7 ff59 	bl	801abbe <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8022d0c:	4809      	ldr	r0, [pc, #36]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022d0e:	f7fd fc96 	bl	802063e <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8022d12:	4808      	ldr	r0, [pc, #32]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022d14:	f7fd fcea 	bl	80206ec <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022d18:	4b06      	ldr	r3, [pc, #24]	@ (8022d34 <vStartHighResolutionTimer+0x8c>)
 8022d1a:	681b      	ldr	r3, [r3, #0]
 8022d1c:	691b      	ldr	r3, [r3, #16]
 8022d1e:	4a07      	ldr	r2, [pc, #28]	@ (8022d3c <vStartHighResolutionTimer+0x94>)
 8022d20:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022d22:	4b07      	ldr	r3, [pc, #28]	@ (8022d40 <vStartHighResolutionTimer+0x98>)
 8022d24:	2200      	movs	r2, #0
 8022d26:	601a      	str	r2, [r3, #0]
}
 8022d28:	bf00      	nop
 8022d2a:	3708      	adds	r7, #8
 8022d2c:	46bd      	mov	sp, r7
 8022d2e:	bd80      	pop	{r7, pc}
 8022d30:	58024400 	.word	0x58024400
 8022d34:	20000458 	.word	0x20000458
 8022d38:	00989680 	.word	0x00989680
 8022d3c:	20002750 	.word	0x20002750
 8022d40:	2000274c 	.word	0x2000274c

08022d44 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022d48:	b08e      	sub	sp, #56	@ 0x38
 8022d4a:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8022d4c:	493d      	ldr	r1, [pc, #244]	@ (8022e44 <ullGetHighResolutionTime+0x100>)
 8022d4e:	6809      	ldr	r1, [r1, #0]
 8022d50:	2900      	cmp	r1, #0
 8022d52:	d132      	bne.n	8022dba <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022d54:	f7e2 f890 	bl	8004e78 <xTaskGetTickCount>
 8022d58:	4603      	mov	r3, r0
 8022d5a:	2200      	movs	r2, #0
 8022d5c:	469a      	mov	sl, r3
 8022d5e:	4693      	mov	fp, r2
 8022d60:	4652      	mov	r2, sl
 8022d62:	465b      	mov	r3, fp
 8022d64:	f04f 0000 	mov.w	r0, #0
 8022d68:	f04f 0100 	mov.w	r1, #0
 8022d6c:	0159      	lsls	r1, r3, #5
 8022d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022d72:	0150      	lsls	r0, r2, #5
 8022d74:	4602      	mov	r2, r0
 8022d76:	460b      	mov	r3, r1
 8022d78:	ebb2 040a 	subs.w	r4, r2, sl
 8022d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8022d80:	f04f 0200 	mov.w	r2, #0
 8022d84:	f04f 0300 	mov.w	r3, #0
 8022d88:	00ab      	lsls	r3, r5, #2
 8022d8a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8022d8e:	00a2      	lsls	r2, r4, #2
 8022d90:	4614      	mov	r4, r2
 8022d92:	461d      	mov	r5, r3
 8022d94:	eb14 080a 	adds.w	r8, r4, sl
 8022d98:	eb45 090b 	adc.w	r9, r5, fp
 8022d9c:	f04f 0200 	mov.w	r2, #0
 8022da0:	f04f 0300 	mov.w	r3, #0
 8022da4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022da8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022dac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022db0:	4690      	mov	r8, r2
 8022db2:	4699      	mov	r9, r3
 8022db4:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8022db8:	e03c      	b.n	8022e34 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022dba:	4922      	ldr	r1, [pc, #136]	@ (8022e44 <ullGetHighResolutionTime+0x100>)
 8022dbc:	6809      	ldr	r1, [r1, #0]
 8022dbe:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022dc0:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8022dc2:	4921      	ldr	r1, [pc, #132]	@ (8022e48 <ullGetHighResolutionTime+0x104>)
 8022dc4:	6809      	ldr	r1, [r1, #0]
 8022dc6:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8022dc8:	491e      	ldr	r1, [pc, #120]	@ (8022e44 <ullGetHighResolutionTime+0x100>)
 8022dca:	6809      	ldr	r1, [r1, #0]
 8022dcc:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022dce:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8022dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022dd4:	4288      	cmp	r0, r1
 8022dd6:	d200      	bcs.n	8022dda <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022dd8:	e7ef      	b.n	8022dba <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8022dda:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8022ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022dde:	2000      	movs	r0, #0
 8022de0:	61b9      	str	r1, [r7, #24]
 8022de2:	61f8      	str	r0, [r7, #28]
 8022de4:	4819      	ldr	r0, [pc, #100]	@ (8022e4c <ullGetHighResolutionTime+0x108>)
 8022de6:	2100      	movs	r1, #0
 8022de8:	6138      	str	r0, [r7, #16]
 8022dea:	6179      	str	r1, [r7, #20]
 8022dec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022df0:	4649      	mov	r1, r9
 8022df2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022df6:	4650      	mov	r0, sl
 8022df8:	fb00 f001 	mul.w	r0, r0, r1
 8022dfc:	4659      	mov	r1, fp
 8022dfe:	4644      	mov	r4, r8
 8022e00:	fb04 f101 	mul.w	r1, r4, r1
 8022e04:	4401      	add	r1, r0
 8022e06:	4640      	mov	r0, r8
 8022e08:	4654      	mov	r4, sl
 8022e0a:	fba0 2304 	umull	r2, r3, r0, r4
 8022e0e:	4419      	add	r1, r3
 8022e10:	460b      	mov	r3, r1
 8022e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022e14:	2000      	movs	r0, #0
 8022e16:	60b9      	str	r1, [r7, #8]
 8022e18:	60f8      	str	r0, [r7, #12]
 8022e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8022e1e:	4621      	mov	r1, r4
 8022e20:	1851      	adds	r1, r2, r1
 8022e22:	6039      	str	r1, [r7, #0]
 8022e24:	4629      	mov	r1, r5
 8022e26:	eb43 0101 	adc.w	r1, r3, r1
 8022e2a:	6079      	str	r1, [r7, #4]
 8022e2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022e30:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022e34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022e38:	4610      	mov	r0, r2
 8022e3a:	4619      	mov	r1, r3
 8022e3c:	3738      	adds	r7, #56	@ 0x38
 8022e3e:	46bd      	mov	sp, r7
 8022e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022e44:	20000458 	.word	0x20000458
 8022e48:	2000274c 	.word	0x2000274c
 8022e4c:	00989680 	.word	0x00989680

08022e50 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022e50:	b480      	push	{r7}
 8022e52:	b08d      	sub	sp, #52	@ 0x34
 8022e54:	af00      	add	r7, sp, #0
 8022e56:	60f8      	str	r0, [r7, #12]
 8022e58:	60b9      	str	r1, [r7, #8]
 8022e5a:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022e5c:	68fb      	ldr	r3, [r7, #12]
 8022e5e:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022e60:	68bb      	ldr	r3, [r7, #8]
 8022e62:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022e64:	697a      	ldr	r2, [r7, #20]
 8022e66:	687b      	ldr	r3, [r7, #4]
 8022e68:	4413      	add	r3, r2
 8022e6a:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8022e6c:	69ba      	ldr	r2, [r7, #24]
 8022e6e:	697b      	ldr	r3, [r7, #20]
 8022e70:	4053      	eors	r3, r2
 8022e72:	f003 0303 	and.w	r3, r3, #3
 8022e76:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e7a:	f003 0301 	and.w	r3, r3, #1
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	f040 80a1 	bne.w	8022fc6 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022e84:	697b      	ldr	r3, [r7, #20]
 8022e86:	f003 0301 	and.w	r3, r3, #1
 8022e8a:	2b00      	cmp	r3, #0
 8022e8c:	d00b      	beq.n	8022ea6 <memcpy+0x56>
 8022e8e:	697a      	ldr	r2, [r7, #20]
 8022e90:	693b      	ldr	r3, [r7, #16]
 8022e92:	429a      	cmp	r2, r3
 8022e94:	d207      	bcs.n	8022ea6 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022e96:	697a      	ldr	r2, [r7, #20]
 8022e98:	1c53      	adds	r3, r2, #1
 8022e9a:	617b      	str	r3, [r7, #20]
 8022e9c:	69bb      	ldr	r3, [r7, #24]
 8022e9e:	1c59      	adds	r1, r3, #1
 8022ea0:	61b9      	str	r1, [r7, #24]
 8022ea2:	7812      	ldrb	r2, [r2, #0]
 8022ea4:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022ea8:	f003 0302 	and.w	r3, r3, #2
 8022eac:	2b00      	cmp	r3, #0
 8022eae:	d01f      	beq.n	8022ef0 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022eb0:	693b      	ldr	r3, [r7, #16]
 8022eb2:	f003 0301 	and.w	r3, r3, #1
 8022eb6:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022eb8:	693b      	ldr	r3, [r7, #16]
 8022eba:	f023 0301 	bic.w	r3, r3, #1
 8022ebe:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022ec0:	e00a      	b.n	8022ed8 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022ec2:	697a      	ldr	r2, [r7, #20]
 8022ec4:	1c93      	adds	r3, r2, #2
 8022ec6:	617b      	str	r3, [r7, #20]
 8022ec8:	69bb      	ldr	r3, [r7, #24]
 8022eca:	1c99      	adds	r1, r3, #2
 8022ecc:	61b9      	str	r1, [r7, #24]
 8022ece:	8812      	ldrh	r2, [r2, #0]
 8022ed0:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	3b02      	subs	r3, #2
 8022ed6:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022ed8:	697a      	ldr	r2, [r7, #20]
 8022eda:	693b      	ldr	r3, [r7, #16]
 8022edc:	429a      	cmp	r2, r3
 8022ede:	d202      	bcs.n	8022ee6 <memcpy+0x96>
 8022ee0:	687b      	ldr	r3, [r7, #4]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	d1ed      	bne.n	8022ec2 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022ee6:	693a      	ldr	r2, [r7, #16]
 8022ee8:	69fb      	ldr	r3, [r7, #28]
 8022eea:	4313      	orrs	r3, r2
 8022eec:	613b      	str	r3, [r7, #16]
 8022eee:	e0ae      	b.n	802304e <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022ef0:	697b      	ldr	r3, [r7, #20]
 8022ef2:	f003 0302 	and.w	r3, r3, #2
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d00c      	beq.n	8022f14 <memcpy+0xc4>
 8022efa:	697a      	ldr	r2, [r7, #20]
 8022efc:	693b      	ldr	r3, [r7, #16]
 8022efe:	3b01      	subs	r3, #1
 8022f00:	429a      	cmp	r2, r3
 8022f02:	d207      	bcs.n	8022f14 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022f04:	697a      	ldr	r2, [r7, #20]
 8022f06:	1c93      	adds	r3, r2, #2
 8022f08:	617b      	str	r3, [r7, #20]
 8022f0a:	69bb      	ldr	r3, [r7, #24]
 8022f0c:	1c99      	adds	r1, r3, #2
 8022f0e:	61b9      	str	r1, [r7, #24]
 8022f10:	8812      	ldrh	r2, [r2, #0]
 8022f12:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022f14:	693b      	ldr	r3, [r7, #16]
 8022f16:	f003 0303 	and.w	r3, r3, #3
 8022f1a:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8022f1c:	693b      	ldr	r3, [r7, #16]
 8022f1e:	f023 0303 	bic.w	r3, r3, #3
 8022f22:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022f24:	693a      	ldr	r2, [r7, #16]
 8022f26:	697b      	ldr	r3, [r7, #20]
 8022f28:	1ad3      	subs	r3, r2, r3
 8022f2a:	109b      	asrs	r3, r3, #2
 8022f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022f2e:	e02f      	b.n	8022f90 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022f30:	697a      	ldr	r2, [r7, #20]
 8022f32:	69bb      	ldr	r3, [r7, #24]
 8022f34:	6812      	ldr	r2, [r2, #0]
 8022f36:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022f38:	697a      	ldr	r2, [r7, #20]
 8022f3a:	69bb      	ldr	r3, [r7, #24]
 8022f3c:	3304      	adds	r3, #4
 8022f3e:	6852      	ldr	r2, [r2, #4]
 8022f40:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022f42:	697a      	ldr	r2, [r7, #20]
 8022f44:	69bb      	ldr	r3, [r7, #24]
 8022f46:	3308      	adds	r3, #8
 8022f48:	6892      	ldr	r2, [r2, #8]
 8022f4a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8022f4c:	697a      	ldr	r2, [r7, #20]
 8022f4e:	69bb      	ldr	r3, [r7, #24]
 8022f50:	330c      	adds	r3, #12
 8022f52:	68d2      	ldr	r2, [r2, #12]
 8022f54:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022f56:	697a      	ldr	r2, [r7, #20]
 8022f58:	69bb      	ldr	r3, [r7, #24]
 8022f5a:	3310      	adds	r3, #16
 8022f5c:	6912      	ldr	r2, [r2, #16]
 8022f5e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022f60:	697a      	ldr	r2, [r7, #20]
 8022f62:	69bb      	ldr	r3, [r7, #24]
 8022f64:	3314      	adds	r3, #20
 8022f66:	6952      	ldr	r2, [r2, #20]
 8022f68:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8022f6a:	697a      	ldr	r2, [r7, #20]
 8022f6c:	69bb      	ldr	r3, [r7, #24]
 8022f6e:	3318      	adds	r3, #24
 8022f70:	6992      	ldr	r2, [r2, #24]
 8022f72:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022f74:	697a      	ldr	r2, [r7, #20]
 8022f76:	69bb      	ldr	r3, [r7, #24]
 8022f78:	331c      	adds	r3, #28
 8022f7a:	69d2      	ldr	r2, [r2, #28]
 8022f7c:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8022f7e:	69bb      	ldr	r3, [r7, #24]
 8022f80:	3320      	adds	r3, #32
 8022f82:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022f84:	697b      	ldr	r3, [r7, #20]
 8022f86:	3320      	adds	r3, #32
 8022f88:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8022f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022f8c:	3b08      	subs	r3, #8
 8022f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022f92:	2b08      	cmp	r3, #8
 8022f94:	dccc      	bgt.n	8022f30 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022f96:	e00a      	b.n	8022fae <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022f98:	697a      	ldr	r2, [r7, #20]
 8022f9a:	1d13      	adds	r3, r2, #4
 8022f9c:	617b      	str	r3, [r7, #20]
 8022f9e:	69bb      	ldr	r3, [r7, #24]
 8022fa0:	1d19      	adds	r1, r3, #4
 8022fa2:	61b9      	str	r1, [r7, #24]
 8022fa4:	6812      	ldr	r2, [r2, #0]
 8022fa6:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	3b04      	subs	r3, #4
 8022fac:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022fae:	697a      	ldr	r2, [r7, #20]
 8022fb0:	693b      	ldr	r3, [r7, #16]
 8022fb2:	429a      	cmp	r2, r3
 8022fb4:	d202      	bcs.n	8022fbc <memcpy+0x16c>
 8022fb6:	687b      	ldr	r3, [r7, #4]
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	d1ed      	bne.n	8022f98 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022fbc:	693a      	ldr	r2, [r7, #16]
 8022fbe:	6a3b      	ldr	r3, [r7, #32]
 8022fc0:	4313      	orrs	r3, r2
 8022fc2:	613b      	str	r3, [r7, #16]
 8022fc4:	e043      	b.n	802304e <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022fc6:	693a      	ldr	r2, [r7, #16]
 8022fc8:	697b      	ldr	r3, [r7, #20]
 8022fca:	1ad3      	subs	r3, r2, r3
 8022fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022fce:	e02f      	b.n	8023030 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022fd0:	697a      	ldr	r2, [r7, #20]
 8022fd2:	69bb      	ldr	r3, [r7, #24]
 8022fd4:	7812      	ldrb	r2, [r2, #0]
 8022fd6:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022fd8:	697a      	ldr	r2, [r7, #20]
 8022fda:	69bb      	ldr	r3, [r7, #24]
 8022fdc:	3301      	adds	r3, #1
 8022fde:	7852      	ldrb	r2, [r2, #1]
 8022fe0:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022fe2:	697a      	ldr	r2, [r7, #20]
 8022fe4:	69bb      	ldr	r3, [r7, #24]
 8022fe6:	3302      	adds	r3, #2
 8022fe8:	7892      	ldrb	r2, [r2, #2]
 8022fea:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8022fec:	697a      	ldr	r2, [r7, #20]
 8022fee:	69bb      	ldr	r3, [r7, #24]
 8022ff0:	3303      	adds	r3, #3
 8022ff2:	78d2      	ldrb	r2, [r2, #3]
 8022ff4:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022ff6:	697a      	ldr	r2, [r7, #20]
 8022ff8:	69bb      	ldr	r3, [r7, #24]
 8022ffa:	3304      	adds	r3, #4
 8022ffc:	7912      	ldrb	r2, [r2, #4]
 8022ffe:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8023000:	697a      	ldr	r2, [r7, #20]
 8023002:	69bb      	ldr	r3, [r7, #24]
 8023004:	3305      	adds	r3, #5
 8023006:	7952      	ldrb	r2, [r2, #5]
 8023008:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 802300a:	697a      	ldr	r2, [r7, #20]
 802300c:	69bb      	ldr	r3, [r7, #24]
 802300e:	3306      	adds	r3, #6
 8023010:	7992      	ldrb	r2, [r2, #6]
 8023012:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8023014:	697a      	ldr	r2, [r7, #20]
 8023016:	69bb      	ldr	r3, [r7, #24]
 8023018:	3307      	adds	r3, #7
 802301a:	79d2      	ldrb	r2, [r2, #7]
 802301c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 802301e:	69bb      	ldr	r3, [r7, #24]
 8023020:	3308      	adds	r3, #8
 8023022:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8023024:	697b      	ldr	r3, [r7, #20]
 8023026:	3308      	adds	r3, #8
 8023028:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 802302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802302c:	3b08      	subs	r3, #8
 802302e:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8023030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023032:	2b08      	cmp	r3, #8
 8023034:	dccc      	bgt.n	8022fd0 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8023036:	e00a      	b.n	802304e <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8023038:	697a      	ldr	r2, [r7, #20]
 802303a:	1c53      	adds	r3, r2, #1
 802303c:	617b      	str	r3, [r7, #20]
 802303e:	69bb      	ldr	r3, [r7, #24]
 8023040:	1c59      	adds	r1, r3, #1
 8023042:	61b9      	str	r1, [r7, #24]
 8023044:	7812      	ldrb	r2, [r2, #0]
 8023046:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	3b01      	subs	r3, #1
 802304c:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 802304e:	697a      	ldr	r2, [r7, #20]
 8023050:	693b      	ldr	r3, [r7, #16]
 8023052:	429a      	cmp	r2, r3
 8023054:	d202      	bcs.n	802305c <memcpy+0x20c>
 8023056:	687b      	ldr	r3, [r7, #4]
 8023058:	2b00      	cmp	r3, #0
 802305a:	d1ed      	bne.n	8023038 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 802305c:	68fb      	ldr	r3, [r7, #12]
}
 802305e:	4618      	mov	r0, r3
 8023060:	3734      	adds	r7, #52	@ 0x34
 8023062:	46bd      	mov	sp, r7
 8023064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023068:	4770      	bx	lr

0802306a <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 802306a:	b480      	push	{r7}
 802306c:	b08b      	sub	sp, #44	@ 0x2c
 802306e:	af00      	add	r7, sp, #0
 8023070:	60f8      	str	r0, [r7, #12]
 8023072:	60b9      	str	r1, [r7, #8]
 8023074:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8023076:	68fb      	ldr	r3, [r7, #12]
 8023078:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 802307a:	697a      	ldr	r2, [r7, #20]
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	4413      	add	r3, r2
 8023080:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	2b07      	cmp	r3, #7
 8023086:	d97b      	bls.n	8023180 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8023088:	68bb      	ldr	r3, [r7, #8]
 802308a:	b2db      	uxtb	r3, r3
 802308c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 802308e:	69fb      	ldr	r3, [r7, #28]
 8023090:	021a      	lsls	r2, r3, #8
 8023092:	69fb      	ldr	r3, [r7, #28]
 8023094:	041b      	lsls	r3, r3, #16
 8023096:	431a      	orrs	r2, r3
 8023098:	69fb      	ldr	r3, [r7, #28]
 802309a:	061b      	lsls	r3, r3, #24
 802309c:	4313      	orrs	r3, r2
 802309e:	69fa      	ldr	r2, [r7, #28]
 80230a0:	4313      	orrs	r3, r2
 80230a2:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 80230a4:	697b      	ldr	r3, [r7, #20]
 80230a6:	f003 0303 	and.w	r3, r3, #3
 80230aa:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 80230ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d010      	beq.n	80230d4 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 80230b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230b4:	f1c3 0304 	rsb	r3, r3, #4
 80230b8:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 80230ba:	e006      	b.n	80230ca <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 80230bc:	697b      	ldr	r3, [r7, #20]
 80230be:	68ba      	ldr	r2, [r7, #8]
 80230c0:	b2d2      	uxtb	r2, r2
 80230c2:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 80230c4:	697b      	ldr	r3, [r7, #20]
 80230c6:	3301      	adds	r3, #1
 80230c8:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 80230ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80230cc:	1e5a      	subs	r2, r3, #1
 80230ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80230d0:	2b00      	cmp	r3, #0
 80230d2:	d1f3      	bne.n	80230bc <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 80230d4:	693b      	ldr	r3, [r7, #16]
 80230d6:	f003 0303 	and.w	r3, r3, #3
 80230da:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 80230dc:	693b      	ldr	r3, [r7, #16]
 80230de:	f023 0303 	bic.w	r3, r3, #3
 80230e2:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 80230e4:	693a      	ldr	r2, [r7, #16]
 80230e6:	697b      	ldr	r3, [r7, #20]
 80230e8:	1ad3      	subs	r3, r2, r3
 80230ea:	109b      	asrs	r3, r3, #2
 80230ec:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 80230ee:	e024      	b.n	802313a <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 80230f0:	697b      	ldr	r3, [r7, #20]
 80230f2:	69fa      	ldr	r2, [r7, #28]
 80230f4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 80230f6:	697b      	ldr	r3, [r7, #20]
 80230f8:	3304      	adds	r3, #4
 80230fa:	69fa      	ldr	r2, [r7, #28]
 80230fc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 80230fe:	697b      	ldr	r3, [r7, #20]
 8023100:	3308      	adds	r3, #8
 8023102:	69fa      	ldr	r2, [r7, #28]
 8023104:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8023106:	697b      	ldr	r3, [r7, #20]
 8023108:	330c      	adds	r3, #12
 802310a:	69fa      	ldr	r2, [r7, #28]
 802310c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 802310e:	697b      	ldr	r3, [r7, #20]
 8023110:	3310      	adds	r3, #16
 8023112:	69fa      	ldr	r2, [r7, #28]
 8023114:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8023116:	697b      	ldr	r3, [r7, #20]
 8023118:	3314      	adds	r3, #20
 802311a:	69fa      	ldr	r2, [r7, #28]
 802311c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 802311e:	697b      	ldr	r3, [r7, #20]
 8023120:	3318      	adds	r3, #24
 8023122:	69fa      	ldr	r2, [r7, #28]
 8023124:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8023126:	697b      	ldr	r3, [r7, #20]
 8023128:	331c      	adds	r3, #28
 802312a:	69fa      	ldr	r2, [r7, #28]
 802312c:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 802312e:	697b      	ldr	r3, [r7, #20]
 8023130:	3320      	adds	r3, #32
 8023132:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8023134:	6a3b      	ldr	r3, [r7, #32]
 8023136:	3b08      	subs	r3, #8
 8023138:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802313a:	6a3b      	ldr	r3, [r7, #32]
 802313c:	2b08      	cmp	r3, #8
 802313e:	dcd7      	bgt.n	80230f0 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8023140:	e008      	b.n	8023154 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8023142:	697b      	ldr	r3, [r7, #20]
 8023144:	69fa      	ldr	r2, [r7, #28]
 8023146:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8023148:	697b      	ldr	r3, [r7, #20]
 802314a:	3304      	adds	r3, #4
 802314c:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 802314e:	687b      	ldr	r3, [r7, #4]
 8023150:	3304      	adds	r3, #4
 8023152:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8023154:	697a      	ldr	r2, [r7, #20]
 8023156:	693b      	ldr	r3, [r7, #16]
 8023158:	429a      	cmp	r2, r3
 802315a:	d202      	bcs.n	8023162 <memset+0xf8>
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	2b00      	cmp	r3, #0
 8023160:	d1ef      	bne.n	8023142 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8023162:	693a      	ldr	r2, [r7, #16]
 8023164:	69bb      	ldr	r3, [r7, #24]
 8023166:	4313      	orrs	r3, r2
 8023168:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 802316a:	e009      	b.n	8023180 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 802316c:	697b      	ldr	r3, [r7, #20]
 802316e:	68ba      	ldr	r2, [r7, #8]
 8023170:	b2d2      	uxtb	r2, r2
 8023172:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8023174:	697b      	ldr	r3, [r7, #20]
 8023176:	3301      	adds	r3, #1
 8023178:	617b      	str	r3, [r7, #20]
			ulBytes++;
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	3301      	adds	r3, #1
 802317e:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8023180:	697a      	ldr	r2, [r7, #20]
 8023182:	693b      	ldr	r3, [r7, #16]
 8023184:	429a      	cmp	r2, r3
 8023186:	d202      	bcs.n	802318e <memset+0x124>
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	2b00      	cmp	r3, #0
 802318c:	d1ee      	bne.n	802316c <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802318e:	68fb      	ldr	r3, [r7, #12]
}
 8023190:	4618      	mov	r0, r3
 8023192:	372c      	adds	r7, #44	@ 0x2c
 8023194:	46bd      	mov	sp, r7
 8023196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802319a:	4770      	bx	lr

0802319c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802319c:	b480      	push	{r7}
 802319e:	b083      	sub	sp, #12
 80231a0:	af00      	add	r7, sp, #0
 80231a2:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 80231a4:	2303      	movs	r3, #3
}
 80231a6:	4618      	mov	r0, r3
 80231a8:	370c      	adds	r7, #12
 80231aa:	46bd      	mov	sp, r7
 80231ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231b0:	4770      	bx	lr

080231b2 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 80231b2:	b480      	push	{r7}
 80231b4:	b083      	sub	sp, #12
 80231b6:	af00      	add	r7, sp, #0
 80231b8:	4603      	mov	r3, r0
 80231ba:	6039      	str	r1, [r7, #0]
 80231bc:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 80231be:	bf00      	nop
 80231c0:	370c      	adds	r7, #12
 80231c2:	46bd      	mov	sp, r7
 80231c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231c8:	4770      	bx	lr

080231ca <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 80231ca:	b580      	push	{r7, lr}
 80231cc:	b084      	sub	sp, #16
 80231ce:	af00      	add	r7, sp, #0
 80231d0:	60f8      	str	r0, [r7, #12]
 80231d2:	60b9      	str	r1, [r7, #8]
 80231d4:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 80231d6:	68fb      	ldr	r3, [r7, #12]
 80231d8:	68ba      	ldr	r2, [r7, #8]
 80231da:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 80231dc:	68fb      	ldr	r3, [r7, #12]
 80231de:	68ba      	ldr	r2, [r7, #8]
 80231e0:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 80231e2:	687b      	ldr	r3, [r7, #4]
 80231e4:	1e5a      	subs	r2, r3, #1
 80231e6:	68fb      	ldr	r3, [r7, #12]
 80231e8:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 80231ea:	68fb      	ldr	r3, [r7, #12]
 80231ec:	2200      	movs	r2, #0
 80231ee:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 80231f0:	68fb      	ldr	r3, [r7, #12]
 80231f2:	3310      	adds	r3, #16
 80231f4:	2210      	movs	r2, #16
 80231f6:	2100      	movs	r1, #0
 80231f8:	4618      	mov	r0, r3
 80231fa:	f7ff ff36 	bl	802306a <memset>
}
 80231fe:	bf00      	nop
 8023200:	3710      	adds	r7, #16
 8023202:	46bd      	mov	sp, r7
 8023204:	bd80      	pop	{r7, pc}

08023206 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8023206:	b580      	push	{r7, lr}
 8023208:	b082      	sub	sp, #8
 802320a:	af00      	add	r7, sp, #0
 802320c:	6078      	str	r0, [r7, #4]
 802320e:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	2b00      	cmp	r3, #0
 8023216:	d10d      	bne.n	8023234 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8023218:	683b      	ldr	r3, [r7, #0]
 802321a:	b2db      	uxtb	r3, r3
 802321c:	2214      	movs	r2, #20
 802321e:	4611      	mov	r1, r2
 8023220:	4618      	mov	r0, r3
 8023222:	f7ff ffc6 	bl	80231b2 <vOutputChar>
		apStr->curLen++;
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	68db      	ldr	r3, [r3, #12]
 802322a:	1c5a      	adds	r2, r3, #1
 802322c:	687b      	ldr	r3, [r7, #4]
 802322e:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023230:	2301      	movs	r3, #1
 8023232:	e022      	b.n	802327a <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8023234:	687b      	ldr	r3, [r7, #4]
 8023236:	681a      	ldr	r2, [r3, #0]
 8023238:	687b      	ldr	r3, [r7, #4]
 802323a:	689b      	ldr	r3, [r3, #8]
 802323c:	429a      	cmp	r2, r3
 802323e:	d20e      	bcs.n	802325e <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	681b      	ldr	r3, [r3, #0]
 8023244:	1c59      	adds	r1, r3, #1
 8023246:	687a      	ldr	r2, [r7, #4]
 8023248:	6011      	str	r1, [r2, #0]
 802324a:	683a      	ldr	r2, [r7, #0]
 802324c:	b2d2      	uxtb	r2, r2
 802324e:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	68db      	ldr	r3, [r3, #12]
 8023254:	1c5a      	adds	r2, r3, #1
 8023256:	687b      	ldr	r3, [r7, #4]
 8023258:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802325a:	2301      	movs	r3, #1
 802325c:	e00d      	b.n	802327a <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	681a      	ldr	r2, [r3, #0]
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	689b      	ldr	r3, [r3, #8]
 8023266:	429a      	cmp	r2, r3
 8023268:	d106      	bne.n	8023278 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	1c59      	adds	r1, r3, #1
 8023270:	687a      	ldr	r2, [r7, #4]
 8023272:	6011      	str	r1, [r2, #0]
 8023274:	2200      	movs	r2, #0
 8023276:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023278:	2300      	movs	r3, #0
}
 802327a:	4618      	mov	r0, r3
 802327c:	3708      	adds	r7, #8
 802327e:	46bd      	mov	sp, r7
 8023280:	bd80      	pop	{r7, pc}

08023282 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8023282:	b580      	push	{r7, lr}
 8023284:	b082      	sub	sp, #8
 8023286:	af00      	add	r7, sp, #0
 8023288:	6078      	str	r0, [r7, #4]
 802328a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802328c:	687b      	ldr	r3, [r7, #4]
 802328e:	681b      	ldr	r3, [r3, #0]
 8023290:	2b00      	cmp	r3, #0
 8023292:	d112      	bne.n	80232ba <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8023294:	683b      	ldr	r3, [r7, #0]
 8023296:	b2db      	uxtb	r3, r3
 8023298:	2214      	movs	r2, #20
 802329a:	4611      	mov	r1, r2
 802329c:	4618      	mov	r0, r3
 802329e:	f7ff ff88 	bl	80231b2 <vOutputChar>
		if( c == 0 )
 80232a2:	683b      	ldr	r3, [r7, #0]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	d101      	bne.n	80232ac <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 80232a8:	2300      	movs	r3, #0
 80232aa:	e02e      	b.n	802330a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	68db      	ldr	r3, [r3, #12]
 80232b0:	1c5a      	adds	r2, r3, #1
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80232b6:	2301      	movs	r3, #1
 80232b8:	e027      	b.n	802330a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	681a      	ldr	r2, [r3, #0]
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	689b      	ldr	r3, [r3, #8]
 80232c2:	429a      	cmp	r2, r3
 80232c4:	d213      	bcs.n	80232ee <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	681b      	ldr	r3, [r3, #0]
 80232ca:	1c59      	adds	r1, r3, #1
 80232cc:	687a      	ldr	r2, [r7, #4]
 80232ce:	6011      	str	r1, [r2, #0]
 80232d0:	683a      	ldr	r2, [r7, #0]
 80232d2:	b2d2      	uxtb	r2, r2
 80232d4:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 80232d6:	683b      	ldr	r3, [r7, #0]
 80232d8:	2b00      	cmp	r3, #0
 80232da:	d101      	bne.n	80232e0 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 80232dc:	2300      	movs	r3, #0
 80232de:	e014      	b.n	802330a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80232e0:	687b      	ldr	r3, [r7, #4]
 80232e2:	68db      	ldr	r3, [r3, #12]
 80232e4:	1c5a      	adds	r2, r3, #1
 80232e6:	687b      	ldr	r3, [r7, #4]
 80232e8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80232ea:	2301      	movs	r3, #1
 80232ec:	e00d      	b.n	802330a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 80232ee:	687b      	ldr	r3, [r7, #4]
 80232f0:	681a      	ldr	r2, [r3, #0]
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	689b      	ldr	r3, [r3, #8]
 80232f6:	429a      	cmp	r2, r3
 80232f8:	d106      	bne.n	8023308 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	1c59      	adds	r1, r3, #1
 8023300:	687a      	ldr	r2, [r7, #4]
 8023302:	6011      	str	r1, [r2, #0]
 8023304:	2200      	movs	r2, #0
 8023306:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023308:	2300      	movs	r3, #0
}
 802330a:	4618      	mov	r0, r3
 802330c:	3708      	adds	r7, #8
 802330e:	46bd      	mov	sp, r7
 8023310:	bd80      	pop	{r7, pc}
	...

08023314 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8023314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023316:	b085      	sub	sp, #20
 8023318:	af00      	add	r7, sp, #0
 802331a:	6078      	str	r0, [r7, #4]
 802331c:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 802331e:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8023320:	683b      	ldr	r3, [r7, #0]
 8023322:	4618      	mov	r0, r3
 8023324:	f7ff ff3a 	bl	802319c <xApplicationMemoryPermissions>
 8023328:	4603      	mov	r3, r0
 802332a:	2b00      	cmp	r3, #0
 802332c:	d101      	bne.n	8023332 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 802332e:	4b4c      	ldr	r3, [pc, #304]	@ (8023460 <prints+0x14c>)
 8023330:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	695b      	ldr	r3, [r3, #20]
 8023336:	2b00      	cmp	r3, #0
 8023338:	dd1b      	ble.n	8023372 <prints+0x5e>
	{
		register int count = 0;
 802333a:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 802333c:	683d      	ldr	r5, [r7, #0]
 802333e:	e001      	b.n	8023344 <prints+0x30>
		{
			++count;
 8023340:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8023342:	3501      	adds	r5, #1
 8023344:	782b      	ldrb	r3, [r5, #0]
 8023346:	2b00      	cmp	r3, #0
 8023348:	d1fa      	bne.n	8023340 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	695b      	ldr	r3, [r3, #20]
 802334e:	429c      	cmp	r4, r3
 8023350:	db03      	blt.n	802335a <prints+0x46>
		{
			apBuf->flags.width = 0;
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	2200      	movs	r2, #0
 8023356:	615a      	str	r2, [r3, #20]
 8023358:	e004      	b.n	8023364 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 802335a:	687b      	ldr	r3, [r7, #4]
 802335c:	695b      	ldr	r3, [r3, #20]
 802335e:	1b1a      	subs	r2, r3, r4
 8023360:	687b      	ldr	r3, [r7, #4]
 8023362:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	7f1b      	ldrb	r3, [r3, #28]
 8023368:	f003 0302 	and.w	r3, r3, #2
 802336c:	2b00      	cmp	r3, #0
 802336e:	d000      	beq.n	8023372 <prints+0x5e>
		{
			padchar = '0';
 8023370:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8023372:	687b      	ldr	r3, [r7, #4]
 8023374:	7f1b      	ldrb	r3, [r3, #28]
 8023376:	f003 0301 	and.w	r3, r3, #1
 802337a:	2b00      	cmp	r3, #0
 802337c:	d112      	bne.n	80233a4 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802337e:	e00d      	b.n	802339c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8023380:	4631      	mov	r1, r6
 8023382:	6878      	ldr	r0, [r7, #4]
 8023384:	f7ff ff3f 	bl	8023206 <strbuf_printchar>
 8023388:	4603      	mov	r3, r0
 802338a:	2b00      	cmp	r3, #0
 802338c:	d101      	bne.n	8023392 <prints+0x7e>
			{
				return pdFALSE;
 802338e:	2300      	movs	r3, #0
 8023390:	e062      	b.n	8023458 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8023392:	687b      	ldr	r3, [r7, #4]
 8023394:	695b      	ldr	r3, [r3, #20]
 8023396:	1e5a      	subs	r2, r3, #1
 8023398:	687b      	ldr	r3, [r7, #4]
 802339a:	615a      	str	r2, [r3, #20]
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	695b      	ldr	r3, [r3, #20]
 80233a0:	2b00      	cmp	r3, #0
 80233a2:	dced      	bgt.n	8023380 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 80233a4:	687b      	ldr	r3, [r7, #4]
 80233a6:	7f9b      	ldrb	r3, [r3, #30]
 80233a8:	f003 0302 	and.w	r3, r3, #2
 80233ac:	b2db      	uxtb	r3, r3
 80233ae:	2b00      	cmp	r3, #0
 80233b0:	d036      	beq.n	8023420 <prints+0x10c>
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	7f1b      	ldrb	r3, [r3, #28]
 80233b6:	2b01      	cmp	r3, #1
 80233b8:	d132      	bne.n	8023420 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 80233ba:	6838      	ldr	r0, [r7, #0]
 80233bc:	f7dc ff9a 	bl	80002f4 <strlen>
 80233c0:	4603      	mov	r3, r0
 80233c2:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	699b      	ldr	r3, [r3, #24]
 80233c8:	68ba      	ldr	r2, [r7, #8]
 80233ca:	429a      	cmp	r2, r3
 80233cc:	da28      	bge.n	8023420 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 80233ce:	687b      	ldr	r3, [r7, #4]
 80233d0:	699a      	ldr	r2, [r3, #24]
 80233d2:	68bb      	ldr	r3, [r7, #8]
 80233d4:	1ad3      	subs	r3, r2, r3
 80233d6:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 80233d8:	e00b      	b.n	80233f2 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 80233da:	2130      	movs	r1, #48	@ 0x30
 80233dc:	6878      	ldr	r0, [r7, #4]
 80233de:	f7ff ff12 	bl	8023206 <strbuf_printchar>
 80233e2:	4603      	mov	r3, r0
 80233e4:	2b00      	cmp	r3, #0
 80233e6:	d101      	bne.n	80233ec <prints+0xd8>
				{
					return pdFALSE;
 80233e8:	2300      	movs	r3, #0
 80233ea:	e035      	b.n	8023458 <prints+0x144>
			for( ; i; i-- )
 80233ec:	68fb      	ldr	r3, [r7, #12]
 80233ee:	3b01      	subs	r3, #1
 80233f0:	60fb      	str	r3, [r7, #12]
 80233f2:	68fb      	ldr	r3, [r7, #12]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	d1f0      	bne.n	80233da <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80233f8:	e012      	b.n	8023420 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 80233fa:	683b      	ldr	r3, [r7, #0]
 80233fc:	781b      	ldrb	r3, [r3, #0]
 80233fe:	4619      	mov	r1, r3
 8023400:	6878      	ldr	r0, [r7, #4]
 8023402:	f7ff ff00 	bl	8023206 <strbuf_printchar>
 8023406:	4603      	mov	r3, r0
 8023408:	2b00      	cmp	r3, #0
 802340a:	d101      	bne.n	8023410 <prints+0xfc>
		{
			return pdFALSE;
 802340c:	2300      	movs	r3, #0
 802340e:	e023      	b.n	8023458 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8023410:	683b      	ldr	r3, [r7, #0]
 8023412:	3301      	adds	r3, #1
 8023414:	603b      	str	r3, [r7, #0]
 8023416:	687b      	ldr	r3, [r7, #4]
 8023418:	699b      	ldr	r3, [r3, #24]
 802341a:	1e5a      	subs	r2, r3, #1
 802341c:	687b      	ldr	r3, [r7, #4]
 802341e:	619a      	str	r2, [r3, #24]
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	699b      	ldr	r3, [r3, #24]
 8023424:	2b00      	cmp	r3, #0
 8023426:	d012      	beq.n	802344e <prints+0x13a>
 8023428:	683b      	ldr	r3, [r7, #0]
 802342a:	781b      	ldrb	r3, [r3, #0]
 802342c:	2b00      	cmp	r3, #0
 802342e:	d1e4      	bne.n	80233fa <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8023430:	e00d      	b.n	802344e <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8023432:	4631      	mov	r1, r6
 8023434:	6878      	ldr	r0, [r7, #4]
 8023436:	f7ff fee6 	bl	8023206 <strbuf_printchar>
 802343a:	4603      	mov	r3, r0
 802343c:	2b00      	cmp	r3, #0
 802343e:	d101      	bne.n	8023444 <prints+0x130>
		{
			return pdFALSE;
 8023440:	2300      	movs	r3, #0
 8023442:	e009      	b.n	8023458 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	695b      	ldr	r3, [r3, #20]
 8023448:	1e5a      	subs	r2, r3, #1
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	615a      	str	r2, [r3, #20]
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	695b      	ldr	r3, [r3, #20]
 8023452:	2b00      	cmp	r3, #0
 8023454:	dced      	bgt.n	8023432 <prints+0x11e>
		}
	}

	return pdTRUE;
 8023456:	2301      	movs	r3, #1
}
 8023458:	4618      	mov	r0, r3
 802345a:	3714      	adds	r7, #20
 802345c:	46bd      	mov	sp, r7
 802345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023460:	08028180 	.word	0x08028180

08023464 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8023464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023468:	b087      	sub	sp, #28
 802346a:	af00      	add	r7, sp, #0
 802346c:	6078      	str	r0, [r7, #4]
 802346e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8023470:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8023474:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8023476:	687b      	ldr	r3, [r7, #4]
 8023478:	691b      	ldr	r3, [r3, #16]
 802347a:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802347c:	687a      	ldr	r2, [r7, #4]
 802347e:	7f93      	ldrb	r3, [r2, #30]
 8023480:	f043 0302 	orr.w	r3, r3, #2
 8023484:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8023486:	683b      	ldr	r3, [r7, #0]
 8023488:	2b00      	cmp	r3, #0
 802348a:	d10b      	bne.n	80234a4 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802348c:	2330      	movs	r3, #48	@ 0x30
 802348e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8023490:	2300      	movs	r3, #0
 8023492:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8023494:	f107 030c 	add.w	r3, r7, #12
 8023498:	4619      	mov	r1, r3
 802349a:	6878      	ldr	r0, [r7, #4]
 802349c:	f7ff ff3a 	bl	8023314 <prints>
 80234a0:	4603      	mov	r3, r0
 80234a2:	e067      	b.n	8023574 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 80234a4:	687b      	ldr	r3, [r7, #4]
 80234a6:	7f9b      	ldrb	r3, [r3, #30]
 80234a8:	f003 0301 	and.w	r3, r3, #1
 80234ac:	b2db      	uxtb	r3, r3
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	d009      	beq.n	80234c6 <printi+0x62>
 80234b2:	2e0a      	cmp	r6, #10
 80234b4:	d107      	bne.n	80234c6 <printi+0x62>
 80234b6:	683b      	ldr	r3, [r7, #0]
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	da04      	bge.n	80234c6 <printi+0x62>
	{
		neg = 1;
 80234bc:	f04f 0901 	mov.w	r9, #1
		u = -i;
 80234c0:	683b      	ldr	r3, [r7, #0]
 80234c2:	425b      	negs	r3, r3
 80234c4:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 80234c6:	f107 040c 	add.w	r4, r7, #12
 80234ca:	340b      	adds	r4, #11

	*s = '\0';
 80234cc:	2300      	movs	r3, #0
 80234ce:	7023      	strb	r3, [r4, #0]
	switch( base )
 80234d0:	2e10      	cmp	r6, #16
 80234d2:	d017      	beq.n	8023504 <printi+0xa0>
 80234d4:	2e10      	cmp	r6, #16
 80234d6:	d829      	bhi.n	802352c <printi+0xc8>
 80234d8:	2e08      	cmp	r6, #8
 80234da:	d024      	beq.n	8023526 <printi+0xc2>
 80234dc:	2e0a      	cmp	r6, #10
 80234de:	d022      	beq.n	8023526 <printi+0xc2>
 80234e0:	e024      	b.n	802352c <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 80234e2:	462b      	mov	r3, r5
 80234e4:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 80234e8:	f1b8 0f09 	cmp.w	r8, #9
 80234ec:	dd03      	ble.n	80234f6 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	7f5b      	ldrb	r3, [r3, #29]
 80234f2:	3b3a      	subs	r3, #58	@ 0x3a
 80234f4:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 80234f6:	fa5f f388 	uxtb.w	r3, r8
 80234fa:	3c01      	subs	r4, #1
 80234fc:	3330      	adds	r3, #48	@ 0x30
 80234fe:	b2db      	uxtb	r3, r3
 8023500:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8023502:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8023504:	2d00      	cmp	r5, #0
 8023506:	d1ec      	bne.n	80234e2 <printi+0x7e>
		}
		break;
 8023508:	e010      	b.n	802352c <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 802350a:	fbb5 f3f6 	udiv	r3, r5, r6
 802350e:	fb06 f303 	mul.w	r3, r6, r3
 8023512:	1aeb      	subs	r3, r5, r3
 8023514:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8023516:	fa5f f388 	uxtb.w	r3, r8
 802351a:	3c01      	subs	r4, #1
 802351c:	3330      	adds	r3, #48	@ 0x30
 802351e:	b2db      	uxtb	r3, r3
 8023520:	7023      	strb	r3, [r4, #0]
			u /= base;
 8023522:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 8023526:	2d00      	cmp	r5, #0
 8023528:	d1ef      	bne.n	802350a <printi+0xa6>
		}
		break;
 802352a:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 802352c:	f1b9 0f00 	cmp.w	r9, #0
 8023530:	d01b      	beq.n	802356a <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	695b      	ldr	r3, [r3, #20]
 8023536:	2b00      	cmp	r3, #0
 8023538:	d014      	beq.n	8023564 <printi+0x100>
 802353a:	687b      	ldr	r3, [r7, #4]
 802353c:	7f1b      	ldrb	r3, [r3, #28]
 802353e:	f003 0302 	and.w	r3, r3, #2
 8023542:	2b00      	cmp	r3, #0
 8023544:	d00e      	beq.n	8023564 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8023546:	212d      	movs	r1, #45	@ 0x2d
 8023548:	6878      	ldr	r0, [r7, #4]
 802354a:	f7ff fe5c 	bl	8023206 <strbuf_printchar>
 802354e:	4603      	mov	r3, r0
 8023550:	2b00      	cmp	r3, #0
 8023552:	d101      	bne.n	8023558 <printi+0xf4>
			{
				return pdFALSE;
 8023554:	2300      	movs	r3, #0
 8023556:	e00d      	b.n	8023574 <printi+0x110>
			}
			--apBuf->flags.width;
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	695b      	ldr	r3, [r3, #20]
 802355c:	1e5a      	subs	r2, r3, #1
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	615a      	str	r2, [r3, #20]
 8023562:	e002      	b.n	802356a <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8023564:	3c01      	subs	r4, #1
 8023566:	232d      	movs	r3, #45	@ 0x2d
 8023568:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 802356a:	4621      	mov	r1, r4
 802356c:	6878      	ldr	r0, [r7, #4]
 802356e:	f7ff fed1 	bl	8023314 <prints>
 8023572:	4603      	mov	r3, r0
}
 8023574:	4618      	mov	r0, r3
 8023576:	371c      	adds	r7, #28
 8023578:	46bd      	mov	sp, r7
 802357a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08023580 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8023580:	b590      	push	{r4, r7, lr}
 8023582:	b089      	sub	sp, #36	@ 0x24
 8023584:	af02      	add	r7, sp, #8
 8023586:	6078      	str	r0, [r7, #4]
 8023588:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802358a:	683b      	ldr	r3, [r7, #0]
 802358c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802358e:	683b      	ldr	r3, [r7, #0]
 8023590:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8023592:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8023594:	683b      	ldr	r3, [r7, #0]
 8023596:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8023598:	b2db      	uxtb	r3, r3
 802359a:	683a      	ldr	r2, [r7, #0]
 802359c:	b2d2      	uxtb	r2, r2
 802359e:	f107 0008 	add.w	r0, r7, #8
 80235a2:	9201      	str	r2, [sp, #4]
 80235a4:	9300      	str	r3, [sp, #0]
 80235a6:	4623      	mov	r3, r4
 80235a8:	460a      	mov	r2, r1
 80235aa:	4909      	ldr	r1, [pc, #36]	@ (80235d0 <printIp+0x50>)
 80235ac:	f000 fa81 	bl	8023ab2 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80235b0:	687a      	ldr	r2, [r7, #4]
 80235b2:	7f93      	ldrb	r3, [r2, #30]
 80235b4:	f043 0302 	orr.w	r3, r3, #2
 80235b8:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 80235ba:	f107 0308 	add.w	r3, r7, #8
 80235be:	4619      	mov	r1, r3
 80235c0:	6878      	ldr	r0, [r7, #4]
 80235c2:	f7ff fea7 	bl	8023314 <prints>

	return pdTRUE;
 80235c6:	2301      	movs	r3, #1
}
 80235c8:	4618      	mov	r0, r3
 80235ca:	371c      	adds	r7, #28
 80235cc:	46bd      	mov	sp, r7
 80235ce:	bd90      	pop	{r4, r7, pc}
 80235d0:	08028188 	.word	0x08028188

080235d4 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 80235d4:	b480      	push	{r7}
 80235d6:	b083      	sub	sp, #12
 80235d8:	af00      	add	r7, sp, #0
 80235da:	4603      	mov	r3, r0
 80235dc:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 80235de:	4a0b      	ldr	r2, [pc, #44]	@ (802360c <usNetToHost+0x38>)
 80235e0:	4b0b      	ldr	r3, [pc, #44]	@ (8023610 <usNetToHost+0x3c>)
 80235e2:	429a      	cmp	r2, r3
 80235e4:	d101      	bne.n	80235ea <usNetToHost+0x16>
	{
		return usValue;
 80235e6:	88fb      	ldrh	r3, [r7, #6]
 80235e8:	e009      	b.n	80235fe <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 80235ea:	88fb      	ldrh	r3, [r7, #6]
 80235ec:	021b      	lsls	r3, r3, #8
 80235ee:	b21a      	sxth	r2, r3
 80235f0:	88fb      	ldrh	r3, [r7, #6]
 80235f2:	0a1b      	lsrs	r3, r3, #8
 80235f4:	b29b      	uxth	r3, r3
 80235f6:	b21b      	sxth	r3, r3
 80235f8:	4313      	orrs	r3, r2
 80235fa:	b21b      	sxth	r3, r3
 80235fc:	b29b      	uxth	r3, r3
	}
}
 80235fe:	4618      	mov	r0, r3
 8023600:	370c      	adds	r7, #12
 8023602:	46bd      	mov	sp, r7
 8023604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023608:	4770      	bx	lr
 802360a:	bf00      	nop
 802360c:	03020100 	.word	0x03020100
 8023610:	00010203 	.word	0x00010203

08023614 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8023614:	b580      	push	{r7, lr}
 8023616:	b088      	sub	sp, #32
 8023618:	af00      	add	r7, sp, #0
 802361a:	6078      	str	r0, [r7, #4]
 802361c:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 802361e:	f04f 33ff 	mov.w	r3, #4294967295
 8023622:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8023624:	2300      	movs	r3, #0
 8023626:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8023628:	2300      	movs	r3, #0
 802362a:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 802362c:	2300      	movs	r3, #0
 802362e:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8023630:	2300      	movs	r3, #0
 8023632:	61fb      	str	r3, [r7, #28]
 8023634:	e026      	b.n	8023684 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8023636:	69fb      	ldr	r3, [r7, #28]
 8023638:	005b      	lsls	r3, r3, #1
 802363a:	683a      	ldr	r2, [r7, #0]
 802363c:	4413      	add	r3, r2
 802363e:	881b      	ldrh	r3, [r3, #0]
 8023640:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 8023642:	897b      	ldrh	r3, [r7, #10]
 8023644:	2b00      	cmp	r3, #0
 8023646:	d107      	bne.n	8023658 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8023648:	68fb      	ldr	r3, [r7, #12]
 802364a:	2b00      	cmp	r3, #0
 802364c:	d101      	bne.n	8023652 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 802364e:	69fb      	ldr	r3, [r7, #28]
 8023650:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 8023652:	68fb      	ldr	r3, [r7, #12]
 8023654:	3301      	adds	r3, #1
 8023656:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8023658:	897b      	ldrh	r3, [r7, #10]
 802365a:	2b00      	cmp	r3, #0
 802365c:	d102      	bne.n	8023664 <printIPv6+0x50>
 802365e:	69fb      	ldr	r3, [r7, #28]
 8023660:	2b07      	cmp	r3, #7
 8023662:	d10c      	bne.n	802367e <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8023664:	68fb      	ldr	r3, [r7, #12]
 8023666:	2b01      	cmp	r3, #1
 8023668:	dd07      	ble.n	802367a <printIPv6+0x66>
 802366a:	697a      	ldr	r2, [r7, #20]
 802366c:	68fb      	ldr	r3, [r7, #12]
 802366e:	429a      	cmp	r2, r3
 8023670:	da03      	bge.n	802367a <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8023672:	68fb      	ldr	r3, [r7, #12]
 8023674:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8023676:	693b      	ldr	r3, [r7, #16]
 8023678:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 802367a:	2300      	movs	r3, #0
 802367c:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802367e:	69fb      	ldr	r3, [r7, #28]
 8023680:	3301      	adds	r3, #1
 8023682:	61fb      	str	r3, [r7, #28]
 8023684:	69fb      	ldr	r3, [r7, #28]
 8023686:	2b07      	cmp	r3, #7
 8023688:	ddd5      	ble.n	8023636 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802368a:	687b      	ldr	r3, [r7, #4]
 802368c:	2210      	movs	r2, #16
 802368e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	2261      	movs	r2, #97	@ 0x61
 8023694:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8023696:	2300      	movs	r3, #0
 8023698:	61fb      	str	r3, [r7, #28]
 802369a:	e02b      	b.n	80236f4 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 802369c:	69fa      	ldr	r2, [r7, #28]
 802369e:	69bb      	ldr	r3, [r7, #24]
 80236a0:	429a      	cmp	r2, r3
 80236a2:	d110      	bne.n	80236c6 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 80236a4:	697b      	ldr	r3, [r7, #20]
 80236a6:	3b01      	subs	r3, #1
 80236a8:	69fa      	ldr	r2, [r7, #28]
 80236aa:	4413      	add	r3, r2
 80236ac:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 80236ae:	213a      	movs	r1, #58	@ 0x3a
 80236b0:	6878      	ldr	r0, [r7, #4]
 80236b2:	f7ff fda8 	bl	8023206 <strbuf_printchar>
			if( iIndex == 7 )
 80236b6:	69fb      	ldr	r3, [r7, #28]
 80236b8:	2b07      	cmp	r3, #7
 80236ba:	d118      	bne.n	80236ee <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 80236bc:	213a      	movs	r1, #58	@ 0x3a
 80236be:	6878      	ldr	r0, [r7, #4]
 80236c0:	f7ff fda1 	bl	8023206 <strbuf_printchar>
 80236c4:	e013      	b.n	80236ee <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 80236c6:	69fb      	ldr	r3, [r7, #28]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	dd03      	ble.n	80236d4 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 80236cc:	213a      	movs	r1, #58	@ 0x3a
 80236ce:	6878      	ldr	r0, [r7, #4]
 80236d0:	f7ff fd99 	bl	8023206 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 80236d4:	69fb      	ldr	r3, [r7, #28]
 80236d6:	005b      	lsls	r3, r3, #1
 80236d8:	683a      	ldr	r2, [r7, #0]
 80236da:	4413      	add	r3, r2
 80236dc:	881b      	ldrh	r3, [r3, #0]
 80236de:	4618      	mov	r0, r3
 80236e0:	f7ff ff78 	bl	80235d4 <usNetToHost>
 80236e4:	4603      	mov	r3, r0
 80236e6:	4619      	mov	r1, r3
 80236e8:	6878      	ldr	r0, [r7, #4]
 80236ea:	f7ff febb 	bl	8023464 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80236ee:	69fb      	ldr	r3, [r7, #28]
 80236f0:	3301      	adds	r3, #1
 80236f2:	61fb      	str	r3, [r7, #28]
 80236f4:	69fb      	ldr	r3, [r7, #28]
 80236f6:	2b07      	cmp	r3, #7
 80236f8:	ddd0      	ble.n	802369c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 80236fa:	2301      	movs	r3, #1
}
 80236fc:	4618      	mov	r0, r3
 80236fe:	3720      	adds	r7, #32
 8023700:	46bd      	mov	sp, r7
 8023702:	bd80      	pop	{r7, pc}

08023704 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8023704:	b590      	push	{r4, r7, lr}
 8023706:	b087      	sub	sp, #28
 8023708:	af00      	add	r7, sp, #0
 802370a:	60f8      	str	r0, [r7, #12]
 802370c:	60b9      	str	r1, [r7, #8]
 802370e:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8023710:	68bb      	ldr	r3, [r7, #8]
 8023712:	1c5a      	adds	r2, r3, #1
 8023714:	60ba      	str	r2, [r7, #8]
 8023716:	781b      	ldrb	r3, [r3, #0]
 8023718:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 802371a:	697b      	ldr	r3, [r7, #20]
 802371c:	2b25      	cmp	r3, #37	@ 0x25
 802371e:	d00f      	beq.n	8023740 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8023720:	6979      	ldr	r1, [r7, #20]
 8023722:	68f8      	ldr	r0, [r7, #12]
 8023724:	f7ff fdad 	bl	8023282 <strbuf_printchar_inline>
 8023728:	4603      	mov	r3, r0
 802372a:	2b00      	cmp	r3, #0
 802372c:	f000 817e 	beq.w	8023a2c <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8023730:	68bb      	ldr	r3, [r7, #8]
 8023732:	1c5a      	adds	r2, r3, #1
 8023734:	60ba      	str	r2, [r7, #8]
 8023736:	781b      	ldrb	r3, [r3, #0]
 8023738:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 802373a:	697b      	ldr	r3, [r7, #20]
 802373c:	2b25      	cmp	r3, #37	@ 0x25
 802373e:	d1ef      	bne.n	8023720 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8023740:	68bb      	ldr	r3, [r7, #8]
 8023742:	1c5a      	adds	r2, r3, #1
 8023744:	60ba      	str	r2, [r7, #8]
 8023746:	781b      	ldrb	r3, [r3, #0]
 8023748:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 802374a:	697b      	ldr	r3, [r7, #20]
 802374c:	2b00      	cmp	r3, #0
 802374e:	f000 8165 	beq.w	8023a1c <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8023752:	697b      	ldr	r3, [r7, #20]
 8023754:	2b25      	cmp	r3, #37	@ 0x25
 8023756:	d108      	bne.n	802376a <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8023758:	6979      	ldr	r1, [r7, #20]
 802375a:	68f8      	ldr	r0, [r7, #12]
 802375c:	f7ff fd53 	bl	8023206 <strbuf_printchar>
 8023760:	4603      	mov	r3, r0
 8023762:	2b00      	cmp	r3, #0
 8023764:	f040 814e 	bne.w	8023a04 <tiny_print+0x300>
			{
				return;
 8023768:	e161      	b.n	8023a2e <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 802376a:	68fb      	ldr	r3, [r7, #12]
 802376c:	3310      	adds	r3, #16
 802376e:	2210      	movs	r2, #16
 8023770:	2100      	movs	r1, #0
 8023772:	4618      	mov	r0, r3
 8023774:	f7ff fc79 	bl	802306a <memset>

		if( ch == '-' )
 8023778:	697b      	ldr	r3, [r7, #20]
 802377a:	2b2d      	cmp	r3, #45	@ 0x2d
 802377c:	d114      	bne.n	80237a8 <tiny_print+0xa4>
		{
			ch = *( format++ );
 802377e:	68bb      	ldr	r3, [r7, #8]
 8023780:	1c5a      	adds	r2, r3, #1
 8023782:	60ba      	str	r2, [r7, #8]
 8023784:	781b      	ldrb	r3, [r3, #0]
 8023786:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8023788:	68fb      	ldr	r3, [r7, #12]
 802378a:	2201      	movs	r2, #1
 802378c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802378e:	e00b      	b.n	80237a8 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8023790:	68bb      	ldr	r3, [r7, #8]
 8023792:	1c5a      	adds	r2, r3, #1
 8023794:	60ba      	str	r2, [r7, #8]
 8023796:	781b      	ldrb	r3, [r3, #0]
 8023798:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802379a:	68fb      	ldr	r3, [r7, #12]
 802379c:	7f1b      	ldrb	r3, [r3, #28]
 802379e:	f043 0302 	orr.w	r3, r3, #2
 80237a2:	b2da      	uxtb	r2, r3
 80237a4:	68fb      	ldr	r3, [r7, #12]
 80237a6:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 80237a8:	697b      	ldr	r3, [r7, #20]
 80237aa:	2b30      	cmp	r3, #48	@ 0x30
 80237ac:	d0f0      	beq.n	8023790 <tiny_print+0x8c>
		}
		if( ch == '*' )
 80237ae:	697b      	ldr	r3, [r7, #20]
 80237b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80237b2:	d120      	bne.n	80237f6 <tiny_print+0xf2>
		{
			ch = *( format++ );
 80237b4:	68bb      	ldr	r3, [r7, #8]
 80237b6:	1c5a      	adds	r2, r3, #1
 80237b8:	60ba      	str	r2, [r7, #8]
 80237ba:	781b      	ldrb	r3, [r3, #0]
 80237bc:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	1d1a      	adds	r2, r3, #4
 80237c2:	607a      	str	r2, [r7, #4]
 80237c4:	681a      	ldr	r2, [r3, #0]
 80237c6:	68fb      	ldr	r3, [r7, #12]
 80237c8:	615a      	str	r2, [r3, #20]
 80237ca:	e01a      	b.n	8023802 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	695a      	ldr	r2, [r3, #20]
 80237d0:	4613      	mov	r3, r2
 80237d2:	009b      	lsls	r3, r3, #2
 80237d4:	4413      	add	r3, r2
 80237d6:	005b      	lsls	r3, r3, #1
 80237d8:	461a      	mov	r2, r3
 80237da:	68fb      	ldr	r3, [r7, #12]
 80237dc:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 80237de:	68fb      	ldr	r3, [r7, #12]
 80237e0:	695a      	ldr	r2, [r3, #20]
 80237e2:	697b      	ldr	r3, [r7, #20]
 80237e4:	3b30      	subs	r3, #48	@ 0x30
 80237e6:	441a      	add	r2, r3
 80237e8:	68fb      	ldr	r3, [r7, #12]
 80237ea:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 80237ec:	68bb      	ldr	r3, [r7, #8]
 80237ee:	1c5a      	adds	r2, r3, #1
 80237f0:	60ba      	str	r2, [r7, #8]
 80237f2:	781b      	ldrb	r3, [r3, #0]
 80237f4:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 80237f6:	697b      	ldr	r3, [r7, #20]
 80237f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80237fa:	dd02      	ble.n	8023802 <tiny_print+0xfe>
 80237fc:	697b      	ldr	r3, [r7, #20]
 80237fe:	2b39      	cmp	r3, #57	@ 0x39
 8023800:	dde4      	ble.n	80237cc <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8023802:	697b      	ldr	r3, [r7, #20]
 8023804:	2b2e      	cmp	r3, #46	@ 0x2e
 8023806:	d12e      	bne.n	8023866 <tiny_print+0x162>
		{
			ch = *( format++ );
 8023808:	68bb      	ldr	r3, [r7, #8]
 802380a:	1c5a      	adds	r2, r3, #1
 802380c:	60ba      	str	r2, [r7, #8]
 802380e:	781b      	ldrb	r3, [r3, #0]
 8023810:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8023812:	697b      	ldr	r3, [r7, #20]
 8023814:	2b2a      	cmp	r3, #42	@ 0x2a
 8023816:	d120      	bne.n	802385a <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	1d1a      	adds	r2, r3, #4
 802381c:	607a      	str	r2, [r7, #4]
 802381e:	681a      	ldr	r2, [r3, #0]
 8023820:	68fb      	ldr	r3, [r7, #12]
 8023822:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8023824:	68bb      	ldr	r3, [r7, #8]
 8023826:	1c5a      	adds	r2, r3, #1
 8023828:	60ba      	str	r2, [r7, #8]
 802382a:	781b      	ldrb	r3, [r3, #0]
 802382c:	617b      	str	r3, [r7, #20]
 802382e:	e01a      	b.n	8023866 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8023830:	68fb      	ldr	r3, [r7, #12]
 8023832:	699a      	ldr	r2, [r3, #24]
 8023834:	4613      	mov	r3, r2
 8023836:	009b      	lsls	r3, r3, #2
 8023838:	4413      	add	r3, r2
 802383a:	005b      	lsls	r3, r3, #1
 802383c:	461a      	mov	r2, r3
 802383e:	68fb      	ldr	r3, [r7, #12]
 8023840:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8023842:	68fb      	ldr	r3, [r7, #12]
 8023844:	699a      	ldr	r2, [r3, #24]
 8023846:	697b      	ldr	r3, [r7, #20]
 8023848:	3b30      	subs	r3, #48	@ 0x30
 802384a:	441a      	add	r2, r3
 802384c:	68fb      	ldr	r3, [r7, #12]
 802384e:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8023850:	68bb      	ldr	r3, [r7, #8]
 8023852:	1c5a      	adds	r2, r3, #1
 8023854:	60ba      	str	r2, [r7, #8]
 8023856:	781b      	ldrb	r3, [r3, #0]
 8023858:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 802385a:	697b      	ldr	r3, [r7, #20]
 802385c:	2b2f      	cmp	r3, #47	@ 0x2f
 802385e:	dd02      	ble.n	8023866 <tiny_print+0x162>
 8023860:	697b      	ldr	r3, [r7, #20]
 8023862:	2b39      	cmp	r3, #57	@ 0x39
 8023864:	dde4      	ble.n	8023830 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8023866:	68fb      	ldr	r3, [r7, #12]
 8023868:	699b      	ldr	r3, [r3, #24]
 802386a:	2b00      	cmp	r3, #0
 802386c:	d104      	bne.n	8023878 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 802386e:	68fb      	ldr	r3, [r7, #12]
 8023870:	699b      	ldr	r3, [r3, #24]
 8023872:	1e5a      	subs	r2, r3, #1
 8023874:	68fb      	ldr	r3, [r7, #12]
 8023876:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8023878:	697b      	ldr	r3, [r7, #20]
 802387a:	2b70      	cmp	r3, #112	@ 0x70
 802387c:	d118      	bne.n	80238b0 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 802387e:	68bb      	ldr	r3, [r7, #8]
 8023880:	781b      	ldrb	r3, [r3, #0]
 8023882:	2b69      	cmp	r3, #105	@ 0x69
 8023884:	d114      	bne.n	80238b0 <tiny_print+0x1ac>
 8023886:	68bb      	ldr	r3, [r7, #8]
 8023888:	3301      	adds	r3, #1
 802388a:	781b      	ldrb	r3, [r3, #0]
 802388c:	2b70      	cmp	r3, #112	@ 0x70
 802388e:	d10f      	bne.n	80238b0 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8023890:	68bb      	ldr	r3, [r7, #8]
 8023892:	3302      	adds	r3, #2
 8023894:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	1d1a      	adds	r2, r3, #4
 802389a:	607a      	str	r2, [r7, #4]
 802389c:	681b      	ldr	r3, [r3, #0]
 802389e:	4619      	mov	r1, r3
 80238a0:	68f8      	ldr	r0, [r7, #12]
 80238a2:	f7ff feb7 	bl	8023614 <printIPv6>
 80238a6:	4603      	mov	r3, r0
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	f040 80ad 	bne.w	8023a08 <tiny_print+0x304>
				{
					break;
 80238ae:	e0b8      	b.n	8023a22 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 80238b0:	697b      	ldr	r3, [r7, #20]
 80238b2:	2b73      	cmp	r3, #115	@ 0x73
 80238b4:	d112      	bne.n	80238dc <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	1d1a      	adds	r2, r3, #4
 80238ba:	607a      	str	r2, [r7, #4]
 80238bc:	681b      	ldr	r3, [r3, #0]
 80238be:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 80238c0:	2c00      	cmp	r4, #0
 80238c2:	d001      	beq.n	80238c8 <tiny_print+0x1c4>
 80238c4:	4623      	mov	r3, r4
 80238c6:	e000      	b.n	80238ca <tiny_print+0x1c6>
 80238c8:	4b5a      	ldr	r3, [pc, #360]	@ (8023a34 <tiny_print+0x330>)
 80238ca:	4619      	mov	r1, r3
 80238cc:	68f8      	ldr	r0, [r7, #12]
 80238ce:	f7ff fd21 	bl	8023314 <prints>
 80238d2:	4603      	mov	r3, r0
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	f040 8099 	bne.w	8023a0c <tiny_print+0x308>
			{
				break;
 80238da:	e0a2      	b.n	8023a22 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 80238dc:	697b      	ldr	r3, [r7, #20]
 80238de:	2b63      	cmp	r3, #99	@ 0x63
 80238e0:	d10f      	bne.n	8023902 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 80238e2:	687b      	ldr	r3, [r7, #4]
 80238e4:	1d1a      	adds	r2, r3, #4
 80238e6:	607a      	str	r2, [r7, #4]
 80238e8:	681b      	ldr	r3, [r3, #0]
 80238ea:	b2db      	uxtb	r3, r3
 80238ec:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 80238ee:	7c3b      	ldrb	r3, [r7, #16]
 80238f0:	4619      	mov	r1, r3
 80238f2:	68f8      	ldr	r0, [r7, #12]
 80238f4:	f7ff fc87 	bl	8023206 <strbuf_printchar>
 80238f8:	4603      	mov	r3, r0
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	f040 8088 	bne.w	8023a10 <tiny_print+0x30c>
			{
				return;
 8023900:	e095      	b.n	8023a2e <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8023902:	697b      	ldr	r3, [r7, #20]
 8023904:	2b6c      	cmp	r3, #108	@ 0x6c
 8023906:	d109      	bne.n	802391c <tiny_print+0x218>
		{
			ch = *( format++ );
 8023908:	68bb      	ldr	r3, [r7, #8]
 802390a:	1c5a      	adds	r2, r3, #1
 802390c:	60ba      	str	r2, [r7, #8]
 802390e:	781b      	ldrb	r3, [r3, #0]
 8023910:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8023912:	68fa      	ldr	r2, [r7, #12]
 8023914:	7f93      	ldrb	r3, [r2, #30]
 8023916:	f043 0304 	orr.w	r3, r3, #4
 802391a:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 802391c:	697b      	ldr	r3, [r7, #20]
 802391e:	2b4c      	cmp	r3, #76	@ 0x4c
 8023920:	d109      	bne.n	8023936 <tiny_print+0x232>
		{
			ch = *( format++ );
 8023922:	68bb      	ldr	r3, [r7, #8]
 8023924:	1c5a      	adds	r2, r3, #1
 8023926:	60ba      	str	r2, [r7, #8]
 8023928:	781b      	ldrb	r3, [r3, #0]
 802392a:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 802392c:	68fa      	ldr	r2, [r7, #12]
 802392e:	7f93      	ldrb	r3, [r2, #30]
 8023930:	f043 0308 	orr.w	r3, r3, #8
 8023934:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8023936:	68fb      	ldr	r3, [r7, #12]
 8023938:	220a      	movs	r2, #10
 802393a:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 802393c:	68fb      	ldr	r3, [r7, #12]
 802393e:	2261      	movs	r2, #97	@ 0x61
 8023940:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8023942:	697b      	ldr	r3, [r7, #20]
 8023944:	2b64      	cmp	r3, #100	@ 0x64
 8023946:	d002      	beq.n	802394e <tiny_print+0x24a>
 8023948:	697b      	ldr	r3, [r7, #20]
 802394a:	2b75      	cmp	r3, #117	@ 0x75
 802394c:	d116      	bne.n	802397c <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 802394e:	697b      	ldr	r3, [r7, #20]
 8023950:	2b64      	cmp	r3, #100	@ 0x64
 8023952:	bf0c      	ite	eq
 8023954:	2301      	moveq	r3, #1
 8023956:	2300      	movne	r3, #0
 8023958:	b2d9      	uxtb	r1, r3
 802395a:	68fa      	ldr	r2, [r7, #12]
 802395c:	7f93      	ldrb	r3, [r2, #30]
 802395e:	f361 0300 	bfi	r3, r1, #0, #1
 8023962:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023964:	687b      	ldr	r3, [r7, #4]
 8023966:	1d1a      	adds	r2, r3, #4
 8023968:	607a      	str	r2, [r7, #4]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	4619      	mov	r1, r3
 802396e:	68f8      	ldr	r0, [r7, #12]
 8023970:	f7ff fd78 	bl	8023464 <printi>
 8023974:	4603      	mov	r3, r0
 8023976:	2b00      	cmp	r3, #0
 8023978:	d14c      	bne.n	8023a14 <tiny_print+0x310>
			{
				break;
 802397a:	e052      	b.n	8023a22 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 802397c:	68fb      	ldr	r3, [r7, #12]
 802397e:	2210      	movs	r2, #16
 8023980:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8023982:	697b      	ldr	r3, [r7, #20]
 8023984:	2b78      	cmp	r3, #120	@ 0x78
 8023986:	d117      	bne.n	80239b8 <tiny_print+0x2b4>
 8023988:	68bb      	ldr	r3, [r7, #8]
 802398a:	781b      	ldrb	r3, [r3, #0]
 802398c:	2b69      	cmp	r3, #105	@ 0x69
 802398e:	d113      	bne.n	80239b8 <tiny_print+0x2b4>
 8023990:	68bb      	ldr	r3, [r7, #8]
 8023992:	3301      	adds	r3, #1
 8023994:	781b      	ldrb	r3, [r3, #0]
 8023996:	2b70      	cmp	r3, #112	@ 0x70
 8023998:	d10e      	bne.n	80239b8 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 802399a:	68bb      	ldr	r3, [r7, #8]
 802399c:	3302      	adds	r3, #2
 802399e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	1d1a      	adds	r2, r3, #4
 80239a4:	607a      	str	r2, [r7, #4]
 80239a6:	681b      	ldr	r3, [r3, #0]
 80239a8:	4619      	mov	r1, r3
 80239aa:	68f8      	ldr	r0, [r7, #12]
 80239ac:	f7ff fde8 	bl	8023580 <printIp>
 80239b0:	4603      	mov	r3, r0
 80239b2:	2b00      	cmp	r3, #0
 80239b4:	d130      	bne.n	8023a18 <tiny_print+0x314>
			{
				break;
 80239b6:	e034      	b.n	8023a22 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 80239b8:	697b      	ldr	r3, [r7, #20]
 80239ba:	2b78      	cmp	r3, #120	@ 0x78
 80239bc:	d009      	beq.n	80239d2 <tiny_print+0x2ce>
 80239be:	697b      	ldr	r3, [r7, #20]
 80239c0:	2b58      	cmp	r3, #88	@ 0x58
 80239c2:	d006      	beq.n	80239d2 <tiny_print+0x2ce>
 80239c4:	697b      	ldr	r3, [r7, #20]
 80239c6:	2b70      	cmp	r3, #112	@ 0x70
 80239c8:	d003      	beq.n	80239d2 <tiny_print+0x2ce>
 80239ca:	697b      	ldr	r3, [r7, #20]
 80239cc:	2b6f      	cmp	r3, #111	@ 0x6f
 80239ce:	f47f ae9f 	bne.w	8023710 <tiny_print+0xc>
		{
			if( ch == 'X' )
 80239d2:	697b      	ldr	r3, [r7, #20]
 80239d4:	2b58      	cmp	r3, #88	@ 0x58
 80239d6:	d103      	bne.n	80239e0 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 80239d8:	68fb      	ldr	r3, [r7, #12]
 80239da:	2241      	movs	r2, #65	@ 0x41
 80239dc:	775a      	strb	r2, [r3, #29]
 80239de:	e005      	b.n	80239ec <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 80239e0:	697b      	ldr	r3, [r7, #20]
 80239e2:	2b6f      	cmp	r3, #111	@ 0x6f
 80239e4:	d102      	bne.n	80239ec <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 80239e6:	68fb      	ldr	r3, [r7, #12]
 80239e8:	2208      	movs	r2, #8
 80239ea:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	1d1a      	adds	r2, r3, #4
 80239f0:	607a      	str	r2, [r7, #4]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	4619      	mov	r1, r3
 80239f6:	68f8      	ldr	r0, [r7, #12]
 80239f8:	f7ff fd34 	bl	8023464 <printi>
 80239fc:	4603      	mov	r3, r0
 80239fe:	2b00      	cmp	r3, #0
 8023a00:	d00e      	beq.n	8023a20 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8023a02:	e00a      	b.n	8023a1a <tiny_print+0x316>
			continue;
 8023a04:	bf00      	nop
 8023a06:	e683      	b.n	8023710 <tiny_print+0xc>
				continue;
 8023a08:	bf00      	nop
 8023a0a:	e681      	b.n	8023710 <tiny_print+0xc>
			continue;
 8023a0c:	bf00      	nop
 8023a0e:	e67f      	b.n	8023710 <tiny_print+0xc>
			continue;
 8023a10:	bf00      	nop
 8023a12:	e67d      	b.n	8023710 <tiny_print+0xc>
			continue;
 8023a14:	bf00      	nop
 8023a16:	e67b      	b.n	8023710 <tiny_print+0xc>
			continue;
 8023a18:	bf00      	nop
	{
 8023a1a:	e679      	b.n	8023710 <tiny_print+0xc>
			break;
 8023a1c:	bf00      	nop
 8023a1e:	e000      	b.n	8023a22 <tiny_print+0x31e>
				break;
 8023a20:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8023a22:	2100      	movs	r1, #0
 8023a24:	68f8      	ldr	r0, [r7, #12]
 8023a26:	f7ff fbee 	bl	8023206 <strbuf_printchar>
 8023a2a:	e000      	b.n	8023a2e <tiny_print+0x32a>
					return;
 8023a2c:	bf00      	nop
}
 8023a2e:	371c      	adds	r7, #28
 8023a30:	46bd      	mov	sp, r7
 8023a32:	bd90      	pop	{r4, r7, pc}
 8023a34:	08028194 	.word	0x08028194

08023a38 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8023a38:	b580      	push	{r7, lr}
 8023a3a:	b08c      	sub	sp, #48	@ 0x30
 8023a3c:	af00      	add	r7, sp, #0
 8023a3e:	60f8      	str	r0, [r7, #12]
 8023a40:	60b9      	str	r1, [r7, #8]
 8023a42:	607a      	str	r2, [r7, #4]
 8023a44:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8023a46:	68fa      	ldr	r2, [r7, #12]
 8023a48:	68bb      	ldr	r3, [r7, #8]
 8023a4a:	441a      	add	r2, r3
 8023a4c:	f107 0310 	add.w	r3, r7, #16
 8023a50:	68f9      	ldr	r1, [r7, #12]
 8023a52:	4618      	mov	r0, r3
 8023a54:	f7ff fbb9 	bl	80231ca <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023a58:	f107 0310 	add.w	r3, r7, #16
 8023a5c:	683a      	ldr	r2, [r7, #0]
 8023a5e:	6879      	ldr	r1, [r7, #4]
 8023a60:	4618      	mov	r0, r3
 8023a62:	f7ff fe4f 	bl	8023704 <tiny_print>

	return strBuf.curLen;
 8023a66:	69fb      	ldr	r3, [r7, #28]
}
 8023a68:	4618      	mov	r0, r3
 8023a6a:	3730      	adds	r7, #48	@ 0x30
 8023a6c:	46bd      	mov	sp, r7
 8023a6e:	bd80      	pop	{r7, pc}

08023a70 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8023a70:	b40c      	push	{r2, r3}
 8023a72:	b580      	push	{r7, lr}
 8023a74:	b08c      	sub	sp, #48	@ 0x30
 8023a76:	af00      	add	r7, sp, #0
 8023a78:	6078      	str	r0, [r7, #4]
 8023a7a:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8023a7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8023a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8023a82:	687a      	ldr	r2, [r7, #4]
 8023a84:	683b      	ldr	r3, [r7, #0]
 8023a86:	441a      	add	r2, r3
 8023a88:	f107 030c 	add.w	r3, r7, #12
 8023a8c:	6879      	ldr	r1, [r7, #4]
 8023a8e:	4618      	mov	r0, r3
 8023a90:	f7ff fb9b 	bl	80231ca <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023a94:	f107 030c 	add.w	r3, r7, #12
 8023a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023a9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	f7ff fe31 	bl	8023704 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8023aa2:	69bb      	ldr	r3, [r7, #24]
}
 8023aa4:	4618      	mov	r0, r3
 8023aa6:	3730      	adds	r7, #48	@ 0x30
 8023aa8:	46bd      	mov	sp, r7
 8023aaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023aae:	b002      	add	sp, #8
 8023ab0:	4770      	bx	lr

08023ab2 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8023ab2:	b40e      	push	{r1, r2, r3}
 8023ab4:	b580      	push	{r7, lr}
 8023ab6:	b08d      	sub	sp, #52	@ 0x34
 8023ab8:	af00      	add	r7, sp, #0
 8023aba:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8023abc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8023ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8023ac8:	f107 030c 	add.w	r3, r7, #12
 8023acc:	6879      	ldr	r1, [r7, #4]
 8023ace:	4618      	mov	r0, r3
 8023ad0:	f7ff fb7b 	bl	80231ca <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023ad4:	f107 030c 	add.w	r3, r7, #12
 8023ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023ada:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023adc:	4618      	mov	r0, r3
 8023ade:	f7ff fe11 	bl	8023704 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8023ae2:	69bb      	ldr	r3, [r7, #24]
}
 8023ae4:	4618      	mov	r0, r3
 8023ae6:	3734      	adds	r7, #52	@ 0x34
 8023ae8:	46bd      	mov	sp, r7
 8023aea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023aee:	b003      	add	sp, #12
 8023af0:	4770      	bx	lr
	...

08023af4 <srand>:
 8023af4:	b538      	push	{r3, r4, r5, lr}
 8023af6:	4b10      	ldr	r3, [pc, #64]	@ (8023b38 <srand+0x44>)
 8023af8:	681d      	ldr	r5, [r3, #0]
 8023afa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023afc:	4604      	mov	r4, r0
 8023afe:	b9b3      	cbnz	r3, 8023b2e <srand+0x3a>
 8023b00:	2018      	movs	r0, #24
 8023b02:	f000 faaf 	bl	8024064 <malloc>
 8023b06:	4602      	mov	r2, r0
 8023b08:	6328      	str	r0, [r5, #48]	@ 0x30
 8023b0a:	b920      	cbnz	r0, 8023b16 <srand+0x22>
 8023b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8023b3c <srand+0x48>)
 8023b0e:	480c      	ldr	r0, [pc, #48]	@ (8023b40 <srand+0x4c>)
 8023b10:	2146      	movs	r1, #70	@ 0x46
 8023b12:	f000 fa3f 	bl	8023f94 <__assert_func>
 8023b16:	490b      	ldr	r1, [pc, #44]	@ (8023b44 <srand+0x50>)
 8023b18:	4b0b      	ldr	r3, [pc, #44]	@ (8023b48 <srand+0x54>)
 8023b1a:	e9c0 1300 	strd	r1, r3, [r0]
 8023b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8023b4c <srand+0x58>)
 8023b20:	6083      	str	r3, [r0, #8]
 8023b22:	230b      	movs	r3, #11
 8023b24:	8183      	strh	r3, [r0, #12]
 8023b26:	2100      	movs	r1, #0
 8023b28:	2001      	movs	r0, #1
 8023b2a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023b2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023b30:	2200      	movs	r2, #0
 8023b32:	611c      	str	r4, [r3, #16]
 8023b34:	615a      	str	r2, [r3, #20]
 8023b36:	bd38      	pop	{r3, r4, r5, pc}
 8023b38:	20000038 	.word	0x20000038
 8023b3c:	08028360 	.word	0x08028360
 8023b40:	08028377 	.word	0x08028377
 8023b44:	abcd330e 	.word	0xabcd330e
 8023b48:	e66d1234 	.word	0xe66d1234
 8023b4c:	0005deec 	.word	0x0005deec

08023b50 <rand>:
 8023b50:	4b16      	ldr	r3, [pc, #88]	@ (8023bac <rand+0x5c>)
 8023b52:	b510      	push	{r4, lr}
 8023b54:	681c      	ldr	r4, [r3, #0]
 8023b56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023b58:	b9b3      	cbnz	r3, 8023b88 <rand+0x38>
 8023b5a:	2018      	movs	r0, #24
 8023b5c:	f000 fa82 	bl	8024064 <malloc>
 8023b60:	4602      	mov	r2, r0
 8023b62:	6320      	str	r0, [r4, #48]	@ 0x30
 8023b64:	b920      	cbnz	r0, 8023b70 <rand+0x20>
 8023b66:	4b12      	ldr	r3, [pc, #72]	@ (8023bb0 <rand+0x60>)
 8023b68:	4812      	ldr	r0, [pc, #72]	@ (8023bb4 <rand+0x64>)
 8023b6a:	2152      	movs	r1, #82	@ 0x52
 8023b6c:	f000 fa12 	bl	8023f94 <__assert_func>
 8023b70:	4911      	ldr	r1, [pc, #68]	@ (8023bb8 <rand+0x68>)
 8023b72:	4b12      	ldr	r3, [pc, #72]	@ (8023bbc <rand+0x6c>)
 8023b74:	e9c0 1300 	strd	r1, r3, [r0]
 8023b78:	4b11      	ldr	r3, [pc, #68]	@ (8023bc0 <rand+0x70>)
 8023b7a:	6083      	str	r3, [r0, #8]
 8023b7c:	230b      	movs	r3, #11
 8023b7e:	8183      	strh	r3, [r0, #12]
 8023b80:	2100      	movs	r1, #0
 8023b82:	2001      	movs	r0, #1
 8023b84:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023b88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8023b8a:	480e      	ldr	r0, [pc, #56]	@ (8023bc4 <rand+0x74>)
 8023b8c:	690b      	ldr	r3, [r1, #16]
 8023b8e:	694c      	ldr	r4, [r1, #20]
 8023b90:	4a0d      	ldr	r2, [pc, #52]	@ (8023bc8 <rand+0x78>)
 8023b92:	4358      	muls	r0, r3
 8023b94:	fb02 0004 	mla	r0, r2, r4, r0
 8023b98:	fba3 3202 	umull	r3, r2, r3, r2
 8023b9c:	3301      	adds	r3, #1
 8023b9e:	eb40 0002 	adc.w	r0, r0, r2
 8023ba2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023ba6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8023baa:	bd10      	pop	{r4, pc}
 8023bac:	20000038 	.word	0x20000038
 8023bb0:	08028360 	.word	0x08028360
 8023bb4:	08028377 	.word	0x08028377
 8023bb8:	abcd330e 	.word	0xabcd330e
 8023bbc:	e66d1234 	.word	0xe66d1234
 8023bc0:	0005deec 	.word	0x0005deec
 8023bc4:	5851f42d 	.word	0x5851f42d
 8023bc8:	4c957f2d 	.word	0x4c957f2d

08023bcc <std>:
 8023bcc:	2300      	movs	r3, #0
 8023bce:	b510      	push	{r4, lr}
 8023bd0:	4604      	mov	r4, r0
 8023bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8023bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023bda:	6083      	str	r3, [r0, #8]
 8023bdc:	8181      	strh	r1, [r0, #12]
 8023bde:	6643      	str	r3, [r0, #100]	@ 0x64
 8023be0:	81c2      	strh	r2, [r0, #14]
 8023be2:	6183      	str	r3, [r0, #24]
 8023be4:	4619      	mov	r1, r3
 8023be6:	2208      	movs	r2, #8
 8023be8:	305c      	adds	r0, #92	@ 0x5c
 8023bea:	f7ff fa3e 	bl	802306a <memset>
 8023bee:	4b0d      	ldr	r3, [pc, #52]	@ (8023c24 <std+0x58>)
 8023bf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8023bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8023c28 <std+0x5c>)
 8023bf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8023c2c <std+0x60>)
 8023bf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8023bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8023c30 <std+0x64>)
 8023bfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8023bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8023c34 <std+0x68>)
 8023c00:	6224      	str	r4, [r4, #32]
 8023c02:	429c      	cmp	r4, r3
 8023c04:	d006      	beq.n	8023c14 <std+0x48>
 8023c06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8023c0a:	4294      	cmp	r4, r2
 8023c0c:	d002      	beq.n	8023c14 <std+0x48>
 8023c0e:	33d0      	adds	r3, #208	@ 0xd0
 8023c10:	429c      	cmp	r4, r3
 8023c12:	d105      	bne.n	8023c20 <std+0x54>
 8023c14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c1c:	f000 b9b6 	b.w	8023f8c <__retarget_lock_init_recursive>
 8023c20:	bd10      	pop	{r4, pc}
 8023c22:	bf00      	nop
 8023c24:	08023d51 	.word	0x08023d51
 8023c28:	08023d73 	.word	0x08023d73
 8023c2c:	08023dab 	.word	0x08023dab
 8023c30:	08023dcf 	.word	0x08023dcf
 8023c34:	20002754 	.word	0x20002754

08023c38 <stdio_exit_handler>:
 8023c38:	4a02      	ldr	r2, [pc, #8]	@ (8023c44 <stdio_exit_handler+0xc>)
 8023c3a:	4903      	ldr	r1, [pc, #12]	@ (8023c48 <stdio_exit_handler+0x10>)
 8023c3c:	4803      	ldr	r0, [pc, #12]	@ (8023c4c <stdio_exit_handler+0x14>)
 8023c3e:	f000 b869 	b.w	8023d14 <_fwalk_sglue>
 8023c42:	bf00      	nop
 8023c44:	2000002c 	.word	0x2000002c
 8023c48:	080242d9 	.word	0x080242d9
 8023c4c:	2000003c 	.word	0x2000003c

08023c50 <cleanup_stdio>:
 8023c50:	6841      	ldr	r1, [r0, #4]
 8023c52:	4b0c      	ldr	r3, [pc, #48]	@ (8023c84 <cleanup_stdio+0x34>)
 8023c54:	4299      	cmp	r1, r3
 8023c56:	b510      	push	{r4, lr}
 8023c58:	4604      	mov	r4, r0
 8023c5a:	d001      	beq.n	8023c60 <cleanup_stdio+0x10>
 8023c5c:	f000 fb3c 	bl	80242d8 <_fflush_r>
 8023c60:	68a1      	ldr	r1, [r4, #8]
 8023c62:	4b09      	ldr	r3, [pc, #36]	@ (8023c88 <cleanup_stdio+0x38>)
 8023c64:	4299      	cmp	r1, r3
 8023c66:	d002      	beq.n	8023c6e <cleanup_stdio+0x1e>
 8023c68:	4620      	mov	r0, r4
 8023c6a:	f000 fb35 	bl	80242d8 <_fflush_r>
 8023c6e:	68e1      	ldr	r1, [r4, #12]
 8023c70:	4b06      	ldr	r3, [pc, #24]	@ (8023c8c <cleanup_stdio+0x3c>)
 8023c72:	4299      	cmp	r1, r3
 8023c74:	d004      	beq.n	8023c80 <cleanup_stdio+0x30>
 8023c76:	4620      	mov	r0, r4
 8023c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c7c:	f000 bb2c 	b.w	80242d8 <_fflush_r>
 8023c80:	bd10      	pop	{r4, pc}
 8023c82:	bf00      	nop
 8023c84:	20002754 	.word	0x20002754
 8023c88:	200027bc 	.word	0x200027bc
 8023c8c:	20002824 	.word	0x20002824

08023c90 <global_stdio_init.part.0>:
 8023c90:	b510      	push	{r4, lr}
 8023c92:	4b0b      	ldr	r3, [pc, #44]	@ (8023cc0 <global_stdio_init.part.0+0x30>)
 8023c94:	4c0b      	ldr	r4, [pc, #44]	@ (8023cc4 <global_stdio_init.part.0+0x34>)
 8023c96:	4a0c      	ldr	r2, [pc, #48]	@ (8023cc8 <global_stdio_init.part.0+0x38>)
 8023c98:	601a      	str	r2, [r3, #0]
 8023c9a:	4620      	mov	r0, r4
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	2104      	movs	r1, #4
 8023ca0:	f7ff ff94 	bl	8023bcc <std>
 8023ca4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023ca8:	2201      	movs	r2, #1
 8023caa:	2109      	movs	r1, #9
 8023cac:	f7ff ff8e 	bl	8023bcc <std>
 8023cb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023cb4:	2202      	movs	r2, #2
 8023cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cba:	2112      	movs	r1, #18
 8023cbc:	f7ff bf86 	b.w	8023bcc <std>
 8023cc0:	2000288c 	.word	0x2000288c
 8023cc4:	20002754 	.word	0x20002754
 8023cc8:	08023c39 	.word	0x08023c39

08023ccc <__sfp_lock_acquire>:
 8023ccc:	4801      	ldr	r0, [pc, #4]	@ (8023cd4 <__sfp_lock_acquire+0x8>)
 8023cce:	f000 b95e 	b.w	8023f8e <__retarget_lock_acquire_recursive>
 8023cd2:	bf00      	nop
 8023cd4:	20002895 	.word	0x20002895

08023cd8 <__sfp_lock_release>:
 8023cd8:	4801      	ldr	r0, [pc, #4]	@ (8023ce0 <__sfp_lock_release+0x8>)
 8023cda:	f000 b959 	b.w	8023f90 <__retarget_lock_release_recursive>
 8023cde:	bf00      	nop
 8023ce0:	20002895 	.word	0x20002895

08023ce4 <__sinit>:
 8023ce4:	b510      	push	{r4, lr}
 8023ce6:	4604      	mov	r4, r0
 8023ce8:	f7ff fff0 	bl	8023ccc <__sfp_lock_acquire>
 8023cec:	6a23      	ldr	r3, [r4, #32]
 8023cee:	b11b      	cbz	r3, 8023cf8 <__sinit+0x14>
 8023cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023cf4:	f7ff bff0 	b.w	8023cd8 <__sfp_lock_release>
 8023cf8:	4b04      	ldr	r3, [pc, #16]	@ (8023d0c <__sinit+0x28>)
 8023cfa:	6223      	str	r3, [r4, #32]
 8023cfc:	4b04      	ldr	r3, [pc, #16]	@ (8023d10 <__sinit+0x2c>)
 8023cfe:	681b      	ldr	r3, [r3, #0]
 8023d00:	2b00      	cmp	r3, #0
 8023d02:	d1f5      	bne.n	8023cf0 <__sinit+0xc>
 8023d04:	f7ff ffc4 	bl	8023c90 <global_stdio_init.part.0>
 8023d08:	e7f2      	b.n	8023cf0 <__sinit+0xc>
 8023d0a:	bf00      	nop
 8023d0c:	08023c51 	.word	0x08023c51
 8023d10:	2000288c 	.word	0x2000288c

08023d14 <_fwalk_sglue>:
 8023d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d18:	4607      	mov	r7, r0
 8023d1a:	4688      	mov	r8, r1
 8023d1c:	4614      	mov	r4, r2
 8023d1e:	2600      	movs	r6, #0
 8023d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023d24:	f1b9 0901 	subs.w	r9, r9, #1
 8023d28:	d505      	bpl.n	8023d36 <_fwalk_sglue+0x22>
 8023d2a:	6824      	ldr	r4, [r4, #0]
 8023d2c:	2c00      	cmp	r4, #0
 8023d2e:	d1f7      	bne.n	8023d20 <_fwalk_sglue+0xc>
 8023d30:	4630      	mov	r0, r6
 8023d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023d36:	89ab      	ldrh	r3, [r5, #12]
 8023d38:	2b01      	cmp	r3, #1
 8023d3a:	d907      	bls.n	8023d4c <_fwalk_sglue+0x38>
 8023d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023d40:	3301      	adds	r3, #1
 8023d42:	d003      	beq.n	8023d4c <_fwalk_sglue+0x38>
 8023d44:	4629      	mov	r1, r5
 8023d46:	4638      	mov	r0, r7
 8023d48:	47c0      	blx	r8
 8023d4a:	4306      	orrs	r6, r0
 8023d4c:	3568      	adds	r5, #104	@ 0x68
 8023d4e:	e7e9      	b.n	8023d24 <_fwalk_sglue+0x10>

08023d50 <__sread>:
 8023d50:	b510      	push	{r4, lr}
 8023d52:	460c      	mov	r4, r1
 8023d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023d58:	f000 f8ca 	bl	8023ef0 <_read_r>
 8023d5c:	2800      	cmp	r0, #0
 8023d5e:	bfab      	itete	ge
 8023d60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023d62:	89a3      	ldrhlt	r3, [r4, #12]
 8023d64:	181b      	addge	r3, r3, r0
 8023d66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023d6a:	bfac      	ite	ge
 8023d6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023d6e:	81a3      	strhlt	r3, [r4, #12]
 8023d70:	bd10      	pop	{r4, pc}

08023d72 <__swrite>:
 8023d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d76:	461f      	mov	r7, r3
 8023d78:	898b      	ldrh	r3, [r1, #12]
 8023d7a:	05db      	lsls	r3, r3, #23
 8023d7c:	4605      	mov	r5, r0
 8023d7e:	460c      	mov	r4, r1
 8023d80:	4616      	mov	r6, r2
 8023d82:	d505      	bpl.n	8023d90 <__swrite+0x1e>
 8023d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023d88:	2302      	movs	r3, #2
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	f000 f89e 	bl	8023ecc <_lseek_r>
 8023d90:	89a3      	ldrh	r3, [r4, #12]
 8023d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023d9a:	81a3      	strh	r3, [r4, #12]
 8023d9c:	4632      	mov	r2, r6
 8023d9e:	463b      	mov	r3, r7
 8023da0:	4628      	mov	r0, r5
 8023da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023da6:	f000 b8b5 	b.w	8023f14 <_write_r>

08023daa <__sseek>:
 8023daa:	b510      	push	{r4, lr}
 8023dac:	460c      	mov	r4, r1
 8023dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023db2:	f000 f88b 	bl	8023ecc <_lseek_r>
 8023db6:	1c43      	adds	r3, r0, #1
 8023db8:	89a3      	ldrh	r3, [r4, #12]
 8023dba:	bf15      	itete	ne
 8023dbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023dbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023dc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023dc6:	81a3      	strheq	r3, [r4, #12]
 8023dc8:	bf18      	it	ne
 8023dca:	81a3      	strhne	r3, [r4, #12]
 8023dcc:	bd10      	pop	{r4, pc}

08023dce <__sclose>:
 8023dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023dd2:	f000 b86b 	b.w	8023eac <_close_r>

08023dd6 <memcmp>:
 8023dd6:	b510      	push	{r4, lr}
 8023dd8:	3901      	subs	r1, #1
 8023dda:	4402      	add	r2, r0
 8023ddc:	4290      	cmp	r0, r2
 8023dde:	d101      	bne.n	8023de4 <memcmp+0xe>
 8023de0:	2000      	movs	r0, #0
 8023de2:	e005      	b.n	8023df0 <memcmp+0x1a>
 8023de4:	7803      	ldrb	r3, [r0, #0]
 8023de6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023dea:	42a3      	cmp	r3, r4
 8023dec:	d001      	beq.n	8023df2 <memcmp+0x1c>
 8023dee:	1b18      	subs	r0, r3, r4
 8023df0:	bd10      	pop	{r4, pc}
 8023df2:	3001      	adds	r0, #1
 8023df4:	e7f2      	b.n	8023ddc <memcmp+0x6>

08023df6 <memmove>:
 8023df6:	4288      	cmp	r0, r1
 8023df8:	b510      	push	{r4, lr}
 8023dfa:	eb01 0402 	add.w	r4, r1, r2
 8023dfe:	d902      	bls.n	8023e06 <memmove+0x10>
 8023e00:	4284      	cmp	r4, r0
 8023e02:	4623      	mov	r3, r4
 8023e04:	d807      	bhi.n	8023e16 <memmove+0x20>
 8023e06:	1e43      	subs	r3, r0, #1
 8023e08:	42a1      	cmp	r1, r4
 8023e0a:	d008      	beq.n	8023e1e <memmove+0x28>
 8023e0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023e10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023e14:	e7f8      	b.n	8023e08 <memmove+0x12>
 8023e16:	4402      	add	r2, r0
 8023e18:	4601      	mov	r1, r0
 8023e1a:	428a      	cmp	r2, r1
 8023e1c:	d100      	bne.n	8023e20 <memmove+0x2a>
 8023e1e:	bd10      	pop	{r4, pc}
 8023e20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023e24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023e28:	e7f7      	b.n	8023e1a <memmove+0x24>
	...

08023e2c <strcasecmp>:
 8023e2c:	b530      	push	{r4, r5, lr}
 8023e2e:	4d0b      	ldr	r5, [pc, #44]	@ (8023e5c <strcasecmp+0x30>)
 8023e30:	4604      	mov	r4, r0
 8023e32:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023e36:	5cea      	ldrb	r2, [r5, r3]
 8023e38:	f002 0203 	and.w	r2, r2, #3
 8023e3c:	2a01      	cmp	r2, #1
 8023e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023e42:	5ca8      	ldrb	r0, [r5, r2]
 8023e44:	f000 0003 	and.w	r0, r0, #3
 8023e48:	bf08      	it	eq
 8023e4a:	3320      	addeq	r3, #32
 8023e4c:	2801      	cmp	r0, #1
 8023e4e:	bf08      	it	eq
 8023e50:	3220      	addeq	r2, #32
 8023e52:	1a98      	subs	r0, r3, r2
 8023e54:	d101      	bne.n	8023e5a <strcasecmp+0x2e>
 8023e56:	2a00      	cmp	r2, #0
 8023e58:	d1eb      	bne.n	8023e32 <strcasecmp+0x6>
 8023e5a:	bd30      	pop	{r4, r5, pc}
 8023e5c:	0802840c 	.word	0x0802840c

08023e60 <strncmp>:
 8023e60:	b510      	push	{r4, lr}
 8023e62:	b16a      	cbz	r2, 8023e80 <strncmp+0x20>
 8023e64:	3901      	subs	r1, #1
 8023e66:	1884      	adds	r4, r0, r2
 8023e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023e6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023e70:	429a      	cmp	r2, r3
 8023e72:	d103      	bne.n	8023e7c <strncmp+0x1c>
 8023e74:	42a0      	cmp	r0, r4
 8023e76:	d001      	beq.n	8023e7c <strncmp+0x1c>
 8023e78:	2a00      	cmp	r2, #0
 8023e7a:	d1f5      	bne.n	8023e68 <strncmp+0x8>
 8023e7c:	1ad0      	subs	r0, r2, r3
 8023e7e:	bd10      	pop	{r4, pc}
 8023e80:	4610      	mov	r0, r2
 8023e82:	e7fc      	b.n	8023e7e <strncmp+0x1e>

08023e84 <strncpy>:
 8023e84:	b510      	push	{r4, lr}
 8023e86:	3901      	subs	r1, #1
 8023e88:	4603      	mov	r3, r0
 8023e8a:	b132      	cbz	r2, 8023e9a <strncpy+0x16>
 8023e8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023e90:	f803 4b01 	strb.w	r4, [r3], #1
 8023e94:	3a01      	subs	r2, #1
 8023e96:	2c00      	cmp	r4, #0
 8023e98:	d1f7      	bne.n	8023e8a <strncpy+0x6>
 8023e9a:	441a      	add	r2, r3
 8023e9c:	2100      	movs	r1, #0
 8023e9e:	4293      	cmp	r3, r2
 8023ea0:	d100      	bne.n	8023ea4 <strncpy+0x20>
 8023ea2:	bd10      	pop	{r4, pc}
 8023ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8023ea8:	e7f9      	b.n	8023e9e <strncpy+0x1a>
	...

08023eac <_close_r>:
 8023eac:	b538      	push	{r3, r4, r5, lr}
 8023eae:	4d06      	ldr	r5, [pc, #24]	@ (8023ec8 <_close_r+0x1c>)
 8023eb0:	2300      	movs	r3, #0
 8023eb2:	4604      	mov	r4, r0
 8023eb4:	4608      	mov	r0, r1
 8023eb6:	602b      	str	r3, [r5, #0]
 8023eb8:	f7df fa5a 	bl	8003370 <_close>
 8023ebc:	1c43      	adds	r3, r0, #1
 8023ebe:	d102      	bne.n	8023ec6 <_close_r+0x1a>
 8023ec0:	682b      	ldr	r3, [r5, #0]
 8023ec2:	b103      	cbz	r3, 8023ec6 <_close_r+0x1a>
 8023ec4:	6023      	str	r3, [r4, #0]
 8023ec6:	bd38      	pop	{r3, r4, r5, pc}
 8023ec8:	20002890 	.word	0x20002890

08023ecc <_lseek_r>:
 8023ecc:	b538      	push	{r3, r4, r5, lr}
 8023ece:	4d07      	ldr	r5, [pc, #28]	@ (8023eec <_lseek_r+0x20>)
 8023ed0:	4604      	mov	r4, r0
 8023ed2:	4608      	mov	r0, r1
 8023ed4:	4611      	mov	r1, r2
 8023ed6:	2200      	movs	r2, #0
 8023ed8:	602a      	str	r2, [r5, #0]
 8023eda:	461a      	mov	r2, r3
 8023edc:	f7df fa6f 	bl	80033be <_lseek>
 8023ee0:	1c43      	adds	r3, r0, #1
 8023ee2:	d102      	bne.n	8023eea <_lseek_r+0x1e>
 8023ee4:	682b      	ldr	r3, [r5, #0]
 8023ee6:	b103      	cbz	r3, 8023eea <_lseek_r+0x1e>
 8023ee8:	6023      	str	r3, [r4, #0]
 8023eea:	bd38      	pop	{r3, r4, r5, pc}
 8023eec:	20002890 	.word	0x20002890

08023ef0 <_read_r>:
 8023ef0:	b538      	push	{r3, r4, r5, lr}
 8023ef2:	4d07      	ldr	r5, [pc, #28]	@ (8023f10 <_read_r+0x20>)
 8023ef4:	4604      	mov	r4, r0
 8023ef6:	4608      	mov	r0, r1
 8023ef8:	4611      	mov	r1, r2
 8023efa:	2200      	movs	r2, #0
 8023efc:	602a      	str	r2, [r5, #0]
 8023efe:	461a      	mov	r2, r3
 8023f00:	f7df f9fd 	bl	80032fe <_read>
 8023f04:	1c43      	adds	r3, r0, #1
 8023f06:	d102      	bne.n	8023f0e <_read_r+0x1e>
 8023f08:	682b      	ldr	r3, [r5, #0]
 8023f0a:	b103      	cbz	r3, 8023f0e <_read_r+0x1e>
 8023f0c:	6023      	str	r3, [r4, #0]
 8023f0e:	bd38      	pop	{r3, r4, r5, pc}
 8023f10:	20002890 	.word	0x20002890

08023f14 <_write_r>:
 8023f14:	b538      	push	{r3, r4, r5, lr}
 8023f16:	4d07      	ldr	r5, [pc, #28]	@ (8023f34 <_write_r+0x20>)
 8023f18:	4604      	mov	r4, r0
 8023f1a:	4608      	mov	r0, r1
 8023f1c:	4611      	mov	r1, r2
 8023f1e:	2200      	movs	r2, #0
 8023f20:	602a      	str	r2, [r5, #0]
 8023f22:	461a      	mov	r2, r3
 8023f24:	f7df fa08 	bl	8003338 <_write>
 8023f28:	1c43      	adds	r3, r0, #1
 8023f2a:	d102      	bne.n	8023f32 <_write_r+0x1e>
 8023f2c:	682b      	ldr	r3, [r5, #0]
 8023f2e:	b103      	cbz	r3, 8023f32 <_write_r+0x1e>
 8023f30:	6023      	str	r3, [r4, #0]
 8023f32:	bd38      	pop	{r3, r4, r5, pc}
 8023f34:	20002890 	.word	0x20002890

08023f38 <__errno>:
 8023f38:	4b01      	ldr	r3, [pc, #4]	@ (8023f40 <__errno+0x8>)
 8023f3a:	6818      	ldr	r0, [r3, #0]
 8023f3c:	4770      	bx	lr
 8023f3e:	bf00      	nop
 8023f40:	20000038 	.word	0x20000038

08023f44 <__libc_init_array>:
 8023f44:	b570      	push	{r4, r5, r6, lr}
 8023f46:	4d0d      	ldr	r5, [pc, #52]	@ (8023f7c <__libc_init_array+0x38>)
 8023f48:	4c0d      	ldr	r4, [pc, #52]	@ (8023f80 <__libc_init_array+0x3c>)
 8023f4a:	1b64      	subs	r4, r4, r5
 8023f4c:	10a4      	asrs	r4, r4, #2
 8023f4e:	2600      	movs	r6, #0
 8023f50:	42a6      	cmp	r6, r4
 8023f52:	d109      	bne.n	8023f68 <__libc_init_array+0x24>
 8023f54:	4d0b      	ldr	r5, [pc, #44]	@ (8023f84 <__libc_init_array+0x40>)
 8023f56:	4c0c      	ldr	r4, [pc, #48]	@ (8023f88 <__libc_init_array+0x44>)
 8023f58:	f000 fe3a 	bl	8024bd0 <_init>
 8023f5c:	1b64      	subs	r4, r4, r5
 8023f5e:	10a4      	asrs	r4, r4, #2
 8023f60:	2600      	movs	r6, #0
 8023f62:	42a6      	cmp	r6, r4
 8023f64:	d105      	bne.n	8023f72 <__libc_init_array+0x2e>
 8023f66:	bd70      	pop	{r4, r5, r6, pc}
 8023f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8023f6c:	4798      	blx	r3
 8023f6e:	3601      	adds	r6, #1
 8023f70:	e7ee      	b.n	8023f50 <__libc_init_array+0xc>
 8023f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8023f76:	4798      	blx	r3
 8023f78:	3601      	adds	r6, #1
 8023f7a:	e7f2      	b.n	8023f62 <__libc_init_array+0x1e>
 8023f7c:	08028548 	.word	0x08028548
 8023f80:	08028548 	.word	0x08028548
 8023f84:	08028548 	.word	0x08028548
 8023f88:	0802854c 	.word	0x0802854c

08023f8c <__retarget_lock_init_recursive>:
 8023f8c:	4770      	bx	lr

08023f8e <__retarget_lock_acquire_recursive>:
 8023f8e:	4770      	bx	lr

08023f90 <__retarget_lock_release_recursive>:
 8023f90:	4770      	bx	lr
	...

08023f94 <__assert_func>:
 8023f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023f96:	4614      	mov	r4, r2
 8023f98:	461a      	mov	r2, r3
 8023f9a:	4b09      	ldr	r3, [pc, #36]	@ (8023fc0 <__assert_func+0x2c>)
 8023f9c:	681b      	ldr	r3, [r3, #0]
 8023f9e:	4605      	mov	r5, r0
 8023fa0:	68d8      	ldr	r0, [r3, #12]
 8023fa2:	b954      	cbnz	r4, 8023fba <__assert_func+0x26>
 8023fa4:	4b07      	ldr	r3, [pc, #28]	@ (8023fc4 <__assert_func+0x30>)
 8023fa6:	461c      	mov	r4, r3
 8023fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023fac:	9100      	str	r1, [sp, #0]
 8023fae:	462b      	mov	r3, r5
 8023fb0:	4905      	ldr	r1, [pc, #20]	@ (8023fc8 <__assert_func+0x34>)
 8023fb2:	f000 f9b9 	bl	8024328 <fiprintf>
 8023fb6:	f000 f9d9 	bl	802436c <abort>
 8023fba:	4b04      	ldr	r3, [pc, #16]	@ (8023fcc <__assert_func+0x38>)
 8023fbc:	e7f4      	b.n	8023fa8 <__assert_func+0x14>
 8023fbe:	bf00      	nop
 8023fc0:	20000038 	.word	0x20000038
 8023fc4:	0802840a 	.word	0x0802840a
 8023fc8:	080283dc 	.word	0x080283dc
 8023fcc:	080283cf 	.word	0x080283cf

08023fd0 <_free_r>:
 8023fd0:	b538      	push	{r3, r4, r5, lr}
 8023fd2:	4605      	mov	r5, r0
 8023fd4:	2900      	cmp	r1, #0
 8023fd6:	d041      	beq.n	802405c <_free_r+0x8c>
 8023fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023fdc:	1f0c      	subs	r4, r1, #4
 8023fde:	2b00      	cmp	r3, #0
 8023fe0:	bfb8      	it	lt
 8023fe2:	18e4      	addlt	r4, r4, r3
 8023fe4:	f000 f8e8 	bl	80241b8 <__malloc_lock>
 8023fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8024060 <_free_r+0x90>)
 8023fea:	6813      	ldr	r3, [r2, #0]
 8023fec:	b933      	cbnz	r3, 8023ffc <_free_r+0x2c>
 8023fee:	6063      	str	r3, [r4, #4]
 8023ff0:	6014      	str	r4, [r2, #0]
 8023ff2:	4628      	mov	r0, r5
 8023ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ff8:	f000 b8e4 	b.w	80241c4 <__malloc_unlock>
 8023ffc:	42a3      	cmp	r3, r4
 8023ffe:	d908      	bls.n	8024012 <_free_r+0x42>
 8024000:	6820      	ldr	r0, [r4, #0]
 8024002:	1821      	adds	r1, r4, r0
 8024004:	428b      	cmp	r3, r1
 8024006:	bf01      	itttt	eq
 8024008:	6819      	ldreq	r1, [r3, #0]
 802400a:	685b      	ldreq	r3, [r3, #4]
 802400c:	1809      	addeq	r1, r1, r0
 802400e:	6021      	streq	r1, [r4, #0]
 8024010:	e7ed      	b.n	8023fee <_free_r+0x1e>
 8024012:	461a      	mov	r2, r3
 8024014:	685b      	ldr	r3, [r3, #4]
 8024016:	b10b      	cbz	r3, 802401c <_free_r+0x4c>
 8024018:	42a3      	cmp	r3, r4
 802401a:	d9fa      	bls.n	8024012 <_free_r+0x42>
 802401c:	6811      	ldr	r1, [r2, #0]
 802401e:	1850      	adds	r0, r2, r1
 8024020:	42a0      	cmp	r0, r4
 8024022:	d10b      	bne.n	802403c <_free_r+0x6c>
 8024024:	6820      	ldr	r0, [r4, #0]
 8024026:	4401      	add	r1, r0
 8024028:	1850      	adds	r0, r2, r1
 802402a:	4283      	cmp	r3, r0
 802402c:	6011      	str	r1, [r2, #0]
 802402e:	d1e0      	bne.n	8023ff2 <_free_r+0x22>
 8024030:	6818      	ldr	r0, [r3, #0]
 8024032:	685b      	ldr	r3, [r3, #4]
 8024034:	6053      	str	r3, [r2, #4]
 8024036:	4408      	add	r0, r1
 8024038:	6010      	str	r0, [r2, #0]
 802403a:	e7da      	b.n	8023ff2 <_free_r+0x22>
 802403c:	d902      	bls.n	8024044 <_free_r+0x74>
 802403e:	230c      	movs	r3, #12
 8024040:	602b      	str	r3, [r5, #0]
 8024042:	e7d6      	b.n	8023ff2 <_free_r+0x22>
 8024044:	6820      	ldr	r0, [r4, #0]
 8024046:	1821      	adds	r1, r4, r0
 8024048:	428b      	cmp	r3, r1
 802404a:	bf04      	itt	eq
 802404c:	6819      	ldreq	r1, [r3, #0]
 802404e:	685b      	ldreq	r3, [r3, #4]
 8024050:	6063      	str	r3, [r4, #4]
 8024052:	bf04      	itt	eq
 8024054:	1809      	addeq	r1, r1, r0
 8024056:	6021      	streq	r1, [r4, #0]
 8024058:	6054      	str	r4, [r2, #4]
 802405a:	e7ca      	b.n	8023ff2 <_free_r+0x22>
 802405c:	bd38      	pop	{r3, r4, r5, pc}
 802405e:	bf00      	nop
 8024060:	2000289c 	.word	0x2000289c

08024064 <malloc>:
 8024064:	4b02      	ldr	r3, [pc, #8]	@ (8024070 <malloc+0xc>)
 8024066:	4601      	mov	r1, r0
 8024068:	6818      	ldr	r0, [r3, #0]
 802406a:	f000 b825 	b.w	80240b8 <_malloc_r>
 802406e:	bf00      	nop
 8024070:	20000038 	.word	0x20000038

08024074 <sbrk_aligned>:
 8024074:	b570      	push	{r4, r5, r6, lr}
 8024076:	4e0f      	ldr	r6, [pc, #60]	@ (80240b4 <sbrk_aligned+0x40>)
 8024078:	460c      	mov	r4, r1
 802407a:	6831      	ldr	r1, [r6, #0]
 802407c:	4605      	mov	r5, r0
 802407e:	b911      	cbnz	r1, 8024086 <sbrk_aligned+0x12>
 8024080:	f000 f964 	bl	802434c <_sbrk_r>
 8024084:	6030      	str	r0, [r6, #0]
 8024086:	4621      	mov	r1, r4
 8024088:	4628      	mov	r0, r5
 802408a:	f000 f95f 	bl	802434c <_sbrk_r>
 802408e:	1c43      	adds	r3, r0, #1
 8024090:	d103      	bne.n	802409a <sbrk_aligned+0x26>
 8024092:	f04f 34ff 	mov.w	r4, #4294967295
 8024096:	4620      	mov	r0, r4
 8024098:	bd70      	pop	{r4, r5, r6, pc}
 802409a:	1cc4      	adds	r4, r0, #3
 802409c:	f024 0403 	bic.w	r4, r4, #3
 80240a0:	42a0      	cmp	r0, r4
 80240a2:	d0f8      	beq.n	8024096 <sbrk_aligned+0x22>
 80240a4:	1a21      	subs	r1, r4, r0
 80240a6:	4628      	mov	r0, r5
 80240a8:	f000 f950 	bl	802434c <_sbrk_r>
 80240ac:	3001      	adds	r0, #1
 80240ae:	d1f2      	bne.n	8024096 <sbrk_aligned+0x22>
 80240b0:	e7ef      	b.n	8024092 <sbrk_aligned+0x1e>
 80240b2:	bf00      	nop
 80240b4:	20002898 	.word	0x20002898

080240b8 <_malloc_r>:
 80240b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240bc:	1ccd      	adds	r5, r1, #3
 80240be:	f025 0503 	bic.w	r5, r5, #3
 80240c2:	3508      	adds	r5, #8
 80240c4:	2d0c      	cmp	r5, #12
 80240c6:	bf38      	it	cc
 80240c8:	250c      	movcc	r5, #12
 80240ca:	2d00      	cmp	r5, #0
 80240cc:	4606      	mov	r6, r0
 80240ce:	db01      	blt.n	80240d4 <_malloc_r+0x1c>
 80240d0:	42a9      	cmp	r1, r5
 80240d2:	d904      	bls.n	80240de <_malloc_r+0x26>
 80240d4:	230c      	movs	r3, #12
 80240d6:	6033      	str	r3, [r6, #0]
 80240d8:	2000      	movs	r0, #0
 80240da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80240de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80241b4 <_malloc_r+0xfc>
 80240e2:	f000 f869 	bl	80241b8 <__malloc_lock>
 80240e6:	f8d8 3000 	ldr.w	r3, [r8]
 80240ea:	461c      	mov	r4, r3
 80240ec:	bb44      	cbnz	r4, 8024140 <_malloc_r+0x88>
 80240ee:	4629      	mov	r1, r5
 80240f0:	4630      	mov	r0, r6
 80240f2:	f7ff ffbf 	bl	8024074 <sbrk_aligned>
 80240f6:	1c43      	adds	r3, r0, #1
 80240f8:	4604      	mov	r4, r0
 80240fa:	d158      	bne.n	80241ae <_malloc_r+0xf6>
 80240fc:	f8d8 4000 	ldr.w	r4, [r8]
 8024100:	4627      	mov	r7, r4
 8024102:	2f00      	cmp	r7, #0
 8024104:	d143      	bne.n	802418e <_malloc_r+0xd6>
 8024106:	2c00      	cmp	r4, #0
 8024108:	d04b      	beq.n	80241a2 <_malloc_r+0xea>
 802410a:	6823      	ldr	r3, [r4, #0]
 802410c:	4639      	mov	r1, r7
 802410e:	4630      	mov	r0, r6
 8024110:	eb04 0903 	add.w	r9, r4, r3
 8024114:	f000 f91a 	bl	802434c <_sbrk_r>
 8024118:	4581      	cmp	r9, r0
 802411a:	d142      	bne.n	80241a2 <_malloc_r+0xea>
 802411c:	6821      	ldr	r1, [r4, #0]
 802411e:	1a6d      	subs	r5, r5, r1
 8024120:	4629      	mov	r1, r5
 8024122:	4630      	mov	r0, r6
 8024124:	f7ff ffa6 	bl	8024074 <sbrk_aligned>
 8024128:	3001      	adds	r0, #1
 802412a:	d03a      	beq.n	80241a2 <_malloc_r+0xea>
 802412c:	6823      	ldr	r3, [r4, #0]
 802412e:	442b      	add	r3, r5
 8024130:	6023      	str	r3, [r4, #0]
 8024132:	f8d8 3000 	ldr.w	r3, [r8]
 8024136:	685a      	ldr	r2, [r3, #4]
 8024138:	bb62      	cbnz	r2, 8024194 <_malloc_r+0xdc>
 802413a:	f8c8 7000 	str.w	r7, [r8]
 802413e:	e00f      	b.n	8024160 <_malloc_r+0xa8>
 8024140:	6822      	ldr	r2, [r4, #0]
 8024142:	1b52      	subs	r2, r2, r5
 8024144:	d420      	bmi.n	8024188 <_malloc_r+0xd0>
 8024146:	2a0b      	cmp	r2, #11
 8024148:	d917      	bls.n	802417a <_malloc_r+0xc2>
 802414a:	1961      	adds	r1, r4, r5
 802414c:	42a3      	cmp	r3, r4
 802414e:	6025      	str	r5, [r4, #0]
 8024150:	bf18      	it	ne
 8024152:	6059      	strne	r1, [r3, #4]
 8024154:	6863      	ldr	r3, [r4, #4]
 8024156:	bf08      	it	eq
 8024158:	f8c8 1000 	streq.w	r1, [r8]
 802415c:	5162      	str	r2, [r4, r5]
 802415e:	604b      	str	r3, [r1, #4]
 8024160:	4630      	mov	r0, r6
 8024162:	f000 f82f 	bl	80241c4 <__malloc_unlock>
 8024166:	f104 000b 	add.w	r0, r4, #11
 802416a:	1d23      	adds	r3, r4, #4
 802416c:	f020 0007 	bic.w	r0, r0, #7
 8024170:	1ac2      	subs	r2, r0, r3
 8024172:	bf1c      	itt	ne
 8024174:	1a1b      	subne	r3, r3, r0
 8024176:	50a3      	strne	r3, [r4, r2]
 8024178:	e7af      	b.n	80240da <_malloc_r+0x22>
 802417a:	6862      	ldr	r2, [r4, #4]
 802417c:	42a3      	cmp	r3, r4
 802417e:	bf0c      	ite	eq
 8024180:	f8c8 2000 	streq.w	r2, [r8]
 8024184:	605a      	strne	r2, [r3, #4]
 8024186:	e7eb      	b.n	8024160 <_malloc_r+0xa8>
 8024188:	4623      	mov	r3, r4
 802418a:	6864      	ldr	r4, [r4, #4]
 802418c:	e7ae      	b.n	80240ec <_malloc_r+0x34>
 802418e:	463c      	mov	r4, r7
 8024190:	687f      	ldr	r7, [r7, #4]
 8024192:	e7b6      	b.n	8024102 <_malloc_r+0x4a>
 8024194:	461a      	mov	r2, r3
 8024196:	685b      	ldr	r3, [r3, #4]
 8024198:	42a3      	cmp	r3, r4
 802419a:	d1fb      	bne.n	8024194 <_malloc_r+0xdc>
 802419c:	2300      	movs	r3, #0
 802419e:	6053      	str	r3, [r2, #4]
 80241a0:	e7de      	b.n	8024160 <_malloc_r+0xa8>
 80241a2:	230c      	movs	r3, #12
 80241a4:	6033      	str	r3, [r6, #0]
 80241a6:	4630      	mov	r0, r6
 80241a8:	f000 f80c 	bl	80241c4 <__malloc_unlock>
 80241ac:	e794      	b.n	80240d8 <_malloc_r+0x20>
 80241ae:	6005      	str	r5, [r0, #0]
 80241b0:	e7d6      	b.n	8024160 <_malloc_r+0xa8>
 80241b2:	bf00      	nop
 80241b4:	2000289c 	.word	0x2000289c

080241b8 <__malloc_lock>:
 80241b8:	4801      	ldr	r0, [pc, #4]	@ (80241c0 <__malloc_lock+0x8>)
 80241ba:	f7ff bee8 	b.w	8023f8e <__retarget_lock_acquire_recursive>
 80241be:	bf00      	nop
 80241c0:	20002894 	.word	0x20002894

080241c4 <__malloc_unlock>:
 80241c4:	4801      	ldr	r0, [pc, #4]	@ (80241cc <__malloc_unlock+0x8>)
 80241c6:	f7ff bee3 	b.w	8023f90 <__retarget_lock_release_recursive>
 80241ca:	bf00      	nop
 80241cc:	20002894 	.word	0x20002894

080241d0 <__sflush_r>:
 80241d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80241d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241d8:	0716      	lsls	r6, r2, #28
 80241da:	4605      	mov	r5, r0
 80241dc:	460c      	mov	r4, r1
 80241de:	d454      	bmi.n	802428a <__sflush_r+0xba>
 80241e0:	684b      	ldr	r3, [r1, #4]
 80241e2:	2b00      	cmp	r3, #0
 80241e4:	dc02      	bgt.n	80241ec <__sflush_r+0x1c>
 80241e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80241e8:	2b00      	cmp	r3, #0
 80241ea:	dd48      	ble.n	802427e <__sflush_r+0xae>
 80241ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80241ee:	2e00      	cmp	r6, #0
 80241f0:	d045      	beq.n	802427e <__sflush_r+0xae>
 80241f2:	2300      	movs	r3, #0
 80241f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80241f8:	682f      	ldr	r7, [r5, #0]
 80241fa:	6a21      	ldr	r1, [r4, #32]
 80241fc:	602b      	str	r3, [r5, #0]
 80241fe:	d030      	beq.n	8024262 <__sflush_r+0x92>
 8024200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024202:	89a3      	ldrh	r3, [r4, #12]
 8024204:	0759      	lsls	r1, r3, #29
 8024206:	d505      	bpl.n	8024214 <__sflush_r+0x44>
 8024208:	6863      	ldr	r3, [r4, #4]
 802420a:	1ad2      	subs	r2, r2, r3
 802420c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802420e:	b10b      	cbz	r3, 8024214 <__sflush_r+0x44>
 8024210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024212:	1ad2      	subs	r2, r2, r3
 8024214:	2300      	movs	r3, #0
 8024216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024218:	6a21      	ldr	r1, [r4, #32]
 802421a:	4628      	mov	r0, r5
 802421c:	47b0      	blx	r6
 802421e:	1c43      	adds	r3, r0, #1
 8024220:	89a3      	ldrh	r3, [r4, #12]
 8024222:	d106      	bne.n	8024232 <__sflush_r+0x62>
 8024224:	6829      	ldr	r1, [r5, #0]
 8024226:	291d      	cmp	r1, #29
 8024228:	d82b      	bhi.n	8024282 <__sflush_r+0xb2>
 802422a:	4a2a      	ldr	r2, [pc, #168]	@ (80242d4 <__sflush_r+0x104>)
 802422c:	410a      	asrs	r2, r1
 802422e:	07d6      	lsls	r6, r2, #31
 8024230:	d427      	bmi.n	8024282 <__sflush_r+0xb2>
 8024232:	2200      	movs	r2, #0
 8024234:	6062      	str	r2, [r4, #4]
 8024236:	04d9      	lsls	r1, r3, #19
 8024238:	6922      	ldr	r2, [r4, #16]
 802423a:	6022      	str	r2, [r4, #0]
 802423c:	d504      	bpl.n	8024248 <__sflush_r+0x78>
 802423e:	1c42      	adds	r2, r0, #1
 8024240:	d101      	bne.n	8024246 <__sflush_r+0x76>
 8024242:	682b      	ldr	r3, [r5, #0]
 8024244:	b903      	cbnz	r3, 8024248 <__sflush_r+0x78>
 8024246:	6560      	str	r0, [r4, #84]	@ 0x54
 8024248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802424a:	602f      	str	r7, [r5, #0]
 802424c:	b1b9      	cbz	r1, 802427e <__sflush_r+0xae>
 802424e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024252:	4299      	cmp	r1, r3
 8024254:	d002      	beq.n	802425c <__sflush_r+0x8c>
 8024256:	4628      	mov	r0, r5
 8024258:	f7ff feba 	bl	8023fd0 <_free_r>
 802425c:	2300      	movs	r3, #0
 802425e:	6363      	str	r3, [r4, #52]	@ 0x34
 8024260:	e00d      	b.n	802427e <__sflush_r+0xae>
 8024262:	2301      	movs	r3, #1
 8024264:	4628      	mov	r0, r5
 8024266:	47b0      	blx	r6
 8024268:	4602      	mov	r2, r0
 802426a:	1c50      	adds	r0, r2, #1
 802426c:	d1c9      	bne.n	8024202 <__sflush_r+0x32>
 802426e:	682b      	ldr	r3, [r5, #0]
 8024270:	2b00      	cmp	r3, #0
 8024272:	d0c6      	beq.n	8024202 <__sflush_r+0x32>
 8024274:	2b1d      	cmp	r3, #29
 8024276:	d001      	beq.n	802427c <__sflush_r+0xac>
 8024278:	2b16      	cmp	r3, #22
 802427a:	d11e      	bne.n	80242ba <__sflush_r+0xea>
 802427c:	602f      	str	r7, [r5, #0]
 802427e:	2000      	movs	r0, #0
 8024280:	e022      	b.n	80242c8 <__sflush_r+0xf8>
 8024282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024286:	b21b      	sxth	r3, r3
 8024288:	e01b      	b.n	80242c2 <__sflush_r+0xf2>
 802428a:	690f      	ldr	r7, [r1, #16]
 802428c:	2f00      	cmp	r7, #0
 802428e:	d0f6      	beq.n	802427e <__sflush_r+0xae>
 8024290:	0793      	lsls	r3, r2, #30
 8024292:	680e      	ldr	r6, [r1, #0]
 8024294:	bf08      	it	eq
 8024296:	694b      	ldreq	r3, [r1, #20]
 8024298:	600f      	str	r7, [r1, #0]
 802429a:	bf18      	it	ne
 802429c:	2300      	movne	r3, #0
 802429e:	eba6 0807 	sub.w	r8, r6, r7
 80242a2:	608b      	str	r3, [r1, #8]
 80242a4:	f1b8 0f00 	cmp.w	r8, #0
 80242a8:	dde9      	ble.n	802427e <__sflush_r+0xae>
 80242aa:	6a21      	ldr	r1, [r4, #32]
 80242ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80242ae:	4643      	mov	r3, r8
 80242b0:	463a      	mov	r2, r7
 80242b2:	4628      	mov	r0, r5
 80242b4:	47b0      	blx	r6
 80242b6:	2800      	cmp	r0, #0
 80242b8:	dc08      	bgt.n	80242cc <__sflush_r+0xfc>
 80242ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80242c2:	81a3      	strh	r3, [r4, #12]
 80242c4:	f04f 30ff 	mov.w	r0, #4294967295
 80242c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80242cc:	4407      	add	r7, r0
 80242ce:	eba8 0800 	sub.w	r8, r8, r0
 80242d2:	e7e7      	b.n	80242a4 <__sflush_r+0xd4>
 80242d4:	dfbffffe 	.word	0xdfbffffe

080242d8 <_fflush_r>:
 80242d8:	b538      	push	{r3, r4, r5, lr}
 80242da:	690b      	ldr	r3, [r1, #16]
 80242dc:	4605      	mov	r5, r0
 80242de:	460c      	mov	r4, r1
 80242e0:	b913      	cbnz	r3, 80242e8 <_fflush_r+0x10>
 80242e2:	2500      	movs	r5, #0
 80242e4:	4628      	mov	r0, r5
 80242e6:	bd38      	pop	{r3, r4, r5, pc}
 80242e8:	b118      	cbz	r0, 80242f2 <_fflush_r+0x1a>
 80242ea:	6a03      	ldr	r3, [r0, #32]
 80242ec:	b90b      	cbnz	r3, 80242f2 <_fflush_r+0x1a>
 80242ee:	f7ff fcf9 	bl	8023ce4 <__sinit>
 80242f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d0f3      	beq.n	80242e2 <_fflush_r+0xa>
 80242fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80242fc:	07d0      	lsls	r0, r2, #31
 80242fe:	d404      	bmi.n	802430a <_fflush_r+0x32>
 8024300:	0599      	lsls	r1, r3, #22
 8024302:	d402      	bmi.n	802430a <_fflush_r+0x32>
 8024304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024306:	f7ff fe42 	bl	8023f8e <__retarget_lock_acquire_recursive>
 802430a:	4628      	mov	r0, r5
 802430c:	4621      	mov	r1, r4
 802430e:	f7ff ff5f 	bl	80241d0 <__sflush_r>
 8024312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024314:	07da      	lsls	r2, r3, #31
 8024316:	4605      	mov	r5, r0
 8024318:	d4e4      	bmi.n	80242e4 <_fflush_r+0xc>
 802431a:	89a3      	ldrh	r3, [r4, #12]
 802431c:	059b      	lsls	r3, r3, #22
 802431e:	d4e1      	bmi.n	80242e4 <_fflush_r+0xc>
 8024320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024322:	f7ff fe35 	bl	8023f90 <__retarget_lock_release_recursive>
 8024326:	e7dd      	b.n	80242e4 <_fflush_r+0xc>

08024328 <fiprintf>:
 8024328:	b40e      	push	{r1, r2, r3}
 802432a:	b503      	push	{r0, r1, lr}
 802432c:	4601      	mov	r1, r0
 802432e:	ab03      	add	r3, sp, #12
 8024330:	4805      	ldr	r0, [pc, #20]	@ (8024348 <fiprintf+0x20>)
 8024332:	f853 2b04 	ldr.w	r2, [r3], #4
 8024336:	6800      	ldr	r0, [r0, #0]
 8024338:	9301      	str	r3, [sp, #4]
 802433a:	f000 f847 	bl	80243cc <_vfiprintf_r>
 802433e:	b002      	add	sp, #8
 8024340:	f85d eb04 	ldr.w	lr, [sp], #4
 8024344:	b003      	add	sp, #12
 8024346:	4770      	bx	lr
 8024348:	20000038 	.word	0x20000038

0802434c <_sbrk_r>:
 802434c:	b538      	push	{r3, r4, r5, lr}
 802434e:	4d06      	ldr	r5, [pc, #24]	@ (8024368 <_sbrk_r+0x1c>)
 8024350:	2300      	movs	r3, #0
 8024352:	4604      	mov	r4, r0
 8024354:	4608      	mov	r0, r1
 8024356:	602b      	str	r3, [r5, #0]
 8024358:	f7df f83e 	bl	80033d8 <_sbrk>
 802435c:	1c43      	adds	r3, r0, #1
 802435e:	d102      	bne.n	8024366 <_sbrk_r+0x1a>
 8024360:	682b      	ldr	r3, [r5, #0]
 8024362:	b103      	cbz	r3, 8024366 <_sbrk_r+0x1a>
 8024364:	6023      	str	r3, [r4, #0]
 8024366:	bd38      	pop	{r3, r4, r5, pc}
 8024368:	20002890 	.word	0x20002890

0802436c <abort>:
 802436c:	b508      	push	{r3, lr}
 802436e:	2006      	movs	r0, #6
 8024370:	f000 fb8e 	bl	8024a90 <raise>
 8024374:	2001      	movs	r0, #1
 8024376:	f7de ffb7 	bl	80032e8 <_exit>

0802437a <__sfputc_r>:
 802437a:	6893      	ldr	r3, [r2, #8]
 802437c:	3b01      	subs	r3, #1
 802437e:	2b00      	cmp	r3, #0
 8024380:	b410      	push	{r4}
 8024382:	6093      	str	r3, [r2, #8]
 8024384:	da08      	bge.n	8024398 <__sfputc_r+0x1e>
 8024386:	6994      	ldr	r4, [r2, #24]
 8024388:	42a3      	cmp	r3, r4
 802438a:	db01      	blt.n	8024390 <__sfputc_r+0x16>
 802438c:	290a      	cmp	r1, #10
 802438e:	d103      	bne.n	8024398 <__sfputc_r+0x1e>
 8024390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024394:	f000 bac0 	b.w	8024918 <__swbuf_r>
 8024398:	6813      	ldr	r3, [r2, #0]
 802439a:	1c58      	adds	r0, r3, #1
 802439c:	6010      	str	r0, [r2, #0]
 802439e:	7019      	strb	r1, [r3, #0]
 80243a0:	4608      	mov	r0, r1
 80243a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80243a6:	4770      	bx	lr

080243a8 <__sfputs_r>:
 80243a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243aa:	4606      	mov	r6, r0
 80243ac:	460f      	mov	r7, r1
 80243ae:	4614      	mov	r4, r2
 80243b0:	18d5      	adds	r5, r2, r3
 80243b2:	42ac      	cmp	r4, r5
 80243b4:	d101      	bne.n	80243ba <__sfputs_r+0x12>
 80243b6:	2000      	movs	r0, #0
 80243b8:	e007      	b.n	80243ca <__sfputs_r+0x22>
 80243ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80243be:	463a      	mov	r2, r7
 80243c0:	4630      	mov	r0, r6
 80243c2:	f7ff ffda 	bl	802437a <__sfputc_r>
 80243c6:	1c43      	adds	r3, r0, #1
 80243c8:	d1f3      	bne.n	80243b2 <__sfputs_r+0xa>
 80243ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080243cc <_vfiprintf_r>:
 80243cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243d0:	460d      	mov	r5, r1
 80243d2:	b09d      	sub	sp, #116	@ 0x74
 80243d4:	4614      	mov	r4, r2
 80243d6:	4698      	mov	r8, r3
 80243d8:	4606      	mov	r6, r0
 80243da:	b118      	cbz	r0, 80243e4 <_vfiprintf_r+0x18>
 80243dc:	6a03      	ldr	r3, [r0, #32]
 80243de:	b90b      	cbnz	r3, 80243e4 <_vfiprintf_r+0x18>
 80243e0:	f7ff fc80 	bl	8023ce4 <__sinit>
 80243e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80243e6:	07d9      	lsls	r1, r3, #31
 80243e8:	d405      	bmi.n	80243f6 <_vfiprintf_r+0x2a>
 80243ea:	89ab      	ldrh	r3, [r5, #12]
 80243ec:	059a      	lsls	r2, r3, #22
 80243ee:	d402      	bmi.n	80243f6 <_vfiprintf_r+0x2a>
 80243f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80243f2:	f7ff fdcc 	bl	8023f8e <__retarget_lock_acquire_recursive>
 80243f6:	89ab      	ldrh	r3, [r5, #12]
 80243f8:	071b      	lsls	r3, r3, #28
 80243fa:	d501      	bpl.n	8024400 <_vfiprintf_r+0x34>
 80243fc:	692b      	ldr	r3, [r5, #16]
 80243fe:	b99b      	cbnz	r3, 8024428 <_vfiprintf_r+0x5c>
 8024400:	4629      	mov	r1, r5
 8024402:	4630      	mov	r0, r6
 8024404:	f000 fac6 	bl	8024994 <__swsetup_r>
 8024408:	b170      	cbz	r0, 8024428 <_vfiprintf_r+0x5c>
 802440a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802440c:	07dc      	lsls	r4, r3, #31
 802440e:	d504      	bpl.n	802441a <_vfiprintf_r+0x4e>
 8024410:	f04f 30ff 	mov.w	r0, #4294967295
 8024414:	b01d      	add	sp, #116	@ 0x74
 8024416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802441a:	89ab      	ldrh	r3, [r5, #12]
 802441c:	0598      	lsls	r0, r3, #22
 802441e:	d4f7      	bmi.n	8024410 <_vfiprintf_r+0x44>
 8024420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024422:	f7ff fdb5 	bl	8023f90 <__retarget_lock_release_recursive>
 8024426:	e7f3      	b.n	8024410 <_vfiprintf_r+0x44>
 8024428:	2300      	movs	r3, #0
 802442a:	9309      	str	r3, [sp, #36]	@ 0x24
 802442c:	2320      	movs	r3, #32
 802442e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024432:	f8cd 800c 	str.w	r8, [sp, #12]
 8024436:	2330      	movs	r3, #48	@ 0x30
 8024438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80245e8 <_vfiprintf_r+0x21c>
 802443c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024440:	f04f 0901 	mov.w	r9, #1
 8024444:	4623      	mov	r3, r4
 8024446:	469a      	mov	sl, r3
 8024448:	f813 2b01 	ldrb.w	r2, [r3], #1
 802444c:	b10a      	cbz	r2, 8024452 <_vfiprintf_r+0x86>
 802444e:	2a25      	cmp	r2, #37	@ 0x25
 8024450:	d1f9      	bne.n	8024446 <_vfiprintf_r+0x7a>
 8024452:	ebba 0b04 	subs.w	fp, sl, r4
 8024456:	d00b      	beq.n	8024470 <_vfiprintf_r+0xa4>
 8024458:	465b      	mov	r3, fp
 802445a:	4622      	mov	r2, r4
 802445c:	4629      	mov	r1, r5
 802445e:	4630      	mov	r0, r6
 8024460:	f7ff ffa2 	bl	80243a8 <__sfputs_r>
 8024464:	3001      	adds	r0, #1
 8024466:	f000 80a7 	beq.w	80245b8 <_vfiprintf_r+0x1ec>
 802446a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802446c:	445a      	add	r2, fp
 802446e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024470:	f89a 3000 	ldrb.w	r3, [sl]
 8024474:	2b00      	cmp	r3, #0
 8024476:	f000 809f 	beq.w	80245b8 <_vfiprintf_r+0x1ec>
 802447a:	2300      	movs	r3, #0
 802447c:	f04f 32ff 	mov.w	r2, #4294967295
 8024480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024484:	f10a 0a01 	add.w	sl, sl, #1
 8024488:	9304      	str	r3, [sp, #16]
 802448a:	9307      	str	r3, [sp, #28]
 802448c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024490:	931a      	str	r3, [sp, #104]	@ 0x68
 8024492:	4654      	mov	r4, sl
 8024494:	2205      	movs	r2, #5
 8024496:	f814 1b01 	ldrb.w	r1, [r4], #1
 802449a:	4853      	ldr	r0, [pc, #332]	@ (80245e8 <_vfiprintf_r+0x21c>)
 802449c:	f7db ff38 	bl	8000310 <memchr>
 80244a0:	9a04      	ldr	r2, [sp, #16]
 80244a2:	b9d8      	cbnz	r0, 80244dc <_vfiprintf_r+0x110>
 80244a4:	06d1      	lsls	r1, r2, #27
 80244a6:	bf44      	itt	mi
 80244a8:	2320      	movmi	r3, #32
 80244aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80244ae:	0713      	lsls	r3, r2, #28
 80244b0:	bf44      	itt	mi
 80244b2:	232b      	movmi	r3, #43	@ 0x2b
 80244b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80244b8:	f89a 3000 	ldrb.w	r3, [sl]
 80244bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80244be:	d015      	beq.n	80244ec <_vfiprintf_r+0x120>
 80244c0:	9a07      	ldr	r2, [sp, #28]
 80244c2:	4654      	mov	r4, sl
 80244c4:	2000      	movs	r0, #0
 80244c6:	f04f 0c0a 	mov.w	ip, #10
 80244ca:	4621      	mov	r1, r4
 80244cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80244d0:	3b30      	subs	r3, #48	@ 0x30
 80244d2:	2b09      	cmp	r3, #9
 80244d4:	d94b      	bls.n	802456e <_vfiprintf_r+0x1a2>
 80244d6:	b1b0      	cbz	r0, 8024506 <_vfiprintf_r+0x13a>
 80244d8:	9207      	str	r2, [sp, #28]
 80244da:	e014      	b.n	8024506 <_vfiprintf_r+0x13a>
 80244dc:	eba0 0308 	sub.w	r3, r0, r8
 80244e0:	fa09 f303 	lsl.w	r3, r9, r3
 80244e4:	4313      	orrs	r3, r2
 80244e6:	9304      	str	r3, [sp, #16]
 80244e8:	46a2      	mov	sl, r4
 80244ea:	e7d2      	b.n	8024492 <_vfiprintf_r+0xc6>
 80244ec:	9b03      	ldr	r3, [sp, #12]
 80244ee:	1d19      	adds	r1, r3, #4
 80244f0:	681b      	ldr	r3, [r3, #0]
 80244f2:	9103      	str	r1, [sp, #12]
 80244f4:	2b00      	cmp	r3, #0
 80244f6:	bfbb      	ittet	lt
 80244f8:	425b      	neglt	r3, r3
 80244fa:	f042 0202 	orrlt.w	r2, r2, #2
 80244fe:	9307      	strge	r3, [sp, #28]
 8024500:	9307      	strlt	r3, [sp, #28]
 8024502:	bfb8      	it	lt
 8024504:	9204      	strlt	r2, [sp, #16]
 8024506:	7823      	ldrb	r3, [r4, #0]
 8024508:	2b2e      	cmp	r3, #46	@ 0x2e
 802450a:	d10a      	bne.n	8024522 <_vfiprintf_r+0x156>
 802450c:	7863      	ldrb	r3, [r4, #1]
 802450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8024510:	d132      	bne.n	8024578 <_vfiprintf_r+0x1ac>
 8024512:	9b03      	ldr	r3, [sp, #12]
 8024514:	1d1a      	adds	r2, r3, #4
 8024516:	681b      	ldr	r3, [r3, #0]
 8024518:	9203      	str	r2, [sp, #12]
 802451a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802451e:	3402      	adds	r4, #2
 8024520:	9305      	str	r3, [sp, #20]
 8024522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80245f8 <_vfiprintf_r+0x22c>
 8024526:	7821      	ldrb	r1, [r4, #0]
 8024528:	2203      	movs	r2, #3
 802452a:	4650      	mov	r0, sl
 802452c:	f7db fef0 	bl	8000310 <memchr>
 8024530:	b138      	cbz	r0, 8024542 <_vfiprintf_r+0x176>
 8024532:	9b04      	ldr	r3, [sp, #16]
 8024534:	eba0 000a 	sub.w	r0, r0, sl
 8024538:	2240      	movs	r2, #64	@ 0x40
 802453a:	4082      	lsls	r2, r0
 802453c:	4313      	orrs	r3, r2
 802453e:	3401      	adds	r4, #1
 8024540:	9304      	str	r3, [sp, #16]
 8024542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024546:	4829      	ldr	r0, [pc, #164]	@ (80245ec <_vfiprintf_r+0x220>)
 8024548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802454c:	2206      	movs	r2, #6
 802454e:	f7db fedf 	bl	8000310 <memchr>
 8024552:	2800      	cmp	r0, #0
 8024554:	d03f      	beq.n	80245d6 <_vfiprintf_r+0x20a>
 8024556:	4b26      	ldr	r3, [pc, #152]	@ (80245f0 <_vfiprintf_r+0x224>)
 8024558:	bb1b      	cbnz	r3, 80245a2 <_vfiprintf_r+0x1d6>
 802455a:	9b03      	ldr	r3, [sp, #12]
 802455c:	3307      	adds	r3, #7
 802455e:	f023 0307 	bic.w	r3, r3, #7
 8024562:	3308      	adds	r3, #8
 8024564:	9303      	str	r3, [sp, #12]
 8024566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024568:	443b      	add	r3, r7
 802456a:	9309      	str	r3, [sp, #36]	@ 0x24
 802456c:	e76a      	b.n	8024444 <_vfiprintf_r+0x78>
 802456e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024572:	460c      	mov	r4, r1
 8024574:	2001      	movs	r0, #1
 8024576:	e7a8      	b.n	80244ca <_vfiprintf_r+0xfe>
 8024578:	2300      	movs	r3, #0
 802457a:	3401      	adds	r4, #1
 802457c:	9305      	str	r3, [sp, #20]
 802457e:	4619      	mov	r1, r3
 8024580:	f04f 0c0a 	mov.w	ip, #10
 8024584:	4620      	mov	r0, r4
 8024586:	f810 2b01 	ldrb.w	r2, [r0], #1
 802458a:	3a30      	subs	r2, #48	@ 0x30
 802458c:	2a09      	cmp	r2, #9
 802458e:	d903      	bls.n	8024598 <_vfiprintf_r+0x1cc>
 8024590:	2b00      	cmp	r3, #0
 8024592:	d0c6      	beq.n	8024522 <_vfiprintf_r+0x156>
 8024594:	9105      	str	r1, [sp, #20]
 8024596:	e7c4      	b.n	8024522 <_vfiprintf_r+0x156>
 8024598:	fb0c 2101 	mla	r1, ip, r1, r2
 802459c:	4604      	mov	r4, r0
 802459e:	2301      	movs	r3, #1
 80245a0:	e7f0      	b.n	8024584 <_vfiprintf_r+0x1b8>
 80245a2:	ab03      	add	r3, sp, #12
 80245a4:	9300      	str	r3, [sp, #0]
 80245a6:	462a      	mov	r2, r5
 80245a8:	4b12      	ldr	r3, [pc, #72]	@ (80245f4 <_vfiprintf_r+0x228>)
 80245aa:	a904      	add	r1, sp, #16
 80245ac:	4630      	mov	r0, r6
 80245ae:	f3af 8000 	nop.w
 80245b2:	4607      	mov	r7, r0
 80245b4:	1c78      	adds	r0, r7, #1
 80245b6:	d1d6      	bne.n	8024566 <_vfiprintf_r+0x19a>
 80245b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80245ba:	07d9      	lsls	r1, r3, #31
 80245bc:	d405      	bmi.n	80245ca <_vfiprintf_r+0x1fe>
 80245be:	89ab      	ldrh	r3, [r5, #12]
 80245c0:	059a      	lsls	r2, r3, #22
 80245c2:	d402      	bmi.n	80245ca <_vfiprintf_r+0x1fe>
 80245c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80245c6:	f7ff fce3 	bl	8023f90 <__retarget_lock_release_recursive>
 80245ca:	89ab      	ldrh	r3, [r5, #12]
 80245cc:	065b      	lsls	r3, r3, #25
 80245ce:	f53f af1f 	bmi.w	8024410 <_vfiprintf_r+0x44>
 80245d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80245d4:	e71e      	b.n	8024414 <_vfiprintf_r+0x48>
 80245d6:	ab03      	add	r3, sp, #12
 80245d8:	9300      	str	r3, [sp, #0]
 80245da:	462a      	mov	r2, r5
 80245dc:	4b05      	ldr	r3, [pc, #20]	@ (80245f4 <_vfiprintf_r+0x228>)
 80245de:	a904      	add	r1, sp, #16
 80245e0:	4630      	mov	r0, r6
 80245e2:	f000 f879 	bl	80246d8 <_printf_i>
 80245e6:	e7e4      	b.n	80245b2 <_vfiprintf_r+0x1e6>
 80245e8:	0802850c 	.word	0x0802850c
 80245ec:	08028516 	.word	0x08028516
 80245f0:	00000000 	.word	0x00000000
 80245f4:	080243a9 	.word	0x080243a9
 80245f8:	08028512 	.word	0x08028512

080245fc <_printf_common>:
 80245fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024600:	4616      	mov	r6, r2
 8024602:	4698      	mov	r8, r3
 8024604:	688a      	ldr	r2, [r1, #8]
 8024606:	690b      	ldr	r3, [r1, #16]
 8024608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802460c:	4293      	cmp	r3, r2
 802460e:	bfb8      	it	lt
 8024610:	4613      	movlt	r3, r2
 8024612:	6033      	str	r3, [r6, #0]
 8024614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024618:	4607      	mov	r7, r0
 802461a:	460c      	mov	r4, r1
 802461c:	b10a      	cbz	r2, 8024622 <_printf_common+0x26>
 802461e:	3301      	adds	r3, #1
 8024620:	6033      	str	r3, [r6, #0]
 8024622:	6823      	ldr	r3, [r4, #0]
 8024624:	0699      	lsls	r1, r3, #26
 8024626:	bf42      	ittt	mi
 8024628:	6833      	ldrmi	r3, [r6, #0]
 802462a:	3302      	addmi	r3, #2
 802462c:	6033      	strmi	r3, [r6, #0]
 802462e:	6825      	ldr	r5, [r4, #0]
 8024630:	f015 0506 	ands.w	r5, r5, #6
 8024634:	d106      	bne.n	8024644 <_printf_common+0x48>
 8024636:	f104 0a19 	add.w	sl, r4, #25
 802463a:	68e3      	ldr	r3, [r4, #12]
 802463c:	6832      	ldr	r2, [r6, #0]
 802463e:	1a9b      	subs	r3, r3, r2
 8024640:	42ab      	cmp	r3, r5
 8024642:	dc26      	bgt.n	8024692 <_printf_common+0x96>
 8024644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024648:	6822      	ldr	r2, [r4, #0]
 802464a:	3b00      	subs	r3, #0
 802464c:	bf18      	it	ne
 802464e:	2301      	movne	r3, #1
 8024650:	0692      	lsls	r2, r2, #26
 8024652:	d42b      	bmi.n	80246ac <_printf_common+0xb0>
 8024654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024658:	4641      	mov	r1, r8
 802465a:	4638      	mov	r0, r7
 802465c:	47c8      	blx	r9
 802465e:	3001      	adds	r0, #1
 8024660:	d01e      	beq.n	80246a0 <_printf_common+0xa4>
 8024662:	6823      	ldr	r3, [r4, #0]
 8024664:	6922      	ldr	r2, [r4, #16]
 8024666:	f003 0306 	and.w	r3, r3, #6
 802466a:	2b04      	cmp	r3, #4
 802466c:	bf02      	ittt	eq
 802466e:	68e5      	ldreq	r5, [r4, #12]
 8024670:	6833      	ldreq	r3, [r6, #0]
 8024672:	1aed      	subeq	r5, r5, r3
 8024674:	68a3      	ldr	r3, [r4, #8]
 8024676:	bf0c      	ite	eq
 8024678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802467c:	2500      	movne	r5, #0
 802467e:	4293      	cmp	r3, r2
 8024680:	bfc4      	itt	gt
 8024682:	1a9b      	subgt	r3, r3, r2
 8024684:	18ed      	addgt	r5, r5, r3
 8024686:	2600      	movs	r6, #0
 8024688:	341a      	adds	r4, #26
 802468a:	42b5      	cmp	r5, r6
 802468c:	d11a      	bne.n	80246c4 <_printf_common+0xc8>
 802468e:	2000      	movs	r0, #0
 8024690:	e008      	b.n	80246a4 <_printf_common+0xa8>
 8024692:	2301      	movs	r3, #1
 8024694:	4652      	mov	r2, sl
 8024696:	4641      	mov	r1, r8
 8024698:	4638      	mov	r0, r7
 802469a:	47c8      	blx	r9
 802469c:	3001      	adds	r0, #1
 802469e:	d103      	bne.n	80246a8 <_printf_common+0xac>
 80246a0:	f04f 30ff 	mov.w	r0, #4294967295
 80246a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80246a8:	3501      	adds	r5, #1
 80246aa:	e7c6      	b.n	802463a <_printf_common+0x3e>
 80246ac:	18e1      	adds	r1, r4, r3
 80246ae:	1c5a      	adds	r2, r3, #1
 80246b0:	2030      	movs	r0, #48	@ 0x30
 80246b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80246b6:	4422      	add	r2, r4
 80246b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80246bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80246c0:	3302      	adds	r3, #2
 80246c2:	e7c7      	b.n	8024654 <_printf_common+0x58>
 80246c4:	2301      	movs	r3, #1
 80246c6:	4622      	mov	r2, r4
 80246c8:	4641      	mov	r1, r8
 80246ca:	4638      	mov	r0, r7
 80246cc:	47c8      	blx	r9
 80246ce:	3001      	adds	r0, #1
 80246d0:	d0e6      	beq.n	80246a0 <_printf_common+0xa4>
 80246d2:	3601      	adds	r6, #1
 80246d4:	e7d9      	b.n	802468a <_printf_common+0x8e>
	...

080246d8 <_printf_i>:
 80246d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80246dc:	7e0f      	ldrb	r7, [r1, #24]
 80246de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80246e0:	2f78      	cmp	r7, #120	@ 0x78
 80246e2:	4691      	mov	r9, r2
 80246e4:	4680      	mov	r8, r0
 80246e6:	460c      	mov	r4, r1
 80246e8:	469a      	mov	sl, r3
 80246ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80246ee:	d807      	bhi.n	8024700 <_printf_i+0x28>
 80246f0:	2f62      	cmp	r7, #98	@ 0x62
 80246f2:	d80a      	bhi.n	802470a <_printf_i+0x32>
 80246f4:	2f00      	cmp	r7, #0
 80246f6:	f000 80d2 	beq.w	802489e <_printf_i+0x1c6>
 80246fa:	2f58      	cmp	r7, #88	@ 0x58
 80246fc:	f000 80b9 	beq.w	8024872 <_printf_i+0x19a>
 8024700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024708:	e03a      	b.n	8024780 <_printf_i+0xa8>
 802470a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802470e:	2b15      	cmp	r3, #21
 8024710:	d8f6      	bhi.n	8024700 <_printf_i+0x28>
 8024712:	a101      	add	r1, pc, #4	@ (adr r1, 8024718 <_printf_i+0x40>)
 8024714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024718:	08024771 	.word	0x08024771
 802471c:	08024785 	.word	0x08024785
 8024720:	08024701 	.word	0x08024701
 8024724:	08024701 	.word	0x08024701
 8024728:	08024701 	.word	0x08024701
 802472c:	08024701 	.word	0x08024701
 8024730:	08024785 	.word	0x08024785
 8024734:	08024701 	.word	0x08024701
 8024738:	08024701 	.word	0x08024701
 802473c:	08024701 	.word	0x08024701
 8024740:	08024701 	.word	0x08024701
 8024744:	08024885 	.word	0x08024885
 8024748:	080247af 	.word	0x080247af
 802474c:	0802483f 	.word	0x0802483f
 8024750:	08024701 	.word	0x08024701
 8024754:	08024701 	.word	0x08024701
 8024758:	080248a7 	.word	0x080248a7
 802475c:	08024701 	.word	0x08024701
 8024760:	080247af 	.word	0x080247af
 8024764:	08024701 	.word	0x08024701
 8024768:	08024701 	.word	0x08024701
 802476c:	08024847 	.word	0x08024847
 8024770:	6833      	ldr	r3, [r6, #0]
 8024772:	1d1a      	adds	r2, r3, #4
 8024774:	681b      	ldr	r3, [r3, #0]
 8024776:	6032      	str	r2, [r6, #0]
 8024778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802477c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024780:	2301      	movs	r3, #1
 8024782:	e09d      	b.n	80248c0 <_printf_i+0x1e8>
 8024784:	6833      	ldr	r3, [r6, #0]
 8024786:	6820      	ldr	r0, [r4, #0]
 8024788:	1d19      	adds	r1, r3, #4
 802478a:	6031      	str	r1, [r6, #0]
 802478c:	0606      	lsls	r6, r0, #24
 802478e:	d501      	bpl.n	8024794 <_printf_i+0xbc>
 8024790:	681d      	ldr	r5, [r3, #0]
 8024792:	e003      	b.n	802479c <_printf_i+0xc4>
 8024794:	0645      	lsls	r5, r0, #25
 8024796:	d5fb      	bpl.n	8024790 <_printf_i+0xb8>
 8024798:	f9b3 5000 	ldrsh.w	r5, [r3]
 802479c:	2d00      	cmp	r5, #0
 802479e:	da03      	bge.n	80247a8 <_printf_i+0xd0>
 80247a0:	232d      	movs	r3, #45	@ 0x2d
 80247a2:	426d      	negs	r5, r5
 80247a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80247a8:	4859      	ldr	r0, [pc, #356]	@ (8024910 <_printf_i+0x238>)
 80247aa:	230a      	movs	r3, #10
 80247ac:	e011      	b.n	80247d2 <_printf_i+0xfa>
 80247ae:	6821      	ldr	r1, [r4, #0]
 80247b0:	6833      	ldr	r3, [r6, #0]
 80247b2:	0608      	lsls	r0, r1, #24
 80247b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80247b8:	d402      	bmi.n	80247c0 <_printf_i+0xe8>
 80247ba:	0649      	lsls	r1, r1, #25
 80247bc:	bf48      	it	mi
 80247be:	b2ad      	uxthmi	r5, r5
 80247c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80247c2:	4853      	ldr	r0, [pc, #332]	@ (8024910 <_printf_i+0x238>)
 80247c4:	6033      	str	r3, [r6, #0]
 80247c6:	bf14      	ite	ne
 80247c8:	230a      	movne	r3, #10
 80247ca:	2308      	moveq	r3, #8
 80247cc:	2100      	movs	r1, #0
 80247ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80247d2:	6866      	ldr	r6, [r4, #4]
 80247d4:	60a6      	str	r6, [r4, #8]
 80247d6:	2e00      	cmp	r6, #0
 80247d8:	bfa2      	ittt	ge
 80247da:	6821      	ldrge	r1, [r4, #0]
 80247dc:	f021 0104 	bicge.w	r1, r1, #4
 80247e0:	6021      	strge	r1, [r4, #0]
 80247e2:	b90d      	cbnz	r5, 80247e8 <_printf_i+0x110>
 80247e4:	2e00      	cmp	r6, #0
 80247e6:	d04b      	beq.n	8024880 <_printf_i+0x1a8>
 80247e8:	4616      	mov	r6, r2
 80247ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80247ee:	fb03 5711 	mls	r7, r3, r1, r5
 80247f2:	5dc7      	ldrb	r7, [r0, r7]
 80247f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80247f8:	462f      	mov	r7, r5
 80247fa:	42bb      	cmp	r3, r7
 80247fc:	460d      	mov	r5, r1
 80247fe:	d9f4      	bls.n	80247ea <_printf_i+0x112>
 8024800:	2b08      	cmp	r3, #8
 8024802:	d10b      	bne.n	802481c <_printf_i+0x144>
 8024804:	6823      	ldr	r3, [r4, #0]
 8024806:	07df      	lsls	r7, r3, #31
 8024808:	d508      	bpl.n	802481c <_printf_i+0x144>
 802480a:	6923      	ldr	r3, [r4, #16]
 802480c:	6861      	ldr	r1, [r4, #4]
 802480e:	4299      	cmp	r1, r3
 8024810:	bfde      	ittt	le
 8024812:	2330      	movle	r3, #48	@ 0x30
 8024814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024818:	f106 36ff 	addle.w	r6, r6, #4294967295
 802481c:	1b92      	subs	r2, r2, r6
 802481e:	6122      	str	r2, [r4, #16]
 8024820:	f8cd a000 	str.w	sl, [sp]
 8024824:	464b      	mov	r3, r9
 8024826:	aa03      	add	r2, sp, #12
 8024828:	4621      	mov	r1, r4
 802482a:	4640      	mov	r0, r8
 802482c:	f7ff fee6 	bl	80245fc <_printf_common>
 8024830:	3001      	adds	r0, #1
 8024832:	d14a      	bne.n	80248ca <_printf_i+0x1f2>
 8024834:	f04f 30ff 	mov.w	r0, #4294967295
 8024838:	b004      	add	sp, #16
 802483a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802483e:	6823      	ldr	r3, [r4, #0]
 8024840:	f043 0320 	orr.w	r3, r3, #32
 8024844:	6023      	str	r3, [r4, #0]
 8024846:	4833      	ldr	r0, [pc, #204]	@ (8024914 <_printf_i+0x23c>)
 8024848:	2778      	movs	r7, #120	@ 0x78
 802484a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802484e:	6823      	ldr	r3, [r4, #0]
 8024850:	6831      	ldr	r1, [r6, #0]
 8024852:	061f      	lsls	r7, r3, #24
 8024854:	f851 5b04 	ldr.w	r5, [r1], #4
 8024858:	d402      	bmi.n	8024860 <_printf_i+0x188>
 802485a:	065f      	lsls	r7, r3, #25
 802485c:	bf48      	it	mi
 802485e:	b2ad      	uxthmi	r5, r5
 8024860:	6031      	str	r1, [r6, #0]
 8024862:	07d9      	lsls	r1, r3, #31
 8024864:	bf44      	itt	mi
 8024866:	f043 0320 	orrmi.w	r3, r3, #32
 802486a:	6023      	strmi	r3, [r4, #0]
 802486c:	b11d      	cbz	r5, 8024876 <_printf_i+0x19e>
 802486e:	2310      	movs	r3, #16
 8024870:	e7ac      	b.n	80247cc <_printf_i+0xf4>
 8024872:	4827      	ldr	r0, [pc, #156]	@ (8024910 <_printf_i+0x238>)
 8024874:	e7e9      	b.n	802484a <_printf_i+0x172>
 8024876:	6823      	ldr	r3, [r4, #0]
 8024878:	f023 0320 	bic.w	r3, r3, #32
 802487c:	6023      	str	r3, [r4, #0]
 802487e:	e7f6      	b.n	802486e <_printf_i+0x196>
 8024880:	4616      	mov	r6, r2
 8024882:	e7bd      	b.n	8024800 <_printf_i+0x128>
 8024884:	6833      	ldr	r3, [r6, #0]
 8024886:	6825      	ldr	r5, [r4, #0]
 8024888:	6961      	ldr	r1, [r4, #20]
 802488a:	1d18      	adds	r0, r3, #4
 802488c:	6030      	str	r0, [r6, #0]
 802488e:	062e      	lsls	r6, r5, #24
 8024890:	681b      	ldr	r3, [r3, #0]
 8024892:	d501      	bpl.n	8024898 <_printf_i+0x1c0>
 8024894:	6019      	str	r1, [r3, #0]
 8024896:	e002      	b.n	802489e <_printf_i+0x1c6>
 8024898:	0668      	lsls	r0, r5, #25
 802489a:	d5fb      	bpl.n	8024894 <_printf_i+0x1bc>
 802489c:	8019      	strh	r1, [r3, #0]
 802489e:	2300      	movs	r3, #0
 80248a0:	6123      	str	r3, [r4, #16]
 80248a2:	4616      	mov	r6, r2
 80248a4:	e7bc      	b.n	8024820 <_printf_i+0x148>
 80248a6:	6833      	ldr	r3, [r6, #0]
 80248a8:	1d1a      	adds	r2, r3, #4
 80248aa:	6032      	str	r2, [r6, #0]
 80248ac:	681e      	ldr	r6, [r3, #0]
 80248ae:	6862      	ldr	r2, [r4, #4]
 80248b0:	2100      	movs	r1, #0
 80248b2:	4630      	mov	r0, r6
 80248b4:	f7db fd2c 	bl	8000310 <memchr>
 80248b8:	b108      	cbz	r0, 80248be <_printf_i+0x1e6>
 80248ba:	1b80      	subs	r0, r0, r6
 80248bc:	6060      	str	r0, [r4, #4]
 80248be:	6863      	ldr	r3, [r4, #4]
 80248c0:	6123      	str	r3, [r4, #16]
 80248c2:	2300      	movs	r3, #0
 80248c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80248c8:	e7aa      	b.n	8024820 <_printf_i+0x148>
 80248ca:	6923      	ldr	r3, [r4, #16]
 80248cc:	4632      	mov	r2, r6
 80248ce:	4649      	mov	r1, r9
 80248d0:	4640      	mov	r0, r8
 80248d2:	47d0      	blx	sl
 80248d4:	3001      	adds	r0, #1
 80248d6:	d0ad      	beq.n	8024834 <_printf_i+0x15c>
 80248d8:	6823      	ldr	r3, [r4, #0]
 80248da:	079b      	lsls	r3, r3, #30
 80248dc:	d413      	bmi.n	8024906 <_printf_i+0x22e>
 80248de:	68e0      	ldr	r0, [r4, #12]
 80248e0:	9b03      	ldr	r3, [sp, #12]
 80248e2:	4298      	cmp	r0, r3
 80248e4:	bfb8      	it	lt
 80248e6:	4618      	movlt	r0, r3
 80248e8:	e7a6      	b.n	8024838 <_printf_i+0x160>
 80248ea:	2301      	movs	r3, #1
 80248ec:	4632      	mov	r2, r6
 80248ee:	4649      	mov	r1, r9
 80248f0:	4640      	mov	r0, r8
 80248f2:	47d0      	blx	sl
 80248f4:	3001      	adds	r0, #1
 80248f6:	d09d      	beq.n	8024834 <_printf_i+0x15c>
 80248f8:	3501      	adds	r5, #1
 80248fa:	68e3      	ldr	r3, [r4, #12]
 80248fc:	9903      	ldr	r1, [sp, #12]
 80248fe:	1a5b      	subs	r3, r3, r1
 8024900:	42ab      	cmp	r3, r5
 8024902:	dcf2      	bgt.n	80248ea <_printf_i+0x212>
 8024904:	e7eb      	b.n	80248de <_printf_i+0x206>
 8024906:	2500      	movs	r5, #0
 8024908:	f104 0619 	add.w	r6, r4, #25
 802490c:	e7f5      	b.n	80248fa <_printf_i+0x222>
 802490e:	bf00      	nop
 8024910:	0802851d 	.word	0x0802851d
 8024914:	0802852e 	.word	0x0802852e

08024918 <__swbuf_r>:
 8024918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802491a:	460e      	mov	r6, r1
 802491c:	4614      	mov	r4, r2
 802491e:	4605      	mov	r5, r0
 8024920:	b118      	cbz	r0, 802492a <__swbuf_r+0x12>
 8024922:	6a03      	ldr	r3, [r0, #32]
 8024924:	b90b      	cbnz	r3, 802492a <__swbuf_r+0x12>
 8024926:	f7ff f9dd 	bl	8023ce4 <__sinit>
 802492a:	69a3      	ldr	r3, [r4, #24]
 802492c:	60a3      	str	r3, [r4, #8]
 802492e:	89a3      	ldrh	r3, [r4, #12]
 8024930:	071a      	lsls	r2, r3, #28
 8024932:	d501      	bpl.n	8024938 <__swbuf_r+0x20>
 8024934:	6923      	ldr	r3, [r4, #16]
 8024936:	b943      	cbnz	r3, 802494a <__swbuf_r+0x32>
 8024938:	4621      	mov	r1, r4
 802493a:	4628      	mov	r0, r5
 802493c:	f000 f82a 	bl	8024994 <__swsetup_r>
 8024940:	b118      	cbz	r0, 802494a <__swbuf_r+0x32>
 8024942:	f04f 37ff 	mov.w	r7, #4294967295
 8024946:	4638      	mov	r0, r7
 8024948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802494a:	6823      	ldr	r3, [r4, #0]
 802494c:	6922      	ldr	r2, [r4, #16]
 802494e:	1a98      	subs	r0, r3, r2
 8024950:	6963      	ldr	r3, [r4, #20]
 8024952:	b2f6      	uxtb	r6, r6
 8024954:	4283      	cmp	r3, r0
 8024956:	4637      	mov	r7, r6
 8024958:	dc05      	bgt.n	8024966 <__swbuf_r+0x4e>
 802495a:	4621      	mov	r1, r4
 802495c:	4628      	mov	r0, r5
 802495e:	f7ff fcbb 	bl	80242d8 <_fflush_r>
 8024962:	2800      	cmp	r0, #0
 8024964:	d1ed      	bne.n	8024942 <__swbuf_r+0x2a>
 8024966:	68a3      	ldr	r3, [r4, #8]
 8024968:	3b01      	subs	r3, #1
 802496a:	60a3      	str	r3, [r4, #8]
 802496c:	6823      	ldr	r3, [r4, #0]
 802496e:	1c5a      	adds	r2, r3, #1
 8024970:	6022      	str	r2, [r4, #0]
 8024972:	701e      	strb	r6, [r3, #0]
 8024974:	6962      	ldr	r2, [r4, #20]
 8024976:	1c43      	adds	r3, r0, #1
 8024978:	429a      	cmp	r2, r3
 802497a:	d004      	beq.n	8024986 <__swbuf_r+0x6e>
 802497c:	89a3      	ldrh	r3, [r4, #12]
 802497e:	07db      	lsls	r3, r3, #31
 8024980:	d5e1      	bpl.n	8024946 <__swbuf_r+0x2e>
 8024982:	2e0a      	cmp	r6, #10
 8024984:	d1df      	bne.n	8024946 <__swbuf_r+0x2e>
 8024986:	4621      	mov	r1, r4
 8024988:	4628      	mov	r0, r5
 802498a:	f7ff fca5 	bl	80242d8 <_fflush_r>
 802498e:	2800      	cmp	r0, #0
 8024990:	d0d9      	beq.n	8024946 <__swbuf_r+0x2e>
 8024992:	e7d6      	b.n	8024942 <__swbuf_r+0x2a>

08024994 <__swsetup_r>:
 8024994:	b538      	push	{r3, r4, r5, lr}
 8024996:	4b29      	ldr	r3, [pc, #164]	@ (8024a3c <__swsetup_r+0xa8>)
 8024998:	4605      	mov	r5, r0
 802499a:	6818      	ldr	r0, [r3, #0]
 802499c:	460c      	mov	r4, r1
 802499e:	b118      	cbz	r0, 80249a8 <__swsetup_r+0x14>
 80249a0:	6a03      	ldr	r3, [r0, #32]
 80249a2:	b90b      	cbnz	r3, 80249a8 <__swsetup_r+0x14>
 80249a4:	f7ff f99e 	bl	8023ce4 <__sinit>
 80249a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80249ac:	0719      	lsls	r1, r3, #28
 80249ae:	d422      	bmi.n	80249f6 <__swsetup_r+0x62>
 80249b0:	06da      	lsls	r2, r3, #27
 80249b2:	d407      	bmi.n	80249c4 <__swsetup_r+0x30>
 80249b4:	2209      	movs	r2, #9
 80249b6:	602a      	str	r2, [r5, #0]
 80249b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80249bc:	81a3      	strh	r3, [r4, #12]
 80249be:	f04f 30ff 	mov.w	r0, #4294967295
 80249c2:	e033      	b.n	8024a2c <__swsetup_r+0x98>
 80249c4:	0758      	lsls	r0, r3, #29
 80249c6:	d512      	bpl.n	80249ee <__swsetup_r+0x5a>
 80249c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80249ca:	b141      	cbz	r1, 80249de <__swsetup_r+0x4a>
 80249cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80249d0:	4299      	cmp	r1, r3
 80249d2:	d002      	beq.n	80249da <__swsetup_r+0x46>
 80249d4:	4628      	mov	r0, r5
 80249d6:	f7ff fafb 	bl	8023fd0 <_free_r>
 80249da:	2300      	movs	r3, #0
 80249dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80249de:	89a3      	ldrh	r3, [r4, #12]
 80249e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80249e4:	81a3      	strh	r3, [r4, #12]
 80249e6:	2300      	movs	r3, #0
 80249e8:	6063      	str	r3, [r4, #4]
 80249ea:	6923      	ldr	r3, [r4, #16]
 80249ec:	6023      	str	r3, [r4, #0]
 80249ee:	89a3      	ldrh	r3, [r4, #12]
 80249f0:	f043 0308 	orr.w	r3, r3, #8
 80249f4:	81a3      	strh	r3, [r4, #12]
 80249f6:	6923      	ldr	r3, [r4, #16]
 80249f8:	b94b      	cbnz	r3, 8024a0e <__swsetup_r+0x7a>
 80249fa:	89a3      	ldrh	r3, [r4, #12]
 80249fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024a04:	d003      	beq.n	8024a0e <__swsetup_r+0x7a>
 8024a06:	4621      	mov	r1, r4
 8024a08:	4628      	mov	r0, r5
 8024a0a:	f000 f883 	bl	8024b14 <__smakebuf_r>
 8024a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024a12:	f013 0201 	ands.w	r2, r3, #1
 8024a16:	d00a      	beq.n	8024a2e <__swsetup_r+0x9a>
 8024a18:	2200      	movs	r2, #0
 8024a1a:	60a2      	str	r2, [r4, #8]
 8024a1c:	6962      	ldr	r2, [r4, #20]
 8024a1e:	4252      	negs	r2, r2
 8024a20:	61a2      	str	r2, [r4, #24]
 8024a22:	6922      	ldr	r2, [r4, #16]
 8024a24:	b942      	cbnz	r2, 8024a38 <__swsetup_r+0xa4>
 8024a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8024a2a:	d1c5      	bne.n	80249b8 <__swsetup_r+0x24>
 8024a2c:	bd38      	pop	{r3, r4, r5, pc}
 8024a2e:	0799      	lsls	r1, r3, #30
 8024a30:	bf58      	it	pl
 8024a32:	6962      	ldrpl	r2, [r4, #20]
 8024a34:	60a2      	str	r2, [r4, #8]
 8024a36:	e7f4      	b.n	8024a22 <__swsetup_r+0x8e>
 8024a38:	2000      	movs	r0, #0
 8024a3a:	e7f7      	b.n	8024a2c <__swsetup_r+0x98>
 8024a3c:	20000038 	.word	0x20000038

08024a40 <_raise_r>:
 8024a40:	291f      	cmp	r1, #31
 8024a42:	b538      	push	{r3, r4, r5, lr}
 8024a44:	4605      	mov	r5, r0
 8024a46:	460c      	mov	r4, r1
 8024a48:	d904      	bls.n	8024a54 <_raise_r+0x14>
 8024a4a:	2316      	movs	r3, #22
 8024a4c:	6003      	str	r3, [r0, #0]
 8024a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8024a52:	bd38      	pop	{r3, r4, r5, pc}
 8024a54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024a56:	b112      	cbz	r2, 8024a5e <_raise_r+0x1e>
 8024a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024a5c:	b94b      	cbnz	r3, 8024a72 <_raise_r+0x32>
 8024a5e:	4628      	mov	r0, r5
 8024a60:	f000 f830 	bl	8024ac4 <_getpid_r>
 8024a64:	4622      	mov	r2, r4
 8024a66:	4601      	mov	r1, r0
 8024a68:	4628      	mov	r0, r5
 8024a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024a6e:	f000 b817 	b.w	8024aa0 <_kill_r>
 8024a72:	2b01      	cmp	r3, #1
 8024a74:	d00a      	beq.n	8024a8c <_raise_r+0x4c>
 8024a76:	1c59      	adds	r1, r3, #1
 8024a78:	d103      	bne.n	8024a82 <_raise_r+0x42>
 8024a7a:	2316      	movs	r3, #22
 8024a7c:	6003      	str	r3, [r0, #0]
 8024a7e:	2001      	movs	r0, #1
 8024a80:	e7e7      	b.n	8024a52 <_raise_r+0x12>
 8024a82:	2100      	movs	r1, #0
 8024a84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024a88:	4620      	mov	r0, r4
 8024a8a:	4798      	blx	r3
 8024a8c:	2000      	movs	r0, #0
 8024a8e:	e7e0      	b.n	8024a52 <_raise_r+0x12>

08024a90 <raise>:
 8024a90:	4b02      	ldr	r3, [pc, #8]	@ (8024a9c <raise+0xc>)
 8024a92:	4601      	mov	r1, r0
 8024a94:	6818      	ldr	r0, [r3, #0]
 8024a96:	f7ff bfd3 	b.w	8024a40 <_raise_r>
 8024a9a:	bf00      	nop
 8024a9c:	20000038 	.word	0x20000038

08024aa0 <_kill_r>:
 8024aa0:	b538      	push	{r3, r4, r5, lr}
 8024aa2:	4d07      	ldr	r5, [pc, #28]	@ (8024ac0 <_kill_r+0x20>)
 8024aa4:	2300      	movs	r3, #0
 8024aa6:	4604      	mov	r4, r0
 8024aa8:	4608      	mov	r0, r1
 8024aaa:	4611      	mov	r1, r2
 8024aac:	602b      	str	r3, [r5, #0]
 8024aae:	f7de fc0b 	bl	80032c8 <_kill>
 8024ab2:	1c43      	adds	r3, r0, #1
 8024ab4:	d102      	bne.n	8024abc <_kill_r+0x1c>
 8024ab6:	682b      	ldr	r3, [r5, #0]
 8024ab8:	b103      	cbz	r3, 8024abc <_kill_r+0x1c>
 8024aba:	6023      	str	r3, [r4, #0]
 8024abc:	bd38      	pop	{r3, r4, r5, pc}
 8024abe:	bf00      	nop
 8024ac0:	20002890 	.word	0x20002890

08024ac4 <_getpid_r>:
 8024ac4:	f7de bbf8 	b.w	80032b8 <_getpid>

08024ac8 <__swhatbuf_r>:
 8024ac8:	b570      	push	{r4, r5, r6, lr}
 8024aca:	460c      	mov	r4, r1
 8024acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024ad0:	2900      	cmp	r1, #0
 8024ad2:	b096      	sub	sp, #88	@ 0x58
 8024ad4:	4615      	mov	r5, r2
 8024ad6:	461e      	mov	r6, r3
 8024ad8:	da0d      	bge.n	8024af6 <__swhatbuf_r+0x2e>
 8024ada:	89a3      	ldrh	r3, [r4, #12]
 8024adc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024ae0:	f04f 0100 	mov.w	r1, #0
 8024ae4:	bf14      	ite	ne
 8024ae6:	2340      	movne	r3, #64	@ 0x40
 8024ae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024aec:	2000      	movs	r0, #0
 8024aee:	6031      	str	r1, [r6, #0]
 8024af0:	602b      	str	r3, [r5, #0]
 8024af2:	b016      	add	sp, #88	@ 0x58
 8024af4:	bd70      	pop	{r4, r5, r6, pc}
 8024af6:	466a      	mov	r2, sp
 8024af8:	f000 f848 	bl	8024b8c <_fstat_r>
 8024afc:	2800      	cmp	r0, #0
 8024afe:	dbec      	blt.n	8024ada <__swhatbuf_r+0x12>
 8024b00:	9901      	ldr	r1, [sp, #4]
 8024b02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8024b06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024b0a:	4259      	negs	r1, r3
 8024b0c:	4159      	adcs	r1, r3
 8024b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024b12:	e7eb      	b.n	8024aec <__swhatbuf_r+0x24>

08024b14 <__smakebuf_r>:
 8024b14:	898b      	ldrh	r3, [r1, #12]
 8024b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024b18:	079d      	lsls	r5, r3, #30
 8024b1a:	4606      	mov	r6, r0
 8024b1c:	460c      	mov	r4, r1
 8024b1e:	d507      	bpl.n	8024b30 <__smakebuf_r+0x1c>
 8024b20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024b24:	6023      	str	r3, [r4, #0]
 8024b26:	6123      	str	r3, [r4, #16]
 8024b28:	2301      	movs	r3, #1
 8024b2a:	6163      	str	r3, [r4, #20]
 8024b2c:	b003      	add	sp, #12
 8024b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b30:	ab01      	add	r3, sp, #4
 8024b32:	466a      	mov	r2, sp
 8024b34:	f7ff ffc8 	bl	8024ac8 <__swhatbuf_r>
 8024b38:	9f00      	ldr	r7, [sp, #0]
 8024b3a:	4605      	mov	r5, r0
 8024b3c:	4639      	mov	r1, r7
 8024b3e:	4630      	mov	r0, r6
 8024b40:	f7ff faba 	bl	80240b8 <_malloc_r>
 8024b44:	b948      	cbnz	r0, 8024b5a <__smakebuf_r+0x46>
 8024b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024b4a:	059a      	lsls	r2, r3, #22
 8024b4c:	d4ee      	bmi.n	8024b2c <__smakebuf_r+0x18>
 8024b4e:	f023 0303 	bic.w	r3, r3, #3
 8024b52:	f043 0302 	orr.w	r3, r3, #2
 8024b56:	81a3      	strh	r3, [r4, #12]
 8024b58:	e7e2      	b.n	8024b20 <__smakebuf_r+0xc>
 8024b5a:	89a3      	ldrh	r3, [r4, #12]
 8024b5c:	6020      	str	r0, [r4, #0]
 8024b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024b62:	81a3      	strh	r3, [r4, #12]
 8024b64:	9b01      	ldr	r3, [sp, #4]
 8024b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8024b6a:	b15b      	cbz	r3, 8024b84 <__smakebuf_r+0x70>
 8024b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024b70:	4630      	mov	r0, r6
 8024b72:	f000 f81d 	bl	8024bb0 <_isatty_r>
 8024b76:	b128      	cbz	r0, 8024b84 <__smakebuf_r+0x70>
 8024b78:	89a3      	ldrh	r3, [r4, #12]
 8024b7a:	f023 0303 	bic.w	r3, r3, #3
 8024b7e:	f043 0301 	orr.w	r3, r3, #1
 8024b82:	81a3      	strh	r3, [r4, #12]
 8024b84:	89a3      	ldrh	r3, [r4, #12]
 8024b86:	431d      	orrs	r5, r3
 8024b88:	81a5      	strh	r5, [r4, #12]
 8024b8a:	e7cf      	b.n	8024b2c <__smakebuf_r+0x18>

08024b8c <_fstat_r>:
 8024b8c:	b538      	push	{r3, r4, r5, lr}
 8024b8e:	4d07      	ldr	r5, [pc, #28]	@ (8024bac <_fstat_r+0x20>)
 8024b90:	2300      	movs	r3, #0
 8024b92:	4604      	mov	r4, r0
 8024b94:	4608      	mov	r0, r1
 8024b96:	4611      	mov	r1, r2
 8024b98:	602b      	str	r3, [r5, #0]
 8024b9a:	f7de fbf5 	bl	8003388 <_fstat>
 8024b9e:	1c43      	adds	r3, r0, #1
 8024ba0:	d102      	bne.n	8024ba8 <_fstat_r+0x1c>
 8024ba2:	682b      	ldr	r3, [r5, #0]
 8024ba4:	b103      	cbz	r3, 8024ba8 <_fstat_r+0x1c>
 8024ba6:	6023      	str	r3, [r4, #0]
 8024ba8:	bd38      	pop	{r3, r4, r5, pc}
 8024baa:	bf00      	nop
 8024bac:	20002890 	.word	0x20002890

08024bb0 <_isatty_r>:
 8024bb0:	b538      	push	{r3, r4, r5, lr}
 8024bb2:	4d06      	ldr	r5, [pc, #24]	@ (8024bcc <_isatty_r+0x1c>)
 8024bb4:	2300      	movs	r3, #0
 8024bb6:	4604      	mov	r4, r0
 8024bb8:	4608      	mov	r0, r1
 8024bba:	602b      	str	r3, [r5, #0]
 8024bbc:	f7de fbf4 	bl	80033a8 <_isatty>
 8024bc0:	1c43      	adds	r3, r0, #1
 8024bc2:	d102      	bne.n	8024bca <_isatty_r+0x1a>
 8024bc4:	682b      	ldr	r3, [r5, #0]
 8024bc6:	b103      	cbz	r3, 8024bca <_isatty_r+0x1a>
 8024bc8:	6023      	str	r3, [r4, #0]
 8024bca:	bd38      	pop	{r3, r4, r5, pc}
 8024bcc:	20002890 	.word	0x20002890

08024bd0 <_init>:
 8024bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bd2:	bf00      	nop
 8024bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024bd6:	bc08      	pop	{r3}
 8024bd8:	469e      	mov	lr, r3
 8024bda:	4770      	bx	lr

08024bdc <_fini>:
 8024bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bde:	bf00      	nop
 8024be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024be2:	bc08      	pop	{r3}
 8024be4:	469e      	mov	lr, r3
 8024be6:	4770      	bx	lr
