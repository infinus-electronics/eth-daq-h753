
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800677c  0800677c  0000777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  20000000  0800678c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000010  0800679c  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000070  080067fc  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200000d0  0800685c  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800685c  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170b4  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002454  00000000  00000000  0001f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00021608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  000223f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037615  00000000  00000000  00022eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129db  00000000  00000000  0005a4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00162343  00000000  00000000  0006cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cf1eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  001cf230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001d2cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200000d0 	.word	0x200000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800672c 	.word	0x0800672c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200000d4 	.word	0x200000d4
 80002d4:	0800672c 	.word	0x0800672c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005ce:	f000 fb47 	bl	8000c60 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005d2:	4b3b      	ldr	r3, [pc, #236]	@ (80006c0 <main+0xf8>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d11b      	bne.n	8000616 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005de:	f3bf 8f4f 	dsb	sy
}
 80005e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e4:	f3bf 8f6f 	isb	sy
}
 80005e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005ea:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <main+0xf8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f2:	f3bf 8f4f 	dsb	sy
}
 80005f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f8:	f3bf 8f6f 	isb	sy
}
 80005fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fe:	4b30      	ldr	r3, [pc, #192]	@ (80006c0 <main+0xf8>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a2f      	ldr	r2, [pc, #188]	@ (80006c0 <main+0xf8>)
 8000604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000608:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800060a:	f3bf 8f4f 	dsb	sy
}
 800060e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000610:	f3bf 8f6f 	isb	sy
}
 8000614:	e000      	b.n	8000618 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000616:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000618:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <main+0xf8>)
 800061a:	695b      	ldr	r3, [r3, #20]
 800061c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000620:	2b00      	cmp	r3, #0
 8000622:	d138      	bne.n	8000696 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <main+0xf8>)
 8000626:	2200      	movs	r2, #0
 8000628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800062c:	f3bf 8f4f 	dsb	sy
}
 8000630:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <main+0xf8>)
 8000634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000638:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	0b5b      	lsrs	r3, r3, #13
 800063e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000642:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800064c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	015a      	lsls	r2, r3, #5
 8000652:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000656:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000658:	687a      	ldr	r2, [r7, #4]
 800065a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065c:	4918      	ldr	r1, [pc, #96]	@ (80006c0 <main+0xf8>)
 800065e:	4313      	orrs	r3, r2
 8000660:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1ef      	bne.n	800064e <main+0x86>
    } while(sets-- != 0U);
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	60ba      	str	r2, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1e5      	bne.n	8000644 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000678:	f3bf 8f4f 	dsb	sy
}
 800067c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <main+0xf8>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <main+0xf8>)
 8000684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000688:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000690:	f3bf 8f6f 	isb	sy
}
 8000694:	e000      	b.n	8000698 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000696:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 fe66 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f812 	bl	80006c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006a0:	f000 f8be 	bl	8000820 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 fa86 	bl	8000bb4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006a8:	f000 f8ea 	bl	8000880 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 fa36 	bl	8000b1c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006b0:	f000 f932 	bl	8000918 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006b4:	f000 f986 	bl	80009c4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006b8:	f000 f9da 	bl	8000a70 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <main+0xf4>
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09e      	sub	sp, #120	@ 0x78
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ce:	224c      	movs	r2, #76	@ 0x4c
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fffe 	bl	80066d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2220      	movs	r2, #32
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f005 fff7 	bl	80066d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f001 ff8c 	bl	8002604 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b48      	ldr	r3, [pc, #288]	@ (8000814 <SystemClock_Config+0x150>)
 80006f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f4:	4a47      	ldr	r2, [pc, #284]	@ (8000814 <SystemClock_Config+0x150>)
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006fc:	4b45      	ldr	r3, [pc, #276]	@ (8000814 <SystemClock_Config+0x150>)
 80006fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <SystemClock_Config+0x154>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a43      	ldr	r2, [pc, #268]	@ (8000818 <SystemClock_Config+0x154>)
 800070c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <SystemClock_Config+0x154>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071e:	bf00      	nop
 8000720:	4b3d      	ldr	r3, [pc, #244]	@ (8000818 <SystemClock_Config+0x154>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800072c:	d1f8      	bne.n	8000720 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <SystemClock_Config+0x158>)
 8000730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000734:	4a39      	ldr	r2, [pc, #228]	@ (800081c <SystemClock_Config+0x158>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <SystemClock_Config+0x158>)
 8000740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000744:	f003 0302 	and.w	r3, r3, #2
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <SystemClock_Config+0x154>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a30      	ldr	r2, [pc, #192]	@ (8000818 <SystemClock_Config+0x154>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b2e      	ldr	r3, [pc, #184]	@ (8000818 <SystemClock_Config+0x154>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <SystemClock_Config+0x150>)
 8000768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076a:	4a2a      	ldr	r2, [pc, #168]	@ (8000814 <SystemClock_Config+0x150>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000772:	4b28      	ldr	r3, [pc, #160]	@ (8000814 <SystemClock_Config+0x150>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077e:	bf00      	nop
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <SystemClock_Config+0x154>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000788:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800078c:	d1f8      	bne.n	8000780 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078e:	2301      	movs	r3, #1
 8000790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000792:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	2302      	movs	r3, #2
 800079e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 80007a4:	2340      	movs	r3, #64	@ 0x40
 80007a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007b4:	230c      	movs	r3, #12
 80007b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ff57 	bl	8002678 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007d0:	f000 fa73 	bl	8000cba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	233f      	movs	r3, #63	@ 0x3f
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2303      	movs	r3, #3
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007e0:	2308      	movs	r3, #8
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e8:	2340      	movs	r3, #64	@ 0x40
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f2:	2340      	movs	r3, #64	@ 0x40
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2102      	movs	r1, #2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fb95 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000808:	f000 fa57 	bl	8000cba <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3778      	adds	r7, #120	@ 0x78
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58000400 	.word	0x58000400
 8000818:	58024800 	.word	0x58024800
 800081c:	58024400 	.word	0x58024400

08000820 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0b0      	sub	sp, #192	@ 0xc0
 8000824:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000826:	463b      	mov	r3, r7
 8000828:	22c0      	movs	r2, #192	@ 0xc0
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f005 ff51 	bl	80066d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000832:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800083e:	2308      	movs	r3, #8
 8000840:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800085e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000862:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4618      	mov	r0, r3
 8000868:	f002 feec 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000872:	f000 fa22 	bl	8000cba <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	37c0      	adds	r7, #192	@ 0xc0
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <MX_ETH_Init+0x80>)
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <MX_ETH_Init+0x84>)
 8000888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_ETH_Init+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_ETH_Init+0x88>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_ETH_Init+0x88>)
 8000898:	22e1      	movs	r2, #225	@ 0xe1
 800089a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_ETH_Init+0x88>)
 800089e:	2200      	movs	r2, #0
 80008a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_ETH_Init+0x88>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_ETH_Init+0x88>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_ETH_Init+0x80>)
 80008b0:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <MX_ETH_Init+0x88>)
 80008b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_ETH_Init+0x80>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_ETH_Init+0x80>)
 80008bc:	4a13      	ldr	r2, [pc, #76]	@ (800090c <MX_ETH_Init+0x8c>)
 80008be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_ETH_Init+0x80>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <MX_ETH_Init+0x90>)
 80008c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_ETH_Init+0x80>)
 80008c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_ETH_Init+0x80>)
 80008d0:	f000 ff84 	bl	80017dc <HAL_ETH_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008da:	f000 f9ee 	bl	8000cba <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008de:	2238      	movs	r2, #56	@ 0x38
 80008e0:	2100      	movs	r1, #0
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_ETH_Init+0x94>)
 80008e4:	f005 fef6 	bl	80066d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_ETH_Init+0x94>)
 80008ea:	2221      	movs	r2, #33	@ 0x21
 80008ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_ETH_Init+0x94>)
 80008f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_ETH_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000124 	.word	0x20000124
 8000904:	40028000 	.word	0x40028000
 8000908:	20000400 	.word	0x20000400
 800090c:	20000070 	.word	0x20000070
 8000910:	20000010 	.word	0x20000010
 8000914:	200000ec 	.word	0x200000ec

08000918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800091e:	4a28      	ldr	r2, [pc, #160]	@ (80009c0 <MX_SPI1_Init+0xa8>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b26      	ldr	r3, [pc, #152]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000924:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000932:	2203      	movs	r2, #3
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000942:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000944:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800096e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000990:	2200      	movs	r2, #0
 8000992:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_SPI1_Init+0xa4>)
 8000996:	2200      	movs	r2, #0
 8000998:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_SPI1_Init+0xa4>)
 800099c:	2200      	movs	r2, #0
 800099e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_SPI1_Init+0xa4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_SPI1_Init+0xa4>)
 80009a8:	f004 fc78 	bl	800529c <HAL_SPI_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80009b2:	f000 f982 	bl	8000cba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001d4 	.word	0x200001d4
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009ca:	4a28      	ldr	r2, [pc, #160]	@ (8000a6c <MX_SPI2_Init+0xa8>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b24      	ldr	r3, [pc, #144]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009de:	2203      	movs	r2, #3
 80009e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009f0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80009f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_SPI2_Init+0xa4>)
 8000a54:	f004 fc22 	bl	800529c <HAL_SPI_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000a5e:	f000 f92c 	bl	8000cba <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000025c 	.word	0x2000025c
 8000a6c:	40003800 	.word	0x40003800

08000a70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a74:	4b27      	ldr	r3, [pc, #156]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a76:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <MX_SPI3_Init+0xa8>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000a9c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000aba:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ac2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ac6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_SPI3_Init+0xa4>)
 8000b00:	f004 fbcc 	bl	800529c <HAL_SPI_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f8d6 	bl	8000cba <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200002e4 	.word	0x200002e4
 8000b18:	40003c00 	.word	0x40003c00

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	@ (8000bb0 <MX_USART3_UART_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b66:	f004 fcd8 	bl	800551a <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f8a3 	bl	8000cba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b78:	f005 fce1 	bl	800653e <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f89a 	bl	8000cba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b8a:	f005 fd16 	bl	80065ba <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f891 	bl	8000cba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_USART3_UART_Init+0x90>)
 8000b9a:	f005 fc97 	bl	80064cc <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f889 	bl	8000cba <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	2000036c 	.word	0x2000036c
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b28      	ldr	r3, [pc, #160]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a26      	ldr	r2, [pc, #152]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bde:	4a1f      	ldr	r2, [pc, #124]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfc:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c38:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <MX_GPIO_Init+0xa8>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	f003 0308 	and.w	r3, r3, #8
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	bf00      	nop
 8000c52:	371c      	adds	r7, #28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58024400 	.word	0x58024400

08000c60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c72:	f000 fd3b 	bl	80016ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000c7e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000c82:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000c84:	2312      	movs	r3, #18
 8000c86:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c90:	2303      	movs	r3, #3
 8000c92:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fd58 	bl	800175c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cac:	2004      	movs	r0, #4
 8000cae:	f000 fd35 	bl	800171c <HAL_MPU_Enable>

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbe:	b672      	cpsid	i
}
 8000cc0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc2:	bf00      	nop
 8000cc4:	e7fd      	b.n	8000cc2 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_MspInit+0x30>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	58024400 	.word	0x58024400

08000cfc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08e      	sub	sp, #56	@ 0x38
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a51      	ldr	r2, [pc, #324]	@ (8000e60 <HAL_ETH_MspInit+0x164>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	f040 809b 	bne.w	8000e56 <HAL_ETH_MspInit+0x15a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d20:	4b50      	ldr	r3, [pc, #320]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d26:	4a4f      	ldr	r2, [pc, #316]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d2c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d30:	4b4c      	ldr	r3, [pc, #304]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d3a:	623b      	str	r3, [r7, #32]
 8000d3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d3e:	4b49      	ldr	r3, [pc, #292]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d44:	4a47      	ldr	r2, [pc, #284]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4e:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d5c:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d62:	4a40      	ldr	r2, [pc, #256]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	4a38      	ldr	r2, [pc, #224]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8a:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a29      	ldr	r2, [pc, #164]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <HAL_ETH_MspInit+0x168>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dd4:	2332      	movs	r3, #50	@ 0x32
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de4:	230b      	movs	r3, #11
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <HAL_ETH_MspInit+0x16c>)
 8000df0:	f001 fa58 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000df4:	2386      	movs	r3, #134	@ 0x86
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e04:	230b      	movs	r3, #11
 8000e06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <HAL_ETH_MspInit+0x170>)
 8000e10:	f001 fa48 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000e14:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e26:	230b      	movs	r3, #11
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480f      	ldr	r0, [pc, #60]	@ (8000e70 <HAL_ETH_MspInit+0x174>)
 8000e32:	f001 fa37 	bl	80022a4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	203d      	movs	r0, #61	@ 0x3d
 8000e3c:	f000 fc21 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000e40:	203d      	movs	r0, #61	@ 0x3d
 8000e42:	f000 fc38 	bl	80016b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	203e      	movs	r0, #62	@ 0x3e
 8000e4c:	f000 fc19 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8000e50:	203e      	movs	r0, #62	@ 0x3e
 8000e52:	f000 fc30 	bl	80016b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	@ 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40028000 	.word	0x40028000
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020800 	.word	0x58020800
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	58020400 	.word	0x58020400

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b090      	sub	sp, #64	@ 0x40
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a7e      	ldr	r2, [pc, #504]	@ (800108c <HAL_SPI_MspInit+0x218>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d14d      	bne.n	8000f32 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e96:	4b7e      	ldr	r3, [pc, #504]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000e98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000e9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b76      	ldr	r3, [pc, #472]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eba:	4a75      	ldr	r2, [pc, #468]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec4:	4b72      	ldr	r3, [pc, #456]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b6f      	ldr	r3, [pc, #444]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed8:	4a6d      	ldr	r2, [pc, #436]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee2:	4b6b      	ldr	r3, [pc, #428]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	623b      	str	r3, [r7, #32]
 8000eee:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ef0:	2370      	movs	r3, #112	@ 0x70
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f00:	2305      	movs	r3, #5
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4862      	ldr	r0, [pc, #392]	@ (8001094 <HAL_SPI_MspInit+0x220>)
 8000f0c:	f001 f9ca 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f10:	2320      	movs	r3, #32
 8000f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f20:	2305      	movs	r3, #5
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f28:	4619      	mov	r1, r3
 8000f2a:	485b      	ldr	r0, [pc, #364]	@ (8001098 <HAL_SPI_MspInit+0x224>)
 8000f2c:	f001 f9ba 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f30:	e0a8      	b.n	8001084 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a59      	ldr	r2, [pc, #356]	@ (800109c <HAL_SPI_MspInit+0x228>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d14f      	bne.n	8000fdc <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f3c:	4b54      	ldr	r3, [pc, #336]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f42:	4a53      	ldr	r2, [pc, #332]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f4c:	4b50      	ldr	r3, [pc, #320]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a4b      	ldr	r2, [pc, #300]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b49      	ldr	r3, [pc, #292]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b45      	ldr	r3, [pc, #276]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a44      	ldr	r2, [pc, #272]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b41      	ldr	r3, [pc, #260]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000f96:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4839      	ldr	r0, [pc, #228]	@ (8001098 <HAL_SPI_MspInit+0x224>)
 8000fb4:	f001 f976 	bl	80022a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fca:	2305      	movs	r3, #5
 8000fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482f      	ldr	r0, [pc, #188]	@ (8001094 <HAL_SPI_MspInit+0x220>)
 8000fd6:	f001 f965 	bl	80022a4 <HAL_GPIO_Init>
}
 8000fda:	e053      	b.n	8001084 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI3)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80010a0 <HAL_SPI_MspInit+0x22c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d14e      	bne.n	8001084 <HAL_SPI_MspInit+0x210>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	4a28      	ldr	r2, [pc, #160]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_SPI_MspInit+0x21c>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0304 	and.w	r3, r3, #4
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001052:	2306      	movs	r3, #6
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800105a:	4619      	mov	r1, r3
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <HAL_SPI_MspInit+0x220>)
 800105e:	f001 f921 	bl	80022a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001062:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001074:	2306      	movs	r3, #6
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107c:	4619      	mov	r1, r3
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <HAL_SPI_MspInit+0x230>)
 8001080:	f001 f910 	bl	80022a4 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3740      	adds	r7, #64	@ 0x40
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40013000 	.word	0x40013000
 8001090:	58024400 	.word	0x58024400
 8001094:	58020000 	.word	0x58020000
 8001098:	58020400 	.word	0x58020400
 800109c:	40003800 	.word	0x40003800
 80010a0:	40003c00 	.word	0x40003c00
 80010a4:	58020800 	.word	0x58020800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ba      	sub	sp, #232	@ 0xe8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	22c0      	movs	r2, #192	@ 0xc0
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fb03 	bl	80066d4 <memset>
  if(huart->Instance==USART3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a27      	ldr	r2, [pc, #156]	@ (8001170 <HAL_UART_MspInit+0xc8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d146      	bne.n	8001166 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d8:	f04f 0202 	mov.w	r2, #2
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4618      	mov	r0, r3
 80010f0:	f002 faa8 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010fa:	f7ff fdde 	bl	8000cba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001104:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 8001106:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800110a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 8001110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001114:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001122:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_UART_MspInit+0xcc>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800113e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	@ (8001178 <HAL_UART_MspInit+0xd0>)
 8001162:	f001 f89f 	bl	80022a4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001166:	bf00      	nop
 8001168:	37e8      	adds	r7, #232	@ 0xe8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40004800 	.word	0x40004800
 8001174:	58024400 	.word	0x58024400
 8001178:	58020c00 	.word	0x58020c00

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <NMI_Handler+0x4>

08001184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <MemManage_Handler+0x4>

08001194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f93b 	bl	800144c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <ETH_IRQHandler+0x10>)
 80011e2:	f000 fbf9 	bl	80019d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000124 	.word	0x20000124

080011f0 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 86.
  */
void ETH_WKUP_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011f4:	4802      	ldr	r0, [pc, #8]	@ (8001200 <ETH_WKUP_IRQHandler+0x10>)
 80011f6:	f000 fbef 	bl	80019d8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000124 	.word	0x20000124

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <SystemInit+0xe4>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120e:	4a36      	ldr	r2, [pc, #216]	@ (80012e8 <SystemInit+0xe4>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001218:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <SystemInit+0xe8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	2b06      	cmp	r3, #6
 8001222:	d807      	bhi.n	8001234 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <SystemInit+0xe8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f023 030f 	bic.w	r3, r3, #15
 800122c:	4a2f      	ldr	r2, [pc, #188]	@ (80012ec <SystemInit+0xe8>)
 800122e:	f043 0307 	orr.w	r3, r3, #7
 8001232:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <SystemInit+0xec>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a2d      	ldr	r2, [pc, #180]	@ (80012f0 <SystemInit+0xec>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001240:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <SystemInit+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001246:	4b2a      	ldr	r3, [pc, #168]	@ (80012f0 <SystemInit+0xec>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4929      	ldr	r1, [pc, #164]	@ (80012f0 <SystemInit+0xec>)
 800124c:	4b29      	ldr	r3, [pc, #164]	@ (80012f4 <SystemInit+0xf0>)
 800124e:	4013      	ands	r3, r2
 8001250:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <SystemInit+0xe8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <SystemInit+0xe8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 030f 	bic.w	r3, r3, #15
 8001266:	4a21      	ldr	r2, [pc, #132]	@ (80012ec <SystemInit+0xe8>)
 8001268:	f043 0307 	orr.w	r3, r3, #7
 800126c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <SystemInit+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <SystemInit+0xec>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800127a:	4b1d      	ldr	r3, [pc, #116]	@ (80012f0 <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <SystemInit+0xec>)
 8001282:	4a1d      	ldr	r2, [pc, #116]	@ (80012f8 <SystemInit+0xf4>)
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <SystemInit+0xec>)
 8001288:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <SystemInit+0xf8>)
 800128a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <SystemInit+0xec>)
 800128e:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <SystemInit+0xfc>)
 8001290:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <SystemInit+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <SystemInit+0xec>)
 800129a:	4a19      	ldr	r2, [pc, #100]	@ (8001300 <SystemInit+0xfc>)
 800129c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <SystemInit+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <SystemInit+0xec>)
 80012a6:	4a16      	ldr	r2, [pc, #88]	@ (8001300 <SystemInit+0xfc>)
 80012a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <SystemInit+0xec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <SystemInit+0xec>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <SystemInit+0xec>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <SystemInit+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <SystemInit+0x100>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <SystemInit+0x104>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012ce:	d202      	bcs.n	80012d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <SystemInit+0x108>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <SystemInit+0x10c>)
 80012d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00
 80012ec:	52002000 	.word	0x52002000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f8:	02020200 	.word	0x02020200
 80012fc:	01ff0000 	.word	0x01ff0000
 8001300:	01010280 	.word	0x01010280
 8001304:	5c001000 	.word	0x5c001000
 8001308:	ffff0000 	.word	0xffff0000
 800130c:	51008108 	.word	0x51008108
 8001310:	52004000 	.word	0x52004000

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800134c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001318:	f7ff ff74 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	@ (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001342:	f005 f9cf 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff f93f 	bl	80005c8 <main>
  bx  lr
 800134a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001358:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 800135c:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001360:	2000040c 	.word	0x2000040c

08001364 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC3_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800136e:	2003      	movs	r0, #3
 8001370:	f000 f97c 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001374:	f001 ff90 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <HAL_Init+0x68>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	4913      	ldr	r1, [pc, #76]	@ (80013d4 <HAL_Init+0x6c>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_Init+0x68>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	4a0e      	ldr	r2, [pc, #56]	@ (80013d4 <HAL_Init+0x6c>)
 800139c:	5cd3      	ldrb	r3, [r2, r3]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	fa22 f303 	lsr.w	r3, r2, r3
 80013a8:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_Init+0x70>)
 80013aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013ac:	4a0b      	ldr	r2, [pc, #44]	@ (80013dc <HAL_Init+0x74>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b2:	200f      	movs	r0, #15
 80013b4:	f000 f814 	bl	80013e0 <HAL_InitTick>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e002      	b.n	80013c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013c2:	f7ff fc81 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024400 	.word	0x58024400
 80013d4:	08006744 	.word	0x08006744
 80013d8:	20000004 	.word	0x20000004
 80013dc:	20000000 	.word	0x20000000

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <HAL_InitTick+0x60>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e021      	b.n	8001438 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_InitTick+0x64>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_InitTick+0x60>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f961 	bl	80016d2 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f92b 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <HAL_InitTick+0x68>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000000c 	.word	0x2000000c
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000408 	.word	0x20000408

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000408 	.word	0x20000408

0800148c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <HAL_GetREVID+0x14>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0c1b      	lsrs	r3, r3, #16
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	5c001000 	.word	0x5c001000

080014a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014b4:	4904      	ldr	r1, [pc, #16]	@ (80014c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58000400 	.word	0x58000400

080014cc <__NVIC_SetPriorityGrouping>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	@ (800150c <__NVIC_SetPriorityGrouping+0x40>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00
 8001510:	05fa0000 	.word	0x05fa0000

08001514 <__NVIC_GetPriorityGrouping>:
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	@ (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	@ 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff40 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff33 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa4 	bl	8001628 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016f0:	f3bf 8f5f 	dmb	sy
}
 80016f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <HAL_MPU_Disable+0x28>)
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	4a06      	ldr	r2, [pc, #24]	@ (8001714 <HAL_MPU_Disable+0x28>)
 80016fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001700:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_MPU_Disable+0x2c>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	e000ed90 	.word	0xe000ed90

0800171c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001724:	4a0b      	ldr	r2, [pc, #44]	@ (8001754 <HAL_MPU_Enable+0x38>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_MPU_Enable+0x3c>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_MPU_Enable+0x3c>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001738:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800173a:	f3bf 8f4f 	dsb	sy
}
 800173e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001740:	f3bf 8f6f 	isb	sy
}
 8001744:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed90 	.word	0xe000ed90
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	785a      	ldrb	r2, [r3, #1]
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_MPU_ConfigRegion+0x7c>)
 800176a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800176c:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_MPU_ConfigRegion+0x7c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a19      	ldr	r2, [pc, #100]	@ (80017d8 <HAL_MPU_ConfigRegion+0x7c>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001778:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_MPU_ConfigRegion+0x7c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7b1b      	ldrb	r3, [r3, #12]
 8001784:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7adb      	ldrb	r3, [r3, #11]
 800178a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800178c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7a9b      	ldrb	r3, [r3, #10]
 8001792:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001794:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7b5b      	ldrb	r3, [r3, #13]
 800179a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800179c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b9b      	ldrb	r3, [r3, #14]
 80017a2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7bdb      	ldrb	r3, [r3, #15]
 80017aa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7a5b      	ldrb	r3, [r3, #9]
 80017b2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a1b      	ldrb	r3, [r3, #8]
 80017ba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017bc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017c6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017c8:	6113      	str	r3, [r2, #16]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed90 	.word	0xe000ed90

080017dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e0e3      	b.n	80019b6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2223      	movs	r2, #35	@ 0x23
 80017fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fa7b 	bl	8000cfc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b6e      	ldr	r3, [pc, #440]	@ (80019c0 <HAL_ETH_Init+0x1e4>)
 8001808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800180c:	4a6c      	ldr	r2, [pc, #432]	@ (80019c0 <HAL_ETH_Init+0x1e4>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001816:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <HAL_ETH_Init+0x1e4>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a1b      	ldrb	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fe39 	bl	80014a4 <HAL_SYSCFG_ETHInterfaceSelect>
 8001832:	e003      	b.n	800183c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001834:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001838:	f7ff fe34 	bl	80014a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800183c:	4b61      	ldr	r3, [pc, #388]	@ (80019c4 <HAL_ETH_Init+0x1e8>)
 800183e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6812      	ldr	r2, [r2, #0]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001856:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001858:	f7ff fe0c 	bl	8001474 <HAL_GetTick>
 800185c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800185e:	e011      	b.n	8001884 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001860:	f7ff fe08 	bl	8001474 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800186e:	d909      	bls.n	8001884 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2204      	movs	r2, #4
 8001874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	22e0      	movs	r2, #224	@ 0xe0
 800187c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e098      	b.n	80019b6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e4      	bne.n	8001860 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f9ce 	bl	8001c38 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800189c:	f001 fe76 	bl	800358c <HAL_RCC_GetHCLKFreq>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a49      	ldr	r2, [pc, #292]	@ (80019c8 <HAL_ETH_Init+0x1ec>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9a      	lsrs	r2, r3, #18
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	3a01      	subs	r2, #1
 80018b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fbb1 	bl	800201c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018c6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	22e0      	movs	r2, #224	@ 0xe0
 80018f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e05d      	b.n	80019b6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001902:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_ETH_Init+0x1f0>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6952      	ldr	r2, [r2, #20]
 800190e:	0051      	lsls	r1, r2, #1
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	430b      	orrs	r3, r1
 8001916:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800191a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fc19 	bl	8002156 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fc5f 	bl	80021e8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	3305      	adds	r3, #5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	021a      	lsls	r2, r3, #8
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3304      	adds	r3, #4
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	3303      	adds	r3, #3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	061a      	lsls	r2, r3, #24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	3302      	adds	r3, #2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001968:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001976:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001978:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_ETH_Init+0x1f4>)
 800198a:	430b      	orrs	r3, r1
 800198c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_ETH_Init+0x1f8>)
 800199e:	430b      	orrs	r3, r1
 80019a0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2210      	movs	r2, #16
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	58024400 	.word	0x58024400
 80019c4:	58000400 	.word	0x58000400
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	ffff8001 	.word	0xffff8001
 80019d0:	0c020060 	.word	0x0c020060
 80019d4:	0c20c000 	.word	0x0c20c000

080019d8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019f2:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80019f6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a00:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001a04:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001a06:	4b6d      	ldr	r3, [pc, #436]	@ (8001bbc <HAL_ETH_IRQHandler+0x1e4>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_ETH_IRQHandler+0x60>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a28:	461a      	mov	r2, r3
 8001a2a:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001a2e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8ce 	bl	8001bd4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d010      	beq.n	8001a64 <HAL_ETH_IRQHandler+0x8c>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a54:	461a      	mov	r2, r3
 8001a56:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001a5a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8ae 	bl	8001bc0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d047      	beq.n	8001afe <HAL_ETH_IRQHandler+0x126>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d042      	beq.n	8001afe <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	f043 0208 	orr.w	r2, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01e      	beq.n	8001ad0 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001a9e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001abe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ac2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	22e0      	movs	r2, #224	@ 0xe0
 8001aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001ace:	e013      	b.n	8001af8 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001adc:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aee:	461a      	mov	r2, r3
 8001af0:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001af4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f875 	bl	8001be8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d104      	bne.n	8001b12 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d019      	beq.n	8001b46 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	22e0      	movs	r2, #224	@ 0xe0
 8001b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f855 	bl	8001be8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00f      	beq.n	8001b70 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b58:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f84a 	bl	8001bfc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00f      	beq.n	8001b9a <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f83f 	bl	8001c10 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_ETH_IRQHandler+0x1e4>)
 8001ba6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001baa:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f839 	bl	8001c24 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	58000080 	.word	0x58000080

08001bc0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c52:	f001 fc9b 	bl	800358c <HAL_RCC_GetHCLKFreq>
 8001c56:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d804      	bhi.n	8001c6a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e022      	b.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4a16      	ldr	r2, [pc, #88]	@ (8001cc8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d204      	bcs.n	8001c7c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e019      	b.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ccc <HAL_ETH_SetMDIOClockRange+0x94>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d915      	bls.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d804      	bhi.n	8001c96 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	e00c      	b.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d804      	bhi.n	8001ca8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e003      	b.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001cae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	02160ebf 	.word	0x02160ebf
 8001cc8:	03938700 	.word	0x03938700
 8001ccc:	05f5e0ff 	.word	0x05f5e0ff
 8001cd0:	08f0d17f 	.word	0x08f0d17f
 8001cd4:	0ee6b27f 	.word	0x0ee6b27f

08001cd8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	791b      	ldrb	r3, [r3, #4]
 8001cf0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	7b5b      	ldrb	r3, [r3, #13]
 8001d00:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	7b9b      	ldrb	r3, [r3, #14]
 8001d08:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7bdb      	ldrb	r3, [r3, #15]
 8001d10:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d12:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	7c12      	ldrb	r2, [r2, #16]
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d102      	bne.n	8001d22 <ETH_SetMACConfig+0x4a>
 8001d1c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d20:	e000      	b.n	8001d24 <ETH_SetMACConfig+0x4c>
 8001d22:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	7c52      	ldrb	r2, [r2, #17]
 8001d2a:	2a00      	cmp	r2, #0
 8001d2c:	d102      	bne.n	8001d34 <ETH_SetMACConfig+0x5c>
 8001d2e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d32:	e000      	b.n	8001d36 <ETH_SetMACConfig+0x5e>
 8001d34:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	7c9b      	ldrb	r3, [r3, #18]
 8001d3c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d3e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d44:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	7f1b      	ldrb	r3, [r3, #28]
 8001d50:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7f5b      	ldrb	r3, [r3, #29]
 8001d58:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	7f92      	ldrb	r2, [r2, #30]
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d102      	bne.n	8001d6a <ETH_SetMACConfig+0x92>
 8001d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d68:	e000      	b.n	8001d6c <ETH_SetMACConfig+0x94>
 8001d6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	7fdb      	ldrb	r3, [r3, #31]
 8001d72:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d102      	bne.n	8001d86 <ETH_SetMACConfig+0xae>
 8001d80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d84:	e000      	b.n	8001d88 <ETH_SetMACConfig+0xb0>
 8001d86:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d88:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d96:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d98:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b56      	ldr	r3, [pc, #344]	@ (8001f04 <ETH_SetMACConfig+0x22c>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dcc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001dce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001dd6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001dd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	d102      	bne.n	8001dea <ETH_SetMACConfig+0x112>
 8001de4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001de8:	e000      	b.n	8001dec <ETH_SetMACConfig+0x114>
 8001dea:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001dec:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <ETH_SetMACConfig+0x230>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e10:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b3a      	ldr	r3, [pc, #232]	@ (8001f0c <ETH_SetMACConfig+0x234>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e34:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	d101      	bne.n	8001e4a <ETH_SetMACConfig+0x172>
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	e000      	b.n	8001e4c <ETH_SetMACConfig+0x174>
 8001e4a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e4c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e52:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e5e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001e62:	4013      	ands	r3, r2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001e74:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001e7c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	f023 0103 	bic.w	r1, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ea2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d101      	bne.n	8001ec6 <ETH_SetMACConfig+0x1ee>
 8001ec2:	2240      	movs	r2, #64	@ 0x40
 8001ec4:	e000      	b.n	8001ec8 <ETH_SetMACConfig+0x1f0>
 8001ec6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ec8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ed0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ed2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001eda:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ee8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	00048083 	.word	0x00048083
 8001f08:	c0f88000 	.word	0xc0f88000
 8001f0c:	fffffef0 	.word	0xfffffef0

08001f10 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b38      	ldr	r3, [pc, #224]	@ (8002008 <ETH_SetDMAConfig+0xf8>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	6811      	ldr	r1, [r2, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f36:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	791b      	ldrb	r3, [r3, #4]
 8001f3c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	7b1b      	ldrb	r3, [r3, #12]
 8001f48:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <ETH_SetDMAConfig+0xfc>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f68:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	7b5b      	ldrb	r3, [r3, #13]
 8001f6e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f80:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <ETH_SetDMAConfig+0x100>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	68f9      	ldr	r1, [r7, #12]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f94:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	7d1b      	ldrb	r3, [r3, #20]
 8001fa0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001fa2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7f5b      	ldrb	r3, [r3, #29]
 8001fa8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <ETH_SetDMAConfig+0x104>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	430b      	orrs	r3, r1
 8001fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fca:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	7f1b      	ldrb	r3, [r3, #28]
 8001fd2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <ETH_SetDMAConfig+0x108>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	68f9      	ldr	r1, [r7, #12]
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ff8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	ffff87fd 	.word	0xffff87fd
 800200c:	ffff2ffe 	.word	0xffff2ffe
 8002010:	fffec000 	.word	0xfffec000
 8002014:	ffc0efef 	.word	0xffc0efef
 8002018:	7fc0ffff 	.word	0x7fc0ffff

0800201c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0a4      	sub	sp, #144	@ 0x90
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202a:	2300      	movs	r3, #0
 800202c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002064:	2300      	movs	r3, #0
 8002066:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002074:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002078:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002080:	2300      	movs	r3, #0
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002096:	2300      	movs	r3, #0
 8002098:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800209a:	2300      	movs	r3, #0
 800209c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800209e:	2300      	movs	r3, #0
 80020a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80020b4:	2320      	movs	r3, #32
 80020b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80020c6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020d0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020f6:	2300      	movs	r3, #0
 80020f8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fde6 	bl	8001cd8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800210c:	2301      	movs	r3, #1
 800210e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002126:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800212a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002130:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002134:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800213c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002140:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7ff fee1 	bl	8001f10 <ETH_SetDMAConfig>
}
 800214e:	bf00      	nop
 8002150:	3790      	adds	r7, #144	@ 0x90
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e01d      	b.n	80021a0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68d9      	ldr	r1, [r3, #12]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2200      	movs	r2, #0
 8002180:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	3206      	adds	r2, #6
 8002196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d9de      	bls.n	8002164 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b4:	461a      	mov	r2, r3
 80021b6:	2303      	movs	r3, #3
 80021b8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e023      	b.n	800223e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	3212      	adds	r2, #18
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d9d8      	bls.n	80021f6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226a:	461a      	mov	r2, r3
 800226c:	2303      	movs	r3, #3
 800226e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800227e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002292:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80022b2:	4b89      	ldr	r3, [pc, #548]	@ (80024d8 <HAL_GPIO_Init+0x234>)
 80022b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022b6:	e194      	b.n	80025e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2101      	movs	r1, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 8186 	beq.w	80025dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d005      	beq.n	80022e8 <HAL_GPIO_Init+0x44>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d130      	bne.n	800234a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800231e:	2201      	movs	r2, #1
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0201 	and.w	r2, r3, #1
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b03      	cmp	r3, #3
 8002354:	d017      	beq.n	8002386 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d123      	bne.n	80023da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	08da      	lsrs	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3208      	adds	r2, #8
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	220f      	movs	r2, #15
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	69b9      	ldr	r1, [r7, #24]
 80023d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80e0 	beq.w	80025dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	4b2f      	ldr	r3, [pc, #188]	@ (80024dc <HAL_GPIO_Init+0x238>)
 800241e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002422:	4a2e      	ldr	r2, [pc, #184]	@ (80024dc <HAL_GPIO_Init+0x238>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <HAL_GPIO_Init+0x238>)
 800242e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243a:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_GPIO_Init+0x23c>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <HAL_GPIO_Init+0x240>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d052      	beq.n	800250c <HAL_GPIO_Init+0x268>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1f      	ldr	r2, [pc, #124]	@ (80024e8 <HAL_GPIO_Init+0x244>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d031      	beq.n	80024d2 <HAL_GPIO_Init+0x22e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1e      	ldr	r2, [pc, #120]	@ (80024ec <HAL_GPIO_Init+0x248>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02b      	beq.n	80024ce <HAL_GPIO_Init+0x22a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <HAL_GPIO_Init+0x24c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x226>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <HAL_GPIO_Init+0x250>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x222>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a1b      	ldr	r2, [pc, #108]	@ (80024f8 <HAL_GPIO_Init+0x254>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x21e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <HAL_GPIO_Init+0x258>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x21a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a19      	ldr	r2, [pc, #100]	@ (8002500 <HAL_GPIO_Init+0x25c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x216>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_GPIO_Init+0x260>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x212>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <HAL_GPIO_Init+0x264>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x20e>
 80024ae:	2309      	movs	r3, #9
 80024b0:	e02d      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024b2:	230a      	movs	r3, #10
 80024b4:	e02b      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024b6:	2308      	movs	r3, #8
 80024b8:	e029      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024ba:	2307      	movs	r3, #7
 80024bc:	e027      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024be:	2306      	movs	r3, #6
 80024c0:	e025      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024c2:	2305      	movs	r3, #5
 80024c4:	e023      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024c6:	2304      	movs	r3, #4
 80024c8:	e021      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024ca:	2303      	movs	r3, #3
 80024cc:	e01f      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e01d      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01b      	b.n	800250e <HAL_GPIO_Init+0x26a>
 80024d6:	bf00      	nop
 80024d8:	58000080 	.word	0x58000080
 80024dc:	58024400 	.word	0x58024400
 80024e0:	58000400 	.word	0x58000400
 80024e4:	58020000 	.word	0x58020000
 80024e8:	58020400 	.word	0x58020400
 80024ec:	58020800 	.word	0x58020800
 80024f0:	58020c00 	.word	0x58020c00
 80024f4:	58021000 	.word	0x58021000
 80024f8:	58021400 	.word	0x58021400
 80024fc:	58021800 	.word	0x58021800
 8002500:	58021c00 	.word	0x58021c00
 8002504:	58022000 	.word	0x58022000
 8002508:	58022400 	.word	0x58022400
 800250c:	2300      	movs	r3, #0
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800251e:	4938      	ldr	r1, [pc, #224]	@ (8002600 <HAL_GPIO_Init+0x35c>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800252c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f ae63 	bne.w	80022b8 <HAL_GPIO_Init+0x14>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	3724      	adds	r7, #36	@ 0x24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	58000400 	.word	0x58000400

08002604 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d00a      	beq.n	800262e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	429a      	cmp	r2, r3
 8002624:	d001      	beq.n	800262a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e01f      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e01d      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	490f      	ldr	r1, [pc, #60]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4313      	orrs	r3, r2
 800263c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800263e:	f7fe ff19 	bl	8001474 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002644:	e009      	b.n	800265a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002646:	f7fe ff15 	bl	8001474 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002654:	d901      	bls.n	800265a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e007      	b.n	800266a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002666:	d1ee      	bne.n	8002646 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	58024800 	.word	0x58024800

08002678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	@ 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f000 bc48 	b.w	8002f1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8088 	beq.w	80027aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269a:	4b99      	ldr	r3, [pc, #612]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026a4:	4b96      	ldr	r3, [pc, #600]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d007      	beq.n	80026c0 <HAL_RCC_OscConfig+0x48>
 80026b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b2:	2b18      	cmp	r3, #24
 80026b4:	d111      	bne.n	80026da <HAL_RCC_OscConfig+0x62>
 80026b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d06d      	beq.n	80027a8 <HAL_RCC_OscConfig+0x130>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d169      	bne.n	80027a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f000 bc21 	b.w	8002f1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x7a>
 80026e4:	4b86      	ldr	r3, [pc, #536]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a85      	ldr	r2, [pc, #532]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e02e      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x9c>
 80026fa:	4b81      	ldr	r3, [pc, #516]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a80      	ldr	r2, [pc, #512]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a7d      	ldr	r2, [pc, #500]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800270c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e01d      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0xc0>
 800271e:	4b78      	ldr	r3, [pc, #480]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a77      	ldr	r2, [pc, #476]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b75      	ldr	r3, [pc, #468]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a74      	ldr	r2, [pc, #464]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e00b      	b.n	8002750 <HAL_RCC_OscConfig+0xd8>
 8002738:	4b71      	ldr	r3, [pc, #452]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a70      	ldr	r2, [pc, #448]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800273e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b6e      	ldr	r3, [pc, #440]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6d      	ldr	r2, [pc, #436]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800274a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d013      	beq.n	8002780 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fe8c 	bl	8001474 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fe88 	bl	8001474 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e3d4      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0xe8>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fe78 	bl	8001474 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7fe fe74 	bl	8001474 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e3c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800279a:	4b59      	ldr	r3, [pc, #356]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1f0      	bne.n	8002788 <HAL_RCC_OscConfig+0x110>
 80027a6:	e000      	b.n	80027aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80ca 	beq.w	800294c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b8:	4b51      	ldr	r3, [pc, #324]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80027c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_RCC_OscConfig+0x166>
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b18      	cmp	r3, #24
 80027d2:	d156      	bne.n	8002882 <HAL_RCC_OscConfig+0x20a>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d151      	bne.n	8002882 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027de:	4b48      	ldr	r3, [pc, #288]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_RCC_OscConfig+0x17e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e392      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027f6:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0219 	bic.w	r2, r3, #25
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	493f      	ldr	r1, [pc, #252]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7fe fe34 	bl	8001474 <HAL_GetTick>
 800280c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7fe fe30 	bl	8001474 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e37c      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002822:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800282e:	f7fe fe2d 	bl	800148c <HAL_GetREVID>
 8002832:	4603      	mov	r3, r0
 8002834:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002838:	4293      	cmp	r3, r2
 800283a:	d817      	bhi.n	800286c <HAL_RCC_OscConfig+0x1f4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	2b40      	cmp	r3, #64	@ 0x40
 8002842:	d108      	bne.n	8002856 <HAL_RCC_OscConfig+0x1de>
 8002844:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800284c:	4a2c      	ldr	r2, [pc, #176]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002852:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002854:	e07a      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	031b      	lsls	r3, r3, #12
 8002864:	4926      	ldr	r1, [pc, #152]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286a:	e06f      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	061b      	lsls	r3, r3, #24
 800287a:	4921      	ldr	r1, [pc, #132]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002880:	e064      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d047      	beq.n	800291a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f023 0219 	bic.w	r2, r3, #25
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	491a      	ldr	r1, [pc, #104]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fdea 	bl	8001474 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe fde6 	bl	8001474 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e332      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028b6:	4b12      	ldr	r3, [pc, #72]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	f7fe fde3 	bl	800148c <HAL_GetREVID>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d819      	bhi.n	8002904 <HAL_RCC_OscConfig+0x28c>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b40      	cmp	r3, #64	@ 0x40
 80028d6:	d108      	bne.n	80028ea <HAL_RCC_OscConfig+0x272>
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028e0:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e030      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
 80028ea:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	031b      	lsls	r3, r3, #12
 80028f8:	4901      	ldr	r1, [pc, #4]	@ (8002900 <HAL_RCC_OscConfig+0x288>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
 80028fe:	e025      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
 8002900:	58024400 	.word	0x58024400
 8002904:	4b9a      	ldr	r3, [pc, #616]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	4997      	ldr	r1, [pc, #604]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
 8002918:	e018      	b.n	800294c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b95      	ldr	r3, [pc, #596]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a94      	ldr	r2, [pc, #592]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe fda5 	bl	8001474 <HAL_GetTick>
 800292a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe fda1 	bl	8001474 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e2ed      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002940:	4b8b      	ldr	r3, [pc, #556]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f0      	bne.n	800292e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a9 	beq.w	8002aac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	4b85      	ldr	r3, [pc, #532]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002962:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002964:	4b82      	ldr	r3, [pc, #520]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d007      	beq.n	8002980 <HAL_RCC_OscConfig+0x308>
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b18      	cmp	r3, #24
 8002974:	d13a      	bne.n	80029ec <HAL_RCC_OscConfig+0x374>
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d135      	bne.n	80029ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002980:	4b7b      	ldr	r3, [pc, #492]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_RCC_OscConfig+0x320>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	2b80      	cmp	r3, #128	@ 0x80
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e2c1      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002998:	f7fe fd78 	bl	800148c <HAL_GetREVID>
 800299c:	4603      	mov	r3, r0
 800299e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d817      	bhi.n	80029d6 <HAL_RCC_OscConfig+0x35e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x348>
 80029ae:	4b70      	ldr	r3, [pc, #448]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029be:	e075      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	069b      	lsls	r3, r3, #26
 80029ce:	4968      	ldr	r1, [pc, #416]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d4:	e06a      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d6:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	4962      	ldr	r1, [pc, #392]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ea:	e05f      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d042      	beq.n	8002a7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fd38 	bl	8001474 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a08:	f7fe fd34 	bl	8001474 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e280      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a1a:	4b55      	ldr	r3, [pc, #340]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a26:	f7fe fd31 	bl	800148c <HAL_GetREVID>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d817      	bhi.n	8002a64 <HAL_RCC_OscConfig+0x3ec>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d108      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3d6>
 8002a3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a44:	4a4a      	ldr	r2, [pc, #296]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a4a:	6053      	str	r3, [r2, #4]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
 8002a4e:	4b48      	ldr	r3, [pc, #288]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	4944      	ldr	r1, [pc, #272]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
 8002a62:	e023      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
 8002a64:	4b42      	ldr	r3, [pc, #264]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	493f      	ldr	r1, [pc, #252]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60cb      	str	r3, [r1, #12]
 8002a78:	e018      	b.n	8002aac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe fcf5 	bl	8001474 <HAL_GetTick>
 8002a8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fcf1 	bl	8001474 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e23d      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aa0:	4b33      	ldr	r3, [pc, #204]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d036      	beq.n	8002b26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d019      	beq.n	8002af4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe fcd2 	bl	8001474 <HAL_GetTick>
 8002ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7fe fcce 	bl	8001474 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e21a      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ae6:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x45c>
 8002af2:	e018      	b.n	8002b26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fcb8 	bl	8001474 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fcb4 	bl	8001474 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d039      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b46:	f7fe fc95 	bl	8001474 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4e:	f7fe fc91 	bl	8001474 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1dd      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_RCC_OscConfig+0x4f8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4d6>
 8002b6c:	e01b      	b.n	8002ba6 <HAL_RCC_OscConfig+0x52e>
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b74:	4b9b      	ldr	r3, [pc, #620]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a9a      	ldr	r2, [pc, #616]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b80:	f7fe fc78 	bl	8001474 <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b88:	f7fe fc74 	bl	8001474 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b9a:	4b92      	ldr	r3, [pc, #584]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8081 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002de8 <HAL_RCC_OscConfig+0x770>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8b      	ldr	r2, [pc, #556]	@ (8002de8 <HAL_RCC_OscConfig+0x770>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fc58 	bl	8001474 <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc8:	f7fe fc54 	bl	8001474 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	@ 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e1a0      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bda:	4b83      	ldr	r3, [pc, #524]	@ (8002de8 <HAL_RCC_OscConfig+0x770>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d106      	bne.n	8002bfc <HAL_RCC_OscConfig+0x584>
 8002bee:	4b7d      	ldr	r3, [pc, #500]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf2:	4a7c      	ldr	r2, [pc, #496]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bfa:	e02d      	b.n	8002c58 <HAL_RCC_OscConfig+0x5e0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x5a6>
 8002c04:	4b77      	ldr	r3, [pc, #476]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	4a76      	ldr	r2, [pc, #472]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c10:	4b74      	ldr	r3, [pc, #464]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a73      	ldr	r2, [pc, #460]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	f023 0304 	bic.w	r3, r3, #4
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x5e0>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x5c8>
 8002c26:	4b6f      	ldr	r3, [pc, #444]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c32:	4b6c      	ldr	r3, [pc, #432]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a6b      	ldr	r2, [pc, #428]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x5e0>
 8002c40:	4b68      	ldr	r3, [pc, #416]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a67      	ldr	r2, [pc, #412]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4c:	4b65      	ldr	r3, [pc, #404]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a64      	ldr	r2, [pc, #400]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe fc08 	bl	8001474 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fc04 	bl	8001474 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e14e      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7e:	4b59      	ldr	r3, [pc, #356]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x5f0>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fbf2 	bl	8001474 <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fbee 	bl	8001474 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e138      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002caa:	4b4e      	ldr	r3, [pc, #312]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 812d 	beq.w	8002f1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002cc0:	4b48      	ldr	r3, [pc, #288]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cc8:	2b18      	cmp	r3, #24
 8002cca:	f000 80bd 	beq.w	8002e48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	f040 809e 	bne.w	8002e14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd8:	4b42      	ldr	r3, [pc, #264]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a41      	ldr	r2, [pc, #260]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fbc6 	bl	8001474 <HAL_GetTick>
 8002ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe fbc2 	bl	8001474 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e10e      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfe:	4b39      	ldr	r3, [pc, #228]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d0e:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <HAL_RCC_OscConfig+0x774>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	4931      	ldr	r1, [pc, #196]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	3b01      	subs	r3, #1
 8002d34:	025b      	lsls	r3, r3, #9
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d54:	4923      	ldr	r1, [pc, #140]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	4a21      	ldr	r2, [pc, #132]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d66:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_RCC_OscConfig+0x778>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d72:	00d2      	lsls	r2, r2, #3
 8002d74:	491b      	ldr	r1, [pc, #108]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	f023 020c 	bic.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	4917      	ldr	r1, [pc, #92]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d8c:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	f023 0202 	bic.w	r2, r3, #2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d98:	4912      	ldr	r1, [pc, #72]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002db6:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dba:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dc2:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	4a07      	ldr	r2, [pc, #28]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dce:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe fb4b 	bl	8001474 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002de0:	e011      	b.n	8002e06 <HAL_RCC_OscConfig+0x78e>
 8002de2:	bf00      	nop
 8002de4:	58024400 	.word	0x58024400
 8002de8:	58024800 	.word	0x58024800
 8002dec:	fffffc0c 	.word	0xfffffc0c
 8002df0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe fb3e 	bl	8001474 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e08a      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x77c>
 8002e12:	e082      	b.n	8002f1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e14:	4b43      	ldr	r3, [pc, #268]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a42      	ldr	r2, [pc, #264]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fb28 	bl	8001474 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fb24 	bl	8001474 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e070      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x7b0>
 8002e46:	e068      	b.n	8002f1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e48:	4b36      	ldr	r3, [pc, #216]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e4e:	4b35      	ldr	r3, [pc, #212]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d031      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0203 	and.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d12a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d122      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d11a      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0a5b      	lsrs	r3, r3, #9
 8002e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d111      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	0c1b      	lsrs	r3, r3, #16
 8002ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0e1b      	lsrs	r3, r3, #24
 8002eb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e02b      	b.n	8002f1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ece:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d01f      	beq.n	8002f1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	4a11      	ldr	r2, [pc, #68]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee6:	f7fe fac5 	bl	8001474 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002eec:	bf00      	nop
 8002eee:	f7fe fac1 	bl	8001474 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d0f9      	beq.n	8002eee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002efe:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <HAL_RCC_OscConfig+0x8b0>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f06:	00d2      	lsls	r2, r2, #3
 8002f08:	4906      	ldr	r1, [pc, #24]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_RCC_OscConfig+0x8ac>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3730      	adds	r7, #48	@ 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	58024400 	.word	0x58024400
 8002f28:	ffff0007 	.word	0xffff0007

08002f2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e19c      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b8a      	ldr	r3, [pc, #552]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b87      	ldr	r3, [pc, #540]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 020f 	bic.w	r2, r3, #15
 8002f56:	4985      	ldr	r1, [pc, #532]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b83      	ldr	r3, [pc, #524]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e184      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	4b7b      	ldr	r3, [pc, #492]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d908      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f8c:	4b78      	ldr	r3, [pc, #480]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	4975      	ldr	r1, [pc, #468]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	4b70      	ldr	r3, [pc, #448]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d908      	bls.n	8002fcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fba:	4b6d      	ldr	r3, [pc, #436]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	496a      	ldr	r1, [pc, #424]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	4b64      	ldr	r3, [pc, #400]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d908      	bls.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fe8:	4b61      	ldr	r3, [pc, #388]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	495e      	ldr	r1, [pc, #376]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69da      	ldr	r2, [r3, #28]
 800300a:	4b59      	ldr	r3, [pc, #356]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003012:	429a      	cmp	r2, r3
 8003014:	d908      	bls.n	8003028 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003016:	4b56      	ldr	r3, [pc, #344]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	4953      	ldr	r1, [pc, #332]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003024:	4313      	orrs	r3, r2
 8003026:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	429a      	cmp	r2, r3
 8003042:	d908      	bls.n	8003056 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f023 020f 	bic.w	r2, r3, #15
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4947      	ldr	r1, [pc, #284]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003052:	4313      	orrs	r3, r2
 8003054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d055      	beq.n	800310e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003062:	4b43      	ldr	r3, [pc, #268]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	4940      	ldr	r1, [pc, #256]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003070:	4313      	orrs	r3, r2
 8003072:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800307c:	4b3c      	ldr	r3, [pc, #240]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d121      	bne.n	80030cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0f6      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003094:	4b36      	ldr	r3, [pc, #216]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d115      	bne.n	80030cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0ea      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d109      	bne.n	80030cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0de      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d6      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030cc:	4b28      	ldr	r3, [pc, #160]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f023 0207 	bic.w	r2, r3, #7
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	4925      	ldr	r1, [pc, #148]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030de:	f7fe f9c9 	bl	8001474 <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e6:	f7fe f9c5 	bl	8001474 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e0be      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	429a      	cmp	r2, r3
 800310c:	d1eb      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	429a      	cmp	r2, r3
 8003128:	d208      	bcs.n	800313c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312a:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	490e      	ldr	r1, [pc, #56]	@ (8003170 <HAL_RCC_ClockConfig+0x244>)
 8003138:	4313      	orrs	r3, r2
 800313a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800313c:	4b0b      	ldr	r3, [pc, #44]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d214      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 020f 	bic.w	r2, r3, #15
 8003152:	4906      	ldr	r1, [pc, #24]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b04      	ldr	r3, [pc, #16]	@ (800316c <HAL_RCC_ClockConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d005      	beq.n	8003174 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e086      	b.n	800327a <HAL_RCC_ClockConfig+0x34e>
 800316c:	52002000 	.word	0x52002000
 8003170:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	4b3f      	ldr	r3, [pc, #252]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318c:	429a      	cmp	r2, r3
 800318e:	d208      	bcs.n	80031a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003190:	4b3c      	ldr	r3, [pc, #240]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4939      	ldr	r1, [pc, #228]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	4b34      	ldr	r3, [pc, #208]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d208      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031be:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	492e      	ldr	r1, [pc, #184]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	4b28      	ldr	r3, [pc, #160]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d208      	bcs.n	80031fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031ec:	4b25      	ldr	r3, [pc, #148]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	4922      	ldr	r1, [pc, #136]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003216:	429a      	cmp	r2, r3
 8003218:	d208      	bcs.n	800322c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800321a:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4917      	ldr	r1, [pc, #92]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 8003228:	4313      	orrs	r3, r2
 800322a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800322c:	f000 f834 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4912      	ldr	r1, [pc, #72]	@ (8003288 <HAL_RCC_ClockConfig+0x35c>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <HAL_RCC_ClockConfig+0x358>)
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	4a0d      	ldr	r2, [pc, #52]	@ (8003288 <HAL_RCC_ClockConfig+0x35c>)
 8003254:	5cd3      	ldrb	r3, [r2, r3]
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <HAL_RCC_ClockConfig+0x360>)
 8003262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003264:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <HAL_RCC_ClockConfig+0x364>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800326a:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <HAL_RCC_ClockConfig+0x368>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe f8b6 	bl	80013e0 <HAL_InitTick>
 8003274:	4603      	mov	r3, r0
 8003276:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3718      	adds	r7, #24
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	58024400 	.word	0x58024400
 8003288:	08006744 	.word	0x08006744
 800328c:	20000004 	.word	0x20000004
 8003290:	20000000 	.word	0x20000000
 8003294:	20000008 	.word	0x20000008

08003298 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329e:	4bb3      	ldr	r3, [pc, #716]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032a6:	2b18      	cmp	r3, #24
 80032a8:	f200 8155 	bhi.w	8003556 <HAL_RCC_GetSysClockFreq+0x2be>
 80032ac:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	08003319 	.word	0x08003319
 80032b8:	08003557 	.word	0x08003557
 80032bc:	08003557 	.word	0x08003557
 80032c0:	08003557 	.word	0x08003557
 80032c4:	08003557 	.word	0x08003557
 80032c8:	08003557 	.word	0x08003557
 80032cc:	08003557 	.word	0x08003557
 80032d0:	08003557 	.word	0x08003557
 80032d4:	0800333f 	.word	0x0800333f
 80032d8:	08003557 	.word	0x08003557
 80032dc:	08003557 	.word	0x08003557
 80032e0:	08003557 	.word	0x08003557
 80032e4:	08003557 	.word	0x08003557
 80032e8:	08003557 	.word	0x08003557
 80032ec:	08003557 	.word	0x08003557
 80032f0:	08003557 	.word	0x08003557
 80032f4:	08003345 	.word	0x08003345
 80032f8:	08003557 	.word	0x08003557
 80032fc:	08003557 	.word	0x08003557
 8003300:	08003557 	.word	0x08003557
 8003304:	08003557 	.word	0x08003557
 8003308:	08003557 	.word	0x08003557
 800330c:	08003557 	.word	0x08003557
 8003310:	08003557 	.word	0x08003557
 8003314:	0800334b 	.word	0x0800334b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003318:	4b94      	ldr	r3, [pc, #592]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003324:	4b91      	ldr	r3, [pc, #580]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	4a90      	ldr	r2, [pc, #576]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003336:	e111      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003338:	4b8d      	ldr	r3, [pc, #564]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800333a:	61bb      	str	r3, [r7, #24]
      break;
 800333c:	e10e      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800333e:	4b8d      	ldr	r3, [pc, #564]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003340:	61bb      	str	r3, [r7, #24]
      break;
 8003342:	e10b      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003344:	4b8c      	ldr	r3, [pc, #560]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003346:	61bb      	str	r3, [r7, #24]
      break;
 8003348:	e108      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800334a:	4b88      	ldr	r3, [pc, #544]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003354:	4b85      	ldr	r3, [pc, #532]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800335e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003360:	4b82      	ldr	r3, [pc, #520]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800336a:	4b80      	ldr	r3, [pc, #512]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800336c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336e:	08db      	lsrs	r3, r3, #3
 8003370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80e1 	beq.w	8003550 <HAL_RCC_GetSysClockFreq+0x2b8>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b02      	cmp	r3, #2
 8003392:	f000 8083 	beq.w	800349c <HAL_RCC_GetSysClockFreq+0x204>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b02      	cmp	r3, #2
 800339a:	f200 80a1 	bhi.w	80034e0 <HAL_RCC_GetSysClockFreq+0x248>
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x114>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d056      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033aa:	e099      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ac:	4b6f      	ldr	r3, [pc, #444]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02d      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033b8:	4b6c      	ldr	r3, [pc, #432]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	08db      	lsrs	r3, r3, #3
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e2:	4b62      	ldr	r3, [pc, #392]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800357c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003412:	e087      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003580 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003426:	4b51      	ldr	r3, [pc, #324]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003436:	ed97 6a02 	vldr	s12, [r7, #8]
 800343a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800357c <HAL_RCC_GetSysClockFreq+0x2e4>
 800343e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800344a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003456:	e065      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003462:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003584 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346a:	4b40      	ldr	r3, [pc, #256]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347a:	ed97 6a02 	vldr	s12, [r7, #8]
 800347e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800357c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800348e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800349a:	e043      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003588 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ae:	4b2f      	ldr	r3, [pc, #188]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034be:	ed97 6a02 	vldr	s12, [r7, #8]
 80034c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800357c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034de:	e021      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003584 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f2:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003502:	ed97 6a02 	vldr	s12, [r7, #8]
 8003506:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800357c <HAL_RCC_GetSysClockFreq+0x2e4>
 800350a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003522:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003524:	4b11      	ldr	r3, [pc, #68]	@ (800356c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003528:	0a5b      	lsrs	r3, r3, #9
 800352a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800352e:	3301      	adds	r3, #1
 8003530:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800353c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003548:	ee17 3a90 	vmov	r3, s15
 800354c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800354e:	e005      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
      break;
 8003554:	e002      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003558:	61bb      	str	r3, [r7, #24]
      break;
 800355a:	bf00      	nop
  }

  return sysclockfreq;
 800355c:	69bb      	ldr	r3, [r7, #24]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3724      	adds	r7, #36	@ 0x24
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
 8003570:	03d09000 	.word	0x03d09000
 8003574:	003d0900 	.word	0x003d0900
 8003578:	017d7840 	.word	0x017d7840
 800357c:	46000000 	.word	0x46000000
 8003580:	4c742400 	.word	0x4c742400
 8003584:	4a742400 	.word	0x4a742400
 8003588:	4bbebc20 	.word	0x4bbebc20

0800358c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003592:	f7ff fe81 	bl	8003298 <HAL_RCC_GetSysClockFreq>
 8003596:	4602      	mov	r2, r0
 8003598:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_RCC_GetHCLKFreq+0x50>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80035a4:	5ccb      	ldrb	r3, [r1, r3]
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035b0:	4b0a      	ldr	r3, [pc, #40]	@ (80035dc <HAL_RCC_GetHCLKFreq+0x50>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4a09      	ldr	r2, [pc, #36]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ca:	4a07      	ldr	r2, [pc, #28]	@ (80035e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035d0:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	58024400 	.word	0x58024400
 80035e0:	08006744 	.word	0x08006744
 80035e4:	20000004 	.word	0x20000004
 80035e8:	20000000 	.word	0x20000000

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035f0:	f7ff ffcc 	bl	800358c <HAL_RCC_GetHCLKFreq>
 80035f4:	4602      	mov	r2, r0
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	4904      	ldr	r1, [pc, #16]	@ (8003614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003602:	5ccb      	ldrb	r3, [r1, r3]
 8003604:	f003 031f 	and.w	r3, r3, #31
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024400 	.word	0x58024400
 8003614:	08006744 	.word	0x08006744

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800361c:	f7ff ffb6 	bl	800358c <HAL_RCC_GetHCLKFreq>
 8003620:	4602      	mov	r2, r0
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	0a1b      	lsrs	r3, r3, #8
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4904      	ldr	r1, [pc, #16]	@ (8003640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800362e:	5ccb      	ldrb	r3, [r1, r3]
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	58024400 	.word	0x58024400
 8003640:	08006744 	.word	0x08006744

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003648:	b0ca      	sub	sp, #296	@ 0x128
 800364a:	af00      	add	r7, sp, #0
 800364c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003656:	2300      	movs	r3, #0
 8003658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003668:	2500      	movs	r5, #0
 800366a:	ea54 0305 	orrs.w	r3, r4, r5
 800366e:	d049      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800367a:	d02f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800367c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003680:	d828      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003682:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003686:	d01a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003688:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800368c:	d822      	bhi.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003696:	d007      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003698:	e01c      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369a:	4bb8      	ldr	r3, [pc, #736]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	4ab7      	ldr	r2, [pc, #732]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a6:	e01a      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	3308      	adds	r3, #8
 80036ae:	2102      	movs	r1, #2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 fc8f 	bl	8004fd4 <RCCEx_PLL2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036bc:	e00f      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	3328      	adds	r3, #40	@ 0x28
 80036c4:	2102      	movs	r1, #2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fd36 	bl	8005138 <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036d2:	e004      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036e6:	4ba5      	ldr	r3, [pc, #660]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036f4:	4aa1      	ldr	r2, [pc, #644]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003700:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003710:	f04f 0900 	mov.w	r9, #0
 8003714:	ea58 0309 	orrs.w	r3, r8, r9
 8003718:	d047      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800371a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	2b04      	cmp	r3, #4
 8003722:	d82a      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003724:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003741 	.word	0x08003741
 8003730:	0800374f 	.word	0x0800374f
 8003734:	08003765 	.word	0x08003765
 8003738:	08003783 	.word	0x08003783
 800373c:	08003783 	.word	0x08003783
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003740:	4b8e      	ldr	r3, [pc, #568]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	4a8d      	ldr	r2, [pc, #564]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800374a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374c:	e01a      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	3308      	adds	r3, #8
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fc3c 	bl	8004fd4 <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003762:	e00f      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	3328      	adds	r3, #40	@ 0x28
 800376a:	2100      	movs	r1, #0
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fce3 	bl	8005138 <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003778:	e004      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800378c:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800378e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003790:	f023 0107 	bic.w	r1, r3, #7
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	4a78      	ldr	r2, [pc, #480]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800379c:	430b      	orrs	r3, r1
 800379e:	6513      	str	r3, [r2, #80]	@ 0x50
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80037b6:	f04f 0b00 	mov.w	fp, #0
 80037ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80037be:	d04c      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ca:	d030      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d0:	d829      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037d4:	d02d      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037d8:	d825      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d018      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d821      	bhi.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037e6:	2b40      	cmp	r3, #64	@ 0x40
 80037e8:	d007      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037ea:	e01c      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ec:	4b63      	ldr	r3, [pc, #396]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f0:	4a62      	ldr	r2, [pc, #392]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f8:	e01c      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	3308      	adds	r3, #8
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fbe6 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800380e:	e011      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	3328      	adds	r3, #40	@ 0x28
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f001 fc8d 	bl	8005138 <RCCEx_PLL3_Config>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800383c:	4b4f      	ldr	r3, [pc, #316]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003840:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	4a4c      	ldr	r2, [pc, #304]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800384c:	430b      	orrs	r3, r1
 800384e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003866:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800386a:	2300      	movs	r3, #0
 800386c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003870:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003874:	460b      	mov	r3, r1
 8003876:	4313      	orrs	r3, r2
 8003878:	d053      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003882:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003886:	d035      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800388c:	d82e      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800388e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003892:	d031      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003894:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003898:	d828      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800389a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800389e:	d01a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038a4:	d822      	bhi.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ae:	d007      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80038b0:	e01c      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b2:	4b32      	ldr	r3, [pc, #200]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	4a31      	ldr	r2, [pc, #196]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038be:	e01c      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	3308      	adds	r3, #8
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fb83 	bl	8004fd4 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038d4:	e011      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	3328      	adds	r3, #40	@ 0x28
 80038dc:	2100      	movs	r1, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fc2a 	bl	8005138 <RCCEx_PLL3_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ea:	e006      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f2:	e002      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003902:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003912:	4a1a      	ldr	r2, [pc, #104]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003914:	430b      	orrs	r3, r1
 8003916:	6593      	str	r3, [r2, #88]	@ 0x58
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800392e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003938:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d056      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800394a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800394e:	d038      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003950:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003954:	d831      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003956:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800395a:	d034      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800395c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003960:	d82b      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003962:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003966:	d01d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800396c:	d825      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003976:	d00a      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003978:	e01f      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003980:	4ba2      	ldr	r3, [pc, #648]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4aa1      	ldr	r2, [pc, #644]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398c:	e01c      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	3308      	adds	r3, #8
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f001 fb1c 	bl	8004fd4 <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039a2:	e011      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	3328      	adds	r3, #40	@ 0x28
 80039aa:	2100      	movs	r1, #0
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 fbc3 	bl	8005138 <RCCEx_PLL3_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039d0:	4b8e      	ldr	r3, [pc, #568]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039e0:	4a8a      	ldr	r2, [pc, #552]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e6:	e003      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d03a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a16:	2b30      	cmp	r3, #48	@ 0x30
 8003a18:	d01f      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a1a:	2b30      	cmp	r3, #48	@ 0x30
 8003a1c:	d819      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d00c      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d815      	bhi.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d111      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2e:	4b77      	ldr	r3, [pc, #476]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a32:	4a76      	ldr	r2, [pc, #472]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	3308      	adds	r3, #8
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fac5 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a58:	e002      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10a      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a68:	4b68      	ldr	r3, [pc, #416]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a76:	4a65      	ldr	r2, [pc, #404]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7c:	e003      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	d051      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab0:	d035      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ab6:	d82e      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003abc:	d031      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003abe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ac2:	d828      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac8:	d01a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ace:	d822      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad8:	d007      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ada:	e01c      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003adc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	3308      	adds	r3, #8
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fa6e 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003afe:	e011      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	3328      	adds	r3, #40	@ 0x28
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fb15 	bl	8005138 <RCCEx_PLL3_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b2c:	4b37      	ldr	r3, [pc, #220]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	4a34      	ldr	r2, [pc, #208]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b40:	e003      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b64:	460b      	mov	r3, r1
 8003b66:	4313      	orrs	r3, r2
 8003b68:	d056      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b74:	d033      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b7a:	d82c      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b80:	d02f      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b86:	d826      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b8c:	d02b      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b92:	d820      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b98:	d012      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b9e:	d81a      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d022      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fa0e 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bbe:	e015      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	3328      	adds	r3, #40	@ 0x28
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fab5 	bl	8005138 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e00a      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c02:	4a02      	ldr	r2, [pc, #8]	@ (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c08:	e006      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d055      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c44:	d033      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c4a:	d82c      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c50:	d02f      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	d826      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c5c:	d02b      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c62:	d820      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c68:	d012      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6e:	d81a      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c78:	d115      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f9a6 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e015      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fa4d 	bl	8005138 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cd4:	4a9f      	ldr	r2, [pc, #636]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d037      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d0e:	d00e      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d14:	d816      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b8c      	ldr	r3, [pc, #560]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	4a8b      	ldr	r2, [pc, #556]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3308      	adds	r3, #8
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f94c 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d56:	4b7f      	ldr	r3, [pc, #508]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a7b      	ldr	r2, [pc, #492]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d039      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d81c      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003de1 	.word	0x08003de1
 8003da8:	08003db5 	.word	0x08003db5
 8003dac:	08003dc3 	.word	0x08003dc3
 8003db0:	08003de1 	.word	0x08003de1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b67      	ldr	r3, [pc, #412]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	4a66      	ldr	r2, [pc, #408]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 f902 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dea:	4b5a      	ldr	r3, [pc, #360]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dee:	f023 0103 	bic.w	r1, r3, #3
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003df8:	4a56      	ldr	r2, [pc, #344]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f000 809f 	beq.w	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fb1d 	bl	8001474 <HAL_GetTick>
 8003e3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fb18 	bl	8001474 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	@ 0x64
 8003e4e:	d903      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e58:	4b3f      	ldr	r3, [pc, #252]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ed      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d179      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e6c:	4b39      	ldr	r3, [pc, #228]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e92:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eba:	d118      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fada 	bl	8001474 <HAL_GetTick>
 8003ec0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	e00d      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fad5 	bl	8001474 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0eb      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d129      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f06:	d10e      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f08:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f18:	091a      	lsrs	r2, r3, #4
 8003f1a:	4b10      	ldr	r3, [pc, #64]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6113      	str	r3, [r2, #16]
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f30:	6113      	str	r3, [r2, #16]
 8003f32:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f42:	4a04      	ldr	r2, [pc, #16]	@ (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	e00e      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f52:	e009      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58024800 	.word	0x58024800
 8003f5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f002 0301 	and.w	r3, r2, #1
 8003f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f000 8089 	beq.w	800409c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f90:	2b28      	cmp	r3, #40	@ 0x28
 8003f92:	d86b      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f94:	a201      	add	r2, pc, #4	@ (adr r2, 8003f9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08004075 	.word	0x08004075
 8003fa0:	0800406d 	.word	0x0800406d
 8003fa4:	0800406d 	.word	0x0800406d
 8003fa8:	0800406d 	.word	0x0800406d
 8003fac:	0800406d 	.word	0x0800406d
 8003fb0:	0800406d 	.word	0x0800406d
 8003fb4:	0800406d 	.word	0x0800406d
 8003fb8:	0800406d 	.word	0x0800406d
 8003fbc:	08004041 	.word	0x08004041
 8003fc0:	0800406d 	.word	0x0800406d
 8003fc4:	0800406d 	.word	0x0800406d
 8003fc8:	0800406d 	.word	0x0800406d
 8003fcc:	0800406d 	.word	0x0800406d
 8003fd0:	0800406d 	.word	0x0800406d
 8003fd4:	0800406d 	.word	0x0800406d
 8003fd8:	0800406d 	.word	0x0800406d
 8003fdc:	08004057 	.word	0x08004057
 8003fe0:	0800406d 	.word	0x0800406d
 8003fe4:	0800406d 	.word	0x0800406d
 8003fe8:	0800406d 	.word	0x0800406d
 8003fec:	0800406d 	.word	0x0800406d
 8003ff0:	0800406d 	.word	0x0800406d
 8003ff4:	0800406d 	.word	0x0800406d
 8003ff8:	0800406d 	.word	0x0800406d
 8003ffc:	08004075 	.word	0x08004075
 8004000:	0800406d 	.word	0x0800406d
 8004004:	0800406d 	.word	0x0800406d
 8004008:	0800406d 	.word	0x0800406d
 800400c:	0800406d 	.word	0x0800406d
 8004010:	0800406d 	.word	0x0800406d
 8004014:	0800406d 	.word	0x0800406d
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08004075 	.word	0x08004075
 8004020:	0800406d 	.word	0x0800406d
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800406d 	.word	0x0800406d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800406d 	.word	0x0800406d
 8004034:	0800406d 	.word	0x0800406d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	08004075 	.word	0x08004075
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004044:	3308      	adds	r3, #8
 8004046:	2101      	movs	r1, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ffc3 	bl	8004fd4 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004054:	e00f      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	3328      	adds	r3, #40	@ 0x28
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f86a 	bl	8005138 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800406a:	e004      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800407e:	4bbf      	ldr	r3, [pc, #764]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800408c:	4abb      	ldr	r2, [pc, #748]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800408e:	430b      	orrs	r3, r1
 8004090:	6553      	str	r3, [r2, #84]	@ 0x54
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f002 0302 	and.w	r3, r2, #2
 80040a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80040b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80040b6:	460b      	mov	r3, r1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	d041      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d824      	bhi.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	08004119 	.word	0x08004119
 80040d0:	080040e5 	.word	0x080040e5
 80040d4:	080040fb 	.word	0x080040fb
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004119 	.word	0x08004119
 80040e0:	08004119 	.word	0x08004119
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	3308      	adds	r3, #8
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 ff71 	bl	8004fd4 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040f8:	e00f      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	3328      	adds	r3, #40	@ 0x28
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f001 f818 	bl	8005138 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800410e:	e004      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004116:	e000      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004122:	4b96      	ldr	r3, [pc, #600]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004126:	f023 0107 	bic.w	r1, r3, #7
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004130:	4a92      	ldr	r2, [pc, #584]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004132:	430b      	orrs	r3, r1
 8004134:	6553      	str	r3, [r2, #84]	@ 0x54
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f002 0304 	and.w	r3, r2, #4
 800414c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004150:	2300      	movs	r3, #0
 8004152:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004156:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800415a:	460b      	mov	r3, r1
 800415c:	4313      	orrs	r3, r2
 800415e:	d044      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004168:	2b05      	cmp	r3, #5
 800416a:	d825      	bhi.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800416c:	a201      	add	r2, pc, #4	@ (adr r2, 8004174 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	080041c1 	.word	0x080041c1
 8004178:	0800418d 	.word	0x0800418d
 800417c:	080041a3 	.word	0x080041a3
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041c1 	.word	0x080041c1
 8004188:	080041c1 	.word	0x080041c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	3308      	adds	r3, #8
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f000 ff1d 	bl	8004fd4 <RCCEx_PLL2_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041a0:	e00f      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	3328      	adds	r3, #40	@ 0x28
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ffc4 	bl	8005138 <RCCEx_PLL3_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041b6:	e004      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041be:	e000      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ca:	4b6c      	ldr	r3, [pc, #432]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ce:	f023 0107 	bic.w	r1, r3, #7
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041da:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e0:	e003      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f002 0320 	and.w	r3, r2, #32
 80041f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004204:	460b      	mov	r3, r1
 8004206:	4313      	orrs	r3, r2
 8004208:	d055      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004216:	d033      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800421c:	d82c      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800421e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004222:	d02f      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004228:	d826      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800422a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800422e:	d02b      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004230:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004234:	d820      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800423a:	d012      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800423c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004240:	d81a      	bhi.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d022      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424a:	d115      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004250:	3308      	adds	r3, #8
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 febd 	bl	8004fd4 <RCCEx_PLL2_Config>
 800425a:	4603      	mov	r3, r0
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004260:	e015      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	3328      	adds	r3, #40	@ 0x28
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f000 ff64 	bl	8005138 <RCCEx_PLL3_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004276:	e00a      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800427e:	e006      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004280:	bf00      	nop
 8004282:	e004      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004284:	bf00      	nop
 8004286:	e002      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800428c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800428e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10b      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a6:	4a35      	ldr	r2, [pc, #212]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	d058      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042e2:	d033      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042e8:	d82c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ee:	d02f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f4:	d826      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042fa:	d02b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004300:	d820      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004306:	d012      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430c:	d81a      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d022      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004316:	d115      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	3308      	adds	r3, #8
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fe57 	bl	8004fd4 <RCCEx_PLL2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800432c:	e015      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	3328      	adds	r3, #40	@ 0x28
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fefe 	bl	8005138 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004342:	e00a      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434a:	e006      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10e      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004362:	4b06      	ldr	r3, [pc, #24]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004366:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004372:	4a02      	ldr	r2, [pc, #8]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004374:	430b      	orrs	r3, r1
 8004376:	6593      	str	r3, [r2, #88]	@ 0x58
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800437a:	bf00      	nop
 800437c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800439e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d055      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043b4:	d033      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80043b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043ba:	d82c      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c0:	d02f      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c6:	d826      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043cc:	d02b      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043d2:	d820      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043d8:	d012      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043de:	d81a      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d022      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043e8:	d115      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	3308      	adds	r3, #8
 80043f0:	2100      	movs	r1, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fdee 	bl	8004fd4 <RCCEx_PLL2_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043fe:	e015      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	3328      	adds	r3, #40	@ 0x28
 8004406:	2102      	movs	r1, #2
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fe95 	bl	8005138 <RCCEx_PLL3_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004414:	e00a      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800441e:	bf00      	nop
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800442a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004434:	4ba1      	ldr	r3, [pc, #644]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004438:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004444:	4a9d      	ldr	r2, [pc, #628]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004446:	430b      	orrs	r3, r1
 8004448:	6593      	str	r3, [r2, #88]	@ 0x58
 800444a:	e003      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445c:	f002 0308 	and.w	r3, r2, #8
 8004460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004464:	2300      	movs	r3, #0
 8004466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800446a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800446e:	460b      	mov	r3, r1
 8004470:	4313      	orrs	r3, r2
 8004472:	d01e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	d10c      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	3328      	adds	r3, #40	@ 0x28
 8004488:	2102      	movs	r1, #2
 800448a:	4618      	mov	r0, r3
 800448c:	f000 fe54 	bl	8005138 <RCCEx_PLL3_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800449c:	4b87      	ldr	r3, [pc, #540]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800449e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ac:	4a83      	ldr	r2, [pc, #524]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ba:	f002 0310 	and.w	r3, r2, #16
 80044be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044cc:	460b      	mov	r3, r1
 80044ce:	4313      	orrs	r3, r2
 80044d0:	d01e      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	d10c      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e4:	3328      	adds	r3, #40	@ 0x28
 80044e6:	2102      	movs	r1, #2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fe25 	bl	8005138 <RCCEx_PLL3_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fa:	4b70      	ldr	r3, [pc, #448]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800450a:	4a6c      	ldr	r2, [pc, #432]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450c:	430b      	orrs	r3, r1
 800450e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800451c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d03e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800453c:	d022      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800453e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004542:	d81b      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454c:	d00b      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800454e:	e015      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	3308      	adds	r3, #8
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fd3b 	bl	8004fd4 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004564:	e00f      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	3328      	adds	r3, #40	@ 0x28
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fde2 	bl	8005138 <RCCEx_PLL3_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800457a:	e004      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800458e:	4b4b      	ldr	r3, [pc, #300]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800459e:	4a47      	ldr	r2, [pc, #284]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045a4:	e003      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045bc:	2300      	movs	r3, #0
 80045be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d03b      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045d6:	d01f      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045dc:	d818      	bhi.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045e2:	d003      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045e8:	d007      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045ea:	e011      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ec:	4b33      	ldr	r3, [pc, #204]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	4a32      	ldr	r2, [pc, #200]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045f8:	e00f      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	3328      	adds	r3, #40	@ 0x28
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fd98 	bl	8005138 <RCCEx_PLL3_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800460e:	e004      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10b      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004626:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6553      	str	r3, [r2, #84]	@ 0x54
 8004638:	e003      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800464e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004650:	2300      	movs	r3, #0
 8004652:	677b      	str	r3, [r7, #116]	@ 0x74
 8004654:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d034      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800466c:	d007      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800466e:	e011      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004670:	4b12      	ldr	r3, [pc, #72]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	4a11      	ldr	r2, [pc, #68]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800467c:	e00e      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	3308      	adds	r3, #8
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f000 fca4 	bl	8004fd4 <RCCEx_PLL2_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004692:	e003      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800469a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	4a02      	ldr	r2, [pc, #8]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046b4:	430b      	orrs	r3, r1
 80046b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046d6:	2300      	movs	r3, #0
 80046d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d00c      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	3328      	adds	r3, #40	@ 0x28
 80046ea:	2102      	movs	r1, #2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fd23 	bl	8005138 <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004706:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800470a:	663b      	str	r3, [r7, #96]	@ 0x60
 800470c:	2300      	movs	r3, #0
 800470e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004710:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004714:	460b      	mov	r3, r1
 8004716:	4313      	orrs	r3, r2
 8004718:	d038      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004726:	d018      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472c:	d811      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800472e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004732:	d014      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004738:	d80b      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d011      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800473e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004742:	d106      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004744:	4bc3      	ldr	r3, [pc, #780]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	4ac2      	ldr	r2, [pc, #776]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800474a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004750:	e008      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004758:	e004      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800475a:	bf00      	nop
 800475c:	e002      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800475e:	bf00      	nop
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800476c:	4bb9      	ldr	r3, [pc, #740]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800477c:	4ab5      	ldr	r2, [pc, #724]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800477e:	430b      	orrs	r3, r1
 8004780:	6553      	str	r3, [r2, #84]	@ 0x54
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800478c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004798:	65bb      	str	r3, [r7, #88]	@ 0x58
 800479a:	2300      	movs	r3, #0
 800479c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800479e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80047a2:	460b      	mov	r3, r1
 80047a4:	4313      	orrs	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047a8:	4baa      	ldr	r3, [pc, #680]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b6:	4aa7      	ldr	r2, [pc, #668]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ca:	2300      	movs	r3, #0
 80047cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047d8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047e8:	4a9a      	ldr	r2, [pc, #616]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fc:	2300      	movs	r3, #0
 80047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004800:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800480a:	4b92      	ldr	r3, [pc, #584]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800480c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004818:	4a8e      	ldr	r2, [pc, #568]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481a:	430b      	orrs	r3, r1
 800481c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800482a:	643b      	str	r3, [r7, #64]	@ 0x40
 800482c:	2300      	movs	r3, #0
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004830:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800483a:	4b86      	ldr	r3, [pc, #536]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	4a85      	ldr	r2, [pc, #532]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004840:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004844:	6113      	str	r3, [r2, #16]
 8004846:	4b83      	ldr	r3, [pc, #524]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004852:	4a80      	ldr	r2, [pc, #512]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004854:	430b      	orrs	r3, r1
 8004856:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004864:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004866:	2300      	movs	r3, #0
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004874:	4b77      	ldr	r3, [pc, #476]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004878:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004882:	4a74      	ldr	r2, [pc, #464]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004884:	430b      	orrs	r3, r1
 8004886:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004894:	633b      	str	r3, [r7, #48]	@ 0x30
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
 800489a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800489e:	460b      	mov	r3, r1
 80048a0:	4313      	orrs	r3, r2
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80048ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048b4:	4a67      	ldr	r2, [pc, #412]	@ (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	2100      	movs	r1, #0
 80048c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d011      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	3308      	adds	r3, #8
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fb78 	bl	8004fd4 <RCCEx_PLL2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004902:	2100      	movs	r1, #0
 8004904:	6239      	str	r1, [r7, #32]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
 800490c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004910:	460b      	mov	r3, r1
 8004912:	4313      	orrs	r3, r2
 8004914:	d011      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	3308      	adds	r3, #8
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fb58 	bl	8004fd4 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800492a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004942:	2100      	movs	r1, #0
 8004944:	61b9      	str	r1, [r7, #24]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004950:	460b      	mov	r3, r1
 8004952:	4313      	orrs	r3, r2
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	3308      	adds	r3, #8
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fb38 	bl	8004fd4 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800496a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	2100      	movs	r1, #0
 8004984:	6139      	str	r1, [r7, #16]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d011      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	3328      	adds	r3, #40	@ 0x28
 800499c:	2100      	movs	r1, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 fbca 	bl	8005138 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	2100      	movs	r1, #0
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d011      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	3328      	adds	r3, #40	@ 0x28
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fbaa 	bl	8005138 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	2100      	movs	r1, #0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d011      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	3328      	adds	r3, #40	@ 0x28
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fb8a 	bl	8005138 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a3a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	e000      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a54:	58024400 	.word	0x58024400

08004a58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a5c:	f7fe fd96 	bl	800358c <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4904      	ldr	r1, [pc, #16]	@ (8004a80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	08006744 	.word	0x08006744

08004a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a8c:	4ba1      	ldr	r3, [pc, #644]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a96:	4b9f      	ldr	r3, [pc, #636]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	0b1b      	lsrs	r3, r3, #12
 8004a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004aae:	4b99      	ldr	r3, [pc, #612]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8111 	beq.w	8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	f000 8083 	beq.w	8004be0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	f200 80a1 	bhi.w	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d056      	beq.n	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004aee:	e099      	b.n	8004c24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af0:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02d      	beq.n	8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004afc:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	08db      	lsrs	r3, r3, #3
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	4a84      	ldr	r2, [pc, #528]	@ (8004d18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b26:	4b7b      	ldr	r3, [pc, #492]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b56:	e087      	b.n	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9a:	e065      	b.n	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bde:	e043      	b.n	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf2:	4b48      	ldr	r3, [pc, #288]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c22:	e021      	b.n	8004c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b37      	ldr	r3, [pc, #220]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c68:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	0a5b      	lsrs	r3, r3, #9
 8004c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8e:	ee17 2a90 	vmov	r2, s15
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 2a90 	vmov	r2, s15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cea:	ee17 2a90 	vmov	r2, s15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
}
 8004d06:	bf00      	nop
 8004d08:	3724      	adds	r7, #36	@ 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
 8004d18:	03d09000 	.word	0x03d09000
 8004d1c:	46000000 	.word	0x46000000
 8004d20:	4c742400 	.word	0x4c742400
 8004d24:	4a742400 	.word	0x4a742400
 8004d28:	4bbebc20 	.word	0x4bbebc20

08004d2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b089      	sub	sp, #36	@ 0x24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d34:	4ba1      	ldr	r3, [pc, #644]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d3e:	4b9f      	ldr	r3, [pc, #636]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d42:	0d1b      	lsrs	r3, r3, #20
 8004d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d4a:	4b9c      	ldr	r3, [pc, #624]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d56:	4b99      	ldr	r3, [pc, #612]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 8111 	beq.w	8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	f000 8083 	beq.w	8004e88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	f200 80a1 	bhi.w	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d056      	beq.n	8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d96:	e099      	b.n	8004ecc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d98:	4b88      	ldr	r3, [pc, #544]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02d      	beq.n	8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004da4:	4b85      	ldr	r3, [pc, #532]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	4a84      	ldr	r2, [pc, #528]	@ (8004fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
 8004db4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b7b      	ldr	r3, [pc, #492]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004dfe:	e087      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b6a      	ldr	r3, [pc, #424]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e42:	e065      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e86:	e043      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b48      	ldr	r3, [pc, #288]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eca:	e021      	b.n	8004f10 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b37      	ldr	r3, [pc, #220]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	0a5b      	lsrs	r3, r3, #9
 8004f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f36:	ee17 2a90 	vmov	r2, s15
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f64:	ee17 2a90 	vmov	r2, s15
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f6c:	4b13      	ldr	r3, [pc, #76]	@ (8004fbc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	0e1b      	lsrs	r3, r3, #24
 8004f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f92:	ee17 2a90 	vmov	r2, s15
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	3724      	adds	r7, #36	@ 0x24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400
 8004fc0:	03d09000 	.word	0x03d09000
 8004fc4:	46000000 	.word	0x46000000
 8004fc8:	4c742400 	.word	0x4c742400
 8004fcc:	4a742400 	.word	0x4a742400
 8004fd0:	4bbebc20 	.word	0x4bbebc20

08004fd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fe2:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d101      	bne.n	8004ff2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e099      	b.n	8005126 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8004ff8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffe:	f7fc fa39 	bl	8001474 <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005004:	e008      	b.n	8005018 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005006:	f7fc fa35 	bl	8001474 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e086      	b.n	8005126 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005018:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005024:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	493f      	ldr	r1, [pc, #252]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	628b      	str	r3, [r1, #40]	@ 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	3b01      	subs	r3, #1
 800503e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	3b01      	subs	r3, #1
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	b29b      	uxth	r3, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	3b01      	subs	r3, #1
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005068:	4931      	ldr	r1, [pc, #196]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 800506a:	4313      	orrs	r3, r2
 800506c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800506e:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	492d      	ldr	r1, [pc, #180]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005080:	4b2b      	ldr	r3, [pc, #172]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f023 0220 	bic.w	r2, r3, #32
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4928      	ldr	r1, [pc, #160]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005092:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 8005098:	f023 0310 	bic.w	r3, r3, #16
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050a2:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <RCCEx_PLL2_Config+0x160>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	69d2      	ldr	r2, [r2, #28]
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	4920      	ldr	r1, [pc, #128]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	f043 0310 	orr.w	r3, r3, #16
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050d0:	e00f      	b.n	80050f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e4:	e005      	b.n	80050f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fe:	f7fc f9b9 	bl	8001474 <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005104:	e008      	b.n	8005118 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005106:	f7fc f9b5 	bl	8001474 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <RCCEx_PLL2_Config+0x15c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
 8005134:	ffff0007 	.word	0xffff0007

08005138 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005146:	4b53      	ldr	r3, [pc, #332]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b03      	cmp	r3, #3
 8005150:	d101      	bne.n	8005156 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e099      	b.n	800528a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005156:	4b4f      	ldr	r3, [pc, #316]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4e      	ldr	r2, [pc, #312]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005162:	f7fc f987 	bl	8001474 <HAL_GetTick>
 8005166:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005168:	e008      	b.n	800517c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800516a:	f7fc f983 	bl	8001474 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e086      	b.n	800528a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800517c:	4b45      	ldr	r3, [pc, #276]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f0      	bne.n	800516a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005188:	4b42      	ldr	r3, [pc, #264]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	051b      	lsls	r3, r3, #20
 8005196:	493f      	ldr	r1, [pc, #252]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	628b      	str	r3, [r1, #40]	@ 0x28
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	3b01      	subs	r3, #1
 80051ac:	025b      	lsls	r3, r3, #9
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051cc:	4931      	ldr	r1, [pc, #196]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051d2:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	492d      	ldr	r1, [pc, #180]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	4928      	ldr	r1, [pc, #160]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051f6:	4b27      	ldr	r3, [pc, #156]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	4a26      	ldr	r2, [pc, #152]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005200:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005206:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <RCCEx_PLL3_Config+0x160>)
 8005208:	4013      	ands	r3, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	69d2      	ldr	r2, [r2, #28]
 800520e:	00d2      	lsls	r2, r2, #3
 8005210:	4920      	ldr	r1, [pc, #128]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005216:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	4a1e      	ldr	r2, [pc, #120]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800521c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005228:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	4a19      	ldr	r2, [pc, #100]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800522e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005232:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005234:	e00f      	b.n	8005256 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d106      	bne.n	800524a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800523c:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005242:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005248:	e005      	b.n	8005256 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800524a:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	4a11      	ldr	r2, [pc, #68]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005250:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005254:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005256:	4b0f      	ldr	r3, [pc, #60]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a0e      	ldr	r2, [pc, #56]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800525c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005262:	f7fc f907 	bl	8001474 <HAL_GetTick>
 8005266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005268:	e008      	b.n	800527c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800526a:	f7fc f903 	bl	8001474 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e006      	b.n	800528a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800527c:	4b05      	ldr	r3, [pc, #20]	@ (8005294 <RCCEx_PLL3_Config+0x15c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f0      	beq.n	800526a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	58024400 	.word	0x58024400
 8005298:	ffff0007 	.word	0xffff0007

0800529c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e10f      	b.n	80054ce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a87      	ldr	r2, [pc, #540]	@ (80054d8 <HAL_SPI_Init+0x23c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <HAL_SPI_Init+0x42>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a86      	ldr	r2, [pc, #536]	@ (80054dc <HAL_SPI_Init+0x240>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00a      	beq.n	80052de <HAL_SPI_Init+0x42>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a84      	ldr	r2, [pc, #528]	@ (80054e0 <HAL_SPI_Init+0x244>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d005      	beq.n	80052de <HAL_SPI_Init+0x42>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d901      	bls.n	80052de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e0f7      	b.n	80054ce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f900 	bl	80054e4 <SPI_GetPacketSize>
 80052e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7b      	ldr	r2, [pc, #492]	@ (80054d8 <HAL_SPI_Init+0x23c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00c      	beq.n	800530a <HAL_SPI_Init+0x6e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a79      	ldr	r2, [pc, #484]	@ (80054dc <HAL_SPI_Init+0x240>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <HAL_SPI_Init+0x6e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a78      	ldr	r2, [pc, #480]	@ (80054e0 <HAL_SPI_Init+0x244>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d002      	beq.n	800530a <HAL_SPI_Init+0x6e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d811      	bhi.n	800532e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800530e:	4a72      	ldr	r2, [pc, #456]	@ (80054d8 <HAL_SPI_Init+0x23c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a70      	ldr	r2, [pc, #448]	@ (80054dc <HAL_SPI_Init+0x240>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_SPI_Init+0x8c>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a6f      	ldr	r2, [pc, #444]	@ (80054e0 <HAL_SPI_Init+0x244>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d104      	bne.n	8005332 <HAL_SPI_Init+0x96>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b10      	cmp	r3, #16
 800532c:	d901      	bls.n	8005332 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0cd      	b.n	80054ce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fb fd94 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800536e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005378:	d119      	bne.n	80053ae <HAL_SPI_Init+0x112>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005382:	d103      	bne.n	800538c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10c      	bne.n	80053ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800539c:	d107      	bne.n	80053ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <HAL_SPI_Init+0x13e>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d90b      	bls.n	80053da <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e007      	b.n	80053ea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	431a      	orrs	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	ea42 0103 	orr.w	r1, r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	431a      	orrs	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800544a:	ea42 0103 	orr.w	r1, r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d113      	bne.n	800548a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005474:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005488:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0201 	bic.w	r2, r2, #1
 8005498:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40013000 	.word	0x40013000
 80054dc:	40003800 	.word	0x40003800
 80054e0:	40003c00 	.word	0x40003c00

080054e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	3301      	adds	r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3307      	adds	r3, #7
 8005502:	08db      	lsrs	r3, r3, #3
 8005504:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	fb02 f303 	mul.w	r3, r2, r3
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e042      	b.n	80055b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fdb2 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	@ 0x24
 8005548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fd91 	bl	800608c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f826 	bl	80055bc <UART_SetConfig>
 8005570:	4603      	mov	r3, r0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e01b      	b.n	80055b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005588:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005598:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fe10 	bl	80061d0 <UART_CheckIdleState>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b092      	sub	sp, #72	@ 0x48
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	431a      	orrs	r2, r3
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4bbe      	ldr	r3, [pc, #760]	@ (80058e4 <UART_SetConfig+0x328>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4ab3      	ldr	r2, [pc, #716]	@ (80058e8 <UART_SetConfig+0x32c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005624:	4313      	orrs	r3, r2
 8005626:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	4baf      	ldr	r3, [pc, #700]	@ (80058ec <UART_SetConfig+0x330>)
 8005630:	4013      	ands	r3, r2
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005638:	430b      	orrs	r3, r1
 800563a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	f023 010f 	bic.w	r1, r3, #15
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4aa6      	ldr	r2, [pc, #664]	@ (80058f0 <UART_SetConfig+0x334>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d177      	bne.n	800574c <UART_SetConfig+0x190>
 800565c:	4ba5      	ldr	r3, [pc, #660]	@ (80058f4 <UART_SetConfig+0x338>)
 800565e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005660:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005664:	2b28      	cmp	r3, #40	@ 0x28
 8005666:	d86d      	bhi.n	8005744 <UART_SetConfig+0x188>
 8005668:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <UART_SetConfig+0xb4>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	08005715 	.word	0x08005715
 8005674:	08005745 	.word	0x08005745
 8005678:	08005745 	.word	0x08005745
 800567c:	08005745 	.word	0x08005745
 8005680:	08005745 	.word	0x08005745
 8005684:	08005745 	.word	0x08005745
 8005688:	08005745 	.word	0x08005745
 800568c:	08005745 	.word	0x08005745
 8005690:	0800571d 	.word	0x0800571d
 8005694:	08005745 	.word	0x08005745
 8005698:	08005745 	.word	0x08005745
 800569c:	08005745 	.word	0x08005745
 80056a0:	08005745 	.word	0x08005745
 80056a4:	08005745 	.word	0x08005745
 80056a8:	08005745 	.word	0x08005745
 80056ac:	08005745 	.word	0x08005745
 80056b0:	08005725 	.word	0x08005725
 80056b4:	08005745 	.word	0x08005745
 80056b8:	08005745 	.word	0x08005745
 80056bc:	08005745 	.word	0x08005745
 80056c0:	08005745 	.word	0x08005745
 80056c4:	08005745 	.word	0x08005745
 80056c8:	08005745 	.word	0x08005745
 80056cc:	08005745 	.word	0x08005745
 80056d0:	0800572d 	.word	0x0800572d
 80056d4:	08005745 	.word	0x08005745
 80056d8:	08005745 	.word	0x08005745
 80056dc:	08005745 	.word	0x08005745
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005745 	.word	0x08005745
 80056e8:	08005745 	.word	0x08005745
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005735 	.word	0x08005735
 80056f4:	08005745 	.word	0x08005745
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005745 	.word	0x08005745
 8005700:	08005745 	.word	0x08005745
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
 8005710:	0800573d 	.word	0x0800573d
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571a:	e222      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800571c:	2304      	movs	r3, #4
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e21e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005724:	2308      	movs	r3, #8
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e21a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800572c:	2310      	movs	r3, #16
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e216      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005734:	2320      	movs	r3, #32
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e212      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800573c:	2340      	movs	r3, #64	@ 0x40
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e20e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e20a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a69      	ldr	r2, [pc, #420]	@ (80058f8 <UART_SetConfig+0x33c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d130      	bne.n	80057b8 <UART_SetConfig+0x1fc>
 8005756:	4b67      	ldr	r3, [pc, #412]	@ (80058f4 <UART_SetConfig+0x338>)
 8005758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	2b05      	cmp	r3, #5
 8005760:	d826      	bhi.n	80057b0 <UART_SetConfig+0x1f4>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <UART_SetConfig+0x1ac>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005781 	.word	0x08005781
 800576c:	08005789 	.word	0x08005789
 8005770:	08005791 	.word	0x08005791
 8005774:	08005799 	.word	0x08005799
 8005778:	080057a1 	.word	0x080057a1
 800577c:	080057a9 	.word	0x080057a9
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e1ec      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e1e8      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e1e4      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e1e0      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e1dc      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e1d8      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e1d4      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a4f      	ldr	r2, [pc, #316]	@ (80058fc <UART_SetConfig+0x340>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d130      	bne.n	8005824 <UART_SetConfig+0x268>
 80057c2:	4b4c      	ldr	r3, [pc, #304]	@ (80058f4 <UART_SetConfig+0x338>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d826      	bhi.n	800581c <UART_SetConfig+0x260>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x218>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057f5 	.word	0x080057f5
 80057dc:	080057fd 	.word	0x080057fd
 80057e0:	08005805 	.word	0x08005805
 80057e4:	0800580d 	.word	0x0800580d
 80057e8:	08005815 	.word	0x08005815
 80057ec:	2300      	movs	r3, #0
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f2:	e1b6      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057f4:	2304      	movs	r3, #4
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fa:	e1b2      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80057fc:	2308      	movs	r3, #8
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005802:	e1ae      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005804:	2310      	movs	r3, #16
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800580a:	e1aa      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800580c:	2320      	movs	r3, #32
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005812:	e1a6      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e1a2      	b.n	8005b62 <UART_SetConfig+0x5a6>
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e19e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a35      	ldr	r2, [pc, #212]	@ (8005900 <UART_SetConfig+0x344>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d130      	bne.n	8005890 <UART_SetConfig+0x2d4>
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <UART_SetConfig+0x338>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b05      	cmp	r3, #5
 8005838:	d826      	bhi.n	8005888 <UART_SetConfig+0x2cc>
 800583a:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <UART_SetConfig+0x284>)
 800583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005840:	08005859 	.word	0x08005859
 8005844:	08005861 	.word	0x08005861
 8005848:	08005869 	.word	0x08005869
 800584c:	08005871 	.word	0x08005871
 8005850:	08005879 	.word	0x08005879
 8005854:	08005881 	.word	0x08005881
 8005858:	2300      	movs	r3, #0
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e180      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e17c      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e178      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e174      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005878:	2320      	movs	r3, #32
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e170      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005880:	2340      	movs	r3, #64	@ 0x40
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e16c      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005888:	2380      	movs	r3, #128	@ 0x80
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e168      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1b      	ldr	r2, [pc, #108]	@ (8005904 <UART_SetConfig+0x348>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d142      	bne.n	8005920 <UART_SetConfig+0x364>
 800589a:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <UART_SetConfig+0x338>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d838      	bhi.n	8005918 <UART_SetConfig+0x35c>
 80058a6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <UART_SetConfig+0x2f0>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	080058c5 	.word	0x080058c5
 80058b0:	080058cd 	.word	0x080058cd
 80058b4:	080058d5 	.word	0x080058d5
 80058b8:	080058dd 	.word	0x080058dd
 80058bc:	08005909 	.word	0x08005909
 80058c0:	08005911 	.word	0x08005911
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e14a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e146      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e142      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e2:	e13e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80058e4:	cfff69f3 	.word	0xcfff69f3
 80058e8:	58000c00 	.word	0x58000c00
 80058ec:	11fff4ff 	.word	0x11fff4ff
 80058f0:	40011000 	.word	0x40011000
 80058f4:	58024400 	.word	0x58024400
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	40005000 	.word	0x40005000
 8005908:	2320      	movs	r3, #32
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e128      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005910:	2340      	movs	r3, #64	@ 0x40
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e124      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e120      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4acb      	ldr	r2, [pc, #812]	@ (8005c54 <UART_SetConfig+0x698>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d176      	bne.n	8005a18 <UART_SetConfig+0x45c>
 800592a:	4bcb      	ldr	r3, [pc, #812]	@ (8005c58 <UART_SetConfig+0x69c>)
 800592c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005932:	2b28      	cmp	r3, #40	@ 0x28
 8005934:	d86c      	bhi.n	8005a10 <UART_SetConfig+0x454>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <UART_SetConfig+0x380>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	080059e1 	.word	0x080059e1
 8005940:	08005a11 	.word	0x08005a11
 8005944:	08005a11 	.word	0x08005a11
 8005948:	08005a11 	.word	0x08005a11
 800594c:	08005a11 	.word	0x08005a11
 8005950:	08005a11 	.word	0x08005a11
 8005954:	08005a11 	.word	0x08005a11
 8005958:	08005a11 	.word	0x08005a11
 800595c:	080059e9 	.word	0x080059e9
 8005960:	08005a11 	.word	0x08005a11
 8005964:	08005a11 	.word	0x08005a11
 8005968:	08005a11 	.word	0x08005a11
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a11 	.word	0x08005a11
 8005974:	08005a11 	.word	0x08005a11
 8005978:	08005a11 	.word	0x08005a11
 800597c:	080059f1 	.word	0x080059f1
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a11 	.word	0x08005a11
 8005988:	08005a11 	.word	0x08005a11
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a11 	.word	0x08005a11
 8005994:	08005a11 	.word	0x08005a11
 8005998:	08005a11 	.word	0x08005a11
 800599c:	080059f9 	.word	0x080059f9
 80059a0:	08005a11 	.word	0x08005a11
 80059a4:	08005a11 	.word	0x08005a11
 80059a8:	08005a11 	.word	0x08005a11
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005a11 	.word	0x08005a11
 80059b4:	08005a11 	.word	0x08005a11
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a01 	.word	0x08005a01
 80059c0:	08005a11 	.word	0x08005a11
 80059c4:	08005a11 	.word	0x08005a11
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a11 	.word	0x08005a11
 80059d0:	08005a11 	.word	0x08005a11
 80059d4:	08005a11 	.word	0x08005a11
 80059d8:	08005a11 	.word	0x08005a11
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e0bc      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80059e8:	2304      	movs	r3, #4
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e0b8      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80059f0:	2308      	movs	r3, #8
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e0b4      	b.n	8005b62 <UART_SetConfig+0x5a6>
 80059f8:	2310      	movs	r3, #16
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e0b0      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a00:	2320      	movs	r3, #32
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e0ac      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a08:	2340      	movs	r3, #64	@ 0x40
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e0a8      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a10:	2380      	movs	r3, #128	@ 0x80
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e0a4      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a8f      	ldr	r2, [pc, #572]	@ (8005c5c <UART_SetConfig+0x6a0>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d130      	bne.n	8005a84 <UART_SetConfig+0x4c8>
 8005a22:	4b8d      	ldr	r3, [pc, #564]	@ (8005c58 <UART_SetConfig+0x69c>)
 8005a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b05      	cmp	r3, #5
 8005a2c:	d826      	bhi.n	8005a7c <UART_SetConfig+0x4c0>
 8005a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a34 <UART_SetConfig+0x478>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a4d 	.word	0x08005a4d
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e086      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a54:	2304      	movs	r3, #4
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e082      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a62:	e07e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a64:	2310      	movs	r3, #16
 8005a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6a:	e07a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a72:	e076      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a74:	2340      	movs	r3, #64	@ 0x40
 8005a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7a:	e072      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a7c:	2380      	movs	r3, #128	@ 0x80
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e06e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a75      	ldr	r2, [pc, #468]	@ (8005c60 <UART_SetConfig+0x6a4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d130      	bne.n	8005af0 <UART_SetConfig+0x534>
 8005a8e:	4b72      	ldr	r3, [pc, #456]	@ (8005c58 <UART_SetConfig+0x69c>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d826      	bhi.n	8005ae8 <UART_SetConfig+0x52c>
 8005a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa0 <UART_SetConfig+0x4e4>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005ac1 	.word	0x08005ac1
 8005aa8:	08005ac9 	.word	0x08005ac9
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e050      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e04c      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ac8:	2308      	movs	r3, #8
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e048      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e044      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ad8:	2320      	movs	r3, #32
 8005ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ade:	e040      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ae0:	2340      	movs	r3, #64	@ 0x40
 8005ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae6:	e03c      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005ae8:	2380      	movs	r3, #128	@ 0x80
 8005aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aee:	e038      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5b      	ldr	r2, [pc, #364]	@ (8005c64 <UART_SetConfig+0x6a8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d130      	bne.n	8005b5c <UART_SetConfig+0x5a0>
 8005afa:	4b57      	ldr	r3, [pc, #348]	@ (8005c58 <UART_SetConfig+0x69c>)
 8005afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	2b05      	cmp	r3, #5
 8005b04:	d826      	bhi.n	8005b54 <UART_SetConfig+0x598>
 8005b06:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <UART_SetConfig+0x550>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b25 	.word	0x08005b25
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	08005b35 	.word	0x08005b35
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	2302      	movs	r3, #2
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e01a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e016      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b34:	2308      	movs	r3, #8
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e012      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e00e      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b44:	2320      	movs	r3, #32
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e00a      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b4c:	2340      	movs	r3, #64	@ 0x40
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e006      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5a:	e002      	b.n	8005b62 <UART_SetConfig+0x5a6>
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3f      	ldr	r2, [pc, #252]	@ (8005c64 <UART_SetConfig+0x6a8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	f040 80f8 	bne.w	8005d5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b72:	2b20      	cmp	r3, #32
 8005b74:	dc46      	bgt.n	8005c04 <UART_SetConfig+0x648>
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	f2c0 8082 	blt.w	8005c80 <UART_SetConfig+0x6c4>
 8005b7c:	3b02      	subs	r3, #2
 8005b7e:	2b1e      	cmp	r3, #30
 8005b80:	d87e      	bhi.n	8005c80 <UART_SetConfig+0x6c4>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <UART_SetConfig+0x5cc>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005c0b 	.word	0x08005c0b
 8005b8c:	08005c81 	.word	0x08005c81
 8005b90:	08005c13 	.word	0x08005c13
 8005b94:	08005c81 	.word	0x08005c81
 8005b98:	08005c81 	.word	0x08005c81
 8005b9c:	08005c81 	.word	0x08005c81
 8005ba0:	08005c23 	.word	0x08005c23
 8005ba4:	08005c81 	.word	0x08005c81
 8005ba8:	08005c81 	.word	0x08005c81
 8005bac:	08005c81 	.word	0x08005c81
 8005bb0:	08005c81 	.word	0x08005c81
 8005bb4:	08005c81 	.word	0x08005c81
 8005bb8:	08005c81 	.word	0x08005c81
 8005bbc:	08005c81 	.word	0x08005c81
 8005bc0:	08005c33 	.word	0x08005c33
 8005bc4:	08005c81 	.word	0x08005c81
 8005bc8:	08005c81 	.word	0x08005c81
 8005bcc:	08005c81 	.word	0x08005c81
 8005bd0:	08005c81 	.word	0x08005c81
 8005bd4:	08005c81 	.word	0x08005c81
 8005bd8:	08005c81 	.word	0x08005c81
 8005bdc:	08005c81 	.word	0x08005c81
 8005be0:	08005c81 	.word	0x08005c81
 8005be4:	08005c81 	.word	0x08005c81
 8005be8:	08005c81 	.word	0x08005c81
 8005bec:	08005c81 	.word	0x08005c81
 8005bf0:	08005c81 	.word	0x08005c81
 8005bf4:	08005c81 	.word	0x08005c81
 8005bf8:	08005c81 	.word	0x08005c81
 8005bfc:	08005c81 	.word	0x08005c81
 8005c00:	08005c73 	.word	0x08005c73
 8005c04:	2b40      	cmp	r3, #64	@ 0x40
 8005c06:	d037      	beq.n	8005c78 <UART_SetConfig+0x6bc>
 8005c08:	e03a      	b.n	8005c80 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c0a:	f7fe ff25 	bl	8004a58 <HAL_RCCEx_GetD3PCLK1Freq>
 8005c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c10:	e03c      	b.n	8005c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe ff34 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c20:	e034      	b.n	8005c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c22:	f107 0318 	add.w	r3, r7, #24
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff f880 	bl	8004d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c30:	e02c      	b.n	8005c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c32:	4b09      	ldr	r3, [pc, #36]	@ (8005c58 <UART_SetConfig+0x69c>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c3e:	4b06      	ldr	r3, [pc, #24]	@ (8005c58 <UART_SetConfig+0x69c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	08db      	lsrs	r3, r3, #3
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	4a07      	ldr	r2, [pc, #28]	@ (8005c68 <UART_SetConfig+0x6ac>)
 8005c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c50:	e01c      	b.n	8005c8c <UART_SetConfig+0x6d0>
 8005c52:	bf00      	nop
 8005c54:	40011400 	.word	0x40011400
 8005c58:	58024400 	.word	0x58024400
 8005c5c:	40007800 	.word	0x40007800
 8005c60:	40007c00 	.word	0x40007c00
 8005c64:	58000c00 	.word	0x58000c00
 8005c68:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ee4 <UART_SetConfig+0x928>)
 8005c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c70:	e00c      	b.n	8005c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c72:	4b9d      	ldr	r3, [pc, #628]	@ (8005ee8 <UART_SetConfig+0x92c>)
 8005c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c76:	e009      	b.n	8005c8c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c7e:	e005      	b.n	8005c8c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 81de 	beq.w	8006050 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	4a94      	ldr	r2, [pc, #592]	@ (8005eec <UART_SetConfig+0x930>)
 8005c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d305      	bcc.n	8005cc4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cca:	e1c1      	b.n	8006050 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cce:	2200      	movs	r2, #0
 8005cd0:	60bb      	str	r3, [r7, #8]
 8005cd2:	60fa      	str	r2, [r7, #12]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	4a84      	ldr	r2, [pc, #528]	@ (8005eec <UART_SetConfig+0x930>)
 8005cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005cee:	f7fa faf3 	bl	80002d8 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	f04f 0200 	mov.w	r2, #0
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	020b      	lsls	r3, r1, #8
 8005d04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d08:	0202      	lsls	r2, r0, #8
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	6849      	ldr	r1, [r1, #4]
 8005d0e:	0849      	lsrs	r1, r1, #1
 8005d10:	2000      	movs	r0, #0
 8005d12:	460c      	mov	r4, r1
 8005d14:	4605      	mov	r5, r0
 8005d16:	eb12 0804 	adds.w	r8, r2, r4
 8005d1a:	eb43 0905 	adc.w	r9, r3, r5
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	469a      	mov	sl, r3
 8005d26:	4693      	mov	fp, r2
 8005d28:	4652      	mov	r2, sl
 8005d2a:	465b      	mov	r3, fp
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	4649      	mov	r1, r9
 8005d30:	f7fa fad2 	bl	80002d8 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d42:	d308      	bcc.n	8005d56 <UART_SetConfig+0x79a>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4a:	d204      	bcs.n	8005d56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d52:	60da      	str	r2, [r3, #12]
 8005d54:	e17c      	b.n	8006050 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d5c:	e178      	b.n	8006050 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d66:	f040 80c5 	bne.w	8005ef4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005d6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	dc48      	bgt.n	8005e04 <UART_SetConfig+0x848>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	db7b      	blt.n	8005e6e <UART_SetConfig+0x8b2>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d879      	bhi.n	8005e6e <UART_SetConfig+0x8b2>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x7c4>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e0b 	.word	0x08005e0b
 8005d84:	08005e13 	.word	0x08005e13
 8005d88:	08005e6f 	.word	0x08005e6f
 8005d8c:	08005e6f 	.word	0x08005e6f
 8005d90:	08005e1b 	.word	0x08005e1b
 8005d94:	08005e6f 	.word	0x08005e6f
 8005d98:	08005e6f 	.word	0x08005e6f
 8005d9c:	08005e6f 	.word	0x08005e6f
 8005da0:	08005e2b 	.word	0x08005e2b
 8005da4:	08005e6f 	.word	0x08005e6f
 8005da8:	08005e6f 	.word	0x08005e6f
 8005dac:	08005e6f 	.word	0x08005e6f
 8005db0:	08005e6f 	.word	0x08005e6f
 8005db4:	08005e6f 	.word	0x08005e6f
 8005db8:	08005e6f 	.word	0x08005e6f
 8005dbc:	08005e6f 	.word	0x08005e6f
 8005dc0:	08005e3b 	.word	0x08005e3b
 8005dc4:	08005e6f 	.word	0x08005e6f
 8005dc8:	08005e6f 	.word	0x08005e6f
 8005dcc:	08005e6f 	.word	0x08005e6f
 8005dd0:	08005e6f 	.word	0x08005e6f
 8005dd4:	08005e6f 	.word	0x08005e6f
 8005dd8:	08005e6f 	.word	0x08005e6f
 8005ddc:	08005e6f 	.word	0x08005e6f
 8005de0:	08005e6f 	.word	0x08005e6f
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005e6f 	.word	0x08005e6f
 8005dec:	08005e6f 	.word	0x08005e6f
 8005df0:	08005e6f 	.word	0x08005e6f
 8005df4:	08005e6f 	.word	0x08005e6f
 8005df8:	08005e6f 	.word	0x08005e6f
 8005dfc:	08005e6f 	.word	0x08005e6f
 8005e00:	08005e61 	.word	0x08005e61
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d02e      	beq.n	8005e66 <UART_SetConfig+0x8aa>
 8005e08:	e031      	b.n	8005e6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fd fbef 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8005e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e10:	e033      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e12:	f7fd fc01 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8005e16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e18:	e02f      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fe30 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e28:	e027      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e2a:	f107 0318 	add.w	r3, r7, #24
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe ff7c 	bl	8004d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e38:	e01f      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef0 <UART_SetConfig+0x934>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d009      	beq.n	8005e5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e46:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef0 <UART_SetConfig+0x934>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	08db      	lsrs	r3, r3, #3
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	4a24      	ldr	r2, [pc, #144]	@ (8005ee4 <UART_SetConfig+0x928>)
 8005e52:	fa22 f303 	lsr.w	r3, r2, r3
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e58:	e00f      	b.n	8005e7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005e5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ee4 <UART_SetConfig+0x928>)
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5e:	e00c      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e60:	4b21      	ldr	r3, [pc, #132]	@ (8005ee8 <UART_SetConfig+0x92c>)
 8005e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e64:	e009      	b.n	8005e7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e005      	b.n	8005e7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80e7 	beq.w	8006050 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <UART_SetConfig+0x930>)
 8005e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e94:	005a      	lsls	r2, r3, #1
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	441a      	add	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	d916      	bls.n	8005edc <UART_SetConfig+0x920>
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d212      	bcs.n	8005edc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f023 030f 	bic.w	r3, r3, #15
 8005ebe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005ed8:	60da      	str	r2, [r3, #12]
 8005eda:	e0b9      	b.n	8006050 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ee2:	e0b5      	b.n	8006050 <UART_SetConfig+0xa94>
 8005ee4:	03d09000 	.word	0x03d09000
 8005ee8:	003d0900 	.word	0x003d0900
 8005eec:	08006754 	.word	0x08006754
 8005ef0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	dc49      	bgt.n	8005f90 <UART_SetConfig+0x9d4>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	db7c      	blt.n	8005ffa <UART_SetConfig+0xa3e>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d87a      	bhi.n	8005ffa <UART_SetConfig+0xa3e>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x950>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f97 	.word	0x08005f97
 8005f10:	08005f9f 	.word	0x08005f9f
 8005f14:	08005ffb 	.word	0x08005ffb
 8005f18:	08005ffb 	.word	0x08005ffb
 8005f1c:	08005fa7 	.word	0x08005fa7
 8005f20:	08005ffb 	.word	0x08005ffb
 8005f24:	08005ffb 	.word	0x08005ffb
 8005f28:	08005ffb 	.word	0x08005ffb
 8005f2c:	08005fb7 	.word	0x08005fb7
 8005f30:	08005ffb 	.word	0x08005ffb
 8005f34:	08005ffb 	.word	0x08005ffb
 8005f38:	08005ffb 	.word	0x08005ffb
 8005f3c:	08005ffb 	.word	0x08005ffb
 8005f40:	08005ffb 	.word	0x08005ffb
 8005f44:	08005ffb 	.word	0x08005ffb
 8005f48:	08005ffb 	.word	0x08005ffb
 8005f4c:	08005fc7 	.word	0x08005fc7
 8005f50:	08005ffb 	.word	0x08005ffb
 8005f54:	08005ffb 	.word	0x08005ffb
 8005f58:	08005ffb 	.word	0x08005ffb
 8005f5c:	08005ffb 	.word	0x08005ffb
 8005f60:	08005ffb 	.word	0x08005ffb
 8005f64:	08005ffb 	.word	0x08005ffb
 8005f68:	08005ffb 	.word	0x08005ffb
 8005f6c:	08005ffb 	.word	0x08005ffb
 8005f70:	08005ffb 	.word	0x08005ffb
 8005f74:	08005ffb 	.word	0x08005ffb
 8005f78:	08005ffb 	.word	0x08005ffb
 8005f7c:	08005ffb 	.word	0x08005ffb
 8005f80:	08005ffb 	.word	0x08005ffb
 8005f84:	08005ffb 	.word	0x08005ffb
 8005f88:	08005ffb 	.word	0x08005ffb
 8005f8c:	08005fed 	.word	0x08005fed
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d02e      	beq.n	8005ff2 <UART_SetConfig+0xa36>
 8005f94:	e031      	b.n	8005ffa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f96:	f7fd fb29 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8005f9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f9c:	e033      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f9e:	f7fd fb3b 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8005fa2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fa4:	e02f      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fd6a 	bl	8004a84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fb4:	e027      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb6:	f107 0318 	add.w	r3, r7, #24
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe feb6 	bl	8004d2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc4:	e01f      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800607c <UART_SetConfig+0xac0>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fd2:	4b2a      	ldr	r3, [pc, #168]	@ (800607c <UART_SetConfig+0xac0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	08db      	lsrs	r3, r3, #3
 8005fd8:	f003 0303 	and.w	r3, r3, #3
 8005fdc:	4a28      	ldr	r2, [pc, #160]	@ (8006080 <UART_SetConfig+0xac4>)
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fe4:	e00f      	b.n	8006006 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005fe6:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <UART_SetConfig+0xac4>)
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fea:	e00c      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fec:	4b25      	ldr	r3, [pc, #148]	@ (8006084 <UART_SetConfig+0xac8>)
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006004:	bf00      	nop
    }

    if (pclk != 0U)
 8006006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d021      	beq.n	8006050 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	4a1d      	ldr	r2, [pc, #116]	@ (8006088 <UART_SetConfig+0xacc>)
 8006012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006016:	461a      	mov	r2, r3
 8006018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601a:	fbb3 f2f2 	udiv	r2, r3, r2
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	441a      	add	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	fbb2 f3f3 	udiv	r3, r2, r3
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006032:	2b0f      	cmp	r3, #15
 8006034:	d909      	bls.n	800604a <UART_SetConfig+0xa8e>
 8006036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800603c:	d205      	bcs.n	800604a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800603e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006040:	b29a      	uxth	r2, r3
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60da      	str	r2, [r3, #12]
 8006048:	e002      	b.n	8006050 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2201      	movs	r2, #1
 8006054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2201      	movs	r2, #1
 800605c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2200      	movs	r2, #0
 8006064:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800606c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006070:	4618      	mov	r0, r3
 8006072:	3748      	adds	r7, #72	@ 0x48
 8006074:	46bd      	mov	sp, r7
 8006076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800607a:	bf00      	nop
 800607c:	58024400 	.word	0x58024400
 8006080:	03d09000 	.word	0x03d09000
 8006084:	003d0900 	.word	0x003d0900
 8006088:	08006754 	.word	0x08006754

0800608c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006098:	f003 0308 	and.w	r3, r3, #8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800618a:	d10a      	bne.n	80061a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b098      	sub	sp, #96	@ 0x60
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e0:	f7fb f948 	bl	8001474 <HAL_GetTick>
 80061e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d12f      	bne.n	8006254 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f88e 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d022      	beq.n	8006254 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800621c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006222:	653b      	str	r3, [r7, #80]	@ 0x50
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622c:	647b      	str	r3, [r7, #68]	@ 0x44
 800622e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006232:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800623a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e063      	b.n	800631c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d149      	bne.n	80062f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800626a:	2200      	movs	r2, #0
 800626c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f857 	bl	8006324 <UART_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d03c      	beq.n	80062f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	623b      	str	r3, [r7, #32]
   return(result);
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800629a:	633b      	str	r3, [r7, #48]	@ 0x30
 800629c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80062a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	69b9      	ldr	r1, [r7, #24]
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	e841 2300 	strex	r3, r2, [r1]
 80062da:	617b      	str	r3, [r7, #20]
   return(result);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1e5      	bne.n	80062ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e012      	b.n	800631c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2220      	movs	r2, #32
 80062fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3758      	adds	r7, #88	@ 0x58
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006334:	e04f      	b.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633c:	d04b      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633e:	f7fb f899 	bl	8001474 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	429a      	cmp	r2, r3
 800634c:	d302      	bcc.n	8006354 <UART_WaitOnFlagUntilTimeout+0x30>
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e04e      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d037      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b80      	cmp	r3, #128	@ 0x80
 800636a:	d034      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d031      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b08      	cmp	r3, #8
 800637e:	d110      	bne.n	80063a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f839 	bl	8006400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2208      	movs	r2, #8
 8006392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e029      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063b0:	d111      	bne.n	80063d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f81f 	bl	8006400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e00f      	b.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4013      	ands	r3, r2
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d0a0      	beq.n	8006336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006400:	b480      	push	{r7}
 8006402:	b095      	sub	sp, #84	@ 0x54
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800641c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006426:	643b      	str	r3, [r7, #64]	@ 0x40
 8006428:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800642c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e6      	bne.n	8006408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	61fb      	str	r3, [r7, #28]
   return(result);
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	4b1e      	ldr	r3, [pc, #120]	@ (80064c8 <UART_EndRxTransfer+0xc8>)
 800644e:	4013      	ands	r3, r2
 8006450:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3308      	adds	r3, #8
 8006458:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800645a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800645c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e5      	bne.n	800643a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006472:	2b01      	cmp	r3, #1
 8006474:	d118      	bne.n	80064a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60bb      	str	r3, [r7, #8]
   return(result);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	647b      	str	r3, [r7, #68]	@ 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	613b      	str	r3, [r7, #16]
   return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064bc:	bf00      	nop
 80064be:	3754      	adds	r7, #84	@ 0x54
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	effffffe 	.word	0xeffffffe

080064cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80064de:	2302      	movs	r3, #2
 80064e0:	e027      	b.n	8006532 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2224      	movs	r2, #36	@ 0x24
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006552:	2302      	movs	r3, #2
 8006554:	e02d      	b.n	80065b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2224      	movs	r2, #36	@ 0x24
 8006562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0201 	bic.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f850 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e02d      	b.n	800662e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2224      	movs	r2, #36	@ 0x24
 80065de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f812 	bl	8006638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006644:	2b00      	cmp	r3, #0
 8006646:	d108      	bne.n	800665a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006658:	e031      	b.n	80066be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665a:	2310      	movs	r3, #16
 800665c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800665e:	2310      	movs	r3, #16
 8006660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	0e5b      	lsrs	r3, r3, #25
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 0307 	and.w	r3, r3, #7
 8006670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	0f5b      	lsrs	r3, r3, #29
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006682:	7bbb      	ldrb	r3, [r7, #14]
 8006684:	7b3a      	ldrb	r2, [r7, #12]
 8006686:	4911      	ldr	r1, [pc, #68]	@ (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
 800668a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800668e:	7b3a      	ldrb	r2, [r7, #12]
 8006690:	490f      	ldr	r1, [pc, #60]	@ (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 8006692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006694:	fb93 f3f2 	sdiv	r3, r3, r2
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	7b7a      	ldrb	r2, [r7, #13]
 80066a4:	4909      	ldr	r1, [pc, #36]	@ (80066cc <UARTEx_SetNbDataToProcess+0x94>)
 80066a6:	5c8a      	ldrb	r2, [r1, r2]
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066ac:	7b7a      	ldrb	r2, [r7, #13]
 80066ae:	4908      	ldr	r1, [pc, #32]	@ (80066d0 <UARTEx_SetNbDataToProcess+0x98>)
 80066b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	0800676c 	.word	0x0800676c
 80066d0:	08006774 	.word	0x08006774

080066d4 <memset>:
 80066d4:	4402      	add	r2, r0
 80066d6:	4603      	mov	r3, r0
 80066d8:	4293      	cmp	r3, r2
 80066da:	d100      	bne.n	80066de <memset+0xa>
 80066dc:	4770      	bx	lr
 80066de:	f803 1b01 	strb.w	r1, [r3], #1
 80066e2:	e7f9      	b.n	80066d8 <memset+0x4>

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	@ (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 f818 	bl	800672c <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	08006784 	.word	0x08006784
 8006720:	08006784 	.word	0x08006784
 8006724:	08006784 	.word	0x08006784
 8006728:	08006788 	.word	0x08006788

0800672c <_init>:
 800672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672e:	bf00      	nop
 8006730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006732:	bc08      	pop	{r3}
 8006734:	469e      	mov	lr, r3
 8006736:	4770      	bx	lr

08006738 <_fini>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr
