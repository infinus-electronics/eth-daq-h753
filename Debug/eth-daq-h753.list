
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001894  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001b2c  08001b2c  00002b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b3c  08001b3c  00002b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08001b40  08001b40  00002b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08001b44  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001b54  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001b54  00003030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000066e2  00000000  00000000  0000303e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000010ba  00000000  00000000  00009720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005b8  00000000  00000000  0000a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000433  00000000  00000000  0000ad98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034853  00000000  00000000  0000b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000066a8  00000000  00000000  0003fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fce3  00000000  00000000  000460c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00195da9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000015a8  00000000  00000000  00195dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  00197394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001b14 	.word	0x08001b14

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001b14 	.word	0x08001b14

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 f901 	bl	80004e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80002e2:	4b35      	ldr	r3, [pc, #212]	@ (80003b8 <main+0xe0>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d11b      	bne.n	8000326 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ee:	f3bf 8f4f 	dsb	sy
}
 80002f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80002f4:	f3bf 8f6f 	isb	sy
}
 80002f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002fa:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <main+0xe0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000302:	f3bf 8f4f 	dsb	sy
}
 8000306:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000308:	f3bf 8f6f 	isb	sy
}
 800030c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <main+0xe0>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a29      	ldr	r2, [pc, #164]	@ (80003b8 <main+0xe0>)
 8000314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000318:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800031a:	f3bf 8f4f 	dsb	sy
}
 800031e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000320:	f3bf 8f6f 	isb	sy
}
 8000324:	e000      	b.n	8000328 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000326:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000328:	4b23      	ldr	r3, [pc, #140]	@ (80003b8 <main+0xe0>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000330:	2b00      	cmp	r3, #0
 8000332:	d138      	bne.n	80003a6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000334:	4b20      	ldr	r3, [pc, #128]	@ (80003b8 <main+0xe0>)
 8000336:	2200      	movs	r2, #0
 8000338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800033c:	f3bf 8f4f 	dsb	sy
}
 8000340:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000342:	4b1d      	ldr	r3, [pc, #116]	@ (80003b8 <main+0xe0>)
 8000344:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000348:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	0b5b      	lsrs	r3, r3, #13
 800034e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000352:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	08db      	lsrs	r3, r3, #3
 8000358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800035c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	015a      	lsls	r2, r3, #5
 8000362:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000366:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800036c:	4912      	ldr	r1, [pc, #72]	@ (80003b8 <main+0xe0>)
 800036e:	4313      	orrs	r3, r2
 8000370:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	1e5a      	subs	r2, r3, #1
 8000378:	607a      	str	r2, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1ef      	bne.n	800035e <main+0x86>
    } while(sets-- != 0U);
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	1e5a      	subs	r2, r3, #1
 8000382:	60ba      	str	r2, [r7, #8]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1e5      	bne.n	8000354 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000388:	f3bf 8f4f 	dsb	sy
}
 800038c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <main+0xe0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a09      	ldr	r2, [pc, #36]	@ (80003b8 <main+0xe0>)
 8000394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000398:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800039a:	f3bf 8f4f 	dsb	sy
}
 800039e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003a0:	f3bf 8f6f 	isb	sy
}
 80003a4:	e000      	b.n	80003a8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003a6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a8:	f000 f9ca 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f806 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 f87e 	bl	80004b0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <main+0xdc>
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	@ 0x70
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003c6:	224c      	movs	r2, #76	@ 0x4c
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fb76 	bl	8001abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2220      	movs	r2, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f001 fb70 	bl	8001abc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003dc:	2002      	movs	r0, #2
 80003de:	f000 fba9 	bl	8000b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003e2:	2300      	movs	r3, #0
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	4b30      	ldr	r3, [pc, #192]	@ (80004a8 <SystemClock_Config+0xec>)
 80003e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ea:	4a2f      	ldr	r2, [pc, #188]	@ (80004a8 <SystemClock_Config+0xec>)
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80003f2:	4b2d      	ldr	r3, [pc, #180]	@ (80004a8 <SystemClock_Config+0xec>)
 80003f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <SystemClock_Config+0xf0>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a2a      	ldr	r2, [pc, #168]	@ (80004ac <SystemClock_Config+0xf0>)
 8000402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <SystemClock_Config+0xf0>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000414:	bf00      	nop
 8000416:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <SystemClock_Config+0xf0>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800041e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000422:	d1f8      	bne.n	8000416 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000424:	2301      	movs	r3, #1
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000428:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800042c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042e:	2302      	movs	r3, #2
 8000430:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000432:	2302      	movs	r3, #2
 8000434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000436:	2302      	movs	r3, #2
 8000438:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800043a:	2340      	movs	r3, #64	@ 0x40
 800043c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800043e:	2302      	movs	r3, #2
 8000440:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000442:	2302      	movs	r3, #2
 8000444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000446:	2302      	movs	r3, #2
 8000448:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800044a:	230c      	movs	r3, #12
 800044c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800044e:	2300      	movs	r3, #0
 8000450:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800045a:	4618      	mov	r0, r3
 800045c:	f000 fba4 	bl	8000ba8 <HAL_RCC_OscConfig>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000466:	f000 f869 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046a:	233f      	movs	r3, #63	@ 0x3f
 800046c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046e:	2303      	movs	r3, #3
 8000470:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000476:	2308      	movs	r3, #8
 8000478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800047a:	2340      	movs	r3, #64	@ 0x40
 800047c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800047e:	2340      	movs	r3, #64	@ 0x40
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000488:	2340      	movs	r3, #64	@ 0x40
 800048a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2102      	movs	r1, #2
 8000490:	4618      	mov	r0, r3
 8000492:	f000 ffe3 	bl	800145c <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800049c:	f000 f84e 	bl	800053c <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3770      	adds	r7, #112	@ 0x70
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	58000400 	.word	0x58000400
 80004ac:	58024800 	.word	0x58024800

080004b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <MX_GPIO_Init+0x30>)
 80004b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004bc:	4a08      	ldr	r2, [pc, #32]	@ (80004e0 <MX_GPIO_Init+0x30>)
 80004be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_GPIO_Init+0x30>)
 80004c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	58024400 	.word	0x58024400

080004e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80004f6:	f000 faa5 	bl	8000a44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80004fa:	2301      	movs	r3, #1
 80004fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80004fe:	2300      	movs	r3, #0
 8000500:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000506:	231f      	movs	r3, #31
 8000508:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800050a:	2387      	movs	r3, #135	@ 0x87
 800050c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800050e:	2300      	movs	r3, #0
 8000510:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000512:	2300      	movs	r3, #0
 8000514:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000516:	2301      	movs	r3, #1
 8000518:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800051a:	2301      	movs	r3, #1
 800051c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000526:	463b      	mov	r3, r7
 8000528:	4618      	mov	r0, r3
 800052a:	f000 fac3 	bl	8000ab4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800052e:	2004      	movs	r0, #4
 8000530:	f000 faa0 	bl	8000a74 <HAL_MPU_Enable>

}
 8000534:	bf00      	nop
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_MspInit+0x30>)
 8000550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000554:	4a08      	ldr	r2, [pc, #32]	@ (8000578 <HAL_MspInit+0x30>)
 8000556:	f043 0302 	orr.w	r3, r3, #2
 800055a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800055e:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <HAL_MspInit+0x30>)
 8000560:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000564:	f003 0302 	and.w	r3, r3, #2
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	58024400 	.word	0x58024400

0800057c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <NMI_Handler+0x4>

08000584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <MemManage_Handler+0x4>

08000594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f927 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b37      	ldr	r3, [pc, #220]	@ (80006c0 <SystemInit+0xe4>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e6:	4a36      	ldr	r2, [pc, #216]	@ (80006c0 <SystemInit+0xe4>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <SystemInit+0xe8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <SystemInit+0xe8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <SystemInit+0xe8>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b2e      	ldr	r3, [pc, #184]	@ (80006c8 <SystemInit+0xec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a2d      	ldr	r2, [pc, #180]	@ (80006c8 <SystemInit+0xec>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <SystemInit+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2a      	ldr	r3, [pc, #168]	@ (80006c8 <SystemInit+0xec>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4929      	ldr	r1, [pc, #164]	@ (80006c8 <SystemInit+0xec>)
 8000624:	4b29      	ldr	r3, [pc, #164]	@ (80006cc <SystemInit+0xf0>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <SystemInit+0xe8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <SystemInit+0xe8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemInit+0xe8>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <SystemInit+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <SystemInit+0xec>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <SystemInit+0xec>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <SystemInit+0xec>)
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <SystemInit+0xf4>)
 800065c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <SystemInit+0xec>)
 8000660:	4a1c      	ldr	r2, [pc, #112]	@ (80006d4 <SystemInit+0xf8>)
 8000662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <SystemInit+0xec>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <SystemInit+0xfc>)
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <SystemInit+0xec>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <SystemInit+0xec>)
 8000672:	4a19      	ldr	r2, [pc, #100]	@ (80006d8 <SystemInit+0xfc>)
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <SystemInit+0xec>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <SystemInit+0xec>)
 800067e:	4a16      	ldr	r2, [pc, #88]	@ (80006d8 <SystemInit+0xfc>)
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <SystemInit+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <SystemInit+0xec>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <SystemInit+0xec>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <SystemInit+0xec>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <SystemInit+0x100>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <SystemInit+0x104>)
 80006a0:	4013      	ands	r3, r2
 80006a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006a6:	d202      	bcs.n	80006ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <SystemInit+0x108>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <SystemInit+0x10c>)
 80006b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	52002000 	.word	0x52002000
 80006c8:	58024400 	.word	0x58024400
 80006cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d0:	02020200 	.word	0x02020200
 80006d4:	01ff0000 	.word	0x01ff0000
 80006d8:	01010280 	.word	0x01010280
 80006dc:	5c001000 	.word	0x5c001000
 80006e0:	ffff0000 	.word	0xffff0000
 80006e4:	51008108 	.word	0x51008108
 80006e8:	52004000 	.word	0x52004000

080006ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000724 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f0:	f7ff ff74 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f001 f9d7 	bl	8001acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800071e:	f7ff fddb 	bl	80002d8 <main>
  bx  lr
 8000722:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000724:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000728:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800072c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000730:	08001b44 	.word	0x08001b44
  ldr r2, =_sbss
 8000734:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000738:	24000030 	.word	0x24000030

0800073c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC3_IRQHandler>
	...

08000740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000746:	2003      	movs	r0, #3
 8000748:	f000 f94a 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800074c:	f001 f83c 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8000750:	4602      	mov	r2, r0
 8000752:	4b15      	ldr	r3, [pc, #84]	@ (80007a8 <HAL_Init+0x68>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	0a1b      	lsrs	r3, r3, #8
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	4913      	ldr	r1, [pc, #76]	@ (80007ac <HAL_Init+0x6c>)
 800075e:	5ccb      	ldrb	r3, [r1, r3]
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	fa22 f303 	lsr.w	r3, r2, r3
 8000768:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_Init+0x68>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f003 030f 	and.w	r3, r3, #15
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <HAL_Init+0x6c>)
 8000774:	5cd3      	ldrb	r3, [r2, r3]
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	fa22 f303 	lsr.w	r3, r2, r3
 8000780:	4a0b      	ldr	r2, [pc, #44]	@ (80007b0 <HAL_Init+0x70>)
 8000782:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <HAL_Init+0x74>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800078a:	200f      	movs	r0, #15
 800078c:	f000 f814 	bl	80007b8 <HAL_InitTick>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e002      	b.n	80007a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800079a:	f7ff fed5 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58024400 	.word	0x58024400
 80007ac:	08001b2c 	.word	0x08001b2c
 80007b0:	24000004 	.word	0x24000004
 80007b4:	24000000 	.word	0x24000000

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007c0:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_InitTick+0x60>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e021      	b.n	8000810 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <HAL_InitTick+0x64>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f921 	bl	8000a2a <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00e      	b.n	8000810 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d80a      	bhi.n	800080e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f000 f8f9 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000804:	4a06      	ldr	r2, [pc, #24]	@ (8000820 <HAL_InitTick+0x68>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2400000c 	.word	0x2400000c
 800081c:	24000000 	.word	0x24000000
 8000820:	24000008 	.word	0x24000008

08000824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_IncTick+0x20>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <HAL_IncTick+0x24>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_IncTick+0x24>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2400000c 	.word	0x2400000c
 8000848:	2400002c 	.word	0x2400002c

0800084c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <HAL_GetTick+0x14>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	2400002c 	.word	0x2400002c

08000864 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_GetREVID+0x14>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	0c1b      	lsrs	r3, r3, #16
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	5c001000 	.word	0x5c001000

0800087c <__NVIC_SetPriorityGrouping>:
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <__NVIC_SetPriorityGrouping+0x40>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	4313      	orrs	r3, r2
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x40>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	05fa0000 	.word	0x05fa0000

080008c4 <__NVIC_GetPriorityGrouping>:
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_SetPriority>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	@ (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	@ (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	@ 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	@ 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff47 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff5e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffb2 	bl	800099c <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000a48:	f3bf 8f5f 	dmb	sy
}
 8000a4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_MPU_Disable+0x28>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a52:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_MPU_Disable+0x28>)
 8000a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a58:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_MPU_Disable+0x2c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	e000ed90 	.word	0xe000ed90

08000a74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <HAL_MPU_Enable+0x38>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_MPU_Enable+0x3c>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8a:	4a09      	ldr	r2, [pc, #36]	@ (8000ab0 <HAL_MPU_Enable+0x3c>)
 8000a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a90:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000a92:	f3bf 8f4f 	dsb	sy
}
 8000a96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a98:	f3bf 8f6f 	isb	sy
}
 8000a9c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed90 	.word	0xe000ed90
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	785a      	ldrb	r2, [r3, #1]
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ac2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_MPU_ConfigRegion+0x7c>)
 8000aca:	f023 0301 	bic.w	r3, r3, #1
 8000ace:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ad0:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <HAL_MPU_ConfigRegion+0x7c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	7b1b      	ldrb	r3, [r3, #12]
 8000adc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7adb      	ldrb	r3, [r3, #11]
 8000ae2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ae4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7a9b      	ldrb	r3, [r3, #10]
 8000aea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000aec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	7b5b      	ldrb	r3, [r3, #13]
 8000af2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000af4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	7b9b      	ldrb	r3, [r3, #14]
 8000afa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000afc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7bdb      	ldrb	r3, [r3, #15]
 8000b02:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000b04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7a5b      	ldrb	r3, [r3, #9]
 8000b0a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7a1b      	ldrb	r3, [r3, #8]
 8000b12:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000b14:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000b1e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b20:	6113      	str	r3, [r2, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed90 	.word	0xe000ed90

08000b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	d00a      	beq.n	8000b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d001      	beq.n	8000b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e01f      	b.n	8000b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e01d      	b.n	8000b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	f023 0207 	bic.w	r2, r3, #7
 8000b66:	490f      	ldr	r1, [pc, #60]	@ (8000ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000b6e:	f7ff fe6d 	bl	800084c <HAL_GetTick>
 8000b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b74:	e009      	b.n	8000b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000b76:	f7ff fe69 	bl	800084c <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b84:	d901      	bls.n	8000b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e007      	b.n	8000b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b96:	d1ee      	bne.n	8000b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58024800 	.word	0x58024800

08000ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f000 bc48 	b.w	800144c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 8088 	beq.w	8000cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bca:	4b99      	ldr	r3, [pc, #612]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000bd4:	4b96      	ldr	r3, [pc, #600]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bdc:	2b10      	cmp	r3, #16
 8000bde:	d007      	beq.n	8000bf0 <HAL_RCC_OscConfig+0x48>
 8000be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be2:	2b18      	cmp	r3, #24
 8000be4:	d111      	bne.n	8000c0a <HAL_RCC_OscConfig+0x62>
 8000be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d10c      	bne.n	8000c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d06d      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x130>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d169      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f000 bc21 	b.w	800144c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c12:	d106      	bne.n	8000c22 <HAL_RCC_OscConfig+0x7a>
 8000c14:	4b86      	ldr	r3, [pc, #536]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a85      	ldr	r2, [pc, #532]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e02e      	b.n	8000c80 <HAL_RCC_OscConfig+0xd8>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <HAL_RCC_OscConfig+0x9c>
 8000c2a:	4b81      	ldr	r3, [pc, #516]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a80      	ldr	r2, [pc, #512]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b7e      	ldr	r3, [pc, #504]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e01d      	b.n	8000c80 <HAL_RCC_OscConfig+0xd8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c4c:	d10c      	bne.n	8000c68 <HAL_RCC_OscConfig+0xc0>
 8000c4e:	4b78      	ldr	r3, [pc, #480]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a77      	ldr	r2, [pc, #476]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b75      	ldr	r3, [pc, #468]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a74      	ldr	r2, [pc, #464]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e00b      	b.n	8000c80 <HAL_RCC_OscConfig+0xd8>
 8000c68:	4b71      	ldr	r3, [pc, #452]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a70      	ldr	r2, [pc, #448]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b6e      	ldr	r3, [pc, #440]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a6d      	ldr	r2, [pc, #436]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d013      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c88:	f7ff fde0 	bl	800084c <HAL_GetTick>
 8000c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c90:	f7ff fddc 	bl	800084c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b64      	cmp	r3, #100	@ 0x64
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e3d4      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ca2:	4b63      	ldr	r3, [pc, #396]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0xe8>
 8000cae:	e014      	b.n	8000cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb0:	f7ff fdcc 	bl	800084c <HAL_GetTick>
 8000cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cb6:	e008      	b.n	8000cca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb8:	f7ff fdc8 	bl	800084c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	2b64      	cmp	r3, #100	@ 0x64
 8000cc4:	d901      	bls.n	8000cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e3c0      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000cca:	4b59      	ldr	r3, [pc, #356]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f0      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x110>
 8000cd6:	e000      	b.n	8000cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80ca 	beq.w	8000e7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ce8:	4b51      	ldr	r3, [pc, #324]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000cf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000cf8:	6a3b      	ldr	r3, [r7, #32]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d007      	beq.n	8000d0e <HAL_RCC_OscConfig+0x166>
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2b18      	cmp	r3, #24
 8000d02:	d156      	bne.n	8000db2 <HAL_RCC_OscConfig+0x20a>
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d151      	bne.n	8000db2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d0e:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <HAL_RCC_OscConfig+0x17e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e392      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000d26:	4b42      	ldr	r3, [pc, #264]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 0219 	bic.w	r2, r3, #25
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	493f      	ldr	r1, [pc, #252]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d38:	f7ff fd88 	bl	800084c <HAL_GetTick>
 8000d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fd84 	bl	800084c <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e37c      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f0      	beq.n	8000d40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5e:	f7ff fd81 	bl	8000864 <HAL_GetREVID>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d817      	bhi.n	8000d9c <HAL_RCC_OscConfig+0x1f4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	2b40      	cmp	r3, #64	@ 0x40
 8000d72:	d108      	bne.n	8000d86 <HAL_RCC_OscConfig+0x1de>
 8000d74:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d84:	e07a      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	031b      	lsls	r3, r3, #12
 8000d94:	4926      	ldr	r1, [pc, #152]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d96:	4313      	orrs	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d9a:	e06f      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	061b      	lsls	r3, r3, #24
 8000daa:	4921      	ldr	r1, [pc, #132]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000db0:	e064      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d047      	beq.n	8000e4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000dba:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 0219 	bic.w	r2, r3, #25
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	491a      	ldr	r1, [pc, #104]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fd3e 	bl	800084c <HAL_GetTick>
 8000dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fd3a 	bl	800084c <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e332      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df2:	f7ff fd37 	bl	8000864 <HAL_GetREVID>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d819      	bhi.n	8000e34 <HAL_RCC_OscConfig+0x28c>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	2b40      	cmp	r3, #64	@ 0x40
 8000e06:	d108      	bne.n	8000e1a <HAL_RCC_OscConfig+0x272>
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e16:	6053      	str	r3, [r2, #4]
 8000e18:	e030      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	031b      	lsls	r3, r3, #12
 8000e28:	4901      	ldr	r1, [pc, #4]	@ (8000e30 <HAL_RCC_OscConfig+0x288>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]
 8000e2e:	e025      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
 8000e30:	58024400 	.word	0x58024400
 8000e34:	4b9a      	ldr	r3, [pc, #616]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	061b      	lsls	r3, r3, #24
 8000e42:	4997      	ldr	r1, [pc, #604]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	e018      	b.n	8000e7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e4a:	4b95      	ldr	r3, [pc, #596]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a94      	ldr	r2, [pc, #592]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e56:	f7ff fcf9 	bl	800084c <HAL_GetTick>
 8000e5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fcf5 	bl	800084c <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e2ed      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e70:	4b8b      	ldr	r3, [pc, #556]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80a9 	beq.w	8000fdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8a:	4b85      	ldr	r3, [pc, #532]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000e92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e94:	4b82      	ldr	r3, [pc, #520]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d007      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x308>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b18      	cmp	r3, #24
 8000ea4:	d13a      	bne.n	8000f1c <HAL_RCC_OscConfig+0x374>
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d135      	bne.n	8000f1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x320>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	2b80      	cmp	r3, #128	@ 0x80
 8000ec2:	d001      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e2c1      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ec8:	f7ff fccc 	bl	8000864 <HAL_GetREVID>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d817      	bhi.n	8000f06 <HAL_RCC_OscConfig+0x35e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	d108      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x348>
 8000ede:	4b70      	ldr	r3, [pc, #448]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000eec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000eee:	e075      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	069b      	lsls	r3, r3, #26
 8000efe:	4968      	ldr	r1, [pc, #416]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f04:	e06a      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f06:	4b66      	ldr	r3, [pc, #408]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	061b      	lsls	r3, r3, #24
 8000f14:	4962      	ldr	r1, [pc, #392]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000f1a:	e05f      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d042      	beq.n	8000faa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000f24:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a5d      	ldr	r2, [pc, #372]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc8c 	bl	800084c <HAL_GetTick>
 8000f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc88 	bl	800084c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e280      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000f4a:	4b55      	ldr	r3, [pc, #340]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000f56:	f7ff fc85 	bl	8000864 <HAL_GetREVID>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d817      	bhi.n	8000f94 <HAL_RCC_OscConfig+0x3ec>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	2b20      	cmp	r3, #32
 8000f6a:	d108      	bne.n	8000f7e <HAL_RCC_OscConfig+0x3d6>
 8000f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8000f74:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f7a:	6053      	str	r3, [r2, #4]
 8000f7c:	e02e      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
 8000f7e:	4b48      	ldr	r3, [pc, #288]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	069b      	lsls	r3, r3, #26
 8000f8c:	4944      	ldr	r1, [pc, #272]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
 8000f92:	e023      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
 8000f94:	4b42      	ldr	r3, [pc, #264]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	493f      	ldr	r1, [pc, #252]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60cb      	str	r3, [r1, #12]
 8000fa8:	e018      	b.n	8000fdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a3c      	ldr	r2, [pc, #240]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fc49 	bl	800084c <HAL_GetTick>
 8000fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fc45 	bl	800084c <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e23d      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000fd0:	4b33      	ldr	r3, [pc, #204]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d036      	beq.n	8001056 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d019      	beq.n	8001024 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffc:	f7ff fc26 	bl	800084c <HAL_GetTick>
 8001000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001004:	f7ff fc22 	bl	800084c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e21a      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001016:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8001018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x45c>
 8001022:	e018      	b.n	8001056 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8001026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001028:	4a1d      	ldr	r2, [pc, #116]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001030:	f7ff fc0c 	bl	800084c <HAL_GetTick>
 8001034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001038:	f7ff fc08 	bl	800084c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b02      	cmp	r3, #2
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e200      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	2b00      	cmp	r3, #0
 8001060:	d039      	beq.n	80010d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d01c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001074:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001076:	f7ff fbe9 	bl	800084c <HAL_GetTick>
 800107a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800107e:	f7ff fbe5 	bl	800084c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1dd      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f0      	beq.n	800107e <HAL_RCC_OscConfig+0x4d6>
 800109c:	e01b      	b.n	80010d6 <HAL_RCC_OscConfig+0x52e>
 800109e:	bf00      	nop
 80010a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80010a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a9a      	ldr	r2, [pc, #616]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80010aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80010b0:	f7ff fbcc 	bl	800084c <HAL_GetTick>
 80010b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010b8:	f7ff fbc8 	bl	800084c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e1c0      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010ca:	4b92      	ldr	r3, [pc, #584]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8081 	beq.w	80011e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80010e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001318 <HAL_RCC_OscConfig+0x770>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001318 <HAL_RCC_OscConfig+0x770>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80010f0:	f7ff fbac 	bl	800084c <HAL_GetTick>
 80010f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f8:	f7ff fba8 	bl	800084c <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	@ 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e1a0      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800110a:	4b83      	ldr	r3, [pc, #524]	@ (8001318 <HAL_RCC_OscConfig+0x770>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d106      	bne.n	800112c <HAL_RCC_OscConfig+0x584>
 800111e:	4b7d      	ldr	r3, [pc, #500]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001122:	4a7c      	ldr	r2, [pc, #496]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6713      	str	r3, [r2, #112]	@ 0x70
 800112a:	e02d      	b.n	8001188 <HAL_RCC_OscConfig+0x5e0>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10c      	bne.n	800114e <HAL_RCC_OscConfig+0x5a6>
 8001134:	4b77      	ldr	r3, [pc, #476]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001138:	4a76      	ldr	r2, [pc, #472]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001140:	4b74      	ldr	r3, [pc, #464]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001144:	4a73      	ldr	r2, [pc, #460]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001146:	f023 0304 	bic.w	r3, r3, #4
 800114a:	6713      	str	r3, [r2, #112]	@ 0x70
 800114c:	e01c      	b.n	8001188 <HAL_RCC_OscConfig+0x5e0>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c8>
 8001156:	4b6f      	ldr	r3, [pc, #444]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800115a:	4a6e      	ldr	r2, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6713      	str	r3, [r2, #112]	@ 0x70
 8001162:	4b6c      	ldr	r3, [pc, #432]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001166:	4a6b      	ldr	r2, [pc, #428]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6713      	str	r3, [r2, #112]	@ 0x70
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0x5e0>
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001174:	4a67      	ldr	r2, [pc, #412]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001176:	f023 0301 	bic.w	r3, r3, #1
 800117a:	6713      	str	r3, [r2, #112]	@ 0x70
 800117c:	4b65      	ldr	r3, [pc, #404]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800117e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001180:	4a64      	ldr	r2, [pc, #400]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001182:	f023 0304 	bic.w	r3, r3, #4
 8001186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d015      	beq.n	80011bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001190:	f7ff fb5c 	bl	800084c <HAL_GetTick>
 8001194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001196:	e00a      	b.n	80011ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001198:	f7ff fb58 	bl	800084c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e14e      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80011ae:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0ee      	beq.n	8001198 <HAL_RCC_OscConfig+0x5f0>
 80011ba:	e014      	b.n	80011e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011bc:	f7ff fb46 	bl	800084c <HAL_GetTick>
 80011c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011c2:	e00a      	b.n	80011da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fb42 	bl	800084c <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e138      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80011da:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80011dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ee      	bne.n	80011c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 812d 	beq.w	800144a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80011f0:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011f8:	2b18      	cmp	r3, #24
 80011fa:	f000 80bd 	beq.w	8001378 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	2b02      	cmp	r3, #2
 8001204:	f040 809e 	bne.w	8001344 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a41      	ldr	r2, [pc, #260]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800120e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fb1a 	bl	800084c <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fb16 	bl	800084c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e10e      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800122e:	4b39      	ldr	r3, [pc, #228]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800123a:	4b36      	ldr	r3, [pc, #216]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800123c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800123e:	4b37      	ldr	r3, [pc, #220]	@ (800131c <HAL_RCC_OscConfig+0x774>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	430a      	orrs	r2, r1
 800124e:	4931      	ldr	r1, [pc, #196]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001250:	4313      	orrs	r3, r2
 8001252:	628b      	str	r3, [r1, #40]	@ 0x28
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	3b01      	subs	r3, #1
 800125a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	3b01      	subs	r3, #1
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	b29b      	uxth	r3, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126e:	3b01      	subs	r3, #1
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800127c:	3b01      	subs	r3, #1
 800127e:	061b      	lsls	r3, r3, #24
 8001280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001284:	4923      	ldr	r1, [pc, #140]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001286:	4313      	orrs	r3, r2
 8001288:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800128a:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 800128c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <HAL_RCC_OscConfig+0x778>)
 800129c:	4013      	ands	r3, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012a2:	00d2      	lsls	r2, r2, #3
 80012a4:	491b      	ldr	r1, [pc, #108]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	f023 020c 	bic.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4917      	ldr	r1, [pc, #92]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c0:	f023 0202 	bic.w	r2, r3, #2
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c8:	4912      	ldr	r1, [pc, #72]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	4a07      	ldr	r2, [pc, #28]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a04      	ldr	r2, [pc, #16]	@ (8001314 <HAL_RCC_OscConfig+0x76c>)
 8001304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130a:	f7ff fa9f 	bl	800084c <HAL_GetTick>
 800130e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001310:	e011      	b.n	8001336 <HAL_RCC_OscConfig+0x78e>
 8001312:	bf00      	nop
 8001314:	58024400 	.word	0x58024400
 8001318:	58024800 	.word	0x58024800
 800131c:	fffffc0c 	.word	0xfffffc0c
 8001320:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fa92 	bl	800084c <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e08a      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001336:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x77c>
 8001342:	e082      	b.n	800144a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b43      	ldr	r3, [pc, #268]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a42      	ldr	r2, [pc, #264]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800134a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fa7c 	bl	800084c <HAL_GetTick>
 8001354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fa78 	bl	800084c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e070      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800136a:	4b3a      	ldr	r3, [pc, #232]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x7b0>
 8001376:	e068      	b.n	800144a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001378:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800137a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800137e:	4b35      	ldr	r3, [pc, #212]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	2b01      	cmp	r3, #1
 800138a:	d031      	beq.n	80013f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0203 	and.w	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d12a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d122      	bne.n	80013f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d11a      	bne.n	80013f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	0a5b      	lsrs	r3, r3, #9
 80013be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d111      	bne.n	80013f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d108      	bne.n	80013f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	0e1b      	lsrs	r3, r3, #24
 80013e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e02b      	b.n	800144c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80013fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	429a      	cmp	r2, r3
 8001408:	d01f      	beq.n	800144a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800140c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001416:	f7ff fa19 	bl	800084c <HAL_GetTick>
 800141a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800141c:	bf00      	nop
 800141e:	f7ff fa15 	bl	800084c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	4293      	cmp	r3, r2
 8001428:	d0f9      	beq.n	800141e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800142c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_RCC_OscConfig+0x8b0>)
 8001430:	4013      	ands	r3, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001436:	00d2      	lsls	r2, r2, #3
 8001438:	4906      	ldr	r1, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 800143a:	4313      	orrs	r3, r2
 800143c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800143e:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <HAL_RCC_OscConfig+0x8ac>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3730      	adds	r7, #48	@ 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	ffff0007 	.word	0xffff0007

0800145c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e19c      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b8a      	ldr	r3, [pc, #552]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b87      	ldr	r3, [pc, #540]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 020f 	bic.w	r2, r3, #15
 8001486:	4985      	ldr	r1, [pc, #532]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b83      	ldr	r3, [pc, #524]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e184      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d010      	beq.n	80014ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	4b7b      	ldr	r3, [pc, #492]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d908      	bls.n	80014ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80014bc:	4b78      	ldr	r3, [pc, #480]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4975      	ldr	r1, [pc, #468]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d010      	beq.n	80014fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	4b70      	ldr	r3, [pc, #448]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80014ea:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	496a      	ldr	r1, [pc, #424]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	d010      	beq.n	800152a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	4b64      	ldr	r3, [pc, #400]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001514:	429a      	cmp	r2, r3
 8001516:	d908      	bls.n	800152a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001518:	4b61      	ldr	r3, [pc, #388]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	495e      	ldr	r1, [pc, #376]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001526:	4313      	orrs	r3, r2
 8001528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	2b00      	cmp	r3, #0
 8001534:	d010      	beq.n	8001558 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001542:	429a      	cmp	r2, r3
 8001544:	d908      	bls.n	8001558 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001546:	4b56      	ldr	r3, [pc, #344]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4953      	ldr	r1, [pc, #332]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001554:	4313      	orrs	r3, r2
 8001556:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d010      	beq.n	8001586 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	4b4d      	ldr	r3, [pc, #308]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	429a      	cmp	r2, r3
 8001572:	d908      	bls.n	8001586 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f023 020f 	bic.w	r2, r3, #15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4947      	ldr	r1, [pc, #284]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001582:	4313      	orrs	r3, r2
 8001584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d055      	beq.n	800163e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001592:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4940      	ldr	r1, [pc, #256]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ac:	4b3c      	ldr	r3, [pc, #240]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d121      	bne.n	80015fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0f6      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d115      	bne.n	80015fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0ea      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0de      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0d6      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f023 0207 	bic.w	r2, r3, #7
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4925      	ldr	r1, [pc, #148]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800160a:	4313      	orrs	r3, r2
 800160c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800160e:	f7ff f91d 	bl	800084c <HAL_GetTick>
 8001612:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001614:	e00a      	b.n	800162c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f919 	bl	800084c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0be      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162c:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	429a      	cmp	r2, r3
 800163c:	d1eb      	bne.n	8001616 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	429a      	cmp	r2, r3
 8001658:	d208      	bcs.n	800166c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f023 020f 	bic.w	r2, r3, #15
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	490e      	ldr	r1, [pc, #56]	@ (80016a0 <HAL_RCC_ClockConfig+0x244>)
 8001668:	4313      	orrs	r3, r2
 800166a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d214      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 020f 	bic.w	r2, r3, #15
 8001682:	4906      	ldr	r1, [pc, #24]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b04      	ldr	r3, [pc, #16]	@ (800169c <HAL_RCC_ClockConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e086      	b.n	80017aa <HAL_RCC_ClockConfig+0x34e>
 800169c:	52002000 	.word	0x52002000
 80016a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d010      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016bc:	429a      	cmp	r2, r3
 80016be:	d208      	bcs.n	80016d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80016c0:	4b3c      	ldr	r3, [pc, #240]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	4939      	ldr	r1, [pc, #228]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d010      	beq.n	8001700 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d208      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016ee:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	492e      	ldr	r1, [pc, #184]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d010      	beq.n	800172e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699a      	ldr	r2, [r3, #24]
 8001710:	4b28      	ldr	r3, [pc, #160]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001718:	429a      	cmp	r2, r3
 800171a:	d208      	bcs.n	800172e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4922      	ldr	r1, [pc, #136]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 800172a:	4313      	orrs	r3, r2
 800172c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0320 	and.w	r3, r3, #32
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	4b1d      	ldr	r3, [pc, #116]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001746:	429a      	cmp	r2, r3
 8001748:	d208      	bcs.n	800175c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800174a:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4917      	ldr	r1, [pc, #92]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 8001758:	4313      	orrs	r3, r2
 800175a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800175c:	f000 f834 	bl	80017c8 <HAL_RCC_GetSysClockFreq>
 8001760:	4602      	mov	r2, r0
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	4912      	ldr	r1, [pc, #72]	@ (80017b8 <HAL_RCC_ClockConfig+0x35c>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_RCC_ClockConfig+0x358>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	4a0d      	ldr	r2, [pc, #52]	@ (80017b8 <HAL_RCC_ClockConfig+0x35c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	4a0a      	ldr	r2, [pc, #40]	@ (80017bc <HAL_RCC_ClockConfig+0x360>)
 8001792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_RCC_ClockConfig+0x364>)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_RCC_ClockConfig+0x368>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f80a 	bl	80007b8 <HAL_InitTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	58024400 	.word	0x58024400
 80017b8:	08001b2c 	.word	0x08001b2c
 80017bc:	24000004 	.word	0x24000004
 80017c0:	24000000 	.word	0x24000000
 80017c4:	24000008 	.word	0x24000008

080017c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ce:	4bb3      	ldr	r3, [pc, #716]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	f200 8155 	bhi.w	8001a86 <HAL_RCC_GetSysClockFreq+0x2be>
 80017dc:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	08001849 	.word	0x08001849
 80017e8:	08001a87 	.word	0x08001a87
 80017ec:	08001a87 	.word	0x08001a87
 80017f0:	08001a87 	.word	0x08001a87
 80017f4:	08001a87 	.word	0x08001a87
 80017f8:	08001a87 	.word	0x08001a87
 80017fc:	08001a87 	.word	0x08001a87
 8001800:	08001a87 	.word	0x08001a87
 8001804:	0800186f 	.word	0x0800186f
 8001808:	08001a87 	.word	0x08001a87
 800180c:	08001a87 	.word	0x08001a87
 8001810:	08001a87 	.word	0x08001a87
 8001814:	08001a87 	.word	0x08001a87
 8001818:	08001a87 	.word	0x08001a87
 800181c:	08001a87 	.word	0x08001a87
 8001820:	08001a87 	.word	0x08001a87
 8001824:	08001875 	.word	0x08001875
 8001828:	08001a87 	.word	0x08001a87
 800182c:	08001a87 	.word	0x08001a87
 8001830:	08001a87 	.word	0x08001a87
 8001834:	08001a87 	.word	0x08001a87
 8001838:	08001a87 	.word	0x08001a87
 800183c:	08001a87 	.word	0x08001a87
 8001840:	08001a87 	.word	0x08001a87
 8001844:	0800187b 	.word	0x0800187b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001848:	4b94      	ldr	r3, [pc, #592]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001854:	4b91      	ldr	r3, [pc, #580]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	4a90      	ldr	r2, [pc, #576]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001866:	e111      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001868:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800186a:	61bb      	str	r3, [r7, #24]
      break;
 800186c:	e10e      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800186e:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001870:	61bb      	str	r3, [r7, #24]
      break;
 8001872:	e10b      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001874:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001876:	61bb      	str	r3, [r7, #24]
      break;
 8001878:	e108      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800187a:	4b88      	ldr	r3, [pc, #544]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001884:	4b85      	ldr	r3, [pc, #532]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800188e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001890:	4b82      	ldr	r3, [pc, #520]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800189a:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800189c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189e:	08db      	lsrs	r3, r3, #3
 80018a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80e1 	beq.w	8001a80 <HAL_RCC_GetSysClockFreq+0x2b8>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	f000 8083 	beq.w	80019cc <HAL_RCC_GetSysClockFreq+0x204>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	f200 80a1 	bhi.w	8001a10 <HAL_RCC_GetSysClockFreq+0x248>
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_RCC_GetSysClockFreq+0x114>
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d056      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x1c0>
 80018da:	e099      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80018dc:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d02d      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80018e8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001912:	4b62      	ldr	r3, [pc, #392]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001922:	ed97 6a02 	vldr	s12, [r7, #8]
 8001926:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800192a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800192e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001942:	e087      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001ab0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001956:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001966:	ed97 6a02 	vldr	s12, [r7, #8]
 800196a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800196e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800197a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001986:	e065      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001992:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800199a:	4b40      	ldr	r3, [pc, #256]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80019ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80019b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80019ca:	e043      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001ab8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80019da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019de:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80019f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80019f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a0e:	e021      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001aac <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001a52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	0a5b      	lsrs	r3, r3, #9
 8001a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a5e:	3301      	adds	r3, #1
 8001a60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001a7e:	e005      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
      break;
 8001a84:	e002      	b.n	8001a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001a86:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001a88:	61bb      	str	r3, [r7, #24]
      break;
 8001a8a:	bf00      	nop
  }

  return sysclockfreq;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	58024400 	.word	0x58024400
 8001aa0:	03d09000 	.word	0x03d09000
 8001aa4:	003d0900 	.word	0x003d0900
 8001aa8:	017d7840 	.word	0x017d7840
 8001aac:	46000000 	.word	0x46000000
 8001ab0:	4c742400 	.word	0x4c742400
 8001ab4:	4a742400 	.word	0x4a742400
 8001ab8:	4bbebc20 	.word	0x4bbebc20

08001abc <memset>:
 8001abc:	4402      	add	r2, r0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <memset+0xa>
 8001ac4:	4770      	bx	lr
 8001ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8001aca:	e7f9      	b.n	8001ac0 <memset+0x4>

08001acc <__libc_init_array>:
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	4d0d      	ldr	r5, [pc, #52]	@ (8001b04 <__libc_init_array+0x38>)
 8001ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8001b08 <__libc_init_array+0x3c>)
 8001ad2:	1b64      	subs	r4, r4, r5
 8001ad4:	10a4      	asrs	r4, r4, #2
 8001ad6:	2600      	movs	r6, #0
 8001ad8:	42a6      	cmp	r6, r4
 8001ada:	d109      	bne.n	8001af0 <__libc_init_array+0x24>
 8001adc:	4d0b      	ldr	r5, [pc, #44]	@ (8001b0c <__libc_init_array+0x40>)
 8001ade:	4c0c      	ldr	r4, [pc, #48]	@ (8001b10 <__libc_init_array+0x44>)
 8001ae0:	f000 f818 	bl	8001b14 <_init>
 8001ae4:	1b64      	subs	r4, r4, r5
 8001ae6:	10a4      	asrs	r4, r4, #2
 8001ae8:	2600      	movs	r6, #0
 8001aea:	42a6      	cmp	r6, r4
 8001aec:	d105      	bne.n	8001afa <__libc_init_array+0x2e>
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
 8001af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001af4:	4798      	blx	r3
 8001af6:	3601      	adds	r6, #1
 8001af8:	e7ee      	b.n	8001ad8 <__libc_init_array+0xc>
 8001afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001afe:	4798      	blx	r3
 8001b00:	3601      	adds	r6, #1
 8001b02:	e7f2      	b.n	8001aea <__libc_init_array+0x1e>
 8001b04:	08001b3c 	.word	0x08001b3c
 8001b08:	08001b3c 	.word	0x08001b3c
 8001b0c:	08001b3c 	.word	0x08001b3c
 8001b10:	08001b40 	.word	0x08001b40

08001b14 <_init>:
 8001b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b16:	bf00      	nop
 8001b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1a:	bc08      	pop	{r3}
 8001b1c:	469e      	mov	lr, r3
 8001b1e:	4770      	bx	lr

08001b20 <_fini>:
 8001b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b22:	bf00      	nop
 8001b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b26:	bc08      	pop	{r3}
 8001b28:	469e      	mov	lr, r3
 8001b2a:	4770      	bx	lr
