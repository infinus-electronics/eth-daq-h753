
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023848  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003850  08023ae8  08023ae8  00024ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027338  08027338  00028338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08027340  08027340  00028340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027344  08027344  00028344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08027348  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002638  20000088  080273d0  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200026c0  080273d0  000296c0  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002cc0  080273d0  00029cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    0002400c  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c8000  2**0
                  CONTENTS, READONLY
 14 .debug_info   00063169  00000000  00000000  000c802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c019  00000000  00000000  0012b197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003178  00000000  00000000  001371b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027a3  00000000  00000000  0013a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f64c  00000000  00000000  0013cacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005c836  00000000  00000000  0018c117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191e57  00000000  00000000  001e894d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0037a7a4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d73c  00000000  00000000  0037a7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00387f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023ad0 	.word	0x08023ad0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08023ad0 	.word	0x08023ad0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fa37 	bl	8001b18 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 f879 	bl	801986c <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba6      	ldr	r3, [pc, #664]	@ (8000a14 <main+0x374>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a4      	ldr	r0, [pc, #656]	@ (8000a18 <main+0x378>)
 8000788:	f021 fc2f 	bl	8021fea <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a2      	ldr	r0, [pc, #648]	@ (8000a1c <main+0x37c>)
 8000794:	f021 fc29 	bl	8021fea <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a0      	ldr	r0, [pc, #640]	@ (8000a20 <main+0x380>)
 80007a0:	f021 fc23 	bl	8021fea <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489e      	ldr	r0, [pc, #632]	@ (8000a24 <main+0x384>)
 80007ac:	f021 fc1d 	bl	8021fea <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 faf5 	bl	8000da4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fba1 	bl	8000f00 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f000 ffa5 	bl	800170c <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f021 fa31 	bl	8021c28 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fec9 	bl	800155c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 fe7f 	bl	80014cc <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 fe31 	bl	8001434 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fc05 	bl	8000fe0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fc5b 	bl	8001090 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fcaf 	bl	800113c <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fd03 	bl	80011e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fd53 	bl	800128c <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fbbb 	bl	8000f60 <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fd9d 	bl	8001328 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007ee:	4b8e      	ldr	r3, [pc, #568]	@ (8000a28 <main+0x388>)
 80007f0:	4a8e      	ldr	r2, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f2:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000a28 <main+0x388>)
 80007f6:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f8:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fa:	4b8b      	ldr	r3, [pc, #556]	@ (8000a28 <main+0x388>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 8000806:	4b88      	ldr	r3, [pc, #544]	@ (8000a28 <main+0x388>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a87      	ldr	r2, [pc, #540]	@ (8000a28 <main+0x388>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000812:	4b88      	ldr	r3, [pc, #544]	@ (8000a34 <main+0x394>)
 8000814:	4a88      	ldr	r2, [pc, #544]	@ (8000a38 <main+0x398>)
 8000816:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 8000818:	4b86      	ldr	r3, [pc, #536]	@ (8000a34 <main+0x394>)
 800081a:	4a85      	ldr	r2, [pc, #532]	@ (8000a30 <main+0x390>)
 800081c:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 800081e:	4b85      	ldr	r3, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000824:	f3bf 8f4f 	dsb	sy
}
 8000828:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082a:	4b82      	ldr	r3, [pc, #520]	@ (8000a34 <main+0x394>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a81      	ldr	r2, [pc, #516]	@ (8000a34 <main+0x394>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF00FF;
 8000836:	4b80      	ldr	r3, [pc, #512]	@ (8000a38 <main+0x398>)
 8000838:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 800083c:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 800083e:	4b7b      	ldr	r3, [pc, #492]	@ (8000a2c <main+0x38c>)
 8000840:	4a7e      	ldr	r2, [pc, #504]	@ (8000a3c <main+0x39c>)
 8000842:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000844:	4b7e      	ldr	r3, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a7d      	ldr	r2, [pc, #500]	@ (8000a40 <main+0x3a0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000850:	4b7b      	ldr	r3, [pc, #492]	@ (8000a40 <main+0x3a0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a7a      	ldr	r2, [pc, #488]	@ (8000a40 <main+0x3a0>)
 8000856:	f023 0302 	bic.w	r3, r3, #2
 800085a:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 800085c:	4b78      	ldr	r3, [pc, #480]	@ (8000a40 <main+0x3a0>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a77      	ldr	r2, [pc, #476]	@ (8000a40 <main+0x3a0>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 8000868:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <main+0x3a0>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4a74      	ldr	r2, [pc, #464]	@ (8000a40 <main+0x3a0>)
 800086e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000872:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000874:	4b72      	ldr	r3, [pc, #456]	@ (8000a40 <main+0x3a0>)
 8000876:	6a1b      	ldr	r3, [r3, #32]
 8000878:	4a71      	ldr	r2, [pc, #452]	@ (8000a40 <main+0x3a0>)
 800087a:	f043 0311 	orr.w	r3, r3, #17
 800087e:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000880:	4b6f      	ldr	r3, [pc, #444]	@ (8000a40 <main+0x3a0>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	4a6e      	ldr	r2, [pc, #440]	@ (8000a40 <main+0x3a0>)
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 800088c:	4b6c      	ldr	r3, [pc, #432]	@ (8000a40 <main+0x3a0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a6b      	ldr	r2, [pc, #428]	@ (8000a40 <main+0x3a0>)
 8000892:	f043 0301 	orr.w	r3, r3, #1
 8000896:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089e:	4869      	ldr	r0, [pc, #420]	@ (8000a44 <main+0x3a4>)
 80008a0:	f01b fafa 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008aa:	4866      	ldr	r0, [pc, #408]	@ (8000a44 <main+0x3a4>)
 80008ac:	f01b faf4 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b0:	2032      	movs	r0, #50	@ 0x32
 80008b2:	f019 f86d 	bl	8019990 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008bc:	4861      	ldr	r0, [pc, #388]	@ (8000a44 <main+0x3a4>)
 80008be:	f01b faeb 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c2:	2032      	movs	r0, #50	@ 0x32
 80008c4:	f019 f864 	bl	8019990 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008c8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a48 <main+0x3a8>)
 80008ca:	4a60      	ldr	r2, [pc, #384]	@ (8000a4c <main+0x3ac>)
 80008cc:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008ce:	bf00      	nop
 80008d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <main+0x3a8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0312 	and.w	r3, r3, #18
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0f9      	beq.n	80008d0 <main+0x230>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008dc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a48 <main+0x3a8>)
 80008de:	2239      	movs	r2, #57	@ 0x39
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e2:	bf00      	nop
 80008e4:	4b58      	ldr	r3, [pc, #352]	@ (8000a48 <main+0x3a8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0302 	and.w	r3, r3, #2
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0f9      	beq.n	80008e4 <main+0x244>
  I2C4->TXDR = 0; //MSB
 80008f0:	4b55      	ldr	r3, [pc, #340]	@ (8000a48 <main+0x3a8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008f6:	bf00      	nop
 80008f8:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <main+0x3a8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0302 	and.w	r3, r3, #2
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <main+0x258>
  I2C4->TXDR = 4; //LSB
 8000904:	4b50      	ldr	r3, [pc, #320]	@ (8000a48 <main+0x3a8>)
 8000906:	2204      	movs	r2, #4
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090a:	bf00      	nop
 800090c:	4b4e      	ldr	r3, [pc, #312]	@ (8000a48 <main+0x3a8>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <main+0x26c>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <main+0x3a8>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <main+0x290>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000924:	4b48      	ldr	r3, [pc, #288]	@ (8000a48 <main+0x3a8>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a47      	ldr	r2, [pc, #284]	@ (8000a48 <main+0x3a8>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <main+0x3b0>)
 8000932:	4a39      	ldr	r2, [pc, #228]	@ (8000a18 <main+0x378>)
 8000934:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 8000936:	4b46      	ldr	r3, [pc, #280]	@ (8000a50 <main+0x3b0>)
 8000938:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <main+0x37c>)
 800093a:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 800093c:	4b44      	ldr	r3, [pc, #272]	@ (8000a50 <main+0x3b0>)
 800093e:	4a45      	ldr	r2, [pc, #276]	@ (8000a54 <main+0x3b4>)
 8000940:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000942:	4b43      	ldr	r3, [pc, #268]	@ (8000a50 <main+0x3b0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a42      	ldr	r2, [pc, #264]	@ (8000a50 <main+0x3b0>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094c:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 800094e:	4b40      	ldr	r3, [pc, #256]	@ (8000a50 <main+0x3b0>)
 8000950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000954:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000956:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x3b0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a50 <main+0x3b0>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
}
 8000966:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000968:	4b39      	ldr	r3, [pc, #228]	@ (8000a50 <main+0x3b0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a38      	ldr	r2, [pc, #224]	@ (8000a50 <main+0x3b0>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <main+0x3b8>)
 8000976:	4a2a      	ldr	r2, [pc, #168]	@ (8000a20 <main+0x380>)
 8000978:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097a:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <main+0x3b8>)
 800097c:	4a29      	ldr	r2, [pc, #164]	@ (8000a24 <main+0x384>)
 800097e:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <main+0x3b8>)
 8000982:	4a36      	ldr	r2, [pc, #216]	@ (8000a5c <main+0x3bc>)
 8000984:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <main+0x3b8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <main+0x3b8>)
 800098c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000990:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <main+0x3b8>)
 8000994:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000998:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <main+0x3b8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <main+0x3b8>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a6:	f3bf 8f4f 	dsb	sy
}
 80009aa:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <main+0x3b8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a29      	ldr	r2, [pc, #164]	@ (8000a58 <main+0x3b8>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009b8:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <main+0x3c0>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <main+0x374>)
 80009bc:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <main+0x3c0>)
 80009c0:	4a28      	ldr	r2, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c2:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <main+0x3c0>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
}
 80009ce:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <main+0x3c0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a22      	ldr	r2, [pc, #136]	@ (8000a60 <main+0x3c0>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <main+0x3c8>)
 80009de:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <main+0x374>)
 80009e0:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0x3c8>)
 80009e4:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e6:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <main+0x3c8>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ee:	f3bf 8f4f 	dsb	sy
}
 80009f2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <main+0x3c8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <main+0x3c8>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <main+0x3d0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <main+0x3d0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <main+0x3d0>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e02f      	b.n	8000a74 <main+0x3d4>
 8000a14:	30000000 	.word	0x30000000
 8000a18:	30000004 	.word	0x30000004
 8000a1c:	30010004 	.word	0x30010004
 8000a20:	30020004 	.word	0x30020004
 8000a24:	30022004 	.word	0x30022004
 8000a28:	40020070 	.word	0x40020070
 8000a2c:	30024004 	.word	0x30024004
 8000a30:	58020c18 	.word	0x58020c18
 8000a34:	40020088 	.word	0x40020088
 8000a38:	30024008 	.word	0x30024008
 8000a3c:	00ff000f 	.word	0x00ff000f
 8000a40:	40000800 	.word	0x40000800
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	02032018 	.word	0x02032018
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40013030 	.word	0x40013030
 8000a58:	40020028 	.word	0x40020028
 8000a5c:	40003830 	.word	0x40003830
 8000a60:	40020040 	.word	0x40020040
 8000a64:	40013020 	.word	0x40013020
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	40003820 	.word	0x40003820
 8000a70:	40013000 	.word	0x40013000
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a74:	4ba3      	ldr	r3, [pc, #652]	@ (8000d04 <main+0x664>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4aa2      	ldr	r2, [pc, #648]	@ (8000d04 <main+0x664>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a86:	48a0      	ldr	r0, [pc, #640]	@ (8000d08 <main+0x668>)
 8000a88:	f01b fa06 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f018 ff7f 	bl	8019990 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a98:	489b      	ldr	r0, [pc, #620]	@ (8000d08 <main+0x668>)
 8000a9a:	f01b f9fd 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f018 ff76 	bl	8019990 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aa4:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aa8:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000aaa:	7a7b      	ldrb	r3, [r7, #9]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	7a3a      	ldrb	r2, [r7, #8]
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	4b94      	ldr	r3, [pc, #592]	@ (8000d04 <main+0x664>)
 8000ab4:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ab6:	bf00      	nop
 8000ab8:	4b92      	ldr	r3, [pc, #584]	@ (8000d04 <main+0x664>)
 8000aba:	695b      	ldr	r3, [r3, #20]
 8000abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f9      	beq.n	8000ab8 <main+0x418>
  spi_data[1]++;
 8000ac4:	7a7b      	ldrb	r3, [r7, #9]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000acc:	2310      	movs	r3, #16
 8000ace:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad0:	7a7b      	ldrb	r3, [r7, #9]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	7a3a      	ldrb	r2, [r7, #8]
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	4b8a      	ldr	r3, [pc, #552]	@ (8000d04 <main+0x664>)
 8000ada:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000adc:	bf00      	nop
 8000ade:	4b89      	ldr	r3, [pc, #548]	@ (8000d04 <main+0x664>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f9      	beq.n	8000ade <main+0x43e>
  spi_data[1]++;
 8000aea:	7a7b      	ldrb	r3, [r7, #9]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af2:	2309      	movs	r3, #9
 8000af4:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000af6:	7a7b      	ldrb	r3, [r7, #9]
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	7a3a      	ldrb	r2, [r7, #8]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	4b81      	ldr	r3, [pc, #516]	@ (8000d04 <main+0x664>)
 8000b00:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b02:	bf00      	nop
 8000b04:	4b7f      	ldr	r3, [pc, #508]	@ (8000d04 <main+0x664>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <main+0x464>
  spi_data[1]++;
 8000b10:	7a7b      	ldrb	r3, [r7, #9]
 8000b12:	3301      	adds	r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b1c:	7a7b      	ldrb	r3, [r7, #9]
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	7a3a      	ldrb	r2, [r7, #8]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	4b77      	ldr	r3, [pc, #476]	@ (8000d04 <main+0x664>)
 8000b26:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b28:	bf00      	nop
 8000b2a:	4b76      	ldr	r3, [pc, #472]	@ (8000d04 <main+0x664>)
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <main+0x48a>
  spi_data[1]=0x80+0x03; //start conversion
 8000b36:	2383      	movs	r3, #131	@ 0x83
 8000b38:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b3e:	7a7b      	ldrb	r3, [r7, #9]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	7a3a      	ldrb	r2, [r7, #8]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4b6f      	ldr	r3, [pc, #444]	@ (8000d04 <main+0x664>)
 8000b48:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b4a:	bf00      	nop
 8000b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8000d04 <main+0x664>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <main+0x4ac>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b58:	4b6a      	ldr	r3, [pc, #424]	@ (8000d04 <main+0x664>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a69      	ldr	r2, [pc, #420]	@ (8000d04 <main+0x664>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b64:	4b69      	ldr	r3, [pc, #420]	@ (8000d0c <main+0x66c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b6a:	4b68      	ldr	r3, [pc, #416]	@ (8000d0c <main+0x66c>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a67      	ldr	r2, [pc, #412]	@ (8000d0c <main+0x66c>)
 8000b70:	f043 031f 	orr.w	r3, r3, #31
 8000b74:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b76:	4b65      	ldr	r3, [pc, #404]	@ (8000d0c <main+0x66c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a64      	ldr	r2, [pc, #400]	@ (8000d0c <main+0x66c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b82:	4b62      	ldr	r3, [pc, #392]	@ (8000d0c <main+0x66c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a61      	ldr	r2, [pc, #388]	@ (8000d0c <main+0x66c>)
 8000b88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b94:	485e      	ldr	r0, [pc, #376]	@ (8000d10 <main+0x670>)
 8000b96:	f01b f97f 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b9a:	2064      	movs	r0, #100	@ 0x64
 8000b9c:	f018 fef8 	bl	8019990 <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba6:	485a      	ldr	r0, [pc, #360]	@ (8000d10 <main+0x670>)
 8000ba8:	f01b f976 	bl	801be98 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	@ 0x64
 8000bae:	f018 feef 	bl	8019990 <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb2:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <main+0x674>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	041b      	lsls	r3, r3, #16
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <main+0x66c>)
 8000bc2:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bc4:	bf00      	nop
 8000bc6:	4b51      	ldr	r3, [pc, #324]	@ (8000d0c <main+0x66c>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f9      	beq.n	8000bc6 <main+0x526>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd2:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bd6:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bd8:	2302      	movs	r3, #2
 8000bda:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	041b      	lsls	r3, r3, #16
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	431a      	orrs	r2, r3
 8000be4:	4b49      	ldr	r3, [pc, #292]	@ (8000d0c <main+0x66c>)
 8000be6:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000be8:	bf00      	nop
 8000bea:	4b48      	ldr	r3, [pc, #288]	@ (8000d0c <main+0x66c>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f9      	beq.n	8000bea <main+0x54a>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bf6:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <main+0x66c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a44      	ldr	r2, [pc, #272]	@ (8000d0c <main+0x66c>)
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c02:	4b42      	ldr	r3, [pc, #264]	@ (8000d0c <main+0x66c>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	4a41      	ldr	r2, [pc, #260]	@ (8000d0c <main+0x66c>)
 8000c08:	f023 031f 	bic.w	r3, r3, #31
 8000c0c:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d0c <main+0x66c>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	4a3e      	ldr	r2, [pc, #248]	@ (8000d0c <main+0x66c>)
 8000c14:	f043 030f 	orr.w	r3, r3, #15
 8000c18:	6093      	str	r3, [r2, #8]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	483e      	ldr	r0, [pc, #248]	@ (8000d18 <main+0x678>)
 8000c20:	f01b f93a 	bl	801be98 <HAL_GPIO_WritePin>

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000c24:	4b37      	ldr	r3, [pc, #220]	@ (8000d04 <main+0x664>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c2a:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <main+0x664>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4a35      	ldr	r2, [pc, #212]	@ (8000d04 <main+0x664>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000c36:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <main+0x664>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a32      	ldr	r2, [pc, #200]	@ (8000d04 <main+0x664>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000c42:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <main+0x664>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2f      	ldr	r2, [pc, #188]	@ (8000d04 <main+0x664>)
 8000c48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4c:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <main+0x66c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c54:	4b2d      	ldr	r3, [pc, #180]	@ (8000d0c <main+0x66c>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	4a2c      	ldr	r2, [pc, #176]	@ (8000d0c <main+0x66c>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5e:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	@ (8000d0c <main+0x66c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a29      	ldr	r2, [pc, #164]	@ (8000d0c <main+0x66c>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	@ (8000d0c <main+0x66c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a26      	ldr	r2, [pc, #152]	@ (8000d0c <main+0x66c>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c76:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <main+0x67c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <main+0x67c>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <main+0x67c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <main+0x67c>)
 8000c8a:	f023 0302 	bic.w	r3, r3, #2
 8000c8e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000c90:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <main+0x67c>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <main+0x67c>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <main+0x67c>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <main+0x67c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <main+0x67c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1b      	ldr	r2, [pc, #108]	@ (8000d1c <main+0x67c>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <main+0x680>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	@ (8000d20 <main+0x680>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <main+0x680>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <main+0x680>)
 8000cc6:	f023 0302 	bic.w	r3, r3, #2
 8000cca:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <main+0x680>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <main+0x680>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd6:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <main+0x680>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <main+0x680>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <main+0x680>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <main+0x680>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <main+0x684>)
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f016 feee 	bl	8017ad4 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <main+0x688>)
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <main+0x68c>)
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	e016      	b.n	8000d30 <main+0x690>
 8000d02:	bf00      	nop
 8000d04:	40013000 	.word	0x40013000
 8000d08:	58020000 	.word	0x58020000
 8000d0c:	40003800 	.word	0x40003800
 8000d10:	58020c00 	.word	0x58020c00
 8000d14:	08023af8 	.word	0x08023af8
 8000d18:	58021000 	.word	0x58021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40000400 	.word	0x40000400
 8000d24:	20000724 	.word	0x20000724
 8000d28:	08026fe0 	.word	0x08026fe0
 8000d2c:	08026fdc 	.word	0x08026fdc
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <main+0x6d8>)
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <main+0x6dc>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <main+0x6e0>)
 8000d38:	4912      	ldr	r1, [pc, #72]	@ (8000d84 <main+0x6e4>)
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <main+0x6e8>)
 8000d3c:	f00b ffa8 	bl	800cc90 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000d40:	f008 f8f6 	bl	8008f30 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <main+0x6ec>)
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d52:	490f      	ldr	r1, [pc, #60]	@ (8000d90 <main+0x6f0>)
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <main+0x6f4>)
 8000d56:	f002 fec5 	bl	8003ae4 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <main+0x6f8>)
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <main+0x6fc>)
 8000d6a:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <main+0x700>)
 8000d6c:	f002 feba 	bl	8003ae4 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 8000d70:	f003 f874 	bl	8003e5c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <main+0x6d4>
 8000d78:	08026fd8 	.word	0x08026fd8
 8000d7c:	08026fd4 	.word	0x08026fd4
 8000d80:	08026fd0 	.word	0x08026fd0
 8000d84:	2000074c 	.word	0x2000074c
 8000d88:	20000724 	.word	0x20000724
 8000d8c:	20000bf4 	.word	0x20000bf4
 8000d90:	08023ae8 	.word	0x08023ae8
 8000d94:	08001939 	.word	0x08001939
 8000d98:	20000bf8 	.word	0x20000bf8
 8000d9c:	08023af0 	.word	0x08023af0
 8000da0:	08001961 	.word	0x08001961

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b09e      	sub	sp, #120	@ 0x78
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000dae:	224c      	movs	r2, #76	@ 0x4c
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f021 f919 	bl	8021fea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	2220      	movs	r2, #32
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f021 f912 	bl	8021fea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f01b f9b4 	bl	801c134 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b48      	ldr	r3, [pc, #288]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd4:	4a47      	ldr	r2, [pc, #284]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ddc:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	4b44      	ldr	r3, [pc, #272]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	4a43      	ldr	r2, [pc, #268]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df0:	6193      	str	r3, [r2, #24]
 8000df2:	4b41      	ldr	r3, [pc, #260]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dfe:	bf00      	nop
 8000e00:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e0c:	d1f8      	bne.n	8000e00 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000efc <SystemClock_Config+0x158>)
 8000e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e14:	4a39      	ldr	r2, [pc, #228]	@ (8000efc <SystemClock_Config+0x158>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e1e:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <SystemClock_Config+0x158>)
 8000e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	4b31      	ldr	r3, [pc, #196]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a30      	ldr	r2, [pc, #192]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <SystemClock_Config+0x150>)
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e5e:	bf00      	nop
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <SystemClock_Config+0x154>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e6c:	d1f8      	bne.n	8000e60 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e72:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000e84:	2340      	movs	r3, #64	@ 0x40
 8000e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e94:	230c      	movs	r3, #12
 8000e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f01b f97f 	bl	801c1a8 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000eb0:	f000 fe68 	bl	8001b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb4:	233f      	movs	r3, #63	@ 0x3f
 8000eb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ec4:	2340      	movs	r3, #64	@ 0x40
 8000ec6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ec8:	2340      	movs	r3, #64	@ 0x40
 8000eca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ed2:	2340      	movs	r3, #64	@ 0x40
 8000ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2102      	movs	r1, #2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f01b fdbd 	bl	801ca5c <HAL_RCC_ClockConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000ee8:	f000 fe4c 	bl	8001b84 <Error_Handler>
  }
}
 8000eec:	bf00      	nop
 8000eee:	3778      	adds	r7, #120	@ 0x78
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58000400 	.word	0x58000400
 8000ef8:	58024800 	.word	0x58024800
 8000efc:	58024400 	.word	0x58024400

08000f00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b0b0      	sub	sp, #192	@ 0xc0
 8000f04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	22c0      	movs	r2, #192	@ 0xc0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f021 f86c 	bl	8021fea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000f12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000f22:	2340      	movs	r3, #64	@ 0x40
 8000f24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000f32:	2340      	movs	r3, #64	@ 0x40
 8000f34:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4618      	mov	r0, r3
 8000f48:	f01c f914 	bl	801d174 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000f52:	f000 fe17 	bl	8001b84 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	37c0      	adds	r7, #192	@ 0xc0
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000f64:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f66:	4a1c      	ldr	r2, [pc, #112]	@ (8000fd8 <MX_I2C4_Init+0x78>)
 8000f68:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <MX_I2C4_Init+0x7c>)
 8000f6e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000f9a:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000f9c:	f01a ff96 	bl	801becc <HAL_I2C_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000fa6:	f000 fded 	bl	8001b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4809      	ldr	r0, [pc, #36]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000fae:	f01b f829 	bl	801c004 <HAL_I2CEx_ConfigAnalogFilter>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000fb8:	f000 fde4 	bl	8001b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_I2C4_Init+0x74>)
 8000fc0:	f01b f86b 	bl	801c09a <HAL_I2CEx_ConfigDigitalFilter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 fddb 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000a4 	.word	0x200000a4
 8000fd8:	58001c00 	.word	0x58001c00
 8000fdc:	10c0ecff 	.word	0x10c0ecff

08000fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b28      	ldr	r3, [pc, #160]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8000fe6:	4a29      	ldr	r2, [pc, #164]	@ (800108c <MX_SPI1_Init+0xac>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8000fec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001004:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001006:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800100a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800100e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800101a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001036:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800104a:	2200      	movs	r2, #0
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001056:	2203      	movs	r2, #3
 8001058:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800105c:	2230      	movs	r2, #48	@ 0x30
 800105e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001062:	2200      	movs	r2, #0
 8001064:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_SPI1_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_SPI1_Init+0xa8>)
 8001074:	f01d feaa 	bl	801edcc <HAL_SPI_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800107e:	f000 fd81 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000f8 	.word	0x200000f8
 800108c:	40013000 	.word	0x40013000

08001090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001094:	4b27      	ldr	r3, [pc, #156]	@ (8001134 <MX_SPI2_Init+0xa4>)
 8001096:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <MX_SPI2_Init+0xa8>)
 8001098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800109a:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <MX_SPI2_Init+0xa4>)
 800109c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80010a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010aa:	220f      	movs	r2, #15
 80010ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80010c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010c4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80010c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010d6:	4b17      	ldr	r3, [pc, #92]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80010dc:	4b15      	ldr	r3, [pc, #84]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010e2:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <MX_SPI2_Init+0xa4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_SPI2_Init+0xa4>)
 8001104:	2203      	movs	r2, #3
 8001106:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <MX_SPI2_Init+0xa4>)
 800110a:	2230      	movs	r2, #48	@ 0x30
 800110c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_SPI2_Init+0xa4>)
 8001110:	2200      	movs	r2, #0
 8001112:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <MX_SPI2_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_SPI2_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	@ (8001134 <MX_SPI2_Init+0xa4>)
 8001122:	f01d fe53 	bl	801edcc <HAL_SPI_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800112c:	f000 fd2a 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000180 	.word	0x20000180
 8001138:	40003800 	.word	0x40003800

0800113c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001140:	4b27      	ldr	r3, [pc, #156]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001142:	4a28      	ldr	r2, [pc, #160]	@ (80011e4 <MX_SPI3_Init+0xa8>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001168:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800116c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011be:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <MX_SPI3_Init+0xa4>)
 80011cc:	f01d fdfe 	bl	801edcc <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80011d6:	f000 fcd5 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000208 	.word	0x20000208
 80011e4:	40003c00 	.word	0x40003c00

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_TIM1_Init+0x9c>)
 8001208:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <MX_TIM1_Init+0xa0>)
 800120a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM1_Init+0x9c>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM1_Init+0x9c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM1_Init+0x9c>)
 800121a:	22ff      	movs	r2, #255	@ 0xff
 800121c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b19      	ldr	r3, [pc, #100]	@ (8001284 <MX_TIM1_Init+0x9c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_TIM1_Init+0x9c>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_TIM1_Init+0x9c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001230:	4814      	ldr	r0, [pc, #80]	@ (8001284 <MX_TIM1_Init+0x9c>)
 8001232:	f01e f9c4 	bl	801f5be <HAL_TIM_Base_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 fca2 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001244:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4619      	mov	r1, r3
 800124c:	480d      	ldr	r0, [pc, #52]	@ (8001284 <MX_TIM1_Init+0x9c>)
 800124e:	f01e fbfb 	bl	801fa48 <HAL_TIM_ConfigClockSource>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001258:	f000 fc94 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800125c:	2320      	movs	r3, #32
 800125e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_TIM1_Init+0x9c>)
 800126e:	f01f f8fd 	bl	802046c <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001278:	f000 fc84 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000380 	.word	0x20000380
 8001288:	40010000 	.word	0x40010000

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001324 <MX_TIM3_Init+0x98>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012b2:	22c7      	movs	r2, #199	@ 0xc7
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012be:	2209      	movs	r2, #9
 80012c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012ce:	4814      	ldr	r0, [pc, #80]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012d0:	f01e f975 	bl	801f5be <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 fc53 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	@ (8001320 <MX_TIM3_Init+0x94>)
 80012ec:	f01e fbac 	bl	801fa48 <HAL_TIM_ConfigClockSource>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f000 fc45 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <MX_TIM3_Init+0x94>)
 8001308:	f01f f8b0 	bl	802046c <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001312:	f000 fc37 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000418 	.word	0x20000418
 8001324:	40000400 	.word	0x40000400

08001328 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	@ 0x38
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001348:	463b      	mov	r3, r7
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	615a      	str	r2, [r3, #20]
 8001358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800135a:	4b34      	ldr	r3, [pc, #208]	@ (800142c <MX_TIM4_Init+0x104>)
 800135c:	4a34      	ldr	r2, [pc, #208]	@ (8001430 <MX_TIM4_Init+0x108>)
 800135e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001360:	4b32      	ldr	r3, [pc, #200]	@ (800142c <MX_TIM4_Init+0x104>)
 8001362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001366:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <MX_TIM4_Init+0x104>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <MX_TIM4_Init+0x104>)
 8001370:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001374:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <MX_TIM4_Init+0x104>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <MX_TIM4_Init+0x104>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001382:	482a      	ldr	r0, [pc, #168]	@ (800142c <MX_TIM4_Init+0x104>)
 8001384:	f01e f91b 	bl	801f5be <HAL_TIM_Base_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800138e:	f000 fbf9 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001398:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139c:	4619      	mov	r1, r3
 800139e:	4823      	ldr	r0, [pc, #140]	@ (800142c <MX_TIM4_Init+0x104>)
 80013a0:	f01e fb52 	bl	801fa48 <HAL_TIM_ConfigClockSource>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80013aa:	f000 fbeb 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ae:	481f      	ldr	r0, [pc, #124]	@ (800142c <MX_TIM4_Init+0x104>)
 80013b0:	f01e f9d4 	bl	801f75c <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80013ba:	f000 fbe3 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4817      	ldr	r0, [pc, #92]	@ (800142c <MX_TIM4_Init+0x104>)
 80013ce:	f01f f84d 	bl	802046c <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80013d8:	f000 fbd4 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	@ 0x60
 80013de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 80013e0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_TIM4_Init+0x104>)
 80013f6:	f01e fa13 	bl	801f820 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001400:	f000 fbc0 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001404:	2370      	movs	r3, #112	@ 0x70
 8001406:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2204      	movs	r2, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <MX_TIM4_Init+0x104>)
 8001410:	f01e fa06 	bl	801f820 <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800141a:	f000 fbb3 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800141e:	4803      	ldr	r0, [pc, #12]	@ (800142c <MX_TIM4_Init+0x104>)
 8001420:	f000 ffd8 	bl	80023d4 <HAL_TIM_MspPostInit>

}
 8001424:	bf00      	nop
 8001426:	3738      	adds	r7, #56	@ 0x38
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000464 	.word	0x20000464
 8001430:	40000800 	.word	0x40000800

08001434 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 800143a:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <MX_USART3_UART_Init+0x94>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147c:	4811      	ldr	r0, [pc, #68]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 800147e:	f01f f883 	bl	8020588 <HAL_UART_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001488:	f000 fb7c 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800148c:	2100      	movs	r1, #0
 800148e:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 8001490:	f020 f88b 	bl	80215aa <HAL_UARTEx_SetTxFifoThreshold>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800149a:	f000 fb73 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149e:	2100      	movs	r1, #0
 80014a0:	4808      	ldr	r0, [pc, #32]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 80014a2:	f020 f8c0 	bl	8021626 <HAL_UARTEx_SetRxFifoThreshold>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014ac:	f000 fb6a 	bl	8001b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <MX_USART3_UART_Init+0x90>)
 80014b2:	f020 f841 	bl	8021538 <HAL_UARTEx_DisableFifoMode>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f000 fb62 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000690 	.word	0x20000690
 80014c8:	40004800 	.word	0x40004800

080014cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_DMA_Init+0x8c>)
 80014d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001558 <MX_DMA_Init+0x8c>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <MX_DMA_Init+0x8c>)
 80014e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2106      	movs	r1, #6
 80014f4:	200b      	movs	r0, #11
 80014f6:	f018 fb6a 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014fa:	200b      	movs	r0, #11
 80014fc:	f018 fb81 	bl	8019c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2106      	movs	r1, #6
 8001504:	200c      	movs	r0, #12
 8001506:	f018 fb62 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800150a:	200c      	movs	r0, #12
 800150c:	f018 fb79 	bl	8019c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2107      	movs	r1, #7
 8001514:	200d      	movs	r0, #13
 8001516:	f018 fb5a 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800151a:	200d      	movs	r0, #13
 800151c:	f018 fb71 	bl	8019c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2107      	movs	r1, #7
 8001524:	200e      	movs	r0, #14
 8001526:	f018 fb52 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800152a:	200e      	movs	r0, #14
 800152c:	f018 fb69 	bl	8019c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	2107      	movs	r1, #7
 8001534:	200f      	movs	r0, #15
 8001536:	f018 fb4a 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800153a:	200f      	movs	r0, #15
 800153c:	f018 fb61 	bl	8019c02 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2107      	movs	r1, #7
 8001544:	2010      	movs	r0, #16
 8001546:	f018 fb42 	bl	8019bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800154a:	2010      	movs	r0, #16
 800154c:	f018 fb59 	bl	8019c02 <HAL_NVIC_EnableIRQ>

}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	58024400 	.word	0x58024400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	4b61      	ldr	r3, [pc, #388]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001578:	4a5f      	ldr	r2, [pc, #380]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001582:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	4a58      	ldr	r2, [pc, #352]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800159c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b4:	4a50      	ldr	r2, [pc, #320]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015be:	4b4e      	ldr	r3, [pc, #312]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015d2:	4a49      	ldr	r2, [pc, #292]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015dc:	4b46      	ldr	r3, [pc, #280]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f0:	4a41      	ldr	r2, [pc, #260]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015fa:	4b3f      	ldr	r3, [pc, #252]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160e:	4a3a      	ldr	r2, [pc, #232]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 8001610:	f043 0308 	orr.w	r3, r3, #8
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001618:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <MX_GPIO_Init+0x19c>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	213c      	movs	r1, #60	@ 0x3c
 800162a:	4834      	ldr	r0, [pc, #208]	@ (80016fc <MX_GPIO_Init+0x1a0>)
 800162c:	f01a fc34 	bl	801be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001630:	2200      	movs	r2, #0
 8001632:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 8001636:	4832      	ldr	r0, [pc, #200]	@ (8001700 <MX_GPIO_Init+0x1a4>)
 8001638:	f01a fc2e 	bl	801be98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001642:	4830      	ldr	r0, [pc, #192]	@ (8001704 <MX_GPIO_Init+0x1a8>)
 8001644:	f01a fc28 	bl	801be98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001648:	233c      	movs	r3, #60	@ 0x3c
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4827      	ldr	r0, [pc, #156]	@ (80016fc <MX_GPIO_Init+0x1a0>)
 8001660:	f01a fa6a 	bl	801bb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001664:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001668:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4820      	ldr	r0, [pc, #128]	@ (8001700 <MX_GPIO_Init+0x1a4>)
 800167e:	f01a fa5b 	bl	801bb38 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4619      	mov	r1, r3
 8001696:	481a      	ldr	r0, [pc, #104]	@ (8001700 <MX_GPIO_Init+0x1a4>)
 8001698:	f01a fa4e 	bl	801bb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 800169c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	2301      	movs	r3, #1
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <MX_GPIO_Init+0x1a8>)
 80016b6:	f01a fa3f 	bl	801bb38 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80016ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_GPIO_Init+0x1a8>)
 80016d0:	f01a fa32 	bl	801bb38 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80016d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2300      	movs	r3, #0
 80016dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	@ (8001708 <MX_GPIO_Init+0x1ac>)
 80016ea:	f01a fa25 	bl	801bb38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ee:	bf00      	nop
 80016f0:	3730      	adds	r7, #48	@ 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58021000 	.word	0x58021000
 8001700:	58020c00 	.word	0x58020c00
 8001704:	58020000 	.word	0x58020000
 8001708:	58020400 	.word	0x58020400

0800170c <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <vHeapInit+0x28>)
 8001714:	463c      	mov	r4, r7
 8001716:	461d      	mov	r5, r3
 8001718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001724:	463b      	mov	r3, r7
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fcec 	bl	8006104 <vPortDefineHeapRegions>
}
 800172c:	bf00      	nop
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	08023afc 	.word	0x08023afc

08001738 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	return 0U;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001756:	f004 fa3b 	bl	8005bd0 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800175a:	e000      	b.n	800175e <vAssertCalled+0x16>
		{
			__NOP();
 800175c:	bf00      	nop
		while( ul == 0 )
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0fb      	beq.n	800175c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001764:	f004 fa60 	bl	8005c28 <vPortExitCritical>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001774:	f240 41af 	movw	r1, #1199	@ 0x4af
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <vApplicationMallocFailedHook+0x14>)
 800177a:	f7ff ffe5 	bl	8001748 <vAssertCalled>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	08023b1c 	.word	0x08023b1c

08001788 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f89b 	bl	80018dc <xApplicationGetRandomNumber>

	return ulReturn;
 80017a6:	697b      	ldr	r3, [r7, #20]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d147      	bne.n	8001850 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <vApplicationIPNetworkEventHook+0xa8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <vApplicationIPNetworkEventHook+0xa8>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <vApplicationIPNetworkEventHook+0xac>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80017d4:	f107 0318 	add.w	r3, r7, #24
 80017d8:	f107 021c 	add.w	r2, r7, #28
 80017dc:	f107 0120 	add.w	r1, r7, #32
 80017e0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80017e4:	f007 fc3c 	bl	8009060 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	f107 0208 	add.w	r2, r7, #8
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00d fa39 	bl	800ec68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4619      	mov	r1, r3
 80017fc:	4818      	ldr	r0, [pc, #96]	@ (8001860 <vApplicationIPNetworkEventHook+0xb0>)
 80017fe:	f020 f8cb 	bl	8021998 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f00d fa2c 	bl	800ec68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	4813      	ldr	r0, [pc, #76]	@ (8001864 <vApplicationIPNetworkEventHook+0xb4>)
 8001818:	f020 f8be 	bl	8021998 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f107 0208 	add.w	r2, r7, #8
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f00d fa1f 	bl	800ec68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	4619      	mov	r1, r3
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <vApplicationIPNetworkEventHook+0xb8>)
 8001832:	f020 f8b1 	bl	8021998 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	f107 0208 	add.w	r2, r7, #8
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f00d fa12 	bl	800ec68 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	4808      	ldr	r0, [pc, #32]	@ (800186c <vApplicationIPNetworkEventHook+0xbc>)
 800184c:	f020 f8a4 	bl	8021998 <lUDPLoggingPrintf>
	}
}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000bec 	.word	0x20000bec
 800185c:	20000bf0 	.word	0x20000bf0
 8001860:	08023b30 	.word	0x08023b30
 8001864:	08023b40 	.word	0x08023b40
 8001868:	08023b54 	.word	0x08023b54
 800186c:	08023b6c 	.word	0x08023b6c

08001870 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 800187c:	f000 f810 	bl	80018a0 <pcApplicationHostnameHook>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f021 fa63 	bl	8022d50 <strcasecmp>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001890:	2301      	movs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 80018a4:	4b02      	ldr	r3, [pc, #8]	@ (80018b0 <pcApplicationHostnameHook+0x10>)
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	08023b84 	.word	0x08023b84

080018b4 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	460a      	mov	r2, r1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	4613      	mov	r3, r2
 80018c2:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <vApplicationPingReplyHook+0x24>)
 80018ca:	f020 f865 	bl	8021998 <lUDPLoggingPrintf>
	}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	08023b8c 	.word	0x08023b8c

080018dc <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 80018e4:	f021 f8c6 	bl	8022a74 <rand>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001908:	4a01      	ldr	r2, [pc, #4]	@ (8001910 <prvGetRegistersFromStack+0x14>)
 800190a:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <prvGetRegistersFromStack+0x10>
 8001910:	20000bfc 	.word	0x20000bfc

08001914 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	__asm volatile
 8001918:	f01e 0f04 	tst.w	lr, #4
 800191c:	bf0c      	ite	eq
 800191e:	f3ef 8008 	mrseq	r0, MSP
 8001922:	f3ef 8009 	mrsne	r0, PSP
 8001926:	6981      	ldr	r1, [r0, #24]
 8001928:	f7ff ffe8 	bl	80018fc <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001940:	200a      	movs	r0, #10
 8001942:	f002 fa0f 	bl	8003d64 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001946:	4b05      	ldr	r3, [pc, #20]	@ (800195c <prvServerWorkTask+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f8      	beq.n	8001940 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 800194e:	4b03      	ldr	r3, [pc, #12]	@ (800195c <prvServerWorkTask+0x24>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001954:	f020 f83c 	bl	80219d0 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001958:	e7f2      	b.n	8001940 <prvServerWorkTask+0x8>
 800195a:	bf00      	nop
 800195c:	20000bf0 	.word	0x20000bf0

08001960 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b098      	sub	sp, #96	@ 0x60
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800196c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	2218      	movs	r2, #24
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f020 fb37 	bl	8021fea <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 800197c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21a      	sxth	r2, r3
 8001984:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b29b      	uxth	r3, r3
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001996:	2303      	movs	r3, #3
 8001998:	061a      	lsls	r2, r3, #24
 800199a:	2301      	movs	r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	23a8      	movs	r3, #168	@ 0xa8
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4313      	orrs	r3, r2
 80019a6:	22c0      	movs	r2, #192	@ 0xc0
 80019a8:	4313      	orrs	r3, r2
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 80019ac:	2302      	movs	r3, #2
 80019ae:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80019b2:	2206      	movs	r2, #6
 80019b4:	2101      	movs	r1, #1
 80019b6:	2002      	movs	r0, #2
 80019b8:	f00c f84a 	bl	800da50 <FreeRTOS_socket>
 80019bc:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	2210      	movs	r2, #16
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f020 fb0f 	bl	8021fea <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80019cc:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80019d0:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80019d2:	230c      	movs	r3, #12
 80019d4:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80019d6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80019da:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 80019dc:	230c      	movs	r3, #12
 80019de:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 80019e0:	2304      	movs	r3, #4
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <vADCTCPTask+0x1a8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019ec:	f00c ffea 	bl	800e9c4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 80019f0:	2304      	movs	r3, #4
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <vADCTCPTask+0x1a8>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	2100      	movs	r1, #0
 80019fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80019fc:	f00c ffe2 	bl	800e9c4 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2210      	movs	r2, #16
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	220d      	movs	r2, #13
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a0e:	f00c ffd9 	bl	800e9c4 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d104      	bne.n	8001a24 <vADCTCPTask+0xc4>
 8001a1a:	f240 51d7 	movw	r1, #1495	@ 0x5d7
 8001a1e:	483b      	ldr	r0, [pc, #236]	@ (8001b0c <vADCTCPTask+0x1ac>)
 8001a20:	f7ff fe92 	bl	8001748 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	2100      	movs	r1, #0
 8001a34:	2000      	movs	r0, #0
 8001a36:	f003 fb1f 	bl	8005078 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001a44:	4b32      	ldr	r3, [pc, #200]	@ (8001b10 <vADCTCPTask+0x1b0>)
 8001a46:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a48:	e001      	b.n	8001a4e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <vADCTCPTask+0x1b4>)
 8001a4c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5a:	2218      	movs	r2, #24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a60:	f00d fb4e 	bl	800f100 <FreeRTOS_connect>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d139      	bne.n	8001ade <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001a6a:	e030      	b.n	8001ace <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a7c:	f00d fd29 	bl	800f4d2 <FreeRTOS_get_tx_head>
 8001a80:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d027      	beq.n	8001ad8 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d902      	bls.n	8001a9a <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a98:	e003      	b.n	8001aa2 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001aa6:	4413      	add	r3, r2
 8001aa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001aae:	f020 f98f 	bl	8021dd0 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001ab2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001aba:	f00d fe15 	bl	800f6e8 <FreeRTOS_send>
 8001abe:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0a      	blt.n	8001adc <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001ac6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001aca:	4413      	add	r3, r2
 8001acc:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d8ca      	bhi.n	8001a6c <vADCTCPTask+0x10c>
 8001ad6:	e002      	b.n	8001ade <vADCTCPTask+0x17e>
                        break;
 8001ad8:	bf00      	nop
 8001ada:	e000      	b.n	8001ade <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001adc:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001ade:	2102      	movs	r1, #2
 8001ae0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ae2:	f00d feb0 	bl	800f846 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001ae6:	e002      	b.n	8001aee <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f002 f93b 	bl	8003d64 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001af2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001af4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001af6:	f00d fc57 	bl	800f3a8 <FreeRTOS_recv>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	daf3      	bge.n	8001ae8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001b00:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b02:	f00c fb69 	bl	800e1d8 <FreeRTOS_closesocket>
    for(;;) {
 8001b06:	e754      	b.n	80019b2 <vADCTCPTask+0x52>
 8001b08:	08026fe8 	.word	0x08026fe8
 8001b0c:	08023b1c 	.word	0x08023b1c
 8001b10:	30010004 	.word	0x30010004
 8001b14:	30000004 	.word	0x30000004

08001b18 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b2a:	f018 f885 	bl	8019c38 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001b36:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001b3a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f018 f8a2 	bl	8019ca8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001b68:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b6c:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4618      	mov	r0, r3
 8001b72:	f018 f899 	bl	8019ca8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f018 f876 	bl	8019c68 <HAL_MPU_Enable>

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <Error_Handler+0x8>

08001b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <HAL_MspInit+0x30>)
 8001b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b9c:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x30>)
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x30>)
 8001ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	58024400 	.word	0x58024400

08001bc4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a61      	ldr	r2, [pc, #388]	@ (8001d68 <HAL_ETH_MspInit+0x1a4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	f040 80bb 	bne.w	8001d5e <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001be8:	4b60      	ldr	r3, [pc, #384]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bee:	4a5f      	ldr	r2, [pc, #380]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bf4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001c06:	4b59      	ldr	r3, [pc, #356]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c0c:	4a57      	ldr	r2, [pc, #348]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c16:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001c24:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c2a:	4a50      	ldr	r2, [pc, #320]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	61bb      	str	r3, [r7, #24]
 8001c40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c48:	4a48      	ldr	r2, [pc, #288]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b42      	ldr	r3, [pc, #264]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c66:	4a41      	ldr	r2, [pc, #260]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c84:	4a39      	ldr	r2, [pc, #228]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c8e:	4b37      	ldr	r3, [pc, #220]	@ (8001d6c <HAL_ETH_MspInit+0x1a8>)
 8001c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cac:	230b      	movs	r3, #11
 8001cae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482e      	ldr	r0, [pc, #184]	@ (8001d70 <HAL_ETH_MspInit+0x1ac>)
 8001cb8:	f019 ff3e 	bl	801bb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001cbc:	2306      	movs	r3, #6
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ccc:	230b      	movs	r3, #11
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <HAL_ETH_MspInit+0x1b0>)
 8001cd8:	f019 ff2e 	bl	801bb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cec:	230b      	movs	r3, #11
 8001cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481f      	ldr	r0, [pc, #124]	@ (8001d74 <HAL_ETH_MspInit+0x1b0>)
 8001cf8:	f019 ff1e 	bl	801bb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cfc:	2330      	movs	r3, #48	@ 0x30
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4816      	ldr	r0, [pc, #88]	@ (8001d70 <HAL_ETH_MspInit+0x1ac>)
 8001d18:	f019 ff0e 	bl	801bb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001d1c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2e:	230b      	movs	r3, #11
 8001d30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	480f      	ldr	r0, [pc, #60]	@ (8001d78 <HAL_ETH_MspInit+0x1b4>)
 8001d3a:	f019 fefd 	bl	801bb38 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	203d      	movs	r0, #61	@ 0x3d
 8001d44:	f017 ff43 	bl	8019bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001d48:	203d      	movs	r0, #61	@ 0x3d
 8001d4a:	f017 ff5a 	bl	8019c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2105      	movs	r1, #5
 8001d52:	203e      	movs	r0, #62	@ 0x3e
 8001d54:	f017 ff3b 	bl	8019bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001d58:	203e      	movs	r0, #62	@ 0x3e
 8001d5a:	f017 ff52 	bl	8019c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001d5e:	bf00      	nop
 8001d60:	3738      	adds	r7, #56	@ 0x38
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40028000 	.word	0x40028000
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020800 	.word	0x58020800
 8001d74:	58020000 	.word	0x58020000
 8001d78:	58020400 	.word	0x58020400

08001d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	22c0      	movs	r2, #192	@ 0xc0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f020 f924 	bl	8021fea <memset>
  if(hi2c->Instance==I2C4)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_I2C_MspInit+0xc8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d146      	bne.n	8001e3a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001dac:	f04f 0210 	mov.w	r2, #16
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbe:	f107 0310 	add.w	r3, r7, #16
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f01b f9d6 	bl	801d174 <HAL_RCCEx_PeriphCLKConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001dce:	f7ff fed9 	bl	8001b84 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de2:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001df0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001df4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e14:	4619      	mov	r1, r3
 8001e16:	480d      	ldr	r0, [pc, #52]	@ (8001e4c <HAL_I2C_MspInit+0xd0>)
 8001e18:	f019 fe8e 	bl	801bb38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_I2C_MspInit+0xcc>)
 8001e2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001e3a:	bf00      	nop
 8001e3c:	37e8      	adds	r7, #232	@ 0xe8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58001c00 	.word	0x58001c00
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	58020c00 	.word	0x58020c00

08001e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b090      	sub	sp, #64	@ 0x40
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a88      	ldr	r2, [pc, #544]	@ (8002090 <HAL_SPI_MspInit+0x240>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f040 8083 	bne.w	8001f7a <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e74:	4b87      	ldr	r3, [pc, #540]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e7a:	4a86      	ldr	r2, [pc, #536]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e84:	4b83      	ldr	r3, [pc, #524]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b80      	ldr	r3, [pc, #512]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e98:	4a7e      	ldr	r2, [pc, #504]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb0:	4b78      	ldr	r3, [pc, #480]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb6:	4a77      	ldr	r2, [pc, #476]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ec0:	4b74      	ldr	r3, [pc, #464]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ece:	2370      	movs	r3, #112	@ 0x70
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ede:	2305      	movs	r3, #5
 8001ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	486b      	ldr	r0, [pc, #428]	@ (8002098 <HAL_SPI_MspInit+0x248>)
 8001eea:	f019 fe25 	bl	801bb38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001eee:	2320      	movs	r3, #32
 8001ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efe:	2305      	movs	r3, #5
 8001f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f06:	4619      	mov	r1, r3
 8001f08:	4864      	ldr	r0, [pc, #400]	@ (800209c <HAL_SPI_MspInit+0x24c>)
 8001f0a:	f019 fe15 	bl	801bb38 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001f0e:	4b64      	ldr	r3, [pc, #400]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f10:	4a64      	ldr	r2, [pc, #400]	@ (80020a4 <HAL_SPI_MspInit+0x254>)
 8001f12:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001f14:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f16:	2225      	movs	r2, #37	@ 0x25
 8001f18:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f1a:	4b61      	ldr	r3, [pc, #388]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f20:	4b5f      	ldr	r3, [pc, #380]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f26:	4b5e      	ldr	r3, [pc, #376]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f34:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f36:	4b5a      	ldr	r3, [pc, #360]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001f3e:	4b58      	ldr	r3, [pc, #352]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f44:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f46:	4b56      	ldr	r3, [pc, #344]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f4c:	4b54      	ldr	r3, [pc, #336]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f52:	4853      	ldr	r0, [pc, #332]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f54:	f017 fee8 	bl	8019d28 <HAL_DMA_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001f5e:	f7ff fe11 	bl	8001b84 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4e      	ldr	r2, [pc, #312]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f68:	4a4d      	ldr	r2, [pc, #308]	@ (80020a0 <HAL_SPI_MspInit+0x250>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2023      	movs	r0, #35	@ 0x23
 8001f74:	f017 fe2b 	bl	8019bce <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f78:	e0f0      	b.n	800215c <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	@ (80020a8 <HAL_SPI_MspInit+0x258>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	f040 8097 	bne.w	80020b4 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f86:	4b43      	ldr	r3, [pc, #268]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f8c:	4a41      	ldr	r2, [pc, #260]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f96:	4b3f      	ldr	r3, [pc, #252]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001faa:	4a3a      	ldr	r2, [pc, #232]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb4:	4b37      	ldr	r3, [pc, #220]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc8:	4a32      	ldr	r2, [pc, #200]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fd2:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <HAL_SPI_MspInit+0x244>)
 8001fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001fe0:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4827      	ldr	r0, [pc, #156]	@ (800209c <HAL_SPI_MspInit+0x24c>)
 8001ffe:	f019 fd9b 	bl	801bb38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002002:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002014:	2305      	movs	r3, #5
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201c:	4619      	mov	r1, r3
 800201e:	481e      	ldr	r0, [pc, #120]	@ (8002098 <HAL_SPI_MspInit+0x248>)
 8002020:	f019 fd8a 	bl	801bb38 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002024:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002026:	4a22      	ldr	r2, [pc, #136]	@ (80020b0 <HAL_SPI_MspInit+0x260>)
 8002028:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800202a:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800202c:	2227      	movs	r2, #39	@ 0x27
 800202e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002030:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002036:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800203c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800203e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002042:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002044:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800204a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800204c:	4b17      	ldr	r3, [pc, #92]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800204e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002052:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002054:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800205a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800205c:	4b13      	ldr	r3, [pc, #76]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002062:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002068:	4810      	ldr	r0, [pc, #64]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800206a:	f017 fe5d 	bl	8019d28 <HAL_DMA_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8002074:	f7ff fd86 	bl	8001b84 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 800207c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800207e:	4a0b      	ldr	r2, [pc, #44]	@ (80020ac <HAL_SPI_MspInit+0x25c>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2024      	movs	r0, #36	@ 0x24
 800208a:	f017 fda0 	bl	8019bce <HAL_NVIC_SetPriority>
}
 800208e:	e065      	b.n	800215c <HAL_SPI_MspInit+0x30c>
 8002090:	40013000 	.word	0x40013000
 8002094:	58024400 	.word	0x58024400
 8002098:	58020000 	.word	0x58020000
 800209c:	58020400 	.word	0x58020400
 80020a0:	20000290 	.word	0x20000290
 80020a4:	40020010 	.word	0x40020010
 80020a8:	40003800 	.word	0x40003800
 80020ac:	20000308 	.word	0x20000308
 80020b0:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002164 <HAL_SPI_MspInit+0x314>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d14e      	bne.n	800215c <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020c4:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e2:	4a21      	ldr	r2, [pc, #132]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 80020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002100:	4a19      	ldr	r2, [pc, #100]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <HAL_SPI_MspInit+0x318>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800212a:	2306      	movs	r3, #6
 800212c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	@ (800216c <HAL_SPI_MspInit+0x31c>)
 8002136:	f019 fcff 	bl	801bb38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800213a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800214c:	2306      	movs	r3, #6
 800214e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002154:	4619      	mov	r1, r3
 8002156:	4806      	ldr	r0, [pc, #24]	@ (8002170 <HAL_SPI_MspInit+0x320>)
 8002158:	f019 fcee 	bl	801bb38 <HAL_GPIO_Init>
}
 800215c:	bf00      	nop
 800215e:	3740      	adds	r7, #64	@ 0x40
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40003c00 	.word	0x40003c00
 8002168:	58024400 	.word	0x58024400
 800216c:	58020000 	.word	0x58020000
 8002170:	58020800 	.word	0x58020800

08002174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a88      	ldr	r2, [pc, #544]	@ (80023a4 <HAL_TIM_Base_MspInit+0x230>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d13e      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002186:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800218c:	4a86      	ldr	r2, [pc, #536]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002196:	4b84      	ldr	r3, [pc, #528]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 80021a4:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021a6:	4a82      	ldr	r2, [pc, #520]	@ (80023b0 <HAL_TIM_Base_MspInit+0x23c>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 80021aa:	4b80      	ldr	r3, [pc, #512]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021ac:	220f      	movs	r2, #15
 80021ae:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b0:	4b7e      	ldr	r3, [pc, #504]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021b2:	2240      	movs	r2, #64	@ 0x40
 80021b4:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b6:	4b7d      	ldr	r3, [pc, #500]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 80021bc:	4b7b      	ldr	r3, [pc, #492]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021c2:	4b7a      	ldr	r3, [pc, #488]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021c8:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ca:	4b78      	ldr	r3, [pc, #480]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021d0:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80021d2:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021d8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80021da:	4b74      	ldr	r3, [pc, #464]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e0:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80021e6:	4871      	ldr	r0, [pc, #452]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021e8:	f017 fd9e 	bl	8019d28 <HAL_DMA_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80021f2:	f7ff fcc7 	bl	8001b84 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a6c      	ldr	r2, [pc, #432]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021fa:	621a      	str	r2, [r3, #32]
 80021fc:	4a6b      	ldr	r2, [pc, #428]	@ (80023ac <HAL_TIM_Base_MspInit+0x238>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002202:	e0cb      	b.n	800239c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220c:	d10f      	bne.n	800222e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220e:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002214:	4a64      	ldr	r2, [pc, #400]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800221e:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
}
 800222c:	e0b6      	b.n	800239c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM3)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a60      	ldr	r2, [pc, #384]	@ (80023b4 <HAL_TIM_Base_MspInit+0x240>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d13e      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002238:	4b5b      	ldr	r3, [pc, #364]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 800223a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800223e:	4a5a      	ldr	r2, [pc, #360]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002248:	4b57      	ldr	r3, [pc, #348]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 800224a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002256:	4b58      	ldr	r3, [pc, #352]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002258:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <HAL_TIM_Base_MspInit+0x248>)
 800225a:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 800225c:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 800225e:	221b      	movs	r2, #27
 8002260:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002262:	4b55      	ldr	r3, [pc, #340]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002264:	2240      	movs	r2, #64	@ 0x40
 8002266:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002268:	4b53      	ldr	r3, [pc, #332]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 800226e:	4b52      	ldr	r3, [pc, #328]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002274:	4b50      	ldr	r3, [pc, #320]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002276:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800227a:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800227c:	4b4e      	ldr	r3, [pc, #312]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 800227e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002282:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002284:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002286:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800228a:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 800228c:	4b4a      	ldr	r3, [pc, #296]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 800228e:	2200      	movs	r2, #0
 8002290:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002292:	4b49      	ldr	r3, [pc, #292]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 8002294:	2200      	movs	r2, #0
 8002296:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002298:	4847      	ldr	r0, [pc, #284]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 800229a:	f017 fd45 	bl	8019d28 <HAL_DMA_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80022a4:	f7ff fc6e 	bl	8001b84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a43      	ldr	r2, [pc, #268]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	4a42      	ldr	r2, [pc, #264]	@ (80023b8 <HAL_TIM_Base_MspInit+0x244>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022b4:	e072      	b.n	800239c <HAL_TIM_Base_MspInit+0x228>
  else if(htim_base->Instance==TIM4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a41      	ldr	r2, [pc, #260]	@ (80023c0 <HAL_TIM_Base_MspInit+0x24c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d16d      	bne.n	800239c <HAL_TIM_Base_MspInit+0x228>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022c0:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 80022c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c6:	4a38      	ldr	r2, [pc, #224]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022d0:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_TIM_Base_MspInit+0x234>)
 80022d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 80022de:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022e0:	4a39      	ldr	r2, [pc, #228]	@ (80023c8 <HAL_TIM_Base_MspInit+0x254>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 80022e4:	4b37      	ldr	r3, [pc, #220]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022e6:	221d      	movs	r2, #29
 80022e8:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ea:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022ec:	2240      	movs	r2, #64	@ 0x40
 80022ee:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f0:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 80022fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002302:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002304:	4b2f      	ldr	r3, [pc, #188]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 8002306:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800230a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800230c:	4b2d      	ldr	r3, [pc, #180]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 800230e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002312:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002314:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 8002316:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800231a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002322:	4828      	ldr	r0, [pc, #160]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 8002324:	f017 fd00 	bl	8019d28 <HAL_DMA_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_TIM_Base_MspInit+0x1be>
      Error_Handler();
 800232e:	f7ff fc29 	bl	8001b84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a23      	ldr	r2, [pc, #140]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24
 8002338:	4a22      	ldr	r2, [pc, #136]	@ (80023c4 <HAL_TIM_Base_MspInit+0x250>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 800233e:	4b23      	ldr	r3, [pc, #140]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_TIM_Base_MspInit+0x25c>)
 8002342:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002344:	4b21      	ldr	r3, [pc, #132]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002346:	2220      	movs	r2, #32
 8002348:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 800234c:	2240      	movs	r2, #64	@ 0x40
 800234e:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002356:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002358:	2200      	movs	r2, #0
 800235a:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 800235e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002362:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002364:	4b19      	ldr	r3, [pc, #100]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002366:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800236a:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 800236e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002372:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002380:	4812      	ldr	r0, [pc, #72]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002382:	f017 fcd1 	bl	8019d28 <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_TIM_Base_MspInit+0x21c>
      Error_Handler();
 800238c:	f7ff fbfa 	bl	8001b84 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <HAL_TIM_Base_MspInit+0x258>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40010000 	.word	0x40010000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	200004b0 	.word	0x200004b0
 80023b0:	40020040 	.word	0x40020040
 80023b4:	40000400 	.word	0x40000400
 80023b8:	20000528 	.word	0x20000528
 80023bc:	40020058 	.word	0x40020058
 80023c0:	40000800 	.word	0x40000800
 80023c4:	200005a0 	.word	0x200005a0
 80023c8:	40020070 	.word	0x40020070
 80023cc:	20000618 	.word	0x20000618
 80023d0:	40020088 	.word	0x40020088

080023d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	@ (800243c <HAL_TIM_MspPostInit+0x68>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11e      	bne.n	8002434 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_TIM_MspPostInit+0x6c>)
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	4a10      	ldr	r2, [pc, #64]	@ (8002440 <HAL_TIM_MspPostInit+0x6c>)
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_TIM_MspPostInit+0x6c>)
 8002408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002414:	23c0      	movs	r3, #192	@ 0xc0
 8002416:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002424:	2302      	movs	r3, #2
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <HAL_TIM_MspPostInit+0x70>)
 8002430:	f019 fb82 	bl	801bb38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40000800 	.word	0x40000800
 8002440:	58024400 	.word	0x58024400
 8002444:	58020400 	.word	0x58020400

08002448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b0ba      	sub	sp, #232	@ 0xe8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	22c0      	movs	r2, #192	@ 0xc0
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f01f fdbe 	bl	8021fea <memset>
  if(huart->Instance==USART3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a27      	ldr	r2, [pc, #156]	@ (8002510 <HAL_UART_MspInit+0xc8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d146      	bne.n	8002506 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002478:	f04f 0202 	mov.w	r2, #2
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f01a fe70 	bl	801d174 <HAL_RCCEx_PeriphCLKConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800249a:	f7ff fb73 	bl	8001b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80024b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024bc:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c2:	4a14      	ldr	r2, [pc, #80]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <HAL_UART_MspInit+0xcc>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f4:	2307      	movs	r3, #7
 80024f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	@ (8002518 <HAL_UART_MspInit+0xd0>)
 8002502:	f019 fb19 	bl	801bb38 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002506:	bf00      	nop
 8002508:	37e8      	adds	r7, #232	@ 0xe8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40004800 	.word	0x40004800
 8002514:	58024400 	.word	0x58024400
 8002518:	58020c00 	.word	0x58020c00

0800251c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <NMI_Handler+0x4>

08002524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <MemManage_Handler+0x4>

0800252c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <BusFault_Handler+0x4>

08002534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <UsageFault_Handler+0x4>

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254e:	f017 f9ff 	bl	8019950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002552:	f002 fadd 	bl	8004b10 <xTaskGetSchedulerState>
 8002556:	4603      	mov	r3, r0
 8002558:	2b02      	cmp	r3, #2
 800255a:	d101      	bne.n	8002560 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 800255c:	f003 fbbc 	bl	8005cd8 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 800256e:	4b19      	ldr	r3, [pc, #100]	@ (80025d4 <DMA1_Stream0_IRQHandler+0x70>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <DMA1_Stream0_IRQHandler+0x74>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e001      	b.n	8002594 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002590:	2301      	movs	r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002594:	4811      	ldr	r0, [pc, #68]	@ (80025dc <DMA1_Stream0_IRQHandler+0x78>)
 8002596:	f018 f969 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <DMA1_Stream0_IRQHandler+0x7c>)
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2300      	movs	r3, #0
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2301      	movs	r3, #1
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	2100      	movs	r1, #0
 80025b0:	f002 ff06 	bl	80053c0 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <DMA1_Stream0_IRQHandler+0x66>
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <DMA1_Stream0_IRQHandler+0x80>)
 80025bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020010 	.word	0x40020010
 80025dc:	20000290 	.word	0x20000290
 80025e0:	20000bf8 	.word	0x20000bf8
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80025ec:	4802      	ldr	r0, [pc, #8]	@ (80025f8 <DMA1_Stream1_IRQHandler+0x10>)
 80025ee:	f018 f93d 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000308 	.word	0x20000308

080025fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002600:	4802      	ldr	r0, [pc, #8]	@ (800260c <DMA1_Stream2_IRQHandler+0x10>)
 8002602:	f018 f933 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200004b0 	.word	0x200004b0

08002610 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002614:	4802      	ldr	r0, [pc, #8]	@ (8002620 <DMA1_Stream3_IRQHandler+0x10>)
 8002616:	f018 f929 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000528 	.word	0x20000528

08002624 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <DMA1_Stream4_IRQHandler+0x10>)
 800262a:	f018 f91f 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	200005a0 	.word	0x200005a0

08002638 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <DMA1_Stream5_IRQHandler+0x10>)
 800263e:	f018 f915 	bl	801a86c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000618 	.word	0x20000618

0800264c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <SPI1_IRQHandler+0x10>)
 8002652:	f01c fcdf 	bl	801f014 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200000f8 	.word	0x200000f8

08002660 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <SPI2_IRQHandler+0x10>)
 8002666:	f01c fcd5 	bl	801f014 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000180 	.word	0x20000180

08002674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return 1;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_kill>:

int _kill(int pid, int sig)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800268e:	f020 fbd3 	bl	8022e38 <__errno>
 8002692:	4603      	mov	r3, r0
 8002694:	2216      	movs	r2, #22
 8002696:	601a      	str	r2, [r3, #0]
  return -1;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_exit>:

void _exit (int status)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ffe7 	bl	8002684 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b6:	bf00      	nop
 80026b8:	e7fd      	b.n	80026b6 <_exit+0x12>

080026ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e00a      	b.n	80026e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026cc:	f3af 8000 	nop.w
 80026d0:	4601      	mov	r1, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dbf0      	blt.n	80026cc <_read+0x12>
  }

  return len;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e009      	b.n	800271a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	dbf1      	blt.n	8002706 <_write+0x12>
  }
  return len;
 8002722:	687b      	ldr	r3, [r7, #4]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_close>:

int _close(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002754:	605a      	str	r2, [r3, #4]
  return 0;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <_isatty>:

int _isatty(int file)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800276c:	2301      	movs	r3, #1
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	@ (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	@ (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f020 fb38 	bl	8022e38 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	@ (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	@ (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	24080000 	.word	0x24080000
 80027f4:	00000400 	.word	0x00000400
 80027f8:	20000c00 	.word	0x20000c00
 80027fc:	200026c0 	.word	0x200026c0

08002800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002806:	4b3f      	ldr	r3, [pc, #252]	@ (8002904 <SystemInit+0x104>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	4a3d      	ldr	r2, [pc, #244]	@ (8002904 <SystemInit+0x104>)
 800280e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002812:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002816:	4b3c      	ldr	r3, [pc, #240]	@ (8002908 <SystemInit+0x108>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	2b06      	cmp	r3, #6
 8002820:	d807      	bhi.n	8002832 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002822:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <SystemInit+0x108>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 030f 	bic.w	r3, r3, #15
 800282a:	4a37      	ldr	r2, [pc, #220]	@ (8002908 <SystemInit+0x108>)
 800282c:	f043 0307 	orr.w	r3, r3, #7
 8002830:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002832:	4b36      	ldr	r3, [pc, #216]	@ (800290c <SystemInit+0x10c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a35      	ldr	r2, [pc, #212]	@ (800290c <SystemInit+0x10c>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800283e:	4b33      	ldr	r3, [pc, #204]	@ (800290c <SystemInit+0x10c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002844:	4b31      	ldr	r3, [pc, #196]	@ (800290c <SystemInit+0x10c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4930      	ldr	r1, [pc, #192]	@ (800290c <SystemInit+0x10c>)
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <SystemInit+0x110>)
 800284c:	4013      	ands	r3, r2
 800284e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <SystemInit+0x108>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800285c:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <SystemInit+0x108>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 030f 	bic.w	r3, r3, #15
 8002864:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <SystemInit+0x108>)
 8002866:	f043 0307 	orr.w	r3, r3, #7
 800286a:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800286c:	4b27      	ldr	r3, [pc, #156]	@ (800290c <SystemInit+0x10c>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002872:	4b26      	ldr	r3, [pc, #152]	@ (800290c <SystemInit+0x10c>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002878:	4b24      	ldr	r3, [pc, #144]	@ (800290c <SystemInit+0x10c>)
 800287a:	2200      	movs	r2, #0
 800287c:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <SystemInit+0x10c>)
 8002880:	4a24      	ldr	r2, [pc, #144]	@ (8002914 <SystemInit+0x114>)
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <SystemInit+0x10c>)
 8002886:	4a24      	ldr	r2, [pc, #144]	@ (8002918 <SystemInit+0x118>)
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <SystemInit+0x10c>)
 800288c:	4a23      	ldr	r2, [pc, #140]	@ (800291c <SystemInit+0x11c>)
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002890:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <SystemInit+0x10c>)
 8002892:	2200      	movs	r2, #0
 8002894:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <SystemInit+0x10c>)
 8002898:	4a20      	ldr	r2, [pc, #128]	@ (800291c <SystemInit+0x11c>)
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <SystemInit+0x10c>)
 800289e:	2200      	movs	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <SystemInit+0x10c>)
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <SystemInit+0x11c>)
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80028a8:	4b18      	ldr	r3, [pc, #96]	@ (800290c <SystemInit+0x10c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028ae:	4b17      	ldr	r3, [pc, #92]	@ (800290c <SystemInit+0x10c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a16      	ldr	r2, [pc, #88]	@ (800290c <SystemInit+0x10c>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80028ba:	4b14      	ldr	r3, [pc, #80]	@ (800290c <SystemInit+0x10c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80028c0:	4b17      	ldr	r3, [pc, #92]	@ (8002920 <SystemInit+0x120>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <SystemInit+0x124>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028cc:	d202      	bcs.n	80028d4 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028ce:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <SystemInit+0x128>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80028d4:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <SystemInit+0x10c>)
 80028d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80028da:	4a0c      	ldr	r2, [pc, #48]	@ (800290c <SystemInit+0x10c>)
 80028dc:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 80028e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 80028e4:	4b09      	ldr	r3, [pc, #36]	@ (800290c <SystemInit+0x10c>)
 80028e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80028ea:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80028ec:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028ee:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <SystemInit+0x12c>)
 80028f0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00
 8002908:	52002000 	.word	0x52002000
 800290c:	58024400 	.word	0x58024400
 8002910:	eaf6ed7f 	.word	0xeaf6ed7f
 8002914:	02020200 	.word	0x02020200
 8002918:	01ff0000 	.word	0x01ff0000
 800291c:	01010280 	.word	0x01010280
 8002920:	5c001000 	.word	0x5c001000
 8002924:	ffff0000 	.word	0xffff0000
 8002928:	51008108 	.word	0x51008108
 800292c:	52004000 	.word	0x52004000

08002930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002934:	f7ff ff64 	bl	8002800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	@ (800297c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295e:	f020 fa71 	bl	8022e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002962:	f7fd fe9d 	bl	80006a0 <main>
  bx  lr
 8002966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002968:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002974:	08027348 	.word	0x08027348
  ldr r2, =_sbss
 8002978:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800297c:	200026c0 	.word	0x200026c0

08002980 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC3_IRQHandler>

08002982 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002988:	201c      	movs	r0, #28
 800298a:	f003 fa23 	bl	8005dd4 <pvPortMalloc>
 800298e:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f9c3 	bl	8002d2c <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80029a6:	687b      	ldr	r3, [r7, #4]
        }
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	@ 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <xEventGroupWaitBits+0x2a>
 80029d0:	f240 1147 	movw	r1, #327	@ 0x147
 80029d4:	4850      	ldr	r0, [pc, #320]	@ (8002b18 <xEventGroupWaitBits+0x168>)
 80029d6:	f7fe feb7 	bl	8001748 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029e0:	d304      	bcc.n	80029ec <xEventGroupWaitBits+0x3c>
 80029e2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80029e6:	484c      	ldr	r0, [pc, #304]	@ (8002b18 <xEventGroupWaitBits+0x168>)
 80029e8:	f7fe feae 	bl	8001748 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <xEventGroupWaitBits+0x4c>
 80029f2:	f240 1149 	movw	r1, #329	@ 0x149
 80029f6:	4848      	ldr	r0, [pc, #288]	@ (8002b18 <xEventGroupWaitBits+0x168>)
 80029f8:	f7fe fea6 	bl	8001748 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029fc:	f002 f888 	bl	8004b10 <xTaskGetSchedulerState>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <xEventGroupWaitBits+0x5c>
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <xEventGroupWaitBits+0x60>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <xEventGroupWaitBits+0x62>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <xEventGroupWaitBits+0x70>
 8002a16:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002a1a:	483f      	ldr	r0, [pc, #252]	@ (8002b18 <xEventGroupWaitBits+0x168>)
 8002a1c:	f7fe fe94 	bl	8001748 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002a20:	f001 fa58 	bl	8003ed4 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	69f8      	ldr	r0, [r7, #28]
 8002a30:	f000 f95a 	bl	8002ce8 <prvTestWaitCondition>
 8002a34:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d028      	beq.n	8002a9c <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	e020      	b.n	8002a9c <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	e018      	b.n	8002a9c <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a84:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1d18      	adds	r0, r3, #4
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a92:	4619      	mov	r1, r3
 8002a94:	f001 fd06 	bl	80044a4 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002a9c:	f001 fa28 	bl	8003ef0 <xTaskResumeAll>
 8002aa0:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d031      	beq.n	8002b0c <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <xEventGroupWaitBits+0x16c>)
 8002ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8002abe:	f002 fa31 	bl	8004f24 <uxTaskResetEventItemValue>
 8002ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11a      	bne.n	8002b04 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 8002ace:	f003 f87f 	bl	8005bd0 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ade:	f000 f903 	bl	8002ce8 <prvTestWaitCondition>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d009      	beq.n	8002afc <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	401a      	ands	r2, r3
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002b00:	f003 f892 	bl	8005c28 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3730      	adds	r7, #48	@ 0x30
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08023ba4 	.word	0x08023ba4
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <xEventGroupClearBits+0x1e>
 8002b34:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002b38:	480f      	ldr	r0, [pc, #60]	@ (8002b78 <xEventGroupClearBits+0x58>)
 8002b3a:	f7fe fe05 	bl	8001748 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b44:	d304      	bcc.n	8002b50 <xEventGroupClearBits+0x30>
 8002b46:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002b4a:	480b      	ldr	r0, [pc, #44]	@ (8002b78 <xEventGroupClearBits+0x58>)
 8002b4c:	f7fe fdfc 	bl	8001748 <vAssertCalled>

        taskENTER_CRITICAL();
 8002b50:	f003 f83e 	bl	8005bd0 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002b68:	f003 f85e 	bl	8005c28 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
    }
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08023ba4 	.word	0x08023ba4

08002b7c <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <xEventGroupSetBits+0x26>
 8002b98:	f240 2132 	movw	r1, #562	@ 0x232
 8002b9c:	4836      	ldr	r0, [pc, #216]	@ (8002c78 <xEventGroupSetBits+0xfc>)
 8002b9e:	f7fe fdd3 	bl	8001748 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba8:	d304      	bcc.n	8002bb4 <xEventGroupSetBits+0x38>
 8002baa:	f240 2133 	movw	r1, #563	@ 0x233
 8002bae:	4832      	ldr	r0, [pc, #200]	@ (8002c78 <xEventGroupSetBits+0xfc>)
 8002bb0:	f7fe fdca 	bl	8001748 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8002bc0:	f001 f988 	bl	8003ed4 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002bd6:	e03c      	b.n	8002c52 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002bee:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bf6:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d108      	bne.n	8002c14 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	e008      	b.n	8002c26 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d101      	bne.n	8002c26 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8002c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c46:	4619      	mov	r1, r3
 8002c48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c4a:	f001 fd49 	bl	80046e0 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8002c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d1be      	bne.n	8002bd8 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	43db      	mvns	r3, r3
 8002c62:	401a      	ands	r2, r3
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 8002c68:	f001 f942 	bl	8003ef0 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	681b      	ldr	r3, [r3, #0]
    }
 8002c70:	4618      	mov	r0, r3
 8002c72:	3730      	adds	r7, #48	@ 0x30
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08023ba4 	.word	0x08023ba4

08002c7c <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <vEventGroupDelete+0x1c>
 8002c8e:	f240 218e 	movw	r1, #654	@ 0x28e
 8002c92:	4814      	ldr	r0, [pc, #80]	@ (8002ce4 <vEventGroupDelete+0x68>)
 8002c94:	f7fe fd58 	bl	8001748 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8002c9e:	f001 f919 	bl	8003ed4 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002ca2:	e011      	b.n	8002cc8 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3308      	adds	r3, #8
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d104      	bne.n	8002cba <vEventGroupDelete+0x3e>
 8002cb0:	f240 219a 	movw	r1, #666	@ 0x29a
 8002cb4:	480b      	ldr	r0, [pc, #44]	@ (8002ce4 <vEventGroupDelete+0x68>)
 8002cb6:	f7fe fd47 	bl	8001748 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fd0c 	bl	80046e0 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e9      	bne.n	8002ca4 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8002cd0:	f001 f90e 	bl	8003ef0 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f003 f951 	bl	8005f7c <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08023ba4 	.word	0x08023ba4

08002ce8 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d107      	bne.n	8002d0e <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e007      	b.n	8002d1e <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d101      	bne.n	8002d1e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8002d1e:	697b      	ldr	r3, [r7, #20]
    }
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f103 0208 	add.w	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f103 0208 	add.w	r2, r3, #8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 0208 	add.w	r2, r3, #8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d103      	bne.n	8002dee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e00c      	b.n	8002e08 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3308      	adds	r3, #8
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e002      	b.n	8002dfc <vListInsert+0x2e>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d2f6      	bcs.n	8002df6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6852      	ldr	r2, [r2, #4]
 8002e60:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d103      	bne.n	8002e74 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <xQueueGenericReset+0x22>
 8002eac:	f240 1137 	movw	r1, #311	@ 0x137
 8002eb0:	4839      	ldr	r0, [pc, #228]	@ (8002f98 <xQueueGenericReset+0x104>)
 8002eb2:	f7fe fc49 	bl	8001748 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05d      	beq.n	8002f78 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d059      	beq.n	8002f78 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ecc:	2100      	movs	r1, #0
 8002ece:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d000      	beq.n	8002ed8 <xQueueGenericReset+0x44>
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d14c      	bne.n	8002f78 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8002ede:	f002 fe77 	bl	8005bd0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	441a      	add	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	441a      	add	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	22ff      	movs	r2, #255	@ 0xff
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	22ff      	movs	r2, #255	@ 0xff
 8002f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d114      	bne.n	8002f5e <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01a      	beq.n	8002f72 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3310      	adds	r3, #16
 8002f40:	4618      	mov	r0, r3
 8002f42:	f001 fafb 	bl	800453c <xTaskRemoveFromEventList>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f4c:	4b13      	ldr	r3, [pc, #76]	@ (8002f9c <xQueueGenericReset+0x108>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	e009      	b.n	8002f72 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	3310      	adds	r3, #16
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fee2 	bl	8002d2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3324      	adds	r3, #36	@ 0x24
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fedd 	bl	8002d2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f72:	f002 fe59 	bl	8005c28 <vPortExitCritical>
 8002f76:	e001      	b.n	8002f7c <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <xQueueGenericReset+0xf8>
 8002f82:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002f86:	4804      	ldr	r0, [pc, #16]	@ (8002f98 <xQueueGenericReset+0x104>)
 8002f88:	f7fe fbde 	bl	8001748 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08023bd0 	.word	0x08023bd0
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02e      	beq.n	8003016 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fb8:	2100      	movs	r1, #0
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d000      	beq.n	8002fc8 <xQueueGenericCreate+0x28>
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d123      	bne.n	8003016 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fd6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002fda:	d81c      	bhi.n	8003016 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	fb02 f303 	mul.w	r3, r2, r3
 8002fe4:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	3350      	adds	r3, #80	@ 0x50
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 fef2 	bl	8005dd4 <pvPortMalloc>
 8002ff0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d016      	beq.n	8003026 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3350      	adds	r3, #80	@ 0x50
 8003000:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003002:	79fa      	ldrb	r2, [r7, #7]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	4613      	mov	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f810 	bl	8003034 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003014:	e007      	b.n	8003026 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <xQueueGenericCreate+0x86>
 800301c:	f240 212a 	movw	r1, #554	@ 0x22a
 8003020:	4803      	ldr	r0, [pc, #12]	@ (8003030 <xQueueGenericCreate+0x90>)
 8003022:	f7fe fb91 	bl	8001748 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003026:	69fb      	ldr	r3, [r7, #28]
    }
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	08023bd0 	.word	0x08023bd0

08003034 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d103      	bne.n	8003050 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e002      	b.n	8003056 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003062:	2101      	movs	r1, #1
 8003064:	69b8      	ldr	r0, [r7, #24]
 8003066:	f7ff ff15 	bl	8002e94 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800309a:	2300      	movs	r3, #0
 800309c:	2200      	movs	r2, #0
 800309e:	2100      	movs	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f847 	bl	8003134 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b086      	sub	sp, #24
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	461a      	mov	r2, r3
 80030c4:	6939      	ldr	r1, [r7, #16]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff6a 	bl	8002fa0 <xQueueGenericCreate>
 80030cc:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff ffd3 	bl	800307a <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 80030d4:	68fb      	ldr	r3, [r7, #12]
    }
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d010      	beq.n	8003116 <xQueueCreateCountingSemaphore+0x36>
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d80c      	bhi.n	8003116 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80030fc:	2202      	movs	r2, #2
 80030fe:	2100      	movs	r1, #0
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff ff4d 	bl	8002fa0 <xQueueGenericCreate>
 8003106:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003114:	e007      	b.n	8003126 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <xQueueCreateCountingSemaphore+0x46>
 800311c:	f240 319f 	movw	r1, #927	@ 0x39f
 8003120:	4803      	ldr	r0, [pc, #12]	@ (8003130 <xQueueCreateCountingSemaphore+0x50>)
 8003122:	f7fe fb11 	bl	8001748 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003126:	68fb      	ldr	r3, [r7, #12]
    }
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	08023bd0 	.word	0x08023bd0

08003134 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <xQueueGenericSend+0x26>
 8003150:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003154:	4869      	ldr	r0, [pc, #420]	@ (80032fc <xQueueGenericSend+0x1c8>)
 8003156:	f7fe faf7 	bl	8001748 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <xQueueGenericSend+0x34>
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <xQueueGenericSend+0x38>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <xQueueGenericSend+0x3a>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <xQueueGenericSend+0x48>
 8003172:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003176:	4861      	ldr	r0, [pc, #388]	@ (80032fc <xQueueGenericSend+0x1c8>)
 8003178:	f7fe fae6 	bl	8001748 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d103      	bne.n	800318a <xQueueGenericSend+0x56>
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <xQueueGenericSend+0x5a>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <xQueueGenericSend+0x5c>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <xQueueGenericSend+0x6a>
 8003194:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003198:	4858      	ldr	r0, [pc, #352]	@ (80032fc <xQueueGenericSend+0x1c8>)
 800319a:	f7fe fad5 	bl	8001748 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800319e:	f001 fcb7 	bl	8004b10 <xTaskGetSchedulerState>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <xQueueGenericSend+0x7a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <xQueueGenericSend+0x7e>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <xQueueGenericSend+0x80>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <xQueueGenericSend+0x8e>
 80031b8:	f240 31bb 	movw	r1, #955	@ 0x3bb
 80031bc:	484f      	ldr	r0, [pc, #316]	@ (80032fc <xQueueGenericSend+0x1c8>)
 80031be:	f7fe fac3 	bl	8001748 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031c2:	f002 fd05 	bl	8005bd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <xQueueGenericSend+0xa4>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d129      	bne.n	800322c <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	68b9      	ldr	r1, [r7, #8]
 80031dc:	6a38      	ldr	r0, [r7, #32]
 80031de:	f000 fabb 	bl	8003758 <prvCopyDataToQueue>
 80031e2:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	3324      	adds	r3, #36	@ 0x24
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f9a3 	bl	800453c <xTaskRemoveFromEventList>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80031fc:	4b40      	ldr	r3, [pc, #256]	@ (8003300 <xQueueGenericSend+0x1cc>)
 80031fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	e00a      	b.n	8003224 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003214:	4b3a      	ldr	r3, [pc, #232]	@ (8003300 <xQueueGenericSend+0x1cc>)
 8003216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003224:	f002 fd00 	bl	8005c28 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003228:	2301      	movs	r3, #1
 800322a:	e063      	b.n	80032f4 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003232:	f002 fcf9 	bl	8005c28 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003236:	2300      	movs	r3, #0
 8003238:	e05c      	b.n	80032f4 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fb23 	bl	8004890 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800324e:	f002 fceb 	bl	8005c28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003252:	f000 fe3f 	bl	8003ed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003256:	f002 fcbb 	bl	8005bd0 <vPortEnterCritical>
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003260:	b25b      	sxtb	r3, r3
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d103      	bne.n	8003270 <xQueueGenericSend+0x13c>
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003276:	b25b      	sxtb	r3, r3
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d103      	bne.n	8003286 <xQueueGenericSend+0x152>
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003286:	f002 fccf 	bl	8005c28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800328a:	1d3a      	adds	r2, r7, #4
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f001 fb12 	bl	80048bc <xTaskCheckForTimeOut>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d124      	bne.n	80032e8 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800329e:	6a38      	ldr	r0, [r7, #32]
 80032a0:	f000 fb52 	bl	8003948 <prvIsQueueFull>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d018      	beq.n	80032dc <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	3310      	adds	r3, #16
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f8d6 	bl	8004464 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80032b8:	6a38      	ldr	r0, [r7, #32]
 80032ba:	f000 fadd 	bl	8003878 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80032be:	f000 fe17 	bl	8003ef0 <xTaskResumeAll>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f af7c 	bne.w	80031c2 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 80032ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003300 <xQueueGenericSend+0x1cc>)
 80032cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	e772      	b.n	80031c2 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80032dc:	6a38      	ldr	r0, [r7, #32]
 80032de:	f000 facb 	bl	8003878 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80032e2:	f000 fe05 	bl	8003ef0 <xTaskResumeAll>
 80032e6:	e76c      	b.n	80031c2 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80032e8:	6a38      	ldr	r0, [r7, #32]
 80032ea:	f000 fac5 	bl	8003878 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80032ee:	f000 fdff 	bl	8003ef0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 80032f2:	2300      	movs	r3, #0
        }
    }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	@ 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	08023bd0 	.word	0x08023bd0
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d104      	bne.n	8003328 <xQueueReceive+0x24>
 800331e:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003322:	485e      	ldr	r0, [pc, #376]	@ (800349c <xQueueReceive+0x198>)
 8003324:	f7fe fa10 	bl	8001748 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <xQueueReceive+0x32>
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <xQueueReceive+0x36>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <xQueueReceive+0x38>
 800333a:	2300      	movs	r3, #0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <xQueueReceive+0x46>
 8003340:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003344:	4855      	ldr	r0, [pc, #340]	@ (800349c <xQueueReceive+0x198>)
 8003346:	f7fe f9ff 	bl	8001748 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800334a:	f001 fbe1 	bl	8004b10 <xTaskGetSchedulerState>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <xQueueReceive+0x56>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xQueueReceive+0x5a>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueReceive+0x5c>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <xQueueReceive+0x6a>
 8003364:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003368:	484c      	ldr	r0, [pc, #304]	@ (800349c <xQueueReceive+0x198>)
 800336a:	f7fe f9ed 	bl	8001748 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800336e:	f002 fc2f 	bl	8005bd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d01f      	beq.n	80033be <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	6a38      	ldr	r0, [r7, #32]
 8003382:	f000 fa53 	bl	800382c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	1e5a      	subs	r2, r3, #1
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	3310      	adds	r3, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f001 f8ce 	bl	800453c <xTaskRemoveFromEventList>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80033a6:	4b3e      	ldr	r3, [pc, #248]	@ (80034a0 <xQueueReceive+0x19c>)
 80033a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033b6:	f002 fc37 	bl	8005c28 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e069      	b.n	8003492 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80033c4:	f002 fc30 	bl	8005c28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e062      	b.n	8003492 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 fa5a 	bl	8004890 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80033dc:	2301      	movs	r3, #1
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80033e0:	f002 fc22 	bl	8005c28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80033e4:	f000 fd76 	bl	8003ed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033e8:	f002 fbf2 	bl	8005bd0 <vPortEnterCritical>
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d103      	bne.n	8003402 <xQueueReceive+0xfe>
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003408:	b25b      	sxtb	r3, r3
 800340a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340e:	d103      	bne.n	8003418 <xQueueReceive+0x114>
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003418:	f002 fc06 	bl	8005c28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800341c:	1d3a      	adds	r2, r7, #4
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f001 fa49 	bl	80048bc <xTaskCheckForTimeOut>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d123      	bne.n	8003478 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003430:	6a38      	ldr	r0, [r7, #32]
 8003432:	f000 fa73 	bl	800391c <prvIsQueueEmpty>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	3324      	adds	r3, #36	@ 0x24
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f80d 	bl	8004464 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800344a:	6a38      	ldr	r0, [r7, #32]
 800344c:	f000 fa14 	bl	8003878 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003450:	f000 fd4e 	bl	8003ef0 <xTaskResumeAll>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d189      	bne.n	800336e <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <xQueueReceive+0x19c>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	e780      	b.n	800336e <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800346c:	6a38      	ldr	r0, [r7, #32]
 800346e:	f000 fa03 	bl	8003878 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003472:	f000 fd3d 	bl	8003ef0 <xTaskResumeAll>
 8003476:	e77a      	b.n	800336e <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003478:	6a38      	ldr	r0, [r7, #32]
 800347a:	f000 f9fd 	bl	8003878 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800347e:	f000 fd37 	bl	8003ef0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003482:	6a38      	ldr	r0, [r7, #32]
 8003484:	f000 fa4a 	bl	800391c <prvIsQueueEmpty>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	f43f af6f 	beq.w	800336e <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003490:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3728      	adds	r7, #40	@ 0x28
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	08023bd0 	.word	0x08023bd0
 80034a0:	e000ed04 	.word	0xe000ed04

080034a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08a      	sub	sp, #40	@ 0x28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d104      	bne.n	80034ca <xQueueSemaphoreTake+0x26>
 80034c0:	f240 6182 	movw	r1, #1666	@ 0x682
 80034c4:	486c      	ldr	r0, [pc, #432]	@ (8003678 <xQueueSemaphoreTake+0x1d4>)
 80034c6:	f7fe f93f 	bl	8001748 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <xQueueSemaphoreTake+0x38>
 80034d2:	f240 6186 	movw	r1, #1670	@ 0x686
 80034d6:	4868      	ldr	r0, [pc, #416]	@ (8003678 <xQueueSemaphoreTake+0x1d4>)
 80034d8:	f7fe f936 	bl	8001748 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034dc:	f001 fb18 	bl	8004b10 <xTaskGetSchedulerState>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <xQueueSemaphoreTake+0x48>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <xQueueSemaphoreTake+0x4c>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <xQueueSemaphoreTake+0x4e>
 80034f0:	2300      	movs	r3, #0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <xQueueSemaphoreTake+0x5c>
 80034f6:	f240 618b 	movw	r1, #1675	@ 0x68b
 80034fa:	485f      	ldr	r0, [pc, #380]	@ (8003678 <xQueueSemaphoreTake+0x1d4>)
 80034fc:	f7fe f924 	bl	8001748 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003500:	f002 fb66 	bl	8005bd0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d024      	beq.n	800355a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d104      	bne.n	800352a <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003520:	f001 fd18 	bl	8004f54 <pvTaskIncrementMutexHeldCount>
 8003524:	4602      	mov	r2, r0
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00f      	beq.n	8003552 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3310      	adds	r3, #16
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f800 	bl	800453c <xTaskRemoveFromEventList>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003542:	4b4e      	ldr	r3, [pc, #312]	@ (800367c <xQueueSemaphoreTake+0x1d8>)
 8003544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003552:	f002 fb69 	bl	8005c28 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003556:	2301      	movs	r3, #1
 8003558:	e089      	b.n	800366e <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003560:	f002 fb62 	bl	8005c28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003564:	2300      	movs	r3, #0
 8003566:	e082      	b.n	800366e <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800356e:	f107 030c 	add.w	r3, r7, #12
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f98c 	bl	8004890 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800357c:	f002 fb54 	bl	8005c28 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003580:	f000 fca8 	bl	8003ed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003584:	f002 fb24 	bl	8005bd0 <vPortEnterCritical>
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800358e:	b25b      	sxtb	r3, r3
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d103      	bne.n	800359e <xQueueSemaphoreTake+0xfa>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d103      	bne.n	80035b4 <xQueueSemaphoreTake+0x110>
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b4:	f002 fb38 	bl	8005c28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035b8:	463a      	mov	r2, r7
 80035ba:	f107 030c 	add.w	r3, r7, #12
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f001 f97b 	bl	80048bc <xTaskCheckForTimeOut>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d132      	bne.n	8003632 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035cc:	69f8      	ldr	r0, [r7, #28]
 80035ce:	f000 f9a5 	bl	800391c <prvIsQueueEmpty>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d026      	beq.n	8003626 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 80035e0:	f002 faf6 	bl	8005bd0 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 faaf 	bl	8004b4c <xTaskPriorityInherit>
 80035ee:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 80035f0:	f002 fb1a 	bl	8005c28 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3324      	adds	r3, #36	@ 0x24
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 ff31 	bl	8004464 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003602:	69f8      	ldr	r0, [r7, #28]
 8003604:	f000 f938 	bl	8003878 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003608:	f000 fc72 	bl	8003ef0 <xTaskResumeAll>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f47f af76 	bne.w	8003500 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003614:	4b19      	ldr	r3, [pc, #100]	@ (800367c <xQueueSemaphoreTake+0x1d8>)
 8003616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	e76c      	b.n	8003500 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003626:	69f8      	ldr	r0, [r7, #28]
 8003628:	f000 f926 	bl	8003878 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800362c:	f000 fc60 	bl	8003ef0 <xTaskResumeAll>
 8003630:	e766      	b.n	8003500 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003632:	69f8      	ldr	r0, [r7, #28]
 8003634:	f000 f920 	bl	8003878 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003638:	f000 fc5a 	bl	8003ef0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800363c:	69f8      	ldr	r0, [r7, #28]
 800363e:	f000 f96d 	bl	800391c <prvIsQueueEmpty>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	f43f af5b 	beq.w	8003500 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003650:	f002 fabe 	bl	8005bd0 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003654:	69f8      	ldr	r0, [r7, #28]
 8003656:	f000 f867 	bl	8003728 <prvGetDisinheritPriorityAfterTimeout>
 800365a:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	6979      	ldr	r1, [r7, #20]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fbae 	bl	8004dc4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003668:	f002 fade 	bl	8005c28 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800366c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	@ 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08023bd0 	.word	0x08023bd0
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <uxQueueMessagesWaiting+0x18>
 800368e:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003692:	4807      	ldr	r0, [pc, #28]	@ (80036b0 <uxQueueMessagesWaiting+0x30>)
 8003694:	f7fe f858 	bl	8001748 <vAssertCalled>

    taskENTER_CRITICAL();
 8003698:	f002 fa9a 	bl	8005bd0 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80036a2:	f002 fac1 	bl	8005c28 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80036a6:	68fb      	ldr	r3, [r7, #12]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08023bd0 	.word	0x08023bd0

080036b4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <uxQueueSpacesAvailable+0x1c>
 80036c6:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 80036ca:	4809      	ldr	r0, [pc, #36]	@ (80036f0 <uxQueueSpacesAvailable+0x3c>)
 80036cc:	f7fe f83c 	bl	8001748 <vAssertCalled>

    taskENTER_CRITICAL();
 80036d0:	f002 fa7e 	bl	8005bd0 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 80036e0:	f002 faa2 	bl	8005c28 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 80036e4:	68bb      	ldr	r3, [r7, #8]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	08023bd0 	.word	0x08023bd0

080036f4 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d104      	bne.n	8003710 <vQueueDelete+0x1c>
 8003706:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800370a:	4806      	ldr	r0, [pc, #24]	@ (8003724 <vQueueDelete+0x30>)
 800370c:	f7fe f81c 	bl	8001748 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f979 	bl	8003a08 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f002 fc30 	bl	8005f7c <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800371c:	bf00      	nop
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	08023bd0 	.word	0x08023bd0

08003728 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e001      	b.n	800374a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800374a:	68fb      	ldr	r3, [r7, #12]
    }
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d14d      	bne.n	800381a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f001 fa82 	bl	8004c8c <xTaskPriorityDisinherit>
 8003788:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e043      	b.n	800381a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d119      	bne.n	80037cc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6858      	ldr	r0, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	461a      	mov	r2, r3
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	f01e fb14 	bl	8021dd0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d32b      	bcc.n	800381a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e026      	b.n	800381a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68d8      	ldr	r0, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	461a      	mov	r2, r3
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	f01e fafa 	bl	8021dd0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	425b      	negs	r3, r3
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d207      	bcs.n	8003808 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	425b      	negs	r3, r3
 8003802:	441a      	add	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d105      	bne.n	800381a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	3b01      	subs	r3, #1
 8003818:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003822:	697b      	ldr	r3, [r7, #20]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	429a      	cmp	r2, r3
 8003856:	d303      	bcc.n	8003860 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68d9      	ldr	r1, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	461a      	mov	r2, r3
 800386a:	6838      	ldr	r0, [r7, #0]
 800386c:	f01e fab0 	bl	8021dd0 <memcpy>
    }
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003880:	f002 f9a6 	bl	8005bd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800388a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800388c:	e011      	b.n	80038b2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d012      	beq.n	80038bc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3324      	adds	r3, #36	@ 0x24
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fe4e 	bl	800453c <xTaskRemoveFromEventList>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80038a6:	f001 f865 	bl	8004974 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	dce9      	bgt.n	800388e <prvUnlockQueue+0x16>
 80038ba:	e000      	b.n	80038be <prvUnlockQueue+0x46>
                    break;
 80038bc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	22ff      	movs	r2, #255	@ 0xff
 80038c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80038c6:	f002 f9af 	bl	8005c28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80038ca:	f002 f981 	bl	8005bd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038d4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d6:	e011      	b.n	80038fc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d012      	beq.n	8003906 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3310      	adds	r3, #16
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fe29 	bl	800453c <xTaskRemoveFromEventList>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80038f0:	f001 f840 	bl	8004974 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80038f4:	7bbb      	ldrb	r3, [r7, #14]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80038fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003900:	2b00      	cmp	r3, #0
 8003902:	dce9      	bgt.n	80038d8 <prvUnlockQueue+0x60>
 8003904:	e000      	b.n	8003908 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003906:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	22ff      	movs	r2, #255	@ 0xff
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003910:	f002 f98a 	bl	8005c28 <vPortExitCritical>
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003924:	f002 f954 	bl	8005bd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	2b00      	cmp	r3, #0
 800392e:	d102      	bne.n	8003936 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003930:	2301      	movs	r3, #1
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e001      	b.n	800393a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800393a:	f002 f975 	bl	8005c28 <vPortExitCritical>

    return xReturn;
 800393e:	68fb      	ldr	r3, [r7, #12]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003950:	f002 f93e 	bl	8005bd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	429a      	cmp	r2, r3
 800395e:	d102      	bne.n	8003966 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003960:	2301      	movs	r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e001      	b.n	800396a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800396a:	f002 f95d 	bl	8005c28 <vPortExitCritical>

    return xReturn;
 800396e:	68fb      	ldr	r3, [r7, #12]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <vQueueAddToRegistry+0x1e>
 800398c:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8003990:	481b      	ldr	r0, [pc, #108]	@ (8003a00 <vQueueAddToRegistry+0x88>)
 8003992:	f7fd fed9 	bl	8001748 <vAssertCalled>

        if( pcQueueName != NULL )
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d024      	beq.n	80039e6 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e01e      	b.n	80039e0 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80039a2:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <vQueueAddToRegistry+0x8c>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d105      	bne.n	80039be <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <vQueueAddToRegistry+0x8c>)
 80039b8:	4413      	add	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
                    break;
 80039bc:	e013      	b.n	80039e6 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <vQueueAddToRegistry+0x62>
 80039c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <vQueueAddToRegistry+0x8c>)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003a04 <vQueueAddToRegistry+0x8c>)
 80039d6:	4413      	add	r3, r2
 80039d8:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3301      	adds	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b07      	cmp	r3, #7
 80039e4:	d9dd      	bls.n	80039a2 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80039f8:	bf00      	nop
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	08023bd0 	.word	0x08023bd0
 8003a04:	20000c04 	.word	0x20000c04

08003a08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <vQueueUnregisterQueue+0x18>
 8003a16:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8003a1a:	4812      	ldr	r0, [pc, #72]	@ (8003a64 <vQueueUnregisterQueue+0x5c>)
 8003a1c:	f7fd fe94 	bl	8001748 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e016      	b.n	8003a54 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a26:	4a10      	ldr	r2, [pc, #64]	@ (8003a68 <vQueueUnregisterQueue+0x60>)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10b      	bne.n	8003a4e <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8003a36:	4a0c      	ldr	r2, [pc, #48]	@ (8003a68 <vQueueUnregisterQueue+0x60>)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003a40:	4a09      	ldr	r2, [pc, #36]	@ (8003a68 <vQueueUnregisterQueue+0x60>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	2200      	movs	r2, #0
 8003a4a:	605a      	str	r2, [r3, #4]
                break;
 8003a4c:	e006      	b.n	8003a5c <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d9e5      	bls.n	8003a26 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08023bd0 	.word	0x08023bd0
 8003a68:	20000c04 	.word	0x20000c04

08003a6c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af04      	add	r7, sp, #16
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 f9a8 	bl	8005dd4 <pvPortMalloc>
 8003a84:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003a8c:	206c      	movs	r0, #108	@ 0x6c
 8003a8e:	f002 f9a1 	bl	8005dd4 <pvPortMalloc>
 8003a92:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003a9a:	226c      	movs	r2, #108	@ 0x6c
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f01e faa3 	bl	8021fea <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aaa:	e005      	b.n	8003ab8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003aac:	6938      	ldr	r0, [r7, #16]
 8003aae:	f002 fa65 	bl	8005f7c <vPortFree>
 8003ab2:	e001      	b.n	8003ab8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9303      	str	r3, [sp, #12]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	9302      	str	r3, [sp, #8]
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	9301      	str	r3, [sp, #4]
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68b9      	ldr	r1, [r7, #8]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f829 	bl	8003b2c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003ada:	697b      	ldr	r3, [r7, #20]
    }
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff ffb3 	bl	8003a6c <prvCreateTask>
 8003b06:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003b0e:	6938      	ldr	r0, [r7, #16]
 8003b10:	f000 f890 	bl	8003c34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003b14:	2301      	movs	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	e002      	b.n	8003b20 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8003b20:	697b      	ldr	r3, [r7, #20]
    }
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	461a      	mov	r2, r3
 8003b44:	21a5      	movs	r1, #165	@ 0xa5
 8003b46:	f01e fa50 	bl	8021fea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003b54:	440b      	add	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 0307 	bic.w	r3, r3, #7
 8003b62:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <prvInitialiseNewTask+0x4c>
 8003b6e:	f240 712e 	movw	r1, #1838	@ 0x72e
 8003b72:	482f      	ldr	r0, [pc, #188]	@ (8003c30 <prvInitialiseNewTask+0x104>)
 8003b74:	f7fd fde8 	bl	8001748 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01e      	beq.n	8003bbc <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e012      	b.n	8003baa <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	4413      	add	r3, r2
 8003b8a:	7819      	ldrb	r1, [r3, #0]
 8003b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	4413      	add	r3, r2
 8003b92:	3334      	adds	r3, #52	@ 0x34
 8003b94:	460a      	mov	r2, r1
 8003b96:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b0f      	cmp	r3, #15
 8003bae:	d9e9      	bls.n	8003b84 <prvInitialiseNewTask+0x58>
 8003bb0:	e000      	b.n	8003bb4 <prvInitialiseNewTask+0x88>
            {
                break;
 8003bb2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d904      	bls.n	8003bcc <prvInitialiseNewTask+0xa0>
 8003bc2:	f240 7164 	movw	r1, #1892	@ 0x764
 8003bc6:	481a      	ldr	r0, [pc, #104]	@ (8003c30 <prvInitialiseNewTask+0x104>)
 8003bc8:	f7fd fdbe 	bl	8001748 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d901      	bls.n	8003bd6 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bd2:	2306      	movs	r3, #6
 8003bd4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f8c0 	bl	8002d6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	3318      	adds	r3, #24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff f8bb 	bl	8002d6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bfa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f1c3 0207 	rsb	r2, r3, #7
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c0a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	68f9      	ldr	r1, [r7, #12]
 8003c10:	6938      	ldr	r0, [r7, #16]
 8003c12:	f001 fea5 	bl	8005960 <pxPortInitialiseStack>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c26:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08023bf4 	.word	0x08023bf4

08003c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003c3c:	f001 ffc8 	bl	8005bd0 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003c40:	4b41      	ldr	r3, [pc, #260]	@ (8003d48 <prvAddNewTaskToReadyList+0x114>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a40      	ldr	r2, [pc, #256]	@ (8003d48 <prvAddNewTaskToReadyList+0x114>)
 8003c48:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003c4a:	4b40      	ldr	r3, [pc, #256]	@ (8003d4c <prvAddNewTaskToReadyList+0x118>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003c52:	4a3e      	ldr	r2, [pc, #248]	@ (8003d4c <prvAddNewTaskToReadyList+0x118>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c58:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <prvAddNewTaskToReadyList+0x114>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003c60:	f000 feac 	bl	80049bc <prvInitialiseTaskLists>
 8003c64:	e00d      	b.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003c66:	4b3a      	ldr	r3, [pc, #232]	@ (8003d50 <prvAddNewTaskToReadyList+0x11c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c6e:	4b37      	ldr	r3, [pc, #220]	@ (8003d4c <prvAddNewTaskToReadyList+0x118>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d802      	bhi.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003c7c:	4a33      	ldr	r2, [pc, #204]	@ (8003d4c <prvAddNewTaskToReadyList+0x118>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <prvAddNewTaskToReadyList+0x120>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <prvAddNewTaskToReadyList+0x120>)
 8003c8a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c8c:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <prvAddNewTaskToReadyList+0x120>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <prvAddNewTaskToReadyList+0x124>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <prvAddNewTaskToReadyList+0x124>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003caa:	492c      	ldr	r1, [pc, #176]	@ (8003d5c <prvAddNewTaskToReadyList+0x128>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	3204      	adds	r2, #4
 8003cd2:	605a      	str	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1d1a      	adds	r2, r3, #4
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <prvAddNewTaskToReadyList+0x128>)
 8003cea:	441a      	add	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	615a      	str	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf4:	4919      	ldr	r1, [pc, #100]	@ (8003d5c <prvAddNewTaskToReadyList+0x128>)
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d06:	1c59      	adds	r1, r3, #1
 8003d08:	4814      	ldr	r0, [pc, #80]	@ (8003d5c <prvAddNewTaskToReadyList+0x128>)
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003d16:	f001 ff87 	bl	8005c28 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <prvAddNewTaskToReadyList+0x11c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00e      	beq.n	8003d40 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003d22:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <prvAddNewTaskToReadyList+0x118>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d207      	bcs.n	8003d40 <prvAddNewTaskToReadyList+0x10c>
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <prvAddNewTaskToReadyList+0x12c>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000d44 	.word	0x20000d44
 8003d4c:	20000c44 	.word	0x20000c44
 8003d50:	20000d50 	.word	0x20000d50
 8003d54:	20000d60 	.word	0x20000d60
 8003d58:	20000d4c 	.word	0x20000d4c
 8003d5c:	20000c48 	.word	0x20000c48
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d011      	beq.n	8003d9a <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 8003d76:	f000 f8ad 	bl	8003ed4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003db8 <vTaskDelay+0x54>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d004      	beq.n	8003d8c <vTaskDelay+0x28>
 8003d82:	f640 118e 	movw	r1, #2446	@ 0x98e
 8003d86:	480d      	ldr	r0, [pc, #52]	@ (8003dbc <vTaskDelay+0x58>)
 8003d88:	f7fd fcde 	bl	8001748 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fd64 	bl	800585c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003d94:	f000 f8ac 	bl	8003ef0 <xTaskResumeAll>
 8003d98:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8003da0:	4b07      	ldr	r3, [pc, #28]	@ (8003dc0 <vTaskDelay+0x5c>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000d6c 	.word	0x20000d6c
 8003dbc:	08023bf4 	.word	0x08023bf4
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	@ 0x28
 8003dc8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e011      	b.n	8003dfc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e50 <prvCreateIdleTasks+0x8c>)
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	7819      	ldrb	r1, [r3, #0]
 8003de0:	463a      	mov	r2, r7
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4413      	add	r3, r2
 8003de6:	460a      	mov	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003dea:	463a      	mov	r2, r7
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	ddea      	ble.n	8003dd8 <prvCreateIdleTasks+0x14>
 8003e02:	e000      	b.n	8003e06 <prvCreateIdleTasks+0x42>
        {
            break;
 8003e04:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	e016      	b.n	8003e3a <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <prvCreateIdleTasks+0x90>)
 8003e0e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a10      	ldr	r2, [pc, #64]	@ (8003e58 <prvCreateIdleTasks+0x94>)
 8003e16:	4413      	add	r3, r2
 8003e18:	4639      	mov	r1, r7
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2300      	movs	r3, #0
 8003e22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e26:	6938      	ldr	r0, [r7, #16]
 8003e28:	f7ff fe5c 	bl	8003ae4 <xTaskCreate>
 8003e2c:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d006      	beq.n	8003e42 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	dde5      	ble.n	8003e0c <prvCreateIdleTasks+0x48>
 8003e40:	e000      	b.n	8003e44 <prvCreateIdleTasks+0x80>
        {
            break;
 8003e42:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003e44:	69fb      	ldr	r3, [r7, #28]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	08023c18 	.word	0x08023c18
 8003e54:	0800498d 	.word	0x0800498d
 8003e58:	20000d68 	.word	0x20000d68

08003e5c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003e62:	f7ff ffaf 	bl	8003dc4 <prvCreateIdleTasks>
 8003e66:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d118      	bne.n	8003ea0 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003e6e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8003e72:	b672      	cpsid	i
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	b662      	cpsie	i
 8003e82:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003e84:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec0 <vTaskStartScheduler+0x64>)
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <vTaskStartScheduler+0x68>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <vTaskStartScheduler+0x6c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003e9a:	f001 fdeb 	bl	8005a74 <xPortStartScheduler>
 8003e9e:	e008      	b.n	8003eb2 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d104      	bne.n	8003eb2 <vTaskStartScheduler+0x56>
 8003ea8:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8003eac:	4807      	ldr	r0, [pc, #28]	@ (8003ecc <vTaskStartScheduler+0x70>)
 8003eae:	f7fd fc4b 	bl	8001748 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <vTaskStartScheduler+0x74>)
 8003eb4:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000d64 	.word	0x20000d64
 8003ec4:	20000d50 	.word	0x20000d50
 8003ec8:	20000d48 	.word	0x20000d48
 8003ecc:	08023bf4 	.word	0x08023bf4
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <vTaskSuspendAll+0x18>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <vTaskSuspendAll+0x18>)
 8003ee0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8003ee2:	bf00      	nop
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	20000d6c 	.word	0x20000d6c

08003ef0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003efe:	f001 fe67 	bl	8005bd0 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003f06:	4b72      	ldr	r3, [pc, #456]	@ (80040d0 <xTaskResumeAll+0x1e0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d104      	bne.n	8003f18 <xTaskResumeAll+0x28>
 8003f0e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8003f12:	4870      	ldr	r0, [pc, #448]	@ (80040d4 <xTaskResumeAll+0x1e4>)
 8003f14:	f7fd fc18 	bl	8001748 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003f18:	4b6d      	ldr	r3, [pc, #436]	@ (80040d0 <xTaskResumeAll+0x1e0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80040d0 <xTaskResumeAll+0x1e0>)
 8003f20:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003f22:	4b6b      	ldr	r3, [pc, #428]	@ (80040d0 <xTaskResumeAll+0x1e0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80ca 	bne.w	80040c0 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80040d8 <xTaskResumeAll+0x1e8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80c5 	beq.w	80040c0 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f36:	e08e      	b.n	8004056 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f38:	4b68      	ldr	r3, [pc, #416]	@ (80040dc <xTaskResumeAll+0x1ec>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	6a12      	ldr	r2, [r2, #32]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	69d2      	ldr	r2, [r2, #28]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3318      	adds	r3, #24
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d103      	bne.n	8003f6e <xTaskResumeAll+0x7e>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	6a1a      	ldr	r2, [r3, #32]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2200      	movs	r2, #0
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1e5a      	subs	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	68d2      	ldr	r2, [r2, #12]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	6892      	ldr	r2, [r2, #8]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d103      	bne.n	8003fac <xTaskResumeAll+0xbc>
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	615a      	str	r2, [r3, #20]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	4b46      	ldr	r3, [pc, #280]	@ (80040e0 <xTaskResumeAll+0x1f0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	4a45      	ldr	r2, [pc, #276]	@ (80040e0 <xTaskResumeAll+0x1f0>)
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd2:	4944      	ldr	r1, [pc, #272]	@ (80040e4 <xTaskResumeAll+0x1f4>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3304      	adds	r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	69fa      	ldr	r2, [r7, #28]
 8003ff8:	3204      	adds	r2, #4
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a34      	ldr	r2, [pc, #208]	@ (80040e4 <xTaskResumeAll+0x1f4>)
 8004012:	441a      	add	r2, r3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	615a      	str	r2, [r3, #20]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4931      	ldr	r1, [pc, #196]	@ (80040e4 <xTaskResumeAll+0x1f4>)
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800402e:	1c59      	adds	r1, r3, #1
 8004030:	482c      	ldr	r0, [pc, #176]	@ (80040e4 <xTaskResumeAll+0x1f4>)
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4403      	add	r3, r0
 800403c:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	4b29      	ldr	r3, [pc, #164]	@ (80040e8 <xTaskResumeAll+0x1f8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004048:	429a      	cmp	r2, r3
 800404a:	d904      	bls.n	8004056 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800404c:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <xTaskResumeAll+0x1fc>)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2101      	movs	r1, #1
 8004052:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004056:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <xTaskResumeAll+0x1ec>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f47f af6c 	bne.w	8003f38 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004066:	f000 fd27 	bl	8004ab8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800406a:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <xTaskResumeAll+0x200>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d012      	beq.n	800409c <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004076:	f000 f86d 	bl	8004154 <xTaskIncrementTick>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004080:	4a1a      	ldr	r2, [pc, #104]	@ (80040ec <xTaskResumeAll+0x1fc>)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2101      	movs	r1, #1
 8004086:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3b01      	subs	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ef      	bne.n	8004076 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004096:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <xTaskResumeAll+0x200>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800409c:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <xTaskResumeAll+0x1fc>)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80040ac:	4b0e      	ldr	r3, [pc, #56]	@ (80040e8 <xTaskResumeAll+0x1f8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <xTaskResumeAll+0x204>)
 80040b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040c0:	f001 fdb2 	bl	8005c28 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80040c4:	69bb      	ldr	r3, [r7, #24]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000d6c 	.word	0x20000d6c
 80040d4:	08023bf4 	.word	0x08023bf4
 80040d8:	20000d44 	.word	0x20000d44
 80040dc:	20000d04 	.word	0x20000d04
 80040e0:	20000d4c 	.word	0x20000d4c
 80040e4:	20000c48 	.word	0x20000c48
 80040e8:	20000c44 	.word	0x20000c44
 80040ec:	20000d58 	.word	0x20000d58
 80040f0:	20000d54 	.word	0x20000d54
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <xTaskGetTickCount+0x1c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004104:	687b      	ldr	r3, [r7, #4]
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000d48 	.word	0x20000d48

08004118 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <pcTaskGetName+0x14>
 8004126:	4b09      	ldr	r3, [pc, #36]	@ (800414c <pcTaskGetName+0x34>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	e000      	b.n	800412e <pcTaskGetName+0x16>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d104      	bne.n	8004140 <pcTaskGetName+0x28>
 8004136:	f241 0155 	movw	r1, #4181	@ 0x1055
 800413a:	4805      	ldr	r0, [pc, #20]	@ (8004150 <pcTaskGetName+0x38>)
 800413c:	f7fd fb04 	bl	8001748 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3334      	adds	r3, #52	@ 0x34
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000c44 	.word	0x20000c44
 8004150:	08023bf4 	.word	0x08023bf4

08004154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800415e:	4b7b      	ldr	r3, [pc, #492]	@ (800434c <xTaskIncrementTick+0x1f8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 80e8 	bne.w	8004338 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004168:	4b79      	ldr	r3, [pc, #484]	@ (8004350 <xTaskIncrementTick+0x1fc>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004170:	4a77      	ldr	r2, [pc, #476]	@ (8004350 <xTaskIncrementTick+0x1fc>)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11a      	bne.n	80041b2 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800417c:	4b75      	ldr	r3, [pc, #468]	@ (8004354 <xTaskIncrementTick+0x200>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <xTaskIncrementTick+0x3c>
 8004186:	f241 215f 	movw	r1, #4703	@ 0x125f
 800418a:	4873      	ldr	r0, [pc, #460]	@ (8004358 <xTaskIncrementTick+0x204>)
 800418c:	f7fd fadc 	bl	8001748 <vAssertCalled>
 8004190:	4b70      	ldr	r3, [pc, #448]	@ (8004354 <xTaskIncrementTick+0x200>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4b71      	ldr	r3, [pc, #452]	@ (800435c <xTaskIncrementTick+0x208>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6e      	ldr	r2, [pc, #440]	@ (8004354 <xTaskIncrementTick+0x200>)
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	4a6f      	ldr	r2, [pc, #444]	@ (800435c <xTaskIncrementTick+0x208>)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b6e      	ldr	r3, [pc, #440]	@ (8004360 <xTaskIncrementTick+0x20c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004360 <xTaskIncrementTick+0x20c>)
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	f000 fc83 	bl	8004ab8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <xTaskIncrementTick+0x210>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f0c0 80a8 	bcc.w	800430e <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041be:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <xTaskIncrementTick+0x200>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80041c8:	4b66      	ldr	r3, [pc, #408]	@ (8004364 <xTaskIncrementTick+0x210>)
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	601a      	str	r2, [r3, #0]
                    break;
 80041d0:	e09d      	b.n	800430e <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041d2:	4b60      	ldr	r3, [pc, #384]	@ (8004354 <xTaskIncrementTick+0x200>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d203      	bcs.n	80041f2 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80041ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004364 <xTaskIncrementTick+0x210>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6013      	str	r3, [r2, #0]
                        break;
 80041f0:	e08d      	b.n	800430e <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	68d2      	ldr	r2, [r2, #12]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	605a      	str	r2, [r3, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3304      	adds	r3, #4
 8004214:	429a      	cmp	r2, r3
 8004216:	d103      	bne.n	8004220 <xTaskIncrementTick+0xcc>
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	2200      	movs	r2, #0
 8004224:	615a      	str	r2, [r3, #20]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01e      	beq.n	8004276 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	6a12      	ldr	r2, [r2, #32]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	69d2      	ldr	r2, [r2, #28]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3318      	adds	r3, #24
 800425a:	429a      	cmp	r2, r3
 800425c:	d103      	bne.n	8004266 <xTaskIncrementTick+0x112>
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2200      	movs	r2, #0
 800426a:	629a      	str	r2, [r3, #40]	@ 0x28
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1e5a      	subs	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	2201      	movs	r2, #1
 800427c:	409a      	lsls	r2, r3
 800427e:	4b3a      	ldr	r3, [pc, #232]	@ (8004368 <xTaskIncrementTick+0x214>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4313      	orrs	r3, r2
 8004284:	4a38      	ldr	r2, [pc, #224]	@ (8004368 <xTaskIncrementTick+0x214>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	4937      	ldr	r1, [pc, #220]	@ (800436c <xTaskIncrementTick+0x218>)
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3304      	adds	r3, #4
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	603b      	str	r3, [r7, #0]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	3204      	adds	r2, #4
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1d1a      	adds	r2, r3, #4
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	609a      	str	r2, [r3, #8]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4a28      	ldr	r2, [pc, #160]	@ (800436c <xTaskIncrementTick+0x218>)
 80042cc:	441a      	add	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	615a      	str	r2, [r3, #20]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d6:	4925      	ldr	r1, [pc, #148]	@ (800436c <xTaskIncrementTick+0x218>)
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042e8:	1c59      	adds	r1, r3, #1
 80042ea:	4820      	ldr	r0, [pc, #128]	@ (800436c <xTaskIncrementTick+0x218>)
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4403      	add	r3, r0
 80042f6:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004370 <xTaskIncrementTick+0x21c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004302:	429a      	cmp	r2, r3
 8004304:	f67f af5b 	bls.w	80041be <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800430c:	e757      	b.n	80041be <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800430e:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <xTaskIncrementTick+0x21c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004314:	4915      	ldr	r1, [pc, #84]	@ (800436c <xTaskIncrementTick+0x218>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d901      	bls.n	800432a <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004326:	2301      	movs	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800432a:	4b12      	ldr	r3, [pc, #72]	@ (8004374 <xTaskIncrementTick+0x220>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e004      	b.n	8004342 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <xTaskIncrementTick+0x224>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	4a0e      	ldr	r2, [pc, #56]	@ (8004378 <xTaskIncrementTick+0x224>)
 8004340:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004342:	69fb      	ldr	r3, [r7, #28]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000d6c 	.word	0x20000d6c
 8004350:	20000d48 	.word	0x20000d48
 8004354:	20000cfc 	.word	0x20000cfc
 8004358:	08023bf4 	.word	0x08023bf4
 800435c:	20000d00 	.word	0x20000d00
 8004360:	20000d5c 	.word	0x20000d5c
 8004364:	20000d64 	.word	0x20000d64
 8004368:	20000d4c 	.word	0x20000d4c
 800436c:	20000c48 	.word	0x20000c48
 8004370:	20000c44 	.word	0x20000c44
 8004374:	20000d58 	.word	0x20000d58
 8004378:	20000d54 	.word	0x20000d54

0800437c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004382:	4b30      	ldr	r3, [pc, #192]	@ (8004444 <vTaskSwitchContext+0xc8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800438a:	4b2f      	ldr	r3, [pc, #188]	@ (8004448 <vTaskSwitchContext+0xcc>)
 800438c:	2201      	movs	r2, #1
 800438e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004390:	e053      	b.n	800443a <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004392:	4b2d      	ldr	r3, [pc, #180]	@ (8004448 <vTaskSwitchContext+0xcc>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004398:	f7fd f9ce 	bl	8001738 <ulGetRunTimeCounterValue>
 800439c:	4603      	mov	r3, r0
 800439e:	4a2b      	ldr	r2, [pc, #172]	@ (800444c <vTaskSwitchContext+0xd0>)
 80043a0:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 80043a2:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <vTaskSwitchContext+0xd0>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004450 <vTaskSwitchContext+0xd4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d909      	bls.n	80043c2 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 80043ae:	4b27      	ldr	r3, [pc, #156]	@ (800444c <vTaskSwitchContext+0xd0>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b27      	ldr	r3, [pc, #156]	@ (8004450 <vTaskSwitchContext+0xd4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1ad1      	subs	r1, r2, r3
 80043b8:	4b26      	ldr	r3, [pc, #152]	@ (8004454 <vTaskSwitchContext+0xd8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80043be:	440a      	add	r2, r1
 80043c0:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <vTaskSwitchContext+0xd0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <vTaskSwitchContext+0xd4>)
 80043c8:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <vTaskSwitchContext+0xdc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	f1c3 031f 	rsb	r3, r3, #31
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	491e      	ldr	r1, [pc, #120]	@ (800445c <vTaskSwitchContext+0xe0>)
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d104      	bne.n	80043fe <vTaskSwitchContext+0x82>
 80043f4:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 80043f8:	4819      	ldr	r0, [pc, #100]	@ (8004460 <vTaskSwitchContext+0xe4>)
 80043fa:	f7fd f9a5 	bl	8001748 <vAssertCalled>
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a14      	ldr	r2, [pc, #80]	@ (800445c <vTaskSwitchContext+0xe0>)
 800440a:	4413      	add	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	3308      	adds	r3, #8
 8004420:	429a      	cmp	r2, r3
 8004422:	d103      	bne.n	800442c <vTaskSwitchContext+0xb0>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a08      	ldr	r2, [pc, #32]	@ (8004454 <vTaskSwitchContext+0xd8>)
 8004434:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004436:	4b07      	ldr	r3, [pc, #28]	@ (8004454 <vTaskSwitchContext+0xd8>)
 8004438:	681b      	ldr	r3, [r3, #0]
    }
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000d6c 	.word	0x20000d6c
 8004448:	20000d58 	.word	0x20000d58
 800444c:	20000d74 	.word	0x20000d74
 8004450:	20000d70 	.word	0x20000d70
 8004454:	20000c44 	.word	0x20000c44
 8004458:	20000d4c 	.word	0x20000d4c
 800445c:	20000c48 	.word	0x20000c48
 8004460:	08023bf4 	.word	0x08023bf4

08004464 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d104      	bne.n	800447e <vTaskPlaceOnEventList+0x1a>
 8004474:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8004478:	4808      	ldr	r0, [pc, #32]	@ (800449c <vTaskPlaceOnEventList+0x38>)
 800447a:	f7fd f965 	bl	8001748 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800447e:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <vTaskPlaceOnEventList+0x3c>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3318      	adds	r3, #24
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe fca1 	bl	8002dce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800448c:	2101      	movs	r1, #1
 800448e:	6838      	ldr	r0, [r7, #0]
 8004490:	f001 f9e4 	bl	800585c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	08023bf4 	.word	0x08023bf4
 80044a0:	20000c44 	.word	0x20000c44

080044a4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <vTaskPlaceOnUnorderedEventList+0x1c>
 80044b6:	f241 419e 	movw	r1, #5278	@ 0x149e
 80044ba:	481d      	ldr	r0, [pc, #116]	@ (8004530 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80044bc:	f7fd f944 	bl	8001748 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80044c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004534 <vTaskPlaceOnUnorderedEventList+0x90>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <vTaskPlaceOnUnorderedEventList+0x2e>
 80044c8:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 80044cc:	4818      	ldr	r0, [pc, #96]	@ (8004530 <vTaskPlaceOnUnorderedEventList+0x8c>)
 80044ce:	f7fd f93b 	bl	8001748 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80044d2:	4b19      	ldr	r3, [pc, #100]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80044dc:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	4b14      	ldr	r3, [pc, #80]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	61da      	str	r2, [r3, #28]
 80044ec:	4b12      	ldr	r3, [pc, #72]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	6892      	ldr	r2, [r2, #8]
 80044f4:	621a      	str	r2, [r3, #32]
 80044f6:	4b10      	ldr	r3, [pc, #64]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	3218      	adds	r2, #24
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f103 0218 	add.w	r2, r3, #24
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	609a      	str	r2, [r3, #8]
 800450e:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	629a      	str	r2, [r3, #40]	@ 0x28
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f001 f99a 	bl	800585c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004528:	bf00      	nop
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08023bf4 	.word	0x08023bf4
 8004534:	20000d6c 	.word	0x20000d6c
 8004538:	20000c44 	.word	0x20000c44

0800453c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <xTaskRemoveFromEventList+0x20>
 8004552:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8004556:	485b      	ldr	r0, [pc, #364]	@ (80046c4 <xTaskRemoveFromEventList+0x188>)
 8004558:	f7fd f8f6 	bl	8001748 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	617b      	str	r3, [r7, #20]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	6a12      	ldr	r2, [r2, #32]
 800456a:	609a      	str	r2, [r3, #8]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	69d2      	ldr	r2, [r2, #28]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	3318      	adds	r3, #24
 800457e:	429a      	cmp	r2, r3
 8004580:	d103      	bne.n	800458a <xTaskRemoveFromEventList+0x4e>
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800459a:	4b4b      	ldr	r3, [pc, #300]	@ (80046c8 <xTaskRemoveFromEventList+0x18c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d160      	bne.n	8004664 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	68d2      	ldr	r2, [r2, #12]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	6892      	ldr	r2, [r2, #8]
 80045ba:	605a      	str	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	3304      	adds	r3, #4
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d103      	bne.n	80045d0 <xTaskRemoveFromEventList+0x94>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2200      	movs	r2, #0
 80045d4:	615a      	str	r2, [r3, #20]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	2201      	movs	r2, #1
 80045e6:	409a      	lsls	r2, r3
 80045e8:	4b38      	ldr	r3, [pc, #224]	@ (80046cc <xTaskRemoveFromEventList+0x190>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	4a37      	ldr	r2, [pc, #220]	@ (80046cc <xTaskRemoveFromEventList+0x190>)
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f6:	4936      	ldr	r1, [pc, #216]	@ (80046d0 <xTaskRemoveFromEventList+0x194>)
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3304      	adds	r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	3204      	adds	r2, #4
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <xTaskRemoveFromEventList+0x194>)
 8004636:	441a      	add	r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	615a      	str	r2, [r3, #20]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	4923      	ldr	r1, [pc, #140]	@ (80046d0 <xTaskRemoveFromEventList+0x194>)
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	481e      	ldr	r0, [pc, #120]	@ (80046d0 <xTaskRemoveFromEventList+0x194>)
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4403      	add	r3, r0
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	e01b      	b.n	800469c <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004664:	4b1b      	ldr	r3, [pc, #108]	@ (80046d4 <xTaskRemoveFromEventList+0x198>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	61da      	str	r2, [r3, #28]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	621a      	str	r2, [r3, #32]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	3218      	adds	r2, #24
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f103 0218 	add.w	r2, r3, #24
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <xTaskRemoveFromEventList+0x198>)
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <xTaskRemoveFromEventList+0x198>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	4a0e      	ldr	r2, [pc, #56]	@ (80046d4 <xTaskRemoveFromEventList+0x198>)
 800469a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a0:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <xTaskRemoveFromEventList+0x19c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d905      	bls.n	80046b6 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80046aa:	2301      	movs	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <xTaskRemoveFromEventList+0x1a0>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e001      	b.n	80046ba <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 80046ba:	69fb      	ldr	r3, [r7, #28]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08023bf4 	.word	0x08023bf4
 80046c8:	20000d6c 	.word	0x20000d6c
 80046cc:	20000d4c 	.word	0x20000d4c
 80046d0:	20000c48 	.word	0x20000c48
 80046d4:	20000d04 	.word	0x20000d04
 80046d8:	20000c44 	.word	0x20000c44
 80046dc:	20000d58 	.word	0x20000d58

080046e0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80046ea:	4b52      	ldr	r3, [pc, #328]	@ (8004834 <vTaskRemoveFromUnorderedEventList+0x154>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <vTaskRemoveFromUnorderedEventList+0x1c>
 80046f2:	f241 5143 	movw	r1, #5443	@ 0x1543
 80046f6:	4850      	ldr	r0, [pc, #320]	@ (8004838 <vTaskRemoveFromUnorderedEventList+0x158>)
 80046f8:	f7fd f826 	bl	8001748 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d104      	bne.n	800471c <vTaskRemoveFromUnorderedEventList+0x3c>
 8004712:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004716:	4848      	ldr	r0, [pc, #288]	@ (8004838 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004718:	f7fd f816 	bl	8001748 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6892      	ldr	r2, [r2, #8]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	429a      	cmp	r2, r3
 800473e:	d103      	bne.n	8004748 <vTaskRemoveFromUnorderedEventList+0x68>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	1e5a      	subs	r2, r3, #1
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	68d2      	ldr	r2, [r2, #12]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	3304      	adds	r3, #4
 800477a:	429a      	cmp	r2, r3
 800477c:	d103      	bne.n	8004786 <vTaskRemoveFromUnorderedEventList+0xa6>
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	615a      	str	r2, [r3, #20]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	1e5a      	subs	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	4b27      	ldr	r3, [pc, #156]	@ (800483c <vTaskRemoveFromUnorderedEventList+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	4a25      	ldr	r2, [pc, #148]	@ (800483c <vTaskRemoveFromUnorderedEventList+0x15c>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ac:	4924      	ldr	r1, [pc, #144]	@ (8004840 <vTaskRemoveFromUnorderedEventList+0x160>)
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	3204      	adds	r2, #4
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1d1a      	adds	r2, r3, #4
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	609a      	str	r2, [r3, #8]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4a15      	ldr	r2, [pc, #84]	@ (8004840 <vTaskRemoveFromUnorderedEventList+0x160>)
 80047ec:	441a      	add	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	615a      	str	r2, [r3, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	4912      	ldr	r1, [pc, #72]	@ (8004840 <vTaskRemoveFromUnorderedEventList+0x160>)
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004808:	1c59      	adds	r1, r3, #1
 800480a:	480d      	ldr	r0, [pc, #52]	@ (8004840 <vTaskRemoveFromUnorderedEventList+0x160>)
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4403      	add	r3, r0
 8004816:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481c:	4b09      	ldr	r3, [pc, #36]	@ (8004844 <vTaskRemoveFromUnorderedEventList+0x164>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	429a      	cmp	r2, r3
 8004824:	d902      	bls.n	800482c <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004826:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <vTaskRemoveFromUnorderedEventList+0x168>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 800482c:	bf00      	nop
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000d6c 	.word	0x20000d6c
 8004838:	08023bf4 	.word	0x08023bf4
 800483c:	20000d4c 	.word	0x20000d4c
 8004840:	20000c48 	.word	0x20000c48
 8004844:	20000c44 	.word	0x20000c44
 8004848:	20000d58 	.word	0x20000d58

0800484c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d104      	bne.n	8004864 <vTaskSetTimeOutState+0x18>
 800485a:	f241 5186 	movw	r1, #5510	@ 0x1586
 800485e:	4809      	ldr	r0, [pc, #36]	@ (8004884 <vTaskSetTimeOutState+0x38>)
 8004860:	f7fc ff72 	bl	8001748 <vAssertCalled>
    taskENTER_CRITICAL();
 8004864:	f001 f9b4 	bl	8005bd0 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <vTaskSetTimeOutState+0x3c>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004870:	4b06      	ldr	r3, [pc, #24]	@ (800488c <vTaskSetTimeOutState+0x40>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8004878:	f001 f9d6 	bl	8005c28 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	08023bf4 	.word	0x08023bf4
 8004888:	20000d5c 	.word	0x20000d5c
 800488c:	20000d48 	.word	0x20000d48

08004890 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <vTaskInternalSetTimeOutState+0x24>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <vTaskInternalSetTimeOutState+0x28>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	20000d5c 	.word	0x20000d5c
 80048b8:	20000d48 	.word	0x20000d48

080048bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <xTaskCheckForTimeOut+0x1a>
 80048cc:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 80048d0:	4825      	ldr	r0, [pc, #148]	@ (8004968 <xTaskCheckForTimeOut+0xac>)
 80048d2:	f7fc ff39 	bl	8001748 <vAssertCalled>
    configASSERT( pxTicksToWait );
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <xTaskCheckForTimeOut+0x2a>
 80048dc:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 80048e0:	4821      	ldr	r0, [pc, #132]	@ (8004968 <xTaskCheckForTimeOut+0xac>)
 80048e2:	f7fc ff31 	bl	8001748 <vAssertCalled>

    taskENTER_CRITICAL();
 80048e6:	f001 f973 	bl	8005bd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80048ea:	4b20      	ldr	r3, [pc, #128]	@ (800496c <xTaskCheckForTimeOut+0xb0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d102      	bne.n	800490a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e026      	b.n	8004958 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b18      	ldr	r3, [pc, #96]	@ (8004970 <xTaskCheckForTimeOut+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d00a      	beq.n	800492c <xTaskCheckForTimeOut+0x70>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	429a      	cmp	r2, r3
 800491e:	d305      	bcc.n	800492c <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e015      	b.n	8004958 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	429a      	cmp	r2, r3
 8004934:	d20b      	bcs.n	800494e <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ffa4 	bl	8004890 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e004      	b.n	8004958 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004958:	f001 f966 	bl	8005c28 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 800495c:	697b      	ldr	r3, [r7, #20]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	08023bf4 	.word	0x08023bf4
 800496c:	20000d48 	.word	0x20000d48
 8004970:	20000d5c 	.word	0x20000d5c

08004974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004978:	4b03      	ldr	r3, [pc, #12]	@ (8004988 <vTaskMissedYield+0x14>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	20000d58 	.word	0x20000d58

0800498c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004994:	f000 f852 	bl	8004a3c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004998:	4b06      	ldr	r3, [pc, #24]	@ (80049b4 <prvIdleTask+0x28>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d9f9      	bls.n	8004994 <prvIdleTask+0x8>
            {
                taskYIELD();
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <prvIdleTask+0x2c>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80049b0:	e7f0      	b.n	8004994 <prvIdleTask+0x8>
 80049b2:	bf00      	nop
 80049b4:	20000c48 	.word	0x20000c48
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c2:	2300      	movs	r3, #0
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	e00c      	b.n	80049e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <prvInitialiseTaskLists+0x60>)
 80049d4:	4413      	add	r3, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe f9a8 	bl	8002d2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3301      	adds	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b06      	cmp	r3, #6
 80049e6:	d9ef      	bls.n	80049c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80049e8:	480d      	ldr	r0, [pc, #52]	@ (8004a20 <prvInitialiseTaskLists+0x64>)
 80049ea:	f7fe f99f 	bl	8002d2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80049ee:	480d      	ldr	r0, [pc, #52]	@ (8004a24 <prvInitialiseTaskLists+0x68>)
 80049f0:	f7fe f99c 	bl	8002d2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80049f4:	480c      	ldr	r0, [pc, #48]	@ (8004a28 <prvInitialiseTaskLists+0x6c>)
 80049f6:	f7fe f999 	bl	8002d2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80049fa:	480c      	ldr	r0, [pc, #48]	@ (8004a2c <prvInitialiseTaskLists+0x70>)
 80049fc:	f7fe f996 	bl	8002d2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004a00:	480b      	ldr	r0, [pc, #44]	@ (8004a30 <prvInitialiseTaskLists+0x74>)
 8004a02:	f7fe f993 	bl	8002d2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <prvInitialiseTaskLists+0x78>)
 8004a08:	4a05      	ldr	r2, [pc, #20]	@ (8004a20 <prvInitialiseTaskLists+0x64>)
 8004a0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <prvInitialiseTaskLists+0x7c>)
 8004a0e:	4a05      	ldr	r2, [pc, #20]	@ (8004a24 <prvInitialiseTaskLists+0x68>)
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000c48 	.word	0x20000c48
 8004a20:	20000cd4 	.word	0x20000cd4
 8004a24:	20000ce8 	.word	0x20000ce8
 8004a28:	20000d04 	.word	0x20000d04
 8004a2c:	20000d18 	.word	0x20000d18
 8004a30:	20000d30 	.word	0x20000d30
 8004a34:	20000cfc 	.word	0x20000cfc
 8004a38:	20000d00 	.word	0x20000d00

08004a3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a42:	e019      	b.n	8004a78 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004a44:	f001 f8c4 	bl	8005bd0 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <prvCheckTasksWaitingTermination+0x50>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe f9f3 	bl	8002e40 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <prvCheckTasksWaitingTermination+0x54>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a0b      	ldr	r2, [pc, #44]	@ (8004a90 <prvCheckTasksWaitingTermination+0x54>)
 8004a62:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a6c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004a6e:	f001 f8db 	bl	8005c28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f810 	bl	8004a98 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a78:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <prvCheckTasksWaitingTermination+0x58>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e1      	bne.n	8004a44 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000d18 	.word	0x20000d18
 8004a90:	20000d44 	.word	0x20000d44
 8004a94:	20000d2c 	.word	0x20000d2c

08004a98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fa69 	bl	8005f7c <vPortFree>
            vPortFree( pxTCB );
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 fa66 	bl	8005f7c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <prvResetNextTaskUnblockTime+0x30>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <prvResetNextTaskUnblockTime+0x34>)
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004ace:	e005      	b.n	8004adc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <prvResetNextTaskUnblockTime+0x30>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a04      	ldr	r2, [pc, #16]	@ (8004aec <prvResetNextTaskUnblockTime+0x34>)
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000cfc 	.word	0x20000cfc
 8004aec:	20000d64 	.word	0x20000d64

08004af0 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <xTaskGetCurrentTaskHandle+0x1c>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004afc:	687b      	ldr	r3, [r7, #4]
        }
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000c44 	.word	0x20000c44

08004b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <xTaskGetSchedulerState+0x34>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	e008      	b.n	8004b36 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004b24:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <xTaskGetSchedulerState+0x38>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	e001      	b.n	8004b36 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8004b36:	687b      	ldr	r3, [r7, #4]
    }
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000d50 	.word	0x20000d50
 8004b48:	20000d6c 	.word	0x20000d6c

08004b4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8089 	beq.w	8004c76 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	4b45      	ldr	r3, [pc, #276]	@ (8004c80 <xTaskPriorityInherit+0x134>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d278      	bcs.n	8004c64 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	db06      	blt.n	8004b88 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004b7a:	4b41      	ldr	r3, [pc, #260]	@ (8004c80 <xTaskPriorityInherit+0x134>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	f1c3 0207 	rsb	r2, r3, #7
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6959      	ldr	r1, [r3, #20]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a3a      	ldr	r2, [pc, #232]	@ (8004c84 <xTaskPriorityInherit+0x138>)
 8004b9a:	4413      	add	r3, r2
 8004b9c:	4299      	cmp	r1, r3
 8004b9e:	d159      	bne.n	8004c54 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe f94b 	bl	8002e40 <uxListRemove>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43da      	mvns	r2, r3
 8004bbc:	4b32      	ldr	r3, [pc, #200]	@ (8004c88 <xTaskPriorityInherit+0x13c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	4a31      	ldr	r2, [pc, #196]	@ (8004c88 <xTaskPriorityInherit+0x13c>)
 8004bc4:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <xTaskPriorityInherit+0x134>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <xTaskPriorityInherit+0x13c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <xTaskPriorityInherit+0x13c>)
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be6:	4927      	ldr	r1, [pc, #156]	@ (8004c84 <xTaskPriorityInherit+0x138>)
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	3204      	adds	r2, #4
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1d1a      	adds	r2, r3, #4
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4a17      	ldr	r2, [pc, #92]	@ (8004c84 <xTaskPriorityInherit+0x138>)
 8004c26:	441a      	add	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	615a      	str	r2, [r3, #20]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c30:	4914      	ldr	r1, [pc, #80]	@ (8004c84 <xTaskPriorityInherit+0x138>)
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	480f      	ldr	r0, [pc, #60]	@ (8004c84 <xTaskPriorityInherit+0x138>)
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4403      	add	r3, r0
 8004c50:	6019      	str	r1, [r3, #0]
 8004c52:	e004      	b.n	8004c5e <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <xTaskPriorityInherit+0x134>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e008      	b.n	8004c76 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c68:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <xTaskPriorityInherit+0x134>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d201      	bcs.n	8004c76 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8004c76:	697b      	ldr	r3, [r7, #20]
    }
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20000c44 	.word	0x20000c44
 8004c84:	20000c48 	.word	0x20000c48
 8004c88:	20000d4c 	.word	0x20000d4c

08004c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8082 	beq.w	8004da8 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004ca4:	4b43      	ldr	r3, [pc, #268]	@ (8004db4 <xTaskPriorityDisinherit+0x128>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d004      	beq.n	8004cb8 <xTaskPriorityDisinherit+0x2c>
 8004cae:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8004cb2:	4841      	ldr	r0, [pc, #260]	@ (8004db8 <xTaskPriorityDisinherit+0x12c>)
 8004cb4:	f7fc fd48 	bl	8001748 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <xTaskPriorityDisinherit+0x3e>
 8004cc0:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004cc4:	483c      	ldr	r0, [pc, #240]	@ (8004db8 <xTaskPriorityDisinherit+0x12c>)
 8004cc6:	f7fc fd3f 	bl	8001748 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cce:	1e5a      	subs	r2, r3, #1
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d063      	beq.n	8004da8 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d15f      	bne.n	8004da8 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	3304      	adds	r3, #4
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe f8a7 	bl	8002e40 <uxListRemove>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <xTaskPriorityDisinherit+0x130>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <xTaskPriorityDisinherit+0x130>)
 8004d0c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f1c3 0207 	rsb	r2, r3, #7
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	2201      	movs	r2, #1
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	4b24      	ldr	r3, [pc, #144]	@ (8004dbc <xTaskPriorityDisinherit+0x130>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	4a22      	ldr	r2, [pc, #136]	@ (8004dbc <xTaskPriorityDisinherit+0x130>)
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	4921      	ldr	r1, [pc, #132]	@ (8004dc0 <xTaskPriorityDisinherit+0x134>)
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3304      	adds	r3, #4
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	3204      	adds	r2, #4
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4a12      	ldr	r2, [pc, #72]	@ (8004dc0 <xTaskPriorityDisinherit+0x134>)
 8004d78:	441a      	add	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	615a      	str	r2, [r3, #20]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d82:	490f      	ldr	r1, [pc, #60]	@ (8004dc0 <xTaskPriorityDisinherit+0x134>)
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	480a      	ldr	r0, [pc, #40]	@ (8004dc0 <xTaskPriorityDisinherit+0x134>)
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4403      	add	r3, r0
 8004da2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004da8:	697b      	ldr	r3, [r7, #20]
    }
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000c44 	.word	0x20000c44
 8004db8:	08023bf4 	.word	0x08023bf4
 8004dbc:	20000d4c 	.word	0x20000d4c
 8004dc0:	20000c48 	.word	0x20000c48

08004dc4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8096 	beq.w	8004f0a <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8004de6:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8004dea:	484a      	ldr	r0, [pc, #296]	@ (8004f14 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004dec:	f7fc fcac 	bl	8001748 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d902      	bls.n	8004e00 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e002      	b.n	8004e06 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e04:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d07c      	beq.n	8004f0a <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d177      	bne.n	8004f0a <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f18 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d104      	bne.n	8004e2e <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8004e24:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8004e28:	483a      	ldr	r0, [pc, #232]	@ (8004f14 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004e2a:	f7fc fc8d 	bl	8001748 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db04      	blt.n	8004e4c <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f1c3 0207 	rsb	r2, r3, #7
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6959      	ldr	r1, [r3, #20]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4a30      	ldr	r2, [pc, #192]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	d153      	bne.n	8004f0a <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fd ffea 	bl	8002e40 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	2201      	movs	r2, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	4b28      	ldr	r3, [pc, #160]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4013      	ands	r3, r2
 8004e84:	4a26      	ldr	r2, [pc, #152]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004e86:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	4b23      	ldr	r3, [pc, #140]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9e:	491f      	ldr	r1, [pc, #124]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3304      	adds	r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	609a      	str	r2, [r3, #8]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	3204      	adds	r2, #4
 8004ec6:	605a      	str	r2, [r3, #4]
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	1d1a      	adds	r2, r3, #4
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4a0f      	ldr	r2, [pc, #60]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004ede:	441a      	add	r2, r3
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	615a      	str	r2, [r3, #20]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee8:	490c      	ldr	r1, [pc, #48]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004efa:	1c59      	adds	r1, r3, #1
 8004efc:	4807      	ldr	r0, [pc, #28]	@ (8004f1c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4403      	add	r3, r0
 8004f08:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8004f0a:	bf00      	nop
 8004f0c:	3720      	adds	r7, #32
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	08023bf4 	.word	0x08023bf4
 8004f18:	20000c44 	.word	0x20000c44
 8004f1c:	20000c48 	.word	0x20000c48
 8004f20:	20000d4c 	.word	0x20000d4c

08004f24 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004f2a:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <uxTaskResetEventItemValue+0x2c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004f32:	4b07      	ldr	r3, [pc, #28]	@ (8004f50 <uxTaskResetEventItemValue+0x2c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f38:	4b05      	ldr	r3, [pc, #20]	@ (8004f50 <uxTaskResetEventItemValue+0x2c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1c2 0207 	rsb	r2, r2, #7
 8004f40:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8004f42:	687b      	ldr	r3, [r7, #4]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	20000c44 	.word	0x20000c44

08004f54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <pvTaskIncrementMutexHeldCount+0x2c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d004      	beq.n	8004f70 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8004f70:	687b      	ldr	r3, [r7, #4]
    }
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000c44 	.word	0x20000c44

08004f84 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <ulTaskGenericNotifyTake+0x20>
 8004f9a:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8004f9e:	4833      	ldr	r0, [pc, #204]	@ (800506c <ulTaskGenericNotifyTake+0xe8>)
 8004fa0:	f7fc fbd2 	bl	8001748 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004fa4:	f7fe ff96 	bl	8003ed4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8004fa8:	f000 fe12 	bl	8005bd0 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8004fac:	4b30      	ldr	r3, [pc, #192]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3318      	adds	r3, #24
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3368      	adds	r3, #104	@ 0x68
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004fd6:	f000 fe27 	bl	8005c28 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d103      	bne.n	8004fe8 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fc3a 	bl	800585c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004fe8:	f7fe ff82 	bl	8003ef0 <xTaskResumeAll>
 8004fec:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d10a      	bne.n	800500a <ulTaskGenericNotifyTake+0x86>
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d107      	bne.n	800500a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8004ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8005074 <ulTaskGenericNotifyTake+0xf0>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800500a:	f000 fde1 	bl	8005bd0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800500e:	4b18      	ldr	r3, [pc, #96]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3318      	adds	r3, #24
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d014      	beq.n	800504e <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d008      	beq.n	800503c <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 800502a:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3318      	adds	r3, #24
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e008      	b.n	800504e <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	1e5a      	subs	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3318      	adds	r3, #24
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 800504e:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <ulTaskGenericNotifyTake+0xec>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	3368      	adds	r3, #104	@ 0x68
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800505c:	f000 fde4 	bl	8005c28 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005060:	697b      	ldr	r3, [r7, #20]
    }
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	08023bf4 	.word	0x08023bf4
 8005070:	20000c44 	.word	0x20000c44
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <xTaskGenericNotifyWait+0x22>
 8005090:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005094:	483e      	ldr	r0, [pc, #248]	@ (8005190 <xTaskGenericNotifyWait+0x118>)
 8005096:	f7fc fb57 	bl	8001748 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 800509a:	f7fe ff1b 	bl	8003ed4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800509e:	f000 fd97 	bl	8005bd0 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80050a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	3368      	adds	r3, #104	@ 0x68
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d01a      	beq.n	80050ea <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80050b4:	4b37      	ldr	r3, [pc, #220]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3318      	adds	r3, #24
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	4019      	ands	r1, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3318      	adds	r3, #24
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80050d2:	4b30      	ldr	r3, [pc, #192]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	3368      	adds	r3, #104	@ 0x68
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80050ea:	f000 fd9d 	bl	8005c28 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d103      	bne.n	80050fc <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050f4:	2101      	movs	r1, #1
 80050f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050f8:	f000 fbb0 	bl	800585c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80050fc:	f7fe fef8 	bl	8003ef0 <xTaskResumeAll>
 8005100:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10a      	bne.n	800511e <xTaskGenericNotifyWait+0xa6>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 800510e:	4b22      	ldr	r3, [pc, #136]	@ (8005198 <xTaskGenericNotifyWait+0x120>)
 8005110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800511e:	f000 fd57 	bl	8005bd0 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3318      	adds	r3, #24
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800513a:	4b16      	ldr	r3, [pc, #88]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	3368      	adds	r3, #104	@ 0x68
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d002      	beq.n	8005152 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	e010      	b.n	8005174 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3318      	adds	r3, #24
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	43db      	mvns	r3, r3
 8005164:	4019      	ands	r1, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3318      	adds	r3, #24
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005174:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <xTaskGenericNotifyWait+0x11c>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	3368      	adds	r3, #104	@ 0x68
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005182:	f000 fd51 	bl	8005c28 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005186:	69fb      	ldr	r3, [r7, #28]
    }
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	08023bf4 	.word	0x08023bf4
 8005194:	20000c44 	.word	0x20000c44
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	@ 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80051aa:	2301      	movs	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <xTaskGenericNotify+0x22>
 80051b4:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 80051b8:	487b      	ldr	r0, [pc, #492]	@ (80053a8 <xTaskGenericNotify+0x20c>)
 80051ba:	f7fc fac5 	bl	8001748 <vAssertCalled>
        configASSERT( xTaskToNotify );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <xTaskGenericNotify+0x32>
 80051c4:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 80051c8:	4877      	ldr	r0, [pc, #476]	@ (80053a8 <xTaskGenericNotify+0x20c>)
 80051ca:	f7fc fabd 	bl	8001748 <vAssertCalled>
        pxTCB = xTaskToNotify;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 80051d2:	f000 fcfd 	bl	8005bd0 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80051dc:	6a3a      	ldr	r2, [r7, #32]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	3318      	adds	r3, #24
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80051ec:	6a3a      	ldr	r2, [r7, #32]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4413      	add	r3, r2
 80051f2:	3368      	adds	r3, #104	@ 0x68
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	3368      	adds	r3, #104	@ 0x68
 8005200:	2202      	movs	r2, #2
 8005202:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	2b04      	cmp	r3, #4
 8005208:	d83f      	bhi.n	800528a <xTaskGenericNotify+0xee>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <xTaskGenericNotify+0x74>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	0800529f 	.word	0x0800529f
 8005214:	08005225 	.word	0x08005225
 8005218:	08005243 	.word	0x08005243
 800521c:	0800525f 	.word	0x0800525f
 8005220:	0800526f 	.word	0x0800526f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3318      	adds	r3, #24
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	431a      	orrs	r2, r3
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3318      	adds	r3, #24
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	605a      	str	r2, [r3, #4]
                    break;
 8005240:	e030      	b.n	80052a4 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	3318      	adds	r3, #24
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	6a39      	ldr	r1, [r7, #32]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	3318      	adds	r3, #24
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	605a      	str	r2, [r3, #4]
                    break;
 800525c:	e022      	b.n	80052a4 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	3318      	adds	r3, #24
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
                    break;
 800526c:	e01a      	b.n	80052a4 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d007      	beq.n	8005284 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3318      	adds	r3, #24
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005282:	e00f      	b.n	80052a4 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005284:	2300      	movs	r3, #0
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005288:	e00c      	b.n	80052a4 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800528a:	4b48      	ldr	r3, [pc, #288]	@ (80053ac <xTaskGenericNotify+0x210>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <xTaskGenericNotify+0x106>
 8005292:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005296:	4844      	ldr	r0, [pc, #272]	@ (80053a8 <xTaskGenericNotify+0x20c>)
 8005298:	f7fc fa56 	bl	8001748 <vAssertCalled>

                    break;
 800529c:	e001      	b.n	80052a2 <xTaskGenericNotify+0x106>
                    break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <xTaskGenericNotify+0x108>
                    break;
 80052a2:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80052a4:	7ffb      	ldrb	r3, [r7, #31]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d177      	bne.n	800539a <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	68d2      	ldr	r2, [r2, #12]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	6892      	ldr	r2, [r2, #8]
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	3304      	adds	r3, #4
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d103      	bne.n	80052d8 <xTaskGenericNotify+0x13c>
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2200      	movs	r2, #0
 80052dc:	615a      	str	r2, [r3, #20]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	1e5a      	subs	r2, r3, #1
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	4b2f      	ldr	r3, [pc, #188]	@ (80053b0 <xTaskGenericNotify+0x214>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	4a2e      	ldr	r2, [pc, #184]	@ (80053b0 <xTaskGenericNotify+0x214>)
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052fe:	492d      	ldr	r1, [pc, #180]	@ (80053b4 <xTaskGenericNotify+0x218>)
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3304      	adds	r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	6a3a      	ldr	r2, [r7, #32]
 8005324:	3204      	adds	r2, #4
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <xTaskGenericNotify+0x218>)
 800533e:	441a      	add	r2, r3
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	615a      	str	r2, [r3, #20]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005348:	491a      	ldr	r1, [pc, #104]	@ (80053b4 <xTaskGenericNotify+0x218>)
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	4815      	ldr	r0, [pc, #84]	@ (80053b4 <xTaskGenericNotify+0x218>)
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4403      	add	r3, r0
 8005368:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <xTaskGenericNotify+0x1e0>
 8005372:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005376:	480c      	ldr	r0, [pc, #48]	@ (80053a8 <xTaskGenericNotify+0x20c>)
 8005378:	f7fc f9e6 	bl	8001748 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <xTaskGenericNotify+0x21c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005386:	429a      	cmp	r2, r3
 8005388:	d207      	bcs.n	800539a <xTaskGenericNotify+0x1fe>
 800538a:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <xTaskGenericNotify+0x220>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800539a:	f000 fc45 	bl	8005c28 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	08023bf4 	.word	0x08023bf4
 80053ac:	20000d48 	.word	0x20000d48
 80053b0:	20000d4c 	.word	0x20000d4c
 80053b4:	20000c48 	.word	0x20000c48
 80053b8:	20000c44 	.word	0x20000c44
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08e      	sub	sp, #56	@ 0x38
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80053ce:	2301      	movs	r3, #1
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <xTaskGenericNotifyFromISR+0x22>
 80053d8:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 80053dc:	4899      	ldr	r0, [pc, #612]	@ (8005644 <xTaskGenericNotifyFromISR+0x284>)
 80053de:	f7fc f9b3 	bl	8001748 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <xTaskGenericNotifyFromISR+0x32>
 80053e8:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 80053ec:	4895      	ldr	r0, [pc, #596]	@ (8005644 <xTaskGenericNotifyFromISR+0x284>)
 80053ee:	f7fc f9ab 	bl	8001748 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053f2:	f000 fcbb 	bl	8005d6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80053fa:	f3ef 8211 	mrs	r2, BASEPRI
 80053fe:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005402:	b672      	cpsid	i
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	b662      	cpsie	i
 8005412:	61ba      	str	r2, [r7, #24]
 8005414:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005416:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 800541a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3318      	adds	r3, #24
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800542e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4413      	add	r3, r2
 8005436:	3368      	adds	r3, #104	@ 0x68
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800543e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4413      	add	r3, r2
 8005444:	3368      	adds	r3, #104	@ 0x68
 8005446:	2202      	movs	r2, #2
 8005448:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	2b04      	cmp	r3, #4
 800544e:	d841      	bhi.n	80054d4 <xTaskGenericNotifyFromISR+0x114>
 8005450:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <xTaskGenericNotifyFromISR+0x98>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	080054e9 	.word	0x080054e9
 800545c:	0800546d 	.word	0x0800546d
 8005460:	0800548b 	.word	0x0800548b
 8005464:	080054a7 	.word	0x080054a7
 8005468:	080054b7 	.word	0x080054b7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800546c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	3318      	adds	r3, #24
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	431a      	orrs	r2, r3
 800547c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	3318      	adds	r3, #24
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	605a      	str	r2, [r3, #4]
                    break;
 8005488:	e031      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800548a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	3318      	adds	r3, #24
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3318      	adds	r3, #24
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	605a      	str	r2, [r3, #4]
                    break;
 80054a4:	e023      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3318      	adds	r3, #24
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	605a      	str	r2, [r3, #4]
                    break;
 80054b4:	e01b      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d007      	beq.n	80054ce <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	3318      	adds	r3, #24
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80054cc:	e00f      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80054d2:	e00c      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80054d4:	4b5c      	ldr	r3, [pc, #368]	@ (8005648 <xTaskGenericNotifyFromISR+0x288>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <xTaskGenericNotifyFromISR+0x12c>
 80054dc:	f641 7169 	movw	r1, #8041	@ 0x1f69
 80054e0:	4858      	ldr	r0, [pc, #352]	@ (8005644 <xTaskGenericNotifyFromISR+0x284>)
 80054e2:	f7fc f931 	bl	8001748 <vAssertCalled>
                    break;
 80054e6:	e001      	b.n	80054ec <xTaskGenericNotifyFromISR+0x12c>
                    break;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <xTaskGenericNotifyFromISR+0x12e>
                    break;
 80054ec:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80054ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f040 809a 	bne.w	800562c <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <xTaskGenericNotifyFromISR+0x14a>
 8005500:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005504:	484f      	ldr	r0, [pc, #316]	@ (8005644 <xTaskGenericNotifyFromISR+0x284>)
 8005506:	f7fc f91f 	bl	8001748 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800550a:	4b50      	ldr	r3, [pc, #320]	@ (800564c <xTaskGenericNotifyFromISR+0x28c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d160      	bne.n	80055d4 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	623b      	str	r3, [r7, #32]
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551e:	68d2      	ldr	r2, [r2, #12]
 8005520:	609a      	str	r2, [r3, #8]
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	3304      	adds	r3, #4
 8005534:	429a      	cmp	r2, r3
 8005536:	d103      	bne.n	8005540 <xTaskGenericNotifyFromISR+0x180>
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	1e5a      	subs	r2, r3, #1
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	2201      	movs	r2, #1
 8005556:	409a      	lsls	r2, r3
 8005558:	4b3d      	ldr	r3, [pc, #244]	@ (8005650 <xTaskGenericNotifyFromISR+0x290>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	4a3c      	ldr	r2, [pc, #240]	@ (8005650 <xTaskGenericNotifyFromISR+0x290>)
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005566:	493b      	ldr	r1, [pc, #236]	@ (8005654 <xTaskGenericNotifyFromISR+0x294>)
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3304      	adds	r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	609a      	str	r2, [r3, #8]
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	60da      	str	r2, [r3, #12]
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558c:	3204      	adds	r2, #4
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	1d1a      	adds	r2, r3, #4
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005654 <xTaskGenericNotifyFromISR+0x294>)
 80055a6:	441a      	add	r2, r3
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	615a      	str	r2, [r3, #20]
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	4928      	ldr	r1, [pc, #160]	@ (8005654 <xTaskGenericNotifyFromISR+0x294>)
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	4823      	ldr	r0, [pc, #140]	@ (8005654 <xTaskGenericNotifyFromISR+0x294>)
 80055c6:	4613      	mov	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4403      	add	r3, r0
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	e01b      	b.n	800560c <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80055d4:	4b20      	ldr	r3, [pc, #128]	@ (8005658 <xTaskGenericNotifyFromISR+0x298>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055de:	61da      	str	r2, [r3, #28]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	621a      	str	r2, [r3, #32]
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ee:	3218      	adds	r2, #24
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f4:	f103 0218 	add.w	r2, r3, #24
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	609a      	str	r2, [r3, #8]
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <xTaskGenericNotifyFromISR+0x298>)
 8005600:	629a      	str	r2, [r3, #40]	@ 0x28
 8005602:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <xTaskGenericNotifyFromISR+0x298>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a13      	ldr	r2, [pc, #76]	@ (8005658 <xTaskGenericNotifyFromISR+0x298>)
 800560a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	4b12      	ldr	r3, [pc, #72]	@ (800565c <xTaskGenericNotifyFromISR+0x29c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d908      	bls.n	800562c <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800561a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005626:	4b0e      	ldr	r3, [pc, #56]	@ (8005660 <xTaskGenericNotifyFromISR+0x2a0>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005636:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8005638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800563a:	4618      	mov	r0, r3
 800563c:	3738      	adds	r7, #56	@ 0x38
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	08023bf4 	.word	0x08023bf4
 8005648:	20000d48 	.word	0x20000d48
 800564c:	20000d6c 	.word	0x20000d6c
 8005650:	20000d4c 	.word	0x20000d4c
 8005654:	20000c48 	.word	0x20000c48
 8005658:	20000d04 	.word	0x20000d04
 800565c:	20000c44 	.word	0x20000c44
 8005660:	20000d58 	.word	0x20000d58

08005664 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005664:	b580      	push	{r7, lr}
 8005666:	b08e      	sub	sp, #56	@ 0x38
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <vTaskGenericNotifyGiveFromISR+0x1c>
 8005676:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 800567a:	4871      	ldr	r0, [pc, #452]	@ (8005840 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800567c:	f7fc f864 	bl	8001748 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d004      	beq.n	8005690 <vTaskGenericNotifyGiveFromISR+0x2c>
 8005686:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 800568a:	486d      	ldr	r0, [pc, #436]	@ (8005840 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800568c:	f7fc f85c 	bl	8001748 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005690:	f000 fb6c 	bl	8005d6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8005698:	f3ef 8211 	mrs	r2, BASEPRI
 800569c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80056a0:	b672      	cpsid	i
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	b662      	cpsie	i
 80056b0:	61fa      	str	r2, [r7, #28]
 80056b2:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80056b4:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80056b6:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80056b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4413      	add	r3, r2
 80056be:	3368      	adds	r3, #104	@ 0x68
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80056c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4413      	add	r3, r2
 80056cc:	3368      	adds	r3, #104	@ 0x68
 80056ce:	2202      	movs	r2, #2
 80056d0:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80056d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3318      	adds	r3, #24
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3318      	adds	r3, #24
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	440b      	add	r3, r1
 80056ea:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80056ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 809a 	bne.w	800582a <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80056f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <vTaskGenericNotifyGiveFromISR+0xa4>
 80056fe:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005702:	484f      	ldr	r0, [pc, #316]	@ (8005840 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005704:	f7fc f820 	bl	8001748 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005708:	4b4e      	ldr	r3, [pc, #312]	@ (8005844 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d160      	bne.n	80057d2 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800571c:	68d2      	ldr	r2, [r2, #12]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	3304      	adds	r3, #4
 8005732:	429a      	cmp	r2, r3
 8005734:	d103      	bne.n	800573e <vTaskGenericNotifyGiveFromISR+0xda>
 8005736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005740:	2200      	movs	r2, #0
 8005742:	615a      	str	r2, [r3, #20]
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	1e5a      	subs	r2, r3, #1
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800574e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005752:	2201      	movs	r2, #1
 8005754:	409a      	lsls	r2, r3
 8005756:	4b3c      	ldr	r3, [pc, #240]	@ (8005848 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	4a3a      	ldr	r2, [pc, #232]	@ (8005848 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005764:	4939      	ldr	r1, [pc, #228]	@ (800584c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	3304      	adds	r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005778:	6a3a      	ldr	r2, [r7, #32]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	689a      	ldr	r2, [r3, #8]
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	60da      	str	r2, [r3, #12]
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800578a:	3204      	adds	r2, #4
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4a2a      	ldr	r2, [pc, #168]	@ (800584c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80057a4:	441a      	add	r2, r3
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a8:	615a      	str	r2, [r3, #20]
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	4927      	ldr	r1, [pc, #156]	@ (800584c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	4822      	ldr	r0, [pc, #136]	@ (800584c <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4403      	add	r3, r0
 80057ce:	6019      	str	r1, [r3, #0]
 80057d0:	e01b      	b.n	800580a <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80057d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005850 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057dc:	61da      	str	r2, [r3, #28]
 80057de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e4:	621a      	str	r2, [r3, #32]
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ec:	3218      	adds	r2, #24
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	f103 0218 	add.w	r2, r3, #24
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	4a14      	ldr	r2, [pc, #80]	@ (8005850 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8005800:	4b13      	ldr	r3, [pc, #76]	@ (8005850 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a12      	ldr	r2, [pc, #72]	@ (8005850 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005808:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580e:	4b11      	ldr	r3, [pc, #68]	@ (8005854 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d908      	bls.n	800582a <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	617b      	str	r3, [r7, #20]
    __asm volatile
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f383 8811 	msr	BASEPRI, r3
}
 8005834:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005836:	bf00      	nop
 8005838:	3738      	adds	r7, #56	@ 0x38
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08023bf4 	.word	0x08023bf4
 8005844:	20000d6c 	.word	0x20000d6c
 8005848:	20000d4c 	.word	0x20000d4c
 800584c:	20000c48 	.word	0x20000c48
 8005850:	20000d04 	.word	0x20000d04
 8005854:	20000c44 	.word	0x20000c44
 8005858:	20000d58 	.word	0x20000d58

0800585c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005866:	4b37      	ldr	r3, [pc, #220]	@ (8005944 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800586c:	4b36      	ldr	r3, [pc, #216]	@ (8005948 <prvAddCurrentTaskToDelayedList+0xec>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8005872:	4b36      	ldr	r3, [pc, #216]	@ (800594c <prvAddCurrentTaskToDelayedList+0xf0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005878:	4b35      	ldr	r3, [pc, #212]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fade 	bl	8002e40 <uxListRemove>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800588a:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	4b2e      	ldr	r3, [pc, #184]	@ (8005954 <prvAddCurrentTaskToDelayedList+0xf8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <prvAddCurrentTaskToDelayedList+0xf8>)
 80058a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a8:	d124      	bne.n	80058f4 <prvAddCurrentTaskToDelayedList+0x98>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d021      	beq.n	80058f4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b0:	4b29      	ldr	r3, [pc, #164]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	4b26      	ldr	r3, [pc, #152]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	609a      	str	r2, [r3, #8]
 80058be:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	4b21      	ldr	r3, [pc, #132]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	3204      	adds	r2, #4
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	1d1a      	adds	r2, r3, #4
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	4b1c      	ldr	r3, [pc, #112]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058e4:	615a      	str	r2, [r3, #20]
 80058e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005958 <prvAddCurrentTaskToDelayedList+0xfc>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80058f2:	e022      	b.n	800593a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d207      	bcs.n	800591c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800590c:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	6978      	ldr	r0, [r7, #20]
 8005916:	f7fd fa5a 	bl	8002dce <vListInsert>
}
 800591a:	e00e      	b.n	800593a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <prvAddCurrentTaskToDelayedList+0xf4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3304      	adds	r3, #4
 8005922:	4619      	mov	r1, r3
 8005924:	69b8      	ldr	r0, [r7, #24]
 8005926:	f7fd fa52 	bl	8002dce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800592a:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <prvAddCurrentTaskToDelayedList+0x100>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	429a      	cmp	r2, r3
 8005932:	d202      	bcs.n	800593a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005934:	4a09      	ldr	r2, [pc, #36]	@ (800595c <prvAddCurrentTaskToDelayedList+0x100>)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000d48 	.word	0x20000d48
 8005948:	20000cfc 	.word	0x20000cfc
 800594c:	20000d00 	.word	0x20000d00
 8005950:	20000c44 	.word	0x20000c44
 8005954:	20000d4c 	.word	0x20000d4c
 8005958:	20000d30 	.word	0x20000d30
 800595c:	20000d64 	.word	0x20000d64

08005960 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b04      	subs	r3, #4
 8005970:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005978:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b04      	subs	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b04      	subs	r3, #4
 800598e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005990:	4a0c      	ldr	r2, [pc, #48]	@ (80059c4 <pxPortInitialiseStack+0x64>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3b14      	subs	r3, #20
 800599a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f06f 0202 	mvn.w	r2, #2
 80059ae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b20      	subs	r3, #32
 80059b4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80059b6:	68fb      	ldr	r3, [r7, #12]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	080059c9 	.word	0x080059c9

080059c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80059d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a10 <prvTaskExitError+0x48>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d003      	beq.n	80059e4 <prvTaskExitError+0x1c>
 80059dc:	21ee      	movs	r1, #238	@ 0xee
 80059de:	480d      	ldr	r0, [pc, #52]	@ (8005a14 <prvTaskExitError+0x4c>)
 80059e0:	f7fb feb2 	bl	8001748 <vAssertCalled>
    __asm volatile
 80059e4:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80059e8:	b672      	cpsid	i
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	b662      	cpsie	i
 80059f8:	607b      	str	r3, [r7, #4]
}
 80059fa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80059fc:	bf00      	nop
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0fc      	beq.n	80059fe <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c
 8005a14:	08023c20 	.word	0x08023c20
	...

08005a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005a20:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <pxCurrentTCBConst2>)
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	f380 8809 	msr	PSP, r0
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8811 	msr	BASEPRI, r0
 8005a3a:	4770      	bx	lr
 8005a3c:	f3af 8000 	nop.w

08005a40 <pxCurrentTCBConst2>:
 8005a40:	20000c44 	.word	0x20000c44
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005a48:	4808      	ldr	r0, [pc, #32]	@ (8005a6c <prvPortStartFirstTask+0x24>)
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	6800      	ldr	r0, [r0, #0]
 8005a4e:	f380 8808 	msr	MSP, r0
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8814 	msr	CONTROL, r0
 8005a5a:	b662      	cpsie	i
 8005a5c:	b661      	cpsie	f
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	df00      	svc	0
 8005a68:	bf00      	nop
 8005a6a:	0000      	.short	0x0000
 8005a6c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop

08005a74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8005a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ba4 <xPortStartScheduler+0x130>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	332c      	adds	r3, #44	@ 0x2c
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a48      	ldr	r2, [pc, #288]	@ (8005ba8 <xPortStartScheduler+0x134>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <xPortStartScheduler+0x22>
 8005a8c:	f240 114b 	movw	r1, #331	@ 0x14b
 8005a90:	4846      	ldr	r0, [pc, #280]	@ (8005bac <xPortStartScheduler+0x138>)
 8005a92:	f7fb fe59 	bl	8001748 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3338      	adds	r3, #56	@ 0x38
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a44      	ldr	r2, [pc, #272]	@ (8005bb0 <xPortStartScheduler+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <xPortStartScheduler+0x38>
 8005aa2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005aa6:	4841      	ldr	r0, [pc, #260]	@ (8005bac <xPortStartScheduler+0x138>)
 8005aa8:	f7fb fe4e 	bl	8001748 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ab0:	4b40      	ldr	r3, [pc, #256]	@ (8005bb4 <xPortStartScheduler+0x140>)
 8005ab2:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	22ff      	movs	r2, #255	@ 0xff
 8005ac0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	4b38      	ldr	r3, [pc, #224]	@ (8005bb8 <xPortStartScheduler+0x144>)
 8005ad6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005ad8:	4b37      	ldr	r3, [pc, #220]	@ (8005bb8 <xPortStartScheduler+0x144>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <xPortStartScheduler+0x76>
 8005ae0:	f240 116f 	movw	r1, #367	@ 0x16f
 8005ae4:	4831      	ldr	r0, [pc, #196]	@ (8005bac <xPortStartScheduler+0x138>)
 8005ae6:	f7fb fe2f 	bl	8001748 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <xPortStartScheduler+0xa0>
 8005af8:	f240 1173 	movw	r1, #371	@ 0x173
 8005afc:	482b      	ldr	r0, [pc, #172]	@ (8005bac <xPortStartScheduler+0x138>)
 8005afe:	f7fb fe23 	bl	8001748 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b02:	e007      	b.n	8005b14 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1c:	2b80      	cmp	r3, #128	@ 0x80
 8005b1e:	d0f1      	beq.n	8005b04 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d103      	bne.n	8005b2e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005b26:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e004      	b.n	8005b38 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f1c3 0307 	rsb	r3, r3, #7
 8005b34:	4a21      	ldr	r2, [pc, #132]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b36:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b40:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b42:	4b1e      	ldr	r3, [pc, #120]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <xPortStartScheduler+0x148>)
 8005b4c:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <xPortStartScheduler+0x14c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a19      	ldr	r2, [pc, #100]	@ (8005bc0 <xPortStartScheduler+0x14c>)
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b60:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005b62:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <xPortStartScheduler+0x14c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <xPortStartScheduler+0x14c>)
 8005b68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005b6e:	4b15      	ldr	r3, [pc, #84]	@ (8005bc4 <xPortStartScheduler+0x150>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005b74:	f000 f8d4 	bl	8005d20 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005b78:	4b13      	ldr	r3, [pc, #76]	@ (8005bc8 <xPortStartScheduler+0x154>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005b7e:	f000 f8e9 	bl	8005d54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <xPortStartScheduler+0x158>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <xPortStartScheduler+0x158>)
 8005b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005b8e:	f7ff ff5b 	bl	8005a48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005b92:	f7fe fbf3 	bl	800437c <vTaskSwitchContext>
    prvTaskExitError();
 8005b96:	f7ff ff17 	bl	80059c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed08 	.word	0xe000ed08
 8005ba8:	08005a21 	.word	0x08005a21
 8005bac:	08023c20 	.word	0x08023c20
 8005bb0:	08005c71 	.word	0x08005c71
 8005bb4:	e000e400 	.word	0xe000e400
 8005bb8:	20000d78 	.word	0x20000d78
 8005bbc:	20000d7c 	.word	0x20000d7c
 8005bc0:	e000ed20 	.word	0xe000ed20
 8005bc4:	e000ed1c 	.word	0xe000ed1c
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	e000ef34 	.word	0xe000ef34

08005bd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
    __asm volatile
 8005bd6:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005bda:	b672      	cpsid	i
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	b662      	cpsie	i
 8005bea:	607b      	str	r3, [r7, #4]
}
 8005bec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <vPortEnterCritical+0x4c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a09      	ldr	r2, [pc, #36]	@ (8005c1c <vPortEnterCritical+0x4c>)
 8005bf6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005bf8:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <vPortEnterCritical+0x4c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d109      	bne.n	8005c14 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c00:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <vPortEnterCritical+0x50>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <vPortEnterCritical+0x44>
 8005c0a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005c0e:	4805      	ldr	r0, [pc, #20]	@ (8005c24 <vPortEnterCritical+0x54>)
 8005c10:	f7fb fd9a 	bl	8001748 <vAssertCalled>
    }
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	2000000c 	.word	0x2000000c
 8005c20:	e000ed04 	.word	0xe000ed04
 8005c24:	08023c20 	.word	0x08023c20

08005c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c68 <vPortExitCritical+0x40>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <vPortExitCritical+0x18>
 8005c36:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8005c3a:	480c      	ldr	r0, [pc, #48]	@ (8005c6c <vPortExitCritical+0x44>)
 8005c3c:	f7fb fd84 	bl	8001748 <vAssertCalled>
    uxCriticalNesting--;
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <vPortExitCritical+0x40>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	4a08      	ldr	r2, [pc, #32]	@ (8005c68 <vPortExitCritical+0x40>)
 8005c48:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005c4a:	4b07      	ldr	r3, [pc, #28]	@ (8005c68 <vPortExitCritical+0x40>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d105      	bne.n	8005c5e <vPortExitCritical+0x36>
 8005c52:	2300      	movs	r3, #0
 8005c54:	607b      	str	r3, [r7, #4]
    __asm volatile
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f383 8811 	msr	BASEPRI, r3
}
 8005c5c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	2000000c 	.word	0x2000000c
 8005c6c:	08023c20 	.word	0x08023c20

08005c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005c70:	f3ef 8009 	mrs	r0, PSP
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <pxCurrentTCBConst>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	f01e 0f10 	tst.w	lr, #16
 8005c80:	bf08      	it	eq
 8005c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8a:	6010      	str	r0, [r2, #0]
 8005c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c90:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005c94:	b672      	cpsid	i
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	b662      	cpsie	i
 8005ca4:	f7fe fb6a 	bl	800437c <vTaskSwitchContext>
 8005ca8:	f04f 0000 	mov.w	r0, #0
 8005cac:	f380 8811 	msr	BASEPRI, r0
 8005cb0:	bc09      	pop	{r0, r3}
 8005cb2:	6819      	ldr	r1, [r3, #0]
 8005cb4:	6808      	ldr	r0, [r1, #0]
 8005cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	f01e 0f10 	tst.w	lr, #16
 8005cbe:	bf08      	it	eq
 8005cc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cc4:	f380 8809 	msr	PSP, r0
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <pxCurrentTCBConst>:
 8005cd0:	20000c44 	.word	0x20000c44
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop

08005cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
    __asm volatile
 8005cde:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005ce2:	b672      	cpsid	i
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	b662      	cpsie	i
 8005cf2:	607b      	str	r3, [r7, #4]
}
 8005cf4:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005cf6:	f7fe fa2d 	bl	8004154 <xTaskIncrementTick>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <xPortSysTickHandler+0x44>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f383 8811 	msr	BASEPRI, r3
}
 8005d12:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d24:	4b08      	ldr	r3, [pc, #32]	@ (8005d48 <vPortSetupTimerInterrupt+0x28>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d2a:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <vPortSetupTimerInterrupt+0x2c>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d30:	4b07      	ldr	r3, [pc, #28]	@ (8005d50 <vPortSetupTimerInterrupt+0x30>)
 8005d32:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8005d36:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d38:	4b03      	ldr	r3, [pc, #12]	@ (8005d48 <vPortSetupTimerInterrupt+0x28>)
 8005d3a:	2203      	movs	r2, #3
 8005d3c:	601a      	str	r2, [r3, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000e010 	.word	0xe000e010
 8005d4c:	e000e018 	.word	0xe000e018
 8005d50:	e000e014 	.word	0xe000e014

08005d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005d54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d64 <vPortEnableVFP+0x10>
 8005d58:	6801      	ldr	r1, [r0, #0]
 8005d5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d5e:	6001      	str	r1, [r0, #0]
 8005d60:	4770      	bx	lr
 8005d62:	0000      	.short	0x0000
 8005d64:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop

08005d6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005d72:	f3ef 8305 	mrs	r3, IPSR
 8005d76:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d90e      	bls.n	8005d9c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d7e:	4a10      	ldr	r2, [pc, #64]	@ (8005dc0 <vPortValidateInterruptPriority+0x54>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d88:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc4 <vPortValidateInterruptPriority+0x58>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d204      	bcs.n	8005d9c <vPortValidateInterruptPriority+0x30>
 8005d92:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005d96:	480c      	ldr	r0, [pc, #48]	@ (8005dc8 <vPortValidateInterruptPriority+0x5c>)
 8005d98:	f7fb fcd6 	bl	8001748 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <vPortValidateInterruptPriority+0x60>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <vPortValidateInterruptPriority+0x64>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d904      	bls.n	8005db6 <vPortValidateInterruptPriority+0x4a>
 8005dac:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8005db0:	4805      	ldr	r0, [pc, #20]	@ (8005dc8 <vPortValidateInterruptPriority+0x5c>)
 8005db2:	f7fb fcc9 	bl	8001748 <vAssertCalled>
    }
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	e000e3f0 	.word	0xe000e3f0
 8005dc4:	20000d78 	.word	0x20000d78
 8005dc8:	08023c20 	.word	0x08023c20
 8005dcc:	e000ed0c 	.word	0xe000ed0c
 8005dd0:	20000d7c 	.word	0x20000d7c

08005dd4 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8005de0:	4b60      	ldr	r3, [pc, #384]	@ (8005f64 <pvPortMalloc+0x190>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <pvPortMalloc+0x1c>
 8005de8:	21da      	movs	r1, #218	@ 0xda
 8005dea:	485f      	ldr	r0, [pc, #380]	@ (8005f68 <pvPortMalloc+0x194>)
 8005dec:	f7fb fcac 	bl	8001748 <vAssertCalled>

    if( xWantedSize > 0 )
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d022      	beq.n	8005e3c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005df6:	2308      	movs	r3, #8
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d81b      	bhi.n	8005e38 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d014      	beq.n	8005e3c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	f1c3 0308 	rsb	r3, r3, #8
 8005e1c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d804      	bhi.n	8005e32 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	607b      	str	r3, [r7, #4]
 8005e30:	e004      	b.n	8005e3c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	e001      	b.n	8005e3c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005e3c:	f7fe f84a 	bl	8003ed4 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	db78      	blt.n	8005f38 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d075      	beq.n	8005f38 <pvPortMalloc+0x164>
 8005e4c:	4b47      	ldr	r3, [pc, #284]	@ (8005f6c <pvPortMalloc+0x198>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d870      	bhi.n	8005f38 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005e56:	4b46      	ldr	r3, [pc, #280]	@ (8005f70 <pvPortMalloc+0x19c>)
 8005e58:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005e5a:	4b45      	ldr	r3, [pc, #276]	@ (8005f70 <pvPortMalloc+0x19c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005e60:	e004      	b.n	8005e6c <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d903      	bls.n	8005e7e <pvPortMalloc+0xaa>
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f1      	bne.n	8005e62 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005e7e:	4b39      	ldr	r3, [pc, #228]	@ (8005f64 <pvPortMalloc+0x190>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d057      	beq.n	8005f38 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2208      	movs	r2, #8
 8005e8e:	4413      	add	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d904      	bls.n	8005eae <pvPortMalloc+0xda>
 8005ea4:	f240 1129 	movw	r1, #297	@ 0x129
 8005ea8:	482f      	ldr	r0, [pc, #188]	@ (8005f68 <pvPortMalloc+0x194>)
 8005eaa:	f7fb fc4d 	bl	8001748 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	1ad2      	subs	r2, r2, r3
 8005eb6:	2308      	movs	r3, #8
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d91d      	bls.n	8005efa <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0307 	and.w	r3, r3, #7
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <pvPortMalloc+0x106>
 8005ed0:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8005ed4:	4824      	ldr	r0, [pc, #144]	@ (8005f68 <pvPortMalloc+0x194>)
 8005ed6:	f7fb fc37 	bl	8001748 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	1ad2      	subs	r2, r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005efa:	4b1c      	ldr	r3, [pc, #112]	@ (8005f6c <pvPortMalloc+0x198>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	4a19      	ldr	r2, [pc, #100]	@ (8005f6c <pvPortMalloc+0x198>)
 8005f06:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f08:	4b18      	ldr	r3, [pc, #96]	@ (8005f6c <pvPortMalloc+0x198>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	4b19      	ldr	r3, [pc, #100]	@ (8005f74 <pvPortMalloc+0x1a0>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d203      	bcs.n	8005f1c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f14:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <pvPortMalloc+0x198>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a16      	ldr	r2, [pc, #88]	@ (8005f74 <pvPortMalloc+0x1a0>)
 8005f1a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005f2e:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <pvPortMalloc+0x1a4>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	4a10      	ldr	r2, [pc, #64]	@ (8005f78 <pvPortMalloc+0x1a4>)
 8005f36:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005f38:	f7fd ffda 	bl	8003ef0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8005f42:	f7fb fc15 	bl	8001770 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d004      	beq.n	8005f5a <pvPortMalloc+0x186>
 8005f50:	f240 1173 	movw	r1, #371	@ 0x173
 8005f54:	4804      	ldr	r0, [pc, #16]	@ (8005f68 <pvPortMalloc+0x194>)
 8005f56:	f7fb fbf7 	bl	8001748 <vAssertCalled>
    return pvReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000d88 	.word	0x20000d88
 8005f68:	08023c5c 	.word	0x08023c5c
 8005f6c:	20000d8c 	.word	0x20000d8c
 8005f70:	20000d80 	.word	0x20000d80
 8005f74:	20000d90 	.word	0x20000d90
 8005f78:	20000d94 	.word	0x20000d94

08005f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d03d      	beq.n	800600a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005f8e:	2308      	movs	r3, #8
 8005f90:	425b      	negs	r3, r3
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	db04      	blt.n	8005fae <vPortFree+0x32>
 8005fa4:	f240 1187 	movw	r1, #391	@ 0x187
 8005fa8:	481a      	ldr	r0, [pc, #104]	@ (8006014 <vPortFree+0x98>)
 8005faa:	f7fb fbcd 	bl	8001748 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <vPortFree+0x44>
 8005fb6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8005fba:	4816      	ldr	r0, [pc, #88]	@ (8006014 <vPortFree+0x98>)
 8005fbc:	f7fb fbc4 	bl	8001748 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	0fdb      	lsrs	r3, r3, #31
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01c      	beq.n	800600a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d118      	bne.n	800600a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005fe4:	f7fd ff76 	bl	8003ed4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <vPortFree+0x9c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4a09      	ldr	r2, [pc, #36]	@ (8006018 <vPortFree+0x9c>)
 8005ff4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ff6:	68b8      	ldr	r0, [r7, #8]
 8005ff8:	f000 f82a 	bl	8006050 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <vPortFree+0xa0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	4a06      	ldr	r2, [pc, #24]	@ (800601c <vPortFree+0xa0>)
 8006004:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006006:	f7fd ff73 	bl	8003ef0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	08023c5c 	.word	0x08023c5c
 8006018:	20000d8c 	.word	0x20000d8c
 800601c:	20000d98 	.word	0x20000d98

08006020 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006024:	4b03      	ldr	r3, [pc, #12]	@ (8006034 <xPortGetFreeHeapSize+0x14>)
 8006026:	681b      	ldr	r3, [r3, #0]
}
 8006028:	4618      	mov	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20000d8c 	.word	0x20000d8c

08006038 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 800603c:	4b03      	ldr	r3, [pc, #12]	@ (800604c <xPortGetMinimumEverFreeHeapSize+0x14>)
 800603e:	681b      	ldr	r3, [r3, #0]
}
 8006040:	4618      	mov	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000d90 	.word	0x20000d90

08006050 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006058:	4b28      	ldr	r3, [pc, #160]	@ (80060fc <prvInsertBlockIntoFreeList+0xac>)
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e002      	b.n	8006064 <prvInsertBlockIntoFreeList+0x14>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d8f7      	bhi.n	800605e <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d108      	bne.n	8006092 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d118      	bne.n	80060d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d00d      	beq.n	80060ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80060ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d002      	beq.n	80060ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000d80 	.word	0x20000d80
 8006100:	20000d88 	.word	0x20000d88

08006104 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	@ 0x28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006118:	4b4b      	ldr	r3, [pc, #300]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <vPortDefineHeapRegions+0x26>
 8006120:	f240 2121 	movw	r1, #545	@ 0x221
 8006124:	4849      	ldr	r0, [pc, #292]	@ (800624c <vPortDefineHeapRegions+0x148>)
 8006126:	f7fb fb0f 	bl	8001748 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006134:	e071      	b.n	800621a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	3307      	adds	r3, #7
 8006150:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f023 0307 	bic.w	r3, r3, #7
 8006158:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006166:	4413      	add	r3, r2
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a36      	ldr	r2, [pc, #216]	@ (8006250 <vPortDefineHeapRegions+0x14c>)
 8006178:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 800617a:	4b35      	ldr	r3, [pc, #212]	@ (8006250 <vPortDefineHeapRegions+0x14c>)
 800617c:	2200      	movs	r2, #0
 800617e:	605a      	str	r2, [r3, #4]
 8006180:	e013      	b.n	80061aa <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006182:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d104      	bne.n	8006194 <vPortDefineHeapRegions+0x90>
 800618a:	f240 2149 	movw	r1, #585	@ 0x249
 800618e:	482f      	ldr	r0, [pc, #188]	@ (800624c <vPortDefineHeapRegions+0x148>)
 8006190:	f7fb fada 	bl	8001748 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006194:	4b2c      	ldr	r3, [pc, #176]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	461a      	mov	r2, r3
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	4293      	cmp	r3, r2
 800619e:	d804      	bhi.n	80061aa <vPortDefineHeapRegions+0xa6>
 80061a0:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 80061a4:	4829      	ldr	r0, [pc, #164]	@ (800624c <vPortDefineHeapRegions+0x148>)
 80061a6:	f7fb facf 	bl	8001748 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 80061aa:	4b27      	ldr	r3, [pc, #156]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	4413      	add	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80061b8:	2208      	movs	r2, #8
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 80061cc:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 80061ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80061d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80061ec:	4b16      	ldr	r3, [pc, #88]	@ (8006248 <vPortDefineHeapRegions+0x144>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	6a3a      	ldr	r2, [r7, #32]
 8006206:	4413      	add	r3, r2
 8006208:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	3301      	adds	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d189      	bne.n	8006136 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006222:	4a0c      	ldr	r2, [pc, #48]	@ (8006254 <vPortDefineHeapRegions+0x150>)
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006228:	4a0b      	ldr	r2, [pc, #44]	@ (8006258 <vPortDefineHeapRegions+0x154>)
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <vPortDefineHeapRegions+0x13a>
 8006234:	f240 2189 	movw	r1, #649	@ 0x289
 8006238:	4804      	ldr	r0, [pc, #16]	@ (800624c <vPortDefineHeapRegions+0x148>)
 800623a:	f7fb fa85 	bl	8001748 <vAssertCalled>
}
 800623e:	bf00      	nop
 8006240:	3728      	adds	r7, #40	@ 0x28
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000d88 	.word	0x20000d88
 800624c:	08023c5c 	.word	0x08023c5c
 8006250:	20000d80 	.word	0x20000d80
 8006254:	20000d90 	.word	0x20000d90
 8006258:	20000d8c 	.word	0x20000d8c

0800625c <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800625c:	b580      	push	{r7, lr}
 800625e:	b090      	sub	sp, #64	@ 0x40
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006278:	330e      	adds	r3, #14
 800627a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 800627c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006286:	f040 81bb 	bne.w	8006600 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	885b      	ldrh	r3, [r3, #2]
 800628e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006290:	2b08      	cmp	r3, #8
 8006292:	f040 81b5 	bne.w	8006600 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 800629a:	2b06      	cmp	r3, #6
 800629c:	f040 81b0 	bne.w	8006600 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	f040 81ab 	bne.w	8006600 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	330e      	adds	r3, #14
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 80062b0:	f107 0320 	add.w	r3, r7, #32
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 80062b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 80062c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006538 <eARPProcessPacket+0x2dc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 80062ce:	499b      	ldr	r1, [pc, #620]	@ (800653c <eARPProcessPacket+0x2e0>)
 80062d0:	489b      	ldr	r0, [pc, #620]	@ (8006540 <eARPProcessPacket+0x2e4>)
 80062d2:	f7fe faf3 	bl	80048bc <xTaskCheckForTimeOut>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d102      	bne.n	80062e2 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 80062dc:	4b96      	ldr	r3, [pc, #600]	@ (8006538 <eARPProcessPacket+0x2dc>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	7a1b      	ldrb	r3, [r3, #8]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 8188 	bne.w	8006600 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	061a      	lsls	r2, r3, #24
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062fc:	431a      	orrs	r2, r3
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006306:	431a      	orrs	r2, r3
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	0e1b      	lsrs	r3, r3, #24
 800630c:	4313      	orrs	r3, r2
 800630e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006312:	d311      	bcc.n	8006338 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	061a      	lsls	r2, r3, #24
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006320:	431a      	orrs	r2, r3
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800632a:	431a      	orrs	r2, r3
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	0e1b      	lsrs	r3, r3, #24
 8006330:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006332:	2b00      	cmp	r3, #0
 8006334:	f280 8164 	bge.w	8006600 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d021      	beq.n	8006382 <eARPProcessPacket+0x126>
 800633e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	429a      	cmp	r2, r3
 8006346:	d11c      	bne.n	8006382 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006348:	4b7b      	ldr	r3, [pc, #492]	@ (8006538 <eARPProcessPacket+0x2dc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 8157 	bne.w	8006600 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006352:	4b79      	ldr	r3, [pc, #484]	@ (8006538 <eARPProcessPacket+0x2dc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	4a77      	ldr	r2, [pc, #476]	@ (8006538 <eARPProcessPacket+0x2dc>)
 800635a:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 800635c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006364:	f000 fe32 	bl	8006fcc <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006368:	f7fd fec6 	bl	80040f8 <xTaskGetTickCount>
 800636c:	4603      	mov	r3, r0
 800636e:	4a75      	ldr	r2, [pc, #468]	@ (8006544 <eARPProcessPacket+0x2e8>)
 8006370:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006372:	4873      	ldr	r0, [pc, #460]	@ (8006540 <eARPProcessPacket+0x2e4>)
 8006374:	f7fe fa6a 	bl	800484c <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006378:	4b70      	ldr	r3, [pc, #448]	@ (800653c <eARPProcessPacket+0x2e0>)
 800637a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800637e:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006380:	e13e      	b.n	8006600 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	88db      	ldrh	r3, [r3, #6]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638c:	d14a      	bne.n	8006424 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	061a      	lsls	r2, r3, #24
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800639a:	431a      	orrs	r2, r3
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	0a1b      	lsrs	r3, r3, #8
 80063a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063a4:	431a      	orrs	r2, r3
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	0e1b      	lsrs	r3, r3, #24
 80063aa:	ea42 0103 	orr.w	r1, r2, r3
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	061a      	lsls	r2, r3, #24
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063ba:	431a      	orrs	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063c4:	431a      	orrs	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	ea42 0003 	orr.w	r0, r2, r3
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <eARPProcessPacket+0x180>
 80063d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	061a      	lsls	r2, r3, #24
 80063da:	e000      	b.n	80063de <eARPProcessPacket+0x182>
 80063dc:	2200      	movs	r2, #0
 80063de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <eARPProcessPacket+0x194>
 80063e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063ee:	e000      	b.n	80063f2 <eARPProcessPacket+0x196>
 80063f0:	2300      	movs	r3, #0
 80063f2:	431a      	orrs	r2, r3
 80063f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <eARPProcessPacket+0x1aa>
 80063fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006404:	e000      	b.n	8006408 <eARPProcessPacket+0x1ac>
 8006406:	2300      	movs	r3, #0
 8006408:	431a      	orrs	r2, r3
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <eARPProcessPacket+0x1bc>
 8006410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	0e1b      	lsrs	r3, r3, #24
 8006416:	e000      	b.n	800641a <eARPProcessPacket+0x1be>
 8006418:	2300      	movs	r3, #0
 800641a:	4313      	orrs	r3, r2
 800641c:	4602      	mov	r2, r0
 800641e:	484a      	ldr	r0, [pc, #296]	@ (8006548 <eARPProcessPacket+0x2ec>)
 8006420:	f01b faba 	bl	8021998 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	88db      	ldrh	r3, [r3, #6]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800642e:	d151      	bne.n	80064d4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006430:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006434:	429a      	cmp	r2, r3
 8006436:	d04d      	beq.n	80064d4 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643a:	2b00      	cmp	r3, #0
 800643c:	d04a      	beq.n	80064d4 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	061a      	lsls	r2, r3, #24
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800644a:	431a      	orrs	r2, r3
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006454:	431a      	orrs	r2, r3
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	0e1b      	lsrs	r3, r3, #24
 800645a:	ea42 0103 	orr.w	r1, r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	061a      	lsls	r2, r3, #24
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800646a:	431a      	orrs	r2, r3
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006474:	431a      	orrs	r2, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	ea42 0003 	orr.w	r0, r2, r3
 800647e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <eARPProcessPacket+0x230>
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	061a      	lsls	r2, r3, #24
 800648a:	e000      	b.n	800648e <eARPProcessPacket+0x232>
 800648c:	2200      	movs	r2, #0
 800648e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <eARPProcessPacket+0x244>
 8006494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800649e:	e000      	b.n	80064a2 <eARPProcessPacket+0x246>
 80064a0:	2300      	movs	r3, #0
 80064a2:	431a      	orrs	r2, r3
 80064a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <eARPProcessPacket+0x25a>
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	0a1b      	lsrs	r3, r3, #8
 80064b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80064b4:	e000      	b.n	80064b8 <eARPProcessPacket+0x25c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	431a      	orrs	r2, r3
 80064ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <eARPProcessPacket+0x26c>
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	e000      	b.n	80064ca <eARPProcessPacket+0x26e>
 80064c8:	2300      	movs	r3, #0
 80064ca:	4313      	orrs	r3, r2
 80064cc:	4602      	mov	r2, r0
 80064ce:	481f      	ldr	r0, [pc, #124]	@ (800654c <eARPProcessPacket+0x2f0>)
 80064d0:	f01b fa62 	bl	8021998 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 80064d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8092 	beq.w	8006600 <eARPProcessPacket+0x3a4>
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 8089 	beq.w	8006600 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	88db      	ldrh	r3, [r3, #6]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f8:	d003      	beq.n	8006502 <eARPProcessPacket+0x2a6>
 80064fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064fe:	d077      	beq.n	80065f0 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006500:	e07e      	b.n	8006600 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006508:	429a      	cmp	r2, r3
 800650a:	d121      	bne.n	8006550 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800650c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006516:	2206      	movs	r2, #6
 8006518:	4619      	mov	r1, r3
 800651a:	f01c fbee 	bl	8022cfa <memcmp>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d06c      	beq.n	80065fe <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	461a      	mov	r2, r3
 8006528:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800652a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800652c:	f000 f872 	bl	8006614 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006530:	2302      	movs	r3, #2
 8006532:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006536:	e062      	b.n	80065fe <eARPProcessPacket+0x3a2>
 8006538:	20000e00 	.word	0x20000e00
 800653c:	20000010 	.word	0x20000010
 8006540:	20000e04 	.word	0x20000e04
 8006544:	20000dfc 	.word	0x20000dfc
 8006548:	08023c94 	.word	0x08023c94
 800654c:	08023cc4 	.word	0x08023cc4
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	429a      	cmp	r2, r3
 8006556:	d152      	bne.n	80065fe <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	405a      	eors	r2, r3
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006566:	2b00      	cmp	r3, #0
 8006568:	d149      	bne.n	80065fe <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 800656a:	4a28      	ldr	r2, [pc, #160]	@ (800660c <eARPProcessPacket+0x3b0>)
 800656c:	f107 0318 	add.w	r3, r7, #24
 8006570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006574:	6018      	str	r0, [r3, #0]
 8006576:	3304      	adds	r3, #4
 8006578:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	3312      	adds	r3, #18
 800657e:	2206      	movs	r2, #6
 8006580:	4923      	ldr	r1, [pc, #140]	@ (8006610 <eARPProcessPacket+0x3b4>)
 8006582:	4618      	mov	r0, r3
 8006584:	f01c fbb9 	bl	8022cfa <memcmp>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	3312      	adds	r3, #18
 8006592:	f107 0118 	add.w	r1, r7, #24
 8006596:	2206      	movs	r2, #6
 8006598:	4618      	mov	r0, r3
 800659a:	f01c fbae 	bl	8022cfa <memcmp>
 800659e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d12c      	bne.n	80065fe <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 80065a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a6:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 80065aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ac:	3308      	adds	r3, #8
 80065ae:	2206      	movs	r2, #6
 80065b0:	4619      	mov	r1, r3
 80065b2:	f01c fba2 	bl	8022cfa <memcmp>
 80065b6:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d020      	beq.n	80065fe <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 80065c0:	f107 020c 	add.w	r2, r7, #12
 80065c4:	f107 0110 	add.w	r1, r7, #16
 80065c8:	f107 0320 	add.w	r3, r7, #32
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fb11 	bl	8006bf4 <eARPGetCacheEntry>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d112      	bne.n	80065fe <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065dc:	429a      	cmp	r2, r3
 80065de:	d10e      	bne.n	80065fe <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	3308      	adds	r3, #8
 80065e4:	6a39      	ldr	r1, [r7, #32]
 80065e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f9ef 	bl	80069cc <vARPRefreshCacheEntry>
                            break;
 80065ee:	e006      	b.n	80065fe <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80065f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065f8:	f000 f84a 	bl	8006690 <vARPProcessPacketReply>
                            break;
 80065fc:	e000      	b.n	8006600 <eARPProcessPacket+0x3a4>
                            break;
 80065fe:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006600:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006604:	4618      	mov	r0, r3
 8006606:	3740      	adds	r7, #64	@ 0x40
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	08023cf4 	.word	0x08023cf4
 8006610:	08027034 	.word	0x08027034

08006614 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	330e      	adds	r3, #14
 8006624:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	3308      	adds	r3, #8
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f9cc 	bl	80069cc <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2200      	movs	r2, #0
 8006638:	719a      	strb	r2, [r3, #6]
 800663a:	2200      	movs	r2, #0
 800663c:	f042 0202 	orr.w	r2, r2, #2
 8006640:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	3308      	adds	r3, #8
 8006646:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3312      	adds	r3, #18
 800664c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800664e:	2206      	movs	r2, #6
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	6978      	ldr	r0, [r7, #20]
 8006654:	f01b fbbc 	bl	8021dd0 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	33e8      	adds	r3, #232	@ 0xe8
 8006662:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	3308      	adds	r3, #8
 8006668:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 800666a:	2206      	movs	r2, #6
 800666c:	69b9      	ldr	r1, [r7, #24]
 800666e:	6978      	ldr	r0, [r7, #20]
 8006670:	f01b fbae 	bl	8021dd0 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	330e      	adds	r3, #14
 800667c:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	601a      	str	r2, [r3, #0]
    }
 8006688:	bf00      	nop
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	@ 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	330e      	adds	r3, #14
 80066a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d005      	beq.n	80066be <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f844 	bl	8006740 <xIsIPInARPCache>
 80066b8:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d106      	bne.n	80066cc <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	3308      	adds	r3, #8
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 f980 	bl	80069cc <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80066cc:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <vARPProcessPacketReply+0xac>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d02e      	beq.n	8006732 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 80066d4:	4b19      	ldr	r3, [pc, #100]	@ (800673c <vARPProcessPacketReply+0xac>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f003 f8a5 	bl	8009828 <uxIPHeaderSizePacket>
 80066de:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 80066e0:	2b14      	cmp	r3, #20
 80066e2:	d126      	bne.n	8006732 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 80066e4:	4b15      	ldr	r3, [pc, #84]	@ (800673c <vARPProcessPacketReply+0xac>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	330e      	adds	r3, #14
 80066f0:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d11a      	bne.n	8006732 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006700:	2301      	movs	r3, #1
 8006702:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006704:	4b0d      	ldr	r3, [pc, #52]	@ (800673c <vARPProcessPacketReply+0xac>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	69f9      	ldr	r1, [r7, #28]
 8006710:	4618      	mov	r0, r3
 8006712:	f002 fcd5 	bl	80090c0 <xSendEventStructToIPTask>
 8006716:	4603      	mov	r3, r0
 8006718:	2b01      	cmp	r3, #1
 800671a:	d004      	beq.n	8006726 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800671c:	4b07      	ldr	r3, [pc, #28]	@ (800673c <vARPProcessPacketReply+0xac>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f010 fa91 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006726:	4b05      	ldr	r3, [pc, #20]	@ (800673c <vARPProcessPacketReply+0xac>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 800672c:	2000      	movs	r0, #0
 800672e:	f003 fabd 	bl	8009cac <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006732:	bf00      	nop
 8006734:	3730      	adds	r7, #48	@ 0x30
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000fd4 	.word	0x20000fd4

08006740 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	e017      	b.n	8006782 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006752:	4a12      	ldr	r2, [pc, #72]	@ (800679c <xIsIPInARPCache+0x5c>)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4413      	add	r3, r2
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	429a      	cmp	r2, r3
 8006760:	d10c      	bne.n	800677c <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006766:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <xIsIPInARPCache+0x5c>)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	4413      	add	r3, r2
 800676e:	330b      	adds	r3, #11
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]
            }

            break;
 800677a:	e006      	b.n	800678a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3301      	adds	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b05      	cmp	r3, #5
 8006786:	dde4      	ble.n	8006752 <xIsIPInARPCache+0x12>
 8006788:	e000      	b.n	800678c <xIsIPInARPCache+0x4c>
            break;
 800678a:	bf00      	nop
        }
    }

    return xReturn;
 800678c:	68bb      	ldr	r3, [r7, #8]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000d9c 	.word	0x20000d9c

080067a0 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b0a5      	sub	sp, #148	@ 0x94
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f003 f83a 	bl	8009828 <uxIPHeaderSizePacket>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b14      	cmp	r3, #20
 80067b8:	d002      	beq.n	80067c0 <xCheckRequiresARPResolution+0x20>
 80067ba:	2b28      	cmp	r3, #40	@ 0x28
 80067bc:	d029      	beq.n	8006812 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 80067be:	e0b6      	b.n	800692e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80067c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067c8:	330e      	adds	r3, #14
 80067ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 80067d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	405a      	eors	r2, r3
 80067dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80a0 	bne.w	8006928 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 80067e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ffa7 	bl	8006740 <xIsIPInARPCache>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8097 	bne.w	8006928 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 fbe1 	bl	8006fcc <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006810:	e08a      	b.n	8006928 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800681a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800681e:	330e      	adds	r3, #14
 8006820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006828:	3308      	adds	r3, #8
 800682a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 800682e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006832:	799b      	ldrb	r3, [r3, #6]
 8006834:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006838:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800683c:	2b06      	cmp	r3, #6
 800683e:	d003      	beq.n	8006848 <xCheckRequiresARPResolution+0xa8>
 8006840:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006844:	2b11      	cmp	r3, #17
 8006846:	d171      	bne.n	800692c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006848:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800684c:	f006 ff68 	bl	800d720 <xIPv6_GetIPType>
 8006850:	4603      	mov	r3, r0
 8006852:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8006856:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800685a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <xCheckRequiresARPResolution+0xde>
 8006862:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006866:	2b01      	cmp	r3, #1
 8006868:	d007      	beq.n	800687a <xCheckRequiresARPResolution+0xda>
 800686a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800686e:	2b04      	cmp	r3, #4
 8006870:	d101      	bne.n	8006876 <xCheckRequiresARPResolution+0xd6>
 8006872:	4b32      	ldr	r3, [pc, #200]	@ (800693c <xCheckRequiresARPResolution+0x19c>)
 8006874:	e004      	b.n	8006880 <xCheckRequiresARPResolution+0xe0>
 8006876:	4b32      	ldr	r3, [pc, #200]	@ (8006940 <xCheckRequiresARPResolution+0x1a0>)
 8006878:	e002      	b.n	8006880 <xCheckRequiresARPResolution+0xe0>
 800687a:	4b32      	ldr	r3, [pc, #200]	@ (8006944 <xCheckRequiresARPResolution+0x1a4>)
 800687c:	e000      	b.n	8006880 <xCheckRequiresARPResolution+0xe0>
 800687e:	4b32      	ldr	r3, [pc, #200]	@ (8006948 <xCheckRequiresARPResolution+0x1a8>)
 8006880:	461a      	mov	r2, r3
 8006882:	4832      	ldr	r0, [pc, #200]	@ (800694c <xCheckRequiresARPResolution+0x1ac>)
 8006884:	f01b f888 	bl	8021998 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8006888:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800688c:	2b01      	cmp	r3, #1
 800688e:	d14d      	bne.n	800692c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	2250      	movs	r2, #80	@ 0x50
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f01b fba6 	bl	8021fea <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800689e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80068a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80068a6:	4619      	mov	r1, r3
 80068a8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80068ac:	f004 fe0e 	bl	800b4cc <eNDGetCacheEntry>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 80068b6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d007      	beq.n	80068ce <xCheckRequiresARPResolution+0x12e>
 80068be:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <xCheckRequiresARPResolution+0x12a>
 80068c6:	4c22      	ldr	r4, [pc, #136]	@ (8006950 <xCheckRequiresARPResolution+0x1b0>)
 80068c8:	e002      	b.n	80068d0 <xCheckRequiresARPResolution+0x130>
 80068ca:	4c22      	ldr	r4, [pc, #136]	@ (8006954 <xCheckRequiresARPResolution+0x1b4>)
 80068cc:	e000      	b.n	80068d0 <xCheckRequiresARPResolution+0x130>
 80068ce:	4c22      	ldr	r4, [pc, #136]	@ (8006958 <xCheckRequiresARPResolution+0x1b8>)
 80068d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068d2:	f107 010c 	add.w	r1, r7, #12
 80068d6:	2250      	movs	r2, #80	@ 0x50
 80068d8:	4618      	mov	r0, r3
 80068da:	f006 ff79 	bl	800d7d0 <pcEndpointName>
 80068de:	4603      	mov	r3, r0
 80068e0:	461a      	mov	r2, r3
 80068e2:	4621      	mov	r1, r4
 80068e4:	481d      	ldr	r0, [pc, #116]	@ (800695c <xCheckRequiresARPResolution+0x1bc>)
 80068e6:	f01b f857 	bl	8021998 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 80068ea:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11c      	bne.n	800692c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 80068f2:	2356      	movs	r3, #86	@ 0x56
 80068f4:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 80068f6:	2100      	movs	r1, #0
 80068f8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80068fa:	f010 f93d 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 80068fe:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006900:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800690a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800690c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006914:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006916:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800691a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800691c:	f005 f842 	bl	800b9a4 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006920:	2301      	movs	r3, #1
 8006922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006926:	e001      	b.n	800692c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006928:	bf00      	nop
 800692a:	e000      	b.n	800692e <xCheckRequiresARPResolution+0x18e>
                   break;
 800692c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800692e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006932:	4618      	mov	r0, r3
 8006934:	3794      	adds	r7, #148	@ 0x94
 8006936:	46bd      	mov	sp, r7
 8006938:	bd90      	pop	{r4, r7, pc}
 800693a:	bf00      	nop
 800693c:	08023cfc 	.word	0x08023cfc
 8006940:	08023d08 	.word	0x08023d08
 8006944:	08023d10 	.word	0x08023d10
 8006948:	08023d1c 	.word	0x08023d1c
 800694c:	08023d24 	.word	0x08023d24
 8006950:	08023d50 	.word	0x08023d50
 8006954:	08023d54 	.word	0x08023d54
 8006958:	08023d5c 	.word	0x08023d5c
 800695c:	08023d64 	.word	0x08023d64

08006960 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d026      	beq.n	80069be <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e020      	b.n	80069b8 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006976:	4a14      	ldr	r2, [pc, #80]	@ (80069c8 <vARPRefreshCacheEntryAge+0x68>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	4413      	add	r3, r2
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d115      	bne.n	80069b2 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	4a0f      	ldr	r2, [pc, #60]	@ (80069c8 <vARPRefreshCacheEntryAge+0x68>)
 800698c:	4413      	add	r3, r2
 800698e:	3304      	adds	r3, #4
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	2206      	movs	r2, #6
 8006994:	4618      	mov	r0, r3
 8006996:	f01c f9b0 	bl	8022cfa <memcmp>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d108      	bne.n	80069b2 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80069a0:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <vARPRefreshCacheEntryAge+0x68>)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4413      	add	r3, r2
 80069a8:	330a      	adds	r3, #10
 80069aa:	2296      	movs	r2, #150	@ 0x96
 80069ac:	701a      	strb	r2, [r3, #0]
                    break;
 80069ae:	bf00      	nop
                }
            }
        }
    }
}
 80069b0:	e005      	b.n	80069be <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	dddb      	ble.n	8006976 <vARPRefreshCacheEntryAge+0x16>
}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000d9c 	.word	0x20000d9c

080069cc <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 80069d8:	f107 0310 	add.w	r3, r7, #16
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f85b 	bl	8006a9c <prvFindCacheEntry>
 80069e6:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d150      	bne.n	8006a90 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	db0e      	blt.n	8006a12 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	db0e      	blt.n	8006a1c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4a25      	ldr	r2, [pc, #148]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a04:	4413      	add	r3, r2
 8006a06:	2210      	movs	r2, #16
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f01b faed 	bl	8021fea <memset>
 8006a10:	e004      	b.n	8006a1c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db01      	blt.n	8006a1c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	4413      	add	r3, r2
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01f      	beq.n	8006a6e <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	4a19      	ldr	r2, [pc, #100]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a34:	4413      	add	r3, r2
 8006a36:	3304      	adds	r3, #4
 8006a38:	68f9      	ldr	r1, [r7, #12]
 8006a3a:	2206      	movs	r2, #6
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f01b f9c7 	bl	8021dd0 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	4a14      	ldr	r2, [pc, #80]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	330a      	adds	r3, #10
 8006a4c:	2296      	movs	r2, #150	@ 0x96
 8006a4e:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	4a11      	ldr	r2, [pc, #68]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a54:	011b      	lsls	r3, r3, #4
 8006a56:	4413      	add	r3, r2
 8006a58:	330b      	adds	r3, #11
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	4a0d      	ldr	r2, [pc, #52]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	4413      	add	r3, r2
 8006a66:	330c      	adds	r3, #12
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 8006a6c:	e010      	b.n	8006a90 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da0d      	bge.n	8006a90 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	4a08      	ldr	r2, [pc, #32]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	4413      	add	r3, r2
 8006a7c:	330a      	adds	r3, #10
 8006a7e:	2205      	movs	r2, #5
 8006a80:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	4a04      	ldr	r2, [pc, #16]	@ (8006a98 <vARPRefreshCacheEntry+0xcc>)
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	4413      	add	r3, r2
 8006a8a:	330b      	adds	r3, #11
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	20000d9c 	.word	0x20000d9c

08006a9c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	@ 0x28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006ab8:	2102      	movs	r1, #2
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	f006 fb24 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 8006ace:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae6:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af2:	e074      	b.n	8006bde <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	4a3b      	ldr	r2, [pc, #236]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b04:	4413      	add	r3, r2
 8006b06:	3304      	adds	r3, #4
 8006b08:	68f9      	ldr	r1, [r7, #12]
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f01c f8f4 	bl	8022cfa <memcmp>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006b1c:	4a34      	ldr	r2, [pc, #208]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	4413      	add	r3, r2
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d125      	bne.n	8006b78 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b36:	601a      	str	r2, [r3, #0]
                break;
 8006b38:	e054      	b.n	8006be4 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006b40:	4a2b      	ldr	r2, [pc, #172]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	4413      	add	r3, r2
 8006b48:	330a      	adds	r3, #10
 8006b4a:	2296      	movs	r2, #150	@ 0x96
 8006b4c:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 8006b4e:	4a28      	ldr	r2, [pc, #160]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	4413      	add	r3, r2
 8006b56:	330b      	adds	r3, #11
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 8006b5c:	4a24      	ldr	r2, [pc, #144]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	4413      	add	r3, r2
 8006b64:	330c      	adds	r3, #12
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
                break;
 8006b6e:	e039      	b.n	8006be4 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e02f      	b.n	8006bd8 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d017      	beq.n	8006bae <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	4413      	add	r3, r2
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2103      	movs	r1, #3
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f006 fabc 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf14      	ite	ne
 8006b96:	2301      	movne	r3, #1
 8006b98:	2300      	moveq	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d118      	bne.n	8006bd8 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	e014      	b.n	8006bd8 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 8006bae:	4a10      	ldr	r2, [pc, #64]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	011b      	lsls	r3, r3, #4
 8006bb4:	4413      	add	r3, r2
 8006bb6:	330a      	adds	r3, #10
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90a      	bls.n	8006bd8 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8006bf0 <prvFindCacheEntry+0x154>)
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	4413      	add	r3, r2
 8006bca:	330a      	adds	r3, #10
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd6:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bda:	3301      	adds	r3, #1
 8006bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	dd87      	ble.n	8006af4 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006be4:	69fb      	ldr	r3, [r7, #28]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3728      	adds	r7, #40	@ 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000d9c 	.word	0x20000d9c

08006bf4 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d104      	bne.n	8006c14 <eARPGetCacheEntry+0x20>
 8006c0a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 8006c0e:	483c      	ldr	r0, [pc, #240]	@ (8006d00 <eARPGetCacheEntry+0x10c>)
 8006c10:	f7fa fd9a 	bl	8001748 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d104      	bne.n	8006c24 <eARPGetCacheEntry+0x30>
 8006c1a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 8006c1e:	4838      	ldr	r0, [pc, #224]	@ (8006d00 <eARPGetCacheEntry+0x10c>)
 8006c20:	f7fa fd92 	bl	8001748 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <eARPGetCacheEntry+0x40>
 8006c2a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 8006c2e:	4834      	ldr	r0, [pc, #208]	@ (8006d00 <eARPGetCacheEntry+0x10c>)
 8006c30:	f7fa fd8a 	bl	8001748 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 8006c40:	2100      	movs	r1, #0
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f006 f9d4 	bl	800cff0 <FreeRTOS_FindEndPointOnIP_IPv4>
 8006c48:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 8006c4a:	6978      	ldr	r0, [r7, #20]
 8006c4c:	f003 fc3c 	bl	800a4c8 <xIsIPv4Multicast>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d021      	beq.n	8006c9a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	6978      	ldr	r0, [r7, #20]
 8006c5a:	f003 fd63 	bl	800a724 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8006c62:	2000      	movs	r0, #0
 8006c64:	f006 f978 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8006c68:	61b8      	str	r0, [r7, #24]

            for( ;
 8006c6a:	e012      	b.n	8006c92 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77fb      	strb	r3, [r7, #31]
                    break;
 8006c86:	e035      	b.n	8006cf4 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f006 f986 	bl	800cf9c <FreeRTOS_NextEndPoint>
 8006c90:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e9      	bne.n	8006c6c <eARPGetCacheEntry+0x78>
 8006c98:	e02c      	b.n	8006cf4 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	061a      	lsls	r2, r3, #24
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	d113      	bne.n	8006ce6 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4a10      	ldr	r2, [pc, #64]	@ (8006d04 <eARPGetCacheEntry+0x110>)
 8006cc2:	6811      	ldr	r1, [r2, #0]
 8006cc4:	6019      	str	r1, [r3, #0]
 8006cc6:	8892      	ldrh	r2, [r2, #4]
 8006cc8:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006cca:	2104      	movs	r1, #4
 8006ccc:	6978      	ldr	r0, [r7, #20]
 8006cce:	f006 fa1b 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 8006cd2:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e006      	b.n	8006cf4 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f80c 	bl	8006d08 <eARPGetCacheEntryGateWay>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006cf4:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	08023d98 	.word	0x08023d98
 8006d04:	08027034 	.word	0x08027034

08006d08 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006d14:	2300      	movs	r3, #0
 8006d16:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006d24:	2104      	movs	r1, #4
 8006d26:	69b8      	ldr	r0, [r7, #24]
 8006d28:	f006 f9ee 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 8006d2c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11b      	bne.n	8006d6c <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	69b8      	ldr	r0, [r7, #24]
 8006d3a:	f000 f86b 	bl	8006e14 <prvCacheLookup>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 8006d42:	7ffb      	ldrb	r3, [r7, #31]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d017      	beq.n	8006d78 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 8006d48:	2040      	movs	r0, #64	@ 0x40
 8006d4a:	f006 fca9 	bl	800d6a0 <FreeRTOS_FindGateWay>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	e008      	b.n	8006d78 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	e005      	b.n	8006d78 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 8006d78:	7ffb      	ldrb	r3, [r7, #31]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d13f      	bne.n	8006dfe <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006d84:	2302      	movs	r3, #2
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e039      	b.n	8006dfe <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	69b8      	ldr	r0, [r7, #24]
 8006d90:	f000 f840 	bl	8006e14 <prvCacheLookup>
 8006d94:	4603      	mov	r3, r0
 8006d96:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006d98:	7ffb      	ldrb	r3, [r7, #31]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d103      	bne.n	8006da6 <eARPGetCacheEntryGateWay+0x9e>
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d028      	beq.n	8006df8 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	061a      	lsls	r2, r3, #24
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006db2:	431a      	orrs	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	0a1b      	lsrs	r3, r3, #8
 8006db8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	ea42 0103 	orr.w	r1, r2, r3
 8006dc6:	7ffb      	ldrb	r3, [r7, #31]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <eARPGetCacheEntryGateWay+0xc8>
 8006dcc:	480e      	ldr	r0, [pc, #56]	@ (8006e08 <eARPGetCacheEntryGateWay+0x100>)
 8006dce:	e000      	b.n	8006dd2 <eARPGetCacheEntryGateWay+0xca>
 8006dd0:	480e      	ldr	r0, [pc, #56]	@ (8006e0c <eARPGetCacheEntryGateWay+0x104>)
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	061a      	lsls	r2, r3, #24
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006dde:	431a      	orrs	r2, r3
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006de8:	431a      	orrs	r2, r3
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	4313      	orrs	r3, r2
 8006df0:	4602      	mov	r2, r0
 8006df2:	4807      	ldr	r0, [pc, #28]	@ (8006e10 <eARPGetCacheEntryGateWay+0x108>)
 8006df4:	f01a fdd0 	bl	8021998 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 8006dfe:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	08023dc4 	.word	0x08023dc4
 8006e0c:	08023dc8 	.word	0x08023dc8
 8006e10:	08023dd0 	.word	0x08023dd0

08006e14 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006e20:	2300      	movs	r3, #0
 8006e22:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	e02a      	b.n	8006e80 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006e2a:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <prvCacheLookup+0x7c>)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	011b      	lsls	r3, r3, #4
 8006e30:	4413      	add	r3, r2
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d11f      	bne.n	8006e7a <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006e3a:	4a15      	ldr	r2, [pc, #84]	@ (8006e90 <prvCacheLookup+0x7c>)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	4413      	add	r3, r2
 8006e42:	330b      	adds	r3, #11
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d102      	bne.n	8006e50 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 8006e4e:	e01a      	b.n	8006e86 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 8006e50:	68b8      	ldr	r0, [r7, #8]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	4a0e      	ldr	r2, [pc, #56]	@ (8006e90 <prvCacheLookup+0x7c>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	2206      	movs	r2, #6
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f01a ffb6 	bl	8021dd0 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 8006e64:	4a0a      	ldr	r2, [pc, #40]	@ (8006e90 <prvCacheLookup+0x7c>)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	4413      	add	r3, r2
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006e74:	2301      	movs	r3, #1
 8006e76:	74fb      	strb	r3, [r7, #19]
                break;
 8006e78:	e005      	b.n	8006e86 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b05      	cmp	r3, #5
 8006e84:	ddd1      	ble.n	8006e2a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8006e86:	7cfb      	ldrb	r3, [r7, #19]
    }
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000d9c 	.word	0x20000d9c

08006e94 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
 8006e9e:	e048      	b.n	8006f32 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8006ea0:	4a47      	ldr	r2, [pc, #284]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	4413      	add	r3, r2
 8006ea8:	330a      	adds	r3, #10
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03d      	beq.n	8006f2c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8006eb0:	4a43      	ldr	r2, [pc, #268]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	011b      	lsls	r3, r3, #4
 8006eb6:	4413      	add	r3, r2
 8006eb8:	330a      	adds	r3, #10
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b2d9      	uxtb	r1, r3
 8006ec0:	4a3f      	ldr	r2, [pc, #252]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	4413      	add	r3, r2
 8006ec8:	330a      	adds	r3, #10
 8006eca:	460a      	mov	r2, r1
 8006ecc:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006ece:	4a3c      	ldr	r2, [pc, #240]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	4413      	add	r3, r2
 8006ed6:	330b      	adds	r3, #11
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006ede:	4a38      	ldr	r2, [pc, #224]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	4413      	add	r3, r2
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f8d7 	bl	800709c <FreeRTOS_OutputARPRequest>
 8006eee:	e00f      	b.n	8006f10 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006ef0:	4a33      	ldr	r2, [pc, #204]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	011b      	lsls	r3, r3, #4
 8006ef6:	4413      	add	r3, r2
 8006ef8:	330a      	adds	r3, #10
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	d807      	bhi.n	8006f10 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006f00:	4a2f      	ldr	r2, [pc, #188]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	4413      	add	r3, r2
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f8c6 	bl	800709c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006f10:	4a2b      	ldr	r2, [pc, #172]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	4413      	add	r3, r2
 8006f18:	330a      	adds	r3, #10
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006f20:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <vARPAgeCache+0x12c>)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	4413      	add	r3, r2
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	ddb3      	ble.n	8006ea0 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8006f38:	f7fd f8de 	bl	80040f8 <xTaskGetTickCount>
 8006f3c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8006f3e:	4b21      	ldr	r3, [pc, #132]	@ (8006fc4 <vARPAgeCache+0x130>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <vARPAgeCache+0xc2>
 8006f46:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc4 <vARPAgeCache+0x130>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d92f      	bls.n	8006fb6 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8006f56:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc8 <vARPAgeCache+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8006f5c:	e025      	b.n	8006faa <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d019      	beq.n	8006fa2 <vARPAgeCache+0x10e>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d015      	beq.n	8006fa2 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006f7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <vARPAgeCache+0xf8>
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d007      	beq.n	8006f9a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8006f8a:	e00a      	b.n	8006fa2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4619      	mov	r1, r3
 8006f92:	68b8      	ldr	r0, [r7, #8]
 8006f94:	f000 f81a 	bl	8006fcc <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8006f98:	e003      	b.n	8006fa2 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f005 f822 	bl	800bfe4 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8006fa0:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006fa8:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1d6      	bne.n	8006f5e <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8006fb0:	4a04      	ldr	r2, [pc, #16]	@ (8006fc4 <vARPAgeCache+0x130>)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6013      	str	r3, [r2, #0]
        }
    }
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000d9c 	.word	0x20000d9c
 8006fc4:	20000dfc 	.word	0x20000dfc
 8006fc8:	20001360 	.word	0x20001360

08006fcc <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d156      	bne.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d052      	beq.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8006fee:	2100      	movs	r1, #0
 8006ff0:	202a      	movs	r0, #42	@ 0x2a
 8006ff2:	f00f fdc1 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 8006ff6:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d04a      	beq.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007014:	6938      	ldr	r0, [r7, #16]
 8007016:	f000 f855 	bl	80070c4 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007020:	d812      	bhi.n	8007048 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e008      	b.n	800703c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	3301      	adds	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007040:	ddf3      	ble.n	800702a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	223c      	movs	r2, #60	@ 0x3c
 8007046:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007048:	f002 ff7c 	bl	8009f44 <xIsCallingFromIPTask>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01b      	beq.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 800706a:	2201      	movs	r2, #1
 800706c:	6939      	ldr	r1, [r7, #16]
 800706e:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007070:	e010      	b.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007072:	2302      	movs	r3, #2
 8007074:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	f04f 31ff 	mov.w	r1, #4294967295
 8007082:	4618      	mov	r0, r3
 8007084:	f002 f81c 	bl	80090c0 <xSendEventStructToIPTask>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800708e:	6938      	ldr	r0, [r7, #16]
 8007090:	f00f fdda 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
    }
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 80070a4:	210c      	movs	r1, #12
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f006 f82e 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 80070ac:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f7ff ff88 	bl	8006fcc <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d104      	bne.n	80070dc <vARPGenerateRequestPacket+0x18>
 80070d2:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 80070d6:	4828      	ldr	r0, [pc, #160]	@ (8007178 <vARPGenerateRequestPacket+0xb4>)
 80070d8:	f7fa fb36 	bl	8001748 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e0:	2b29      	cmp	r3, #41	@ 0x29
 80070e2:	d804      	bhi.n	80070ee <vARPGenerateRequestPacket+0x2a>
 80070e4:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 80070e8:	4823      	ldr	r0, [pc, #140]	@ (8007178 <vARPGenerateRequestPacket+0xb4>)
 80070ea:	f7fa fb2d 	bl	8001748 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <vARPGenerateRequestPacket+0x3c>
 80070f6:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 80070fa:	481f      	ldr	r0, [pc, #124]	@ (8007178 <vARPGenerateRequestPacket+0xb4>)
 80070fc:	f7fa fb24 	bl	8001748 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007106:	4b1d      	ldr	r3, [pc, #116]	@ (800717c <vARPGenerateRequestPacket+0xb8>)
 8007108:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800710e:	2226      	movs	r2, #38	@ 0x26
 8007110:	6939      	ldr	r1, [r7, #16]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f01a fe5c 	bl	8021dd0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711c:	33e8      	adds	r3, #232	@ 0xe8
 800711e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	3306      	adds	r3, #6
 8007124:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007126:	2206      	movs	r2, #6
 8007128:	6939      	ldr	r1, [r7, #16]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f01a fe50 	bl	8021dd0 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	33e8      	adds	r3, #232	@ 0xe8
 8007136:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	3316      	adds	r3, #22
 800713c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800713e:	2206      	movs	r2, #6
 8007140:	6939      	ldr	r1, [r7, #16]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f01a fe44 	bl	8021dd0 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714c:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	331c      	adds	r3, #28
 8007152:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	222a      	movs	r2, #42	@ 0x2a
 800716c:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 800716e:	bf00      	nop
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	08023d98 	.word	0x08023d98
 800717c:	08026ffc 	.word	0x08026ffc

08007180 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01b      	beq.n	80071c6 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	e014      	b.n	80071be <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007194:	4a10      	ldr	r2, [pc, #64]	@ (80071d8 <FreeRTOS_ClearARP+0x58>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	4413      	add	r3, r2
 800719c:	330c      	adds	r3, #12
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d108      	bne.n	80071b8 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	4a0b      	ldr	r2, [pc, #44]	@ (80071d8 <FreeRTOS_ClearARP+0x58>)
 80071ac:	4413      	add	r3, r2
 80071ae:	2210      	movs	r2, #16
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f01a ff19 	bl	8021fea <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b05      	cmp	r3, #5
 80071c2:	dde7      	ble.n	8007194 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 80071c4:	e004      	b.n	80071d0 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 80071c6:	2260      	movs	r2, #96	@ 0x60
 80071c8:	2100      	movs	r1, #0
 80071ca:	4803      	ldr	r0, [pc, #12]	@ (80071d8 <FreeRTOS_ClearARP+0x58>)
 80071cc:	f01a ff0d 	bl	8021fea <memset>
}
 80071d0:	bf00      	nop
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000d9c 	.word	0x20000d9c

080071dc <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 80071e0:	f000 fc8a 	bl	8007af8 <vDNSCallbackInitialise>
        }
 80071e4:	bf00      	nop
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 80071f8:	2048      	movs	r0, #72	@ 0x48
 80071fa:	f7fe fdeb 	bl	8005dd4 <pvPortMalloc>
 80071fe:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d057      	beq.n	80072b6 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800720a:	2248      	movs	r2, #72	@ 0x48
 800720c:	2100      	movs	r1, #0
 800720e:	69f8      	ldr	r0, [r7, #28]
 8007210:	f01a feeb 	bl	8021fea <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3338      	adds	r3, #56	@ 0x38
 8007222:	220f      	movs	r2, #15
 8007224:	68f9      	ldr	r1, [r7, #12]
 8007226:	4618      	mov	r0, r3
 8007228:	f01b fdac 	bl	8022d84 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f103 0220 	add.w	r2, r3, #32
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d003      	beq.n	800724c <pxNew_AddrInfo+0x64>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b0a      	cmp	r3, #10
 8007248:	d01e      	beq.n	8007288 <pxNew_AddrInfo+0xa0>
 800724a:	e02b      	b.n	80072a4 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f003 f87d 	bl	800a34c <ulChar2u32>
 8007252:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	061a      	lsls	r2, r3, #24
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007260:	431a      	orrs	r2, r3
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	0a1b      	lsrs	r3, r3, #8
 8007266:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800726a:	ea42 0103 	orr.w	r1, r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	0e1a      	lsrs	r2, r3, #24
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	430a      	orrs	r2, r1
 8007278:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2202      	movs	r2, #2
 800727e:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2204      	movs	r2, #4
 8007284:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007286:	e016      	b.n	80072b6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	220a      	movs	r2, #10
 800728c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2210      	movs	r2, #16
 8007292:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	3328      	adds	r3, #40	@ 0x28
 8007298:	2210      	movs	r2, #16
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	f01a fd97 	bl	8021dd0 <memcpy>
                        break;
 80072a2:	e008      	b.n	80072b6 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 80072a4:	4806      	ldr	r0, [pc, #24]	@ (80072c0 <pxNew_AddrInfo+0xd8>)
 80072a6:	f01a fb77 	bl	8021998 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 80072aa:	69b8      	ldr	r0, [r7, #24]
 80072ac:	f7fe fe66 	bl	8005f7c <vPortFree>
                    pxAddrInfo = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]

                    break;
 80072b4:	bf00      	nop
            }
        }

        return pxAddrInfo;
 80072b6:	69fb      	ldr	r3, [r7, #28]
    }
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	08023e3c 	.word	0x08023e3c

080072c4 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 80072d6:	e007      	b.n	80072e8 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7fe fe4c 	bl	8005f7c <vPortFree>
                pxIterator = pxNext;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1f4      	bne.n	80072d8 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b088      	sub	sp, #32
 80072fa:	af02      	add	r7, sp, #8
 80072fc:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f002 fa92 	bl	8009828 <uxIPHeaderSizePacket>
 8007304:	4603      	mov	r3, r0
 8007306:	3316      	adds	r3, #22
 8007308:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	429a      	cmp	r2, r3
 8007312:	d829      	bhi.n	8007368 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b0b      	cmp	r3, #11
 8007322:	d921      	bls.n	8007368 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	b21a      	sxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	b29b      	uxth	r3, r3
 8007342:	b21b      	sxth	r3, r3
 8007344:	4313      	orrs	r3, r2
 8007346:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007348:	b29b      	uxth	r3, r3
 800734a:	f107 0208 	add.w	r2, r7, #8
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	2300      	movs	r3, #0
 8007352:	6939      	ldr	r1, [r7, #16]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fcb5 	bl	8007cc4 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff ffae 	bl	80072c4 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007368:	2300      	movs	r3, #0
    }
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af02      	add	r7, sp, #8
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	2300      	movs	r3, #0
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68b9      	ldr	r1, [r7, #8]
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 f818 	bl	80073c0 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007390:	2301      	movs	r3, #1
    }
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 80073a0:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80073a4:	2100      	movs	r1, #0
 80073a6:	4804      	ldr	r0, [pc, #16]	@ (80073b8 <FreeRTOS_dnsclear+0x1c>)
 80073a8:	f01a fe1f 	bl	8021fea <memset>
        uxFreeEntry = 0U;
 80073ac:	4b03      	ldr	r3, [pc, #12]	@ (80073bc <FreeRTOS_dnsclear+0x20>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
    }
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20000e0c 	.word	0x20000e0c
 80073bc:	20000fbc 	.word	0x20000fbc

080073c0 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b09b      	sub	sp, #108	@ 0x6c
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 80073ce:	f7fc fe93 	bl	80040f8 <xTaskGetTickCount>
 80073d2:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <FreeRTOS_ProcessDNSCache+0x22>
 80073da:	21d8      	movs	r1, #216	@ 0xd8
 80073dc:	4841      	ldr	r0, [pc, #260]	@ (80074e4 <FreeRTOS_ProcessDNSCache+0x124>)
 80073de:	f7fa f9b3 	bl	8001748 <vAssertCalled>

        if( xLookUp != pdFALSE )
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 80073ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073f0:	4a3d      	ldr	r2, [pc, #244]	@ (80074e8 <FreeRTOS_ProcessDNSCache+0x128>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 80073fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80073fe:	461a      	mov	r2, r3
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f87a 	bl	80074fc <prvFindEntryIndex>
 8007408:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800740a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740c:	2b01      	cmp	r3, #1
 800740e:	d110      	bne.n	8007432 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d106      	bne.n	8007424 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007416:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800741a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	f000 f8b1 	bl	8007584 <prvGetCacheIPEntry>
 8007422:	e013      	b.n	800744c <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007424:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	f000 f94a 	bl	80076c4 <prvUpdateCacheEntry>
 8007430:	e00c      	b.n	800744c <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d103      	bne.n	8007440 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e005      	b.n	800744c <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	6879      	ldr	r1, [r7, #4]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	f000 f994 	bl	8007774 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <FreeRTOS_ProcessDNSCache+0x9a>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d03f      	beq.n	80074da <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 800745a:	2302      	movs	r3, #2
 800745c:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00c      	beq.n	8007480 <FreeRTOS_ProcessDNSCache+0xc0>
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10e      	bne.n	8007488 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	6859      	ldr	r1, [r3, #4]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 800747a:	230a      	movs	r3, #10
 800747c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 800747e:	e007      	b.n	8007490 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8007486:	e003      	b.n	8007490 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8007488:	4818      	ldr	r0, [pc, #96]	@ (80074ec <FreeRTOS_ProcessDNSCache+0x12c>)
 800748a:	f01a fa85 	bl	8021998 <lUDPLoggingPrintf>
                        break;
 800748e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8007490:	f107 0214 	add.w	r2, r7, #20
 8007494:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007498:	2328      	movs	r3, #40	@ 0x28
 800749a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800749c:	f007 fc62 	bl	800ed64 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <FreeRTOS_ProcessDNSCache+0xea>
 80074a6:	4912      	ldr	r1, [pc, #72]	@ (80074f0 <FreeRTOS_ProcessDNSCache+0x130>)
 80074a8:	e000      	b.n	80074ac <FreeRTOS_ProcessDNSCache+0xec>
 80074aa:	4912      	ldr	r1, [pc, #72]	@ (80074f4 <FreeRTOS_ProcessDNSCache+0x134>)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	061a      	lsls	r2, r3, #24
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f107 0214 	add.w	r2, r7, #20
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4808      	ldr	r0, [pc, #32]	@ (80074f8 <FreeRTOS_ProcessDNSCache+0x138>)
 80074d6:	f01a fa5f 	bl	8021998 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 80074da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 80074dc:	4618      	mov	r0, r3
 80074de:	3764      	adds	r7, #100	@ 0x64
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd90      	pop	{r4, r7, pc}
 80074e4:	080240b8 	.word	0x080240b8
 80074e8:	10624dd3 	.word	0x10624dd3
 80074ec:	080240ec 	.word	0x080240ec
 80074f0:	0802411c 	.word	0x0802411c
 80074f4:	08024124 	.word	0x08024124
 80074f8:	08024128 	.word	0x08024128

080074fc <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	e02d      	b.n	800756e <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007512:	4a1b      	ldr	r2, [pc, #108]	@ (8007580 <prvFindEntryIndex+0x84>)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	216c      	movs	r1, #108	@ 0x6c
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	3350      	adds	r3, #80	@ 0x50
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01f      	beq.n	8007566 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	226c      	movs	r2, #108	@ 0x6c
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	3350      	adds	r3, #80	@ 0x50
 8007530:	4a13      	ldr	r2, [pc, #76]	@ (8007580 <prvFindEntryIndex+0x84>)
 8007532:	4413      	add	r3, r2
 8007534:	68f9      	ldr	r1, [r7, #12]
 8007536:	4618      	mov	r0, r3
 8007538:	f7f8 fed2 	bl	80002e0 <strcmp>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d112      	bne.n	8007568 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	490e      	ldr	r1, [pc, #56]	@ (8007580 <prvFindEntryIndex+0x84>)
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	206c      	movs	r0, #108	@ 0x6c
 800754c:	fb00 f303 	mul.w	r3, r0, r3
 8007550:	440b      	add	r3, r1
 8007552:	3310      	adds	r3, #16
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d106      	bne.n	8007568 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 800755a:	2301      	movs	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	601a      	str	r2, [r3, #0]
                    break;
 8007564:	e006      	b.n	8007574 <prvFindEntryIndex+0x78>
                continue;
 8007566:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	3301      	adds	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d9ce      	bls.n	8007512 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007574:	697b      	ldr	r3, [r7, #20]
    }
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000e0c 	.word	0x20000e0c

08007584 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8007596:	4a4a      	ldr	r2, [pc, #296]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	216c      	movs	r1, #108	@ 0x6c
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	3364      	adds	r3, #100	@ 0x64
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 80075ac:	4a44      	ldr	r2, [pc, #272]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	216c      	movs	r1, #108	@ 0x6c
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	3360      	adds	r3, #96	@ 0x60
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	061a      	lsls	r2, r3, #24
 80075be:	4940      	ldr	r1, [pc, #256]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	206c      	movs	r0, #108	@ 0x6c
 80075c4:	fb00 f303 	mul.w	r3, r0, r3
 80075c8:	440b      	add	r3, r1
 80075ca:	3360      	adds	r3, #96	@ 0x60
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075d4:	431a      	orrs	r2, r3
 80075d6:	493a      	ldr	r1, [pc, #232]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	206c      	movs	r0, #108	@ 0x6c
 80075dc:	fb00 f303 	mul.w	r3, r0, r3
 80075e0:	440b      	add	r3, r1
 80075e2:	3360      	adds	r3, #96	@ 0x60
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075ec:	431a      	orrs	r2, r3
 80075ee:	4934      	ldr	r1, [pc, #208]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	206c      	movs	r0, #108	@ 0x6c
 80075f4:	fb00 f303 	mul.w	r3, r0, r3
 80075f8:	440b      	add	r3, r1
 80075fa:	3360      	adds	r3, #96	@ 0x60
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	0e1b      	lsrs	r3, r3, #24
 8007600:	4313      	orrs	r3, r2
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	429a      	cmp	r2, r3
 8007606:	d24a      	bcs.n	800769e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007608:	4a2d      	ldr	r2, [pc, #180]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	216c      	movs	r1, #108	@ 0x6c
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	3369      	adds	r3, #105	@ 0x69
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	4929      	ldr	r1, [pc, #164]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	206c      	movs	r0, #108	@ 0x6c
 800761e:	fb00 f202 	mul.w	r2, r0, r2
 8007622:	440a      	add	r2, r1
 8007624:	3268      	adds	r2, #104	@ 0x68
 8007626:	7812      	ldrb	r2, [r2, #0]
 8007628:	fbb3 f1f2 	udiv	r1, r3, r2
 800762c:	fb01 f202 	mul.w	r2, r1, r2
 8007630:	1a9b      	subs	r3, r3, r2
 8007632:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007634:	7cfb      	ldrb	r3, [r7, #19]
 8007636:	f003 0303 	and.w	r3, r3, #3
 800763a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 800763c:	7cfb      	ldrb	r3, [r7, #19]
 800763e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007640:	4a1f      	ldr	r2, [pc, #124]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	216c      	movs	r1, #108	@ 0x6c
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	3369      	adds	r3, #105	@ 0x69
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	3301      	adds	r3, #1
 8007652:	b2d8      	uxtb	r0, r3
 8007654:	4a1a      	ldr	r2, [pc, #104]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	216c      	movs	r1, #108	@ 0x6c
 800765a:	fb01 f303 	mul.w	r3, r1, r3
 800765e:	4413      	add	r3, r2
 8007660:	3369      	adds	r3, #105	@ 0x69
 8007662:	4602      	mov	r2, r0
 8007664:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	216c      	movs	r1, #108	@ 0x6c
 8007674:	fb01 f202 	mul.w	r2, r1, r2
 8007678:	4413      	add	r3, r2
 800767a:	4a11      	ldr	r2, [pc, #68]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 800767c:	4413      	add	r3, r2
 800767e:	2214      	movs	r2, #20
 8007680:	4619      	mov	r1, r3
 8007682:	68b8      	ldr	r0, [r7, #8]
 8007684:	f01a fba4 	bl	8021dd0 <memcpy>
            isRead = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d010      	beq.n	80076b4 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f8dc 	bl	8007854 <prvReadDNSCache>
 800769c:	e00a      	b.n	80076b4 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800769e:	4a08      	ldr	r2, [pc, #32]	@ (80076c0 <prvGetCacheIPEntry+0x13c>)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	216c      	movs	r1, #108	@ 0x6c
 80076a4:	fb01 f303 	mul.w	r3, r1, r3
 80076a8:	4413      	add	r3, r2
 80076aa:	3350      	adds	r3, #80	@ 0x50
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 80076b4:	69fb      	ldr	r3, [r7, #28]
    }
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000e0c 	.word	0x20000e0c

080076c4 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 80076d6:	4a26      	ldr	r2, [pc, #152]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	216c      	movs	r1, #108	@ 0x6c
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	3368      	adds	r3, #104	@ 0x68
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d81b      	bhi.n	8007722 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 80076ea:	4a21      	ldr	r2, [pc, #132]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	216c      	movs	r1, #108	@ 0x6c
 80076f0:	fb01 f303 	mul.w	r3, r1, r3
 80076f4:	4413      	add	r3, r2
 80076f6:	3368      	adds	r3, #104	@ 0x68
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 80076fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	216c      	movs	r1, #108	@ 0x6c
 8007702:	fb01 f303 	mul.w	r3, r1, r3
 8007706:	4413      	add	r3, r2
 8007708:	3368      	adds	r3, #104	@ 0x68
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	3301      	adds	r3, #1
 800770e:	b2d8      	uxtb	r0, r3
 8007710:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	216c      	movs	r1, #108	@ 0x6c
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	3368      	adds	r3, #104	@ 0x68
 800771e:	4602      	mov	r2, r0
 8007720:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	216c      	movs	r1, #108	@ 0x6c
 8007730:	fb01 f202 	mul.w	r2, r1, r2
 8007734:	4413      	add	r3, r2
 8007736:	4a0e      	ldr	r2, [pc, #56]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 8007738:	4413      	add	r3, r2
 800773a:	2214      	movs	r2, #20
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4618      	mov	r0, r3
 8007740:	f01a fb46 	bl	8021dd0 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007744:	4a0a      	ldr	r2, [pc, #40]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	216c      	movs	r1, #108	@ 0x6c
 800774a:	fb01 f303 	mul.w	r3, r1, r3
 800774e:	4413      	add	r3, r2
 8007750:	3360      	adds	r3, #96	@ 0x60
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007756:	4a06      	ldr	r2, [pc, #24]	@ (8007770 <prvUpdateCacheEntry+0xac>)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	216c      	movs	r1, #108	@ 0x6c
 800775c:	fb01 f303 	mul.w	r3, r1, r3
 8007760:	4413      	add	r3, r2
 8007762:	3364      	adds	r3, #100	@ 0x64
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	601a      	str	r2, [r3, #0]
    }
 8007768:	bf00      	nop
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000e0c 	.word	0x20000e0c

08007774 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7f8 fdb6 	bl	80002f4 <strlen>
 8007788:	4603      	mov	r3, r0
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d859      	bhi.n	8007842 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800778e:	4b2f      	ldr	r3, [pc, #188]	@ (800784c <prvInsertCacheEntry+0xd8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	226c      	movs	r2, #108	@ 0x6c
 8007794:	fb02 f303 	mul.w	r3, r2, r3
 8007798:	3350      	adds	r3, #80	@ 0x50
 800779a:	4a2d      	ldr	r2, [pc, #180]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 800779c:	4413      	add	r3, r2
 800779e:	2210      	movs	r2, #16
 80077a0:	68f9      	ldr	r1, [r7, #12]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f01b faee 	bl	8022d84 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 80077a8:	4b28      	ldr	r3, [pc, #160]	@ (800784c <prvInsertCacheEntry+0xd8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	226c      	movs	r2, #108	@ 0x6c
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	4a27      	ldr	r2, [pc, #156]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 80077b4:	4413      	add	r3, r2
 80077b6:	2214      	movs	r2, #20
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f01a fb08 	bl	8021dd0 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 80077c0:	4b22      	ldr	r3, [pc, #136]	@ (800784c <prvInsertCacheEntry+0xd8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a22      	ldr	r2, [pc, #136]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 80077c6:	216c      	movs	r1, #108	@ 0x6c
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	4413      	add	r3, r2
 80077ce:	3360      	adds	r3, #96	@ 0x60
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80077d4:	4b1d      	ldr	r3, [pc, #116]	@ (800784c <prvInsertCacheEntry+0xd8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 80077da:	216c      	movs	r1, #108	@ 0x6c
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	4413      	add	r3, r2
 80077e2:	3364      	adds	r3, #100	@ 0x64
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 80077e8:	4b18      	ldr	r3, [pc, #96]	@ (800784c <prvInsertCacheEntry+0xd8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a18      	ldr	r2, [pc, #96]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 80077ee:	216c      	movs	r1, #108	@ 0x6c
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	3368      	adds	r3, #104	@ 0x68
 80077f8:	2201      	movs	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 80077fc:	4b13      	ldr	r3, [pc, #76]	@ (800784c <prvInsertCacheEntry+0xd8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a13      	ldr	r2, [pc, #76]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 8007802:	216c      	movs	r1, #108	@ 0x6c
 8007804:	fb01 f303 	mul.w	r3, r1, r3
 8007808:	4413      	add	r3, r2
 800780a:	3369      	adds	r3, #105	@ 0x69
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007810:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <prvInsertCacheEntry+0xd8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	226c      	movs	r2, #108	@ 0x6c
 8007816:	fb02 f303 	mul.w	r3, r2, r3
 800781a:	3314      	adds	r3, #20
 800781c:	4a0c      	ldr	r2, [pc, #48]	@ (8007850 <prvInsertCacheEntry+0xdc>)
 800781e:	4413      	add	r3, r2
 8007820:	223c      	movs	r2, #60	@ 0x3c
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f01a fbe0 	bl	8021fea <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 800782a:	4b08      	ldr	r3, [pc, #32]	@ (800784c <prvInsertCacheEntry+0xd8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3301      	adds	r3, #1
 8007830:	4a06      	ldr	r2, [pc, #24]	@ (800784c <prvInsertCacheEntry+0xd8>)
 8007832:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <prvInsertCacheEntry+0xd8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b04      	cmp	r3, #4
 800783a:	d102      	bne.n	8007842 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <prvInsertCacheEntry+0xd8>)
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000fbc 	.word	0x20000fbc
 8007850:	20000e0c 	.word	0x20000e0c

08007854 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 800785e:	2301      	movs	r3, #1
 8007860:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 800786a:	4a2e      	ldr	r2, [pc, #184]	@ (8007924 <prvReadDNSCache+0xd0>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	216c      	movs	r1, #108	@ 0x6c
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	4413      	add	r3, r2
 8007876:	3368      	adds	r3, #104	@ 0x68
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b04      	cmp	r3, #4
 8007880:	d901      	bls.n	8007886 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007882:	2304      	movs	r3, #4
 8007884:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007886:	2300      	movs	r3, #0
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	e041      	b.n	8007910 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800788c:	69fa      	ldr	r2, [r7, #28]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	216c      	movs	r1, #108	@ 0x6c
 800789a:	fb01 f202 	mul.w	r2, r1, r2
 800789e:	4413      	add	r3, r2
 80078a0:	4a20      	ldr	r2, [pc, #128]	@ (8007924 <prvReadDNSCache+0xd0>)
 80078a2:	4413      	add	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <prvReadDNSCache+0x60>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d010      	beq.n	80078d4 <prvReadDNSCache+0x80>
 80078b2:	e01d      	b.n	80078f0 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	226c      	movs	r2, #108	@ 0x6c
 80078bc:	fb02 f303 	mul.w	r3, r2, r3
 80078c0:	3350      	adds	r3, #80	@ 0x50
 80078c2:	4a18      	ldr	r2, [pc, #96]	@ (8007924 <prvReadDNSCache+0xd0>)
 80078c4:	4413      	add	r3, r2
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	2102      	movs	r1, #2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fc8c 	bl	80071e8 <pxNew_AddrInfo>
 80078d0:	6178      	str	r0, [r7, #20]
                       }
                       break;
 80078d2:	e011      	b.n	80078f8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	226c      	movs	r2, #108	@ 0x6c
 80078d8:	fb02 f303 	mul.w	r3, r2, r3
 80078dc:	3350      	adds	r3, #80	@ 0x50
 80078de:	4a11      	ldr	r2, [pc, #68]	@ (8007924 <prvReadDNSCache+0xd0>)
 80078e0:	4413      	add	r3, r2
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	210a      	movs	r1, #10
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fc7e 	bl	80071e8 <pxNew_AddrInfo>
 80078ec:	6178      	str	r0, [r7, #20]
                        break;
 80078ee:	e003      	b.n	80078f8 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 80078f0:	480d      	ldr	r0, [pc, #52]	@ (8007928 <prvReadDNSCache+0xd4>)
 80078f2:	f01a f851 	bl	8021998 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 80078f6:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	331c      	adds	r3, #28
 8007908:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	429a      	cmp	r2, r3
 8007916:	d3b9      	bcc.n	800788c <prvReadDNSCache+0x38>
        }
    }
 8007918:	e000      	b.n	800791c <prvReadDNSCache+0xc8>
                break;
 800791a:	bf00      	nop
    }
 800791c:	bf00      	nop
 800791e:	3720      	adds	r7, #32
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	20000e0c 	.word	0x20000e0c
 8007928:	0802415c 	.word	0x0802415c

0800792c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	@ 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007936:	2300      	movs	r3, #0
 8007938:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800793a:	4b28      	ldr	r3, [pc, #160]	@ (80079dc <xDNSDoCallback+0xb0>)
 800793c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007950:	f7fc fac0 	bl	8003ed4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	623b      	str	r3, [r7, #32]
 800795a:	e029      	b.n	80079b0 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	429a      	cmp	r2, r3
 800796a:	d101      	bne.n	8007970 <xDNSDoCallback+0x44>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <xDNSDoCallback+0x46>
 8007970:	2300      	movs	r3, #0
 8007972:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d117      	bne.n	80079aa <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3314      	adds	r3, #20
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb fa58 	bl	8002e40 <uxListRemove>
                    vPortFree( pxCallback );
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f7fe faf3 	bl	8005f7c <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007996:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <xDNSDoCallback+0xb4>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d102      	bne.n	80079a4 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800799e:	2000      	movs	r0, #0
 80079a0:	f002 f9ca 	bl	8009d38 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 80079a4:	2301      	movs	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80079a8:	e006      	b.n	80079b8 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 80079b0:	6a3a      	ldr	r2, [r7, #32]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d1d1      	bne.n	800795c <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 80079b8:	f7fc fa9a 	bl	8003ef0 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d006      	beq.n	80079d0 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	69b9      	ldr	r1, [r7, #24]
 80079ce:	4798      	blx	r3
        }

        return xResult;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80079d2:	4618      	mov	r0, r3
 80079d4:	3728      	adds	r7, #40	@ 0x28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000fc8 	.word	0x20000fc8
 80079e0:	20000fc0 	.word	0x20000fc0

080079e4 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	@ 0x30
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80079ec:	4b40      	ldr	r3, [pc, #256]	@ (8007af0 <vDNSCheckCallBack+0x10c>)
 80079ee:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 80079f0:	f107 030c 	add.w	r3, r7, #12
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fb f999 	bl	8002d2c <vListInitialise>

        vTaskSuspendAll();
 80079fa:	f7fc fa6b 	bl	8003ed4 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a04:	e02e      	b.n	8007a64 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00d      	beq.n	8007a34 <vDNSCheckCallBack+0x50>
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d108      	bne.n	8007a34 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	3314      	adds	r3, #20
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fb fa0a 	bl	8002e40 <uxListRemove>
                    vPortFree( pxCallback );
 8007a2c:	6a38      	ldr	r0, [r7, #32]
 8007a2e:	f7fe faa5 	bl	8005f7c <vPortFree>
 8007a32:	e017      	b.n	8007a64 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	3308      	adds	r3, #8
 8007a38:	6a3a      	ldr	r2, [r7, #32]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fc ff3d 	bl	80048bc <xTaskCheckForTimeOut>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	3314      	adds	r3, #20
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fb f9f7 	bl	8002e40 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	f103 0214 	add.w	r2, r3, #20
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fb f991 	bl	8002d86 <vListInsertEnd>
                 pxIterator != xEnd; )
 8007a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d1cc      	bne.n	8007a06 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007a6c:	f7fc fa40 	bl	8003ef0 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d030      	beq.n	8007ad8 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007a76:	f107 030c 	add.w	r3, r7, #12
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a84:	e024      	b.n	8007ad0 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa0:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa6:	6911      	ldr	r1, [r2, #16]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4798      	blx	r3
 8007aac:	e008      	b.n	8007ac0 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab4:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aba:	6911      	ldr	r1, [r2, #16]
 8007abc:	2200      	movs	r2, #0
 8007abe:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	3314      	adds	r3, #20
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fb f9bb 	bl	8002e40 <uxListRemove>
                vPortFree( pxCallback );
 8007aca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007acc:	f7fe fa56 	bl	8005f7c <vPortFree>
                 pxIterator != xEnd;
 8007ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d1d6      	bne.n	8007a86 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007ad8:	4b06      	ldr	r3, [pc, #24]	@ (8007af4 <vDNSCheckCallBack+0x110>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d102      	bne.n	8007ae6 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f002 f929 	bl	8009d38 <vIPSetDNSTimerEnableState>
        }
    }
 8007ae6:	bf00      	nop
 8007ae8:	3730      	adds	r7, #48	@ 0x30
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000fc8 	.word	0x20000fc8
 8007af4:	20000fc0 	.word	0x20000fc0

08007af8 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 8007afc:	4802      	ldr	r0, [pc, #8]	@ (8007b08 <vDNSCallbackInitialise+0x10>)
 8007afe:	f7fb f915 	bl	8002d2c <vListInitialise>
    }
 8007b02:	bf00      	nop
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000fc0 	.word	0x20000fc0

08007b0c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b089      	sub	sp, #36	@ 0x24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e069      	b.n	8007c0a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b44:	d144      	bne.n	8007bd0 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d903      	bls.n	8007b54 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e05a      	b.n	8007c0a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61bb      	str	r3, [r7, #24]
 8007b58:	e057      	b.n	8007c0a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	4413      	add	r3, r2
 8007b66:	3334      	adds	r3, #52	@ 0x34
 8007b68:	222e      	movs	r2, #46	@ 0x2e
 8007b6a:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4413      	add	r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d202      	bcs.n	8007b94 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61bb      	str	r3, [r7, #24]
                    break;
 8007b92:	e027      	b.n	8007be4 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d812      	bhi.n	8007bc6 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61bb      	str	r3, [r7, #24]
                    break;
 8007ba4:	e01e      	b.n	8007be4 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	4413      	add	r3, r2
 8007bac:	7819      	ldrb	r1, [r3, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3334      	adds	r3, #52	@ 0x34
 8007bb6:	460a      	mov	r2, r1
 8007bb8:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	1e5a      	subs	r2, r3, #1
 8007bca:	617a      	str	r2, [r7, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1ea      	bne.n	8007ba6 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d205      	bcs.n	8007be4 <DNS_ReadNameField+0xd8>
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	4413      	add	r3, r2
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1ba      	bne.n	8007b5a <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00f      	beq.n	8007c0a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d209      	bcs.n	8007c06 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3334      	adds	r3, #52	@ 0x34
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	3301      	adds	r3, #1
 8007c02:	61bb      	str	r3, [r7, #24]
 8007c04:	e001      	b.n	8007c0a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
    }
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3724      	adds	r7, #36	@ 0x24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d102      	bne.n	8007c36 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	e03f      	b.n	8007cb6 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c44:	d11f      	bne.n	8007c86 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d903      	bls.n	8007c54 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	3302      	adds	r3, #2
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	e030      	b.n	8007cb6 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	e02d      	b.n	8007cb6 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	4413      	add	r3, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d908      	bls.n	8007c80 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	e002      	b.n	8007c86 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]
                    break;
 8007c84:	e008      	b.n	8007c98 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <DNS_SkipNameField+0x80>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d8e0      	bhi.n	8007c5a <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	613b      	str	r3, [r7, #16]
 8007cb0:	e001      	b.n	8007cb6 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007cb6:	693b      	ldr	r3, [r7, #16]
    }
 8007cb8:	4618      	mov	r0, r3
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007cc4:	b5b0      	push	{r4, r5, r7, lr}
 8007cc6:	b0f6      	sub	sp, #472	@ 0x1d8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 8007cce:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007cd2:	6020      	str	r0, [r4, #0]
 8007cd4:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007cd8:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 8007cdc:	6001      	str	r1, [r0, #0]
 8007cde:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007ce2:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007ce6:	600a      	str	r2, [r1, #0]
 8007ce8:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007cec:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007cf0:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 8007cfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d02:	224c      	movs	r2, #76	@ 0x4c
 8007d04:	2100      	movs	r1, #0
 8007d06:	4618      	mov	r0, r3
 8007d08:	f01a f96f 	bl	8021fea <memset>
        xSet.usPortNumber = usPort;
 8007d0c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007d10:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007d14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d18:	3344      	adds	r3, #68	@ 0x44
 8007d1a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 8007d1e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d22:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 8007d2c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d30:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b0b      	cmp	r3, #11
 8007d38:	d803      	bhi.n	8007d42 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8007d40:	e35a      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 8007d42:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d46:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 8007d50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 8007d5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d62:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 8007d78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d7c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007d86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007d8a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	330c      	adds	r3, #12
 8007d92:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007d96:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007d9a:	3b0c      	subs	r3, #12
 8007d9c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007da0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007da4:	889b      	ldrh	r3, [r3, #4]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	b21a      	sxth	r2, r3
 8007dac:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007db0:	889b      	ldrh	r3, [r3, #4]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	b21b      	sxth	r3, r3
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	b21b      	sxth	r3, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8007dc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007dc8:	88db      	ldrh	r3, [r3, #6]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	021b      	lsls	r3, r3, #8
 8007dce:	b21a      	sxth	r2, r3
 8007dd0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	0a1b      	lsrs	r3, r3, #8
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	b21b      	sxth	r3, r3
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8007de8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007df4:	2b80      	cmp	r3, #128	@ 0x80
 8007df6:	d11b      	bne.n	8007e30 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 8007dfe:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d103      	bne.n	8007e0e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007e0c:	e2f4      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 8007e0e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d114      	bne.n	8007e40 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e1a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 8007e1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e22:	2110      	movs	r1, #16
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fe71 	bl	8007b0c <DNS_ReadNameField>
 8007e2a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007e2e:	e007      	b.n	8007e40 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8007e30:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007e3e:	e2db      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 8007e40:	2300      	movs	r3, #0
 8007e42:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007e46:	e064      	b.n	8007f12 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 8007e48:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d103      	bne.n	8007e58 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e54:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 8007e58:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d108      	bne.n	8007e72 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 8007e60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e64:	2110      	movs	r1, #16
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fe50 	bl	8007b0c <DNS_ReadNameField>
 8007e6c:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 8007e70:	e009      	b.n	8007e86 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 8007e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e76:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fecb 	bl	8007c18 <DNS_SkipNameField>
 8007e82:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8007e86:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007e94:	e043      	b.n	8007f1e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8007e96:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8007e9a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8007ea4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007ea8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007eac:	4413      	add	r3, r2
 8007eae:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8007eb2:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007eb6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8007ec0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d91b      	bls.n	8007f00 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8007ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f002 fa58 	bl	800a382 <usChar2u16>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8007ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007edc:	3302      	adds	r3, #2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f002 fa4f 	bl	800a382 <usChar2u16>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8007eea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007eee:	3304      	adds	r3, #4
 8007ef0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007ef4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007efe:	e003      	b.n	8007f08 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007f06:	e00a      	b.n	8007f1e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007f08:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007f12:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007f16:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d394      	bcc.n	8007e48 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8007f1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8265 	beq.w	80083f2 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007f28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d10d      	bne.n	8007f4c <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8007f30:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8007f34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f38:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007f3c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007f40:	6819      	ldr	r1, [r3, #0]
 8007f42:	f000 fa73 	bl	800842c <parseDNSAnswer>
 8007f46:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8007f4a:	e255      	b.n	80083f8 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007f4c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d004      	beq.n	8007f5e <DNS_ParseDNSReply+0x29a>
 8007f54:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007f58:	2b1c      	cmp	r3, #28
 8007f5a:	f040 824d 	bne.w	80083f8 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8007f5e:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	f040 8248 	bne.w	80083f8 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8007f68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f6c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f001 ff9f 	bl	8009eb4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007f76:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8007f7a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8007f82:	48c4      	ldr	r0, [pc, #784]	@ (8008294 <DNS_ParseDNSReply+0x5d0>)
 8007f84:	f019 fd08 	bl	8021998 <lUDPLoggingPrintf>
                            break;
 8007f88:	e236      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8007f8a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007f94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	1ad3      	subs	r3, r2, r3
 8007f9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8007fa0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007fa4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa6:	d003      	beq.n	8007fb0 <DNS_ParseDNSReply+0x2ec>
 8007fa8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007fac:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fae:	d101      	bne.n	8007fb4 <DNS_ParseDNSReply+0x2f0>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <DNS_ParseDNSReply+0x2f2>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <DNS_ParseDNSReply+0x300>
 8007fba:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8007fbe:	48b6      	ldr	r0, [pc, #728]	@ (8008298 <DNS_ParseDNSReply+0x5d4>)
 8007fc0:	f7f9 fbc2 	bl	8001748 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8007fc4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f000 8213 	beq.w	80083f6 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007fd0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8007fda:	f107 0314 	add.w	r3, r7, #20
 8007fde:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007fe2:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f019 fef2 	bl	8021dd0 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8007fec:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007ff6:	3334      	adds	r3, #52	@ 0x34
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	48a8      	ldr	r0, [pc, #672]	@ (800829c <DNS_ParseDNSReply+0x5d8>)
 8007ffc:	f019 fccc 	bl	8021998 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008000:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008004:	b2da      	uxtb	r2, r3
 8008006:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800800a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800800e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008012:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008016:	3334      	adds	r3, #52	@ 0x34
 8008018:	4618      	mov	r0, r3
 800801a:	f7f9 fc29 	bl	8001870 <xApplicationDNSQueryHook>
 800801e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008022:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d014      	beq.n	8008054 <DNS_ParseDNSReply+0x390>
 800802a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800802e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008032:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <DNS_ParseDNSReply+0x390>
 8008040:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008044:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 800804e:	2300      	movs	r3, #0
 8008050:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008054:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 81cd 	beq.w	80083f8 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 800806a:	4b8d      	ldr	r3, [pc, #564]	@ (80082a0 <DNS_ParseDNSReply+0x5dc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d164      	bne.n	800813c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008072:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008076:	f001 fbd7 	bl	8009828 <uxIPHeaderSizePacket>
 800807a:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 800807c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008080:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008088:	3316      	adds	r3, #22
 800808a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 800808e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008092:	2b1c      	cmp	r3, #28
 8008094:	d103      	bne.n	800809e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008096:	231c      	movs	r3, #28
 8008098:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800809c:	e002      	b.n	80080a4 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 800809e:	2310      	movs	r3, #16
 80080a0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 80080a4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80080a8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80080ac:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 80080ae:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80080b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80080b6:	4413      	add	r3, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80080be:	f001 fe65 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 80080c2:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 80080c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d032      	beq.n	8008134 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 80080ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80080d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080d6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 80080e2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80080e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80080ea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 80080f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80080fa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 80080fe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008104:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008108:	4413      	add	r3, r2
 800810a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800810e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008112:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008116:	4413      	add	r3, r2
 8008118:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800811c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008120:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008124:	4413      	add	r3, r2
 8008126:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800812a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800812e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008132:	e00b      	b.n	800814c <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008134:	2300      	movs	r3, #0
 8008136:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800813a:	e007      	b.n	800814c <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800813c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008142:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008146:	4413      	add	r3, r2
 8008148:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 800814c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8151 	beq.w	80083f8 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800815a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 800815e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008162:	3302      	adds	r3, #2
 8008164:	2280      	movs	r2, #128	@ 0x80
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800816c:	3303      	adds	r3, #3
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008172:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008176:	3306      	adds	r3, #6
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008180:	3307      	adds	r3, #7
 8008182:	2201      	movs	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008186:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800818a:	3308      	adds	r3, #8
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008194:	3309      	adds	r3, #9
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 800819a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800819e:	330a      	adds	r3, #10
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80081a8:	330b      	adds	r3, #11
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 80081ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081b2:	22c0      	movs	r2, #192	@ 0xc0
 80081b4:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 80081b6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80081ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081c6:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 80081c8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80081cc:	0a1b      	lsrs	r3, r3, #8
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081d4:	3302      	adds	r3, #2
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 80081de:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081e2:	3303      	adds	r3, #3
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 80081e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081ec:	3304      	adds	r3, #4
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
 80081f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80081f6:	3305      	adds	r3, #5
 80081f8:	2201      	movs	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 80081fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008200:	3306      	adds	r3, #6
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800820a:	3307      	adds	r3, #7
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008214:	3308      	adds	r3, #8
 8008216:	2201      	movs	r2, #1
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800821e:	3309      	adds	r3, #9
 8008220:	222c      	movs	r2, #44	@ 0x2c
 8008222:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008224:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008228:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	b29b      	uxth	r3, r3
 8008230:	3310      	adds	r3, #16
 8008232:	b29b      	uxth	r3, r3
 8008234:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008238:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800823c:	2b1c      	cmp	r3, #28
 800823e:	d131      	bne.n	80082a4 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008240:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008244:	330a      	adds	r3, #10
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
 800824a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800824e:	330b      	adds	r3, #11
 8008250:	2210      	movs	r2, #16
 8008252:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008254:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008258:	f103 020c 	add.w	r2, r3, #12
 800825c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008260:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008264:	4615      	mov	r5, r2
 8008266:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 800826a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800826c:	6028      	str	r0, [r5, #0]
 800826e:	6069      	str	r1, [r5, #4]
 8008270:	60aa      	str	r2, [r5, #8]
 8008272:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008274:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008278:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008282:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008286:	b29b      	uxth	r3, r3
 8008288:	331c      	adds	r3, #28
 800828a:	b29b      	uxth	r3, r3
 800828c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008290:	e09a      	b.n	80083c8 <DNS_ParseDNSReply+0x704>
 8008292:	bf00      	nop
 8008294:	08024204 	.word	0x08024204
 8008298:	08024238 	.word	0x08024238
 800829c:	0802426c 	.word	0x0802426c
 80082a0:	08027120 	.word	0x08027120
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 80082a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082a8:	330a      	adds	r3, #10
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082b2:	330b      	adds	r3, #11
 80082b4:	2204      	movs	r2, #4
 80082b6:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 80082b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	061a      	lsls	r2, r3, #24
 80082c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082c8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082d4:	431a      	orrs	r2, r3
 80082d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082da:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	0a1b      	lsrs	r3, r3, #8
 80082e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80082e6:	431a      	orrs	r2, r3
 80082e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082ec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	0e1b      	lsrs	r3, r3, #24
 80082f4:	4313      	orrs	r3, r2
 80082f6:	0e1a      	lsrs	r2, r3, #24
 80082f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80082fc:	330c      	adds	r3, #12
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008306:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	061a      	lsls	r2, r3, #24
 800830e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008312:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	021b      	lsls	r3, r3, #8
 800831a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800831e:	431a      	orrs	r2, r3
 8008320:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008324:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	0a1b      	lsrs	r3, r3, #8
 800832c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008330:	431a      	orrs	r2, r3
 8008332:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008336:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	0e1b      	lsrs	r3, r3, #24
 800833e:	4313      	orrs	r3, r2
 8008340:	0c1a      	lsrs	r2, r3, #16
 8008342:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008346:	330d      	adds	r3, #13
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008350:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	061a      	lsls	r2, r3, #24
 8008358:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800835c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008368:	431a      	orrs	r2, r3
 800836a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800836e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800837a:	431a      	orrs	r2, r3
 800837c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008380:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	0e1b      	lsrs	r3, r3, #24
 8008388:	4313      	orrs	r3, r2
 800838a:	0a1a      	lsrs	r2, r3, #8
 800838c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008390:	330e      	adds	r3, #14
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800839a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	0e1a      	lsrs	r2, r3, #24
 80083a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80083a6:	330f      	adds	r3, #15
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80083ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80083b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 80083ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80083be:	b29b      	uxth	r3, r3
 80083c0:	3310      	adds	r3, #16
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 80083c8:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 80083cc:	4619      	mov	r1, r3
 80083ce:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80083d2:	f000 fa21 	bl	8008818 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 80083d6:	2100      	movs	r1, #0
 80083d8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80083dc:	f001 f924 	bl	8009628 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 80083e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 80083e8:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 80083ec:	f00e fc2c 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
 80083f0:	e002      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
                    break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <DNS_ParseDNSReply+0x734>
                            break;
 80083f6:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 80083f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008400:	2300      	movs	r3, #0
 8008402:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008406:	e009      	b.n	800841c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008408:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800840c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d102      	bne.n	800841c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800841c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008420:	4618      	mov	r0, r3
 8008422:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008426:	46bd      	mov	sp, r7
 8008428:	bdb0      	pop	{r4, r5, r7, pc}
 800842a:	bf00      	nop

0800842c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800842c:	b590      	push	{r4, r7, lr}
 800842e:	b0a7      	sub	sp, #156	@ 0x9c
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800843e:	2304      	movs	r3, #4
 8008440:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008444:	2301      	movs	r3, #1
 8008446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008450:	2300      	movs	r3, #0
 8008452:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008456:	e1c1      	b.n	80087dc <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008458:	2300      	movs	r3, #0
 800845a:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008460:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008464:	429a      	cmp	r2, r3
 8008466:	f240 81c1 	bls.w	80087ec <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68da      	ldr	r2, [r3, #12]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7ff fbcf 	bl	8007c18 <DNS_SkipNameField>
 800847a:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 800847c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008482:	2300      	movs	r3, #0
 8008484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008488:	e1b1      	b.n	80087ee <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008496:	441a      	add	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	695a      	ldr	r2, [r3, #20]
 80084ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d803      	bhi.n	80084c4 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 80084bc:	2300      	movs	r3, #0
 80084be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80084c2:	e194      	b.n	80087ee <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 ff5a 	bl	800a382 <usChar2u16>
 80084ce:	4603      	mov	r3, r0
 80084d0:	461a      	mov	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8b1b      	ldrh	r3, [r3, #24]
 80084da:	2b1c      	cmp	r3, #28
 80084dc:	d10c      	bne.n	80084f8 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2210      	movs	r2, #16
 80084e2:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	330a      	adds	r3, #10
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d323      	bcc.n	800853a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084f6:	e020      	b.n	800853a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8b1b      	ldrh	r3, [r3, #24]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d11c      	bne.n	800853a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2204      	movs	r2, #4
 8008504:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a1b      	ldr	r3, [r3, #32]
 800850e:	330a      	adds	r3, #10
 8008510:	429a      	cmp	r2, r3
 8008512:	d312      	bcc.n	800853a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	330a      	adds	r3, #10
 800851a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800851c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008520:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	461a      	mov	r2, r3
 8008528:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800852a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800852c:	f019 fc50 	bl	8021dd0 <memcpy>

                    if( ulTestAddress != 0U )
 8008530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008536:	2301      	movs	r3, #1
 8008538:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 800853a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 810d 	beq.w	800875c <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008548:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800854a:	891b      	ldrh	r3, [r3, #8]
 800854c:	b29b      	uxth	r3, r3
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b21a      	sxth	r2, r3
 8008552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008554:	891b      	ldrh	r3, [r3, #8]
 8008556:	b29b      	uxth	r3, r3
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	b29b      	uxth	r3, r3
 800855c:	b21b      	sxth	r3, r3
 800855e:	4313      	orrs	r3, r2
 8008560:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008566:	b21b      	sxth	r3, r3
 8008568:	429a      	cmp	r2, r3
 800856a:	f040 80d0 	bne.w	800870e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	2b10      	cmp	r3, #16
 8008574:	d11c      	bne.n	80085b0 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 800857c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008580:	6818      	ldr	r0, [r3, #0]
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3334      	adds	r3, #52	@ 0x34
 8008594:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008598:	210a      	movs	r1, #10
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fe24 	bl	80071e8 <pxNew_AddrInfo>
 80085a0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	61da      	str	r2, [r3, #28]
 80085ae:	e021      	b.n	80085f4 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	330a      	adds	r3, #10
 80085b6:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	331c      	adds	r3, #28
 80085bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80085c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80085c8:	f019 fc02 	bl	8021dd0 <memcpy>

                        if( ppxAddressInfo != NULL )
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	331c      	adds	r3, #28
 80085d6:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3334      	adds	r3, #52	@ 0x34
 80085dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085de:	2102      	movs	r1, #2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fe01 	bl	80071e8 <pxNew_AddrInfo>
 80085e6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 80085f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d013      	beq.n	8008624 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e004      	b.n	8008618 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008612:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008616:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008618:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800861c:	f103 021c 	add.w	r2, r3, #28
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <parseDNSAnswer+0x204>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	e000      	b.n	8008632 <parseDNSAnswer+0x206>
 8008630:	2300      	movs	r3, #0
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff f979 	bl	800792c <xDNSDoCallback>
 800863a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 800863c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864c:	2b00      	cmp	r3, #0
 800864e:	d011      	beq.n	8008674 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8008656:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008658:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 800865a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800865e:	2300      	movs	r3, #0
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	2300      	movs	r3, #0
 8008664:	f7fe fe85 	bl	8007372 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800866c:	3301      	adds	r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8b1b      	ldrh	r3, [r3, #24]
 8008678:	2b1c      	cmp	r3, #28
 800867a:	d11f      	bne.n	80086bc <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 800867c:	f107 0214 	add.w	r2, r7, #20
 8008680:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008684:	2328      	movs	r3, #40	@ 0x28
 8008686:	200a      	movs	r0, #10
 8008688:	f006 fb6c 	bl	800ed64 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	4618      	mov	r0, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <parseDNSAnswer+0x27c>
 80086a4:	4b58      	ldr	r3, [pc, #352]	@ (8008808 <parseDNSAnswer+0x3dc>)
 80086a6:	e000      	b.n	80086aa <parseDNSAnswer+0x27e>
 80086a8:	4b58      	ldr	r3, [pc, #352]	@ (800880c <parseDNSAnswer+0x3e0>)
 80086aa:	f107 0114 	add.w	r1, r7, #20
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	460b      	mov	r3, r1
 80086b2:	4601      	mov	r1, r0
 80086b4:	4856      	ldr	r0, [pc, #344]	@ (8008810 <parseDNSAnswer+0x3e4>)
 80086b6:	f019 f96f 	bl	8021998 <lUDPLoggingPrintf>
 80086ba:	e01f      	b.n	80086fc <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 80086c2:	f107 0214 	add.w	r2, r7, #20
 80086c6:	2328      	movs	r3, #40	@ 0x28
 80086c8:	2002      	movs	r0, #2
 80086ca:	f006 fb4b 	bl	800ed64 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	4618      	mov	r0, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <parseDNSAnswer+0x2be>
 80086e6:	4b48      	ldr	r3, [pc, #288]	@ (8008808 <parseDNSAnswer+0x3dc>)
 80086e8:	e000      	b.n	80086ec <parseDNSAnswer+0x2c0>
 80086ea:	4b48      	ldr	r3, [pc, #288]	@ (800880c <parseDNSAnswer+0x3e0>)
 80086ec:	f107 0114 	add.w	r1, r7, #20
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	460b      	mov	r3, r1
 80086f4:	4601      	mov	r1, r0
 80086f6:	4846      	ldr	r0, [pc, #280]	@ (8008810 <parseDNSAnswer+0x3e4>)
 80086f8:	f019 f94e 	bl	8021998 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 80086fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008700:	2b00      	cmp	r3, #0
 8008702:	d119      	bne.n	8008738 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800870c:	e014      	b.n	8008738 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800870e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008710:	891b      	ldrh	r3, [r3, #8]
 8008712:	b29b      	uxth	r3, r3
 8008714:	021b      	lsls	r3, r3, #8
 8008716:	b21a      	sxth	r2, r3
 8008718:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800871a:	891b      	ldrh	r3, [r3, #8]
 800871c:	b29b      	uxth	r3, r3
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	b29b      	uxth	r3, r3
 8008722:	b21b      	sxth	r3, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	b21b      	sxth	r3, r3
 8008728:	b29b      	uxth	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6a1b      	ldr	r3, [r3, #32]
 8008730:	461a      	mov	r2, r3
 8008732:	4838      	ldr	r0, [pc, #224]	@ (8008814 <parseDNSAnswer+0x3e8>)
 8008734:	f019 f930 	bl	8021998 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	330a      	adds	r3, #10
 8008742:	441a      	add	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	f1a3 020a 	sub.w	r2, r3, #10
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	615a      	str	r2, [r3, #20]
 800875a:	e03a      	b.n	80087d2 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	2b09      	cmp	r3, #9
 8008762:	d936      	bls.n	80087d2 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f103 020a 	add.w	r2, r3, #10
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f1a3 020a 	sub.w	r2, r3, #10
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008784:	891b      	ldrh	r3, [r3, #8]
 8008786:	b29b      	uxth	r3, r3
 8008788:	021b      	lsls	r3, r3, #8
 800878a:	b21a      	sxth	r2, r3
 800878c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800878e:	891b      	ldrh	r3, [r3, #8]
 8008790:	b29b      	uxth	r3, r3
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	b21b      	sxth	r3, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	b21b      	sxth	r3, r3
 800879c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	695a      	ldr	r2, [r3, #20]
 80087a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d30e      	bcc.n	80087ca <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80087c2:	1ad2      	subs	r2, r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	615a      	str	r2, [r3, #20]
 80087c8:	e003      	b.n	80087d2 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 80087d0:	e00d      	b.n	80087ee <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 80087d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80087d6:	3301      	adds	r3, #1
 80087d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88db      	ldrh	r3, [r3, #6]
 80087e0:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80087e4:	429a      	cmp	r2, r3
 80087e6:	f4ff ae37 	bcc.w	8008458 <parseDNSAnswer+0x2c>
 80087ea:	e000      	b.n	80087ee <parseDNSAnswer+0x3c2>
                break;
 80087ec:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 80087ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <parseDNSAnswer+0x3d0>
 80087f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087fa:	e000      	b.n	80087fe <parseDNSAnswer+0x3d2>
 80087fc:	2300      	movs	r3, #0
    }
 80087fe:	4618      	mov	r0, r3
 8008800:	3794      	adds	r7, #148	@ 0x94
 8008802:	46bd      	mov	sp, r7
 8008804:	bd90      	pop	{r4, r7, pc}
 8008806:	bf00      	nop
 8008808:	0802429c 	.word	0x0802429c
 800880c:	080242a0 	.word	0x080242a0
 8008810:	080242a8 	.word	0x080242a8
 8008814:	080242e0 	.word	0x080242e0

08008818 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	@ 0x30
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fffd 	bl	8009828 <uxIPHeaderSizePacket>
 800882e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d104      	bne.n	8008840 <prepareReplyDNSMessage+0x28>
 8008836:	f240 319f 	movw	r1, #927	@ 0x39f
 800883a:	4865      	ldr	r0, [pc, #404]	@ (80089d0 <prepareReplyDNSMessage+0x1b8>)
 800883c:	f7f8 ff84 	bl	8001748 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	330e      	adds	r3, #14
 800884a:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 800884c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884e:	2b28      	cmp	r3, #40	@ 0x28
 8008850:	d150      	bne.n	80088f4 <prepareReplyDNSMessage+0xdc>
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800885a:	2b60      	cmp	r3, #96	@ 0x60
 800885c:	d14a      	bne.n	80088f4 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008862:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	330e      	adds	r3, #14
 8008868:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	3336      	adds	r3, #54	@ 0x36
 800886e:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	3308      	adds	r3, #8
 8008876:	b29b      	uxth	r3, r3
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	b29a      	uxth	r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	3308      	adds	r3, #8
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	b29b      	uxth	r3, r3
 8008886:	4313      	orrs	r3, r2
 8008888:	b29a      	uxth	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f103 0018 	add.w	r0, r3, #24
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3308      	adds	r3, #8
 8008898:	2210      	movs	r2, #16
 800889a:	4619      	mov	r1, r3
 800889c:	f019 fa98 	bl	8021dd0 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f103 0008 	add.w	r0, r3, #8
 80088a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a8:	3338      	adds	r3, #56	@ 0x38
 80088aa:	2210      	movs	r2, #16
 80088ac:	4619      	mov	r1, r3
 80088ae:	f019 fa8f 	bl	8021dd0 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3308      	adds	r3, #8
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	b29a      	uxth	r2, r3
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3308      	adds	r3, #8
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	021b      	lsls	r3, r3, #8
 80088d8:	4313      	orrs	r3, r2
 80088da:	81fb      	strh	r3, [r7, #14]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	89fa      	ldrh	r2, [r7, #14]
 80088ea:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	333e      	adds	r3, #62	@ 0x3e
 80088f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 80088f2:	e066      	b.n	80089c2 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	3322      	adds	r3, #34	@ 0x22
 80088f8:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	b29b      	uxth	r3, r3
 8008902:	4413      	add	r3, r2
 8008904:	b29b      	uxth	r3, r3
 8008906:	3308      	adds	r3, #8
 8008908:	b29b      	uxth	r3, r3
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	b29a      	uxth	r2, r3
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	b29b      	uxth	r3, r3
 8008912:	4619      	mov	r1, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	440b      	add	r3, r1
 8008918:	3308      	adds	r3, #8
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	b29a      	uxth	r2, r3
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	4a2a      	ldr	r2, [pc, #168]	@ (80089d4 <prepareReplyDNSMessage+0x1bc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d103      	bne.n	8008938 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	22ff      	movs	r2, #255	@ 0xff
 8008934:	721a      	strb	r2, [r3, #8]
 8008936:	e006      	b.n	8008946 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	2280      	movs	r2, #128	@ 0x80
 8008944:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 800894e:	4b22      	ldr	r3, [pc, #136]	@ (80089d8 <prepareReplyDNSMessage+0x1c0>)
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	b21a      	sxth	r2, r3
 8008956:	4b20      	ldr	r3, [pc, #128]	@ (80089d8 <prepareReplyDNSMessage+0x1c0>)
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	0a1b      	lsrs	r3, r3, #8
 800895c:	b29b      	uxth	r3, r3
 800895e:	b21b      	sxth	r3, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	b21b      	sxth	r3, r3
 8008964:	b29a      	uxth	r2, r3
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	2200      	movs	r2, #0
 800896e:	719a      	strb	r2, [r3, #6]
 8008970:	2200      	movs	r2, #0
 8008972:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008974:	4b18      	ldr	r3, [pc, #96]	@ (80089d8 <prepareReplyDNSMessage+0x1c0>)
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	4b16      	ldr	r3, [pc, #88]	@ (80089d8 <prepareReplyDNSMessage+0x1c0>)
 800897e:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	b29b      	uxth	r3, r3
 8008984:	3308      	adds	r3, #8
 8008986:	b29b      	uxth	r3, r3
 8008988:	021b      	lsls	r3, r3, #8
 800898a:	b29a      	uxth	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	0a1b      	lsrs	r3, r3, #8
 8008992:	b29b      	uxth	r3, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	b29a      	uxth	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	781a      	ldrb	r2, [r3, #0]
 80089a0:	785b      	ldrb	r3, [r3, #1]
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	4313      	orrs	r3, r2
 80089a6:	81bb      	strh	r3, [r7, #12]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	885b      	ldrh	r3, [r3, #2]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	801a      	strh	r2, [r3, #0]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	89ba      	ldrh	r2, [r7, #12]
 80089b6:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	4413      	add	r3, r2
 80089be:	3316      	adds	r3, #22
 80089c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089c6:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 80089c8:	bf00      	nop
 80089ca:	3730      	adds	r7, #48	@ 0x30
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	08024238 	.word	0x08024238
 80089d4:	fb0000e0 	.word	0xfb0000e0
 80089d8:	20000fdc 	.word	0x20000fdc

080089dc <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ec:	2b29      	cmp	r3, #41	@ 0x29
 80089ee:	d803      	bhi.n	80089f8 <ProcessICMPPacket+0x1c>
 80089f0:	2159      	movs	r1, #89	@ 0x59
 80089f2:	4811      	ldr	r0, [pc, #68]	@ (8008a38 <ProcessICMPPacket+0x5c>)
 80089f4:	f7f8 fea8 	bl	8001748 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fc:	2b29      	cmp	r3, #41	@ 0x29
 80089fe:	d915      	bls.n	8008a2c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d008      	beq.n	8008a22 <ProcessICMPPacket+0x46>
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d10a      	bne.n	8008a2a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	68b8      	ldr	r0, [r7, #8]
 8008a18:	f000 f810 	bl	8008a3c <prvProcessICMPEchoRequest>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008a20:	e004      	b.n	8008a2c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008a22:	68b8      	ldr	r0, [r7, #8]
 8008a24:	f000 f836 	bl	8008a94 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008a28:	e000      	b.n	8008a2c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 8008a2a:	bf00      	nop
            }
        }

        return eReturn;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	08024304 	.word	0x08024304

08008a3c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3322      	adds	r3, #34	@ 0x22
 8008a4a:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	330e      	adds	r3, #14
 8008a50:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	2240      	movs	r2, #64	@ 0x40
 8008a70:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2200      	movs	r2, #0
 8008a76:	719a      	strb	r2, [r3, #6]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	709a      	strb	r2, [r3, #2]
 8008a82:	2200      	movs	r2, #0
 8008a84:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008a86:	2302      	movs	r3, #2
    }
 8008a88:	4618      	mov	r0, r3
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7c1a      	ldrb	r2, [r3, #16]
 8008aa4:	7c5b      	ldrb	r3, [r3, #17]
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 8008aac:	89fb      	ldrh	r3, [r7, #14]
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	b21a      	sxth	r2, r3
 8008ab2:	89fb      	ldrh	r3, [r7, #14]
 8008ab4:	0a1b      	lsrs	r3, r3, #8
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	b21b      	sxth	r3, r3
 8008aba:	4313      	orrs	r3, r2
 8008abc:	b21b      	sxth	r3, r3
 8008abe:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8008ac0:	89fb      	ldrh	r3, [r7, #14]
 8008ac2:	3b14      	subs	r3, #20
 8008ac4:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8008ac6:	89fb      	ldrh	r3, [r7, #14]
 8008ac8:	3b08      	subs	r3, #8
 8008aca:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	332a      	adds	r3, #42	@ 0x2a
 8008ad4:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	82bb      	strh	r3, [r7, #20]
 8008ada:	e00c      	b.n	8008af6 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	2b78      	cmp	r3, #120	@ 0x78
 8008ae2:	d002      	beq.n	8008aea <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	75fb      	strb	r3, [r7, #23]
                break;
 8008ae8:	e009      	b.n	8008afe <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008af0:	8abb      	ldrh	r3, [r7, #20]
 8008af2:	3301      	adds	r3, #1
 8008af4:	82bb      	strh	r3, [r7, #20]
 8008af6:	8aba      	ldrh	r2, [r7, #20]
 8008af8:	89fb      	ldrh	r3, [r7, #14]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d3ee      	bcc.n	8008adc <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	4611      	mov	r1, r2
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7f8 fed3 	bl	80018b4 <vApplicationPingReplyHook>
    }
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
	...

08008b18 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008b20:	f000 f90e 	bl	8008d40 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008b24:	4802      	ldr	r0, [pc, #8]	@ (8008b30 <prvIPTask+0x18>)
 8008b26:	f018 ff37 	bl	8021998 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 8008b2a:	f000 f803 	bl	8008b34 <prvProcessIPEventsAndTimers>
 8008b2e:	e7fc      	b.n	8008b2a <prvIPTask+0x12>
 8008b30:	08024334 	.word	0x08024334

08008b34 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b08d      	sub	sp, #52	@ 0x34
 8008b38:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 8008b3a:	f000 ff09 	bl	8009950 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 8008b3e:	f000 fea7 	bl	8009890 <xCalculateSleepTime>
 8008b42:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 8008b44:	4b7c      	ldr	r3, [pc, #496]	@ (8008d38 <prvProcessIPEventsAndTimers+0x204>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f107 0118 	add.w	r1, r7, #24
 8008b4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7fa fbd8 	bl	8003304 <xQueueReceive>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 8008b5a:	23ff      	movs	r3, #255	@ 0xff
 8008b5c:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 8008b5e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d00d      	beq.n	8008b84 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 8008b68:	4b73      	ldr	r3, [pc, #460]	@ (8008d38 <prvProcessIPEventsAndTimers+0x204>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fa fda1 	bl	80036b4 <uxQueueSpacesAvailable>
 8008b72:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 8008b74:	4b71      	ldr	r3, [pc, #452]	@ (8008d3c <prvProcessIPEventsAndTimers+0x208>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d202      	bcs.n	8008b84 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 8008b7e:	4a6f      	ldr	r2, [pc, #444]	@ (8008d3c <prvProcessIPEventsAndTimers+0x208>)
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008b84:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	2b0e      	cmp	r3, #14
 8008b8c:	f200 80ca 	bhi.w	8008d24 <prvProcessIPEventsAndTimers+0x1f0>
 8008b90:	a201      	add	r2, pc, #4	@ (adr r2, 8008b98 <prvProcessIPEventsAndTimers+0x64>)
 8008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b96:	bf00      	nop
 8008b98:	08008d25 	.word	0x08008d25
 8008b9c:	08008bd5 	.word	0x08008bd5
 8008ba0:	08008bdf 	.word	0x08008bdf
 8008ba4:	08008be9 	.word	0x08008be9
 8008ba8:	08008bf5 	.word	0x08008bf5
 8008bac:	08008cbf 	.word	0x08008cbf
 8008bb0:	08008cc9 	.word	0x08008cc9
 8008bb4:	08008cdd 	.word	0x08008cdd
 8008bb8:	08008ce5 	.word	0x08008ce5
 8008bbc:	08008d09 	.word	0x08008d09
 8008bc0:	08008bff 	.word	0x08008bff
 8008bc4:	08008cb5 	.word	0x08008cb5
 8008bc8:	08008cd3 	.word	0x08008cd3
 8008bcc:	08008d25 	.word	0x08008d25
 8008bd0:	08008d0f 	.word	0x08008d0f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 f9cc 	bl	8009f74 <prvProcessNetworkDownEvent>
            break;
 8008bdc:	e0a5      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 f955 	bl	8008e90 <prvHandleEthernetPacket>
            break;
 8008be6:	e0a0      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2101      	movs	r1, #1
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f95d 	bl	8008eac <prvForwardTxPacket>
            break;
 8008bf2:	e09a      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008bf4:	f7fe f94e 	bl	8006e94 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008bf8:	f002 fdb6 	bl	800b768 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 8008bfc:	e095      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008c02:	2318      	movs	r3, #24
 8008c04:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	7a1b      	ldrb	r3, [r3, #8]
 8008c0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <prvProcessIPEventsAndTimers+0xe6>
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d01a      	beq.n	8008c4e <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008c18:	e02c      	b.n	8008c74 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c22:	061a      	lsls	r2, r3, #24
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c28:	021b      	lsls	r3, r3, #8
 8008c2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c34:	0a1b      	lsrs	r3, r3, #8
 8008c36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c40:	0e1b      	lsrs	r3, r3, #24
 8008c42:	4313      	orrs	r3, r2
 8008c44:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 8008c4c:	e012      	b.n	8008c74 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 8008c4e:	230a      	movs	r3, #10
 8008c50:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	3328      	adds	r3, #40	@ 0x28
 8008c56:	f107 0408 	add.w	r4, r7, #8
 8008c5a:	6818      	ldr	r0, [r3, #0]
 8008c5c:	6859      	ldr	r1, [r3, #4]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	3328      	adds	r3, #40	@ 0x28
 8008c68:	2210      	movs	r2, #16
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f019 f9bc 	bl	8021fea <memset>
                        break;
 8008c72:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	b21a      	sxth	r2, r3
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	b21b      	sxth	r3, r3
 8008c86:	4313      	orrs	r3, r2
 8008c88:	b21b      	sxth	r3, r3
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	2200      	movs	r2, #0
 8008c92:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008c94:	4639      	mov	r1, r7
 8008c96:	2300      	movs	r3, #0
 8008c98:	2218      	movs	r2, #24
 8008c9a:	6a38      	ldr	r0, [r7, #32]
 8008c9c:	f005 fa32 	bl	800e104 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f043 0210 	orr.w	r2, r3, #16
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 8008cac:	6a38      	ldr	r0, [r7, #32]
 8008cae:	f006 f8d8 	bl	800ee62 <vSocketWakeUpUser>
            break;
 8008cb2:	e03a      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f005 fad8 	bl	800e26c <vSocketClose>
            break;
 8008cbc:	e035      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f00d f9b1 	bl	8016028 <vProcessGeneratedUDPPacket>
            break;
 8008cc6:	e030      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 f88c 	bl	8008de8 <prvCallDHCP_RA_Handler>
            break;
 8008cd0:	e02b      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f007 fab3 	bl	8010240 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008cda:	e026      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008cdc:	2001      	movs	r0, #1
 8008cde:	f000 ffab 	bl	8009c38 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008ce2:	e022      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008ce8:	6a38      	ldr	r0, [r7, #32]
 8008cea:	f008 fbed 	bl	80114c8 <xTCPCheckNewClient>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d019      	beq.n	8008d28 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f043 0204 	orr.w	r2, r3, #4
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008d00:	6a38      	ldr	r0, [r7, #32]
 8008d02:	f006 f8ae 	bl	800ee62 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008d06:	e00f      	b.n	8008d28 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008d08:	f007 f984 	bl	8010014 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 8008d0c:	e00d      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f9 ffb0 	bl	8002c7c <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 8008d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d1e:	f7fd f92d 	bl	8005f7c <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008d22:	e002      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008d24:	bf00      	nop
 8008d26:	e000      	b.n	8008d2a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008d28:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 8008d2a:	f000 f833 	bl	8008d94 <prvIPTask_CheckPendingEvents>
}
 8008d2e:	bf00      	nop
 8008d30:	3734      	adds	r7, #52	@ 0x34
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd90      	pop	{r4, r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000fd8 	.word	0x20000fd8
 8008d3c:	20000014 	.word	0x20000014

08008d40 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 8008d46:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8008d4a:	f000 ff2b 	bl	8009ba4 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d8c <prvIPTask_Initialise+0x4c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	607b      	str	r3, [r7, #4]
 8008d54:	e005      	b.n	8008d62 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f8be 	bl	8008ed8 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1f6      	bne.n	8008d56 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 8008d68:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d6c:	f000 fee8 	bl	8009b40 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 8008d70:	2000      	movs	r0, #0
 8008d72:	f000 ff9b 	bl	8009cac <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 8008d76:	f7fe fa31 	bl	80071dc <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 8008d7a:	f7fe fb0f 	bl	800739c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 8008d7e:	4b04      	ldr	r3, [pc, #16]	@ (8008d90 <prvIPTask_Initialise+0x50>)
 8008d80:	2201      	movs	r2, #1
 8008d82:	601a      	str	r2, [r3, #0]
}
 8008d84:	bf00      	nop
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20001364 	.word	0x20001364
 8008d90:	20000fe8 	.word	0x20000fe8

08008d94 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 8008d9a:	4b12      	ldr	r3, [pc, #72]	@ (8008de4 <prvIPTask_CheckPendingEvents+0x50>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01c      	beq.n	8008ddc <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008da2:	4b10      	ldr	r3, [pc, #64]	@ (8008de4 <prvIPTask_CheckPendingEvents+0x50>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008da8:	f004 f836 	bl	800ce18 <FreeRTOS_FirstNetworkInterface>
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	e012      	b.n	8008dd6 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	7f1b      	ldrb	r3, [r3, #28]
 8008db4:	f003 0302 	and.w	r3, r3, #2
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d007      	beq.n	8008dce <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 f8d8 	bl	8009f74 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7f13      	ldrb	r3, [r2, #28]
 8008dc8:	f36f 0341 	bfc	r3, #1, #1
 8008dcc:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f004 f82e 	bl	800ce30 <FreeRTOS_NextNetworkInterface>
 8008dd4:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1e9      	bne.n	8008db0 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000fe0 	.word	0x20000fe0

08008de8 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008e04:	2301      	movs	r3, #1
 8008e06:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d10b      	bne.n	8008e26 <prvCallDHCP_RA_Handler+0x3e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	2000      	movs	r0, #0
 8008e22:	f003 fecd 	bl	800cbc0 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8008e34:	4b03      	ldr	r3, [pc, #12]	@ (8008e44 <FreeRTOS_GetIPTaskHandle+0x14>)
 8008e36:	681b      	ldr	r3, [r3, #0]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000fe4 	.word	0x20000fe4

08008e48 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 8008e60:	2101      	movs	r1, #1
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f002 fa7e 	bl	800b364 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8008e6e:	f043 0310 	orr.w	r3, r3, #16
 8008e72:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 8008e76:	2000      	movs	r0, #0
 8008e78:	f7f8 fc9a 	bl	80017b0 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 8008e7c:	f7fe f9ae 	bl	80071dc <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008e80:	f242 7010 	movw	r0, #10000	@ 0x2710
 8008e84:	f000 fe6a 	bl	8009b5c <vARPTimerReload>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9c8 	bl	8009234 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	4798      	blx	r3
    }
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	7f13      	ldrb	r3, [r2, #28]
 8008ee8:	f36f 0300 	bfc	r3, #0, #1
 8008eec:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008ef6:	f107 030c 	add.w	r3, r7, #12
 8008efa:	6979      	ldr	r1, [r7, #20]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f8df 	bl	80090c0 <xSendEventStructToIPTask>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d008      	beq.n	8008f1a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	7f13      	ldrb	r3, [r2, #28]
 8008f0c:	f043 0302 	orr.w	r3, r3, #2
 8008f10:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008f12:	4b06      	ldr	r3, [pc, #24]	@ (8008f2c <FreeRTOS_NetworkDown+0x54>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008f18:	e004      	b.n	8008f24 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	7f13      	ldrb	r3, [r2, #28]
 8008f1e:	f36f 0341 	bfc	r3, #1, #1
 8008f22:	7713      	strb	r3, [r2, #28]
}
 8008f24:	bf00      	nop
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20000fe0 	.word	0x20000fe0

08008f30 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8008f3a:	f003 ff6d 	bl	800ce18 <FreeRTOS_FirstNetworkInterface>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <FreeRTOS_IPInit_Multi+0x1e>
 8008f44:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008f48:	4823      	ldr	r0, [pc, #140]	@ (8008fd8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008f4a:	f7f8 fbfd 	bl	8001748 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8008f4e:	f001 f8cb 	bl	800a0e8 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8008f52:	2200      	movs	r2, #0
 8008f54:	2108      	movs	r1, #8
 8008f56:	2045      	movs	r0, #69	@ 0x45
 8008f58:	f7fa f822 	bl	8002fa0 <xQueueGenericCreate>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008f60:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8008f62:	4b1e      	ldr	r3, [pc, #120]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <FreeRTOS_IPInit_Multi+0x44>
 8008f6a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8008f6e:	481a      	ldr	r0, [pc, #104]	@ (8008fd8 <FreeRTOS_IPInit_Multi+0xa8>)
 8008f70:	f7f8 fbea 	bl	8001748 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008f74:	4b19      	ldr	r3, [pc, #100]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d025      	beq.n	8008fc8 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8008f7c:	4b17      	ldr	r3, [pc, #92]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4917      	ldr	r1, [pc, #92]	@ (8008fe0 <FreeRTOS_IPInit_Multi+0xb0>)
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fa fcf8 	bl	8003978 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008f88:	f00d fd8c 	bl	8016aa4 <xNetworkBuffersInitialise>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d10e      	bne.n	8008fb0 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8008f92:	f004 fc7f 	bl	800d894 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8008f96:	4b13      	ldr	r3, [pc, #76]	@ (8008fe4 <FreeRTOS_IPInit_Multi+0xb4>)
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	2304      	movs	r3, #4
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008fa4:	4910      	ldr	r1, [pc, #64]	@ (8008fe8 <FreeRTOS_IPInit_Multi+0xb8>)
 8008fa6:	4811      	ldr	r0, [pc, #68]	@ (8008fec <FreeRTOS_IPInit_Multi+0xbc>)
 8008fa8:	f7fa fd9c 	bl	8003ae4 <xTaskCreate>
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	e00e      	b.n	8008fce <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8008fb0:	480f      	ldr	r0, [pc, #60]	@ (8008ff0 <FreeRTOS_IPInit_Multi+0xc0>)
 8008fb2:	f018 fcf1 	bl	8021998 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008fb6:	4b09      	ldr	r3, [pc, #36]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fa fb9a 	bl	80036f4 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <FreeRTOS_IPInit_Multi+0xac>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e002      	b.n	8008fce <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8008fc8:	480a      	ldr	r0, [pc, #40]	@ (8008ff4 <FreeRTOS_IPInit_Multi+0xc4>)
 8008fca:	f018 fce5 	bl	8021998 <lUDPLoggingPrintf>
    }

    return xReturn;
 8008fce:	687b      	ldr	r3, [r7, #4]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	08024348 	.word	0x08024348
 8008fdc:	20000fd8 	.word	0x20000fd8
 8008fe0:	08024374 	.word	0x08024374
 8008fe4:	20000fe4 	.word	0x20000fe4
 8008fe8:	0802437c 	.word	0x0802437c
 8008fec:	08008b19 	.word	0x08008b19
 8008ff0:	08024384 	.word	0x08024384
 8008ff4:	080243c0 	.word	0x080243c0

08008ff8 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d023      	beq.n	8009054 <FreeRTOS_GetEndPointConfiguration+0x5c>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d11b      	bne.n	8009054 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d003      	beq.n	8009046 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af02      	add	r7, sp, #8
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800906e:	2000      	movs	r0, #0
 8009070:	f003 ff72 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8009074:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f7ff ffb6 	bl	8008ff8 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 800908c:	bf00      	nop
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f805 	bl	80090c0 <xSendEventStructToIPTask>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 80090ce:	f000 fb93 	bl	80097f8 <xIPIsNetworkTaskReady>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d107      	bne.n	80090e8 <xSendEventStructToIPTask+0x28>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f993 3000 	ldrsb.w	r3, [r3]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e035      	b.n	8009154 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f993 3000 	ldrsb.w	r3, [r3]
 80090f2:	2b06      	cmp	r3, #6
 80090f4:	d10c      	bne.n	8009110 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 80090f6:	2001      	movs	r0, #1
 80090f8:	f000 fd9e 	bl	8009c38 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 80090fc:	4b18      	ldr	r3, [pc, #96]	@ (8009160 <xSendEventStructToIPTask+0xa0>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa fabd 	bl	8003680 <uxQueueMessagesWaiting>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800910c:	2300      	movs	r3, #0
 800910e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d01c      	beq.n	8009150 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009116:	f000 ff15 	bl	8009f44 <xIsCallingFromIPTask>
 800911a:	4603      	mov	r3, r0
 800911c:	2b01      	cmp	r3, #1
 800911e:	d104      	bne.n	800912a <xSendEventStructToIPTask+0x6a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <xSendEventStructToIPTask+0xa0>)
 800912c:	6818      	ldr	r0, [r3, #0]
 800912e:	2300      	movs	r3, #0
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	f7f9 fffe 	bl	8003134 <xQueueGenericSend>
 8009138:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d109      	bne.n	8009154 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f993 3000 	ldrsb.w	r3, [r3]
 8009146:	4619      	mov	r1, r3
 8009148:	4806      	ldr	r0, [pc, #24]	@ (8009164 <xSendEventStructToIPTask+0xa4>)
 800914a:	f018 fc25 	bl	8021998 <lUDPLoggingPrintf>
 800914e:	e001      	b.n	8009154 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009154:	697b      	ldr	r3, [r7, #20]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	20000fd8 	.word	0x20000fd8
 8009164:	08024404 	.word	0x08024404

08009168 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
 8009186:	e032      	b.n	80091ee <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f003 ff81 	bl	800d098 <FreeRTOS_FindEndPointOnMAC>
 8009196:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d002      	beq.n	80091a4 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 800919e:	2301      	movs	r3, #1
 80091a0:	75fb      	strb	r3, [r7, #23]
 80091a2:	e024      	b.n	80091ee <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2206      	movs	r2, #6
 80091a8:	4619      	mov	r1, r3
 80091aa:	4820      	ldr	r0, [pc, #128]	@ (800922c <eConsiderFrameForProcessing+0xc4>)
 80091ac:	f019 fda5 	bl	8022cfa <memcmp>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 80091b6:	2301      	movs	r3, #1
 80091b8:	75fb      	strb	r3, [r7, #23]
 80091ba:	e018      	b.n	80091ee <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	2206      	movs	r2, #6
 80091c0:	4619      	mov	r1, r3
 80091c2:	481b      	ldr	r0, [pc, #108]	@ (8009230 <eConsiderFrameForProcessing+0xc8>)
 80091c4:	f019 fd99 	bl	8022cfa <memcmp>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 80091ce:	2301      	movs	r3, #1
 80091d0:	75fb      	strb	r3, [r7, #23]
 80091d2:	e00c      	b.n	80091ee <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b33      	cmp	r3, #51	@ 0x33
 80091da:	d106      	bne.n	80091ea <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 80091e0:	2b33      	cmp	r3, #51	@ 0x33
 80091e2:	d102      	bne.n	80091ea <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 80091e4:	2301      	movs	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
 80091e8:	e001      	b.n	80091ee <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d115      	bne.n	8009220 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	7b1a      	ldrb	r2, [r3, #12]
 80091f8:	7b5b      	ldrb	r3, [r3, #13]
 80091fa:	021b      	lsls	r3, r3, #8
 80091fc:	4313      	orrs	r3, r2
 80091fe:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009200:	897b      	ldrh	r3, [r7, #10]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b21a      	sxth	r2, r3
 8009206:	897b      	ldrh	r3, [r7, #10]
 8009208:	0a1b      	lsrs	r3, r3, #8
 800920a:	b29b      	uxth	r3, r3
 800920c:	b21b      	sxth	r3, r3
 800920e:	4313      	orrs	r3, r2
 8009210:	b21b      	sxth	r3, r3
 8009212:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009214:	897b      	ldrh	r3, [r7, #10]
 8009216:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800921a:	d801      	bhi.n	8009220 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800921c:	2300      	movs	r3, #0
 800921e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009220:	7dfb      	ldrb	r3, [r7, #23]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3718      	adds	r7, #24
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	08027034 	.word	0x08027034
 8009230:	08027024 	.word	0x08027024

08009234 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800923c:	2300      	movs	r3, #0
 800923e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d03d      	beq.n	80092c4 <prvProcessEthernetPacket+0x90>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924c:	2b00      	cmp	r3, #0
 800924e:	d039      	beq.n	80092c4 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009254:	2b0d      	cmp	r3, #13
 8009256:	d934      	bls.n	80092c2 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009260:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	b29b      	uxth	r3, r3
 8009268:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800926c:	4293      	cmp	r3, r2
 800926e:	d015      	beq.n	800929c <prvProcessEthernetPacket+0x68>
 8009270:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009274:	4293      	cmp	r3, r2
 8009276:	dc21      	bgt.n	80092bc <prvProcessEthernetPacket+0x88>
 8009278:	2b08      	cmp	r3, #8
 800927a:	d00f      	beq.n	800929c <prvProcessEthernetPacket+0x68>
 800927c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009280:	d11c      	bne.n	80092bc <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009286:	2b29      	cmp	r3, #41	@ 0x29
 8009288:	d905      	bls.n	8009296 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fc ffe6 	bl	800625c <eARPProcessPacket>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009294:	e016      	b.n	80092c4 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
                        break;
 800929a:	e013      	b.n	80092c4 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a0:	2b21      	cmp	r3, #33	@ 0x21
 80092a2:	d908      	bls.n	80092b6 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092a8:	6879      	ldr	r1, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f8c6 	bl	800943c <prvProcessIPPacket>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 80092b4:	e006      	b.n	80092c4 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
                    break;
 80092ba:	e003      	b.n	80092c4 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 80092c0:	e000      	b.n	80092c4 <prvProcessEthernetPacket+0x90>
            break;
 80092c2:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d00b      	beq.n	80092e2 <prvProcessEthernetPacket+0xae>
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	dc19      	bgt.n	8009302 <prvProcessEthernetPacket+0xce>
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d002      	beq.n	80092d8 <prvProcessEthernetPacket+0xa4>
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d019      	beq.n	800930a <prvProcessEthernetPacket+0xd6>
 80092d6:	e014      	b.n	8009302 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 80092d8:	2101      	movs	r1, #1
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9a4 	bl	8009628 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 80092e0:	e014      	b.n	800930c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 80092e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <prvProcessEthernetPacket+0xe0>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 80092ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009314 <prvProcessEthernetPacket+0xe0>)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 80092f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80092f4:	f000 fc06 	bl	8009b04 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 80092f8:	e008      	b.n	800930c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f00d fca4 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009300:	e004      	b.n	800930c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f00d fca0 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009308:	e000      	b.n	800930c <prvProcessEthernetPacket+0xd8>
            break;
 800930a:	bf00      	nop
    }
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20000fd4 	.word	0x20000fd4

08009318 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009318:	b5b0      	push	{r4, r5, r7, lr}
 800931a:	b08c      	sub	sp, #48	@ 0x30
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009320:	2300      	movs	r3, #0
 8009322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009326:	2300      	movs	r3, #0
 8009328:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	3322      	adds	r3, #34	@ 0x22
 8009334:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa76 	bl	8009828 <uxIPHeaderSizePacket>
 800933c:	4603      	mov	r3, r0
 800933e:	3316      	adds	r3, #22
 8009340:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	899b      	ldrh	r3, [r3, #12]
 8009346:	b29b      	uxth	r3, r3
 8009348:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800934c:	4293      	cmp	r3, r2
 800934e:	d105      	bne.n	800935c <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009354:	3336      	adds	r3, #54	@ 0x36
 8009356:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 800935c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935e:	889b      	ldrh	r3, [r3, #4]
 8009360:	b29b      	uxth	r3, r3
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	b21a      	sxth	r2, r3
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	889b      	ldrh	r3, [r3, #4]
 800936a:	b29b      	uxth	r3, r3
 800936c:	0a1b      	lsrs	r3, r3, #8
 800936e:	b29b      	uxth	r3, r3
 8009370:	b21b      	sxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b21b      	sxth	r3, r3
 8009376:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009378:	8b7b      	ldrh	r3, [r7, #26]
 800937a:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	899b      	ldrh	r3, [r3, #12]
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b08      	cmp	r3, #8
 8009384:	d11a      	bne.n	80093bc <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009386:	8b7c      	ldrh	r4, [r7, #26]
 8009388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938a:	8a1b      	ldrh	r3, [r3, #16]
 800938c:	b29b      	uxth	r3, r3
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	b21a      	sxth	r2, r3
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	8a1b      	ldrh	r3, [r3, #16]
 8009396:	b29b      	uxth	r3, r3
 8009398:	0a1b      	lsrs	r3, r3, #8
 800939a:	b29b      	uxth	r3, r3
 800939c:	b21b      	sxth	r3, r3
 800939e:	4313      	orrs	r3, r2
 80093a0:	b21b      	sxth	r3, r3
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	461d      	mov	r5, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa3e 	bl	8009828 <uxIPHeaderSizePacket>
 80093ac:	4603      	mov	r3, r0
 80093ae:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 80093b0:	429c      	cmp	r4, r3
 80093b2:	d903      	bls.n	80093bc <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80093ba:	e038      	b.n	800942e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d833      	bhi.n	800942e <prvProcessUDPPacket+0x116>
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b07      	cmp	r3, #7
 80093ca:	d930      	bls.n	800942e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	3b08      	subs	r3, #8
 80093da:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d904      	bls.n	80093ee <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	441a      	add	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 80093ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	f8d3 201a 	ldr.w	r2, [r3, #26]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	885b      	ldrh	r3, [r3, #2]
 8009406:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009408:	f107 0208 	add.w	r2, r7, #8
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f00c fe2a 	bl	8016068 <xProcessReceivedUDPPacket>
 8009414:	4603      	mov	r3, r0
 8009416:	2b01      	cmp	r3, #1
 8009418:	d103      	bne.n	8009422 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800941a:	2303      	movs	r3, #3
 800941c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009420:	e005      	b.n	800942e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d102      	bne.n	800942e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009428:	2304      	movs	r3, #4
 800942a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800942e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009432:	4618      	mov	r0, r3
 8009434:	3730      	adds	r7, #48	@ 0x30
 8009436:	46bd      	mov	sp, r7
 8009438:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800943c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009446:	2314      	movs	r3, #20
 8009448:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	330e      	adds	r3, #14
 8009456:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	899b      	ldrh	r3, [r3, #12]
 800945c:	b29b      	uxth	r3, r3
 800945e:	2b08      	cmp	r3, #8
 8009460:	d023      	beq.n	80094aa <prvProcessIPPacket+0x6e>
 8009462:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009466:	4293      	cmp	r3, r2
 8009468:	d144      	bne.n	80094f4 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	2b35      	cmp	r3, #53	@ 0x35
 8009470:	d802      	bhi.n	8009478 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009472:	2300      	movs	r3, #0
 8009474:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009476:	e043      	b.n	8009500 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	330e      	adds	r3, #14
 800947e:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8009480:	2328      	movs	r3, #40	@ 0x28
 8009482:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	799b      	ldrb	r3, [r3, #6]
 8009488:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	330e      	adds	r3, #14
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	4618      	mov	r0, r3
 8009494:	f001 fb6c 	bl	800ab70 <prvAllowIPPacketIPv6>
 8009498:	4603      	mov	r3, r0
 800949a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a0:	3b06      	subs	r3, #6
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	701a      	strb	r2, [r3, #0]
                break;
 80094a8:	e02a      	b.n	8009500 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80094b8:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094be:	3b0e      	subs	r3, #14
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d802      	bhi.n	80094cc <prvProcessIPPacket+0x90>
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2b13      	cmp	r3, #19
 80094ca:	d802      	bhi.n	80094d2 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 80094cc:	2300      	movs	r3, #0
 80094ce:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 80094d0:	e016      	b.n	8009500 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	7ddb      	ldrb	r3, [r3, #23]
 80094d6:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 f81b 	bl	800a518 <prvAllowIPPacketIPv4>
 80094e2:	4603      	mov	r3, r0
 80094e4:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ea:	3b06      	subs	r3, #6
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	7812      	ldrb	r2, [r2, #0]
 80094f0:	701a      	strb	r2, [r3, #0]
                   break;
 80094f2:	e005      	b.n	8009500 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 80094f4:	2300      	movs	r3, #0
 80094f6:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 80094f8:	484a      	ldr	r0, [pc, #296]	@ (8009624 <prvProcessIPPacket+0x1e8>)
 80094fa:	f018 fa4d 	bl	8021998 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 80094fe:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009500:	7ffb      	ldrb	r3, [r7, #31]
 8009502:	2b01      	cmp	r3, #1
 8009504:	f040 8088 	bne.w	8009618 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	899b      	ldrh	r3, [r3, #12]
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b08      	cmp	r3, #8
 8009510:	d004      	beq.n	800951c <prvProcessIPPacket+0xe0>
 8009512:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009516:	4293      	cmp	r3, r2
 8009518:	d009      	beq.n	800952e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800951a:	e020      	b.n	800955e <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	2b14      	cmp	r3, #20
 8009520:	d91a      	bls.n	8009558 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009522:	6838      	ldr	r0, [r7, #0]
 8009524:	f001 f852 	bl	800a5cc <prvCheckIP4HeaderOptions>
 8009528:	4603      	mov	r3, r0
 800952a:	77fb      	strb	r3, [r7, #31]
                    break;
 800952c:	e014      	b.n	8009558 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f001 fb3a 	bl	800abac <xGetExtensionOrder>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd0e      	ble.n	800955c <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800953e:	2101      	movs	r1, #1
 8009540:	6838      	ldr	r0, [r7, #0]
 8009542:	f001 fb99 	bl	800ac78 <eHandleIPv6ExtensionHeaders>
 8009546:	4603      	mov	r3, r0
 8009548:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800954a:	7ffb      	ldrb	r3, [r7, #31]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	799b      	ldrb	r3, [r3, #6]
 8009554:	75fb      	strb	r3, [r7, #23]
                    break;
 8009556:	e001      	b.n	800955c <prvProcessIPPacket+0x120>
                    break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <prvProcessIPPacket+0x122>
                    break;
 800955c:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800955e:	7ffb      	ldrb	r3, [r7, #31]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d059      	beq.n	8009618 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	2b11      	cmp	r3, #17
 8009568:	d026      	beq.n	80095b8 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800956a:	6838      	ldr	r0, [r7, #0]
 800956c:	f7fd f918 	bl	80067a0 <xCheckRequiresARPResolution>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	d102      	bne.n	800957c <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009576:	2304      	movs	r3, #4
 8009578:	77fb      	strb	r3, [r7, #31]
 800957a:	e01d      	b.n	80095b8 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	899b      	ldrh	r3, [r3, #12]
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b08      	cmp	r3, #8
 8009584:	d00e      	beq.n	80095a4 <prvProcessIPPacket+0x168>
 8009586:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800958a:	4293      	cmp	r3, r2
 800958c:	d113      	bne.n	80095b6 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	1d98      	adds	r0, r3, #6
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f103 0108 	add.w	r1, r3, #8
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959c:	461a      	mov	r2, r3
 800959e:	f002 f843 	bl	800b628 <vNDRefreshCacheEntry>
                                break;
 80095a2:	e009      	b.n	80095b8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	1d9a      	adds	r2, r3, #6
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fd f9d6 	bl	8006960 <vARPRefreshCacheEntryAge>
                                break;
 80095b4:	e000      	b.n	80095b8 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80095b6:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 80095b8:	7ffb      	ldrb	r3, [r7, #31]
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d02c      	beq.n	8009618 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80095c2:	d010      	beq.n	80095e6 <prvProcessIPPacket+0x1aa>
 80095c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80095c6:	dc23      	bgt.n	8009610 <prvProcessIPPacket+0x1d4>
 80095c8:	2b11      	cmp	r3, #17
 80095ca:	d012      	beq.n	80095f2 <prvProcessIPPacket+0x1b6>
 80095cc:	2b11      	cmp	r3, #17
 80095ce:	dc1f      	bgt.n	8009610 <prvProcessIPPacket+0x1d4>
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d002      	beq.n	80095da <prvProcessIPPacket+0x19e>
 80095d4:	2b06      	cmp	r3, #6
 80095d6:	d012      	beq.n	80095fe <prvProcessIPPacket+0x1c2>
 80095d8:	e01a      	b.n	8009610 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 80095da:	6838      	ldr	r0, [r7, #0]
 80095dc:	f7ff f9fe 	bl	80089dc <ProcessICMPPacket>
 80095e0:	4603      	mov	r3, r0
 80095e2:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 80095e4:	e018      	b.n	8009618 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 80095e6:	6838      	ldr	r0, [r7, #0]
 80095e8:	f002 fb6e 	bl	800bcc8 <prvProcessICMPMessage_IPv6>
 80095ec:	4603      	mov	r3, r0
 80095ee:	77fb      	strb	r3, [r7, #31]
                            break;
 80095f0:	e012      	b.n	8009618 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 80095f2:	6838      	ldr	r0, [r7, #0]
 80095f4:	f7ff fe90 	bl	8009318 <prvProcessUDPPacket>
 80095f8:	4603      	mov	r3, r0
 80095fa:	77fb      	strb	r3, [r7, #31]
                        break;
 80095fc:	e00c      	b.n	8009618 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 80095fe:	6838      	ldr	r0, [r7, #0]
 8009600:	f007 fda0 	bl	8011144 <xProcessReceivedTCPPacket>
 8009604:	4603      	mov	r3, r0
 8009606:	2b01      	cmp	r3, #1
 8009608:	d105      	bne.n	8009616 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800960a:	2303      	movs	r3, #3
 800960c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800960e:	e002      	b.n	8009616 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009610:	2300      	movs	r3, #0
 8009612:	77fb      	strb	r3, [r7, #31]
                        break;
 8009614:	e000      	b.n	8009618 <prvProcessIPPacket+0x1dc>
                                break;
 8009616:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009618:	7ffb      	ldrb	r3, [r7, #31]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3720      	adds	r7, #32
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08024430 	.word	0x08024430

08009628 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08e      	sub	sp, #56	@ 0x38
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009636:	2b3b      	cmp	r3, #59	@ 0x3b
 8009638:	d818      	bhi.n	800966c <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800963e:	4619      	mov	r1, r3
 8009640:	486a      	ldr	r0, [pc, #424]	@ (80097ec <vReturnEthernetFrame+0x1c4>)
 8009642:	f018 f9a9 	bl	8021998 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964a:	637b      	str	r3, [r7, #52]	@ 0x34
 800964c:	e008      	b.n	8009660 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009654:	4413      	add	r3, r2
 8009656:	2200      	movs	r2, #0
 8009658:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800965a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800965c:	3301      	adds	r3, #1
 800965e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	2b3b      	cmp	r3, #59	@ 0x3b
 8009664:	ddf3      	ble.n	800964e <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	223c      	movs	r2, #60	@ 0x3c
 800966a:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d111      	bne.n	8009696 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fb87 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 800967e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8009680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009686:	2301      	movs	r3, #1
 8009688:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800968e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009690:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 80a3 	beq.w	80097e4 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d12f      	bne.n	8009714 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 80096b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b6:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80096ba:	061a      	lsls	r2, r3, #24
 80096bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096be:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096c8:	431a      	orrs	r2, r3
 80096ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096cc:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80096d0:	0a1b      	lsrs	r3, r3, #8
 80096d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80096d6:	431a      	orrs	r2, r3
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80096de:	0e1b      	lsrs	r3, r3, #24
 80096e0:	4313      	orrs	r3, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	4842      	ldr	r0, [pc, #264]	@ (80097f0 <vReturnEthernetFrame+0x1c8>)
 80096e6:	f018 f957 	bl	8021998 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ee:	899b      	ldrh	r3, [r3, #12]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d003      	beq.n	80096fe <vReturnEthernetFrame+0xd6>
 80096f6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80096fa:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 80096fc:	e00a      	b.n	8009714 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 80096fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009700:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009704:	2107      	movs	r1, #7
 8009706:	4618      	mov	r0, r3
 8009708:	f003 fcfe 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009712:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009718:	2b00      	cmp	r3, #0
 800971a:	d063      	beq.n	80097e4 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009720:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	899b      	ldrh	r3, [r3, #12]
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b08      	cmp	r3, #8
 800972e:	d11c      	bne.n	800976a <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009736:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800973e:	f107 0114 	add.w	r1, r7, #20
 8009742:	f107 0310 	add.w	r3, r7, #16
 8009746:	4618      	mov	r0, r3
 8009748:	f7fd fa54 	bl	8006bf4 <eARPGetCacheEntry>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8009752:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009756:	2b01      	cmp	r3, #1
 8009758:	d103      	bne.n	8009762 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800975a:	f107 0314 	add.w	r3, r7, #20
 800975e:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009760:	e007      	b.n	8009772 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009764:	3306      	adds	r3, #6
 8009766:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8009768:	e003      	b.n	8009772 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800976a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976c:	3306      	adds	r3, #6
 800976e:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8009770:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009774:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009776:	2206      	movs	r2, #6
 8009778:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800977a:	69f8      	ldr	r0, [r7, #28]
 800977c:	f018 fb28 	bl	8021dd0 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009784:	33e8      	adds	r3, #232	@ 0xe8
 8009786:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800978a:	3306      	adds	r3, #6
 800978c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800978e:	2206      	movs	r2, #6
 8009790:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009792:	69f8      	ldr	r0, [r7, #28]
 8009794:	f018 fb1c 	bl	8021dd0 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009798:	f000 fbd4 	bl	8009f44 <xIsCallingFromIPTask>
 800979c:	4603      	mov	r3, r0
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d106      	bne.n	80097b0 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	6879      	ldr	r1, [r7, #4]
 80097aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097ac:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 80097ae:	e019      	b.n	80097e4 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d011      	beq.n	80097da <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 80097b6:	2302      	movs	r3, #2
 80097b8:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80097be:	f107 0308 	add.w	r3, r7, #8
 80097c2:	f04f 31ff 	mov.w	r1, #4294967295
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff fc7a 	bl	80090c0 <xSendEventStructToIPTask>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d108      	bne.n	80097e4 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f00d fa38 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
}
 80097d8:	e004      	b.n	80097e4 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 80097da:	f640 019f 	movw	r1, #2207	@ 0x89f
 80097de:	4805      	ldr	r0, [pc, #20]	@ (80097f4 <vReturnEthernetFrame+0x1cc>)
 80097e0:	f7f7 ffb2 	bl	8001748 <vAssertCalled>
}
 80097e4:	bf00      	nop
 80097e6:	3738      	adds	r7, #56	@ 0x38
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	0802445c 	.word	0x0802445c
 80097f0:	08024480 	.word	0x08024480
 80097f4:	08024348 	.word	0x08024348

080097f8 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 80097fc:	4b03      	ldr	r3, [pc, #12]	@ (800980c <xIPIsNetworkTaskReady+0x14>)
 80097fe:	681b      	ldr	r3, [r3, #0]
}
 8009800:	4618      	mov	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20000fe8 	.word	0x20000fe8

08009810 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009810:	b480      	push	{r7}
 8009812:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009814:	4b03      	ldr	r3, [pc, #12]	@ (8009824 <uxGetMinimumIPQueueSpace+0x14>)
 8009816:	681b      	ldr	r3, [r3, #0]
    }
 8009818:	4618      	mov	r0, r3
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	20000014 	.word	0x20000014

08009828 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009834:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	899b      	ldrh	r3, [r3, #12]
 800983a:	b29b      	uxth	r3, r3
 800983c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009840:	4293      	cmp	r3, r2
 8009842:	d102      	bne.n	800984a <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009844:	2328      	movs	r3, #40	@ 0x28
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	e001      	b.n	800984e <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800984a:	2314      	movs	r3, #20
 800984c:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800984e:	68fb      	ldr	r3, [r7, #12]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <uxIPHeaderSizeSocket+0x22>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	7a1b      	ldrb	r3, [r3, #8]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009878:	2328      	movs	r3, #40	@ 0x28
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	e001      	b.n	8009882 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800987e:	2314      	movs	r3, #20
 8009880:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009882:	68fb      	ldr	r3, [r7, #12]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009896:	f242 7310 	movw	r3, #10000	@ 0x2710
 800989a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800989c:	4b28      	ldr	r3, [pc, #160]	@ (8009940 <xCalculateSleepTime+0xb0>)
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d007      	beq.n	80098ba <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 80098aa:	4b25      	ldr	r3, [pc, #148]	@ (8009940 <xCalculateSleepTime+0xb0>)
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d902      	bls.n	80098ba <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 80098b4:	4b22      	ldr	r3, [pc, #136]	@ (8009940 <xCalculateSleepTime+0xb0>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80098ba:	4b22      	ldr	r3, [pc, #136]	@ (8009944 <xCalculateSleepTime+0xb4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 80098c0:	e015      	b.n	80098ee <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d009      	beq.n	80098e6 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d903      	bls.n	80098e6 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80098e4:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80098ec:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1e6      	bne.n	80098c2 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 80098f4:	4b14      	ldr	r3, [pc, #80]	@ (8009948 <xCalculateSleepTime+0xb8>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d007      	beq.n	8009912 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009902:	4b11      	ldr	r3, [pc, #68]	@ (8009948 <xCalculateSleepTime+0xb8>)
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	429a      	cmp	r2, r3
 800990a:	d902      	bls.n	8009912 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800990c:	4b0e      	ldr	r3, [pc, #56]	@ (8009948 <xCalculateSleepTime+0xb8>)
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009912:	4b0e      	ldr	r3, [pc, #56]	@ (800994c <xCalculateSleepTime+0xbc>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d007      	beq.n	8009930 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009920:	4b0a      	ldr	r3, [pc, #40]	@ (800994c <xCalculateSleepTime+0xbc>)
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	429a      	cmp	r2, r3
 8009928:	d902      	bls.n	8009930 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800992a:	4b08      	ldr	r3, [pc, #32]	@ (800994c <xCalculateSleepTime+0xbc>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009930:	687b      	ldr	r3, [r7, #4]
}
 8009932:	4618      	mov	r0, r3
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
 800993e:	bf00      	nop
 8009940:	20001004 	.word	0x20001004
 8009944:	20001360 	.word	0x20001360
 8009948:	20001018 	.word	0x20001018
 800994c:	2000102c 	.word	0x2000102c

08009950 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009956:	484f      	ldr	r0, [pc, #316]	@ (8009a94 <vCheckNetworkTimers+0x144>)
 8009958:	f000 f932 	bl	8009bc0 <prvIPTimerCheck>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009962:	2003      	movs	r0, #3
 8009964:	f7ff fb96 	bl	8009094 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009968:	484b      	ldr	r0, [pc, #300]	@ (8009a98 <vCheckNetworkTimers+0x148>)
 800996a:	f000 f929 	bl	8009bc0 <prvIPTimerCheck>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009974:	4b49      	ldr	r3, [pc, #292]	@ (8009a9c <vCheckNetworkTimers+0x14c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800997c:	2000      	movs	r0, #0
 800997e:	f000 f995 	bl	8009cac <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009982:	4b46      	ldr	r3, [pc, #280]	@ (8009a9c <vCheckNetworkTimers+0x14c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f00d f95e 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800998c:	4b43      	ldr	r3, [pc, #268]	@ (8009a9c <vCheckNetworkTimers+0x14c>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009992:	4b43      	ldr	r3, [pc, #268]	@ (8009aa0 <vCheckNetworkTimers+0x150>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009998:	e01f      	b.n	80099da <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	33f8      	adds	r3, #248	@ 0xf8
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f90e 	bl	8009bc0 <prvIPTimerCheck>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d013      	beq.n	80099d2 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00b      	beq.n	80099d2 <vCheckNetworkTimers+0x82>
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099c0:	f003 0302 	and.w	r3, r3, #2
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 80099ca:	6939      	ldr	r1, [r7, #16]
 80099cc:	2000      	movs	r0, #0
 80099ce:	f003 f8f7 	bl	800cbc0 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80099d8:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1dc      	bne.n	800999a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 80099e0:	4830      	ldr	r0, [pc, #192]	@ (8009aa4 <vCheckNetworkTimers+0x154>)
 80099e2:	f000 f8ed 	bl	8009bc0 <prvIPTimerCheck>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7fd fff9 	bl	80079e4 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 80099f2:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa8 <vCheckNetworkTimers+0x158>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7f9 fe42 	bl	8003680 <uxQueueMessagesWaiting>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d102      	bne.n	8009a08 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009a02:	2301      	movs	r3, #1
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	e001      	b.n	8009a0c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009a0c:	4827      	ldr	r0, [pc, #156]	@ (8009aac <vCheckNetworkTimers+0x15c>)
 8009a0e:	f000 f8d7 	bl	8009bc0 <prvIPTimerCheck>
 8009a12:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d007      	beq.n	8009a34 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f005 ff3f 	bl	800f8a8 <xTCPTimerCheck>
 8009a2a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	481f      	ldr	r0, [pc, #124]	@ (8009aac <vCheckNetworkTimers+0x15c>)
 8009a30:	f000 f844 	bl	8009abc <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009a34:	2000      	movs	r0, #0
 8009a36:	f006 fe6f 	bl	8010718 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f006 fe88 	bl	8010750 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009a40:	4b1b      	ldr	r3, [pc, #108]	@ (8009ab0 <vCheckNetworkTimers+0x160>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d120      	bne.n	8009a8a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009a48:	481a      	ldr	r0, [pc, #104]	@ (8009ab4 <vCheckNetworkTimers+0x164>)
 8009a4a:	f000 f8b9 	bl	8009bc0 <prvIPTimerCheck>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01a      	beq.n	8009a8a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009a58:	4b17      	ldr	r3, [pc, #92]	@ (8009ab8 <vCheckNetworkTimers+0x168>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e00e      	b.n	8009a7e <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	7f1b      	ldrb	r3, [r3, #28]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d104      	bne.n	8009a78 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009a72:	6978      	ldr	r0, [r7, #20]
 8009a74:	f7ff fa30 	bl	8008ed8 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1ed      	bne.n	8009a60 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f971 	bl	8009d6c <vSetAllNetworksUp>
        }
    }
}
 8009a8a:	bf00      	nop
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20001004 	.word	0x20001004
 8009a98:	20000ff0 	.word	0x20000ff0
 8009a9c:	20000fd4 	.word	0x20000fd4
 8009aa0:	20001360 	.word	0x20001360
 8009aa4:	2000102c 	.word	0x2000102c
 8009aa8:	20000fd8 	.word	0x20000fd8
 8009aac:	20001018 	.word	0x20001018
 8009ab0:	20000fec 	.word	0x20000fec
 8009ab4:	20001040 	.word	0x20001040
 8009ab8:	20001364 	.word	0x20001364

08009abc <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3304      	adds	r3, #4
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fa febe 	bl	800484c <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7813      	ldrb	r3, [r2, #0]
 8009ae0:	f043 0302 	orr.w	r3, r3, #2
 8009ae4:	7013      	strb	r3, [r2, #0]
 8009ae6:	e004      	b.n	8009af2 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7813      	ldrb	r3, [r2, #0]
 8009aec:	f36f 0341 	bfc	r3, #1, #1
 8009af0:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	7813      	ldrb	r3, [r2, #0]
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	7013      	strb	r3, [r2, #0]
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 8009b0c:	6879      	ldr	r1, [r7, #4]
 8009b0e:	4803      	ldr	r0, [pc, #12]	@ (8009b1c <vIPTimerStartARPResolution+0x18>)
 8009b10:	f7ff ffd4 	bl	8009abc <prvIPTimerStart>
}
 8009b14:	bf00      	nop
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20000ff0 	.word	0x20000ff0

08009b20 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff ffc2 	bl	8009abc <prvIPTimerStart>
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	4803      	ldr	r0, [pc, #12]	@ (8009b58 <vTCPTimerReload+0x18>)
 8009b4c:	f7ff ffe8 	bl	8009b20 <prvIPTimerReload>
    }
 8009b50:	bf00      	nop
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20001018 	.word	0x20001018

08009b5c <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4803      	ldr	r0, [pc, #12]	@ (8009b74 <vARPTimerReload+0x18>)
 8009b68:	f7ff ffda 	bl	8009b20 <prvIPTimerReload>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20001004 	.word	0x20001004

08009b78 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	4806      	ldr	r0, [pc, #24]	@ (8009ba0 <vDHCP_RATimerReload+0x28>)
 8009b86:	f017 ff07 	bl	8021998 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	33f8      	adds	r3, #248	@ 0xf8
 8009b8e:	6839      	ldr	r1, [r7, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff ffc5 	bl	8009b20 <prvIPTimerReload>
    }
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	080244b4 	.word	0x080244b4

08009ba4 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 8009bac:	6879      	ldr	r1, [r7, #4]
 8009bae:	4803      	ldr	r0, [pc, #12]	@ (8009bbc <vNetworkTimerReload+0x18>)
 8009bb0:	f7ff ffb6 	bl	8009b20 <prvIPTimerReload>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20001040 	.word	0x20001040

08009bc0 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	e028      	b.n	8009c2e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10f      	bne.n	8009c0a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	1d1a      	adds	r2, r3, #4
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	330c      	adds	r3, #12
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	f7fa fe61 	bl	80048bc <xTaskCheckForTimeOut>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d004      	beq.n	8009c0a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	7813      	ldrb	r3, [r2, #0]
 8009c04:	f043 0302 	orr.w	r3, r3, #2
 8009c08:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d008      	beq.n	8009c2a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7ff ff4c 	bl	8009abc <prvIPTimerStart>
            xReturn = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e001      	b.n	8009c2e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 8009c40:	4a0c      	ldr	r2, [pc, #48]	@ (8009c74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009c42:	7813      	ldrb	r3, [r2, #0]
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 8009c50:	4a08      	ldr	r2, [pc, #32]	@ (8009c74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009c52:	7813      	ldrb	r3, [r2, #0]
 8009c54:	f043 0302 	orr.w	r3, r3, #2
 8009c58:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 8009c5a:	e004      	b.n	8009c66 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 8009c5c:	4a05      	ldr	r2, [pc, #20]	@ (8009c74 <vIPSetTCPTimerExpiredState+0x3c>)
 8009c5e:	7813      	ldrb	r3, [r2, #0]
 8009c60:	f36f 0341 	bfc	r3, #1, #1
 8009c64:	7013      	strb	r3, [r2, #0]
    }
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	20001018 	.word	0x20001018

08009c78 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009c86:	4a08      	ldr	r2, [pc, #32]	@ (8009ca8 <vIPSetARPTimerEnableState+0x30>)
 8009c88:	7813      	ldrb	r3, [r2, #0]
 8009c8a:	f043 0301 	orr.w	r3, r3, #1
 8009c8e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009c90:	e004      	b.n	8009c9c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009c92:	4a05      	ldr	r2, [pc, #20]	@ (8009ca8 <vIPSetARPTimerEnableState+0x30>)
 8009c94:	7813      	ldrb	r3, [r2, #0]
 8009c96:	f36f 0300 	bfc	r3, #0, #1
 8009c9a:	7013      	strb	r3, [r2, #0]
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20001004 	.word	0x20001004

08009cac <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 8009cba:	4a08      	ldr	r2, [pc, #32]	@ (8009cdc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009cbc:	7813      	ldrb	r3, [r2, #0]
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009cc4:	e004      	b.n	8009cd0 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009cc6:	4a05      	ldr	r2, [pc, #20]	@ (8009cdc <vIPSetARPResolutionTimerEnableState+0x30>)
 8009cc8:	7813      	ldrb	r3, [r2, #0]
 8009cca:	f36f 0300 	bfc	r3, #0, #1
 8009cce:	7013      	strb	r3, [r2, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	20000ff0 	.word	0x20000ff0

08009ce0 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <vIPSetDHCP_RATimerEnableState+0x14>
 8009cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8009d2c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009cf2:	e000      	b.n	8009cf6 <vIPSetDHCP_RATimerEnableState+0x16>
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d30 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	480e      	ldr	r0, [pc, #56]	@ (8009d34 <vIPSetDHCP_RATimerEnableState+0x54>)
 8009cfa:	f017 fe4d 	bl	8021998 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009d0a:	f043 0301 	orr.w	r3, r3, #1
 8009d0e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009d12:	e006      	b.n	8009d22 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 8009d1a:	f36f 0300 	bfc	r3, #0, #1
 8009d1e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	080244d0 	.word	0x080244d0
 8009d30:	080244d4 	.word	0x080244d4
 8009d34:	080244d8 	.word	0x080244d8

08009d38 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d005      	beq.n	8009d52 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 8009d46:	4a08      	ldr	r2, [pc, #32]	@ (8009d68 <vIPSetDNSTimerEnableState+0x30>)
 8009d48:	7813      	ldrb	r3, [r2, #0]
 8009d4a:	f043 0301 	orr.w	r3, r3, #1
 8009d4e:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009d50:	e004      	b.n	8009d5c <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 8009d52:	4a05      	ldr	r2, [pc, #20]	@ (8009d68 <vIPSetDNSTimerEnableState+0x30>)
 8009d54:	7813      	ldrb	r3, [r2, #0]
 8009d56:	f36f 0300 	bfc	r3, #0, #1
 8009d5a:	7013      	strb	r3, [r2, #0]
    }
 8009d5c:	bf00      	nop
 8009d5e:	370c      	adds	r7, #12
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	2000102c 	.word	0x2000102c

08009d6c <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 8009d74:	4a04      	ldr	r2, [pc, #16]	@ (8009d88 <vSetAllNetworksUp+0x1c>)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6013      	str	r3, [r2, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20000fec 	.word	0x20000fec

08009d8c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	6838      	ldr	r0, [r7, #0]
 8009d9e:	f00c feeb 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 8009da2:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d03e      	beq.n	8009e28 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d104      	bne.n	8009dbc <pxDuplicateNetworkBufferWithDescriptor+0x30>
 8009db2:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8009db6:	481f      	ldr	r0, [pc, #124]	@ (8009e34 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 8009db8:	f7f7 fcc6 	bl	8001748 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d902      	bls.n	8009dcc <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dca:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695a      	ldr	r2, [r3, #20]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4619      	mov	r1, r3
 8009e06:	f017 ffe3 	bl	8021dd0 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8009e0a:	68b8      	ldr	r0, [r7, #8]
 8009e0c:	f7ff fd0c 	bl	8009828 <uxIPHeaderSizePacket>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b28      	cmp	r3, #40	@ 0x28
 8009e14:	d108      	bne.n	8009e28 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f103 0014 	add.w	r0, r3, #20
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3314      	adds	r3, #20
 8009e20:	2210      	movs	r2, #16
 8009e22:	4619      	mov	r1, r3
 8009e24:	f017 ffd4 	bl	8021dd0 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 8009e28:	68bb      	ldr	r3, [r7, #8]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	080244fc 	.word	0x080244fc

08009e38 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e013      	b.n	8009e76 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f816 	bl	8009e80 <void_ptr_to_uintptr>
 8009e54:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	3b0a      	subs	r3, #10
 8009e5e:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d103      	bne.n	8009e72 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	e001      	b.n	8009e76 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 8009e76:	68fb      	ldr	r3, [r7, #12]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff ffc7 	bl	8009e38 <prvPacketBuffer_to_NetworkBuffer>
 8009eaa:	4603      	mov	r3, r0
    }
 8009eac:	4618      	mov	r0, r3
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b088      	sub	sp, #32
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	e033      	b.n	8009f30 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ffd9 	bl	8009e80 <void_ptr_to_uintptr>
 8009ece:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	3b30      	subs	r3, #48	@ 0x30
 8009ed4:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	f023 030f 	bic.w	r3, r3, #15
 8009ee2:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	2b40      	cmp	r3, #64	@ 0x40
 8009ee8:	d002      	beq.n	8009ef0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	2b60      	cmp	r3, #96	@ 0x60
 8009eee:	d101      	bne.n	8009ef4 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d104      	bne.n	8009f04 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 8009efa:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8009efe:	480f      	ldr	r0, [pc, #60]	@ (8009f3c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009f00:	f7f7 fc22 	bl	8001748 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	2b40      	cmp	r3, #64	@ 0x40
 8009f08:	d004      	beq.n	8009f14 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 8009f0a:	2b60      	cmp	r3, #96	@ 0x60
 8009f0c:	d105      	bne.n	8009f1a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 8009f0e:	233e      	movs	r3, #62	@ 0x3e
 8009f10:	61bb      	str	r3, [r7, #24]
                    break;
 8009f12:	e008      	b.n	8009f26 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009f14:	232a      	movs	r3, #42	@ 0x2a
 8009f16:	61bb      	str	r3, [r7, #24]
                    break;
 8009f18:	e005      	b.n	8009f26 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 8009f1a:	4809      	ldr	r0, [pc, #36]	@ (8009f40 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 8009f1c:	f017 fd3c 	bl	8021998 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009f20:	232a      	movs	r3, #42	@ 0x2a
 8009f22:	61bb      	str	r3, [r7, #24]
                break;
 8009f24:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009f26:	69b9      	ldr	r1, [r7, #24]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff85 	bl	8009e38 <prvPacketBuffer_to_NetworkBuffer>
 8009f2e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 8009f30:	69fb      	ldr	r3, [r7, #28]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	080244fc 	.word	0x080244fc
 8009f40:	080245d4 	.word	0x080245d4

08009f44 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 8009f4a:	f7fa fdd1 	bl	8004af0 <xTaskGetCurrentTaskHandle>
 8009f4e:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 8009f50:	f7fe ff6e 	bl	8008e30 <FreeRTOS_GetIPTaskHandle>
 8009f54:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d102      	bne.n	8009f64 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e001      	b.n	8009f68 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009f68:	68fb      	ldr	r3, [r7, #12]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <prvProcessNetworkDownEvent+0x18>
 8009f82:	f240 3137 	movw	r1, #823	@ 0x337
 8009f86:	4857      	ldr	r0, [pc, #348]	@ (800a0e4 <prvProcessNetworkDownEvent+0x170>)
 8009f88:	f7f7 fbde 	bl	8001748 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <prvProcessNetworkDownEvent+0x2a>
 8009f94:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8009f98:	4852      	ldr	r0, [pc, #328]	@ (800a0e4 <prvProcessNetworkDownEvent+0x170>)
 8009f9a:	f7f7 fbd5 	bl	8001748 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f7ff fe6a 	bl	8009c78 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f002 ffd7 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	e041      	b.n	800a032 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009fb4:	f36f 1304 	bfc	r3, #4, #1
 8009fb8:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 8009fcc:	2100      	movs	r1, #0
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f001 f9c8 	bl	800b364 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009fda:	f003 0308 	and.w	r3, r3, #8
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 8009fe4:	2001      	movs	r0, #1
 8009fe6:	f7f7 fbe3 	bl	80017b0 <vApplicationIPNetworkEventHook>
 8009fea:	e006      	b.n	8009ffa <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009ff2:	f043 0308 	orr.w	r3, r3, #8
 8009ff6:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7fd f8c0 	bl	8007180 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00b      	beq.n	800a028 <prvProcessNetworkDownEvent+0xb4>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d003      	beq.n	800a028 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800a020:	2100      	movs	r1, #0
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fe5c 	bl	8009ce0 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f002 ffb6 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800a030:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1ba      	bne.n	8009fae <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
 800a040:	4603      	mov	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d147      	bne.n	800a0d6 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	7f13      	ldrb	r3, [r2, #28]
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f002 ff81 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	e039      	b.n	800a0ce <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00c      	beq.n	800a084 <prvProcessNetworkDownEvent+0x110>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d004      	beq.n	800a084 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	2001      	movs	r0, #1
 800a07e:	f002 fd9f 	bl	800cbc0 <vRAProcess>
 800a082:	e01f      	b.n	800a0c4 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a08a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <prvProcessNetworkDownEvent+0x126>
 800a094:	2b01      	cmp	r3, #1
 800a096:	d008      	beq.n	800a0aa <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a098:	e011      	b.n	800a0be <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	331c      	adds	r3, #28
 800a0a0:	221c      	movs	r2, #28
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f017 fe94 	bl	8021dd0 <memcpy>
                            break;
 800a0a8:	e009      	b.n	800a0be <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3390      	adds	r3, #144	@ 0x90
 800a0b4:	2258      	movs	r2, #88	@ 0x58
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f017 fe8a 	bl	8021dd0 <memcpy>
                            break;
 800a0bc:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7fe fec2 	bl	8008e48 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 ff68 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800a0cc:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1c2      	bne.n	800a05a <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a0d4:	e002      	b.n	800a0dc <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	f7ff fe48 	bl	8009d6c <vSetAllNetworksUp>
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	080244fc 	.word	0x080244fc

0800a0e8 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a0ee:	f7ff fb83 	bl	80097f8 <xIPIsNetworkTaskReady>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <vPreCheckConfigs+0x1a>
 800a0f8:	f240 31db 	movw	r1, #987	@ 0x3db
 800a0fc:	4831      	ldr	r0, [pc, #196]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a0fe:	f7f7 fb23 	bl	8001748 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a102:	4b31      	ldr	r3, [pc, #196]	@ (800a1c8 <vPreCheckConfigs+0xe0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <vPreCheckConfigs+0x2c>
 800a10a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a10e:	482d      	ldr	r0, [pc, #180]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a110:	f7f7 fb1a 	bl	8001748 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a114:	f7fe fe8c 	bl	8008e30 <FreeRTOS_GetIPTaskHandle>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d004      	beq.n	800a128 <vPreCheckConfigs+0x40>
 800a11e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a122:	4828      	ldr	r0, [pc, #160]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a124:	f7f7 fb10 	bl	8001748 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a128:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a12c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a134:	4293      	cmp	r3, r2
 800a136:	d804      	bhi.n	800a142 <vPreCheckConfigs+0x5a>
 800a138:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a13c:	4821      	ldr	r0, [pc, #132]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a13e:	f7f7 fb03 	bl	8001748 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a142:	230e      	movs	r3, #14
 800a144:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b0e      	cmp	r3, #14
 800a14a:	d004      	beq.n	800a156 <vPreCheckConfigs+0x6e>
 800a14c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a150:	481c      	ldr	r0, [pc, #112]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a152:	f7f7 faf9 	bl	8001748 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a156:	231c      	movs	r3, #28
 800a158:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b1c      	cmp	r3, #28
 800a15e:	d004      	beq.n	800a16a <vPreCheckConfigs+0x82>
 800a160:	f240 4102 	movw	r1, #1026	@ 0x402
 800a164:	4817      	ldr	r0, [pc, #92]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a166:	f7f7 faef 	bl	8001748 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a16a:	2314      	movs	r3, #20
 800a16c:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b14      	cmp	r3, #20
 800a172:	d004      	beq.n	800a17e <vPreCheckConfigs+0x96>
 800a174:	f240 4105 	movw	r1, #1029	@ 0x405
 800a178:	4812      	ldr	r0, [pc, #72]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a17a:	f7f7 fae5 	bl	8001748 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a17e:	2308      	movs	r3, #8
 800a180:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b08      	cmp	r3, #8
 800a186:	d004      	beq.n	800a192 <vPreCheckConfigs+0xaa>
 800a188:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a18c:	480d      	ldr	r0, [pc, #52]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a18e:	f7f7 fadb 	bl	8001748 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a192:	2308      	movs	r3, #8
 800a194:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b08      	cmp	r3, #8
 800a19a:	d004      	beq.n	800a1a6 <vPreCheckConfigs+0xbe>
 800a19c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a1a0:	4808      	ldr	r0, [pc, #32]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a1a2:	f7f7 fad1 	bl	8001748 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a1a6:	2324      	movs	r3, #36	@ 0x24
 800a1a8:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b24      	cmp	r3, #36	@ 0x24
 800a1ae:	d004      	beq.n	800a1ba <vPreCheckConfigs+0xd2>
 800a1b0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a1b4:	4803      	ldr	r0, [pc, #12]	@ (800a1c4 <vPreCheckConfigs+0xdc>)
 800a1b6:	f7f7 fac7 	bl	8001748 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	080244fc 	.word	0x080244fc
 800a1c8:	20000fd8 	.word	0x20000fd8

0800a1cc <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a1d2:	f00c fd7f 	bl	8016cd4 <uxGetMinimumFreeNetworkBuffers>
 800a1d6:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a1d8:	4b24      	ldr	r3, [pc, #144]	@ (800a26c <vPrintResourceStats+0xa0>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d20a      	bcs.n	800a1f8 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a1e2:	4a22      	ldr	r2, [pc, #136]	@ (800a26c <vPrintResourceStats+0xa0>)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a1e8:	f00c fd80 	bl	8016cec <uxGetNumberOfFreeNetworkBuffers>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	481f      	ldr	r0, [pc, #124]	@ (800a270 <vPrintResourceStats+0xa4>)
 800a1f4:	f017 fbd0 	bl	8021998 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a1f8:	f7fb ff1e 	bl	8006038 <xPortGetMinimumEverFreeHeapSize>
 800a1fc:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a1fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a274 <vPrintResourceStats+0xa8>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a206:	4a1b      	ldr	r2, [pc, #108]	@ (800a274 <vPrintResourceStats+0xa8>)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	e019      	b.n	800a242 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a214:	d215      	bcs.n	800a242 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a216:	4b17      	ldr	r3, [pc, #92]	@ (800a274 <vPrintResourceStats+0xa8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	225a      	movs	r2, #90	@ 0x5a
 800a21c:	fb03 f202 	mul.w	r2, r3, r2
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2164      	movs	r1, #100	@ 0x64
 800a224:	fb01 f303 	mul.w	r3, r1, r3
 800a228:	429a      	cmp	r2, r3
 800a22a:	d90a      	bls.n	800a242 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a22c:	4a11      	ldr	r2, [pc, #68]	@ (800a274 <vPrintResourceStats+0xa8>)
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a232:	f7fb fef5 	bl	8006020 <xPortGetFreeHeapSize>
 800a236:	4603      	mov	r3, r0
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	4619      	mov	r1, r3
 800a23c:	480e      	ldr	r0, [pc, #56]	@ (800a278 <vPrintResourceStats+0xac>)
 800a23e:	f017 fbab 	bl	8021998 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a242:	2300      	movs	r3, #0
 800a244:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a246:	f7ff fae3 	bl	8009810 <uxGetMinimumIPQueueSpace>
 800a24a:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a24c:	4b0b      	ldr	r3, [pc, #44]	@ (800a27c <vPrintResourceStats+0xb0>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d006      	beq.n	800a264 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800a256:	4a09      	ldr	r2, [pc, #36]	@ (800a27c <vPrintResourceStats+0xb0>)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4808      	ldr	r0, [pc, #32]	@ (800a280 <vPrintResourceStats+0xb4>)
 800a260:	f017 fb9a 	bl	8021998 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800a264:	bf00      	nop
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000018 	.word	0x20000018
 800a270:	0802466c 	.word	0x0802466c
 800a274:	20001054 	.word	0x20001054
 800a278:	08024690 	.word	0x08024690
 800a27c:	20001058 	.word	0x20001058
 800a280:	080246ac 	.word	0x080246ac

0800a284 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	4293      	cmp	r3, r2
 800a294:	bf38      	it	cc
 800a296:	4613      	movcc	r3, r2
}
 800a298:	4618      	mov	r0, r3
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	bfa8      	it	ge
 800a2b6:	4613      	movge	r3, r2
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bf28      	it	cs
 800a2d6:	4613      	movcs	r3, r2
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	bf28      	it	cs
 800a2f6:	4613      	movcs	r3, r2
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d104      	bne.n	800a322 <FreeRTOS_round_up+0x1e>
 800a318:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800a31c:	480a      	ldr	r0, [pc, #40]	@ (800a348 <FreeRTOS_round_up+0x44>)
 800a31e:	f7f7 fa13 	bl	8001748 <vAssertCalled>

    if( d != 0U )
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00a      	beq.n	800a33e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	4413      	add	r3, r2
 800a32e:	1e5a      	subs	r2, r3, #1
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	fbb2 f2f3 	udiv	r2, r2, r3
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	fb02 f303 	mul.w	r3, r2, r3
 800a33c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a33e:	68fb      	ldr	r3, [r7, #12]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	080244fc 	.word	0x080244fc

0800a34c <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3301      	adds	r3, #1
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a362:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3302      	adds	r3, #2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a36c:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	3203      	adds	r2, #3
 800a372:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a374:	4313      	orrs	r3, r2
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	021b      	lsls	r3, r3, #8
 800a390:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	3201      	adds	r2, #1
 800a396:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a398:	4313      	orrs	r3, r2
 800a39a:	b29b      	uxth	r3, r3
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	@ 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b21      	cmp	r3, #33	@ 0x21
 800a3c2:	d802      	bhi.n	800a3ca <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	61fb      	str	r3, [r7, #28]
                break;
 800a3c8:	e06f      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	7b9b      	ldrb	r3, [r3, #14]
 800a3ce:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a3d0:	8afb      	ldrh	r3, [r7, #22]
 800a3d2:	2b44      	cmp	r3, #68	@ 0x44
 800a3d4:	d902      	bls.n	800a3dc <xCheckIPv4SizeFields+0x34>
 800a3d6:	8afb      	ldrh	r3, [r7, #22]
 800a3d8:	2b4f      	cmp	r3, #79	@ 0x4f
 800a3da:	d902      	bls.n	800a3e2 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a3dc:	2302      	movs	r3, #2
 800a3de:	61fb      	str	r3, [r7, #28]
                break;
 800a3e0:	e063      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800a3e2:	8afb      	ldrh	r3, [r7, #22]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a3ec:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a3ee:	8afb      	ldrh	r3, [r7, #22]
 800a3f0:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	330e      	adds	r3, #14
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d202      	bcs.n	800a402 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	61fb      	str	r3, [r7, #28]
                break;
 800a400:	e053      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	7c1a      	ldrb	r2, [r3, #16]
 800a406:	7c5b      	ldrb	r3, [r3, #17]
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	4313      	orrs	r3, r2
 800a40c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800a40e:	89fb      	ldrh	r3, [r7, #14]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	b21a      	sxth	r2, r3
 800a414:	89fb      	ldrh	r3, [r7, #14]
 800a416:	0a1b      	lsrs	r3, r3, #8
 800a418:	b29b      	uxth	r3, r3
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	4313      	orrs	r3, r2
 800a41e:	b21b      	sxth	r3, r3
 800a420:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	330e      	adds	r3, #14
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d202      	bcs.n	800a432 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a42c:	2304      	movs	r3, #4
 800a42e:	61fb      	str	r3, [r7, #28]
                break;
 800a430:	e03b      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	7ddb      	ldrb	r3, [r3, #23]
 800a436:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a438:	7b7b      	ldrb	r3, [r7, #13]
 800a43a:	2b11      	cmp	r3, #17
 800a43c:	d103      	bne.n	800a446 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	3316      	adds	r3, #22
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24
 800a444:	e013      	b.n	800a46e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a446:	7b7b      	ldrb	r3, [r7, #13]
 800a448:	2b06      	cmp	r3, #6
 800a44a:	d103      	bne.n	800a454 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	3322      	adds	r3, #34	@ 0x22
 800a450:	627b      	str	r3, [r7, #36]	@ 0x24
 800a452:	e00c      	b.n	800a46e <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a454:	7b7b      	ldrb	r3, [r7, #13]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d002      	beq.n	800a460 <xCheckIPv4SizeFields+0xb8>
 800a45a:	7b7b      	ldrb	r3, [r7, #13]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d103      	bne.n	800a468 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	3316      	adds	r3, #22
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
 800a466:	e002      	b.n	800a46e <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a468:	2305      	movs	r3, #5
 800a46a:	61fb      	str	r3, [r7, #28]
                break;
 800a46c:	e01d      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	429a      	cmp	r2, r3
 800a474:	d202      	bcs.n	800a47c <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a476:	2306      	movs	r3, #6
 800a478:	61fb      	str	r3, [r7, #28]
                break;
 800a47a:	e016      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	b29b      	uxth	r3, r3
 800a484:	461a      	mov	r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	1a9b      	subs	r3, r3, r2
 800a48a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2b07      	cmp	r3, #7
 800a490:	d906      	bls.n	800a4a0 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a498:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d902      	bls.n	800a4a6 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a4a0:	2307      	movs	r3, #7
 800a4a2:	61fb      	str	r3, [r7, #28]
                break;
 800a4a4:	e001      	b.n	800a4aa <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d003      	beq.n	800a4b8 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800a4b0:	69f9      	ldr	r1, [r7, #28]
 800a4b2:	4804      	ldr	r0, [pc, #16]	@ (800a4c4 <xCheckIPv4SizeFields+0x11c>)
 800a4b4:	f017 fa70 	bl	8021998 <lUDPLoggingPrintf>
        }

        return xResult;
 800a4b8:	6a3b      	ldr	r3, [r7, #32]
    }
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3728      	adds	r7, #40	@ 0x28
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	08024778 	.word	0x08024778

0800a4c8 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	061a      	lsls	r2, r3, #24
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	0a1b      	lsrs	r3, r3, #8
 800a4e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	0e1b      	lsrs	r3, r3, #24
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a4f6:	d306      	bcc.n	800a506 <xIsIPv4Multicast+0x3e>
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800a4fe:	d202      	bcs.n	800a506 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800a500:	2301      	movs	r3, #1
 800a502:	60fb      	str	r3, [r7, #12]
 800a504:	e001      	b.n	800a50a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800a506:	2300      	movs	r3, #0
 800a508:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a50a:	68fb      	ldr	r3, [r7, #12]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a524:	2301      	movs	r3, #1
 800a526:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a528:	7dfb      	ldrb	r3, [r7, #23]
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10c      	bne.n	800a548 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7ff ff35 	bl	800a3a8 <xCheckIPv4SizeFields>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b01      	cmp	r3, #1
 800a542:	d001      	beq.n	800a548 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d134      	bne.n	800a5b8 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	7ddb      	ldrb	r3, [r3, #23]
 800a552:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	3322      	adds	r3, #34	@ 0x22
 800a55a:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a55c:	7dbb      	ldrb	r3, [r7, #22]
 800a55e:	2b11      	cmp	r3, #17
 800a560:	d12a      	bne.n	800a5b8 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	88db      	ldrh	r3, [r3, #6]
 800a566:	b29b      	uxth	r3, r3
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d125      	bne.n	800a5b8 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800a56c:	4b15      	ldr	r3, [pc, #84]	@ (800a5c4 <prvAllowIPPacketIPv4+0xac>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2b04      	cmp	r3, #4
 800a572:	dc1f      	bgt.n	800a5b4 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a57a:	061a      	lsls	r2, r3, #24
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a582:	021b      	lsls	r3, r3, #8
 800a584:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a588:	431a      	orrs	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a596:	431a      	orrs	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a59e:	0e1b      	lsrs	r3, r3, #24
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4808      	ldr	r0, [pc, #32]	@ (800a5c8 <prvAllowIPPacketIPv4+0xb0>)
 800a5a6:	f017 f9f7 	bl	8021998 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800a5aa:	4b06      	ldr	r3, [pc, #24]	@ (800a5c4 <prvAllowIPPacketIPv4+0xac>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a04      	ldr	r2, [pc, #16]	@ (800a5c4 <prvAllowIPPacketIPv4+0xac>)
 800a5b2:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	2000105c 	.word	0x2000105c
 800a5c8:	0802479c 	.word	0x0802479c

0800a5cc <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	@ 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5de:	330e      	adds	r3, #14
 800a5e0:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a5f0:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	3b14      	subs	r3, #20
 800a5f6:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	330e      	adds	r3, #14
 800a600:	4413      	add	r3, r2
 800a602:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a608:	3322      	adds	r3, #34	@ 0x22
 800a60a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	3b22      	subs	r3, #34	@ 0x22
 800a616:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	6939      	ldr	r1, [r7, #16]
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f018 fb7c 	bl	8022d1a <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	1ad2      	subs	r2, r2, r3
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	b29b      	uxth	r3, r3
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	b21a      	sxth	r2, r3
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	885b      	ldrh	r3, [r3, #2]
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	0a1b      	lsrs	r3, r3, #8
 800a640:	b29b      	uxth	r3, r3
 800a642:	b21b      	sxth	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b21b      	sxth	r3, r3
 800a648:	b29a      	uxth	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	b29a      	uxth	r2, r3
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	885b      	ldrh	r3, [r3, #2]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	021b      	lsls	r3, r3, #8
 800a65e:	b219      	sxth	r1, r3
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	885b      	ldrh	r3, [r3, #2]
 800a664:	b29b      	uxth	r3, r3
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b29b      	uxth	r3, r3
 800a66a:	b21b      	sxth	r3, r3
 800a66c:	430b      	orrs	r3, r1
 800a66e:	b21b      	sxth	r3, r3
 800a670:	b29b      	uxth	r3, r3
 800a672:	4619      	mov	r1, r3
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	1acb      	subs	r3, r1, r3
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4313      	orrs	r3, r2
 800a67e:	b29a      	uxth	r2, r3
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f023 030f 	bic.w	r3, r3, #15
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f043 0305 	orr.w	r3, r3, #5
 800a692:	b2da      	uxtb	r2, r3
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800a698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3728      	adds	r7, #40	@ 0x28
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b0f      	cmp	r3, #15
 800a6b4:	d802      	bhi.n	800a6bc <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	e00e      	b.n	800a6da <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a6bc:	f107 0314 	add.w	r3, r7, #20
 800a6c0:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	68b9      	ldr	r1, [r7, #8]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f004 fac9 	bl	800ec68 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a6da:	69fb      	ldr	r3, [r7, #28]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <xSend_UDP_Update_IPv4+0x32>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00d      	beq.n	800a716 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fe:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	689a      	ldr	r2, [r3, #8]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f042 0208 	orr.w	r2, r2, #8
 800a710:	731a      	strb	r2, [r3, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	061a      	lsls	r2, r3, #24
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	0a1b      	lsrs	r3, r3, #8
 800a740:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a744:	431a      	orrs	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	0e1b      	lsrs	r3, r3, #24
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2200      	movs	r2, #0
 800a758:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	225e      	movs	r2, #94	@ 0x5e
 800a75e:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	0c1b      	lsrs	r3, r3, #16
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	0a1b      	lsrs	r3, r3, #8
 800a774:	b2da      	uxtb	r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	715a      	strb	r2, [r3, #5]
}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a790:	b580      	push	{r7, lr}
 800a792:	b08c      	sub	sp, #48	@ 0x30
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800a79a:	2300      	movs	r3, #0
 800a79c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b27      	cmp	r3, #39	@ 0x27
 800a7b6:	d802      	bhi.n	800a7be <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	61fb      	str	r3, [r7, #28]
                break;
 800a7bc:	e098      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	7b9b      	ldrb	r3, [r3, #14]
 800a7c2:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800a7c4:	89fb      	ldrh	r3, [r7, #14]
 800a7c6:	111b      	asrs	r3, r3, #4
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	2b06      	cmp	r3, #6
 800a7ce:	d002      	beq.n	800a7d6 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	61fb      	str	r3, [r7, #28]
                break;
 800a7d4:	e08c      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b35      	cmp	r3, #53	@ 0x35
 800a7da:	d802      	bhi.n	800a7e2 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a7dc:	2303      	movs	r3, #3
 800a7de:	61fb      	str	r3, [r7, #28]
                break;
 800a7e0:	e086      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	8a5b      	ldrh	r3, [r3, #18]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	021b      	lsls	r3, r3, #8
 800a7ea:	b21a      	sxth	r2, r3
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	8a5b      	ldrh	r3, [r3, #18]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	0a1b      	lsrs	r3, r3, #8
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	b21b      	sxth	r3, r3
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800a7fe:	89bb      	ldrh	r3, [r7, #12]
 800a800:	3336      	adds	r3, #54	@ 0x36
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d002      	beq.n	800a80e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a808:	2304      	movs	r3, #4
 800a80a:	61fb      	str	r3, [r7, #28]
                break;
 800a80c:	e070      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	7d1b      	ldrb	r3, [r3, #20]
 800a812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800a816:	e015      	b.n	800a844 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	3336      	adds	r3, #54	@ 0x36
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	4413      	add	r3, r2
 800a820:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	785b      	ldrb	r3, [r3, #1]
 800a826:	3301      	adds	r3, #1
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	461a      	mov	r2, r3
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	4413      	add	r3, r2
 800a830:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	3336      	adds	r3, #54	@ 0x36
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d908      	bls.n	800a856 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800a844:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 f85f 	bl	800a90c <xIsExtHeader>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e1      	bne.n	800a818 <xCheckIPv6SizeFields+0x88>
 800a854:	e000      	b.n	800a858 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800a856:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	3336      	adds	r3, #54	@ 0x36
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d802      	bhi.n	800a868 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a862:	2307      	movs	r3, #7
 800a864:	61fb      	str	r3, [r7, #28]
                break;
 800a866:	e043      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800a868:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a86c:	2b11      	cmp	r3, #17
 800a86e:	d103      	bne.n	800a878 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	333e      	adds	r3, #62	@ 0x3e
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
 800a876:	e032      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800a878:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a87c:	2b06      	cmp	r3, #6
 800a87e:	d103      	bne.n	800a888 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	334a      	adds	r3, #74	@ 0x4a
 800a884:	627b      	str	r3, [r7, #36]	@ 0x24
 800a886:	e02a      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800a888:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a88c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a88e:	d123      	bne.n	800a8d8 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	3336      	adds	r3, #54	@ 0x36
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89a:	4413      	add	r3, r2
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	2b80      	cmp	r3, #128	@ 0x80
 800a8a4:	d002      	beq.n	800a8ac <xCheckIPv6SizeFields+0x11c>
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	2b81      	cmp	r3, #129	@ 0x81
 800a8aa:	d103      	bne.n	800a8b4 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	3308      	adds	r3, #8
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8b2:	e014      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800a8b4:	7afb      	ldrb	r3, [r7, #11]
 800a8b6:	2b85      	cmp	r3, #133	@ 0x85
 800a8b8:	d103      	bne.n	800a8c2 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	3308      	adds	r3, #8
 800a8be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8c0:	e00d      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800a8c2:	7afb      	ldrb	r3, [r7, #11]
 800a8c4:	2b86      	cmp	r3, #134	@ 0x86
 800a8c6:	d103      	bne.n	800a8d0 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ca:	3310      	adds	r3, #16
 800a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8ce:	e006      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	3318      	adds	r3, #24
 800a8d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8d6:	e002      	b.n	800a8de <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a8d8:	2305      	movs	r3, #5
 800a8da:	61fb      	str	r3, [r7, #28]
                break;
 800a8dc:	e008      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d202      	bcs.n	800a8ec <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a8e6:	2306      	movs	r3, #6
 800a8e8:	61fb      	str	r3, [r7, #28]
                break;
 800a8ea:	e001      	b.n	800a8f0 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d003      	beq.n	800a8fe <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a8f6:	69f9      	ldr	r1, [r7, #28]
 800a8f8:	4803      	ldr	r0, [pc, #12]	@ (800a908 <xCheckIPv6SizeFields+0x178>)
 800a8fa:	f017 f84d 	bl	8021998 <lUDPLoggingPrintf>
        }

        return xResult;
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a900:	4618      	mov	r0, r3
 800a902:	3730      	adds	r7, #48	@ 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	080247d8 	.word	0x080247d8

0800a90c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	2b87      	cmp	r3, #135	@ 0x87
 800a91e:	d016      	beq.n	800a94e <xIsExtHeader+0x42>
 800a920:	2b87      	cmp	r3, #135	@ 0x87
 800a922:	dc16      	bgt.n	800a952 <xIsExtHeader+0x46>
 800a924:	2b00      	cmp	r3, #0
 800a926:	d012      	beq.n	800a94e <xIsExtHeader+0x42>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	db12      	blt.n	800a952 <xIsExtHeader+0x46>
 800a92c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a92e:	dc10      	bgt.n	800a952 <xIsExtHeader+0x46>
 800a930:	2b2b      	cmp	r3, #43	@ 0x2b
 800a932:	db0e      	blt.n	800a952 <xIsExtHeader+0x46>
 800a934:	3b2b      	subs	r3, #43	@ 0x2b
 800a936:	4a0a      	ldr	r2, [pc, #40]	@ (800a960 <xIsExtHeader+0x54>)
 800a938:	fa22 f303 	lsr.w	r3, r2, r3
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	bf14      	ite	ne
 800a944:	2301      	movne	r3, #1
 800a946:	2300      	moveq	r3, #0
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a952:	68fb      	ldr	r3, [r7, #12]
    }
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	00020183 	.word	0x00020183

0800a964 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <xGetIPv6MulticastGroupID+0x1a>
 800a974:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a978:	480e      	ldr	r0, [pc, #56]	@ (800a9b4 <xGetIPv6MulticastGroupID+0x50>)
 800a97a:	f7f6 fee5 	bl	8001748 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d104      	bne.n	800a98e <xGetIPv6MulticastGroupID+0x2a>
 800a984:	f240 1113 	movw	r1, #275	@ 0x113
 800a988:	480a      	ldr	r0, [pc, #40]	@ (800a9b4 <xGetIPv6MulticastGroupID+0x50>)
 800a98a:	f7f6 fedd 	bl	8001748 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2200      	movs	r2, #0
 800a998:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	1c98      	adds	r0, r3, #2
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3302      	adds	r3, #2
 800a9a2:	220e      	movs	r2, #14
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	f017 fa13 	bl	8021dd0 <memcpy>
}
 800a9aa:	bf00      	nop
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	080247fc 	.word	0x080247fc

0800a9b8 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2210      	movs	r2, #16
 800a9c8:	4906      	ldr	r1, [pc, #24]	@ (800a9e4 <xIsIPv6Loopback+0x2c>)
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f018 f995 	bl	8022cfa <memcmp>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a9da:	68fb      	ldr	r3, [r7, #12]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	0802704c 	.word	0x0802704c

0800a9e8 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2bff      	cmp	r3, #255	@ 0xff
 800a9fa:	d123      	bne.n	800aa44 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a9fc:	f107 030c 	add.w	r3, r7, #12
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff ffae 	bl	800a964 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	e014      	b.n	800aa44 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10c      	bne.n	800aa40 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800aa26:	f107 030c 	add.w	r3, r7, #12
 800aa2a:	2210      	movs	r2, #16
 800aa2c:	4908      	ldr	r1, [pc, #32]	@ (800aa50 <xIsIPv6AllowedMulticast+0x68>)
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f018 f963 	bl	8022cfa <memcmp>
 800aa34:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d102      	bne.n	800aa40 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61fb      	str	r3, [r7, #28]
 800aa3e:	e001      	b.n	800aa44 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800aa40:	2301      	movs	r3, #1
 800aa42:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800aa44:	69fb      	ldr	r3, [r7, #28]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3720      	adds	r7, #32
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	0802703c 	.word	0x0802703c

0800aa54 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	@ 0x28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	2bff      	cmp	r3, #255	@ 0xff
 800aa66:	d112      	bne.n	800aa8e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800aa6c:	2b02      	cmp	r3, #2
 800aa6e:	d10e      	bne.n	800aa8e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800aa74:	2bff      	cmp	r3, #255	@ 0xff
 800aa76:	d10a      	bne.n	800aa8e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f103 000d 	add.w	r0, r3, #13
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	330d      	adds	r3, #13
 800aa82:	2203      	movs	r2, #3
 800aa84:	4619      	mov	r1, r3
 800aa86:	f018 f938 	bl	8022cfa <memcmp>
 800aa8a:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa8c:	e069      	b.n	800ab62 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	2210      	movs	r2, #16
 800aa92:	4936      	ldr	r1, [pc, #216]	@ (800ab6c <xCompareIPv6_Address+0x118>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f018 f930 	bl	8022cfa <memcmp>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa4:	e05d      	b.n	800ab62 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2bfe      	cmp	r3, #254	@ 0xfe
 800aaac:	d10e      	bne.n	800aacc <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800aab2:	2b80      	cmp	r3, #128	@ 0x80
 800aab4:	d10a      	bne.n	800aacc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800aaba:	2bfe      	cmp	r3, #254	@ 0xfe
 800aabc:	d106      	bne.n	800aacc <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800aac2:	2b80      	cmp	r3, #128	@ 0x80
 800aac4:	d102      	bne.n	800aacc <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaca:	e04a      	b.n	800ab62 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d102      	bne.n	800aad8 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800aad2:	2300      	movs	r3, #0
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
 800aad6:	e044      	b.n	800ab62 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b80      	cmp	r3, #128	@ 0x80
 800aadc:	d107      	bne.n	800aaee <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	2210      	movs	r2, #16
 800aae4:	4618      	mov	r0, r3
 800aae6:	f018 f908 	bl	8022cfa <memcmp>
 800aaea:	6278      	str	r0, [r7, #36]	@ 0x24
 800aaec:	e039      	b.n	800ab62 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d006      	beq.n	800ab0c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68b9      	ldr	r1, [r7, #8]
 800ab02:	6a3a      	ldr	r2, [r7, #32]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f018 f8f8 	bl	8022cfa <memcmp>
 800ab0a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d127      	bne.n	800ab62 <xCompareIPv6_Address+0x10e>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d022      	beq.n	800ab62 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f003 0307 	and.w	r3, r3, #7
 800ab22:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f1c3 0308 	rsb	r3, r3, #8
 800ab2a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	fa02 f303 	lsl.w	r3, r2, r3
 800ab34:	3b01      	subs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	43db      	mvns	r3, r3
 800ab3e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	4413      	add	r3, r2
 800ab46:	781a      	ldrb	r2, [r3, #0]
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	440b      	add	r3, r1
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	4053      	eors	r3, r2
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	7cfb      	ldrb	r3, [r7, #19]
 800ab56:	4013      	ands	r3, r2
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3728      	adds	r7, #40	@ 0x28
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	0802705c 	.word	0x0802705c

0800ab70 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d10c      	bne.n	800aba0 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f7ff fdfd 	bl	800a790 <xCheckIPv6SizeFields>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d001      	beq.n	800aba0 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
	...

0800abac <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	460a      	mov	r2, r1
 800abb6:	71fb      	strb	r3, [r7, #7]
 800abb8:	4613      	mov	r3, r2
 800abba:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b87      	cmp	r3, #135	@ 0x87
 800abc0:	d04b      	beq.n	800ac5a <xGetExtensionOrder+0xae>
 800abc2:	2b87      	cmp	r3, #135	@ 0x87
 800abc4:	dc4c      	bgt.n	800ac60 <xGetExtensionOrder+0xb4>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d030      	beq.n	800ac2c <xGetExtensionOrder+0x80>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	db48      	blt.n	800ac60 <xGetExtensionOrder+0xb4>
 800abce:	2b3c      	cmp	r3, #60	@ 0x3c
 800abd0:	dc46      	bgt.n	800ac60 <xGetExtensionOrder+0xb4>
 800abd2:	2b2b      	cmp	r3, #43	@ 0x2b
 800abd4:	db44      	blt.n	800ac60 <xGetExtensionOrder+0xb4>
 800abd6:	3b2b      	subs	r3, #43	@ 0x2b
 800abd8:	2b11      	cmp	r3, #17
 800abda:	d841      	bhi.n	800ac60 <xGetExtensionOrder+0xb4>
 800abdc:	a201      	add	r2, pc, #4	@ (adr r2, 800abe4 <xGetExtensionOrder+0x38>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800ac43 	.word	0x0800ac43
 800abe8:	0800ac49 	.word	0x0800ac49
 800abec:	0800ac61 	.word	0x0800ac61
 800abf0:	0800ac61 	.word	0x0800ac61
 800abf4:	0800ac61 	.word	0x0800ac61
 800abf8:	0800ac61 	.word	0x0800ac61
 800abfc:	0800ac61 	.word	0x0800ac61
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800ac4f 	.word	0x0800ac4f
 800ac08:	0800ac61 	.word	0x0800ac61
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800ac61 	.word	0x0800ac61
 800ac14:	0800ac61 	.word	0x0800ac61
 800ac18:	0800ac61 	.word	0x0800ac61
 800ac1c:	0800ac61 	.word	0x0800ac61
 800ac20:	0800ac61 	.word	0x0800ac61
 800ac24:	0800ac61 	.word	0x0800ac61
 800ac28:	0800ac33 	.word	0x0800ac33
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	60fb      	str	r3, [r7, #12]
            break;
 800ac30:	e01b      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800ac32:	2307      	movs	r3, #7
 800ac34:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800ac36:	79bb      	ldrb	r3, [r7, #6]
 800ac38:	2b2b      	cmp	r3, #43	@ 0x2b
 800ac3a:	d115      	bne.n	800ac68 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800ac40:	e012      	b.n	800ac68 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800ac42:	2303      	movs	r3, #3
 800ac44:	60fb      	str	r3, [r7, #12]
            break;
 800ac46:	e010      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800ac48:	2304      	movs	r3, #4
 800ac4a:	60fb      	str	r3, [r7, #12]
            break;
 800ac4c:	e00d      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800ac4e:	2305      	movs	r3, #5
 800ac50:	60fb      	str	r3, [r7, #12]
            break;
 800ac52:	e00a      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800ac54:	2306      	movs	r3, #6
 800ac56:	60fb      	str	r3, [r7, #12]
            break;
 800ac58:	e007      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	60fb      	str	r3, [r7, #12]
            break;
 800ac5e:	e004      	b.n	800ac6a <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800ac60:	f04f 33ff 	mov.w	r3, #4294967295
 800ac64:	60fb      	str	r3, [r7, #12]
            break;
 800ac66:	e000      	b.n	800ac6a <xGetExtensionOrder+0xbe>
            break;
 800ac68:	bf00      	nop
    }

    return xReturn;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08e      	sub	sp, #56	@ 0x38
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800ac82:	2300      	movs	r3, #0
 800ac84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac92:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acac:	f107 020b 	add.w	r2, r7, #11
 800acb0:	4619      	mov	r1, r3
 800acb2:	f000 faa5 	bl	800b200 <usGetExtensionHeaderLength>
 800acb6:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3336      	adds	r3, #54	@ 0x36
 800acbc:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d243      	bcs.n	800ad4e <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	8a5b      	ldrh	r3, [r3, #18]
 800acca:	b29b      	uxth	r3, r3
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	b21a      	sxth	r2, r3
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	8a5b      	ldrh	r3, [r3, #18]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	0a1b      	lsrs	r3, r3, #8
 800acd8:	b29b      	uxth	r3, r3
 800acda:	b21b      	sxth	r3, r3
 800acdc:	4313      	orrs	r3, r2
 800acde:	b21b      	sxth	r3, r3
 800ace0:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800ace2:	8afb      	ldrh	r3, [r7, #22]
 800ace4:	69fa      	ldr	r2, [r7, #28]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d231      	bcs.n	800ad4e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d12e      	bne.n	800ad4e <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800acf0:	7afa      	ldrb	r2, [r7, #11]
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	3336      	adds	r3, #54	@ 0x36
 800acfc:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	4413      	add	r3, r2
 800ad06:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800ad08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	1ad3      	subs	r3, r2, r3
 800ad0e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800ad10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f018 f800 	bl	8022d1a <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	1ad2      	subs	r2, r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	8afa      	ldrh	r2, [r7, #22]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800ad30:	8afb      	ldrh	r3, [r7, #22]
 800ad32:	021b      	lsls	r3, r3, #8
 800ad34:	b21a      	sxth	r2, r3
 800ad36:	8afb      	ldrh	r3, [r7, #22]
 800ad38:	0a1b      	lsrs	r3, r3, #8
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	b21b      	sxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b21b      	sxth	r3, r3
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800ad4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d101      	bne.n	800ad5a <eHandleIPv6ExtensionHeaders+0xe2>
 800ad56:	4910      	ldr	r1, [pc, #64]	@ (800ad98 <eHandleIPv6ExtensionHeaders+0x120>)
 800ad58:	e000      	b.n	800ad5c <eHandleIPv6ExtensionHeaders+0xe4>
 800ad5a:	4910      	ldr	r1, [pc, #64]	@ (800ad9c <eHandleIPv6ExtensionHeaders+0x124>)
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	8a5b      	ldrh	r3, [r3, #18]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	b21a      	sxth	r2, r3
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	8a5b      	ldrh	r3, [r3, #18]
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	0a1b      	lsrs	r3, r3, #8
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	b21b      	sxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b21b      	sxth	r3, r3
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	9200      	str	r2, [sp, #0]
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad86:	4806      	ldr	r0, [pc, #24]	@ (800ada0 <eHandleIPv6ExtensionHeaders+0x128>)
 800ad88:	f016 fe06 	bl	8021998 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800ad8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3730      	adds	r7, #48	@ 0x30
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	0802482c 	.word	0x0802482c
 800ad9c:	08024834 	.word	0x08024834
 800ada0:	08024838 	.word	0x08024838

0800ada4 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d026      	beq.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d023      	beq.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7a1b      	ldrb	r3, [r3, #8]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d010      	beq.n	800adee <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d018      	beq.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	3354      	adds	r3, #84	@ 0x54
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	2210      	movs	r2, #16
 800addc:	4618      	mov	r0, r3
 800adde:	f017 ff8c 	bl	8022cfa <memcmp>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10e      	bne.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e00b      	b.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d107      	bne.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d101      	bne.n	800ae06 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800ae06:	68fb      	ldr	r3, [r7, #12]
    }
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d103      	bne.n	800ae34 <xSend_UDP_Update_IPv6+0x24>
 800ae2c:	2173      	movs	r1, #115	@ 0x73
 800ae2e:	4811      	ldr	r0, [pc, #68]	@ (800ae74 <xSend_UDP_Update_IPv6+0x64>)
 800ae30:	f7f6 fc8a 	bl	8001748 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	3308      	adds	r3, #8
 800ae3e:	2210      	movs	r2, #16
 800ae40:	4619      	mov	r1, r3
 800ae42:	f016 ffc5 	bl	8021dd0 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 0014 	add.w	r0, r3, #20
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	2210      	movs	r2, #16
 800ae52:	4619      	mov	r1, r3
 800ae54:	f016 ffbc 	bl	8021dd0 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ae60:	731a      	strb	r2, [r3, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ae68:	735a      	strb	r2, [r3, #13]

    return NULL;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	08024890 	.word	0x08024890

0800ae78 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ae82:	2330      	movs	r3, #48	@ 0x30
 800ae84:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	2b09      	cmp	r3, #9
 800ae8a:	d805      	bhi.n	800ae98 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800ae8c:	88fb      	ldrh	r3, [r7, #6]
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	4413      	add	r3, r2
 800ae94:	73fb      	strb	r3, [r7, #15]
 800ae96:	e010      	b.n	800aeba <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	2b0f      	cmp	r3, #15
 800ae9c:	d809      	bhi.n	800aeb2 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800ae9e:	2361      	movs	r3, #97	@ 0x61
 800aea0:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	4413      	add	r3, r2
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	3b0a      	subs	r3, #10
 800aeae:	73fb      	strb	r3, [r7, #15]
 800aeb0:	e003      	b.n	800aeba <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800aeb2:	21b3      	movs	r1, #179	@ 0xb3
 800aeb4:	4803      	ldr	r0, [pc, #12]	@ (800aec4 <cHexToChar+0x4c>)
 800aeb6:	f7f6 fc47 	bl	8001748 <vAssertCalled>
    }

    return cReturn;
 800aeba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	08024890 	.word	0x08024890

0800aec8 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800aec8:	b590      	push	{r4, r7, lr}
 800aeca:	b08b      	sub	sp, #44	@ 0x2c
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800aed6:	2304      	movs	r3, #4
 800aed8:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800aeda:	2300      	movs	r3, #0
 800aedc:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800aee6:	2300      	movs	r3, #0
 800aee8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeea:	e026      	b.n	800af3a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
 800aeee:	0b1b      	lsrs	r3, r3, #12
 800aef0:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800aef2:	8a7b      	ldrh	r3, [r7, #18]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800aef8:	2301      	movs	r3, #1
 800aefa:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <uxHexPrintShort+0x44>
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	3b01      	subs	r3, #1
 800af06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af08:	429a      	cmp	r2, r3
 800af0a:	d110      	bne.n	800af2e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	3b01      	subs	r3, #1
 800af10:	6a3a      	ldr	r2, [r7, #32]
 800af12:	429a      	cmp	r2, r3
 800af14:	d216      	bcs.n	800af44 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	18d4      	adds	r4, r2, r3
 800af1c:	8a7b      	ldrh	r3, [r7, #18]
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff ffaa 	bl	800ae78 <cHexToChar>
 800af24:	4603      	mov	r3, r0
 800af26:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	3301      	adds	r3, #1
 800af2c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800af2e:	8bfb      	ldrh	r3, [r7, #30]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800af34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af36:	3301      	adds	r3, #1
 800af38:	627b      	str	r3, [r7, #36]	@ 0x24
 800af3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d3d4      	bcc.n	800aeec <uxHexPrintShort+0x24>
 800af42:	e000      	b.n	800af46 <uxHexPrintShort+0x7e>
                break;
 800af44:	bf00      	nop
    }

    return uxIndex;
 800af46:	6a3b      	ldr	r3, [r7, #32]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	372c      	adds	r7, #44	@ 0x2c
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd90      	pop	{r4, r7, pc}

0800af50 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800af50:	b480      	push	{r7}
 800af52:	b089      	sub	sp, #36	@ 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800af5c:	2300      	movs	r3, #0
 800af5e:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800af64:	2308      	movs	r3, #8
 800af66:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f04f 32ff 	mov.w	r2, #4294967295
 800af6e:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800af70:	e02c      	b.n	800afcc <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	005b      	lsls	r3, r3, #1
 800af7a:	4413      	add	r3, r2
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d107      	bne.n	800af96 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	3301      	adds	r3, #1
 800af94:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800af96:	89fb      	ldrh	r3, [r7, #14]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d104      	bne.n	800afa6 <prv_ntop6_search_zeros+0x56>
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d10f      	bne.n	800afc6 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	dd0a      	ble.n	800afc2 <prv_ntop6_search_zeros+0x72>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	dd05      	ble.n	800afc2 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	3301      	adds	r3, #1
 800afca:	61fb      	str	r3, [r7, #28]
 800afcc:	69fa      	ldr	r2, [r7, #28]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	dbce      	blt.n	800af72 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop
 800afd8:	3724      	adds	r7, #36	@ 0x24
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800afee:	2301      	movs	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800aff2:	2308      	movs	r3, #8
 800aff4:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	3b01      	subs	r3, #1
 800affe:	429a      	cmp	r2, r3
 800b000:	d827      	bhi.n	800b052 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	223a      	movs	r2, #58	@ 0x3a
 800b00c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	68da      	ldr	r2, [r3, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	4413      	add	r3, r2
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	429a      	cmp	r2, r3
 800b026:	d116      	bne.n	800b056 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3b01      	subs	r3, #1
 800b030:	429a      	cmp	r2, r3
 800b032:	d80b      	bhi.n	800b04c <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	223a      	movs	r2, #58	@ 0x3a
 800b03e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	611a      	str	r2, [r3, #16]
 800b04a:	e004      	b.n	800b056 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	e001      	b.n	800b056 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800b052:	2300      	movs	r3, #0
 800b054:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b056:	697b      	ldr	r3, [r7, #20]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	371c      	adds	r7, #28
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b064:	b590      	push	{r4, r7, lr}
 800b066:	b089      	sub	sp, #36	@ 0x24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800b070:	2301      	movs	r3, #1
 800b072:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800b074:	2304      	movs	r3, #4
 800b076:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dd13      	ble.n	800b0a8 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	691a      	ldr	r2, [r3, #16]
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	3b01      	subs	r3, #1
 800b088:	429a      	cmp	r2, r3
 800b08a:	d302      	bcc.n	800b092 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800b08c:	2300      	movs	r3, #0
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	e00a      	b.n	800b0a8 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	4413      	add	r3, r2
 800b09a:	223a      	movs	r2, #58	@ 0x3a
 800b09c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d130      	bne.n	800b110 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	1acb      	subs	r3, r1, r3
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d827      	bhi.n	800b10c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	18d0      	adds	r0, r2, r3
 800b0c4:	69bb      	ldr	r3, [r7, #24]
 800b0c6:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	4413      	add	r3, r2
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	b21a      	sxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	440b      	add	r3, r1
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	0a1b      	lsrs	r3, r3, #8
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	b21b      	sxth	r3, r3
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	f7ff fee6 	bl	800aec8 <uxHexPrintShort>
 800b0fc:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	441a      	add	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	611a      	str	r2, [r3, #16]
 800b10a:	e001      	b.n	800b110 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b10c:	2300      	movs	r3, #0
 800b10e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b110:	69fb      	ldr	r3, [r7, #28]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3724      	adds	r7, #36	@ 0x24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}

0800b11a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b08a      	sub	sp, #40	@ 0x28
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b126:	f107 0310 	add.w	r3, r7, #16
 800b12a:	2214      	movs	r2, #20
 800b12c:	2100      	movs	r1, #0
 800b12e:	4618      	mov	r0, r3
 800b130:	f016 ff5b 	bl	8021fea <memset>

    xSet.pusAddress = pvSource;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d92c      	bls.n	800b198 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b13e:	f107 0310 	add.w	r3, r7, #16
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff ff04 	bl	800af50 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b148:	e01f      	b.n	800b18a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b14a:	69fa      	ldr	r2, [r7, #28]
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d10e      	bne.n	800b170 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	461a      	mov	r2, r3
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	68b8      	ldr	r0, [r7, #8]
 800b15c:	f7ff ff41 	bl	800afe2 <prv_ntop6_write_zeros>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d015      	beq.n	800b192 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	4413      	add	r3, r2
 800b16c:	61fb      	str	r3, [r7, #28]
 800b16e:	e00c      	b.n	800b18a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b170:	f107 0310 	add.w	r3, r7, #16
 800b174:	461a      	mov	r2, r3
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	68b8      	ldr	r0, [r7, #8]
 800b17a:	f7ff ff73 	bl	800b064 <prv_ntop6_write_short>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d008      	beq.n	800b196 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	3301      	adds	r3, #1
 800b188:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	2b07      	cmp	r3, #7
 800b18e:	dddc      	ble.n	800b14a <FreeRTOS_inet_ntop6+0x30>
 800b190:	e002      	b.n	800b198 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b196:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2b07      	cmp	r3, #7
 800b19c:	dc02      	bgt.n	800b1a4 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1a2:	e006      	b.n	800b1b2 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3728      	adds	r7, #40	@ 0x28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2233      	movs	r2, #51	@ 0x33
 800b1ca:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2233      	movs	r2, #51	@ 0x33
 800b1d0:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7b1a      	ldrb	r2, [r3, #12]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7b5a      	ldrb	r2, [r3, #13]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	7b9a      	ldrb	r2, [r3, #14]
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	7bda      	ldrb	r2, [r3, #15]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	715a      	strb	r2, [r3, #5]
}
 800b1f2:	bf00      	nop
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fc:	4770      	bx	lr
	...

0800b200 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08e      	sub	sp, #56	@ 0x38
 800b204:	af02      	add	r7, sp, #8
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b20c:	2300      	movs	r3, #0
 800b20e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b212:	2336      	movs	r3, #54	@ 0x36
 800b214:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b216:	2300      	movs	r3, #0
 800b218:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 808c 	beq.w	800b346 <usGetExtensionHeaderLength+0x146>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8088 	beq.w	800b346 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	7d1b      	ldrb	r3, [r3, #20]
 800b23e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b242:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b246:	2100      	movs	r1, #0
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff fcaf 	bl	800abac <xGetExtensionOrder>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	dd72      	ble.n	800b33a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b254:	e06b      	b.n	800b32e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25a:	4413      	add	r3, r2
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800b262:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b26a:	4611      	mov	r1, r2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff fc9d 	bl	800abac <xGetExtensionOrder>
 800b272:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	3301      	adds	r3, #1
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800b288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	4413      	add	r3, r2
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d806      	bhi.n	800b2a2 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b29a:	482d      	ldr	r0, [pc, #180]	@ (800b350 <usGetExtensionHeaderLength+0x150>)
 800b29c:	f016 fb7c 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800b2a0:	e051      	b.n	800b346 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800b2a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800b2aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2ae:	2b06      	cmp	r3, #6
 800b2b0:	d007      	beq.n	800b2c2 <usGetExtensionHeaderLength+0xc2>
 800b2b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2b6:	2b11      	cmp	r3, #17
 800b2b8:	d003      	beq.n	800b2c2 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800b2ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2be:	2b3a      	cmp	r3, #58	@ 0x3a
 800b2c0:	d10d      	bne.n	800b2de <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800b2c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4822      	ldr	r0, [pc, #136]	@ (800b354 <usGetExtensionHeaderLength+0x154>)
 800b2ca:	f016 fb65 	bl	8021998 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	3b36      	subs	r3, #54	@ 0x36
 800b2d2:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b2da:	701a      	strb	r2, [r3, #0]
                    break;
 800b2dc:	e033      	b.n	800b346 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	4413      	add	r3, r2
 800b2e4:	781a      	ldrb	r2, [r3, #0]
 800b2e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7ff fc5d 	bl	800abac <xGetExtensionOrder>
 800b2f2:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800b2f4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800b2f8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	4613      	mov	r3, r2
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	4814      	ldr	r0, [pc, #80]	@ (800b358 <usGetExtensionHeaderLength+0x158>)
 800b306:	f016 fb47 	bl	8021998 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d103      	bne.n	800b318 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800b310:	4812      	ldr	r0, [pc, #72]	@ (800b35c <usGetExtensionHeaderLength+0x15c>)
 800b312:	f016 fb41 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800b316:	e016      	b.n	800b346 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da03      	bge.n	800b326 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800b31e:	4810      	ldr	r0, [pc, #64]	@ (800b360 <usGetExtensionHeaderLength+0x160>)
 800b320:	f016 fb3a 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800b324:	e00f      	b.n	800b346 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800b326:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b32a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	3308      	adds	r3, #8
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	429a      	cmp	r2, r3
 800b336:	d88e      	bhi.n	800b256 <usGetExtensionHeaderLength+0x56>
 800b338:	e005      	b.n	800b346 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b340:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3730      	adds	r7, #48	@ 0x30
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	080248d8 	.word	0x080248d8
 800b354:	08024920 	.word	0x08024920
 800b358:	08024934 	.word	0x08024934
 800b35c:	0802495c 	.word	0x0802495c
 800b360:	080249bc 	.word	0x080249bc

0800b364 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d104      	bne.n	800b37e <vManageSolicitedNodeAddress+0x1a>
 800b374:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b378:	482d      	ldr	r0, [pc, #180]	@ (800b430 <vManageSolicitedNodeAddress+0xcc>)
 800b37a:	f7f6 f9e5 	bl	8001748 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <vManageSolicitedNodeAddress+0x2e>
 800b388:	f240 1133 	movw	r1, #307	@ 0x133
 800b38c:	4828      	ldr	r0, [pc, #160]	@ (800b430 <vManageSolicitedNodeAddress+0xcc>)
 800b38e:	f7f6 f9db 	bl	8001748 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	3338      	adds	r3, #56	@ 0x38
 800b396:	4618      	mov	r0, r3
 800b398:	f002 f9c2 	bl	800d720 <xIPv6_GetIPType>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800b3a0:	7bfb      	ldrb	r3, [r7, #15]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d005      	beq.n	800b3b2 <vManageSolicitedNodeAddress+0x4e>
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d002      	beq.n	800b3b2 <vManageSolicitedNodeAddress+0x4e>
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d138      	bne.n	800b424 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b3b2:	2333      	movs	r3, #51	@ 0x33
 800b3b4:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b3b6:	2333      	movs	r3, #51	@ 0x33
 800b3b8:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800b3ba:	23ff      	movs	r3, #255	@ 0xff
 800b3bc:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3c4:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b3cc:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b3d4:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d111      	bne.n	800b400 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01e      	beq.n	800b426 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b3f6:	f107 0108 	add.w	r1, r7, #8
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800b3fe:	e012      	b.n	800b426 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00c      	beq.n	800b426 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b412:	699b      	ldr	r3, [r3, #24]
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b41a:	f107 0108 	add.w	r1, r7, #8
 800b41e:	4610      	mov	r0, r2
 800b420:	4798      	blx	r3
}
 800b422:	e000      	b.n	800b426 <vManageSolicitedNodeAddress+0xc2>
            break;
 800b424:	bf00      	nop
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	080249e0 	.word	0x080249e0

0800b434 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b43a:	2000      	movs	r0, #0
 800b43c:	f001 fd8c 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800b440:	6078      	str	r0, [r7, #4]
 800b442:	e016      	b.n	800b472 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d009      	beq.n	800b468 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3338      	adds	r3, #56	@ 0x38
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 f961 	bl	800d720 <xIPv6_GetIPType>
 800b45e:	4603      	mov	r3, r0
 800b460:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800b462:	78fb      	ldrb	r3, [r7, #3]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d008      	beq.n	800b47a <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b468:	6879      	ldr	r1, [r7, #4]
 800b46a:	2000      	movs	r0, #0
 800b46c:	f001 fd96 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800b470:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e5      	bne.n	800b444 <pxFindLocalEndpoint+0x10>
 800b478:	e000      	b.n	800b47c <pxFindLocalEndpoint+0x48>
                {
                    break;
 800b47a:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800b47c:	687b      	ldr	r3, [r7, #4]
    }
 800b47e:	4618      	mov	r0, r3
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b486:	b580      	push	{r7, lr}
 800b488:	b086      	sub	sp, #24
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	60f8      	str	r0, [r7, #12]
 800b48e:	60b9      	str	r1, [r7, #8]
 800b490:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff faa8 	bl	800a9e8 <xIsIPv6AllowedMulticast>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f7ff fe8b 	bl	800b1bc <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d004      	beq.n	800b4b6 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800b4ac:	f7ff ffc2 	bl	800b434 <pxFindLocalEndpoint>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	75fb      	strb	r3, [r7, #23]
 800b4ba:	e001      	b.n	800b4c0 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800b4c0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
	...

0800b4cc <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f7ff ffd2 	bl	800b486 <prvMACResolve>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800b4e6:	7ffb      	ldrb	r3, [r7, #31]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d106      	bne.n	800b4fa <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	68b9      	ldr	r1, [r7, #8]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	f000 f9a9 	bl	800b848 <prvNDCacheLookup>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800b4fa:	7ffb      	ldrb	r3, [r7, #31]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d104      	bne.n	800b50a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	4619      	mov	r1, r3
 800b504:	4840      	ldr	r0, [pc, #256]	@ (800b608 <eNDGetCacheEntry+0x13c>)
 800b506:	f016 fa47 	bl	8021998 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800b50a:	7ffb      	ldrb	r3, [r7, #31]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d176      	bne.n	800b5fe <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f002 f905 	bl	800d720 <xIPv6_GetIPType>
 800b516:	4603      	mov	r3, r0
 800b518:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f001 fdae 	bl	800d07c <FreeRTOS_FindEndPointOnIP_IPv6>
 800b520:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00d      	beq.n	800b544 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d002      	beq.n	800b534 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	69ba      	ldr	r2, [r7, #24]
 800b532:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800b534:	68f9      	ldr	r1, [r7, #12]
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	3338      	adds	r3, #56	@ 0x38
 800b53a:	461a      	mov	r2, r3
 800b53c:	4833      	ldr	r0, [pc, #204]	@ (800b60c <eNDGetCacheEntry+0x140>)
 800b53e:	f016 fa2b 	bl	8021998 <lUDPLoggingPrintf>
 800b542:	e05c      	b.n	800b5fe <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d12b      	bne.n	800b5a2 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b54a:	2000      	movs	r0, #0
 800b54c:	f001 fd04 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800b550:	61b8      	str	r0, [r7, #24]
 800b552:	e017      	b.n	800b584 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	3338      	adds	r3, #56	@ 0x38
 800b558:	4618      	mov	r0, r3
 800b55a:	f002 f8e1 	bl	800d720 <xIPv6_GetIPType>
 800b55e:	4603      	mov	r3, r0
 800b560:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800b562:	7dba      	ldrb	r2, [r7, #22]
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	429a      	cmp	r2, r3
 800b568:	d107      	bne.n	800b57a <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f96a 	bl	800b848 <prvNDCacheLookup>
 800b574:	4603      	mov	r3, r0
 800b576:	77fb      	strb	r3, [r7, #31]
                            break;
 800b578:	e007      	b.n	800b58a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b57a:	69b9      	ldr	r1, [r7, #24]
 800b57c:	2000      	movs	r0, #0
 800b57e:	f001 fd0d 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800b582:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800b584:	69bb      	ldr	r3, [r7, #24]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d1e4      	bne.n	800b554 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800b58a:	68f9      	ldr	r1, [r7, #12]
 800b58c:	7ffb      	ldrb	r3, [r7, #31]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d101      	bne.n	800b596 <eNDGetCacheEntry+0xca>
 800b592:	4b1f      	ldr	r3, [pc, #124]	@ (800b610 <eNDGetCacheEntry+0x144>)
 800b594:	e000      	b.n	800b598 <eNDGetCacheEntry+0xcc>
 800b596:	4b1f      	ldr	r3, [pc, #124]	@ (800b614 <eNDGetCacheEntry+0x148>)
 800b598:	461a      	mov	r2, r3
 800b59a:	481f      	ldr	r0, [pc, #124]	@ (800b618 <eNDGetCacheEntry+0x14c>)
 800b59c:	f016 f9fc 	bl	8021998 <lUDPLoggingPrintf>
 800b5a0:	e02d      	b.n	800b5fe <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800b5a2:	2060      	movs	r0, #96	@ 0x60
 800b5a4:	f002 f87c 	bl	800d6a0 <FreeRTOS_FindGateWay>
 800b5a8:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d026      	beq.n	800b5fe <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	335c      	adds	r3, #92	@ 0x5c
 800b5b6:	2210      	movs	r2, #16
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	f016 fc09 	bl	8021dd0 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	4816      	ldr	r0, [pc, #88]	@ (800b61c <eNDGetCacheEntry+0x150>)
 800b5c4:	f016 f9e8 	bl	8021998 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	3338      	adds	r3, #56	@ 0x38
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4814      	ldr	r0, [pc, #80]	@ (800b620 <eNDGetCacheEntry+0x154>)
 800b5d0:	f016 f9e2 	bl	8021998 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	68b9      	ldr	r1, [r7, #8]
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f000 f935 	bl	800b848 <prvNDCacheLookup>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d006      	beq.n	800b5f8 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3338      	adds	r3, #56	@ 0x38
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	480c      	ldr	r0, [pc, #48]	@ (800b624 <eNDGetCacheEntry+0x158>)
 800b5f4:	f016 f9d0 	bl	8021998 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800b5fe:	7ffb      	ldrb	r3, [r7, #31]
    }
 800b600:	4618      	mov	r0, r3
 800b602:	3720      	adds	r7, #32
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	08024a14 	.word	0x08024a14
 800b60c:	08024a38 	.word	0x08024a38
 800b610:	08024a7c 	.word	0x08024a7c
 800b614:	08024a80 	.word	0x08024a80
 800b618:	08024a88 	.word	0x08024a88
 800b61c:	08024ab0 	.word	0x08024ab0
 800b620:	08024ad4 	.word	0x08024ad4
 800b624:	08024af8 	.word	0x08024af8

0800b628 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800b628:	b5b0      	push	{r4, r5, r7, lr}
 800b62a:	b08e      	sub	sp, #56	@ 0x38
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800b634:	f04f 33ff 	mov.w	r3, #4294967295
 800b638:	623b      	str	r3, [r7, #32]
 800b63a:	f04f 33ff 	mov.w	r3, #4294967295
 800b63e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800b640:	2397      	movs	r3, #151	@ 0x97
 800b642:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800b644:	2300      	movs	r3, #0
 800b646:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b648:	2300      	movs	r3, #0
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b64c:	e033      	b.n	800b6b6 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b64e:	4a44      	ldr	r2, [pc, #272]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b652:	015b      	lsls	r3, r3, #5
 800b654:	4413      	add	r3, r2
 800b656:	331d      	adds	r3, #29
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b664:	d124      	bne.n	800b6b0 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	623b      	str	r3, [r7, #32]
 800b66a:	e021      	b.n	800b6b0 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66e:	015b      	lsls	r3, r3, #5
 800b670:	4a3b      	ldr	r2, [pc, #236]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b672:	4413      	add	r3, r2
 800b674:	68b9      	ldr	r1, [r7, #8]
 800b676:	2210      	movs	r2, #16
 800b678:	4618      	mov	r0, r3
 800b67a:	f017 fb3e 	bl	8022cfa <memcmp>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d102      	bne.n	800b68a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	61fb      	str	r3, [r7, #28]
                break;
 800b688:	e018      	b.n	800b6bc <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800b68a:	4a35      	ldr	r2, [pc, #212]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	015b      	lsls	r3, r3, #5
 800b690:	4413      	add	r3, r2
 800b692:	331c      	adds	r3, #28
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	461a      	mov	r2, r3
 800b698:	8b7b      	ldrh	r3, [r7, #26]
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d908      	bls.n	800b6b0 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800b69e:	4a30      	ldr	r2, [pc, #192]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	015b      	lsls	r3, r3, #5
 800b6a4:	4413      	add	r3, r2
 800b6a6:	331c      	adds	r3, #28
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b8:	2b17      	cmp	r3, #23
 800b6ba:	ddc8      	ble.n	800b64e <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	da22      	bge.n	800b708 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	db02      	blt.n	800b6ce <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	61fb      	str	r3, [r7, #28]
 800b6cc:	e01c      	b.n	800b708 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	461c      	mov	r4, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	785b      	ldrb	r3, [r3, #1]
 800b6dc:	461d      	mov	r5, r3
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	789b      	ldrb	r3, [r3, #2]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	78db      	ldrb	r3, [r3, #3]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	791b      	ldrb	r3, [r3, #4]
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	795b      	ldrb	r3, [r3, #5]
 800b6f4:	9303      	str	r3, [sp, #12]
 800b6f6:	9002      	str	r0, [sp, #8]
 800b6f8:	9101      	str	r1, [sp, #4]
 800b6fa:	9200      	str	r2, [sp, #0]
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	4622      	mov	r2, r4
 800b700:	69f9      	ldr	r1, [r7, #28]
 800b702:	4818      	ldr	r0, [pc, #96]	@ (800b764 <vNDRefreshCacheEntry+0x13c>)
 800b704:	f016 f948 	bl	8021998 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	015b      	lsls	r3, r3, #5
 800b70c:	4a14      	ldr	r2, [pc, #80]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b70e:	4413      	add	r3, r2
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	2210      	movs	r2, #16
 800b714:	4618      	mov	r0, r3
 800b716:	f016 fb5b 	bl	8021dd0 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	015b      	lsls	r3, r3, #5
 800b71e:	3310      	adds	r3, #16
 800b720:	4a0f      	ldr	r2, [pc, #60]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b722:	4413      	add	r3, r2
 800b724:	68f9      	ldr	r1, [r7, #12]
 800b726:	2206      	movs	r2, #6
 800b728:	4618      	mov	r0, r3
 800b72a:	f016 fb51 	bl	8021dd0 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800b72e:	4a0c      	ldr	r2, [pc, #48]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	015b      	lsls	r3, r3, #5
 800b734:	4413      	add	r3, r2
 800b736:	3318      	adds	r3, #24
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b73c:	4a08      	ldr	r2, [pc, #32]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	015b      	lsls	r3, r3, #5
 800b742:	4413      	add	r3, r2
 800b744:	331c      	adds	r3, #28
 800b746:	2296      	movs	r2, #150	@ 0x96
 800b748:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800b74a:	4a05      	ldr	r2, [pc, #20]	@ (800b760 <vNDRefreshCacheEntry+0x138>)
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	015b      	lsls	r3, r3, #5
 800b750:	4413      	add	r3, r2
 800b752:	331d      	adds	r3, #29
 800b754:	2201      	movs	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
    }
 800b758:	bf00      	nop
 800b75a:	3728      	adds	r7, #40	@ 0x28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bdb0      	pop	{r4, r5, r7, pc}
 800b760:	20001060 	.word	0x20001060
 800b764:	08024b20 	.word	0x08024b20

0800b768 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b76e:	2300      	movs	r3, #0
 800b770:	60fb      	str	r3, [r7, #12]
 800b772:	e05f      	b.n	800b834 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800b774:	2300      	movs	r3, #0
 800b776:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800b778:	4a32      	ldr	r2, [pc, #200]	@ (800b844 <vNDAgeCache+0xdc>)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	015b      	lsls	r3, r3, #5
 800b77e:	4413      	add	r3, r2
 800b780:	331c      	adds	r3, #28
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d052      	beq.n	800b82e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800b788:	4a2e      	ldr	r2, [pc, #184]	@ (800b844 <vNDAgeCache+0xdc>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	015b      	lsls	r3, r3, #5
 800b78e:	4413      	add	r3, r2
 800b790:	331c      	adds	r3, #28
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	3b01      	subs	r3, #1
 800b796:	b2d9      	uxtb	r1, r3
 800b798:	4a2a      	ldr	r2, [pc, #168]	@ (800b844 <vNDAgeCache+0xdc>)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	015b      	lsls	r3, r3, #5
 800b79e:	4413      	add	r3, r2
 800b7a0:	331c      	adds	r3, #28
 800b7a2:	460a      	mov	r2, r1
 800b7a4:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800b7a6:	4a27      	ldr	r2, [pc, #156]	@ (800b844 <vNDAgeCache+0xdc>)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	015b      	lsls	r3, r3, #5
 800b7ac:	4413      	add	r3, r2
 800b7ae:	331c      	adds	r3, #28
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	015b      	lsls	r3, r3, #5
 800b7ba:	4a22      	ldr	r2, [pc, #136]	@ (800b844 <vNDAgeCache+0xdc>)
 800b7bc:	4413      	add	r3, r2
 800b7be:	2220      	movs	r2, #32
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f016 fc11 	bl	8021fea <memset>
 800b7c8:	e031      	b.n	800b82e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b7ca:	4a1e      	ldr	r2, [pc, #120]	@ (800b844 <vNDAgeCache+0xdc>)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	015b      	lsls	r3, r3, #5
 800b7d0:	4413      	add	r3, r2
 800b7d2:	331d      	adds	r3, #29
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d102      	bne.n	800b7e0 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	60bb      	str	r3, [r7, #8]
 800b7de:	e009      	b.n	800b7f4 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800b7e0:	4a18      	ldr	r2, [pc, #96]	@ (800b844 <vNDAgeCache+0xdc>)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	015b      	lsls	r3, r3, #5
 800b7e6:	4413      	add	r3, r2
 800b7e8:	331c      	adds	r3, #28
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d801      	bhi.n	800b7f4 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d019      	beq.n	800b82e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b7fa:	2356      	movs	r3, #86	@ 0x56
 800b7fc:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800b7fe:	2100      	movs	r1, #0
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f00b f9b9 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 800b806:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00f      	beq.n	800b82e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800b80e:	4a0d      	ldr	r2, [pc, #52]	@ (800b844 <vNDAgeCache+0xdc>)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	015b      	lsls	r3, r3, #5
 800b814:	4413      	add	r3, r2
 800b816:	3318      	adds	r3, #24
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	015b      	lsls	r3, r3, #5
 800b822:	4a08      	ldr	r2, [pc, #32]	@ (800b844 <vNDAgeCache+0xdc>)
 800b824:	4413      	add	r3, r2
 800b826:	4619      	mov	r1, r3
 800b828:	6838      	ldr	r0, [r7, #0]
 800b82a:	f000 f8bb 	bl	800b9a4 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3301      	adds	r3, #1
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2b17      	cmp	r3, #23
 800b838:	dd9c      	ble.n	800b774 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20001060 	.word	0x20001060

0800b848 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800b848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84a:	b08d      	sub	sp, #52	@ 0x34
 800b84c:	af06      	add	r7, sp, #24
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800b854:	2300      	movs	r3, #0
 800b856:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	e04a      	b.n	800b8f4 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b85e:	4a30      	ldr	r2, [pc, #192]	@ (800b920 <prvNDCacheLookup+0xd8>)
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	015b      	lsls	r3, r3, #5
 800b864:	4413      	add	r3, r2
 800b866:	331d      	adds	r3, #29
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d03f      	beq.n	800b8ee <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	015b      	lsls	r3, r3, #5
 800b872:	4a2b      	ldr	r2, [pc, #172]	@ (800b920 <prvNDCacheLookup+0xd8>)
 800b874:	4413      	add	r3, r2
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	2210      	movs	r2, #16
 800b87a:	4618      	mov	r0, r3
 800b87c:	f017 fa3d 	bl	8022cfa <memcmp>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d133      	bne.n	800b8ee <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b886:	68b8      	ldr	r0, [r7, #8]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	015b      	lsls	r3, r3, #5
 800b88c:	3310      	adds	r3, #16
 800b88e:	4a24      	ldr	r2, [pc, #144]	@ (800b920 <prvNDCacheLookup+0xd8>)
 800b890:	4413      	add	r3, r2
 800b892:	2206      	movs	r2, #6
 800b894:	4619      	mov	r1, r3
 800b896:	f016 fa9b 	bl	8021dd0 <memcpy>
                eReturn = eARPCacheHit;
 800b89a:	2301      	movs	r3, #1
 800b89c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d007      	beq.n	800b8b4 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800b8a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b920 <prvNDCacheLookup+0xd8>)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	015b      	lsls	r3, r3, #5
 800b8aa:	4413      	add	r3, r2
 800b8ac:	3318      	adds	r3, #24
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	461e      	mov	r6, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	789b      	ldrb	r3, [r3, #2]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	461c      	mov	r4, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	791b      	ldrb	r3, [r3, #4]
 800b8d2:	461d      	mov	r5, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	795b      	ldrb	r3, [r3, #5]
 800b8d8:	9304      	str	r3, [sp, #16]
 800b8da:	9503      	str	r5, [sp, #12]
 800b8dc:	9402      	str	r4, [sp, #8]
 800b8de:	9001      	str	r0, [sp, #4]
 800b8e0:	9100      	str	r1, [sp, #0]
 800b8e2:	4633      	mov	r3, r6
 800b8e4:	6979      	ldr	r1, [r7, #20]
 800b8e6:	480f      	ldr	r0, [pc, #60]	@ (800b924 <prvNDCacheLookup+0xdc>)
 800b8e8:	f016 f856 	bl	8021998 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800b8ec:	e005      	b.n	800b8fa <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	617b      	str	r3, [r7, #20]
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b17      	cmp	r3, #23
 800b8f8:	ddb1      	ble.n	800b85e <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b8fa:	7cfb      	ldrb	r3, [r7, #19]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4619      	mov	r1, r3
 800b904:	4808      	ldr	r0, [pc, #32]	@ (800b928 <prvNDCacheLookup+0xe0>)
 800b906:	f016 f847 	bl	8021998 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d002      	beq.n	800b916 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b916:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b918:	4618      	mov	r0, r3
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b920:	20001060 	.word	0x20001060
 800b924:	08024b84 	.word	0x08024b84
 800b928:	08024bc4 	.word	0x08024bc4

0800b92c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b93a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b940:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	3316      	adds	r3, #22
 800b94c:	2210      	movs	r2, #16
 800b94e:	4619      	mov	r1, r3
 800b950:	f016 fa3e 	bl	8021dd0 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	f103 0016 	add.w	r0, r3, #22
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3338      	adds	r3, #56	@ 0x38
 800b95e:	2210      	movs	r2, #16
 800b960:	4619      	mov	r1, r3
 800b962:	f016 fa35 	bl	8021dd0 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	b29b      	uxth	r3, r3
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	0a1b      	lsrs	r3, r3, #8
 800b972:	b29b      	uxth	r3, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	b29a      	uxth	r2, r3
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b994:	2100      	movs	r1, #0
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7fd fe46 	bl	8009628 <vReturnEthernetFrame>
    }
 800b99c:	bf00      	nop
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b9a4:	b5b0      	push	{r4, r5, r7, lr}
 800b9a6:	b090      	sub	sp, #64	@ 0x40
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b2:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80c1 	beq.w	800bb4a <vNDSendNeighbourSolicitation+0x1a6>
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ca:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9ce:	f003 0304 	and.w	r3, r3, #4
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 80b8 	beq.w	800bb4a <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b9da:	2356      	movs	r3, #86	@ 0x56
 800b9dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d909      	bls.n	800b9fc <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b9e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b9ec:	f7fe f9ce 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 800b9f0:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b9f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b9f4:	f00b f928 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b9fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f000 80a3 	beq.w	800bb4a <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800ba04:	2320      	movs	r3, #32
 800ba06:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800ba08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba0c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800ba0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba10:	3336      	adds	r3, #54	@ 0x36
 800ba12:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800ba14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba18:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800ba1a:	2333      	movs	r3, #51	@ 0x33
 800ba1c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800ba1e:	2333      	movs	r3, #51	@ 0x33
 800ba20:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800ba22:	23ff      	movs	r3, #255	@ 0xff
 800ba24:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	7b5b      	ldrb	r3, [r3, #13]
 800ba2a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	7b9b      	ldrb	r3, [r3, #14]
 800ba30:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	7bdb      	ldrb	r3, [r3, #15]
 800ba36:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	3306      	adds	r3, #6
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	f107 0308 	add.w	r3, r7, #8
 800ba42:	6818      	ldr	r0, [r3, #0]
 800ba44:	6010      	str	r0, [r2, #0]
 800ba46:	889b      	ldrh	r3, [r3, #4]
 800ba48:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800ba4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4e:	33e8      	adds	r3, #232	@ 0xe8
 800ba50:	2206      	movs	r2, #6
 800ba52:	4619      	mov	r1, r3
 800ba54:	f016 f9bc 	bl	8021dd0 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800ba60:	731a      	strb	r2, [r3, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800ba68:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6c:	2260      	movs	r2, #96	@ 0x60
 800ba6e:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba72:	2200      	movs	r2, #0
 800ba74:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	2200      	movs	r2, #0
 800ba7a:	741a      	strb	r2, [r3, #16]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800ba80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	021b      	lsls	r3, r3, #8
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba98:	223a      	movs	r2, #58	@ 0x3a
 800ba9a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	22ff      	movs	r2, #255	@ 0xff
 800baa0:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800baa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa4:	f103 0016 	add.w	r0, r3, #22
 800baa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baaa:	3338      	adds	r3, #56	@ 0x38
 800baac:	2210      	movs	r2, #16
 800baae:	4619      	mov	r1, r3
 800bab0:	f016 f98e 	bl	8021dd0 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800bab4:	f107 0310 	add.w	r3, r7, #16
 800bab8:	2210      	movs	r2, #16
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f016 fa94 	bl	8021fea <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800bac2:	23ff      	movs	r3, #255	@ 0xff
 800bac4:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800bac6:	2302      	movs	r3, #2
 800bac8:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800baca:	2301      	movs	r3, #1
 800bacc:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800bace:	23ff      	movs	r3, #255	@ 0xff
 800bad0:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	7b5b      	ldrb	r3, [r3, #13]
 800bad6:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	7b9b      	ldrb	r3, [r3, #14]
 800badc:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	7bdb      	ldrb	r3, [r3, #15]
 800bae2:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae6:	3326      	adds	r3, #38	@ 0x26
 800bae8:	461d      	mov	r5, r3
 800baea:	f107 0410 	add.w	r4, r7, #16
 800baee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800baf0:	6028      	str	r0, [r5, #0]
 800baf2:	6069      	str	r1, [r5, #4]
 800baf4:	60aa      	str	r2, [r5, #8]
 800baf6:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800baf8:	2220      	movs	r2, #32
 800bafa:	2100      	movs	r1, #0
 800bafc:	6a38      	ldr	r0, [r7, #32]
 800bafe:	f016 fa74 	bl	8021fea <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800bb02:	6a3b      	ldr	r3, [r7, #32]
 800bb04:	2287      	movs	r2, #135	@ 0x87
 800bb06:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	2210      	movs	r2, #16
 800bb10:	4618      	mov	r0, r3
 800bb12:	f016 f95d 	bl	8021dd0 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	f103 001a 	add.w	r0, r3, #26
 800bb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2a:	33e8      	adds	r3, #232	@ 0xe8
 800bb2c:	2206      	movs	r2, #6
 800bb2e:	4619      	mov	r1, r3
 800bb30:	f016 f94e 	bl	8021dd0 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	2200      	movs	r2, #0
 800bb38:	709a      	strb	r2, [r3, #2]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800bb3e:	2101      	movs	r1, #1
 800bb40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb42:	f7fd fd71 	bl	8009628 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800bb46:	2301      	movs	r3, #1
 800bb48:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800bb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <vNDSendNeighbourSolicitation+0x1b8>
 800bb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d102      	bne.n	800bb5c <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bb56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb58:	f00b f876 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800bb5c:	bf00      	nop
 800bb5e:	3740      	adds	r7, #64	@ 0x40
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bdb0      	pop	{r4, r5, r7, pc}

0800bb64 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b04      	cmp	r3, #4
 800bb72:	dc29      	bgt.n	800bbc8 <pcMessageType+0x64>
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	dc19      	bgt.n	800bbac <pcMessageType+0x48>
 800bb78:	e049      	b.n	800bc0e <pcMessageType+0xaa>
 800bb7a:	3b80      	subs	r3, #128	@ 0x80
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d846      	bhi.n	800bc0e <pcMessageType+0xaa>
 800bb80:	a201      	add	r2, pc, #4	@ (adr r2, 800bb88 <pcMessageType+0x24>)
 800bb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb86:	bf00      	nop
 800bb88:	0800bbeb 	.word	0x0800bbeb
 800bb8c:	0800bbf1 	.word	0x0800bbf1
 800bb90:	0800bc0f 	.word	0x0800bc0f
 800bb94:	0800bc0f 	.word	0x0800bc0f
 800bb98:	0800bc0f 	.word	0x0800bc0f
 800bb9c:	0800bbf7 	.word	0x0800bbf7
 800bba0:	0800bbfd 	.word	0x0800bbfd
 800bba4:	0800bc03 	.word	0x0800bc03
 800bba8:	0800bc09 	.word	0x0800bc09
 800bbac:	3b01      	subs	r3, #1
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d82d      	bhi.n	800bc0e <pcMessageType+0xaa>
 800bbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb8 <pcMessageType+0x54>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bbd3 	.word	0x0800bbd3
 800bbbc:	0800bbd9 	.word	0x0800bbd9
 800bbc0:	0800bbdf 	.word	0x0800bbdf
 800bbc4:	0800bbe5 	.word	0x0800bbe5
 800bbc8:	2b88      	cmp	r3, #136	@ 0x88
 800bbca:	dc20      	bgt.n	800bc0e <pcMessageType+0xaa>
 800bbcc:	2b80      	cmp	r3, #128	@ 0x80
 800bbce:	dad4      	bge.n	800bb7a <pcMessageType+0x16>
 800bbd0:	e01d      	b.n	800bc0e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800bbd2:	4b14      	ldr	r3, [pc, #80]	@ (800bc24 <pcMessageType+0xc0>)
 800bbd4:	60fb      	str	r3, [r7, #12]
                    break;
 800bbd6:	e01d      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800bbd8:	4b13      	ldr	r3, [pc, #76]	@ (800bc28 <pcMessageType+0xc4>)
 800bbda:	60fb      	str	r3, [r7, #12]
                    break;
 800bbdc:	e01a      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800bbde:	4b13      	ldr	r3, [pc, #76]	@ (800bc2c <pcMessageType+0xc8>)
 800bbe0:	60fb      	str	r3, [r7, #12]
                    break;
 800bbe2:	e017      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800bbe4:	4b12      	ldr	r3, [pc, #72]	@ (800bc30 <pcMessageType+0xcc>)
 800bbe6:	60fb      	str	r3, [r7, #12]
                    break;
 800bbe8:	e014      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800bbea:	4b12      	ldr	r3, [pc, #72]	@ (800bc34 <pcMessageType+0xd0>)
 800bbec:	60fb      	str	r3, [r7, #12]
                    break;
 800bbee:	e011      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800bbf0:	4b11      	ldr	r3, [pc, #68]	@ (800bc38 <pcMessageType+0xd4>)
 800bbf2:	60fb      	str	r3, [r7, #12]
                    break;
 800bbf4:	e00e      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800bbf6:	4b11      	ldr	r3, [pc, #68]	@ (800bc3c <pcMessageType+0xd8>)
 800bbf8:	60fb      	str	r3, [r7, #12]
                    break;
 800bbfa:	e00b      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800bbfc:	4b10      	ldr	r3, [pc, #64]	@ (800bc40 <pcMessageType+0xdc>)
 800bbfe:	60fb      	str	r3, [r7, #12]
                    break;
 800bc00:	e008      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800bc02:	4b10      	ldr	r3, [pc, #64]	@ (800bc44 <pcMessageType+0xe0>)
 800bc04:	60fb      	str	r3, [r7, #12]
                    break;
 800bc06:	e005      	b.n	800bc14 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800bc08:	4b0f      	ldr	r3, [pc, #60]	@ (800bc48 <pcMessageType+0xe4>)
 800bc0a:	60fb      	str	r3, [r7, #12]
                    break;
 800bc0c:	e002      	b.n	800bc14 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800bc0e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc4c <pcMessageType+0xe8>)
 800bc10:	60fb      	str	r3, [r7, #12]
                    break;
 800bc12:	bf00      	nop
            }

            return pcReturn;
 800bc14:	68fb      	ldr	r3, [r7, #12]
        }
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	08024c8c 	.word	0x08024c8c
 800bc28:	08024ca0 	.word	0x08024ca0
 800bc2c:	08024cb0 	.word	0x08024cb0
 800bc30:	08024cc0 	.word	0x08024cc0
 800bc34:	08024cd4 	.word	0x08024cd4
 800bc38:	08024ce4 	.word	0x08024ce4
 800bc3c:	08024cf0 	.word	0x08024cf0
 800bc40:	08024cfc 	.word	0x08024cfc
 800bc44:	08024d08 	.word	0x08024d08
 800bc48:	08024d18 	.word	0x08024d18
 800bc4c:	08024d28 	.word	0x08024d28

0800bc50 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800bc58:	4b19      	ldr	r3, [pc, #100]	@ (800bcc0 <prvCheckWaitingBuffer+0x70>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc5e:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	330e      	adds	r3, #14
 800bc64:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	2210      	movs	r2, #16
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f017 f843 	bl	8022cfa <memcmp>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d11d      	bne.n	800bcb6 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800bc7e:	4811      	ldr	r0, [pc, #68]	@ (800bcc4 <prvCheckWaitingBuffer+0x74>)
 800bc80:	f015 fe8a 	bl	8021998 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800bc84:	2301      	movs	r3, #1
 800bc86:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800bc88:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc0 <prvCheckWaitingBuffer+0x70>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800bc8e:	f107 030c 	add.w	r3, r7, #12
 800bc92:	6979      	ldr	r1, [r7, #20]
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fd fa13 	bl	80090c0 <xSendEventStructToIPTask>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d004      	beq.n	800bcaa <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800bca0:	4b07      	ldr	r3, [pc, #28]	@ (800bcc0 <prvCheckWaitingBuffer+0x70>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f00a ffcf 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800bcaa:	4b05      	ldr	r3, [pc, #20]	@ (800bcc0 <prvCheckWaitingBuffer+0x70>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f7fd fffb 	bl	8009cac <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800bcb6:	bf00      	nop
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000fd4 	.word	0x20000fd4
 800bcc4:	08024d38 	.word	0x08024d38

0800bcc8 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bccc:	b09e      	sub	sp, #120	@ 0x78
 800bcce:	af02      	add	r7, sp, #8
 800bcd0:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bcd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcda:	3336      	adds	r3, #54	@ 0x36
 800bcdc:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce2:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800bce4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b80      	cmp	r3, #128	@ 0x80
 800bcea:	d01e      	beq.n	800bd2a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800bcec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	4698      	mov	r8, r3
 800bcf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7ff ff34 	bl	800bb64 <pcMessageType>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd00:	f103 0516 	add.w	r5, r3, #22
 800bd04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd06:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800bd0a:	f107 030c 	add.w	r3, r7, #12
 800bd0e:	2228      	movs	r2, #40	@ 0x28
 800bd10:	4619      	mov	r1, r3
 800bd12:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bd14:	f001 fd5c 	bl	800d7d0 <pcEndpointName>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	9400      	str	r4, [sp, #0]
 800bd1e:	462b      	mov	r3, r5
 800bd20:	4632      	mov	r2, r6
 800bd22:	4641      	mov	r1, r8
 800bd24:	48a7      	ldr	r0, [pc, #668]	@ (800bfc4 <prvProcessICMPMessage_IPv6+0x2fc>)
 800bd26:	f015 fe37 	bl	8021998 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800bd2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd2c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bd30:	f003 0304 	and.w	r3, r3, #4
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 813e 	beq.w	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bd3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b04      	cmp	r3, #4
 800bd42:	dc1d      	bgt.n	800bd80 <prvProcessICMPMessage_IPv6+0xb8>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f300 8130 	bgt.w	800bfaa <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800bd4a:	e130      	b.n	800bfae <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800bd4c:	3b80      	subs	r3, #128	@ 0x80
 800bd4e:	2b08      	cmp	r3, #8
 800bd50:	f200 812d 	bhi.w	800bfae <prvProcessICMPMessage_IPv6+0x2e6>
 800bd54:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <prvProcessICMPMessage_IPv6+0x94>)
 800bd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5a:	bf00      	nop
 800bd5c:	0800bd8d 	.word	0x0800bd8d
 800bd60:	0800bdd5 	.word	0x0800bdd5
 800bd64:	0800bfaf 	.word	0x0800bfaf
 800bd68:	0800bfaf 	.word	0x0800bfaf
 800bd6c:	0800bfaf 	.word	0x0800bfaf
 800bd70:	0800bfaf 	.word	0x0800bfaf
 800bd74:	0800bfa3 	.word	0x0800bfa3
 800bd78:	0800be4b 	.word	0x0800be4b
 800bd7c:	0800bf5b 	.word	0x0800bf5b
 800bd80:	2b88      	cmp	r3, #136	@ 0x88
 800bd82:	f300 8114 	bgt.w	800bfae <prvProcessICMPMessage_IPv6+0x2e6>
 800bd86:	2b80      	cmp	r3, #128	@ 0x80
 800bd88:	dae0      	bge.n	800bd4c <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800bd8a:	e110      	b.n	800bfae <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800bd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd8e:	8a5b      	ldrh	r3, [r3, #18]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	b21a      	sxth	r2, r3
 800bd96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd98:	8a5b      	ldrh	r3, [r3, #18]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	0a1b      	lsrs	r3, r3, #8
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	b21b      	sxth	r3, r3
 800bda2:	4313      	orrs	r3, r2
 800bda4:	b21b      	sxth	r3, r3
 800bda6:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800bda8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bdaa:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdae:	3336      	adds	r3, #54	@ 0x36
 800bdb0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d903      	bls.n	800bdc4 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800bdbc:	4882      	ldr	r0, [pc, #520]	@ (800bfc8 <prvProcessICMPMessage_IPv6+0x300>)
 800bdbe:	f015 fdeb 	bl	8021998 <lUDPLoggingPrintf>
                           break;
 800bdc2:	e0f9      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800bdc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdc6:	2281      	movs	r2, #129	@ 0x81
 800bdc8:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800bdca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f7ff fdad 	bl	800b92c <prvReturnICMP_IPv6>
                   break;
 800bdd2:	e0f1      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800bdda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bddc:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800bdde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bde0:	8a5b      	ldrh	r3, [r3, #18]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	021b      	lsls	r3, r3, #8
 800bde6:	b21a      	sxth	r2, r3
 800bde8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bdea:	8a5b      	ldrh	r3, [r3, #18]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	0a1b      	lsrs	r3, r3, #8
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	b21b      	sxth	r3, r3
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	b21b      	sxth	r3, r3
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800bdfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfe:	3b08      	subs	r3, #8
 800be00:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800be02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be04:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800be06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be08:	3308      	adds	r3, #8
 800be0a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800be0c:	2300      	movs	r3, #0
 800be0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be10:	e00d      	b.n	800be2e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800be12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	2b78      	cmp	r3, #120	@ 0x78
 800be18:	d003      	beq.n	800be22 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800be1a:	2302      	movs	r3, #2
 800be1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800be20:	e009      	b.n	800be36 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800be22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be24:	3301      	adds	r3, #1
 800be26:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800be28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be2a:	3301      	adds	r3, #1
 800be2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be32:	429a      	cmp	r2, r3
 800be34:	d3ed      	bcc.n	800be12 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800be36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be38:	889b      	ldrh	r3, [r3, #4]
 800be3a:	b29a      	uxth	r2, r3
 800be3c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800be40:	4611      	mov	r1, r2
 800be42:	4618      	mov	r0, r3
 800be44:	f7f5 fd36 	bl	80018b4 <vApplicationPingReplyHook>
                           break;
 800be48:	e0b6      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800be4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4c:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be54:	3308      	adds	r3, #8
 800be56:	4619      	mov	r1, r3
 800be58:	4610      	mov	r0, r2
 800be5a:	f001 f9cd 	bl	800d1f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800be5e:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800be60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800be66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be68:	663b      	str	r3, [r7, #96]	@ 0x60
 800be6a:	e005      	b.n	800be78 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800be6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be6e:	3308      	adds	r3, #8
 800be70:	4619      	mov	r1, r3
 800be72:	4856      	ldr	r0, [pc, #344]	@ (800bfcc <prvProcessICMPMessage_IPv6+0x304>)
 800be74:	f015 fd90 	bl	8021998 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800be78:	2320      	movs	r3, #32
 800be7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800be7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be7e:	3336      	adds	r3, #54	@ 0x36
 800be80:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be88:	429a      	cmp	r2, r3
 800be8a:	d903      	bls.n	800be94 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800be8c:	484e      	ldr	r0, [pc, #312]	@ (800bfc8 <prvProcessICMPMessage_IPv6+0x300>)
 800be8e:	f015 fd83 	bl	8021998 <lUDPLoggingPrintf>
                           break;
 800be92:	e091      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800be94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be96:	f103 0008 	add.w	r0, r3, #8
 800be9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be9c:	3338      	adds	r3, #56	@ 0x38
 800be9e:	2210      	movs	r2, #16
 800bea0:	4619      	mov	r1, r3
 800bea2:	f016 ff2a 	bl	8022cfa <memcmp>
 800bea6:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800bea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beaa:	f103 0108 	add.w	r1, r3, #8
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800beb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <prvProcessICMPMessage_IPv6+0x1f8>
 800bebc:	4b44      	ldr	r3, [pc, #272]	@ (800bfd0 <prvProcessICMPMessage_IPv6+0x308>)
 800bebe:	e000      	b.n	800bec2 <prvProcessICMPMessage_IPv6+0x1fa>
 800bec0:	4b44      	ldr	r3, [pc, #272]	@ (800bfd4 <prvProcessICMPMessage_IPv6+0x30c>)
 800bec2:	4845      	ldr	r0, [pc, #276]	@ (800bfd8 <prvProcessICMPMessage_IPv6+0x310>)
 800bec4:	f015 fd68 	bl	8021998 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800bec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beca:	2b00      	cmp	r3, #0
 800becc:	d171      	bne.n	800bfb2 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bed0:	2288      	movs	r2, #136	@ 0x88
 800bed2:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800bed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bed6:	2200      	movs	r2, #0
 800bed8:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800beda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bedc:	2200      	movs	r2, #0
 800bede:	711a      	strb	r2, [r3, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	715a      	strb	r2, [r3, #5]
 800bee4:	2200      	movs	r2, #0
 800bee6:	719a      	strb	r2, [r3, #6]
 800bee8:	2200      	movs	r2, #0
 800beea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800beee:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800bef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	061a      	lsls	r2, r3, #24
 800bef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	021b      	lsls	r3, r3, #8
 800befc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf00:	431a      	orrs	r2, r3
 800bf02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	0a1b      	lsrs	r3, r3, #8
 800bf08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	0e1b      	lsrs	r3, r3, #24
 800bf14:	431a      	orrs	r2, r3
 800bf16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf18:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800bf1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf1c:	2202      	movs	r2, #2
 800bf1e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800bf20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf22:	2201      	movs	r2, #1
 800bf24:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800bf26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf28:	f103 001a 	add.w	r0, r3, #26
 800bf2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf2e:	33e8      	adds	r3, #232	@ 0xe8
 800bf30:	2206      	movs	r2, #6
 800bf32:	4619      	mov	r1, r3
 800bf34:	f015 ff4c 	bl	8021dd0 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800bf38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf3a:	22ff      	movs	r2, #255	@ 0xff
 800bf3c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800bf3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf40:	f103 0008 	add.w	r0, r3, #8
 800bf44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf46:	3338      	adds	r3, #56	@ 0x38
 800bf48:	2210      	movs	r2, #16
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	f015 ff40 	bl	8021dd0 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800bf50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7ff fcea 	bl	800b92c <prvReturnICMP_IPv6>
                   break;
 800bf58:	e02b      	b.n	800bfb2 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800bf5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf5c:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800bf60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf62:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800bf64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf66:	4619      	mov	r1, r3
 800bf68:	f7ff fb5e 	bl	800b628 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800bf6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf6e:	3308      	adds	r3, #8
 800bf70:	4619      	mov	r1, r3
 800bf72:	481a      	ldr	r0, [pc, #104]	@ (800bfdc <prvProcessICMPMessage_IPv6+0x314>)
 800bf74:	f015 fd10 	bl	8021998 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fa89 	bl	800c490 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800bf7e:	4b18      	ldr	r3, [pc, #96]	@ (800bfe0 <prvProcessICMPMessage_IPv6+0x318>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d017      	beq.n	800bfb6 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800bf86:	4b16      	ldr	r3, [pc, #88]	@ (800bfe0 <prvProcessICMPMessage_IPv6+0x318>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fc4c 	bl	8009828 <uxIPHeaderSizePacket>
 800bf90:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800bf92:	2b28      	cmp	r3, #40	@ 0x28
 800bf94:	d10f      	bne.n	800bfb6 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800bf96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf98:	3308      	adds	r3, #8
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7ff fe58 	bl	800bc50 <prvCheckWaitingBuffer>
                    break;
 800bfa0:	e009      	b.n	800bfb6 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fb9a 	bl	800c6dc <vReceiveRA>
                            break;
 800bfa8:	e006      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bfaa:	bf00      	nop
 800bfac:	e004      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bfae:	bf00      	nop
 800bfb0:	e002      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800bfb2:	bf00      	nop
 800bfb4:	e000      	b.n	800bfb8 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bfb6:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800bfb8:	2300      	movs	r3, #0
    }
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3770      	adds	r7, #112	@ 0x70
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	08024d48 	.word	0x08024d48
 800bfc8:	08024d80 	.word	0x08024d80
 800bfcc:	08024d8c 	.word	0x08024d8c
 800bfd0:	08024dbc 	.word	0x08024dbc
 800bfd4:	08024dc4 	.word	0x08024dc4
 800bfd8:	08024dcc 	.word	0x08024dcc
 800bfdc:	08024df0 	.word	0x08024df0
 800bfe0:	20000fd4 	.word	0x20000fd4

0800bfe4 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800bfe4:	b5b0      	push	{r4, r5, r7, lr}
 800bfe6:	b088      	sub	sp, #32
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bfec:	2356      	movs	r3, #86	@ 0x56
 800bfee:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800bff0:	2100      	movs	r1, #0
 800bff2:	69f8      	ldr	r0, [r7, #28]
 800bff4:	f00a fdc0 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 800bff8:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80b1 	beq.w	800c164 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	3314      	adds	r3, #20
 800c006:	2210      	movs	r2, #16
 800c008:	2100      	movs	r1, #0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f015 ffed 	bl	8021fea <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c01c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d104      	bne.n	800c02e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800c024:	f240 419e 	movw	r1, #1182	@ 0x49e
 800c028:	4850      	ldr	r0, [pc, #320]	@ (800c16c <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800c02a:	f7f5 fb8d 	bl	8001748 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c032:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	3336      	adds	r3, #54	@ 0x36
 800c038:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	4a4c      	ldr	r2, [pc, #304]	@ (800c170 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800c03e:	6810      	ldr	r0, [r2, #0]
 800c040:	6018      	str	r0, [r3, #0]
 800c042:	8892      	ldrh	r2, [r2, #4]
 800c044:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	1d98      	adds	r0, r3, #6
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	33e8      	adds	r3, #232	@ 0xe8
 800c04e:	2206      	movs	r2, #6
 800c050:	4619      	mov	r1, r3
 800c052:	f015 febd 	bl	8021dd0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2200      	movs	r2, #0
 800c05a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c05e:	731a      	strb	r2, [r3, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c066:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	2260      	movs	r2, #96	@ 0x60
 800c06c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2200      	movs	r2, #0
 800c072:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2200      	movs	r2, #0
 800c078:	741a      	strb	r2, [r3, #16]
 800c07a:	2200      	movs	r2, #0
 800c07c:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	2200      	movs	r2, #0
 800c082:	749a      	strb	r2, [r3, #18]
 800c084:	2200      	movs	r2, #0
 800c086:	f042 0220 	orr.w	r2, r2, #32
 800c08a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	223a      	movs	r2, #58	@ 0x3a
 800c090:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	22ff      	movs	r2, #255	@ 0xff
 800c096:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f103 0016 	add.w	r0, r3, #22
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3338      	adds	r3, #56	@ 0x38
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	f015 fe93 	bl	8021dd0 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3326      	adds	r3, #38	@ 0x26
 800c0ae:	4a31      	ldr	r2, [pc, #196]	@ (800c174 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800c0b0:	461c      	mov	r4, r3
 800c0b2:	4615      	mov	r5, r2
 800c0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c0b6:	6020      	str	r0, [r4, #0]
 800c0b8:	6061      	str	r1, [r4, #4]
 800c0ba:	60a2      	str	r2, [r4, #8]
 800c0bc:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c0be:	2320      	movs	r3, #32
 800c0c0:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2288      	movs	r2, #136	@ 0x88
 800c0c6:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	711a      	strb	r2, [r3, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	715a      	strb	r2, [r3, #5]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	719a      	strb	r2, [r3, #6]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c0e2:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	061a      	lsls	r2, r3, #24
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c0f4:	431a      	orrs	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	0a1b      	lsrs	r3, r3, #8
 800c0fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c100:	431a      	orrs	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	0e1b      	lsrs	r3, r3, #24
 800c108:	431a      	orrs	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2202      	movs	r2, #2
 800c112:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2201      	movs	r2, #1
 800c118:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f103 001a 	add.w	r0, r3, #26
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	33e8      	adds	r3, #232	@ 0xe8
 800c124:	2206      	movs	r2, #6
 800c126:	4619      	mov	r1, r3
 800c128:	f015 fe52 	bl	8021dd0 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	22ff      	movs	r2, #255	@ 0xff
 800c130:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f103 0008 	add.w	r0, r3, #8
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3338      	adds	r3, #56	@ 0x38
 800c13c:	2210      	movs	r2, #16
 800c13e:	4619      	mov	r1, r3
 800c140:	f015 fe46 	bl	8021dd0 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	709a      	strb	r2, [r3, #2]
 800c154:	2200      	movs	r2, #0
 800c156:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	2201      	movs	r2, #1
 800c15e:	69b9      	ldr	r1, [r7, #24]
 800c160:	6978      	ldr	r0, [r7, #20]
 800c162:	4798      	blx	r3
        }
    }
 800c164:	bf00      	nop
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bdb0      	pop	{r4, r5, r7, pc}
 800c16c:	08024e08 	.word	0x08024e08
 800c170:	0802707c 	.word	0x0802707c
 800c174:	0802706c 	.word	0x0802706c

0800c178 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c178:	b580      	push	{r7, lr}
 800c17a:	b090      	sub	sp, #64	@ 0x40
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]
 800c184:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c186:	2301      	movs	r3, #1
 800c188:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d017      	beq.n	800c1c0 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c190:	2300      	movs	r3, #0
 800c192:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c194:	e010      	b.n	800c1b8 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c196:	f107 0214 	add.w	r2, r7, #20
 800c19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7f5 fb9b 	bl	80018dc <xApplicationGetRandomNumber>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c1b0:	e00d      	b.n	800c1ce <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	ddeb      	ble.n	800c196 <FreeRTOS_CreateIPv6Address+0x1e>
 800c1be:	e006      	b.n	800c1ce <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c1c0:	f107 0314 	add.w	r3, r7, #20
 800c1c4:	2210      	movs	r2, #16
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f015 ff0e 	bl	8021fea <memset>
        }

        if( xResult == pdPASS )
 800c1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d167      	bne.n	800c2a4 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d004      	beq.n	800c1e4 <FreeRTOS_CreateIPv6Address+0x6c>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b80      	cmp	r3, #128	@ 0x80
 800c1de:	d801      	bhi.n	800c1e4 <FreeRTOS_CreateIPv6Address+0x6c>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e000      	b.n	800c1e6 <FreeRTOS_CreateIPv6Address+0x6e>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d104      	bne.n	800c1f4 <FreeRTOS_CreateIPv6Address+0x7c>
 800c1ea:	f240 5105 	movw	r1, #1285	@ 0x505
 800c1ee:	4830      	ldr	r0, [pc, #192]	@ (800c2b0 <FreeRTOS_CreateIPv6Address+0x138>)
 800c1f0:	f7f5 faaa 	bl	8001748 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b07      	cmp	r3, #7
 800c1f8:	d907      	bls.n	800c20a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	68b9      	ldr	r1, [r7, #8]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3307      	adds	r3, #7
 800c202:	08db      	lsrs	r3, r3, #3
 800c204:	461a      	mov	r2, r3
 800c206:	f015 fde3 	bl	8021dd0 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c20a:	f107 0314 	add.w	r3, r7, #20
 800c20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	08db      	lsrs	r3, r3, #3
 800c214:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f003 0307 	and.w	r3, r3, #7
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d034      	beq.n	800c28a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	f1c3 0308 	rsb	r3, r3, #8
 800c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c22c:	2201      	movs	r2, #1
 800c22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c230:	fa02 f303 	lsl.w	r3, r2, r3
 800c234:	3b01      	subs	r3, #1
 800c236:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	43db      	mvns	r3, r3
 800c23e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c246:	4413      	add	r3, r2
 800c248:	781a      	ldrb	r2, [r3, #0]
 800c24a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c24e:	4013      	ands	r3, r2
 800c250:	b2d9      	uxtb	r1, r3
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c256:	4413      	add	r3, r2
 800c258:	460a      	mov	r2, r1
 800c25a:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	4413      	add	r3, r2
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c266:	7819      	ldrb	r1, [r3, #0]
 800c268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	400b      	ands	r3, r1
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	4313      	orrs	r3, r2
 800c272:	b2d9      	uxtb	r1, r3
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c278:	4413      	add	r3, r2
 800c27a:	460a      	mov	r2, r1
 800c27c:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800c27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c280:	3301      	adds	r3, #1
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800c284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c286:	3301      	adds	r3, #1
 800c288:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800c28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28c:	2b0f      	cmp	r3, #15
 800c28e:	d809      	bhi.n	800c2a4 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c294:	18d0      	adds	r0, r2, r3
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	f1c3 0310 	rsb	r3, r3, #16
 800c29c:	461a      	mov	r2, r3
 800c29e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c2a0:	f015 fd96 	bl	8021dd0 <memcpy>
            }
        }

        return xResult;
 800c2a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3740      	adds	r7, #64	@ 0x40
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	08024e08 	.word	0x08024e08

0800c2b4 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fe48 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800c2c8:	60b8      	str	r0, [r7, #8]
 800c2ca:	e01a      	b.n	800c302 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c2d2:	2bfe      	cmp	r3, #254	@ 0xfe
 800c2d4:	d110      	bne.n	800c2f8 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c2dc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c2e0:	2b80      	cmp	r3, #128	@ 0x80
 800c2e2:	d109      	bne.n	800c2f8 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c2e4:	6838      	ldr	r0, [r7, #0]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	3338      	adds	r3, #56	@ 0x38
 800c2ea:	2210      	movs	r2, #16
 800c2ec:	4619      	mov	r1, r3
 800c2ee:	f015 fd6f 	bl	8021dd0 <memcpy>
                xResult = pdPASS;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	60fb      	str	r3, [r7, #12]
                break;
 800c2f6:	e007      	b.n	800c308 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fe4e 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800c300:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e1      	bne.n	800c2cc <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800c308:	68fb      	ldr	r3, [r7, #12]
    }
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800c314:	b5b0      	push	{r4, r5, r7, lr}
 800c316:	b090      	sub	sp, #64	@ 0x40
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c322:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c324:	233e      	movs	r3, #62	@ 0x3e
 800c326:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c32c:	2300      	movs	r3, #0
 800c32e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800c330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c332:	2b00      	cmp	r3, #0
 800c334:	d103      	bne.n	800c33e <vNDSendRouterSolicitation+0x2a>
 800c336:	218f      	movs	r1, #143	@ 0x8f
 800c338:	4852      	ldr	r0, [pc, #328]	@ (800c484 <vNDSendRouterSolicitation+0x170>)
 800c33a:	f7f5 fa05 	bl	8001748 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d103      	bne.n	800c356 <vNDSendRouterSolicitation+0x42>
 800c34e:	2190      	movs	r1, #144	@ 0x90
 800c350:	484c      	ldr	r0, [pc, #304]	@ (800c484 <vNDSendRouterSolicitation+0x170>)
 800c352:	f7f5 f9f9 	bl	8001748 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800c356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c358:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c35c:	f107 020c 	add.w	r2, r7, #12
 800c360:	4611      	mov	r1, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f7ff ffa6 	bl	800c2b4 <xGetLinkLocalAddress>
 800c368:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800c36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d10a      	bne.n	800c386 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800c370:	4845      	ldr	r0, [pc, #276]	@ (800c488 <vNDSendRouterSolicitation+0x174>)
 800c372:	f015 fb11 	bl	8021998 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c376:	f107 030c 	add.w	r3, r7, #12
 800c37a:	2210      	movs	r2, #16
 800c37c:	2100      	movs	r1, #0
 800c37e:	4618      	mov	r0, r3
 800c380:	f015 fe33 	bl	8021fea <memset>
 800c384:	e005      	b.n	800c392 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800c386:	f107 030c 	add.w	r3, r7, #12
 800c38a:	4619      	mov	r1, r3
 800c38c:	483f      	ldr	r0, [pc, #252]	@ (800c48c <vNDSendRouterSolicitation+0x178>)
 800c38e:	f015 fb03 	bl	8021998 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800c392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c398:	429a      	cmp	r2, r3
 800c39a:	d909      	bls.n	800c3b0 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c39c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c39e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c3a0:	f7fd fcf4 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 800c3a4:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c3a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c3a8:	f00a fc4e 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800c3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d062      	beq.n	800c47c <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ba:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3be:	3336      	adds	r3, #54	@ 0x36
 800c3c0:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800c3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3c6:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800c3c8:	f107 031c 	add.w	r3, r7, #28
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6838      	ldr	r0, [r7, #0]
 800c3d2:	f7ff f87b 	bl	800b4cc <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d8:	3306      	adds	r3, #6
 800c3da:	461a      	mov	r2, r3
 800c3dc:	f107 031c 	add.w	r3, r7, #28
 800c3e0:	6818      	ldr	r0, [r3, #0]
 800c3e2:	6010      	str	r0, [r2, #0]
 800c3e4:	889b      	ldrh	r3, [r3, #4]
 800c3e6:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c3e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ec:	33e8      	adds	r3, #232	@ 0xe8
 800c3ee:	2206      	movs	r2, #6
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f015 fced 	bl	8021dd0 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c3fe:	731a      	strb	r2, [r3, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c406:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800c408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40a:	2260      	movs	r2, #96	@ 0x60
 800c40c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c410:	2200      	movs	r2, #0
 800c412:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c416:	2200      	movs	r2, #0
 800c418:	741a      	strb	r2, [r3, #16]
 800c41a:	2200      	movs	r2, #0
 800c41c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	2200      	movs	r2, #0
 800c422:	749a      	strb	r2, [r3, #18]
 800c424:	2200      	movs	r2, #0
 800c426:	f042 0208 	orr.w	r2, r2, #8
 800c42a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	223a      	movs	r2, #58	@ 0x3a
 800c430:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c434:	22ff      	movs	r2, #255	@ 0xff
 800c436:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43a:	3316      	adds	r3, #22
 800c43c:	461d      	mov	r5, r3
 800c43e:	f107 040c 	add.w	r4, r7, #12
 800c442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c444:	6028      	str	r0, [r5, #0]
 800c446:	6069      	str	r1, [r5, #4]
 800c448:	60aa      	str	r2, [r5, #8]
 800c44a:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44e:	3326      	adds	r3, #38	@ 0x26
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	2210      	movs	r2, #16
 800c454:	4618      	mov	r0, r3
 800c456:	f015 fcbb 	bl	8021dd0 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800c45a:	2208      	movs	r2, #8
 800c45c:	2100      	movs	r1, #0
 800c45e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c460:	f015 fdc3 	bl	8021fea <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	2285      	movs	r2, #133	@ 0x85
 800c468:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46c:	2200      	movs	r2, #0
 800c46e:	709a      	strb	r2, [r3, #2]
 800c470:	2200      	movs	r2, #0
 800c472:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c474:	2101      	movs	r1, #1
 800c476:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c478:	f7fd f8d6 	bl	8009628 <vReturnEthernetFrame>
        }
    }
 800c47c:	bf00      	nop
 800c47e:	3740      	adds	r7, #64	@ 0x40
 800c480:	46bd      	mov	sp, r7
 800c482:	bdb0      	pop	{r4, r5, r7, pc}
 800c484:	08024e34 	.word	0x08024e34
 800c488:	08024e60 	.word	0x08024e60
 800c48c:	08024e88 	.word	0x08024e88

0800c490 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4a2:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3336      	adds	r3, #54	@ 0x36
 800c4a8:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c4aa:	6938      	ldr	r0, [r7, #16]
 800c4ac:	f000 fd54 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800c4b0:	6178      	str	r0, [r7, #20]
 800c4b2:	e028      	b.n	800c506 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01b      	beq.n	800c4fc <vReceiveNA+0x6c>
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d116      	bne.n	800c4fc <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	2210      	movs	r2, #16
 800c4da:	4619      	mov	r1, r3
 800c4dc:	f016 fc0d 	bl	8022cfa <memcmp>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10a      	bne.n	800c4fc <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c4ec:	f043 0302 	orr.w	r3, r3, #2
 800c4f0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800c4f4:	2164      	movs	r1, #100	@ 0x64
 800c4f6:	6978      	ldr	r0, [r7, #20]
 800c4f8:	f7fd fb3e 	bl	8009b78 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800c4fc:	6979      	ldr	r1, [r7, #20]
 800c4fe:	6938      	ldr	r0, [r7, #16]
 800c500:	f000 fd4c 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800c504:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1d3      	bne.n	800c4b4 <vReceiveNA+0x24>
                }
            }
        }
    }
 800c50c:	bf00      	nop
 800c50e:	bf00      	nop
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c51a:	b091      	sub	sp, #68	@ 0x44
 800c51c:	af04      	add	r7, sp, #16
 800c51e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800c520:	2300      	movs	r3, #0
 800c522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c524:	2310      	movs	r3, #16
 800c526:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	3336      	adds	r3, #54	@ 0x36
 800c52c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c532:	6a3b      	ldr	r3, [r7, #32]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c53c:	6a3b      	ldr	r3, [r7, #32]
 800c53e:	4413      	add	r3, r2
 800c540:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800c546:	e0b2      	b.n	800c6ae <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54c:	4413      	add	r3, r2
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800c552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c554:	3301      	adds	r3, #1
 800c556:	69ba      	ldr	r2, [r7, #24]
 800c558:	4413      	add	r3, r2
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800c56a:	4856      	ldr	r0, [pc, #344]	@ (800c6c4 <vReceiveRA_ReadReply+0x1ac>)
 800c56c:	f015 fa14 	bl	8021998 <lUDPLoggingPrintf>
                break;
 800c570:	e0a3      	b.n	800c6ba <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800c572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	4413      	add	r3, r2
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d208      	bcs.n	800c590 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800c57e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	69fa      	ldr	r2, [r7, #28]
 800c586:	4619      	mov	r1, r3
 800c588:	484f      	ldr	r0, [pc, #316]	@ (800c6c8 <vReceiveRA_ReadReply+0x1b0>)
 800c58a:	f015 fa05 	bl	8021998 <lUDPLoggingPrintf>
                break;
 800c58e:	e094      	b.n	800c6ba <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	3b01      	subs	r3, #1
 800c594:	2b04      	cmp	r3, #4
 800c596:	d87f      	bhi.n	800c698 <vReceiveRA_ReadReply+0x180>
 800c598:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a0 <vReceiveRA_ReadReply+0x88>)
 800c59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59e:	bf00      	nop
 800c5a0:	0800c5b5 	.word	0x0800c5b5
 800c5a4:	0800c6a5 	.word	0x0800c6a5
 800c5a8:	0800c60f 	.word	0x0800c60f
 800c5ac:	0800c6a5 	.word	0x0800c6a5
 800c5b0:	0800c67f 	.word	0x0800c67f
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	69ba      	ldr	r2, [r7, #24]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	461c      	mov	r4, r3
 800c5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c2:	3303      	adds	r3, #3
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	461d      	mov	r5, r3
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	4413      	add	r3, r2
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	461e      	mov	r6, r3
 800c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5da:	3305      	adds	r3, #5
 800c5dc:	69ba      	ldr	r2, [r7, #24]
 800c5de:	4413      	add	r3, r2
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5e6:	3306      	adds	r3, #6
 800c5e8:	69ba      	ldr	r2, [r7, #24]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f2:	3307      	adds	r3, #7
 800c5f4:	69ba      	ldr	r2, [r7, #24]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	9302      	str	r3, [sp, #8]
 800c5fc:	9001      	str	r0, [sp, #4]
 800c5fe:	9100      	str	r1, [sp, #0]
 800c600:	4633      	mov	r3, r6
 800c602:	462a      	mov	r2, r5
 800c604:	4621      	mov	r1, r4
 800c606:	4831      	ldr	r0, [pc, #196]	@ (800c6cc <vReceiveRA_ReadReply+0x1b4>)
 800c608:	f015 f9c6 	bl	8021998 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800c60c:	e04b      	b.n	800c6a6 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c612:	4413      	add	r3, r2
 800c614:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800c616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c618:	789b      	ldrb	r3, [r3, #2]
 800c61a:	4618      	mov	r0, r3
 800c61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	061a      	lsls	r2, r3, #24
 800c622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c62c:	431a      	orrs	r2, r3
 800c62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	0a1b      	lsrs	r3, r3, #8
 800c634:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c638:	431a      	orrs	r2, r3
 800c63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	0e1b      	lsrs	r3, r3, #24
 800c640:	ea42 0103 	orr.w	r1, r2, r3
 800c644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	061a      	lsls	r2, r3, #24
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c654:	431a      	orrs	r2, r3
 800c656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c660:	431a      	orrs	r2, r3
 800c662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	0e1b      	lsrs	r3, r3, #24
 800c668:	431a      	orrs	r2, r3
 800c66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66c:	3310      	adds	r3, #16
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4613      	mov	r3, r2
 800c672:	460a      	mov	r2, r1
 800c674:	4601      	mov	r1, r0
 800c676:	4816      	ldr	r0, [pc, #88]	@ (800c6d0 <vReceiveRA_ReadReply+0x1b8>)
 800c678:	f015 f98e 	bl	8021998 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800c67c:	e013      	b.n	800c6a6 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800c67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c680:	3304      	adds	r3, #4
 800c682:	69ba      	ldr	r2, [r7, #24]
 800c684:	4413      	add	r3, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f7fd fe60 	bl	800a34c <ulChar2u32>
 800c68c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800c68e:	68b9      	ldr	r1, [r7, #8]
 800c690:	4810      	ldr	r0, [pc, #64]	@ (800c6d4 <vReceiveRA_ReadReply+0x1bc>)
 800c692:	f015 f981 	bl	8021998 <lUDPLoggingPrintf>
                   }
                   break;
 800c696:	e006      	b.n	800c6a6 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800c698:	7dfb      	ldrb	r3, [r7, #23]
 800c69a:	4619      	mov	r1, r3
 800c69c:	480e      	ldr	r0, [pc, #56]	@ (800c6d8 <vReceiveRA_ReadReply+0x1c0>)
 800c69e:	f015 f97b 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800c6a2:	e000      	b.n	800c6a6 <vReceiveRA_ReadReply+0x18e>
                    break;
 800c6a4:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800c6a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800c6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	f63f af47 	bhi.w	800c548 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3734      	adds	r7, #52	@ 0x34
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c4:	08024e9c 	.word	0x08024e9c
 800c6c8:	08024ed0 	.word	0x08024ed0
 800c6cc:	08024ef4 	.word	0x08024ef4
 800c6d0:	08024f20 	.word	0x08024f20
 800c6d4:	08024f48 	.word	0x08024f48
 800c6d8:	08024f58 	.word	0x08024f58

0800c6dc <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6de:	b08d      	sub	sp, #52	@ 0x34
 800c6e0:	af04      	add	r7, sp, #16
 800c6e2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e8:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c6ee:	2310      	movs	r3, #16
 800c6f0:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	3336      	adds	r3, #54	@ 0x36
 800c6f6:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d903      	bls.n	800c70a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800c702:	485b      	ldr	r0, [pc, #364]	@ (800c870 <vReceiveRA+0x194>)
 800c704:	f015 f948 	bl	8021998 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800c708:	e0ae      	b.n	800c868 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	3336      	adds	r3, #54	@ 0x36
 800c70e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	461c      	mov	r4, r3
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	785b      	ldrb	r3, [r3, #1]
 800c71a:	461d      	mov	r5, r3
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	885b      	ldrh	r3, [r3, #2]
 800c720:	b29b      	uxth	r3, r3
 800c722:	021b      	lsls	r3, r3, #8
 800c724:	b21a      	sxth	r2, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	885b      	ldrh	r3, [r3, #2]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	0a1b      	lsrs	r3, r3, #8
 800c72e:	b29b      	uxth	r3, r3
 800c730:	b21b      	sxth	r3, r3
 800c732:	4313      	orrs	r3, r2
 800c734:	b21b      	sxth	r3, r3
 800c736:	b29b      	uxth	r3, r3
 800c738:	461e      	mov	r6, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	791b      	ldrb	r3, [r3, #4]
 800c73e:	4619      	mov	r1, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	795b      	ldrb	r3, [r3, #5]
 800c744:	4618      	mov	r0, r3
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	88db      	ldrh	r3, [r3, #6]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	021b      	lsls	r3, r3, #8
 800c74e:	b21a      	sxth	r2, r3
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	88db      	ldrh	r3, [r3, #6]
 800c754:	b29b      	uxth	r3, r3
 800c756:	0a1b      	lsrs	r3, r3, #8
 800c758:	b29b      	uxth	r3, r3
 800c75a:	b21b      	sxth	r3, r3
 800c75c:	4313      	orrs	r3, r2
 800c75e:	b21b      	sxth	r3, r3
 800c760:	b29b      	uxth	r3, r3
 800c762:	9302      	str	r3, [sp, #8]
 800c764:	9001      	str	r0, [sp, #4]
 800c766:	9100      	str	r1, [sp, #0]
 800c768:	4633      	mov	r3, r6
 800c76a:	462a      	mov	r2, r5
 800c76c:	4621      	mov	r1, r4
 800c76e:	4841      	ldr	r0, [pc, #260]	@ (800c874 <vReceiveRA+0x198>)
 800c770:	f015 f912 	bl	8021998 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	88db      	ldrh	r3, [r3, #6]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d074      	beq.n	800c868 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff feca 	bl	800c518 <vReceiveRA_ReadReply>
 800c784:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d104      	bne.n	800c798 <vReceiveRA+0xbc>
 800c78e:	f240 118b 	movw	r1, #395	@ 0x18b
 800c792:	4839      	ldr	r0, [pc, #228]	@ (800c878 <vReceiveRA+0x19c>)
 800c794:	f7f4 ffd8 	bl	8001748 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d064      	beq.n	800c868 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f000 fbd8 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800c7a8:	61f8      	str	r0, [r7, #28]
 800c7aa:	e05a      	b.n	800c862 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c7b2:	f003 0302 	and.w	r3, r3, #2
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d04b      	beq.n	800c854 <vReceiveRA+0x178>
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d146      	bne.n	800c854 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	789b      	ldrb	r3, [r3, #2]
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	3310      	adds	r3, #16
 800c7da:	2210      	movs	r2, #16
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f015 faf7 	bl	8021dd0 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	3316      	adds	r3, #22
 800c7ec:	2210      	movs	r2, #16
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f015 faee 	bl	8021dd0 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800c7f4:	69fa      	ldr	r2, [r7, #28]
 800c7f6:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c7fa:	f043 0301 	orr.w	r3, r3, #1
 800c7fe:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	2200      	movs	r2, #0
 800c806:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	061a      	lsls	r2, r3, #24
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	021b      	lsls	r3, r3, #8
 800c816:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c81a:	431a      	orrs	r2, r3
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	0a1b      	lsrs	r3, r3, #8
 800c822:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c826:	431a      	orrs	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	0e1b      	lsrs	r3, r3, #24
 800c82e:	431a      	orrs	r2, r3
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c836:	69fa      	ldr	r2, [r7, #28]
 800c838:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c83c:	f043 0302 	orr.w	r3, r3, #2
 800c840:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	2202      	movs	r2, #2
 800c848:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800c84c:	69f9      	ldr	r1, [r7, #28]
 800c84e:	2000      	movs	r0, #0
 800c850:	f000 f9b6 	bl	800cbc0 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c858:	69f9      	ldr	r1, [r7, #28]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 fb9e 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800c860:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1a1      	bne.n	800c7ac <vReceiveRA+0xd0>
    }
 800c868:	bf00      	nop
 800c86a:	3724      	adds	r7, #36	@ 0x24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c870:	08024f7c 	.word	0x08024f7c
 800c874:	08024fac 	.word	0x08024fac
 800c878:	08024e34 	.word	0x08024e34

0800c87c <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800c87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c880:	b088      	sub	sp, #32
 800c882:	af00      	add	r7, sp, #0
 800c884:	6178      	str	r0, [r7, #20]
 800c886:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c888:	6939      	ldr	r1, [r7, #16]
 800c88a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800c88c:	6979      	ldr	r1, [r7, #20]
 800c88e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c892:	2901      	cmp	r1, #1
 800c894:	d133      	bne.n	800c8fe <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c89c:	1c5a      	adds	r2, r3, #1
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c8aa:	2b02      	cmp	r3, #2
 800c8ac:	d804      	bhi.n	800c8b8 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c8b6:	e0bf      	b.n	800ca38 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800c8b8:	4862      	ldr	r0, [pc, #392]	@ (800ca44 <xRAProcess_HandleWaitStates+0x1c8>)
 800c8ba:	f015 f86d 	bl	8021998 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	3390      	adds	r3, #144	@ 0x90
 800c8c8:	2258      	movs	r2, #88	@ 0x58
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f015 fa80 	bl	8021dd0 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c8d6:	f36f 0300 	bfc	r3, #0, #1
 800c8da:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c8ec:	f043 0302 	orr.w	r3, r3, #2
 800c8f0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2202      	movs	r2, #2
 800c8f8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c8fc:	e09c      	b.n	800ca38 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c8fe:	6979      	ldr	r1, [r7, #20]
 800c900:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c904:	2903      	cmp	r1, #3
 800c906:	f040 8097 	bne.w	800ca38 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c90a:	6979      	ldr	r1, [r7, #20]
 800c90c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c910:	f001 0102 	and.w	r1, r1, #2
 800c914:	b2c9      	uxtb	r1, r1
 800c916:	2900      	cmp	r1, #0
 800c918:	d00b      	beq.n	800c932 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2202      	movs	r2, #2
 800c926:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c92a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c92e:	61fb      	str	r3, [r7, #28]
 800c930:	e082      	b.n	800ca38 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c932:	6979      	ldr	r1, [r7, #20]
 800c934:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c938:	2902      	cmp	r1, #2
 800c93a:	d80e      	bhi.n	800c95a <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2202      	movs	r2, #2
 800c94e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c952:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	e06e      	b.n	800ca38 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c95a:	6979      	ldr	r1, [r7, #20]
 800c95c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c960:	f001 0101 	and.w	r1, r1, #1
 800c964:	b2c9      	uxtb	r1, r1
 800c966:	2900      	cmp	r1, #0
 800c968:	d057      	beq.n	800ca1a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c96a:	6979      	ldr	r1, [r7, #20]
 800c96c:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c970:	2000      	movs	r0, #0
 800c972:	4688      	mov	r8, r1
 800c974:	4681      	mov	r9, r0
 800c976:	4640      	mov	r0, r8
 800c978:	4649      	mov	r1, r9
 800c97a:	f04f 0a00 	mov.w	sl, #0
 800c97e:	f04f 0b00 	mov.w	fp, #0
 800c982:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c986:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c98a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c98e:	4650      	mov	r0, sl
 800c990:	4659      	mov	r1, fp
 800c992:	ebb0 0208 	subs.w	r2, r0, r8
 800c996:	eb61 0309 	sbc.w	r3, r1, r9
 800c99a:	f04f 0000 	mov.w	r0, #0
 800c99e:	f04f 0100 	mov.w	r1, #0
 800c9a2:	0259      	lsls	r1, r3, #9
 800c9a4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c9a8:	0250      	lsls	r0, r2, #9
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	eb12 0408 	adds.w	r4, r2, r8
 800c9b2:	eb43 0509 	adc.w	r5, r3, r9
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	f04f 0300 	mov.w	r3, #0
 800c9be:	01ab      	lsls	r3, r5, #6
 800c9c0:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c9c4:	01a2      	lsls	r2, r4, #6
 800c9c6:	1b11      	subs	r1, r2, r4
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	eb63 0305 	sbc.w	r3, r3, r5
 800c9ce:	607b      	str	r3, [r7, #4]
 800c9d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	eb13 0308 	adds.w	r3, r3, r8
 800c9da:	60bb      	str	r3, [r7, #8]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	eb43 0309 	adc.w	r3, r3, r9
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c9e8:	f04f 0300 	mov.w	r3, #0
 800c9ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9f0:	f7f3 fcde 	bl	80003b0 <__aeabi_uldivmod>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	2204      	movs	r2, #4
 800ca00:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800ca10:	461a      	mov	r2, r3
 800ca12:	480d      	ldr	r0, [pc, #52]	@ (800ca48 <xRAProcess_HandleWaitStates+0x1cc>)
 800ca14:	f014 ffc0 	bl	8021998 <lUDPLoggingPrintf>
 800ca18:	e00b      	b.n	800ca32 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2206      	movs	r2, #6
 800ca1e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	3338      	adds	r3, #56	@ 0x38
 800ca26:	4619      	mov	r1, r3
 800ca28:	4808      	ldr	r0, [pc, #32]	@ (800ca4c <xRAProcess_HandleWaitStates+0x1d0>)
 800ca2a:	f014 ffb5 	bl	8021998 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800ca32:	6978      	ldr	r0, [r7, #20]
 800ca34:	f7fc fa08 	bl	8008e48 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800ca38:	69fb      	ldr	r3, [r7, #28]
    }
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca44:	08024ff0 	.word	0x08024ff0
 800ca48:	08025018 	.word	0x08025018
 800ca4c:	08025058 	.word	0x08025058

0800ca50 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08c      	sub	sp, #48	@ 0x30
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ca64:	2b06      	cmp	r3, #6
 800ca66:	f200 808c 	bhi.w	800cb82 <xRAProcess_HandleOtherStates+0x132>
 800ca6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca70 <xRAProcess_HandleOtherStates+0x20>)
 800ca6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca70:	0800ca8d 	.word	0x0800ca8d
 800ca74:	0800cb83 	.word	0x0800cb83
 800ca78:	0800caef 	.word	0x0800caef
 800ca7c:	0800cb83 	.word	0x0800cb83
 800ca80:	0800cb6b 	.word	0x0800cb6b
 800ca84:	0800cb75 	.word	0x0800cb75
 800ca88:	0800cb83 	.word	0x0800cb83
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800ca8c:	f107 030c 	add.w	r3, r7, #12
 800ca90:	2210      	movs	r2, #16
 800ca92:	2100      	movs	r1, #0
 800ca94:	4618      	mov	r0, r3
 800ca96:	f015 faa8 	bl	8021fea <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800ca9a:	23ff      	movs	r3, #255	@ 0xff
 800ca9c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800caa2:	2302      	movs	r3, #2
 800caa4:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800caa6:	233e      	movs	r3, #62	@ 0x3e
 800caa8:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800caaa:	2100      	movs	r1, #0
 800caac:	6a38      	ldr	r0, [r7, #32]
 800caae:	f00a f863 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 800cab2:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d008      	beq.n	800cacc <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800cac0:	f107 030c 	add.w	r3, r7, #12
 800cac4:	4619      	mov	r1, r3
 800cac6:	69f8      	ldr	r0, [r7, #28]
 800cac8:	f7ff fc24 	bl	800c314 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cad2:	3301      	adds	r3, #1
 800cad4:	2203      	movs	r2, #3
 800cad6:	4619      	mov	r1, r3
 800cad8:	482d      	ldr	r0, [pc, #180]	@ (800cb90 <xRAProcess_HandleOtherStates+0x140>)
 800cada:	f014 ff5d 	bl	8021998 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800cade:	f242 7310 	movw	r3, #10000	@ 0x2710
 800cae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800caec:	e04a      	b.n	800cb84 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d014      	beq.n	800cb28 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cb04:	f36f 0341 	bfc	r3, #1, #1
 800cb08:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	f7ff fb2b 	bl	800c178 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800cb22:	481c      	ldr	r0, [pc, #112]	@ (800cb94 <xRAProcess_HandleOtherStates+0x144>)
 800cb24:	f014 ff38 	bl	8021998 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3338      	adds	r3, #56	@ 0x38
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	481a      	ldr	r0, [pc, #104]	@ (800cb98 <xRAProcess_HandleOtherStates+0x148>)
 800cb30:	f014 ff32 	bl	8021998 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cb34:	2356      	movs	r3, #86	@ 0x56
 800cb36:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800cb38:	2100      	movs	r1, #0
 800cb3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb3c:	f00a f81c 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 800cb40:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800cb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d008      	beq.n	800cb5a <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	3338      	adds	r3, #56	@ 0x38
 800cb52:	4619      	mov	r1, r3
 800cb54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb56:	f7fe ff25 	bl	800b9a4 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800cb5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2203      	movs	r2, #3
 800cb64:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800cb68:	e00c      	b.n	800cb84 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800cb72:	e007      	b.n	800cb84 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f811 	bl	800cb9c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800cb7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800cb80:	e000      	b.n	800cb84 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800cb82:	bf00      	nop
        }

        return uxNewReloadTime;
 800cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800cb86:	4618      	mov	r0, r3
 800cb88:	3730      	adds	r7, #48	@ 0x30
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	08025094 	.word	0x08025094
 800cb94:	080250c8 	.word	0x080250c8
 800cb98:	080250ec 	.word	0x080250ec

0800cb9c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800cbc0:	b590      	push	{r4, r7, lr}
 800cbc2:	b089      	sub	sp, #36	@ 0x24
 800cbc4:	af04      	add	r7, sp, #16
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800cbca:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cbce:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d104      	bne.n	800cbe0 <vRAProcess+0x20>
 800cbd6:	f240 2189 	movw	r1, #649	@ 0x289
 800cbda:	4828      	ldr	r0, [pc, #160]	@ (800cc7c <vRAProcess+0xbc>)
 800cbdc:	f7f4 fdb4 	bl	8001748 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cbe6:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d002      	beq.n	800cbf4 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800cbee:	6838      	ldr	r0, [r7, #0]
 800cbf0:	f7ff ffd4 	bl	800cb9c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800cbf4:	68f9      	ldr	r1, [r7, #12]
 800cbf6:	6838      	ldr	r0, [r7, #0]
 800cbf8:	f7ff fe40 	bl	800c87c <xRAProcess_HandleWaitStates>
 800cbfc:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800cbfe:	68f9      	ldr	r1, [r7, #12]
 800cc00:	6838      	ldr	r0, [r7, #0]
 800cc02:	f7ff ff25 	bl	800ca50 <xRAProcess_HandleOtherStates>
 800cc06:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cc14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	461c      	mov	r4, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800cc22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	4618      	mov	r0, r3
 800cc2a:	7afb      	ldrb	r3, [r7, #11]
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800cc32:	9202      	str	r2, [sp, #8]
 800cc34:	9301      	str	r3, [sp, #4]
 800cc36:	9000      	str	r0, [sp, #0]
 800cc38:	4623      	mov	r3, r4
 800cc3a:	460a      	mov	r2, r1
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	4810      	ldr	r0, [pc, #64]	@ (800cc80 <vRAProcess+0xc0>)
 800cc40:	f014 feaa 	bl	8021998 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00d      	beq.n	800cc66 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	4a0d      	ldr	r2, [pc, #52]	@ (800cc84 <vRAProcess+0xc4>)
 800cc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc52:	099b      	lsrs	r3, r3, #6
 800cc54:	4619      	mov	r1, r3
 800cc56:	480c      	ldr	r0, [pc, #48]	@ (800cc88 <vRAProcess+0xc8>)
 800cc58:	f014 fe9e 	bl	8021998 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800cc5c:	68f9      	ldr	r1, [r7, #12]
 800cc5e:	6838      	ldr	r0, [r7, #0]
 800cc60:	f7fc ff8a 	bl	8009b78 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800cc64:	e006      	b.n	800cc74 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800cc66:	4809      	ldr	r0, [pc, #36]	@ (800cc8c <vRAProcess+0xcc>)
 800cc68:	f014 fe96 	bl	8021998 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6838      	ldr	r0, [r7, #0]
 800cc70:	f7fd f836 	bl	8009ce0 <vIPSetDHCP_RATimerEnableState>
    }
 800cc74:	bf00      	nop
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd90      	pop	{r4, r7, pc}
 800cc7c:	08024e34 	.word	0x08024e34
 800cc80:	08025114 	.word	0x08025114
 800cc84:	10624dd3 	.word	0x10624dd3
 800cc88:	08025160 	.word	0x08025160
 800cc8c:	08025178 	.word	0x08025178

0800cc90 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d002      	beq.n	800ccaa <FreeRTOS_FillEndPoint+0x1a>
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d105      	bne.n	800ccb6 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800ccaa:	68ba      	ldr	r2, [r7, #8]
 800ccac:	68f9      	ldr	r1, [r7, #12]
 800ccae:	483f      	ldr	r0, [pc, #252]	@ (800cdac <FreeRTOS_FillEndPoint+0x11c>)
 800ccb0:	f014 fe72 	bl	8021998 <lUDPLoggingPrintf>
 800ccb4:	e075      	b.n	800cda2 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ccbc:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800ccbe:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ccc2:	2100      	movs	r1, #0
 800ccc4:	68b8      	ldr	r0, [r7, #8]
 800ccc6:	f015 f990 	bl	8021fea <memset>
            pxEndPoint->pxNext = pxNext;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	697a      	ldr	r2, [r7, #20]
 800ccce:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3303      	adds	r3, #3
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	061a      	lsls	r2, r3, #24
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	3302      	adds	r3, #2
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	041b      	lsls	r3, r3, #16
 800cce2:	431a      	orrs	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3301      	adds	r3, #1
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	021b      	lsls	r3, r3, #8
 800ccec:	4313      	orrs	r3, r2
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	7812      	ldrb	r2, [r2, #0]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	3303      	adds	r3, #3
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	061a      	lsls	r2, r3, #24
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	3302      	adds	r3, #2
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	041b      	lsls	r3, r3, #16
 800cd06:	431a      	orrs	r2, r3
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	4313      	orrs	r3, r2
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	7812      	ldrb	r2, [r2, #0]
 800cd16:	431a      	orrs	r2, r3
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	3303      	adds	r3, #3
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	061a      	lsls	r2, r3, #24
 800cd24:	6a3b      	ldr	r3, [r7, #32]
 800cd26:	3302      	adds	r3, #2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	041b      	lsls	r3, r3, #16
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	6a3b      	ldr	r3, [r7, #32]
 800cd30:	3301      	adds	r3, #1
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	021b      	lsls	r3, r3, #8
 800cd36:	4313      	orrs	r3, r2
 800cd38:	6a3a      	ldr	r2, [r7, #32]
 800cd3a:	7812      	ldrb	r2, [r2, #0]
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800cd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd44:	3303      	adds	r3, #3
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	061a      	lsls	r2, r3, #24
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	3302      	adds	r3, #2
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	041b      	lsls	r3, r3, #16
 800cd52:	431a      	orrs	r2, r3
 800cd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd56:	3301      	adds	r3, #1
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	021b      	lsls	r3, r3, #8
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd60:	7812      	ldrb	r2, [r2, #0]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	43da      	mvns	r2, r3
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	331c      	adds	r3, #28
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	221c      	movs	r2, #28
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f015 f826 	bl	8021dd0 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	33e8      	adds	r3, #232	@ 0xe8
 800cd8e:	2206      	movs	r2, #6
 800cd90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cd92:	4618      	mov	r0, r3
 800cd94:	f015 f81c 	bl	8021dd0 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f000 f85c 	bl	800ce58 <FreeRTOS_AddEndPoint>
        }
    }
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	3718      	adds	r7, #24
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	08025190 	.word	0x08025190

0800cdb0 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800cdb0:	b480      	push	{r7}
 800cdb2:	b085      	sub	sp, #20
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d021      	beq.n	800ce06 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800cdc2:	4b14      	ldr	r3, [pc, #80]	@ (800ce14 <FreeRTOS_AddNetworkInterface+0x64>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800cdca:	4a12      	ldr	r2, [pc, #72]	@ (800ce14 <FreeRTOS_AddNetworkInterface+0x64>)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	625a      	str	r2, [r3, #36]	@ 0x24
 800cdd6:	e016      	b.n	800ce06 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce14 <FreeRTOS_AddNetworkInterface+0x64>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d00e      	beq.n	800ce04 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d106      	bne.n	800cdfc <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800cdfa:	e004      	b.n	800ce06 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce00:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800ce02:	e7ec      	b.n	800cdde <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800ce04:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800ce06:	687b      	ldr	r3, [r7, #4]
    }
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3714      	adds	r7, #20
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	20001364 	.word	0x20001364

0800ce18 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800ce1c:	4b03      	ldr	r3, [pc, #12]	@ (800ce2c <FreeRTOS_FirstNetworkInterface+0x14>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
    }
 800ce20:	4618      	mov	r0, r3
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	20001364 	.word	0x20001364

0800ce30 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800ce30:	b480      	push	{r7}
 800ce32:	b085      	sub	sp, #20
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d003      	beq.n	800ce46 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce42:	60fb      	str	r3, [r7, #12]
 800ce44:	e001      	b.n	800ce4a <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
    }
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800ce7c:	4b33      	ldr	r3, [pc, #204]	@ (800cf4c <FreeRTOS_AddEndPoint+0xf4>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d107      	bne.n	800ce94 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800ce8c:	4a2f      	ldr	r2, [pc, #188]	@ (800cf4c <FreeRTOS_AddEndPoint+0xf4>)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	e01a      	b.n	800ceca <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800ce94:	4b2d      	ldr	r3, [pc, #180]	@ (800cf4c <FreeRTOS_AddEndPoint+0xf4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d012      	beq.n	800cec8 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d108      	bne.n	800cebe <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800cebc:	e005      	b.n	800ceca <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cec4:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800cec6:	e7e8      	b.n	800ce9a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800cec8:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ced0:	f003 0304 	and.w	r3, r3, #4
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00c      	beq.n	800cef4 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800cee0:	4619      	mov	r1, r3
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800cee8:	461a      	mov	r2, r3
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	3390      	adds	r3, #144	@ 0x90
 800ceee:	4818      	ldr	r0, [pc, #96]	@ (800cf50 <FreeRTOS_AddEndPoint+0xf8>)
 800cef0:	f014 fd52 	bl	8021998 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cefa:	f003 0304 	and.w	r3, r3, #4
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d11e      	bne.n	800cf42 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800cf12:	4618      	mov	r0, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	69db      	ldr	r3, [r3, #28]
 800cf18:	061a      	lsls	r2, r3, #24
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	021b      	lsls	r3, r3, #8
 800cf20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cf24:	431a      	orrs	r2, r3
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	69db      	ldr	r3, [r3, #28]
 800cf2a:	0a1b      	lsrs	r3, r3, #8
 800cf2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cf30:	431a      	orrs	r2, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	69db      	ldr	r3, [r3, #28]
 800cf36:	0e1b      	lsrs	r3, r3, #24
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	4805      	ldr	r0, [pc, #20]	@ (800cf54 <FreeRTOS_AddEndPoint+0xfc>)
 800cf3e:	f014 fd2b 	bl	8021998 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800cf42:	683b      	ldr	r3, [r7, #0]
    }
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	20001360 	.word	0x20001360
 800cf50:	080251d0 	.word	0x080251d0
 800cf54:	08025204 	.word	0x08025204

0800cf58 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cf60:	4b0d      	ldr	r3, [pc, #52]	@ (800cf98 <FreeRTOS_FirstEndPoint+0x40>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800cf66:	e00c      	b.n	800cf82 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00c      	beq.n	800cf88 <FreeRTOS_FirstEndPoint+0x30>
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d006      	beq.n	800cf88 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cf80:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1ef      	bne.n	800cf68 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800cf88:	68fb      	ldr	r3, [r7, #12]
    }
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	20001360 	.word	0x20001360

0800cf9c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d015      	beq.n	800cfdc <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cfb6:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800cfb8:	e00c      	b.n	800cfd4 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d011      	beq.n	800cfe4 <FreeRTOS_NextEndPoint+0x48>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d00b      	beq.n	800cfe4 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cfd2:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1ef      	bne.n	800cfba <FreeRTOS_NextEndPoint+0x1e>
 800cfda:	e003      	b.n	800cfe4 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff ffbb 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800cfe2:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
    }
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
	...

0800cff0 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cffa:	4b1e      	ldr	r3, [pc, #120]	@ (800d074 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800d000:	2308      	movs	r3, #8
 800d002:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800d004:	4b1c      	ldr	r3, [pc, #112]	@ (800d078 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3301      	adds	r3, #1
 800d00a:	4a1b      	ldr	r2, [pc, #108]	@ (800d078 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d00c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	429a      	cmp	r2, r3
 800d014:	d223      	bcs.n	800d05e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800d016:	4a18      	ldr	r2, [pc, #96]	@ (800d078 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	3312      	adds	r3, #18
 800d01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	4915      	ldr	r1, [pc, #84]	@ (800d078 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	3312      	adds	r3, #18
 800d028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800d02c:	e017      	b.n	800d05e <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d034:	f003 0304 	and.w	r3, r3, #4
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d10b      	bne.n	800d056 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00f      	beq.n	800d064 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d00b      	beq.n	800d064 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	429a      	cmp	r2, r3
 800d054:	d006      	beq.n	800d064 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d05c:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e4      	bne.n	800d02e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800d064:	68fb      	ldr	r3, [r7, #12]
    }
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20001360 	.word	0x20001360
 800d078:	20001368 	.word	0x20001368

0800d07c <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800d084:	6879      	ldr	r1, [r7, #4]
 800d086:	2000      	movs	r0, #0
 800d088:	f000 f8b6 	bl	800d1f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800d08c:	4603      	mov	r3, r0
        }
 800d08e:	4618      	mov	r0, r3
 800d090:	3708      	adds	r7, #8
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d0a2:	4b17      	ldr	r3, [pc, #92]	@ (800d100 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800d0a8:	4b16      	ldr	r3, [pc, #88]	@ (800d104 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	4a15      	ldr	r2, [pc, #84]	@ (800d104 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d0b0:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d119      	bne.n	800d0ec <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800d0bc:	e016      	b.n	800d0ec <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d005      	beq.n	800d0d0 <FreeRTOS_FindEndPointOnMAC+0x38>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d0ca:	683a      	ldr	r2, [r7, #0]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d109      	bne.n	800d0e4 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	33e8      	adds	r3, #232	@ 0xe8
 800d0d4:	6879      	ldr	r1, [r7, #4]
 800d0d6:	2206      	movs	r2, #6
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f015 fe0e 	bl	8022cfa <memcmp>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d0ea:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1e5      	bne.n	800d0be <FreeRTOS_FindEndPointOnMAC+0x26>
 800d0f2:	e000      	b.n	800d0f6 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800d0f4:	bf00      	nop
        }

        return pxEndPoint;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
    }
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}
 800d100:	20001360 	.word	0x20001360
 800d104:	20001368 	.word	0x20001368

0800d108 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	6879      	ldr	r1, [r7, #4]
 800d116:	2000      	movs	r0, #0
 800d118:	f000 f806 	bl	800d128 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d11c:	4603      	mov	r3, r0
    }
 800d11e:	4618      	mov	r0, r3
 800d120:	3708      	adds	r7, #8
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
	...

0800d128 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d134:	4b2d      	ldr	r3, [pc, #180]	@ (800d1ec <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d13a:	230e      	movs	r3, #14
 800d13c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d13e:	4b2c      	ldr	r3, [pc, #176]	@ (800d1f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	3301      	adds	r3, #1
 800d144:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d146:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d22d      	bcs.n	800d1ac <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d150:	4a27      	ldr	r2, [pc, #156]	@ (800d1f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	3304      	adds	r3, #4
 800d156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	4924      	ldr	r1, [pc, #144]	@ (800d1f0 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3304      	adds	r3, #4
 800d162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d166:	e021      	b.n	800d1ac <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	429a      	cmp	r2, r3
 800d178:	d114      	bne.n	800d1a4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b00      	cmp	r3, #0
 800d188:	d10c      	bne.n	800d1a4 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d190:	d00f      	beq.n	800d1b2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	681a      	ldr	r2, [r3, #0]
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	405a      	eors	r2, r3
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d006      	beq.n	800d1b2 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d1aa:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1da      	bne.n	800d168 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d113      	bne.n	800d1e0 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	061a      	lsls	r2, r3, #24
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	021b      	lsls	r3, r3, #8
 800d1c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1c4:	431a      	orrs	r2, r3
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	0a1b      	lsrs	r3, r3, #8
 800d1ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	0e1b      	lsrs	r3, r3, #24
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	6879      	ldr	r1, [r7, #4]
 800d1da:	4806      	ldr	r0, [pc, #24]	@ (800d1f4 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d1dc:	f014 fbdc 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d1e0:	697b      	ldr	r3, [r7, #20]
    }
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3718      	adds	r7, #24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20001360 	.word	0x20001360
 800d1f0:	20001368 	.word	0x20001368
 800d1f4:	08025238 	.word	0x08025238

0800d1f8 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b084      	sub	sp, #16
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d202:	4b17      	ldr	r3, [pc, #92]	@ (800d260 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d208:	e020      	b.n	800d24c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d113      	bne.n	800d244 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d222:	f003 0304 	and.w	r3, r3, #4
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d236:	461a      	mov	r2, r3
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	f7fd fc0b 	bl	800aa54 <xCompareIPv6_Address>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d24a:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1db      	bne.n	800d20a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800d252:	e000      	b.n	800d256 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800d254:	bf00      	nop
            }

            return pxEndPoint;
 800d256:	68fb      	ldr	r3, [r7, #12]
        }
 800d258:	4618      	mov	r0, r3
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	20001360 	.word	0x20001360

0800d264 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800d264:	b5b0      	push	{r4, r5, r7, lr}
 800d266:	b0b0      	sub	sp, #192	@ 0xc0
 800d268:	af04      	add	r7, sp, #16
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	607a      	str	r2, [r7, #4]
 800d26e:	603b      	str	r3, [r7, #0]
 800d270:	460b      	mov	r3, r1
 800d272:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800d27a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d27e:	2200      	movs	r2, #0
 800d280:	601a      	str	r2, [r3, #0]
 800d282:	605a      	str	r2, [r3, #4]
 800d284:	609a      	str	r2, [r3, #8]
 800d286:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800d288:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	605a      	str	r2, [r3, #4]
 800d292:	609a      	str	r2, [r3, #8]
 800d294:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800d296:	897b      	ldrh	r3, [r7, #10]
 800d298:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d101      	bne.n	800d2a4 <pxEasyFit+0x40>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e000      	b.n	800d2a6 <pxEasyFit+0x42>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800d2b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d123      	bne.n	800d306 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	2210      	movs	r2, #16
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4888      	ldr	r0, [pc, #544]	@ (800d4e8 <pxEasyFit+0x284>)
 800d2c6:	f015 fd18 	bl	8022cfa <memcmp>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <pxEasyFit+0x70>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e000      	b.n	800d2d6 <pxEasyFit+0x72>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800d2da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d105      	bne.n	800d2ee <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	4880      	ldr	r0, [pc, #512]	@ (800d4ec <pxEasyFit+0x288>)
 800d2ea:	f014 fb55 	bl	8021998 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 fa15 	bl	800d720 <xIPv6_GetIPType>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <pxEasyFit+0x9c>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <pxEasyFit+0x9e>
 800d300:	2300      	movs	r3, #0
 800d302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f7ff fe26 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 800d30c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d310:	e07d      	b.n	800d40e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800d312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d316:	33e8      	adds	r3, #232	@ 0xe8
 800d318:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800d31c:	2206      	movs	r2, #6
 800d31e:	4618      	mov	r0, r3
 800d320:	f015 fceb 	bl	8022cfa <memcmp>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <pxEasyFit+0xca>
 800d32a:	2301      	movs	r3, #1
 800d32c:	e000      	b.n	800d330 <pxEasyFit+0xcc>
 800d32e:	2300      	movs	r3, #0
 800d330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800d334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d338:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d33c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d340:	b2db      	uxtb	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d348:	4293      	cmp	r3, r2
 800d34a:	d159      	bne.n	800d400 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800d34c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d350:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800d352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d354:	3301      	adds	r3, #1
 800d356:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d134      	bne.n	800d3ca <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d364:	3338      	adds	r3, #56	@ 0x38
 800d366:	4618      	mov	r0, r3
 800d368:	f000 f9da 	bl	800d720 <xIPv6_GetIPType>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800d372:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d376:	2b05      	cmp	r3, #5
 800d378:	d035      	beq.n	800d3e6 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d37a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d101      	bne.n	800d386 <pxEasyFit+0x122>
 800d382:	2301      	movs	r3, #1
 800d384:	e000      	b.n	800d388 <pxEasyFit+0x124>
 800d386:	2300      	movs	r3, #0
 800d388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800d38c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d390:	3338      	adds	r3, #56	@ 0x38
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	2210      	movs	r2, #16
 800d396:	4618      	mov	r0, r3
 800d398:	f015 fcaf 	bl	8022cfa <memcmp>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d3a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3a6:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800d3a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800d3ae:	e01a      	b.n	800d3e6 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800d3b0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d3b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d114      	bne.n	800d3e6 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800d3bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3c0:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800d3c8:	e00d      	b.n	800d3e6 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800d3ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d108      	bne.n	800d3ea <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d3d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3dc:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800d3de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800d3e4:	e001      	b.n	800d3ea <pxEasyFit+0x186>
                           break;
 800d3e6:	bf00      	nop
 800d3e8:	e000      	b.n	800d3ec <pxEasyFit+0x188>
                        break;
 800d3ea:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800d3ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d105      	bne.n	800d400 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800d3f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800d3fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3fe:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800d400:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff fdc9 	bl	800cf9c <FreeRTOS_NextEndPoint>
 800d40a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800d40e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d412:	2b00      	cmp	r3, #0
 800d414:	f47f af7d 	bne.w	800d312 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d41e:	e017      	b.n	800d450 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800d420:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	33b0      	adds	r3, #176	@ 0xb0
 800d428:	443b      	add	r3, r7
 800d42a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	dd09      	ble.n	800d446 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800d432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	33b0      	adds	r3, #176	@ 0xb0
 800d43a:	443b      	add	r3, r7
 800d43c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800d444:	e008      	b.n	800d458 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d44a:	3301      	adds	r3, #1
 800d44c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d450:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d454:	2b03      	cmp	r3, #3
 800d456:	dde3      	ble.n	800d420 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800d458:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d13c      	bne.n	800d4da <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800d460:	897b      	ldrh	r3, [r7, #10]
 800d462:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d466:	4293      	cmp	r3, r2
 800d468:	d101      	bne.n	800d46e <pxEasyFit+0x20a>
 800d46a:	230a      	movs	r3, #10
 800d46c:	e000      	b.n	800d470 <pxEasyFit+0x20c>
 800d46e:	2302      	movs	r3, #2
 800d470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800d474:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800d476:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d47a:	2328      	movs	r3, #40	@ 0x28
 800d47c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d480:	f001 fc70 	bl	800ed64 <FreeRTOS_inet_ntop>
 800d484:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d488:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d48a:	f107 0210 	add.w	r2, r7, #16
 800d48e:	2328      	movs	r3, #40	@ 0x28
 800d490:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d494:	f001 fc66 	bl	800ed64 <FreeRTOS_inet_ntop>
 800d498:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d49c:	8979      	ldrh	r1, [r7, #10]
 800d49e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4a0:	461c      	mov	r4, r3
 800d4a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4a4:	461d      	mov	r5, r3
 800d4a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <pxEasyFit+0x254>
 800d4b2:	f107 0310 	add.w	r3, r7, #16
 800d4b6:	e000      	b.n	800d4ba <pxEasyFit+0x256>
 800d4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f0 <pxEasyFit+0x28c>)
 800d4ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	d002      	beq.n	800d4c8 <pxEasyFit+0x264>
 800d4c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d4c6:	e000      	b.n	800d4ca <pxEasyFit+0x266>
 800d4c8:	4a09      	ldr	r2, [pc, #36]	@ (800d4f0 <pxEasyFit+0x28c>)
 800d4ca:	9202      	str	r2, [sp, #8]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	9000      	str	r0, [sp, #0]
 800d4d0:	462b      	mov	r3, r5
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	4807      	ldr	r0, [pc, #28]	@ (800d4f4 <pxEasyFit+0x290>)
 800d4d6:	f014 fa5f 	bl	8021998 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800d4da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800d4de:	4618      	mov	r0, r3
 800d4e0:	37b0      	adds	r7, #176	@ 0xb0
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	08027084 	.word	0x08027084
 800d4ec:	080252d4 	.word	0x080252d4
 800d4f0:	080252f0 	.word	0x080252f0
 800d4f4:	080252f8 	.word	0x080252f8

0800d4f8 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800d4f8:	b590      	push	{r4, r7, lr}
 800d4fa:	b097      	sub	sp, #92	@ 0x5c
 800d4fc:	af02      	add	r7, sp, #8
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800d502:	2300      	movs	r3, #0
 800d504:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d104      	bne.n	800d51e <FreeRTOS_MatchingEndpoint+0x26>
 800d514:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800d518:	485e      	ldr	r0, [pc, #376]	@ (800d694 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d51a:	f7f4 f915 	bl	8001748 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800d522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d524:	3302      	adds	r3, #2
 800d526:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800d528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d52a:	f003 0303 	and.w	r3, r3, #3
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d004      	beq.n	800d53c <FreeRTOS_MatchingEndpoint+0x44>
 800d532:	f240 319b 	movw	r1, #923	@ 0x39b
 800d536:	4857      	ldr	r0, [pc, #348]	@ (800d694 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d538:	f7f4 f906 	bl	8001748 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800d53c:	4b56      	ldr	r3, [pc, #344]	@ (800d698 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	4a55      	ldr	r2, [pc, #340]	@ (800d698 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d544:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800d546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d548:	7b1a      	ldrb	r2, [r3, #12]
 800d54a:	7b5b      	ldrb	r3, [r3, #13]
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	4313      	orrs	r3, r2
 800d550:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800d552:	2300      	movs	r3, #0
 800d554:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d55a:	2210      	movs	r2, #16
 800d55c:	2100      	movs	r1, #0
 800d55e:	4618      	mov	r0, r3
 800d560:	f014 fd43 	bl	8021fea <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d564:	f107 0314 	add.w	r3, r7, #20
 800d568:	2210      	movs	r2, #16
 800d56a:	2100      	movs	r1, #0
 800d56c:	4618      	mov	r0, r3
 800d56e:	f014 fd3c 	bl	8021fea <memset>

            switch( usFrameType )
 800d572:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d574:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d578:	4293      	cmp	r3, r2
 800d57a:	d009      	beq.n	800d590 <FreeRTOS_MatchingEndpoint+0x98>
 800d57c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d580:	4293      	cmp	r3, r2
 800d582:	dc6a      	bgt.n	800d65a <FreeRTOS_MatchingEndpoint+0x162>
 800d584:	2b08      	cmp	r3, #8
 800d586:	d05d      	beq.n	800d644 <FreeRTOS_MatchingEndpoint+0x14c>
 800d588:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d58c:	d015      	beq.n	800d5ba <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800d58e:	e064      	b.n	800d65a <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d592:	3316      	adds	r3, #22
 800d594:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	6859      	ldr	r1, [r3, #4]
 800d59c:	689a      	ldr	r2, [r3, #8]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5a4:	3326      	adds	r3, #38	@ 0x26
 800d5a6:	f107 0414 	add.w	r4, r7, #20
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	6859      	ldr	r1, [r3, #4]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	68db      	ldr	r3, [r3, #12]
 800d5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d5b8:	e050      	b.n	800d65c <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800d5be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5c0:	8a9b      	ldrh	r3, [r3, #20]
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5c8:	d108      	bne.n	800d5dc <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d5ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5cc:	331c      	adds	r3, #28
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5d4:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d5d8:	617b      	str	r3, [r7, #20]
 800d5da:	e00d      	b.n	800d5f8 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800d5dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5de:	8a9b      	ldrh	r3, [r3, #20]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5e6:	d107      	bne.n	800d5f8 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ea:	331c      	adds	r3, #28
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5f2:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d5f6:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	061a      	lsls	r2, r3, #24
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fe:	021b      	lsls	r3, r3, #8
 800d600:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d604:	431a      	orrs	r2, r3
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	0a1b      	lsrs	r3, r3, #8
 800d60a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d60e:	431a      	orrs	r2, r3
 800d610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d612:	0e1b      	lsrs	r3, r3, #24
 800d614:	ea42 0103 	orr.w	r1, r2, r3
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	061a      	lsls	r2, r3, #24
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d624:	431a      	orrs	r2, r3
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	0a1b      	lsrs	r3, r3, #8
 800d62a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d62e:	431a      	orrs	r2, r3
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	0e1b      	lsrs	r3, r3, #24
 800d634:	4313      	orrs	r3, r2
 800d636:	461a      	mov	r2, r3
 800d638:	4818      	ldr	r0, [pc, #96]	@ (800d69c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800d63a:	f014 f9ad 	bl	8021998 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800d63e:	2301      	movs	r3, #1
 800d640:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d642:	e00b      	b.n	800d65c <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800d644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d646:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800d64a:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800d64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d64e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800d652:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800d654:	2301      	movs	r3, #1
 800d656:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d658:	e000      	b.n	800d65c <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800d65a:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800d65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d113      	bne.n	800d68a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d664:	f107 030c 	add.w	r3, r7, #12
 800d668:	6810      	ldr	r0, [r2, #0]
 800d66a:	6018      	str	r0, [r3, #0]
 800d66c:	8892      	ldrh	r2, [r2, #4]
 800d66e:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800d670:	f107 0014 	add.w	r0, r7, #20
 800d674:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d678:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800d67a:	f107 030c 	add.w	r3, r7, #12
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	4603      	mov	r3, r0
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff fdee 	bl	800d264 <pxEasyFit>
 800d688:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800d68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800d68c:	4618      	mov	r0, r3
 800d68e:	3754      	adds	r7, #84	@ 0x54
 800d690:	46bd      	mov	sp, r7
 800d692:	bd90      	pop	{r4, r7, pc}
 800d694:	08025320 	.word	0x08025320
 800d698:	20001368 	.word	0x20001368
 800d69c:	08025350 	.word	0x08025350

0800d6a0 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800d718 <FreeRTOS_FindGateWay+0x78>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800d6ae:	e028      	b.n	800d702 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2b60      	cmp	r3, #96	@ 0x60
 800d6b4:	d112      	bne.n	800d6dc <FreeRTOS_FindGateWay+0x3c>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d6bc:	f003 0304 	and.w	r3, r3, #4
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	335c      	adds	r3, #92	@ 0x5c
 800d6ca:	2210      	movs	r2, #16
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4813      	ldr	r0, [pc, #76]	@ (800d71c <FreeRTOS_FindGateWay+0x7c>)
 800d6d0:	f015 fb13 	bl	8022cfa <memcmp>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00f      	beq.n	800d6fa <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800d6da:	e017      	b.n	800d70c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b40      	cmp	r3, #64	@ 0x40
 800d6e0:	d10b      	bne.n	800d6fa <FreeRTOS_FindGateWay+0x5a>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d6e8:	f003 0304 	and.w	r3, r3, #4
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d107      	bne.n	800d70a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d700:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d1d3      	bne.n	800d6b0 <FreeRTOS_FindGateWay+0x10>
 800d708:	e000      	b.n	800d70c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800d70a:	bf00      	nop
        }

        return pxEndPoint;
 800d70c:	68fb      	ldr	r3, [r7, #12]
    }
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20001360 	.word	0x20001360
 800d71c:	0802703c 	.word	0x0802703c

0800d720 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800d728:	2305      	movs	r3, #5
 800d72a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d046      	beq.n	800d7c0 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d732:	2300      	movs	r3, #0
 800d734:	613b      	str	r3, [r7, #16]
 800d736:	e040      	b.n	800d7ba <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	021b      	lsls	r3, r3, #8
 800d73e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	785b      	ldrb	r3, [r3, #1]
 800d744:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d746:	4313      	orrs	r3, r2
 800d748:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800d74a:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800d74c:	491f      	ldr	r1, [pc, #124]	@ (800d7cc <xIPv6_GetIPType+0xac>)
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	4613      	mov	r3, r2
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	4413      	add	r3, r2
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	440b      	add	r3, r1
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b04      	cmp	r3, #4
 800d75e:	d108      	bne.n	800d772 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7fd f929 	bl	800a9b8 <xIsIPv6Loopback>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d002      	beq.n	800d772 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800d76c:	2304      	movs	r3, #4
 800d76e:	75fb      	strb	r3, [r7, #23]
                        break;
 800d770:	e026      	b.n	800d7c0 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800d772:	4916      	ldr	r1, [pc, #88]	@ (800d7cc <xIPv6_GetIPType+0xac>)
 800d774:	693a      	ldr	r2, [r7, #16]
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	005b      	lsls	r3, r3, #1
 800d77e:	440b      	add	r3, r1
 800d780:	3302      	adds	r3, #2
 800d782:	881a      	ldrh	r2, [r3, #0]
 800d784:	89fb      	ldrh	r3, [r7, #14]
 800d786:	4013      	ands	r3, r2
 800d788:	b299      	uxth	r1, r3
 800d78a:	4810      	ldr	r0, [pc, #64]	@ (800d7cc <xIPv6_GetIPType+0xac>)
 800d78c:	693a      	ldr	r2, [r7, #16]
 800d78e:	4613      	mov	r3, r2
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	4413      	add	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4403      	add	r3, r0
 800d798:	3304      	adds	r3, #4
 800d79a:	881b      	ldrh	r3, [r3, #0]
 800d79c:	4299      	cmp	r1, r3
 800d79e:	d109      	bne.n	800d7b4 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800d7a0:	490a      	ldr	r1, [pc, #40]	@ (800d7cc <xIPv6_GetIPType+0xac>)
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	440b      	add	r3, r1
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	75fb      	strb	r3, [r7, #23]
                    break;
 800d7b2:	e005      	b.n	800d7c0 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	613b      	str	r3, [r7, #16]
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b04      	cmp	r3, #4
 800d7be:	ddbb      	ble.n	800d738 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	08027094 	.word	0x08027094

0800d7d0 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d7e2:	4a16      	ldr	r2, [pc, #88]	@ (800d83c <pcEndpointName+0x6c>)
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	68b8      	ldr	r0, [r7, #8]
 800d7e8:	f015 f902 	bl	80229f0 <snprintf>
 800d7ec:	e020      	b.n	800d830 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d7f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <pcEndpointName+0x34>
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d007      	beq.n	800d812 <pcEndpointName+0x42>
 800d802:	e00f      	b.n	800d824 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800d804:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	2002      	movs	r0, #2
 800d80c:	f001 faaa 	bl	800ed64 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d810:	e00e      	b.n	800d830 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	68ba      	ldr	r2, [r7, #8]
 800d81c:	200a      	movs	r0, #10
 800d81e:	f001 faa1 	bl	800ed64 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d822:	e005      	b.n	800d830 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d824:	4a05      	ldr	r2, [pc, #20]	@ (800d83c <pcEndpointName+0x6c>)
 800d826:	6879      	ldr	r1, [r7, #4]
 800d828:	68b8      	ldr	r0, [r7, #8]
 800d82a:	f015 f8e1 	bl	80229f0 <snprintf>
                    break;
 800d82e:	bf00      	nop
            }
        }

        return pcBuffer;
 800d830:	68bb      	ldr	r3, [r7, #8]
    }
 800d832:	4618      	mov	r0, r3
 800d834:	3710      	adds	r7, #16
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	08025370 	.word	0x08025370

0800d840 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f002 fb21 	bl	800fe94 <xSocketValid>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d102      	bne.n	800d85e <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800d858:	2300      	movs	r3, #0
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	e015      	b.n	800d88a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d006      	beq.n	800d872 <prvValidSocket+0x32>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	69db      	ldr	r3, [r3, #28]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d102      	bne.n	800d872 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800d86c:	2300      	movs	r3, #0
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	e00b      	b.n	800d88a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d002      	beq.n	800d886 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800d880:	2300      	movs	r3, #0
 800d882:	617b      	str	r3, [r7, #20]
 800d884:	e001      	b.n	800d88a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800d886:	2301      	movs	r3, #1
 800d888:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d88a:	697b      	ldr	r3, [r7, #20]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3718      	adds	r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800d898:	4803      	ldr	r0, [pc, #12]	@ (800d8a8 <vNetworkSocketsInit+0x14>)
 800d89a:	f7f5 fa47 	bl	8002d2c <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800d89e:	4803      	ldr	r0, [pc, #12]	@ (800d8ac <vNetworkSocketsInit+0x18>)
 800d8a0:	f7f5 fa44 	bl	8002d2c <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800d8a4:	bf00      	nop
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	2000142c 	.word	0x2000142c
 800d8ac:	20001440 	.word	0x20001440

0800d8b0 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800d8c6:	f7fb ff97 	bl	80097f8 <xIPIsNetworkTaskReady>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d102      	bne.n	800d8d6 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	e05e      	b.n	800d994 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d004      	beq.n	800d8e6 <prvDetermineSocketSize+0x36>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b0a      	cmp	r3, #10
 800d8e0:	d001      	beq.n	800d8e6 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2b02      	cmp	r3, #2
 800d8ea:	d002      	beq.n	800d8f2 <prvDetermineSocketSize+0x42>
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b0a      	cmp	r3, #10
 800d8f0:	d101      	bne.n	800d8f6 <prvDetermineSocketSize+0x46>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <prvDetermineSocketSize+0x48>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d104      	bne.n	800d906 <prvDetermineSocketSize+0x56>
 800d8fc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d900:	4827      	ldr	r0, [pc, #156]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d902:	f7f3 ff21 	bl	8001748 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d906:	4b27      	ldr	r3, [pc, #156]	@ (800d9a4 <prvDetermineSocketSize+0xf4>)
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d004      	beq.n	800d91a <prvDetermineSocketSize+0x6a>
 800d910:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d914:	4822      	ldr	r0, [pc, #136]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d916:	f7f3 ff17 	bl	8001748 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d91a:	4b23      	ldr	r3, [pc, #140]	@ (800d9a8 <prvDetermineSocketSize+0xf8>)
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d922:	d004      	beq.n	800d92e <prvDetermineSocketSize+0x7e>
 800d924:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d928:	481d      	ldr	r0, [pc, #116]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d92a:	f7f3 ff0d 	bl	8001748 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b11      	cmp	r3, #17
 800d932:	d110      	bne.n	800d956 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d009      	beq.n	800d94e <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d004      	beq.n	800d94e <prvDetermineSocketSize+0x9e>
 800d944:	f240 2106 	movw	r1, #518	@ 0x206
 800d948:	4815      	ldr	r0, [pc, #84]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d94a:	f7f3 fefd 	bl	8001748 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2270      	movs	r2, #112	@ 0x70
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	e01e      	b.n	800d994 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b06      	cmp	r3, #6
 800d95a:	d111      	bne.n	800d980 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d009      	beq.n	800d976 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d004      	beq.n	800d976 <prvDetermineSocketSize+0xc6>
 800d96c:	f240 2113 	movw	r1, #531	@ 0x213
 800d970:	480b      	ldr	r0, [pc, #44]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d972:	f7f3 fee9 	bl	8001748 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d97c:	601a      	str	r2, [r3, #0]
 800d97e:	e009      	b.n	800d994 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d980:	2300      	movs	r3, #0
 800d982:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d004      	beq.n	800d994 <prvDetermineSocketSize+0xe4>
 800d98a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d98e:	4804      	ldr	r0, [pc, #16]	@ (800d9a0 <prvDetermineSocketSize+0xf0>)
 800d990:	f7f3 feda 	bl	8001748 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d994:	697b      	ldr	r3, [r7, #20]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	08025378 	.word	0x08025378
 800d9a4:	2000142c 	.word	0x2000142c
 800d9a8:	20001440 	.word	0x20001440

0800d9ac <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d9bc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	7a1b      	ldrb	r3, [r3, #8]
 800d9c4:	f003 0301 	and.w	r3, r3, #1
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00a      	beq.n	800d9e4 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d9ce:	2314      	movs	r3, #20
 800d9d0:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d9d8:	89fb      	ldrh	r3, [r7, #14]
 800d9da:	1ad3      	subs	r3, r2, r3
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d9ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d9ee:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d9f2:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d9f6:	f7fc fc85 	bl	800a304 <FreeRTOS_round_up>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da08:	08db      	lsrs	r3, r3, #3
 800da0a:	4a10      	ldr	r2, [pc, #64]	@ (800da4c <prvInitialiseTCPFields+0xa0>)
 800da0c:	fba2 2303 	umull	r2, r3, r2, r3
 800da10:	099b      	lsrs	r3, r3, #6
 800da12:	4619      	mov	r1, r3
 800da14:	2001      	movs	r0, #1
 800da16:	f7fc fc35 	bl	800a284 <FreeRTOS_max_size_t>
 800da1a:	4602      	mov	r2, r0
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da28:	08db      	lsrs	r3, r3, #3
 800da2a:	4a08      	ldr	r2, [pc, #32]	@ (800da4c <prvInitialiseTCPFields+0xa0>)
 800da2c:	fba2 2303 	umull	r2, r3, r2, r3
 800da30:	099b      	lsrs	r3, r3, #6
 800da32:	4619      	mov	r1, r3
 800da34:	2001      	movs	r0, #1
 800da36:	f7fc fc25 	bl	800a284 <FreeRTOS_max_size_t>
 800da3a:	4602      	mov	r2, r0
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800da42:	bf00      	nop
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2ce33e6d 	.word	0x2ce33e6d

0800da50 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08a      	sub	sp, #40	@ 0x28
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800da5c:	2301      	movs	r3, #1
 800da5e:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b0a      	cmp	r3, #10
 800da68:	d002      	beq.n	800da70 <FreeRTOS_socket+0x20>
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d101      	bne.n	800da74 <FreeRTOS_socket+0x24>
 800da70:	2301      	movs	r3, #1
 800da72:	e000      	b.n	800da76 <FreeRTOS_socket+0x26>
 800da74:	2300      	movs	r3, #0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d104      	bne.n	800da84 <FreeRTOS_socket+0x34>
 800da7a:	f240 2171 	movw	r1, #625	@ 0x271
 800da7e:	4845      	ldr	r0, [pc, #276]	@ (800db94 <FreeRTOS_socket+0x144>)
 800da80:	f7f3 fe62 	bl	8001748 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10c      	bne.n	800daa4 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d005      	beq.n	800da9c <FreeRTOS_socket+0x4c>
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b02      	cmp	r3, #2
 800da94:	d105      	bne.n	800daa2 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800da96:	2311      	movs	r3, #17
 800da98:	623b      	str	r3, [r7, #32]
                    break;
 800da9a:	e003      	b.n	800daa4 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800da9c:	2306      	movs	r3, #6
 800da9e:	623b      	str	r3, [r7, #32]
                    break;
 800daa0:	e000      	b.n	800daa4 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800daa2:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800daa4:	f107 0314 	add.w	r3, r7, #20
 800daa8:	6a3a      	ldr	r2, [r7, #32]
 800daaa:	68b9      	ldr	r1, [r7, #8]
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff feff 	bl	800d8b0 <prvDetermineSocketSize>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800dab8:	f04f 33ff 	mov.w	r3, #4294967295
 800dabc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800dabe:	e063      	b.n	800db88 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f8 f986 	bl	8005dd4 <pvPortMalloc>
 800dac8:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d103      	bne.n	800dad8 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800dad0:	f04f 33ff 	mov.w	r3, #4294967295
 800dad4:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800dad6:	e057      	b.n	800db88 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800dad8:	f7f4 ff53 	bl	8002982 <xEventGroupCreate>
 800dadc:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d106      	bne.n	800daf2 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800dae4:	69f8      	ldr	r0, [r7, #28]
 800dae6:	f7f8 fa49 	bl	8005f7c <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800daea:	f04f 33ff 	mov.w	r3, #4294967295
 800daee:	627b      	str	r3, [r7, #36]	@ 0x24
 800daf0:	e04a      	b.n	800db88 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	461a      	mov	r2, r3
 800daf6:	2100      	movs	r1, #0
 800daf8:	69f8      	ldr	r0, [r7, #28]
 800dafa:	f014 fa76 	bl	8021fea <memset>

            pxSocket->xEventGroup = xEventGroup;
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b02      	cmp	r3, #2
 800db08:	d008      	beq.n	800db1c <FreeRTOS_socket+0xcc>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b0a      	cmp	r3, #10
 800db0e:	d10b      	bne.n	800db28 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800db10:	69fa      	ldr	r2, [r7, #28]
 800db12:	7a13      	ldrb	r3, [r2, #8]
 800db14:	f043 0301 	orr.w	r3, r3, #1
 800db18:	7213      	strb	r3, [r2, #8]
                        break;
 800db1a:	e009      	b.n	800db30 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800db1c:	69fa      	ldr	r2, [r7, #28]
 800db1e:	7a13      	ldrb	r3, [r2, #8]
 800db20:	f36f 0300 	bfc	r3, #0, #1
 800db24:	7213      	strb	r3, [r2, #8]
                        break;
 800db26:	e003      	b.n	800db30 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800db28:	481b      	ldr	r0, [pc, #108]	@ (800db98 <FreeRTOS_socket+0x148>)
 800db2a:	f013 ff35 	bl	8021998 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800db2e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	2b11      	cmp	r3, #17
 800db34:	d105      	bne.n	800db42 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	3354      	adds	r3, #84	@ 0x54
 800db3a:	4618      	mov	r0, r3
 800db3c:	f7f5 f8f6 	bl	8002d2c <vListInitialise>
 800db40:	e007      	b.n	800db52 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	2b06      	cmp	r3, #6
 800db46:	d104      	bne.n	800db52 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	4619      	mov	r1, r3
 800db4c:	69f8      	ldr	r0, [r7, #28]
 800db4e:	f7ff ff2d 	bl	800d9ac <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	330c      	adds	r3, #12
 800db56:	4618      	mov	r0, r3
 800db58:	f7f5 f908 	bl	8002d6c <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	69fa      	ldr	r2, [r7, #28]
 800db60:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db68:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db70:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2202      	movs	r2, #2
 800db76:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800db7a:	6a3b      	ldr	r3, [r7, #32]
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800db88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3728      	adds	r7, #40	@ 0x28
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
 800db92:	bf00      	nop
 800db94:	08025378 	.word	0x08025378
 800db98:	080253a8 	.word	0x080253a8

0800db9c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800dba4:	2200      	movs	r2, #0
 800dba6:	2111      	movs	r1, #17
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fe49 	bl	800d840 <prvValidSocket>
 800dbae:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d10d      	bne.n	800dbd2 <prvMakeSureSocketIsBound+0x36>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d109      	bne.n	800dbd2 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f934 	bl	800de30 <FreeRTOS_bind>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b088      	sub	sp, #32
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800dbee:	2304      	movs	r3, #4
 800dbf0:	753b      	strb	r3, [r7, #20]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800dbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf8:	785b      	ldrb	r3, [r3, #1]
 800dbfa:	2b02      	cmp	r3, #2
 800dbfc:	d006      	beq.n	800dc0c <prvSendUDPPacket+0x30>
 800dbfe:	2b0a      	cmp	r3, #10
 800dc00:	d109      	bne.n	800dc16 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800dc02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc04:	68b8      	ldr	r0, [r7, #8]
 800dc06:	f7fd f903 	bl	800ae10 <xSend_UDP_Update_IPv6>
                break;
 800dc0a:	e005      	b.n	800dc18 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800dc0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc0e:	68b8      	ldr	r0, [r7, #8]
 800dc10:	f7fc fd68 	bl	800a6e4 <xSend_UDP_Update_IPv4>
                break;
 800dc14:	e000      	b.n	800dc18 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800dc16:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc1c:	441a      	add	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800dc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc24:	885a      	ldrh	r2, [r3, #2]
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc38:	3306      	adds	r3, #6
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800dc40:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800dc46:	f107 0314 	add.w	r3, r7, #20
 800dc4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fb fa37 	bl	80090c0 <xSendEventStructToIPTask>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d10b      	bne.n	800dc70 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00d      	beq.n	800dc80 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	4798      	blx	r3
 800dc6e:	e007      	b.n	800dc80 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d102      	bne.n	800dc80 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800dc7a:	68b8      	ldr	r0, [r7, #8]
 800dc7c:	f008 ffe4 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800dc80:	69fb      	ldr	r3, [r7, #28]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3720      	adds	r7, #32
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b08e      	sub	sp, #56	@ 0x38
 800dc8e:	af04      	add	r7, sp, #16
 800dc90:	60f8      	str	r0, [r7, #12]
 800dc92:	60b9      	str	r1, [r7, #8]
 800dc94:	607a      	str	r2, [r7, #4]
 800dc96:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca0:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800dcac:	f7fc f94a 	bl	8009f44 <xIsCallingFromIPTask>
 800dcb0:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d128      	bne.n	800dd16 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800dcc4:	f107 0310 	add.w	r3, r7, #16
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7f6 fdbf 	bl	800484c <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800dcce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f008 ff4d 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 800dcde:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d01b      	beq.n	800dd1e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcec:	4413      	add	r3, r2
 800dcee:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	68b9      	ldr	r1, [r7, #8]
 800dcf4:	69f8      	ldr	r0, [r7, #28]
 800dcf6:	f014 f86b 	bl	8021dd0 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800dcfa:	f107 0218 	add.w	r2, r7, #24
 800dcfe:	f107 0310 	add.w	r3, r7, #16
 800dd02:	4611      	mov	r1, r2
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f6 fdd9 	bl	80048bc <xTaskCheckForTimeOut>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d106      	bne.n	800dd1e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61bb      	str	r3, [r7, #24]
 800dd14:	e003      	b.n	800dd1e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800dd16:	68b8      	ldr	r0, [r7, #8]
 800dd18:	f7fc f8cc 	bl	8009eb4 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800dd1c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800dd1e:	6a3b      	ldr	r3, [r7, #32]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d010      	beq.n	800dd46 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd30:	9202      	str	r2, [sp, #8]
 800dd32:	9301      	str	r3, [sp, #4]
 800dd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	6a39      	ldr	r1, [r7, #32]
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f7ff ff4c 	bl	800dbdc <prvSendUDPPacket>
 800dd44:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3728      	adds	r7, #40	@ 0x28
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b090      	sub	sp, #64	@ 0x40
 800dd54:	af02      	add	r7, sp, #8
 800dd56:	60f8      	str	r0, [r7, #12]
 800dd58:	60b9      	str	r1, [r7, #8]
 800dd5a:	607a      	str	r2, [r7, #4]
 800dd5c:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800dd6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d013      	beq.n	800dd9c <FreeRTOS_sendto+0x4c>
 800dd74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd76:	785b      	ldrb	r3, [r3, #1]
 800dd78:	2b0a      	cmp	r3, #10
 800dd7a:	d00f      	beq.n	800dd9c <FreeRTOS_sendto+0x4c>
 800dd7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd7e:	785b      	ldrb	r3, [r3, #1]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d00b      	beq.n	800dd9c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800dd84:	f107 0310 	add.w	r3, r7, #16
 800dd88:	2218      	movs	r2, #24
 800dd8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f014 f81f 	bl	8021dd0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800dd92:	2302      	movs	r3, #2
 800dd94:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800dd96:	f107 0310 	add.w	r3, r7, #16
 800dd9a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800dd9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d104      	bne.n	800ddac <FreeRTOS_sendto+0x5c>
 800dda2:	f240 6143 	movw	r1, #1603	@ 0x643
 800dda6:	4820      	ldr	r0, [pc, #128]	@ (800de28 <FreeRTOS_sendto+0xd8>)
 800dda8:	f7f3 fcce 	bl	8001748 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d104      	bne.n	800ddbc <FreeRTOS_sendto+0x6c>
 800ddb2:	f240 6144 	movw	r1, #1604	@ 0x644
 800ddb6:	481c      	ldr	r0, [pc, #112]	@ (800de28 <FreeRTOS_sendto+0xd8>)
 800ddb8:	f7f3 fcc6 	bl	8001748 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800ddbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddbe:	785b      	ldrb	r3, [r3, #1]
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d007      	beq.n	800ddd4 <FreeRTOS_sendto+0x84>
 800ddc4:	2b0a      	cmp	r3, #10
 800ddc6:	d10b      	bne.n	800dde0 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800ddc8:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800ddcc:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800ddce:	233e      	movs	r3, #62	@ 0x3e
 800ddd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800ddd2:	e00c      	b.n	800ddee <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800ddd4:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800ddd8:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800ddda:	232a      	movs	r3, #42	@ 0x2a
 800dddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800ddde:	e006      	b.n	800ddee <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800dde0:	4812      	ldr	r0, [pc, #72]	@ (800de2c <FreeRTOS_sendto+0xdc>)
 800dde2:	f013 fdd9 	bl	8021998 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dde6:	f06f 0315 	mvn.w	r3, #21
 800ddea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ddec:	bf00      	nop
    }

    if( lReturn == 0 )
 800ddee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d114      	bne.n	800de1e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d810      	bhi.n	800de1e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800ddfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddfe:	f7ff fecd 	bl	800db9c <prvMakeSureSocketIsBound>
 800de02:	4603      	mov	r3, r0
 800de04:	2b01      	cmp	r3, #1
 800de06:	d10a      	bne.n	800de1e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800de08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0a:	9301      	str	r3, [sp, #4]
 800de0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	68b9      	ldr	r1, [r7, #8]
 800de16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de18:	f7ff ff37 	bl	800dc8a <prvSendTo_ActualSend>
 800de1c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800de1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800de20:	4618      	mov	r0, r3
 800de22:	3738      	adds	r7, #56	@ 0x38
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	08025378 	.word	0x08025378
 800de2c:	0802542c 	.word	0x0802542c

0800de30 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b090      	sub	sp, #64	@ 0x40
 800de34:	af02      	add	r7, sp, #8
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d013      	beq.n	800de72 <FreeRTOS_bind+0x42>
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d00f      	beq.n	800de72 <FreeRTOS_bind+0x42>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	2b02      	cmp	r3, #2
 800de58:	d00b      	beq.n	800de72 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800de5a:	f107 0310 	add.w	r3, r7, #16
 800de5e:	2218      	movs	r2, #24
 800de60:	68b9      	ldr	r1, [r7, #8]
 800de62:	4618      	mov	r0, r3
 800de64:	f013 ffb4 	bl	8021dd0 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800de68:	2302      	movs	r3, #2
 800de6a:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800de72:	f7fc f867 	bl	8009f44 <xIsCallingFromIPTask>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d004      	beq.n	800de86 <FreeRTOS_bind+0x56>
 800de7c:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800de80:	484b      	ldr	r0, [pc, #300]	@ (800dfb0 <FreeRTOS_bind+0x180>)
 800de82:	f7f3 fc61 	bl	8001748 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800de86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800de88:	f002 f804 	bl	800fe94 <xSocketValid>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d103      	bne.n	800de9a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800de92:	f06f 0315 	mvn.w	r3, #21
 800de96:	637b      	str	r3, [r7, #52]	@ 0x34
 800de98:	e084      	b.n	800dfa4 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800de9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d009      	beq.n	800deb6 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800dea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dea6:	4619      	mov	r1, r3
 800dea8:	4842      	ldr	r0, [pc, #264]	@ (800dfb4 <FreeRTOS_bind+0x184>)
 800deaa:	f013 fd75 	bl	8021998 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800deae:	f06f 0315 	mvn.w	r3, #21
 800deb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800deb4:	e076      	b.n	800dfa4 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800deb6:	2309      	movs	r3, #9
 800deb8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d042      	beq.n	800df4c <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	785b      	ldrb	r3, [r3, #1]
 800deca:	2b02      	cmp	r3, #2
 800decc:	d010      	beq.n	800def0 <FreeRTOS_bind+0xc0>
 800dece:	2b0a      	cmp	r3, #10
 800ded0:	d129      	bne.n	800df26 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ded2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	3308      	adds	r3, #8
 800dedc:	2210      	movs	r2, #16
 800dede:	4619      	mov	r1, r3
 800dee0:	f013 ff76 	bl	8021dd0 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800dee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dee6:	7a13      	ldrb	r3, [r2, #8]
 800dee8:	f043 0301 	orr.w	r3, r3, #1
 800deec:	7213      	strb	r3, [r2, #8]
                        break;
 800deee:	e01e      	b.n	800df2e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	061a      	lsls	r2, r3, #24
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	021b      	lsls	r3, r3, #8
 800defc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df00:	431a      	orrs	r2, r3
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	0a1b      	lsrs	r3, r3, #8
 800df08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df0c:	431a      	orrs	r2, r3
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	0e1b      	lsrs	r3, r3, #24
 800df14:	431a      	orrs	r2, r3
 800df16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df18:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800df1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df1c:	7a13      	ldrb	r3, [r2, #8]
 800df1e:	f36f 0300 	bfc	r3, #0, #1
 800df22:	7213      	strb	r3, [r2, #8]
                        break;
 800df24:	e003      	b.n	800df2e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800df26:	4824      	ldr	r0, [pc, #144]	@ (800dfb8 <FreeRTOS_bind+0x188>)
 800df28:	f013 fd36 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800df2c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	885b      	ldrh	r3, [r3, #2]
 800df32:	021b      	lsls	r3, r3, #8
 800df34:	b21a      	sxth	r2, r3
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	0a1b      	lsrs	r3, r3, #8
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	b21b      	sxth	r3, r3
 800df40:	4313      	orrs	r3, r2
 800df42:	b21b      	sxth	r3, r3
 800df44:	b29a      	uxth	r2, r3
 800df46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df48:	871a      	strh	r2, [r3, #56]	@ 0x38
 800df4a:	e009      	b.n	800df60 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800df4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df4e:	2200      	movs	r2, #0
 800df50:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800df52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df54:	3328      	adds	r3, #40	@ 0x28
 800df56:	2210      	movs	r2, #16
 800df58:	2100      	movs	r1, #0
 800df5a:	4618      	mov	r0, r3
 800df5c:	f014 f845 	bl	8021fea <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800df60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800df64:	f04f 31ff 	mov.w	r1, #4294967295
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fb f8a9 	bl	80090c0 <xSendEventStructToIPTask>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d106      	bne.n	800df82 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800df74:	4811      	ldr	r0, [pc, #68]	@ (800dfbc <FreeRTOS_bind+0x18c>)
 800df76:	f013 fd0f 	bl	8021998 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800df7a:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800df7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df80:	e010      	b.n	800dfa4 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800df82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df84:	6858      	ldr	r0, [r3, #4]
 800df86:	f04f 33ff 	mov.w	r3, #4294967295
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	2300      	movs	r3, #0
 800df8e:	2201      	movs	r2, #1
 800df90:	2110      	movs	r1, #16
 800df92:	f7f4 fd0d 	bl	80029b0 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800df96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d102      	bne.n	800dfa4 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df9e:	f06f 0315 	mvn.w	r3, #21
 800dfa2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800dfa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3738      	adds	r7, #56	@ 0x38
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	08025378 	.word	0x08025378
 800dfb4:	08025454 	.word	0x08025454
 800dfb8:	08025480 	.word	0x08025480
 800dfbc:	080254a8 	.word	0x080254a8

0800dfc0 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <prvSocketBindAdd+0x22>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dfde:	2b06      	cmp	r3, #6
 800dfe0:	d024      	beq.n	800e02c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	885b      	ldrh	r3, [r3, #2]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fdf1 	bl	800ebd0 <pxListFindListItemWithValue>
 800dfee:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d01b      	beq.n	800e02c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dffa:	2b06      	cmp	r3, #6
 800dffc:	d101      	bne.n	800e002 <prvSocketBindAdd+0x42>
 800dffe:	493e      	ldr	r1, [pc, #248]	@ (800e0f8 <prvSocketBindAdd+0x138>)
 800e000:	e000      	b.n	800e004 <prvSocketBindAdd+0x44>
 800e002:	493e      	ldr	r1, [pc, #248]	@ (800e0fc <prvSocketBindAdd+0x13c>)
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	885b      	ldrh	r3, [r3, #2]
 800e008:	021b      	lsls	r3, r3, #8
 800e00a:	b21a      	sxth	r2, r3
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	885b      	ldrh	r3, [r3, #2]
 800e010:	0a1b      	lsrs	r3, r3, #8
 800e012:	b29b      	uxth	r3, r3
 800e014:	b21b      	sxth	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b21b      	sxth	r3, r3
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	461a      	mov	r2, r3
 800e01e:	4838      	ldr	r0, [pc, #224]	@ (800e100 <prvSocketBindAdd+0x140>)
 800e020:	f013 fcba 	bl	8021998 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800e024:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e060      	b.n	800e0ee <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	885b      	ldrh	r3, [r3, #2]
 800e030:	461a      	mov	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	885b      	ldrh	r3, [r3, #2]
 800e03a:	021b      	lsls	r3, r3, #8
 800e03c:	b21a      	sxth	r2, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	885b      	ldrh	r3, [r3, #2]
 800e042:	0a1b      	lsrs	r3, r3, #8
 800e044:	b29b      	uxth	r3, r3
 800e046:	b21b      	sxth	r3, r3
 800e048:	4313      	orrs	r3, r2
 800e04a:	b21b      	sxth	r3, r3
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	785b      	ldrb	r3, [r3, #1]
 800e056:	2b0a      	cmp	r3, #10
 800e058:	d109      	bne.n	800e06e <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	3308      	adds	r3, #8
 800e064:	2210      	movs	r2, #16
 800e066:	4619      	mov	r1, r3
 800e068:	f013 feb2 	bl	8021dd0 <memcpy>
 800e06c:	e00c      	b.n	800e088 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	689b      	ldr	r3, [r3, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d008      	beq.n	800e088 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	2107      	movs	r1, #7
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7fe ffb7 	bl	800cff0 <FreeRTOS_FindEndPointOnIP_IPv4>
 800e082:	4602      	mov	r2, r0
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d019      	beq.n	800e0c4 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	061a      	lsls	r2, r3, #24
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	021b      	lsls	r3, r3, #8
 800e0a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e0a4:	431a      	orrs	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	0a1b      	lsrs	r3, r3, #8
 800e0ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e0b2:	431a      	orrs	r2, r3
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	0e1b      	lsrs	r3, r3, #24
 800e0bc:	431a      	orrs	r2, r3
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	629a      	str	r2, [r3, #40]	@ 0x28
 800e0c2:	e00a      	b.n	800e0da <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	785b      	ldrb	r3, [r3, #1]
 800e0c8:	2b0a      	cmp	r3, #10
 800e0ca:	d006      	beq.n	800e0da <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3328      	adds	r3, #40	@ 0x28
 800e0d0:	2210      	movs	r2, #16
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f013 ff88 	bl	8021fea <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800e0da:	f7f5 fefb 	bl	8003ed4 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	330c      	adds	r3, #12
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7f4 fe4e 	bl	8002d86 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800e0ea:	f7f5 ff01 	bl	8003ef0 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800e0ee:	697b      	ldr	r3, [r7, #20]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	080254cc 	.word	0x080254cc
 800e0fc:	080254d0 	.word	0x080254d0
 800e100:	080254d4 	.word	0x080254d4

0800e104 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08e      	sub	sp, #56	@ 0x38
 800e108:	af00      	add	r7, sp, #0
 800e10a:	60f8      	str	r0, [r7, #12]
 800e10c:	60b9      	str	r1, [r7, #8]
 800e10e:	607a      	str	r2, [r7, #4]
 800e110:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e112:	2300      	movs	r3, #0
 800e114:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f001 feba 	bl	800fe94 <xSocketValid>
 800e120:	4603      	mov	r3, r0
 800e122:	2b01      	cmp	r3, #1
 800e124:	d004      	beq.n	800e130 <vSocketBind+0x2c>
 800e126:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e12a:	4828      	ldr	r0, [pc, #160]	@ (800e1cc <vSocketBind+0xc8>)
 800e12c:	f7f3 fb0c 	bl	8001748 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e136:	2b06      	cmp	r3, #6
 800e138:	d102      	bne.n	800e140 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e13a:	4b25      	ldr	r3, [pc, #148]	@ (800e1d0 <vSocketBind+0xcc>)
 800e13c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e13e:	e001      	b.n	800e144 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e140:	4b24      	ldr	r3, [pc, #144]	@ (800e1d4 <vSocketBind+0xd0>)
 800e142:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d115      	bne.n	800e176 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e14a:	f107 0314 	add.w	r3, r7, #20
 800e14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e150:	2218      	movs	r2, #24
 800e152:	2100      	movs	r1, #0
 800e154:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e156:	f013 ff48 	bl	8021fea <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	7a1b      	ldrb	r3, [r3, #8]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d003      	beq.n	800e170 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	220a      	movs	r2, #10
 800e16c:	705a      	strb	r2, [r3, #1]
 800e16e:	e002      	b.n	800e176 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e172:	2202      	movs	r2, #2
 800e174:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d104      	bne.n	800e186 <vSocketBind+0x82>
 800e17c:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e180:	4812      	ldr	r0, [pc, #72]	@ (800e1cc <vSocketBind+0xc8>)
 800e182:	f7f3 fae1 	bl	8001748 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e188:	885b      	ldrh	r3, [r3, #2]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d111      	bne.n	800e1b2 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e194:	4618      	mov	r0, r3
 800e196:	f000 fcc3 	bl	800eb20 <prvGetPrivatePortNumber>
 800e19a:	4603      	mov	r3, r0
 800e19c:	461a      	mov	r2, r3
 800e19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a0:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a4:	885b      	ldrh	r3, [r3, #2]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d103      	bne.n	800e1b2 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e1aa:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e1ae:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e1b0:	e006      	b.n	800e1c0 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f7ff ff01 	bl	800dfc0 <prvSocketBindAdd>
 800e1be:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3738      	adds	r7, #56	@ 0x38
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08025378 	.word	0x08025378
 800e1d0:	20001440 	.word	0x20001440
 800e1d4:	2000142c 	.word	0x2000142c

0800e1d8 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e1e4:	230a      	movs	r3, #10
 800e1e6:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f001 fe51 	bl	800fe94 <xSocketValid>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	617b      	str	r3, [r7, #20]
 800e1fc:	e02f      	b.n	800e25e <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e204:	2b06      	cmp	r3, #6
 800e206:	d10c      	bne.n	800e222 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2200      	movs	r2, #0
 800e214:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	2200      	movs	r2, #0
 800e21c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e220:	e00a      	b.n	800e238 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e228:	2b11      	cmp	r3, #17
 800e22a:	d105      	bne.n	800e238 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2200      	movs	r2, #0
 800e230:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	2200      	movs	r2, #0
 800e236:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e238:	f107 0308 	add.w	r3, r7, #8
 800e23c:	f04f 31ff 	mov.w	r1, #4294967295
 800e240:	4618      	mov	r0, r3
 800e242:	f7fa ff3d 	bl	80090c0 <xSendEventStructToIPTask>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d106      	bne.n	800e25a <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e24c:	4806      	ldr	r0, [pc, #24]	@ (800e268 <FreeRTOS_closesocket+0x90>)
 800e24e:	f013 fba3 	bl	8021998 <lUDPLoggingPrintf>
            xResult = -1;
 800e252:	f04f 33ff 	mov.w	r3, #4294967295
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	e001      	b.n	800e25e <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800e25a:	2301      	movs	r3, #1
 800e25c:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e25e:	697b      	ldr	r3, [r7, #20]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}
 800e268:	080254f8 	.word	0x080254f8

0800e26c <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e26c:	b590      	push	{r4, r7, lr}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e27a:	2b06      	cmp	r3, #6
 800e27c:	d129      	bne.n	800e2d2 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e284:	2b00      	cmp	r3, #0
 800e286:	d005      	beq.n	800e294 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e28e:	4618      	mov	r0, r3
 800e290:	f008 fcda 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800e29a:	4618      	mov	r0, r3
 800e29c:	f006 fee6 	bl	801506c <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d005      	beq.n	800e2b6 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f7 fe63 	bl	8005f7c <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d005      	beq.n	800e2cc <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f7 fe58 	bl	8005f7c <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f8bd 	bl	800e44c <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d008      	beq.n	800e2ec <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800e2da:	f7f5 fdfb 	bl	8003ed4 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	330c      	adds	r3, #12
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7f4 fdac 	bl	8002e40 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800e2e8:	f7f5 fe02 	bl	8003ef0 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e2f2:	2b11      	cmp	r3, #17
 800e2f4:	d10f      	bne.n	800e316 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e2f6:	e00a      	b.n	800e30e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	4618      	mov	r0, r3
 800e304:	f7f4 fd9c 	bl	8002e40 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f008 fc9d 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1f0      	bne.n	800e2f8 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d004      	beq.n	800e328 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	4618      	mov	r0, r3
 800e324:	f7f4 fcaa 	bl	8002c7c <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e32e:	2b06      	cmp	r3, #6
 800e330:	d10c      	bne.n	800e34c <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f816 	bl	800e364 <prvSocketProps>
 800e338:	4604      	mov	r4, r0
 800e33a:	f008 fcd7 	bl	8016cec <uxGetNumberOfFreeNetworkBuffers>
 800e33e:	4602      	mov	r2, r0
 800e340:	4b06      	ldr	r3, [pc, #24]	@ (800e35c <vSocketClose+0xf0>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4621      	mov	r1, r4
 800e346:	4806      	ldr	r0, [pc, #24]	@ (800e360 <vSocketClose+0xf4>)
 800e348:	f013 fb26 	bl	8021998 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7f7 fe15 	bl	8005f7c <vPortFree>

    return NULL;
 800e352:	2300      	movs	r3, #0
} /* Tested */
 800e354:	4618      	mov	r0, r3
 800e356:	3714      	adds	r7, #20
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd90      	pop	{r4, r7, pc}
 800e35c:	20001440 	.word	0x20001440
 800e360:	08025518 	.word	0x08025518

0800e364 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800e364:	b580      	push	{r7, lr}
 800e366:	b086      	sub	sp, #24
 800e368:	af04      	add	r7, sp, #16
 800e36a:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e372:	2b06      	cmp	r3, #6
 800e374:	d132      	bne.n	800e3dc <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	7a1b      	ldrb	r3, [r3, #8]
 800e37a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <prvSocketProps+0x26>
 800e384:	2b01      	cmp	r3, #1
 800e386:	d014      	beq.n	800e3b2 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800e388:	e050      	b.n	800e42c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e392:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e39e:	9202      	str	r2, [sp, #8]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	9000      	str	r0, [sp, #0]
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	4a24      	ldr	r2, [pc, #144]	@ (800e438 <prvSocketProps+0xd4>)
 800e3a8:	215c      	movs	r1, #92	@ 0x5c
 800e3aa:	4824      	ldr	r0, [pc, #144]	@ (800e43c <prvSocketProps+0xd8>)
 800e3ac:	f014 fb20 	bl	80229f0 <snprintf>
                            break;
 800e3b0:	e03c      	b.n	800e42c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e3bc:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e3c8:	9202      	str	r2, [sp, #8]
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	9000      	str	r0, [sp, #0]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800e440 <prvSocketProps+0xdc>)
 800e3d2:	215c      	movs	r1, #92	@ 0x5c
 800e3d4:	4819      	ldr	r0, [pc, #100]	@ (800e43c <prvSocketProps+0xd8>)
 800e3d6:	f014 fb0b 	bl	80229f0 <snprintf>
                            break;
 800e3da:	e027      	b.n	800e42c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e3e2:	2b11      	cmp	r3, #17
 800e3e4:	d122      	bne.n	800e42c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7a1b      	ldrb	r3, [r3, #8]
 800e3ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d002      	beq.n	800e3fa <prvSocketProps+0x96>
 800e3f4:	2b01      	cmp	r3, #1
 800e3f6:	d00c      	beq.n	800e412 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800e3f8:	e018      	b.n	800e42c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	4613      	mov	r3, r2
 800e406:	4a0f      	ldr	r2, [pc, #60]	@ (800e444 <prvSocketProps+0xe0>)
 800e408:	215c      	movs	r1, #92	@ 0x5c
 800e40a:	480c      	ldr	r0, [pc, #48]	@ (800e43c <prvSocketProps+0xd8>)
 800e40c:	f014 faf0 	bl	80229f0 <snprintf>
                        break;
 800e410:	e00c      	b.n	800e42c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	4613      	mov	r3, r2
 800e420:	4a09      	ldr	r2, [pc, #36]	@ (800e448 <prvSocketProps+0xe4>)
 800e422:	215c      	movs	r1, #92	@ 0x5c
 800e424:	4805      	ldr	r0, [pc, #20]	@ (800e43c <prvSocketProps+0xd8>)
 800e426:	f014 fae3 	bl	80229f0 <snprintf>
                        break;
 800e42a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800e42c:	4b03      	ldr	r3, [pc, #12]	@ (800e43c <prvSocketProps+0xd8>)
    }
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	0802554c 	.word	0x0802554c
 800e43c:	200013d0 	.word	0x200013d0
 800e440:	0802556c 	.word	0x0802556c
 800e444:	0802558c 	.word	0x0802558c
 800e448:	0802559c 	.word	0x0802559c

0800e44c <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8
 800e452:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e454:	4b3c      	ldr	r3, [pc, #240]	@ (800e548 <prvTCPSetSocketCount+0xfc>)
 800e456:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e45c:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e464:	2b01      	cmp	r3, #1
 800e466:	d12b      	bne.n	800e4c0 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800e46e:	e022      	b.n	800e4b6 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e482:	2b01      	cmp	r3, #1
 800e484:	d017      	beq.n	800e4b6 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e48a:	89fa      	ldrh	r2, [r7, #14]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d112      	bne.n	800e4b6 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e496:	f003 0304 	and.w	r3, r3, #4
 800e49a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d107      	bne.n	800e4b0 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e4a6:	f003 0302 	and.w	r3, r3, #2
 800e4aa:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800e4b0:	68b8      	ldr	r0, [r7, #8]
 800e4b2:	f7ff fedb 	bl	800e26c <vSocketClose>
            while( pxIterator != pxEnd )
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d1d8      	bne.n	800e470 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800e4be:	e03e      	b.n	800e53e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	617b      	str	r3, [r7, #20]
 800e4c6:	e036      	b.n	800e536 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d12b      	bne.n	800e530 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e4dc:	89fa      	ldrh	r2, [r7, #14]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d126      	bne.n	800e530 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d021      	beq.n	800e530 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e4f2:	3b01      	subs	r3, #1
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e500:	4619      	mov	r1, r3
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e508:	461a      	mov	r2, r3
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e510:	4618      	mov	r0, r3
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d101      	bne.n	800e520 <prvTCPSetSocketCount+0xd4>
 800e51c:	4b0b      	ldr	r3, [pc, #44]	@ (800e54c <prvTCPSetSocketCount+0x100>)
 800e51e:	e000      	b.n	800e522 <prvTCPSetSocketCount+0xd6>
 800e520:	4b0b      	ldr	r3, [pc, #44]	@ (800e550 <prvTCPSetSocketCount+0x104>)
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	4603      	mov	r3, r0
 800e526:	480b      	ldr	r0, [pc, #44]	@ (800e554 <prvTCPSetSocketCount+0x108>)
 800e528:	f013 fa36 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800e52c:	bf00      	nop
    }
 800e52e:	e006      	b.n	800e53e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800e536:	697a      	ldr	r2, [r7, #20]
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d1c4      	bne.n	800e4c8 <prvTCPSetSocketCount+0x7c>
    }
 800e53e:	bf00      	nop
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	20001448 	.word	0x20001448
 800e54c:	080255ac 	.word	0x080255ac
 800e550:	080255b0 	.word	0x080255b0
 800e554:	080255b4 	.word	0x080255b4

0800e558 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e56a:	2b06      	cmp	r3, #6
 800e56c:	d00d      	beq.n	800e58a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	2b04      	cmp	r3, #4
 800e572:	d101      	bne.n	800e578 <prvSockopt_so_buffer+0x20>
 800e574:	4b23      	ldr	r3, [pc, #140]	@ (800e604 <prvSockopt_so_buffer+0xac>)
 800e576:	e000      	b.n	800e57a <prvSockopt_so_buffer+0x22>
 800e578:	4b23      	ldr	r3, [pc, #140]	@ (800e608 <prvSockopt_so_buffer+0xb0>)
 800e57a:	4619      	mov	r1, r3
 800e57c:	4823      	ldr	r0, [pc, #140]	@ (800e60c <prvSockopt_so_buffer+0xb4>)
 800e57e:	f013 fa0b 	bl	8021998 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e582:	f06f 0315 	mvn.w	r3, #21
 800e586:	617b      	str	r3, [r7, #20]
 800e588:	e036      	b.n	800e5f8 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b04      	cmp	r3, #4
 800e58e:	d104      	bne.n	800e59a <prvSockopt_so_buffer+0x42>
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d107      	bne.n	800e5aa <prvSockopt_so_buffer+0x52>
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	2b05      	cmp	r3, #5
 800e59e:	d112      	bne.n	800e5c6 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00d      	beq.n	800e5c6 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	d101      	bne.n	800e5b4 <prvSockopt_so_buffer+0x5c>
 800e5b0:	4b14      	ldr	r3, [pc, #80]	@ (800e604 <prvSockopt_so_buffer+0xac>)
 800e5b2:	e000      	b.n	800e5b6 <prvSockopt_so_buffer+0x5e>
 800e5b4:	4b14      	ldr	r3, [pc, #80]	@ (800e608 <prvSockopt_so_buffer+0xb0>)
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	4815      	ldr	r0, [pc, #84]	@ (800e610 <prvSockopt_so_buffer+0xb8>)
 800e5ba:	f013 f9ed 	bl	8021998 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e5be:	f06f 0315 	mvn.w	r3, #21
 800e5c2:	617b      	str	r3, [r7, #20]
 800e5c4:	e018      	b.n	800e5f8 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	2b04      	cmp	r3, #4
 800e5d0:	d10c      	bne.n	800e5ec <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6938      	ldr	r0, [r7, #16]
 800e5dc:	f7fb fe92 	bl	800a304 <FreeRTOS_round_up>
 800e5e0:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	693a      	ldr	r2, [r7, #16]
 800e5e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e5ea:	e003      	b.n	800e5f4 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	693a      	ldr	r2, [r7, #16]
 800e5f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e5f8:	697b      	ldr	r3, [r7, #20]
    }
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	080255e0 	.word	0x080255e0
 800e608:	080255e4 	.word	0x080255e4
 800e60c:	080255e8 	.word	0x080255e8
 800e610:	0802560c 	.word	0x0802560c

0800e614 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800e614:	b480      	push	{r7}
 800e616:	b087      	sub	sp, #28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800e620:	2300      	movs	r3, #0
 800e622:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	2b09      	cmp	r3, #9
 800e628:	d002      	beq.n	800e630 <prvSetOptionCallback+0x1c>
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	2b0a      	cmp	r3, #10
 800e62e:	d102      	bne.n	800e636 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800e630:	2311      	movs	r3, #17
 800e632:	613b      	str	r3, [r7, #16]
 800e634:	e001      	b.n	800e63a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800e636:	2306      	movs	r3, #6
 800e638:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	429a      	cmp	r2, r3
 800e646:	d002      	beq.n	800e64e <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e648:	f06f 0315 	mvn.w	r3, #21
 800e64c:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d131      	bne.n	800e6b8 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	3b06      	subs	r3, #6
 800e658:	2b04      	cmp	r3, #4
 800e65a:	d829      	bhi.n	800e6b0 <prvSetOptionCallback+0x9c>
 800e65c:	a201      	add	r2, pc, #4	@ (adr r2, 800e664 <prvSetOptionCallback+0x50>)
 800e65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e662:	bf00      	nop
 800e664:	0800e679 	.word	0x0800e679
 800e668:	0800e685 	.word	0x0800e685
 800e66c:	0800e691 	.word	0x0800e691
 800e670:	0800e69d 	.word	0x0800e69d
 800e674:	0800e6a7 	.word	0x0800e6a7
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800e682:	e019      	b.n	800e6b8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	685a      	ldr	r2, [r3, #4]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800e68e:	e013      	b.n	800e6b8 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	689a      	ldr	r2, [r3, #8]
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800e69a:	e00d      	b.n	800e6b8 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	68da      	ldr	r2, [r3, #12]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800e6a4:	e008      	b.n	800e6b8 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	691a      	ldr	r2, [r3, #16]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800e6ae:	e003      	b.n	800e6b8 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e6b0:	f06f 0315 	mvn.w	r3, #21
 800e6b4:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e6b6:	bf00      	nop
            }
        }

        return xReturn;
 800e6b8:	697b      	ldr	r3, [r7, #20]
    }
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	371c      	adds	r7, #28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
 800e6c6:	bf00      	nop

0800e6c8 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e6d2:	f06f 0315 	mvn.w	r3, #21
 800e6d6:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3354      	adds	r3, #84	@ 0x54
 800e6dc:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e6e4:	2b06      	cmp	r3, #6
 800e6e6:	d003      	beq.n	800e6f0 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800e6e8:	4825      	ldr	r0, [pc, #148]	@ (800e780 <prvSetOptionTCPWindows+0xb8>)
 800e6ea:	f013 f955 	bl	8021998 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e6ee:	e042      	b.n	800e776 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	2104      	movs	r1, #4
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff ff2c 	bl	800e558 <prvSockopt_so_buffer>
 800e700:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d133      	bne.n	800e770 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	3308      	adds	r3, #8
 800e70c:	461a      	mov	r2, r3
 800e70e:	2105      	movs	r1, #5
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff ff21 	bl	800e558 <prvSockopt_so_buffer>
 800e716:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d12a      	bne.n	800e774 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	461a      	mov	r2, r3
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	461a      	mov	r2, r3
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800e73c:	f003 0301 	and.w	r3, r3, #1
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d017      	beq.n	800e776 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	8bd2      	ldrh	r2, [r2, #30]
 800e750:	fb03 f202 	mul.w	r2, r3, r2
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	8bd2      	ldrh	r2, [r2, #30]
 800e764:	fb03 f202 	mul.w	r2, r3, r2
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e76e:	e002      	b.n	800e776 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e770:	bf00      	nop
 800e772:	e000      	b.n	800e776 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e774:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800e776:	697b      	ldr	r3, [r7, #20]
    }
 800e778:	4618      	mov	r0, r3
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	08025634 	.word	0x08025634

0800e784 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e78e:	f06f 0315 	mvn.w	r3, #21
 800e792:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e79e:	2b06      	cmp	r3, #6
 800e7a0:	d003      	beq.n	800e7aa <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800e7a2:	4813      	ldr	r0, [pc, #76]	@ (800e7f0 <prvSetOptionLowHighWater+0x6c>)
 800e7a4:	f013 f8f8 	bl	8021998 <lUDPLoggingPrintf>
 800e7a8:	e01c      	b.n	800e7e4 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d206      	bcs.n	800e7c4 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d903      	bls.n	800e7cc <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800e7c4:	480b      	ldr	r0, [pc, #44]	@ (800e7f4 <prvSetOptionLowHighWater+0x70>)
 800e7c6:	f013 f8e7 	bl	8021998 <lUDPLoggingPrintf>
 800e7ca:	e00b      	b.n	800e7e4 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	685a      	ldr	r2, [r3, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
    }
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	08025658 	.word	0x08025658
 800e7f4:	0802568c 	.word	0x0802568c

0800e7f8 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e802:	f06f 0315 	mvn.w	r3, #21
 800e806:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e80e:	2b06      	cmp	r3, #6
 800e810:	d126      	bne.n	800e860 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d007      	beq.n	800e82a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e820:	f043 0302 	orr.w	r3, r3, #2
 800e824:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800e828:	e006      	b.n	800e838 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e830:	f36f 0341 	bfc	r3, #1, #1
 800e834:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e83e:	2b04      	cmp	r3, #4
 800e840:	d90c      	bls.n	800e85c <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f001 faba 	bl	800fdbc <FreeRTOS_tx_size>
 800e848:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d006      	beq.n	800e85c <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e856:	2006      	movs	r0, #6
 800e858:	f7fa fc1c 	bl	8009094 <xSendEventToIPTask>
            }

            xReturn = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e860:	68fb      	ldr	r3, [r7, #12]
    }
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b084      	sub	sp, #16
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e874:	f06f 0315 	mvn.w	r3, #21
 800e878:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e880:	2b06      	cmp	r3, #6
 800e882:	d122      	bne.n	800e8ca <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d007      	beq.n	800e89c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e892:	f043 0304 	orr.w	r3, r3, #4
 800e896:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800e89a:	e006      	b.n	800e8aa <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e8a2:	f36f 0382 	bfc	r3, #2, #1
 800e8a6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e8b0:	f043 0301 	orr.w	r3, r3, #1
 800e8b4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e8c0:	2006      	movs	r0, #6
 800e8c2:	f7fa fbe7 	bl	8009094 <xSendEventToIPTask>
            xReturn = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
    }
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3710      	adds	r7, #16
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b087      	sub	sp, #28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d110      	bne.n	800e90e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e8f2:	2b11      	cmp	r3, #17
 800e8f4:	d107      	bne.n	800e906 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d902      	bls.n	800e906 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e900:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e904:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	697a      	ldr	r2, [r7, #20]
 800e90a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e90c:	e002      	b.n	800e914 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	621a      	str	r2, [r3, #32]
}
 800e914:	bf00      	nop
 800e916:	371c      	adds	r7, #28
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e92a:	f06f 0315 	mvn.w	r3, #21
 800e92e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e936:	2b06      	cmp	r3, #6
 800e938:	d114      	bne.n	800e964 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e948:	f043 0308 	orr.w	r3, r3, #8
 800e94c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e950:	e006      	b.n	800e960 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e958:	f36f 03c3 	bfc	r3, #3, #1
 800e95c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e964:	68fb      	ldr	r3, [r7, #12]
    }
 800e966:	4618      	mov	r0, r3
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e972:	b480      	push	{r7}
 800e974:	b085      	sub	sp, #20
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e97c:	f06f 0315 	mvn.w	r3, #21
 800e980:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e988:	2b06      	cmp	r3, #6
 800e98a:	d114      	bne.n	800e9b6 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e99a:	f043 0310 	orr.w	r3, r3, #16
 800e99e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e9a2:	e006      	b.n	800e9b2 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e9aa:	f36f 1304 	bfc	r3, #4, #1
 800e9ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
    }
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3714      	adds	r7, #20
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e9d2:	f06f 0315 	mvn.w	r3, #21
 800e9d6:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e9dc:	6938      	ldr	r0, [r7, #16]
 800e9de:	f001 fa59 	bl	800fe94 <xSocketValid>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	f040 8093 	bne.w	800eb10 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b12      	cmp	r3, #18
 800e9ee:	f200 808b 	bhi.w	800eb08 <FreeRTOS_setsockopt+0x144>
 800e9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9f8 <FreeRTOS_setsockopt+0x34>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea45 	.word	0x0800ea45
 800e9fc:	0800ea55 	.word	0x0800ea55
 800ea00:	0800ea65 	.word	0x0800ea65
 800ea04:	0800eaa5 	.word	0x0800eaa5
 800ea08:	0800eabf 	.word	0x0800eabf
 800ea0c:	0800eabf 	.word	0x0800eabf
 800ea10:	0800ea97 	.word	0x0800ea97
 800ea14:	0800ea97 	.word	0x0800ea97
 800ea18:	0800ea97 	.word	0x0800ea97
 800ea1c:	0800ea97 	.word	0x0800ea97
 800ea20:	0800ea97 	.word	0x0800ea97
 800ea24:	0800ead9 	.word	0x0800ead9
 800ea28:	0800eae5 	.word	0x0800eae5
 800ea2c:	0800eacd 	.word	0x0800eacd
 800ea30:	0800eaf1 	.word	0x0800eaf1
 800ea34:	0800eafd 	.word	0x0800eafd
 800ea38:	0800eb09 	.word	0x0800eb09
 800ea3c:	0800eb09 	.word	0x0800eb09
 800ea40:	0800eab3 	.word	0x0800eab3
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800ea44:	2200      	movs	r2, #0
 800ea46:	6839      	ldr	r1, [r7, #0]
 800ea48:	6938      	ldr	r0, [r7, #16]
 800ea4a:	f7ff ff43 	bl	800e8d4 <prvSetOptionTimeout>
                xReturn = 0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	617b      	str	r3, [r7, #20]
                break;
 800ea52:	e060      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800ea54:	2201      	movs	r2, #1
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	6938      	ldr	r0, [r7, #16]
 800ea5a:	f7ff ff3b 	bl	800e8d4 <prvSetOptionTimeout>
                xReturn = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	617b      	str	r3, [r7, #20]
                break;
 800ea62:	e058      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d109      	bne.n	800ea7e <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ea70:	f023 0302 	bic.w	r3, r3, #2
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800ea7c:	e008      	b.n	800ea90 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ea84:	f043 0302 	orr.w	r3, r3, #2
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800ea90:	2300      	movs	r3, #0
 800ea92:	617b      	str	r3, [r7, #20]
                break;
 800ea94:	e03f      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800ea96:	683a      	ldr	r2, [r7, #0]
 800ea98:	6879      	ldr	r1, [r7, #4]
 800ea9a:	6938      	ldr	r0, [r7, #16]
 800ea9c:	f7ff fdba 	bl	800e614 <prvSetOptionCallback>
 800eaa0:	6178      	str	r0, [r7, #20]
                        break;
 800eaa2:	e038      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	617b      	str	r3, [r7, #20]
                        break;
 800eab0:	e031      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6938      	ldr	r0, [r7, #16]
 800eab6:	f7ff fe65 	bl	800e784 <prvSetOptionLowHighWater>
 800eaba:	6178      	str	r0, [r7, #20]
                        break;
 800eabc:	e02b      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	6879      	ldr	r1, [r7, #4]
 800eac2:	6938      	ldr	r0, [r7, #16]
 800eac4:	f7ff fd48 	bl	800e558 <prvSockopt_so_buffer>
 800eac8:	6178      	str	r0, [r7, #20]
                        break;
 800eaca:	e024      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800eacc:	6839      	ldr	r1, [r7, #0]
 800eace:	6938      	ldr	r0, [r7, #16]
 800ead0:	f7ff fdfa 	bl	800e6c8 <prvSetOptionTCPWindows>
 800ead4:	6178      	str	r0, [r7, #20]
                        break;
 800ead6:	e01e      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	6938      	ldr	r0, [r7, #16]
 800eadc:	f7ff ff20 	bl	800e920 <prvSetOptionReuseListenSocket>
 800eae0:	6178      	str	r0, [r7, #20]
                        break;
 800eae2:	e018      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800eae4:	6839      	ldr	r1, [r7, #0]
 800eae6:	6938      	ldr	r0, [r7, #16]
 800eae8:	f7ff ff43 	bl	800e972 <prvSetOptionCloseAfterSend>
 800eaec:	6178      	str	r0, [r7, #20]
                        break;
 800eaee:	e012      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800eaf0:	6839      	ldr	r1, [r7, #0]
 800eaf2:	6938      	ldr	r0, [r7, #16]
 800eaf4:	f7ff fe80 	bl	800e7f8 <prvSetOptionSetFullSize>
 800eaf8:	6178      	str	r0, [r7, #20]
                        break;
 800eafa:	e00c      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	6938      	ldr	r0, [r7, #16]
 800eb00:	f7ff feb3 	bl	800e86a <prvSetOptionStopRX>
 800eb04:	6178      	str	r0, [r7, #20]
                        break;
 800eb06:	e006      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800eb08:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800eb0c:	617b      	str	r3, [r7, #20]
                break;
 800eb0e:	e002      	b.n	800eb16 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb10:	f06f 0315 	mvn.w	r3, #21
 800eb14:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800eb16:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3718      	adds	r7, #24
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800eb28:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800eb2c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800eb2e:	89fb      	ldrh	r3, [r7, #14]
 800eb30:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b06      	cmp	r3, #6
 800eb3e:	d102      	bne.n	800eb46 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800eb40:	4b21      	ldr	r3, [pc, #132]	@ (800ebc8 <prvGetPrivatePortNumber+0xa8>)
 800eb42:	613b      	str	r3, [r7, #16]
 800eb44:	e001      	b.n	800eb4a <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800eb46:	4b21      	ldr	r3, [pc, #132]	@ (800ebcc <prvGetPrivatePortNumber+0xac>)
 800eb48:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800eb4a:	f107 0308 	add.w	r3, r7, #8
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7f2 fec4 	bl	80018dc <xApplicationGetRandomNumber>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d030      	beq.n	800ebbc <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800eb5e:	89fa      	ldrh	r2, [r7, #14]
 800eb60:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb64:	fb01 f202 	mul.w	r2, r1, r2
 800eb68:	1a9b      	subs	r3, r3, r2
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb70:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800eb72:	8abb      	ldrh	r3, [r7, #20]
 800eb74:	021b      	lsls	r3, r3, #8
 800eb76:	b21a      	sxth	r2, r3
 800eb78:	8abb      	ldrh	r3, [r7, #20]
 800eb7a:	0a1b      	lsrs	r3, r3, #8
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	b21b      	sxth	r3, r3
 800eb80:	4313      	orrs	r3, r2
 800eb82:	b21b      	sxth	r3, r3
 800eb84:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800eb86:	4619      	mov	r1, r3
 800eb88:	6938      	ldr	r0, [r7, #16]
 800eb8a:	f000 f821 	bl	800ebd0 <pxListFindListItemWithValue>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d10a      	bne.n	800ebaa <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800eb94:	8abb      	ldrh	r3, [r7, #20]
 800eb96:	021b      	lsls	r3, r3, #8
 800eb98:	b21a      	sxth	r2, r3
 800eb9a:	8abb      	ldrh	r3, [r7, #20]
 800eb9c:	0a1b      	lsrs	r3, r3, #8
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	b21b      	sxth	r3, r3
 800eba2:	4313      	orrs	r3, r2
 800eba4:	b21b      	sxth	r3, r3
 800eba6:	82bb      	strh	r3, [r7, #20]
            break;
 800eba8:	e009      	b.n	800ebbe <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800ebae:	8afb      	ldrh	r3, [r7, #22]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800ebb4:	8afb      	ldrh	r3, [r7, #22]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1c7      	bne.n	800eb4a <prvGetPrivatePortNumber+0x2a>
 800ebba:	e000      	b.n	800ebbe <prvGetPrivatePortNumber+0x9e>
            break;
 800ebbc:	bf00      	nop

    return usResult;
 800ebbe:	8abb      	ldrh	r3, [r7, #20]
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	20001440 	.word	0x20001440
 800ebcc:	2000142c 	.word	0x2000142c

0800ebd0 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800ebde:	f7fa fe0b 	bl	80097f8 <xIPIsNetworkTaskReady>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d018      	beq.n	800ec1a <pxListFindListItemWithValue+0x4a>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d015      	beq.n	800ec1a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	613b      	str	r3, [r7, #16]
 800ebfa:	e00a      	b.n	800ec12 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d102      	bne.n	800ec0c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	617b      	str	r3, [r7, #20]
                break;
 800ec0a:	e006      	b.n	800ec1a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d1f0      	bne.n	800ebfc <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800ec1a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800ec30:	6879      	ldr	r1, [r7, #4]
 800ec32:	480b      	ldr	r0, [pc, #44]	@ (800ec60 <pxUDPSocketLookup+0x3c>)
 800ec34:	f7ff ffcc 	bl	800ebd0 <pxListFindListItemWithValue>
 800ec38:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d00a      	beq.n	800ec56 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d104      	bne.n	800ec56 <pxUDPSocketLookup+0x32>
 800ec4c:	f640 4111 	movw	r1, #3089	@ 0xc11
 800ec50:	4804      	ldr	r0, [pc, #16]	@ (800ec64 <pxUDPSocketLookup+0x40>)
 800ec52:	f7f2 fd79 	bl	8001748 <vAssertCalled>
    }

    return pxSocket;
 800ec56:	68fb      	ldr	r3, [r7, #12]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	2000142c 	.word	0x2000142c
 800ec64:	08025378 	.word	0x08025378

0800ec68 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b08b      	sub	sp, #44	@ 0x2c
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800ec76:	1d3b      	adds	r3, r7, #4
 800ec78:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ec7e:	2300      	movs	r3, #0
 800ec80:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec82:	e062      	b.n	800ed4a <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec88:	4413      	add	r3, r2
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800ec8e:	2302      	movs	r3, #2
 800ec90:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800ec92:	7ffa      	ldrb	r2, [r7, #31]
 800ec94:	4b32      	ldr	r3, [pc, #200]	@ (800ed60 <FreeRTOS_inet_ntoa+0xf8>)
 800ec96:	fba3 1302 	umull	r1, r3, r3, r2
 800ec9a:	08d9      	lsrs	r1, r3, #3
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	440b      	add	r3, r1
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	b2d9      	uxtb	r1, r3
 800eca8:	f107 020c 	add.w	r2, r7, #12
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	4413      	add	r3, r2
 800ecb0:	460a      	mov	r2, r1
 800ecb2:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800ecb4:	7ffb      	ldrb	r3, [r7, #31]
 800ecb6:	4a2a      	ldr	r2, [pc, #168]	@ (800ed60 <FreeRTOS_inet_ntoa+0xf8>)
 800ecb8:	fba2 2303 	umull	r2, r3, r2, r3
 800ecbc:	08db      	lsrs	r3, r3, #3
 800ecbe:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800ecc0:	69bb      	ldr	r3, [r7, #24]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d003      	beq.n	800ecce <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800eccc:	e7e1      	b.n	800ec92 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800ecce:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800ecd0:	7ffb      	ldrb	r3, [r7, #31]
 800ecd2:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61bb      	str	r3, [r7, #24]
 800ecd8:	e009      	b.n	800ecee <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800ecda:	f107 020c 	add.w	r2, r7, #12
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	4413      	add	r3, r2
 800ece2:	781b      	ldrb	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	3301      	adds	r3, #1
 800ecec:	61bb      	str	r3, [r7, #24]
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d9f2      	bls.n	800ecda <FreeRTOS_inet_ntoa+0x72>
 800ecf4:	e012      	b.n	800ed1c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800ecf6:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ecf8:	e010      	b.n	800ed1c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800ecfa:	f107 020c 	add.w	r2, r7, #12
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	4413      	add	r3, r2
 800ed02:	781a      	ldrb	r2, [r3, #0]
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6a3b      	ldr	r3, [r7, #32]
 800ed08:	440b      	add	r3, r1
 800ed0a:	3230      	adds	r2, #48	@ 0x30
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800ed10:	6a3b      	ldr	r3, [r7, #32]
 800ed12:	3301      	adds	r3, #1
 800ed14:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	61bb      	str	r3, [r7, #24]
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d9eb      	bls.n	800ecfa <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800ed22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d805      	bhi.n	800ed34 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800ed28:	683a      	ldr	r2, [r7, #0]
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	222e      	movs	r2, #46	@ 0x2e
 800ed30:	701a      	strb	r2, [r3, #0]
 800ed32:	e004      	b.n	800ed3e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	4413      	add	r3, r2
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800ed3e:	6a3b      	ldr	r3, [r7, #32]
 800ed40:	3301      	adds	r3, #1
 800ed42:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	3301      	adds	r3, #1
 800ed48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed4c:	2b03      	cmp	r3, #3
 800ed4e:	d999      	bls.n	800ec84 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800ed50:	693b      	ldr	r3, [r7, #16]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	372c      	adds	r7, #44	@ 0x2c
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	cccccccd 	.word	0xcccccccd

0800ed64 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d003      	beq.n	800ed80 <FreeRTOS_inet_ntop+0x1c>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b0a      	cmp	r3, #10
 800ed7c:	d007      	beq.n	800ed8e <FreeRTOS_inet_ntop+0x2a>
 800ed7e:	e00d      	b.n	800ed9c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	6879      	ldr	r1, [r7, #4]
 800ed84:	68b8      	ldr	r0, [r7, #8]
 800ed86:	f7fb fc8d 	bl	800a6a4 <FreeRTOS_inet_ntop4>
 800ed8a:	6178      	str	r0, [r7, #20]
                break;
 800ed8c:	e009      	b.n	800eda2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800ed8e:	683a      	ldr	r2, [r7, #0]
 800ed90:	6879      	ldr	r1, [r7, #4]
 800ed92:	68b8      	ldr	r0, [r7, #8]
 800ed94:	f7fc f9c1 	bl	800b11a <FreeRTOS_inet_ntop6>
 800ed98:	6178      	str	r0, [r7, #20]
                break;
 800ed9a:	e002      	b.n	800eda2 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	617b      	str	r3, [r7, #20]
            break;
 800eda0:	bf00      	nop
    }

    return pcResult;
 800eda2:	697b      	ldr	r3, [r7, #20]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	7a1b      	ldrb	r3, [r3, #8]
 800edbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <FreeRTOS_GetLocalAddress+0x22>
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d02a      	beq.n	800ee22 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800edcc:	e044      	b.n	800ee58 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	2202      	movs	r2, #2
 800edd2:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2218      	movs	r2, #24
 800edd8:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edde:	061a      	lsls	r2, r3, #24
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ede4:	021b      	lsls	r3, r3, #8
 800ede6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800edea:	431a      	orrs	r2, r3
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edf0:	0a1b      	lsrs	r3, r3, #8
 800edf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800edf6:	431a      	orrs	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edfc:	0e1b      	lsrs	r3, r3, #24
 800edfe:	431a      	orrs	r2, r3
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee08:	021b      	lsls	r3, r3, #8
 800ee0a:	b21a      	sxth	r2, r3
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee10:	0a1b      	lsrs	r3, r3, #8
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	b21b      	sxth	r3, r3
 800ee16:	4313      	orrs	r3, r2
 800ee18:	b21b      	sxth	r3, r3
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	805a      	strh	r2, [r3, #2]
                break;
 800ee20:	e01a      	b.n	800ee58 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	220a      	movs	r2, #10
 800ee26:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f103 0008 	add.w	r0, r3, #8
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	3328      	adds	r3, #40	@ 0x28
 800ee32:	2210      	movs	r2, #16
 800ee34:	4619      	mov	r1, r3
 800ee36:	f012 ffcb 	bl	8021dd0 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee3e:	021b      	lsls	r3, r3, #8
 800ee40:	b21a      	sxth	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ee46:	0a1b      	lsrs	r3, r3, #8
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	b21b      	sxth	r3, r3
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	b21b      	sxth	r3, r3
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	805a      	strh	r2, [r3, #2]
                break;
 800ee56:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800ee58:	2318      	movs	r3, #24
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b084      	sub	sp, #16
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d006      	beq.n	800ee80 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ee76:	2300      	movs	r3, #0
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	f7f4 f95a 	bl	8003134 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d015      	beq.n	800eeb4 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	0a1b      	lsrs	r3, r3, #8
 800ee8e:	f003 030f 	and.w	r3, r3, #15
 800ee92:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d00c      	beq.n	800eeb4 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	431a      	orrs	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	68f9      	ldr	r1, [r7, #12]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f3 fe64 	bl	8002b7c <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <vSocketWakeUpUser+0x7e>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d007      	beq.n	800eee0 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f7f3 fe4e 	bl	8002b7c <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	601a      	str	r2, [r3, #0]
}
 800eee6:	bf00      	nop
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}

0800eeee <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800eeee:	b480      	push	{r7}
 800eef0:	b085      	sub	sp, #20
 800eef2:	af00      	add	r7, sp, #0
 800eef4:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800eefc:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800eefe:	7afb      	ldrb	r3, [r7, #11]
 800ef00:	2b08      	cmp	r3, #8
 800ef02:	d006      	beq.n	800ef12 <bMayConnect+0x24>
 800ef04:	2b08      	cmp	r3, #8
 800ef06:	dc0b      	bgt.n	800ef20 <bMayConnect+0x32>
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d002      	beq.n	800ef12 <bMayConnect+0x24>
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d003      	beq.n	800ef18 <bMayConnect+0x2a>
 800ef10:	e006      	b.n	800ef20 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	60fb      	str	r3, [r7, #12]
                break;
 800ef16:	e007      	b.n	800ef28 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800ef18:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800ef1c:	60fb      	str	r3, [r7, #12]
                break;
 800ef1e:	e003      	b.n	800ef28 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800ef20:	f06f 030a 	mvn.w	r3, #10
 800ef24:	60fb      	str	r3, [r7, #12]
                break;
 800ef26:	bf00      	nop
        }

        return xResult;
 800ef28:	68fb      	ldr	r3, [r7, #12]
    }
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3714      	adds	r7, #20
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
	...

0800ef38 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d103      	bne.n	800ef54 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800ef4c:	f06f 0315 	mvn.w	r3, #21
 800ef50:	60fb      	str	r3, [r7, #12]
 800ef52:	e01f      	b.n	800ef94 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800ef54:	2200      	movs	r2, #0
 800ef56:	2106      	movs	r1, #6
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7fe fc71 	bl	800d840 <prvValidSocket>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d103      	bne.n	800ef6c <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800ef64:	f06f 0308 	mvn.w	r3, #8
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	e013      	b.n	800ef94 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 ff49 	bl	800fe04 <FreeRTOS_issocketconnected>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dd03      	ble.n	800ef80 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800ef78:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800ef7c:	60fb      	str	r3, [r7, #12]
 800ef7e:	e009      	b.n	800ef94 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	69db      	ldr	r3, [r3, #28]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d105      	bne.n	800ef94 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800ef88:	2200      	movs	r2, #0
 800ef8a:	2100      	movs	r1, #0
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7fe ff4f 	bl	800de30 <FreeRTOS_bind>
 800ef92:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f040 80a6 	bne.w	800f0e8 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff ffa6 	bl	800eeee <bMayConnect>
 800efa2:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	f040 809e 	bne.w	800f0e8 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800efb2:	f36f 03c3 	bfc	r3, #3, #1
 800efb6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	785b      	ldrb	r3, [r3, #1]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	d027      	beq.n	800f01a <prvTCPConnectStart+0xe2>
 800efca:	2b0a      	cmp	r3, #10
 800efcc:	d168      	bne.n	800f0a0 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	7a13      	ldrb	r3, [r2, #8]
 800efd2:	f043 0301 	orr.w	r3, r3, #1
 800efd6:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800efdc:	4618      	mov	r0, r3
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	f103 0108 	add.w	r1, r3, #8
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	885b      	ldrh	r3, [r3, #2]
 800efe8:	021b      	lsls	r3, r3, #8
 800efea:	b21a      	sxth	r2, r3
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	885b      	ldrh	r3, [r3, #2]
 800eff0:	0a1b      	lsrs	r3, r3, #8
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	b21b      	sxth	r3, r3
 800eff6:	4313      	orrs	r3, r2
 800eff8:	b21b      	sxth	r3, r3
 800effa:	b29b      	uxth	r3, r3
 800effc:	460a      	mov	r2, r1
 800effe:	4601      	mov	r1, r0
 800f000:	483c      	ldr	r0, [pc, #240]	@ (800f0f4 <prvTCPConnectStart+0x1bc>)
 800f002:	f012 fcc9 	bl	8021998 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	3308      	adds	r3, #8
 800f010:	2210      	movs	r2, #16
 800f012:	4619      	mov	r1, r3
 800f014:	f012 fedc 	bl	8021dd0 <memcpy>
                            break;
 800f018:	e046      	b.n	800f0a8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	7a13      	ldrb	r3, [r2, #8]
 800f01e:	f36f 0300 	bfc	r3, #0, #1
 800f022:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f028:	4618      	mov	r0, r3
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	061a      	lsls	r2, r3, #24
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	689b      	ldr	r3, [r3, #8]
 800f034:	021b      	lsls	r3, r3, #8
 800f036:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f03a:	431a      	orrs	r2, r3
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	0a1b      	lsrs	r3, r3, #8
 800f042:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f046:	431a      	orrs	r2, r3
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	0e1b      	lsrs	r3, r3, #24
 800f04e:	ea42 0103 	orr.w	r1, r2, r3
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	885b      	ldrh	r3, [r3, #2]
 800f056:	021b      	lsls	r3, r3, #8
 800f058:	b21a      	sxth	r2, r3
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	885b      	ldrh	r3, [r3, #2]
 800f05e:	0a1b      	lsrs	r3, r3, #8
 800f060:	b29b      	uxth	r3, r3
 800f062:	b21b      	sxth	r3, r3
 800f064:	4313      	orrs	r3, r2
 800f066:	b21b      	sxth	r3, r3
 800f068:	b29b      	uxth	r3, r3
 800f06a:	460a      	mov	r2, r1
 800f06c:	4601      	mov	r1, r0
 800f06e:	4822      	ldr	r0, [pc, #136]	@ (800f0f8 <prvTCPConnectStart+0x1c0>)
 800f070:	f012 fc92 	bl	8021998 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	061a      	lsls	r2, r3, #24
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	021b      	lsls	r3, r3, #8
 800f080:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f084:	431a      	orrs	r2, r3
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f090:	431a      	orrs	r2, r3
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	0e1b      	lsrs	r3, r3, #24
 800f098:	431a      	orrs	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800f09e:	e003      	b.n	800f0a8 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800f0a0:	4816      	ldr	r0, [pc, #88]	@ (800f0fc <prvTCPConnectStart+0x1c4>)
 800f0a2:	f012 fc79 	bl	8021998 <lUDPLoggingPrintf>
                        break;
 800f0a6:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	885b      	ldrh	r3, [r3, #2]
 800f0ac:	021b      	lsls	r3, r3, #8
 800f0ae:	b21a      	sxth	r2, r3
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	885b      	ldrh	r3, [r3, #2]
 800f0b4:	0a1b      	lsrs	r3, r3, #8
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	b21b      	sxth	r3, r3
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	b21b      	sxth	r3, r3
 800f0be:	b29a      	uxth	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800f0c6:	2102      	movs	r1, #2
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f001 fc59 	bl	8010980 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800f0d6:	2006      	movs	r0, #6
 800f0d8:	f7f9 ffdc 	bl	8009094 <xSendEventToIPTask>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d002      	beq.n	800f0e8 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800f0e2:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800f0e6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
    }
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	080256b8 	.word	0x080256b8
 800f0f8:	080256e0 	.word	0x080256e0
 800f0fc:	08025704 	.word	0x08025704

0800f100 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f100:	b580      	push	{r7, lr}
 800f102:	b094      	sub	sp, #80	@ 0x50
 800f104:	af02      	add	r7, sp, #8
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f110:	2300      	movs	r3, #0
 800f112:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f114:	f06f 0315 	mvn.w	r3, #21
 800f118:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d013      	beq.n	800f148 <FreeRTOS_connect+0x48>
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	785b      	ldrb	r3, [r3, #1]
 800f124:	2b0a      	cmp	r3, #10
 800f126:	d00f      	beq.n	800f148 <FreeRTOS_connect+0x48>
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	785b      	ldrb	r3, [r3, #1]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d00b      	beq.n	800f148 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f130:	f107 0314 	add.w	r3, r7, #20
 800f134:	2218      	movs	r2, #24
 800f136:	68b9      	ldr	r1, [r7, #8]
 800f138:	4618      	mov	r0, r3
 800f13a:	f012 fe49 	bl	8021dd0 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f13e:	2302      	movs	r3, #2
 800f140:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f142:	f107 0314 	add.w	r3, r7, #20
 800f146:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f148:	68b9      	ldr	r1, [r7, #8]
 800f14a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f14c:	f7ff fef4 	bl	800ef38 <prvTCPConnectStart>
 800f150:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f154:	2b00      	cmp	r3, #0
 800f156:	d146      	bne.n	800f1e6 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d110      	bne.n	800f180 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f166:	2b00      	cmp	r3, #0
 800f168:	d103      	bne.n	800f172 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f16a:	f06f 030a 	mvn.w	r3, #10
 800f16e:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f170:	e039      	b.n	800f1e6 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f172:	2301      	movs	r3, #1
 800f174:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f176:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f17a:	4618      	mov	r0, r3
 800f17c:	f7f5 fb66 	bl	800484c <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f180:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f182:	f000 fe3f 	bl	800fe04 <FreeRTOS_issocketconnected>
 800f186:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	db2a      	blt.n	800f1e4 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f18e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f190:	2b00      	cmp	r3, #0
 800f192:	dd02      	ble.n	800f19a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f198:	e025      	b.n	800f1e6 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f19a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f19e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7f5 fb89 	bl	80048bc <xTaskCheckForTimeOut>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f1b0:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f1b4:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f1b6:	e016      	b.n	800f1e6 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f1b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1ba:	6858      	ldr	r0, [r3, #4]
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1be:	9300      	str	r3, [sp, #0]
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	2128      	movs	r1, #40	@ 0x28
 800f1c6:	f7f3 fbf3 	bl	80029b0 <xEventGroupWaitBits>
 800f1ca:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	f003 0320 	and.w	r3, r3, #32
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0c0      	beq.n	800f158 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f1d6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f1da:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f1dc:	4804      	ldr	r0, [pc, #16]	@ (800f1f0 <FreeRTOS_connect+0xf0>)
 800f1de:	f012 fbdb 	bl	8021998 <lUDPLoggingPrintf>
                    break;
 800f1e2:	e000      	b.n	800f1e6 <FreeRTOS_connect+0xe6>
                    break;
 800f1e4:	bf00      	nop
                }
            }
        }

        return xResult;
 800f1e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3748      	adds	r7, #72	@ 0x48
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	08025730 	.word	0x08025730

0800f1f4 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b08a      	sub	sp, #40	@ 0x28
 800f1f8:	af02      	add	r7, sp, #8
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	f003 0301 	and.w	r3, r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d13b      	bne.n	800f284 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	089b      	lsrs	r3, r3, #2
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f21c:	69bb      	ldr	r3, [r7, #24]
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	2100      	movs	r1, #0
 800f226:	f001 fa04 	bl	8010632 <uxStreamBufferGet>
 800f22a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f22c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f234:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d02b      	beq.n	800f296 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f244:	4618      	mov	r0, r3
 800f246:	f001 f8c5 	bl	80103d4 <uxStreamBufferFrontSpace>
 800f24a:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f252:	697a      	ldr	r2, [r7, #20]
 800f254:	429a      	cmp	r2, r3
 800f256:	d31e      	bcc.n	800f296 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f25e:	f36f 13c7 	bfc	r3, #7, #1
 800f262:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f26c:	f043 0301 	orr.w	r3, r3, #1
 800f270:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2201      	movs	r2, #1
 800f278:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f27c:	2006      	movs	r0, #6
 800f27e:	f7f9 ff09 	bl	8009094 <xSendEventToIPTask>
 800f282:	e008      	b.n	800f296 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	4618      	mov	r0, r3
 800f28e:	f001 f930 	bl	80104f2 <uxStreamBufferGetPtr>
 800f292:	4603      	mov	r3, r0
 800f294:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800f296:	69fb      	ldr	r3, [r7, #28]
    }
 800f298:	4618      	mov	r0, r3
 800f29a:	3720      	adds	r7, #32
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b08e      	sub	sp, #56	@ 0x38
 800f2a4:	af02      	add	r7, sp, #8
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d05f      	beq.n	800f382 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f001 f894 	bl	80103f6 <uxStreamBufferGetSize>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800f2d2:	e056      	b.n	800f382 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f2da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800f2de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d007      	beq.n	800f2f6 <prvRecvWait+0x56>
 800f2e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f2ea:	2b08      	cmp	r3, #8
 800f2ec:	d003      	beq.n	800f2f6 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800f2ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f2f2:	2b09      	cmp	r3, #9
 800f2f4:	d10e      	bne.n	800f314 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800f2f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f302:	f003 0308 	and.w	r3, r3, #8
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d03e      	beq.n	800f38a <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800f30c:	f06f 030b 	mvn.w	r3, #11
 800f310:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800f312:	e03a      	b.n	800f38a <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800f314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f316:	2b00      	cmp	r3, #0
 800f318:	d111      	bne.n	800f33e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d033      	beq.n	800f38e <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f003 0310 	and.w	r3, r3, #16
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d130      	bne.n	800f392 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f330:	2301      	movs	r3, #1
 800f332:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f334:	f107 0314 	add.w	r3, r7, #20
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f5 fa87 	bl	800484c <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f33e:	f107 021c 	add.w	r2, r7, #28
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f7f5 fab7 	bl	80048bc <xTaskCheckForTimeOut>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d120      	bne.n	800f396 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6858      	ldr	r0, [r3, #4]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	9300      	str	r3, [sp, #0]
 800f35c:	2300      	movs	r3, #0
 800f35e:	2201      	movs	r2, #1
 800f360:	2161      	movs	r1, #97	@ 0x61
 800f362:	f7f3 fb25 	bl	80029b0 <xEventGroupWaitBits>
 800f366:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d007      	beq.n	800f382 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f378:	4618      	mov	r0, r3
 800f37a:	f001 f83c 	bl	80103f6 <uxStreamBufferGetSize>
 800f37e:	4603      	mov	r3, r0
 800f380:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800f382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f384:	2b00      	cmp	r3, #0
 800f386:	d0a5      	beq.n	800f2d4 <prvRecvWait+0x34>
 800f388:	e006      	b.n	800f398 <prvRecvWait+0xf8>
                break;
 800f38a:	bf00      	nop
 800f38c:	e004      	b.n	800f398 <prvRecvWait+0xf8>
                    break;
 800f38e:	bf00      	nop
 800f390:	e002      	b.n	800f398 <prvRecvWait+0xf8>
                    break;
 800f392:	bf00      	nop
 800f394:	e000      	b.n	800f398 <prvRecvWait+0xf8>
                break;
 800f396:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f39c:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800f39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3730      	adds	r7, #48	@ 0x30
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b088      	sub	sp, #32
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	2106      	movs	r1, #6
 800f3c6:	69b8      	ldr	r0, [r7, #24]
 800f3c8:	f7fe fa3a 	bl	800d840 <prvValidSocket>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d103      	bne.n	800f3da <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f3d2:	f06f 0315 	mvn.w	r3, #21
 800f3d6:	61fb      	str	r3, [r7, #28]
 800f3d8:	e01d      	b.n	800f416 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	f003 0301 	and.w	r3, r3, #1
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d006      	beq.n	800f3f2 <FreeRTOS_recv+0x4a>
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f3ea:	f06f 0315 	mvn.w	r3, #21
 800f3ee:	61fb      	str	r3, [r7, #28]
 800f3f0:	e011      	b.n	800f416 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800f3f2:	f107 0314 	add.w	r3, r7, #20
 800f3f6:	683a      	ldr	r2, [r7, #0]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	69b8      	ldr	r0, [r7, #24]
 800f3fc:	f7ff ff50 	bl	800f2a0 <prvRecvWait>
 800f400:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800f402:	69fb      	ldr	r3, [r7, #28]
 800f404:	2b00      	cmp	r3, #0
 800f406:	dd06      	ble.n	800f416 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	68b9      	ldr	r1, [r7, #8]
 800f40e:	69b8      	ldr	r0, [r7, #24]
 800f410:	f7ff fef0 	bl	800f1f4 <prvRecvData>
 800f414:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800f416:	69fb      	ldr	r3, [r7, #28]
    }
 800f418:	4618      	mov	r0, r3
 800f41a:	3720      	adds	r7, #32
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800f42a:	2301      	movs	r3, #1
 800f42c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f42e:	2201      	movs	r2, #1
 800f430:	2106      	movs	r1, #6
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7fe fa04 	bl	800d840 <prvValidSocket>
 800f438:	4603      	mov	r3, r0
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d103      	bne.n	800f446 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f43e:	f06f 0315 	mvn.w	r3, #21
 800f442:	60fb      	str	r3, [r7, #12]
 800f444:	e040      	b.n	800f4c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f44c:	f003 0308 	and.w	r3, r3, #8
 800f450:	b2db      	uxtb	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d003      	beq.n	800f45e <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f456:	f06f 030b 	mvn.w	r3, #11
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e034      	b.n	800f4c8 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f464:	2b00      	cmp	r3, #0
 800f466:	d009      	beq.n	800f47c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f46e:	2b08      	cmp	r3, #8
 800f470:	d004      	beq.n	800f47c <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f478:	2b09      	cmp	r3, #9
 800f47a:	d103      	bne.n	800f484 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f47c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f480:	60fb      	str	r3, [r7, #12]
 800f482:	e021      	b.n	800f4c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	60fb      	str	r3, [r7, #12]
 800f498:	e016      	b.n	800f4c8 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d102      	bne.n	800f4a6 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	e010      	b.n	800f4c8 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10b      	bne.n	800f4c8 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f000 fac6 	bl	800fa44 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d102      	bne.n	800f4c8 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f4c2:	f06f 030b 	mvn.w	r3, #11
 800f4c6:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
    }
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b088      	sub	sp, #32
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	2106      	movs	r1, #6
 800f4f2:	6978      	ldr	r0, [r7, #20]
 800f4f4:	f7fe f9a4 	bl	800d840 <prvValidSocket>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d135      	bne.n	800f56a <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f504:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d10f      	bne.n	800f52c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f512:	f003 0308 	and.w	r3, r3, #8
 800f516:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d107      	bne.n	800f52c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f51c:	2100      	movs	r1, #0
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	f000 fa90 	bl	800fa44 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f52a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d01b      	beq.n	800f56a <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f532:	69b8      	ldr	r0, [r7, #24]
 800f534:	f000 ff3d 	bl	80103b2 <uxStreamBufferGetSpace>
 800f538:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	691a      	ldr	r2, [r3, #16]
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d803      	bhi.n	800f556 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	601a      	str	r2, [r3, #0]
 800f554:	e002      	b.n	800f55c <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800f556:	693a      	ldr	r2, [r7, #16]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	3310      	adds	r3, #16
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	4413      	add	r3, r2
 800f566:	3304      	adds	r3, #4
 800f568:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800f56a:	69fb      	ldr	r3, [r7, #28]
    }
 800f56c:	4618      	mov	r0, r3
 800f56e:	3720      	adds	r7, #32
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800f574:	b580      	push	{r7, lr}
 800f576:	b090      	sub	sp, #64	@ 0x40
 800f578:	af02      	add	r7, sp, #8
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800f582:	2300      	movs	r3, #0
 800f584:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f590:	4618      	mov	r0, r3
 800f592:	f000 ff0e 	bl	80103b2 <uxStreamBufferGetSpace>
 800f596:	4603      	mov	r3, r0
 800f598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f59a:	2300      	movs	r3, #0
 800f59c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800f5a2:	e08f      	b.n	800f6c4 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800f5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	dd4b      	ble.n	800f642 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800f5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	dd01      	ble.n	800f5ba <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800f5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00e      	beq.n	800f5e8 <prvTCPSendLoop+0x74>
 800f5ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d10a      	bne.n	800f5e8 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800f5d2:	2301      	movs	r3, #1
 800f5d4:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800f5d6:	f7f4 fc7d 	bl	8003ed4 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f5e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5e4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	f000 ff9d 	bl	8010532 <uxStreamBufferAdd>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800f602:	f7f4 fc75 	bl	8003ef0 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2201      	movs	r2, #1
 800f60a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800f60e:	f7fa fc99 	bl	8009f44 <xIsCallingFromIPTask>
 800f612:	4603      	mov	r3, r0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d102      	bne.n	800f61e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f618:	2006      	movs	r0, #6
 800f61a:	f7f9 fd3b 	bl	8009094 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800f61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800f626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62a:	4413      	add	r3, r2
 800f62c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800f62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f630:	2b00      	cmp	r3, #0
 800f632:	d053      	beq.n	800f6dc <prvTCPSendLoop+0x168>
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d050      	beq.n	800f6dc <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800f63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f63c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f63e:	4413      	add	r3, r2
 800f640:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f644:	2b00      	cmp	r3, #0
 800f646:	d119      	bne.n	800f67c <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f64c:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800f64e:	f7fa fc79 	bl	8009f44 <xIsCallingFromIPTask>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d001      	beq.n	800f65c <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800f658:	2300      	movs	r3, #0
 800f65a:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d035      	beq.n	800f6ce <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	f003 0310 	and.w	r3, r3, #16
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d132      	bne.n	800f6d2 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f66c:	2301      	movs	r3, #1
 800f66e:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f670:	f107 0314 	add.w	r3, r7, #20
 800f674:	4618      	mov	r0, r3
 800f676:	f7f5 f8e9 	bl	800484c <vTaskSetTimeOutState>
 800f67a:	e00a      	b.n	800f692 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f67c:	f107 021c 	add.w	r2, r7, #28
 800f680:	f107 0314 	add.w	r3, r7, #20
 800f684:	4611      	mov	r1, r2
 800f686:	4618      	mov	r0, r3
 800f688:	f7f5 f918 	bl	80048bc <xTaskCheckForTimeOut>
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d121      	bne.n	800f6d6 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	6858      	ldr	r0, [r3, #4]
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	2300      	movs	r3, #0
 800f69c:	2201      	movs	r2, #1
 800f69e:	2122      	movs	r1, #34	@ 0x22
 800f6a0:	f7f3 f986 	bl	80029b0 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f6a4:	6879      	ldr	r1, [r7, #4]
 800f6a6:	68f8      	ldr	r0, [r7, #12]
 800f6a8:	f7ff feba 	bl	800f420 <prvTCPSendCheck>
 800f6ac:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800f6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	db12      	blt.n	800f6da <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 fe79 	bl	80103b2 <uxStreamBufferGetSpace>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800f6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f73f af6c 	bgt.w	800f5a4 <prvTCPSendLoop+0x30>
 800f6cc:	e006      	b.n	800f6dc <prvTCPSendLoop+0x168>
                    break;
 800f6ce:	bf00      	nop
 800f6d0:	e004      	b.n	800f6dc <prvTCPSendLoop+0x168>
                    break;
 800f6d2:	bf00      	nop
 800f6d4:	e002      	b.n	800f6dc <prvTCPSendLoop+0x168>
                    break;
 800f6d6:	bf00      	nop
 800f6d8:	e000      	b.n	800f6dc <prvTCPSendLoop+0x168>
                break;
 800f6da:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800f6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3738      	adds	r7, #56	@ 0x38
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
	...

0800f6e8 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	60f8      	str	r0, [r7, #12]
 800f6f0:	60b9      	str	r1, [r7, #8]
 800f6f2:	607a      	str	r2, [r7, #4]
 800f6f4:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f6fa:	6879      	ldr	r1, [r7, #4]
 800f6fc:	6938      	ldr	r0, [r7, #16]
 800f6fe:	f7ff fe8f 	bl	800f420 <prvTCPSendCheck>
 800f702:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	dd24      	ble.n	800f754 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	6938      	ldr	r0, [r7, #16]
 800f712:	f7ff ff2f 	bl	800f574 <prvTCPSendLoop>
 800f716:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d11a      	bne.n	800f754 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f724:	2b05      	cmp	r3, #5
 800f726:	d903      	bls.n	800f730 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800f728:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f72c:	617b      	str	r3, [r7, #20]
 800f72e:	e011      	b.n	800f754 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f734:	2b17      	cmp	r3, #23
 800f736:	d00a      	beq.n	800f74e <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f73c:	4619      	mov	r1, r3
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f748:	4805      	ldr	r0, [pc, #20]	@ (800f760 <FreeRTOS_send+0x78>)
 800f74a:	f012 f925 	bl	8021998 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800f74e:	f06f 031b 	mvn.w	r3, #27
 800f752:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800f754:	697b      	ldr	r3, [r7, #20]
    }
 800f756:	4618      	mov	r0, r3
 800f758:	3718      	adds	r7, #24
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
 800f75e:	bf00      	nop
 800f760:	08025788 	.word	0x08025788

0800f764 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800f76e:	2300      	movs	r3, #0
 800f770:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f776:	2201      	movs	r2, #1
 800f778:	2106      	movs	r1, #6
 800f77a:	68b8      	ldr	r0, [r7, #8]
 800f77c:	f7fe f860 	bl	800d840 <prvValidSocket>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d103      	bne.n	800f78e <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f786:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f78a:	60fb      	str	r3, [r7, #12]
 800f78c:	e056      	b.n	800f83c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f794:	2b00      	cmp	r3, #0
 800f796:	d008      	beq.n	800f7aa <FreeRTOS_listen+0x46>
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f79e:	2b08      	cmp	r3, #8
 800f7a0:	d003      	beq.n	800f7aa <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f7a2:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f7a6:	60fb      	str	r3, [r7, #12]
 800f7a8:	e048      	b.n	800f83c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f7b0:	f7fa fd78 	bl	800a2a4 <FreeRTOS_min_int32>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f7c4:	f003 0308 	and.w	r3, r3, #8
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d032      	beq.n	800f834 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d005      	beq.n	800f7e4 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f000 fe2b 	bl	801043a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d005      	beq.n	800f7fa <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f000 fe20 	bl	801043a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	33aa      	adds	r3, #170	@ 0xaa
 800f7fe:	225a      	movs	r2, #90	@ 0x5a
 800f800:	2100      	movs	r1, #0
 800f802:	4618      	mov	r0, r3
 800f804:	f012 fbf1 	bl	8021fea <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f80e:	22c0      	movs	r2, #192	@ 0xc0
 800f810:	2100      	movs	r1, #0
 800f812:	4618      	mov	r0, r3
 800f814:	f012 fbe9 	bl	8021fea <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	3368      	adds	r3, #104	@ 0x68
 800f81c:	2204      	movs	r2, #4
 800f81e:	2100      	movs	r1, #0
 800f820:	4618      	mov	r0, r3
 800f822:	f012 fbe2 	bl	8021fea <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f82c:	f043 0308 	orr.w	r3, r3, #8
 800f830:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800f834:	2101      	movs	r1, #1
 800f836:	68b8      	ldr	r0, [r7, #8]
 800f838:	f001 f8a2 	bl	8010980 <vTCPStateChange>
        }

        return xResult;
 800f83c:	68fb      	ldr	r3, [r7, #12]
    }
 800f83e:	4618      	mov	r0, r3
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800f846:	b580      	push	{r7, lr}
 800f848:	b084      	sub	sp, #16
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f854:	2201      	movs	r2, #1
 800f856:	2106      	movs	r1, #6
 800f858:	68b8      	ldr	r0, [r7, #8]
 800f85a:	f7fd fff1 	bl	800d840 <prvValidSocket>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d103      	bne.n	800f86c <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f864:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f868:	60fb      	str	r3, [r7, #12]
 800f86a:	e018      	b.n	800f89e <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f872:	2b05      	cmp	r3, #5
 800f874:	d003      	beq.n	800f87e <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f876:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	e00f      	b.n	800f89e <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800f87e:	68ba      	ldr	r2, [r7, #8]
 800f880:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f884:	f043 0320 	orr.w	r3, r3, #32
 800f888:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2201      	movs	r2, #1
 800f890:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f894:	2006      	movs	r0, #6
 800f896:	f7f9 fbfd 	bl	8009094 <xSendEventToIPTask>
            xResult = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800f89e:	68fb      	ldr	r3, [r7, #12]
    }
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3710      	adds	r7, #16
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b08a      	sub	sp, #40	@ 0x28
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800f8b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8b4:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800f8b6:	f7f4 fc1f 	bl	80040f8 <xTaskGetTickCount>
 800f8ba:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800f8bc:	4b32      	ldr	r3, [pc, #200]	@ (800f988 <xTCPTimerCheck+0xe0>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	69ba      	ldr	r2, [r7, #24]
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f8c6:	4b31      	ldr	r3, [pc, #196]	@ (800f98c <xTCPTimerCheck+0xe4>)
 800f8c8:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f8ca:	4b31      	ldr	r3, [pc, #196]	@ (800f990 <xTCPTimerCheck+0xe8>)
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800f8d0:	4a2d      	ldr	r2, [pc, #180]	@ (800f988 <xTCPTimerCheck+0xe0>)
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d14b      	bne.n	800f974 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800f8e0:	e048      	b.n	800f974 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	68db      	ldr	r3, [r3, #12]
 800f8e6:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d03a      	beq.n	800f96e <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f8fe:	461a      	mov	r2, r3
 800f900:	6a3b      	ldr	r3, [r7, #32]
 800f902:	4293      	cmp	r3, r2
 800f904:	d20a      	bcs.n	800f91c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	b29b      	uxth	r3, r3
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	b29a      	uxth	r2, r3
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f91a:	e00a      	b.n	800f932 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2200      	movs	r2, #0
 800f920:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f924:	6938      	ldr	r0, [r7, #16]
 800f926:	f000 ff33 	bl	8010790 <xTCPSocketCheck>
 800f92a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	db1f      	blt.n	800f972 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d008      	beq.n	800f94c <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d003      	beq.n	800f948 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f940:	6938      	ldr	r0, [r7, #16]
 800f942:	f7ff fa8e 	bl	800ee62 <vSocketWakeUpUser>
 800f946:	e001      	b.n	800f94c <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f952:	2b00      	cmp	r3, #0
 800f954:	d00e      	beq.n	800f974 <xTCPTimerCheck+0xcc>
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f95c:	461a      	mov	r2, r3
 800f95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f960:	4293      	cmp	r3, r2
 800f962:	d907      	bls.n	800f974 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f96a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f96c:	e002      	b.n	800f974 <xTCPTimerCheck+0xcc>
                continue;
 800f96e:	bf00      	nop
 800f970:	e000      	b.n	800f974 <xTCPTimerCheck+0xcc>
                    continue;
 800f972:	bf00      	nop
        while( pxIterator != pxEnd )
 800f974:	69fa      	ldr	r2, [r7, #28]
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d1b2      	bne.n	800f8e2 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f97e:	4618      	mov	r0, r3
 800f980:	3728      	adds	r7, #40	@ 0x28
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20001454 	.word	0x20001454
 800f98c:	20001448 	.word	0x20001448
 800f990:	20001440 	.word	0x20001440

0800f994 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f994:	b082      	sub	sp, #8
 800f996:	b580      	push	{r7, lr}
 800f998:	b088      	sub	sp, #32
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	6039      	str	r1, [r7, #0]
 800f9a0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f9a4:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	61bb      	str	r3, [r7, #24]
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f9b0:	4b23      	ldr	r3, [pc, #140]	@ (800fa40 <pxTCPSocketLookup+0xac>)
 800f9b2:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	61fb      	str	r3, [r7, #28]
 800f9ba:	e02e      	b.n	800fa1a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d122      	bne.n	800fa14 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d102      	bne.n	800f9de <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	e01a      	b.n	800fa14 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	d113      	bne.n	800fa14 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d006      	beq.n	800fa00 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f9f2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f7fb f9d4 	bl	800ada4 <pxTCPSocketLookup_IPv6>
 800f9fc:	61b8      	str	r0, [r7, #24]
 800f9fe:	e006      	b.n	800fa0e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d101      	bne.n	800fa0e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d107      	bne.n	800fa24 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800fa1a:	69fa      	ldr	r2, [r7, #28]
 800fa1c:	693b      	ldr	r3, [r7, #16]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d1cc      	bne.n	800f9bc <pxTCPSocketLookup+0x28>
 800fa22:	e000      	b.n	800fa26 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800fa24:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d101      	bne.n	800fa30 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800fa30:	69bb      	ldr	r3, [r7, #24]
    }
 800fa32:	4618      	mov	r0, r3
 800fa34:	3720      	adds	r7, #32
 800fa36:	46bd      	mov	sp, r7
 800fa38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa3c:	b002      	add	sp, #8
 800fa3e:	4770      	bx	lr
 800fa40:	20001448 	.word	0x20001448

0800fa44 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b088      	sub	sp, #32
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d048      	beq.n	800fae6 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800fa54:	2314      	movs	r3, #20
 800fa56:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800fa58:	2350      	movs	r3, #80	@ 0x50
 800fa5a:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800fa68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa6c:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00f      	beq.n	800fa94 <prvTCPCreateStream+0x50>
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	2b04      	cmp	r3, #4
 800fa78:	d80c      	bhi.n	800fa94 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	4a40      	ldr	r2, [pc, #256]	@ (800fb80 <prvTCPCreateStream+0x13c>)
 800fa80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa84:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	4a3d      	ldr	r2, [pc, #244]	@ (800fb80 <prvTCPCreateStream+0x13c>)
 800fa8c:	00db      	lsls	r3, r3, #3
 800fa8e:	4413      	add	r3, r2
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fa9a:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10c      	bne.n	800fac0 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800faac:	69ba      	ldr	r2, [r7, #24]
 800faae:	fb02 f303 	mul.w	r3, r2, r3
 800fab2:	4a34      	ldr	r2, [pc, #208]	@ (800fb84 <prvTCPCreateStream+0x140>)
 800fab4:	fba2 2303 	umull	r2, r3, r2, r3
 800fab8:	095a      	lsrs	r2, r3, #5
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d111      	bne.n	800faee <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	fb02 f303 	mul.w	r3, r2, r3
 800fad6:	4a2b      	ldr	r2, [pc, #172]	@ (800fb84 <prvTCPCreateStream+0x140>)
 800fad8:	fba2 2303 	umull	r2, r3, r2, r3
 800fadc:	095a      	lsrs	r2, r3, #5
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800fae4:	e003      	b.n	800faee <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800faec:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	3304      	adds	r3, #4
 800faf2:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	f023 0303 	bic.w	r3, r3, #3
 800fafa:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	3314      	adds	r3, #20
 800fb00:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7f6 f966 	bl	8005dd4 <pvPortMalloc>
 800fb08:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10e      	bne.n	800fb2e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800fb10:	481d      	ldr	r0, [pc, #116]	@ (800fb88 <prvTCPCreateStream+0x144>)
 800fb12:	f011 ff41 	bl	8021998 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800fb1c:	f043 0308 	orr.w	r3, r3, #8
 800fb20:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800fb24:	2108      	movs	r1, #8
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 ff2a 	bl	8010980 <vTCPStateChange>
 800fb2c:	e022      	b.n	800fb74 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800fb2e:	2214      	movs	r2, #20
 800fb30:	2100      	movs	r1, #0
 800fb32:	68b8      	ldr	r0, [r7, #8]
 800fb34:	f012 fa59 	bl	8021fea <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	69fa      	ldr	r2, [r7, #28]
 800fb3c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800fb3e:	4b13      	ldr	r3, [pc, #76]	@ (800fb8c <prvTCPCreateStream+0x148>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00a      	beq.n	800fb5c <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d001      	beq.n	800fb50 <prvTCPCreateStream+0x10c>
 800fb4c:	2152      	movs	r1, #82	@ 0x52
 800fb4e:	e000      	b.n	800fb52 <prvTCPCreateStream+0x10e>
 800fb50:	2154      	movs	r1, #84	@ 0x54
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	69fa      	ldr	r2, [r7, #28]
 800fb56:	480e      	ldr	r0, [pc, #56]	@ (800fb90 <prvTCPCreateStream+0x14c>)
 800fb58:	f011 ff1e 	bl	8021998 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d004      	beq.n	800fb6c <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800fb6a:	e003      	b.n	800fb74 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800fb74:	68bb      	ldr	r3, [r7, #8]
    }
 800fb76:	4618      	mov	r0, r3
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	080270b4 	.word	0x080270b4
 800fb84:	51eb851f 	.word	0x51eb851f
 800fb88:	080257b0 	.word	0x080257b0
 800fb8c:	20001484 	.word	0x20001484
 800fb90:	080257d4 	.word	0x080257d4

0800fb94 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	@ 0x28
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800fba4:	2300      	movs	r3, #0
 800fba6:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d006      	beq.n	800fbbc <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	61fb      	str	r3, [r7, #28]
 800fbba:	e009      	b.n	800fbd0 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fbc2:	f107 0214 	add.w	r2, r7, #20
 800fbc6:	4611      	mov	r1, r2
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 fc92 	bl	80104f2 <uxStreamBufferGetPtr>
 800fbce:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d011      	beq.n	800fbfa <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fbdc:	6979      	ldr	r1, [r7, #20]
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800fbea:	2300      	movs	r3, #0
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	69bb      	ldr	r3, [r7, #24]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	f000 fd1d 	bl	8010632 <uxStreamBufferGet>
        {
 800fbf8:	e7d4      	b.n	800fba4 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800fbfa:	bf00      	nop
 800fbfc:	3720      	adds	r7, #32
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fc10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d121      	bne.n	800fc5e <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fc20:	4618      	mov	r0, r3
 800fc22:	f000 fbd7 	bl	80103d4 <uxStreamBufferFrontSpace>
 800fc26:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d814      	bhi.n	800fc5e <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc3e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fc48:	f043 0301 	orr.w	r3, r3, #1
 800fc4c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fc58:	2006      	movs	r0, #6
 800fc5a:	f7f9 fa1b 	bl	8009094 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f043 0201 	orr.w	r2, r3, #1
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d005      	beq.n	800fc82 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800fc82:	bf00      	nop
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
	...

0800fc8c <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800fc8c:	b5b0      	push	{r4, r5, r7, lr}
 800fc8e:	b08c      	sub	sp, #48	@ 0x30
 800fc90:	af04      	add	r7, sp, #16
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
 800fc98:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fca0:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <lTCPAddRxdata+0x28>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e000      	b.n	800fcb6 <lTCPAddRxdata+0x2a>
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d10a      	bne.n	800fcd8 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f7ff febd 	bl	800fa44 <prvTCPCreateStream>
 800fcca:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d102      	bne.n	800fcd8 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800fcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd6:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	db41      	blt.n	800fd62 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d00f      	beq.n	800fd04 <lTCPAddRxdata+0x78>
 800fce4:	69f8      	ldr	r0, [r7, #28]
 800fce6:	f000 fb86 	bl	80103f6 <uxStreamBufferGetSize>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d109      	bne.n	800fd04 <lTCPAddRxdata+0x78>
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d106      	bne.n	800fd04 <lTCPAddRxdata+0x78>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d003      	beq.n	800fd04 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800fd00:	2300      	movs	r3, #0
 800fd02:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	68b9      	ldr	r1, [r7, #8]
 800fd0a:	69f8      	ldr	r0, [r7, #28]
 800fd0c:	f000 fc11 	bl	8010532 <uxStreamBufferAdd>
 800fd10:	4603      	mov	r3, r0
 800fd12:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	69ba      	ldr	r2, [r7, #24]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d013      	beq.n	800fd44 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800fd1c:	69fb      	ldr	r3, [r7, #28]
 800fd1e:	681c      	ldr	r4, [r3, #0]
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	689d      	ldr	r5, [r3, #8]
 800fd24:	69f8      	ldr	r0, [r7, #28]
 800fd26:	f000 fb55 	bl	80103d4 <uxStreamBufferFrontSpace>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	9303      	str	r3, [sp, #12]
 800fd32:	9202      	str	r2, [sp, #8]
 800fd34:	9501      	str	r5, [sp, #4]
 800fd36:	9400      	str	r4, [sp, #0]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	69ba      	ldr	r2, [r7, #24]
 800fd3c:	68b9      	ldr	r1, [r7, #8]
 800fd3e:	480b      	ldr	r0, [pc, #44]	@ (800fd6c <lTCPAddRxdata+0xe0>)
 800fd40:	f011 fe2a 	bl	8021998 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10b      	bne.n	800fd62 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d005      	beq.n	800fd5c <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	6979      	ldr	r1, [r7, #20]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f7ff ff1d 	bl	800fb94 <vTCPAddRxdata_Callback>
 800fd5a:	e002      	b.n	800fd62 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f7ff ff50 	bl	800fc02 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800fd62:	69bb      	ldr	r3, [r7, #24]
    }
 800fd64:	4618      	mov	r0, r3
 800fd66:	3720      	adds	r7, #32
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd6c:	08025810 	.word	0x08025810

0800fd70 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fd82:	2b06      	cmp	r3, #6
 800fd84:	d003      	beq.n	800fd8e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fd86:	f06f 0315 	mvn.w	r3, #21
 800fd8a:	60fb      	str	r3, [r7, #12]
 800fd8c:	e011      	b.n	800fdb2 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d008      	beq.n	800fdaa <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f000 fb07 	bl	80103b2 <uxStreamBufferGetSpace>
 800fda4:	4603      	mov	r3, r0
 800fda6:	60fb      	str	r3, [r7, #12]
 800fda8:	e003      	b.n	800fdb2 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800fdb0:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
    }
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fdce:	2b06      	cmp	r3, #6
 800fdd0:	d003      	beq.n	800fdda <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fdd2:	f06f 0315 	mvn.w	r3, #21
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	e00f      	b.n	800fdfa <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d008      	beq.n	800fdf6 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 fb03 	bl	80103f6 <uxStreamBufferGetSize>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	60fb      	str	r3, [r7, #12]
 800fdf4:	e001      	b.n	800fdfa <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
    }
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3710      	adds	r7, #16
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fe1a:	2b06      	cmp	r3, #6
 800fe1c:	d003      	beq.n	800fe26 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fe1e:	f06f 0315 	mvn.w	r3, #21
 800fe22:	60fb      	str	r3, [r7, #12]
 800fe24:	e00b      	b.n	800fe3e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fe2c:	2b04      	cmp	r3, #4
 800fe2e:	d906      	bls.n	800fe3e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fe36:	2b07      	cmp	r3, #7
 800fe38:	d801      	bhi.n	800fe3e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
    }
 800fe40:	4618      	mov	r0, r3
 800fe42:	3714      	adds	r7, #20
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fe5e:	2b06      	cmp	r3, #6
 800fe60:	d003      	beq.n	800fe6a <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800fe62:	f06f 0315 	mvn.w	r3, #21
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	e00f      	b.n	800fe8a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d008      	beq.n	800fe86 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fabb 	bl	80103f6 <uxStreamBufferGetSize>
 800fe80:	4603      	mov	r3, r0
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	e001      	b.n	800fe8a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800fe86:	2300      	movs	r3, #0
 800fe88:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
    }
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea6:	d004      	beq.n	800feb2 <xSocketValid+0x1e>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800feae:	2301      	movs	r3, #1
 800feb0:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800feb2:	68fb      	ldr	r3, [r7, #12]
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	b09c      	sub	sp, #112	@ 0x70
 800fec6:	af08      	add	r7, sp, #32
 800fec8:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800feca:	2320      	movs	r3, #32
 800fecc:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800fece:	f7f4 f913 	bl	80040f8 <xTaskGetTickCount>
 800fed2:	4602      	mov	r2, r0
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800fede:	2300      	movs	r3, #0
 800fee0:	60fb      	str	r3, [r7, #12]
 800fee2:	f107 0310 	add.w	r3, r7, #16
 800fee6:	2200      	movs	r2, #0
 800fee8:	601a      	str	r2, [r3, #0]
 800feea:	605a      	str	r2, [r3, #4]
 800feec:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d11f      	bne.n	800ff38 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fefe:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800ff06:	f107 000c 	add.w	r0, r7, #12
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	4613      	mov	r3, r2
 800ff0e:	4a3b      	ldr	r2, [pc, #236]	@ (800fffc <vTCPNetStat_TCPSocket+0x13c>)
 800ff10:	2110      	movs	r1, #16
 800ff12:	f012 fd6d 	bl	80229f0 <snprintf>
 800ff16:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800ff18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	da04      	bge.n	800ff28 <vTCPNetStat_TCPSocket+0x68>
 800ff1e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800ff22:	4837      	ldr	r0, [pc, #220]	@ (8010000 <vTCPNetStat_TCPSocket+0x140>)
 800ff24:	f7f1 fc10 	bl	8001748 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800ff28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff2a:	2b0f      	cmp	r3, #15
 800ff2c:	dd04      	ble.n	800ff38 <vTCPNetStat_TCPSocket+0x78>
 800ff2e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800ff32:	4833      	ldr	r0, [pc, #204]	@ (8010000 <vTCPNetStat_TCPSocket+0x140>)
 800ff34:	f7f1 fc08 	bl	8001748 <vAssertCalled>
        }

        if( age > 999999U )
 800ff38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff3a:	4a32      	ldr	r2, [pc, #200]	@ (8010004 <vTCPNetStat_TCPSocket+0x144>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d901      	bls.n	800ff44 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800ff40:	4b30      	ldr	r3, [pc, #192]	@ (8010004 <vTCPNetStat_TCPSocket+0x144>)
 800ff42:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	7a1b      	ldrb	r3, [r3, #8]
 800ff48:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d002      	beq.n	800ff58 <vTCPNetStat_TCPSocket+0x98>
 800ff52:	2b01      	cmp	r3, #1
 800ff54:	d009      	beq.n	800ff6a <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800ff56:	e011      	b.n	800ff7c <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff5c:	f107 001c 	add.w	r0, r7, #28
 800ff60:	4a29      	ldr	r2, [pc, #164]	@ (8010008 <vTCPNetStat_TCPSocket+0x148>)
 800ff62:	2128      	movs	r1, #40	@ 0x28
 800ff64:	f012 fd44 	bl	80229f0 <snprintf>
                    break;
 800ff68:	e008      	b.n	800ff7c <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800ff6e:	f107 001c 	add.w	r0, r7, #28
 800ff72:	4a26      	ldr	r2, [pc, #152]	@ (801000c <vTCPNetStat_TCPSocket+0x14c>)
 800ff74:	2128      	movs	r1, #40	@ 0x28
 800ff76:	f012 fd3b 	bl	80229f0 <snprintf>
                    break;
 800ff7a:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ff80:	4698      	mov	r8, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff88:	461c      	mov	r4, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	bf14      	ite	ne
 800ff94:	2301      	movne	r3, #1
 800ff96:	2300      	moveq	r3, #0
 800ff98:	b2db      	uxtb	r3, r3
 800ff9a:	461d      	mov	r5, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	bf14      	ite	ne
 800ffa6:	2301      	movne	r3, #1
 800ffa8:	2300      	moveq	r3, #0
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	461e      	mov	r6, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f002 fbf5 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 800ffba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffbc:	4a11      	ldr	r2, [pc, #68]	@ (8010004 <vTCPNetStat_TCPSocket+0x144>)
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	bf28      	it	cs
 800ffc2:	4613      	movcs	r3, r2
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800ffca:	603a      	str	r2, [r7, #0]
 800ffcc:	f107 011c 	add.w	r1, r7, #28
 800ffd0:	f107 020c 	add.w	r2, r7, #12
 800ffd4:	9206      	str	r2, [sp, #24]
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	9205      	str	r2, [sp, #20]
 800ffda:	9304      	str	r3, [sp, #16]
 800ffdc:	9003      	str	r0, [sp, #12]
 800ffde:	9602      	str	r6, [sp, #8]
 800ffe0:	9501      	str	r5, [sp, #4]
 800ffe2:	9400      	str	r4, [sp, #0]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffe8:	4641      	mov	r1, r8
 800ffea:	4809      	ldr	r0, [pc, #36]	@ (8010010 <vTCPNetStat_TCPSocket+0x150>)
 800ffec:	f011 fcd4 	bl	8021998 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800fff0:	bf00      	nop
 800fff2:	3750      	adds	r7, #80	@ 0x50
 800fff4:	46bd      	mov	sp, r7
 800fff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffa:	bf00      	nop
 800fffc:	08025858 	.word	0x08025858
 8010000:	08025378 	.word	0x08025378
 8010004:	000f423f 	.word	0x000f423f
 8010008:	08025860 	.word	0x08025860
 801000c:	08025868 	.word	0x08025868
 8010010:	08025870 	.word	0x08025870

08010014 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010014:	b580      	push	{r7, lr}
 8010016:	b08a      	sub	sp, #40	@ 0x28
 8010018:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 801001a:	2300      	movs	r3, #0
 801001c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 801001e:	f006 fe59 	bl	8016cd4 <uxGetMinimumFreeNetworkBuffers>
 8010022:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010024:	f006 fe62 	bl	8016cec <uxGetNumberOfFreeNetworkBuffers>
 8010028:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 801002a:	4b26      	ldr	r3, [pc, #152]	@ (80100c4 <vTCPNetStat+0xb0>)
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010032:	d003      	beq.n	801003c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010034:	4824      	ldr	r0, [pc, #144]	@ (80100c8 <vTCPNetStat+0xb4>)
 8010036:	f011 fcaf 	bl	8021998 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 801003a:	e03f      	b.n	80100bc <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 801003c:	4b23      	ldr	r3, [pc, #140]	@ (80100cc <vTCPNetStat+0xb8>)
 801003e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010040:	4b23      	ldr	r3, [pc, #140]	@ (80100d0 <vTCPNetStat+0xbc>)
 8010042:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010044:	4823      	ldr	r0, [pc, #140]	@ (80100d4 <vTCPNetStat+0xc0>)
 8010046:	f011 fca7 	bl	8021998 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 801004a:	4b1e      	ldr	r3, [pc, #120]	@ (80100c4 <vTCPNetStat+0xb0>)
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	61fb      	str	r3, [r7, #28]
 8010050:	e00b      	b.n	801006a <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010052:	69fb      	ldr	r3, [r7, #28]
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7ff ff31 	bl	800fec0 <vTCPNetStat_TCPSocket>
                count++;
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	3301      	adds	r3, #1
 8010062:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 801006a:	69fa      	ldr	r2, [r7, #28]
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	429a      	cmp	r2, r3
 8010070:	d1ef      	bne.n	8010052 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010072:	4b19      	ldr	r3, [pc, #100]	@ (80100d8 <vTCPNetStat+0xc4>)
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	61fb      	str	r3, [r7, #28]
 8010078:	e014      	b.n	80100a4 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	b29b      	uxth	r3, r3
 8010080:	021b      	lsls	r3, r3, #8
 8010082:	b29a      	uxth	r2, r3
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	0a1b      	lsrs	r3, r3, #8
 801008a:	b29b      	uxth	r3, r3
 801008c:	4313      	orrs	r3, r2
 801008e:	b29b      	uxth	r3, r3
 8010090:	4619      	mov	r1, r3
 8010092:	4812      	ldr	r0, [pc, #72]	@ (80100dc <vTCPNetStat+0xc8>)
 8010094:	f011 fc80 	bl	8021998 <lUDPLoggingPrintf>
                count++;
 8010098:	69bb      	ldr	r3, [r7, #24]
 801009a:	3301      	adds	r3, #1
 801009c:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 80100a4:	69fa      	ldr	r2, [r7, #28]
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d1e6      	bne.n	801007a <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 80100ac:	2340      	movs	r3, #64	@ 0x40
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	697a      	ldr	r2, [r7, #20]
 80100b4:	69b9      	ldr	r1, [r7, #24]
 80100b6:	480a      	ldr	r0, [pc, #40]	@ (80100e0 <vTCPNetStat+0xcc>)
 80100b8:	f011 fc6e 	bl	8021998 <lUDPLoggingPrintf>
    }
 80100bc:	bf00      	nop
 80100be:	3720      	adds	r7, #32
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	20001440 	.word	0x20001440
 80100c8:	0802589c 	.word	0x0802589c
 80100cc:	20001448 	.word	0x20001448
 80100d0:	20001434 	.word	0x20001434
 80100d4:	080258b8 	.word	0x080258b8
 80100d8:	2000142c 	.word	0x2000142c
 80100dc:	08025900 	.word	0x08025900
 80100e0:	08025910 	.word	0x08025910

080100e4 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b086      	sub	sp, #24
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 80100ec:	2300      	movs	r3, #0
 80100ee:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 80100f0:	2300      	movs	r3, #0
 80100f2:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80100fa:	f003 0304 	and.w	r3, r3, #4
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d109      	bne.n	8010118 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801010a:	f003 0302 	and.w	r3, r3, #2
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d101      	bne.n	8010118 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010114:	2301      	movs	r3, #1
 8010116:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801011c:	f003 0301 	and.w	r3, r3, #1
 8010120:	2b00      	cmp	r3, #0
 8010122:	d038      	beq.n	8010196 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801012a:	2b01      	cmp	r3, #1
 801012c:	d111      	bne.n	8010152 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010132:	2b00      	cmp	r3, #0
 8010134:	d02f      	beq.n	8010196 <vSocketSelectTCP+0xb2>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801013a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801013e:	f003 0302 	and.w	r3, r3, #2
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	d026      	beq.n	8010196 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	f043 0301 	orr.w	r3, r3, #1
 801014e:	613b      	str	r3, [r7, #16]
 8010150:	e021      	b.n	8010196 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010158:	f003 0308 	and.w	r3, r3, #8
 801015c:	b2db      	uxtb	r3, r3
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00c      	beq.n	801017c <vSocketSelectTCP+0x98>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010168:	f003 0302 	and.w	r3, r3, #2
 801016c:	b2db      	uxtb	r3, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	d004      	beq.n	801017c <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	f043 0301 	orr.w	r3, r3, #1
 8010178:	613b      	str	r3, [r7, #16]
 801017a:	e00c      	b.n	8010196 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d009      	beq.n	8010196 <vSocketSelectTCP+0xb2>
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff fe62 	bl	800fe4c <FreeRTOS_rx_size>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	dd03      	ble.n	8010196 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	f043 0301 	orr.w	r3, r3, #1
 8010194:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801019a:	f003 0304 	and.w	r3, r3, #4
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00d      	beq.n	80101be <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80101a8:	2b08      	cmp	r3, #8
 80101aa:	d004      	beq.n	80101b6 <vSocketSelectTCP+0xd2>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d103      	bne.n	80101be <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	f043 0304 	orr.w	r3, r3, #4
 80101bc:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c2:	f003 0302 	and.w	r3, r3, #2
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d034      	beq.n	8010234 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 80101ca:	2300      	movs	r3, #0
 80101cc:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d007      	beq.n	80101e4 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7ff fdcb 	bl	800fd70 <FreeRTOS_tx_space>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dd01      	ble.n	80101e4 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 80101e0:	2301      	movs	r3, #1
 80101e2:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d11d      	bne.n	8010226 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80101f0:	f003 0308 	and.w	r3, r3, #8
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d015      	beq.n	8010226 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010200:	2b04      	cmp	r3, #4
 8010202:	d910      	bls.n	8010226 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801020a:	f003 0310 	and.w	r3, r3, #16
 801020e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010210:	2b00      	cmp	r3, #0
 8010212:	d108      	bne.n	8010226 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801021a:	f043 0310 	orr.w	r3, r3, #16
 801021e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010222:	2301      	movs	r3, #1
 8010224:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d003      	beq.n	8010234 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	f043 0302 	orr.w	r3, r3, #2
 8010232:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010234:	693b      	ldr	r3, [r7, #16]
        }
 8010236:	4618      	mov	r0, r3
 8010238:	3718      	adds	r7, #24
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}
	...

08010240 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010240:	b580      	push	{r7, lr}
 8010242:	b08a      	sub	sp, #40	@ 0x28
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8010248:	2301      	movs	r3, #1
 801024a:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 801024c:	2300      	movs	r3, #0
 801024e:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010250:	2300      	movs	r3, #0
 8010252:	627b      	str	r3, [r7, #36]	@ 0x24
 8010254:	e043      	b.n	80102de <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8010256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010258:	2b00      	cmp	r3, #0
 801025a:	d102      	bne.n	8010262 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 801025c:	4b34      	ldr	r3, [pc, #208]	@ (8010330 <vSocketSelect+0xf0>)
 801025e:	617b      	str	r3, [r7, #20]
 8010260:	e001      	b.n	8010266 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010262:	4b34      	ldr	r3, [pc, #208]	@ (8010334 <vSocketSelect+0xf4>)
 8010264:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	61bb      	str	r3, [r7, #24]
 801026c:	e030      	b.n	80102d0 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d124      	bne.n	80102c8 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801027e:	2300      	movs	r3, #0
 8010280:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010288:	2b06      	cmp	r3, #6
 801028a:	d107      	bne.n	801029c <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 801028c:	68b8      	ldr	r0, [r7, #8]
 801028e:	f7ff ff29 	bl	80100e4 <vSocketSelectTCP>
 8010292:	4602      	mov	r2, r0
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	4313      	orrs	r3, r2
 8010298:	623b      	str	r3, [r7, #32]
 801029a:	e00d      	b.n	80102b8 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102a0:	f003 0301 	and.w	r3, r3, #1
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d007      	beq.n	80102b8 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d003      	beq.n	80102b8 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80102b0:	6a3b      	ldr	r3, [r7, #32]
 80102b2:	f043 0301 	orr.w	r3, r3, #1
 80102b6:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	6a3a      	ldr	r2, [r7, #32]
 80102bc:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 80102be:	69fa      	ldr	r2, [r7, #28]
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	61fb      	str	r3, [r7, #28]
 80102c6:	e000      	b.n	80102ca <vSocketSelect+0x8a>
                    continue;
 80102c8:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 80102d0:	69ba      	ldr	r2, [r7, #24]
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d1ca      	bne.n	801026e <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80102d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102da:	3301      	adds	r3, #1
 80102dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80102de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	ddb7      	ble.n	8010256 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2100      	movs	r1, #0
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7f2 fc17 	bl	8002b20 <xEventGroupClearBits>
 80102f2:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	43da      	mvns	r2, r3
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4013      	ands	r3, r2
 80102fc:	f003 030f 	and.w	r3, r3, #15
 8010300:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d005      	beq.n	8010314 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	68f9      	ldr	r1, [r7, #12]
 801030e:	4618      	mov	r0, r3
 8010310:	f7f2 fc06 	bl	8002b20 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	f043 0310 	orr.w	r3, r3, #16
 801031e:	4619      	mov	r1, r3
 8010320:	4610      	mov	r0, r2
 8010322:	f7f2 fc2b 	bl	8002b7c <xEventGroupSetBits>
    }
 8010326:	bf00      	nop
 8010328:	3728      	adds	r7, #40	@ 0x28
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
 801032e:	bf00      	nop
 8010330:	20001434 	.word	0x20001434
 8010334:	20001448 	.word	0x20001448

08010338 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010338:	b480      	push	{r7}
 801033a:	b087      	sub	sp, #28
 801033c:	af00      	add	r7, sp, #0
 801033e:	60f8      	str	r0, [r7, #12]
 8010340:	60b9      	str	r1, [r7, #8]
 8010342:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	691b      	ldr	r3, [r3, #16]
 8010348:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 801034a:	693a      	ldr	r2, [r7, #16]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	441a      	add	r2, r3
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	1ad3      	subs	r3, r2, r3
 8010354:	3b01      	subs	r3, #1
 8010356:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010358:	697a      	ldr	r2, [r7, #20]
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	429a      	cmp	r2, r3
 801035e:	d303      	bcc.n	8010368 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 8010360:	697a      	ldr	r2, [r7, #20]
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010368:	697b      	ldr	r3, [r7, #20]
}
 801036a:	4618      	mov	r0, r3
 801036c:	371c      	adds	r7, #28
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr

08010376 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8010376:	b480      	push	{r7}
 8010378:	b087      	sub	sp, #28
 801037a:	af00      	add	r7, sp, #0
 801037c:	60f8      	str	r0, [r7, #12]
 801037e:	60b9      	str	r1, [r7, #8]
 8010380:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	441a      	add	r2, r3
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	429a      	cmp	r2, r3
 801039a:	d303      	bcc.n	80103a4 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 801039c:	697a      	ldr	r2, [r7, #20]
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80103a4:	697b      	ldr	r3, [r7, #20]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	371c      	adds	r7, #28
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b082      	sub	sp, #8
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6899      	ldr	r1, [r3, #8]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	461a      	mov	r2, r3
 80103c4:	6878      	ldr	r0, [r7, #4]
 80103c6:	f7ff ffb7 	bl	8010338 <uxStreamBufferSpace>
 80103ca:	4603      	mov	r3, r0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	68d9      	ldr	r1, [r3, #12]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	461a      	mov	r2, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff ffa6 	bl	8010338 <uxStreamBufferSpace>
 80103ec:	4603      	mov	r3, r0
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b082      	sub	sp, #8
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6819      	ldr	r1, [r3, #0]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	461a      	mov	r2, r3
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7ff ffb4 	bl	8010376 <uxStreamBufferDistance>
 801040e:	4603      	mov	r3, r0
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6859      	ldr	r1, [r3, #4]
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	689b      	ldr	r3, [r3, #8]
 8010428:	461a      	mov	r2, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff ffa3 	bl	8010376 <uxStreamBufferDistance>
 8010430:	4603      	mov	r3, r0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2200      	movs	r2, #0
 8010446:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2200      	movs	r2, #0
 801044c:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	605a      	str	r2, [r3, #4]
}
 801045a:	bf00      	nop
 801045c:	370c      	adds	r7, #12
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr

08010466 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b086      	sub	sp, #24
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
 801046e:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff ffce 	bl	8010418 <uxStreamBufferMidSpace>
 801047c:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8010488:	693a      	ldr	r2, [r7, #16]
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	429a      	cmp	r2, r3
 801048e:	d901      	bls.n	8010494 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8010494:	697a      	ldr	r2, [r7, #20]
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	4413      	add	r3, r2
 801049a:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 801049c:	697a      	ldr	r2, [r7, #20]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d303      	bcc.n	80104ac <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 80104a4:	697a      	ldr	r2, [r7, #20]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	1ad3      	subs	r3, r2, r3
 80104aa:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	605a      	str	r2, [r3, #4]
}
 80104b2:	bf00      	nop
 80104b4:	3718      	adds	r7, #24
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 80104ba:	b480      	push	{r7}
 80104bc:	b087      	sub	sp, #28
 80104be:	af00      	add	r7, sp, #0
 80104c0:	60f8      	str	r0, [r7, #12]
 80104c2:	60b9      	str	r1, [r7, #8]
 80104c4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80104c6:	2300      	movs	r3, #0
 80104c8:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	1ad2      	subs	r2, r2, r3
 80104d6:	6879      	ldr	r1, [r7, #4]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	1acb      	subs	r3, r1, r3
 80104dc:	429a      	cmp	r2, r3
 80104de:	d801      	bhi.n	80104e4 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 80104e0:	2301      	movs	r3, #1
 80104e2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80104e4:	697b      	ldr	r3, [r7, #20]
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	371c      	adds	r7, #28
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b084      	sub	sp, #16
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7ff ff77 	bl	80103f6 <uxStreamBufferGetSize>
 8010508:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f103 0214 	add.w	r2, r3, #20
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	441a      	add	r2, r3
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	691a      	ldr	r2, [r3, #16]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	4619      	mov	r1, r3
 8010522:	68b8      	ldr	r0, [r7, #8]
 8010524:	f7f9 fede 	bl	800a2e4 <FreeRTOS_min_size_t>
 8010528:	4603      	mov	r3, r0
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b08a      	sub	sp, #40	@ 0x28
 8010536:	af00      	add	r7, sp, #0
 8010538:	60f8      	str	r0, [r7, #12]
 801053a:	60b9      	str	r1, [r7, #8]
 801053c:	607a      	str	r2, [r7, #4]
 801053e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff ff36 	bl	80103b2 <uxStreamBufferGetSpace>
 8010546:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	429a      	cmp	r2, r3
 801054e:	d904      	bls.n	801055a <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 8010550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	627b      	str	r3, [r7, #36]	@ 0x24
 8010558:	e001      	b.n	801055e <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 801055a:	2300      	movs	r3, #0
 801055c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801055e:	6839      	ldr	r1, [r7, #0]
 8010560:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010562:	f7f9 febf 	bl	800a2e4 <FreeRTOS_min_size_t>
 8010566:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d05c      	beq.n	8010628 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	691b      	ldr	r3, [r3, #16]
 8010572:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00b      	beq.n	8010598 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 8010580:	6a3a      	ldr	r2, [r7, #32]
 8010582:	68bb      	ldr	r3, [r7, #8]
 8010584:	4413      	add	r3, r2
 8010586:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8010588:	6a3a      	ldr	r2, [r7, #32]
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	429a      	cmp	r2, r3
 801058e:	d303      	bcc.n	8010598 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 8010590:	6a3a      	ldr	r2, [r7, #32]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d021      	beq.n	80105e2 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801059e:	69ba      	ldr	r2, [r7, #24]
 80105a0:	6a3b      	ldr	r3, [r7, #32]
 80105a2:	1ad3      	subs	r3, r2, r3
 80105a4:	69f9      	ldr	r1, [r7, #28]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7f9 fe9c 	bl	800a2e4 <FreeRTOS_min_size_t>
 80105ac:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 80105ae:	6a3b      	ldr	r3, [r7, #32]
 80105b0:	3310      	adds	r3, #16
 80105b2:	68fa      	ldr	r2, [r7, #12]
 80105b4:	4413      	add	r3, r2
 80105b6:	3304      	adds	r3, #4
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	6879      	ldr	r1, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	f011 fc07 	bl	8021dd0 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 80105c2:	69fa      	ldr	r2, [r7, #28]
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d90b      	bls.n	80105e2 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f103 0014 	add.w	r0, r3, #20
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	18d1      	adds	r1, r2, r3
 80105d6:	69fa      	ldr	r2, [r7, #28]
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	461a      	mov	r2, r3
 80105de:	f011 fbf7 	bl	8021dd0 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 80105e2:	f7f3 fc77 	bl	8003ed4 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d10e      	bne.n	801060a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 80105ec:	6a3a      	ldr	r2, [r7, #32]
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	4413      	add	r3, r2
 80105f2:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 80105f4:	6a3a      	ldr	r2, [r7, #32]
 80105f6:	69bb      	ldr	r3, [r7, #24]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d303      	bcc.n	8010604 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 80105fc:	6a3a      	ldr	r2, [r7, #32]
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6a3a      	ldr	r2, [r7, #32]
 8010608:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	6a3a      	ldr	r2, [r7, #32]
 8010610:	4619      	mov	r1, r3
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7ff ff51 	bl	80104ba <xStreamBufferLessThenEqual>
 8010618:	4603      	mov	r3, r0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d002      	beq.n	8010624 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6a3a      	ldr	r2, [r7, #32]
 8010622:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010624:	f7f3 fc64 	bl	8003ef0 <xTaskResumeAll>
    }

    return uxCount;
 8010628:	69fb      	ldr	r3, [r7, #28]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3728      	adds	r7, #40	@ 0x28
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}

08010632 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b08a      	sub	sp, #40	@ 0x28
 8010636:	af00      	add	r7, sp, #0
 8010638:	60f8      	str	r0, [r7, #12]
 801063a:	60b9      	str	r1, [r7, #8]
 801063c:	607a      	str	r2, [r7, #4]
 801063e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010640:	68f8      	ldr	r0, [r7, #12]
 8010642:	f7ff fed8 	bl	80103f6 <uxStreamBufferGetSize>
 8010646:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	429a      	cmp	r2, r3
 801064e:	d904      	bls.n	801065a <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 8010650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	627b      	str	r3, [r7, #36]	@ 0x24
 8010658:	e001      	b.n	801065e <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 801065a:	2300      	movs	r3, #0
 801065c:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801065e:	6839      	ldr	r1, [r7, #0]
 8010660:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010662:	f7f9 fe3f 	bl	800a2e4 <FreeRTOS_min_size_t>
 8010666:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d04e      	beq.n	801070c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00b      	beq.n	8010698 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 8010680:	6a3a      	ldr	r2, [r7, #32]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	4413      	add	r3, r2
 8010686:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010688:	6a3a      	ldr	r2, [r7, #32]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	429a      	cmp	r2, r3
 801068e:	d303      	bcc.n	8010698 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 8010690:	6a3a      	ldr	r2, [r7, #32]
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	1ad3      	subs	r3, r2, r3
 8010696:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d021      	beq.n	80106e2 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801069e:	69ba      	ldr	r2, [r7, #24]
 80106a0:	6a3b      	ldr	r3, [r7, #32]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	69f9      	ldr	r1, [r7, #28]
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7f9 fe1c 	bl	800a2e4 <FreeRTOS_min_size_t>
 80106ac:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	3310      	adds	r3, #16
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	4413      	add	r3, r2
 80106b6:	3304      	adds	r3, #4
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	4619      	mov	r1, r3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f011 fb87 	bl	8021dd0 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 80106c2:	69fa      	ldr	r2, [r7, #28]
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d90b      	bls.n	80106e2 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	18d0      	adds	r0, r2, r3
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f103 0114 	add.w	r1, r3, #20
 80106d6:	69fa      	ldr	r2, [r7, #28]
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	461a      	mov	r2, r3
 80106de:	f011 fb77 	bl	8021dd0 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 80106e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d111      	bne.n	801070c <uxStreamBufferGet+0xda>
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d10e      	bne.n	801070c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 80106ee:	6a3a      	ldr	r2, [r7, #32]
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	4413      	add	r3, r2
 80106f4:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80106f6:	6a3a      	ldr	r2, [r7, #32]
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d303      	bcc.n	8010706 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 80106fe:	6a3a      	ldr	r2, [r7, #32]
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6a3a      	ldr	r2, [r7, #32]
 801070a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 801070c:	69fb      	ldr	r3, [r7, #28]
}
 801070e:	4618      	mov	r0, r3
 8010710:	3728      	adds	r7, #40	@ 0x28
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
	...

08010718 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010720:	4b0a      	ldr	r3, [pc, #40]	@ (801074c <vSocketCloseNextTime+0x34>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d009      	beq.n	801073c <vSocketCloseNextTime+0x24>
 8010728:	4b08      	ldr	r3, [pc, #32]	@ (801074c <vSocketCloseNextTime+0x34>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	429a      	cmp	r2, r3
 8010730:	d004      	beq.n	801073c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010732:	4b06      	ldr	r3, [pc, #24]	@ (801074c <vSocketCloseNextTime+0x34>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f7fd fd98 	bl	800e26c <vSocketClose>
        }

        xSocketToClose = pxSocket;
 801073c:	4a03      	ldr	r2, [pc, #12]	@ (801074c <vSocketCloseNextTime+0x34>)
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6013      	str	r3, [r2, #0]
    }
 8010742:	bf00      	nop
 8010744:	3708      	adds	r7, #8
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	20001458 	.word	0x20001458

08010750 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8010758:	4b0c      	ldr	r3, [pc, #48]	@ (801078c <vSocketListenNextTime+0x3c>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d00e      	beq.n	801077e <vSocketListenNextTime+0x2e>
 8010760:	4b0a      	ldr	r3, [pc, #40]	@ (801078c <vSocketListenNextTime+0x3c>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	429a      	cmp	r2, r3
 8010768:	d009      	beq.n	801077e <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 801076a:	4b08      	ldr	r3, [pc, #32]	@ (801078c <vSocketListenNextTime+0x3c>)
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	4b07      	ldr	r3, [pc, #28]	@ (801078c <vSocketListenNextTime+0x3c>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010776:	4619      	mov	r1, r3
 8010778:	4610      	mov	r0, r2
 801077a:	f7fe fff3 	bl	800f764 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801077e:	4a03      	ldr	r2, [pc, #12]	@ (801078c <vSocketListenNextTime+0x3c>)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6013      	str	r3, [r2, #0]
    }
 8010784:	bf00      	nop
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	2000145c 	.word	0x2000145c

08010790 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 8010790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	b086      	sub	sp, #24
 8010796:	af02      	add	r7, sp, #8
 8010798:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801079e:	2300      	movs	r3, #0
 80107a0:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d907      	bls.n	80107bc <xTCPSocketCheck+0x2c>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d002      	beq.n	80107bc <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f003 f834 	bl	8013824 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d05f      	beq.n	8010886 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80107cc:	f003 0320 	and.w	r3, r3, #32
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d148      	bne.n	8010868 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d03b      	beq.n	8010858 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80107e0:	4b37      	ldr	r3, [pc, #220]	@ (80108c0 <xTCPSocketCheck+0x130>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	dd25      	ble.n	8010834 <xTCPSocketCheck+0xa4>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80107ec:	2b17      	cmp	r3, #23
 80107ee:	d021      	beq.n	8010834 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80107f4:	461e      	mov	r6, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80107fc:	4698      	mov	r8, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801080a:	1ad5      	subs	r5, r2, r3
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010818:	1ad4      	subs	r4, r2, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7f9 f81e 	bl	800985c <uxIPHeaderSizeSocket>
 8010820:	4603      	mov	r3, r0
 8010822:	3314      	adds	r3, #20
 8010824:	9301      	str	r3, [sp, #4]
 8010826:	9400      	str	r4, [sp, #0]
 8010828:	462b      	mov	r3, r5
 801082a:	4642      	mov	r2, r8
 801082c:	4631      	mov	r1, r6
 801082e:	4825      	ldr	r0, [pc, #148]	@ (80108c4 <xTCPSocketCheck+0x134>)
 8010830:	f011 f8b2 	bl	8021998 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f7f9 f80e 	bl	800985c <uxIPHeaderSizeSocket>
 8010840:	4603      	mov	r3, r0
 8010842:	f103 0214 	add.w	r2, r3, #20
 8010846:	2301      	movs	r3, #1
 8010848:	4621      	mov	r1, r4
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f002 fac8 	bl	8012de0 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 faa1 	bl	8010da0 <prvTCPNextTimeout>
 801085e:	4603      	mov	r3, r0
 8010860:	2b01      	cmp	r3, #1
 8010862:	d901      	bls.n	8010868 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8010864:	2301      	movs	r3, #1
 8010866:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801086e:	2b00      	cmp	r3, #0
 8010870:	d009      	beq.n	8010886 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010878:	4618      	mov	r0, r3
 801087a:	f006 f9e5 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2200      	movs	r2, #0
 8010882:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d113      	bne.n	80108b4 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010892:	2b04      	cmp	r3, #4
 8010894:	d804      	bhi.n	80108a0 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801089c:	2b02      	cmp	r3, #2
 801089e:	d102      	bne.n	80108a6 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f002 f9ff 	bl	8012ca4 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fa7a 	bl	8010da0 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f001 f973 	bl	8011b98 <prvTCPStatusAgeCheck>
 80108b2:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 80108b4:	68fb      	ldr	r3, [r7, #12]
    }
 80108b6:	4618      	mov	r0, r3
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c0:	20001484 	.word	0x20001484
 80108c4:	08025948 	.word	0x08025948

080108c8 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 80108d0:	f7f3 fc12 	bl	80040f8 <xTaskGetTickCount>
 80108d4:	4602      	mov	r2, r0
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80108e2:	f36f 0382 	bfc	r3, #2, #1
 80108e6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80108f0:	f36f 0341 	bfc	r3, #1, #1
 80108f4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010900:	f7f3 fbfa 	bl	80040f8 <xTaskGetTickCount>
 8010904:	4602      	mov	r2, r0
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801090c:	bf00      	nop
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010914:	b480      	push	{r7}
 8010916:	b087      	sub	sp, #28
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801091c:	2300      	movs	r3, #0
 801091e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010920:	4b15      	ldr	r3, [pc, #84]	@ (8010978 <vTCPRemoveTCPChild+0x64>)
 8010922:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010924:	4b15      	ldr	r3, [pc, #84]	@ (801097c <vTCPRemoveTCPChild+0x68>)
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 801092a:	e01a      	b.n	8010962 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010938:	68ba      	ldr	r2, [r7, #8]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	429a      	cmp	r2, r3
 801093e:	d010      	beq.n	8010962 <vTCPRemoveTCPChild+0x4e>
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010948:	429a      	cmp	r2, r3
 801094a:	d10a      	bne.n	8010962 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	429a      	cmp	r2, r3
 8010954:	d105      	bne.n	8010962 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	2200      	movs	r2, #0
 801095a:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 801095c:	2301      	movs	r3, #1
 801095e:	617b      	str	r3, [r7, #20]
                    break;
 8010960:	e003      	b.n	801096a <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010962:	693a      	ldr	r2, [r7, #16]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	429a      	cmp	r2, r3
 8010968:	d1e0      	bne.n	801092c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 801096a:	697b      	ldr	r3, [r7, #20]
    }
 801096c:	4618      	mov	r0, r3
 801096e:	371c      	adds	r7, #28
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	20001448 	.word	0x20001448
 801097c:	20001440 	.word	0x20001440

08010980 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010982:	b097      	sub	sp, #92	@ 0x5c
 8010984:	af02      	add	r7, sp, #8
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	460b      	mov	r3, r1
 801098a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010996:	2b04      	cmp	r3, #4
 8010998:	d906      	bls.n	80109a8 <vTCPStateChange+0x28>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80109a0:	2b08      	cmp	r3, #8
 80109a2:	d001      	beq.n	80109a8 <vTCPStateChange+0x28>
 80109a4:	2301      	movs	r3, #1
 80109a6:	e000      	b.n	80109aa <vTCPStateChange+0x2a>
 80109a8:	2300      	movs	r3, #0
 80109aa:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 80109ac:	78fb      	ldrb	r3, [r7, #3]
 80109ae:	2b04      	cmp	r3, #4
 80109b0:	d904      	bls.n	80109bc <vTCPStateChange+0x3c>
 80109b2:	78fb      	ldrb	r3, [r7, #3]
 80109b4:	2b08      	cmp	r3, #8
 80109b6:	d001      	beq.n	80109bc <vTCPStateChange+0x3c>
 80109b8:	2301      	movs	r3, #1
 80109ba:	e000      	b.n	80109be <vTCPStateChange+0x3e>
 80109bc:	2300      	movs	r3, #0
 80109be:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80109c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 80109ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109d2:	2b02      	cmp	r3, #2
 80109d4:	d007      	beq.n	80109e6 <vTCPStateChange+0x66>
 80109d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109da:	2b03      	cmp	r3, #3
 80109dc:	d003      	beq.n	80109e6 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 80109de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109e2:	2b04      	cmp	r3, #4
 80109e4:	d114      	bne.n	8010a10 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80109e6:	78fb      	ldrb	r3, [r7, #3]
 80109e8:	2b08      	cmp	r3, #8
 80109ea:	d111      	bne.n	8010a10 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80109ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80109f0:	4618      	mov	r0, r3
 80109f2:	f001 fed7 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 80109f6:	4604      	mov	r4, r0
 80109f8:	78fb      	ldrb	r3, [r7, #3]
 80109fa:	4618      	mov	r0, r3
 80109fc:	f001 fed2 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 8010a00:	4603      	mov	r3, r0
 8010a02:	461a      	mov	r2, r3
 8010a04:	4621      	mov	r1, r4
 8010a06:	4875      	ldr	r0, [pc, #468]	@ (8010bdc <vTCPStateChange+0x25c>)
 8010a08:	f010 ffc6 	bl	8021998 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a14:	429a      	cmp	r2, r3
 8010a16:	f000 809f 	beq.w	8010b58 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a20:	f003 0304 	and.w	r3, r3, #4
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d012      	beq.n	8010a50 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a30:	f003 0308 	and.w	r3, r3, #8
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d10a      	bne.n	8010a50 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d104      	bne.n	8010a50 <vTCPStateChange+0xd0>
 8010a46:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8010a4a:	4865      	ldr	r0, [pc, #404]	@ (8010be0 <vTCPStateChange+0x260>)
 8010a4c:	f7f0 fe7c 	bl	8001748 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d057      	beq.n	8010b06 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010a5c:	f003 0304 	and.w	r3, r3, #4
 8010a60:	b2db      	uxtb	r3, r3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d03c      	beq.n	8010ae0 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d027      	beq.n	8010abc <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8010a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d102      	bne.n	8010a7a <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8010a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f043 0204 	orr.w	r2, r3, #4
 8010a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a84:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a8a:	f003 0301 	and.w	r3, r3, #1
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d005      	beq.n	8010a9e <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a9c:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aa0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d009      	beq.n	8010abc <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8010aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aaa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010aae:	f003 0308 	and.w	r3, r3, #8
 8010ab2:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d101      	bne.n	8010abc <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8010ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aba:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010ac8:	f36f 0382 	bfc	r3, #2, #1
 8010acc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010ad6:	f043 0302 	orr.w	r3, r3, #2
 8010ada:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 8010ade:	e024      	b.n	8010b2a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f043 0208 	orr.w	r2, r3, #8
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010af0:	f003 0302 	and.w	r3, r3, #2
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d018      	beq.n	8010b2a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	601a      	str	r2, [r3, #0]
 8010b04:	e011      	b.n	8010b2a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f043 0220 	orr.w	r2, r3, #32
 8010b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b10:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b16:	f003 0304 	and.w	r3, r3, #4
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d005      	beq.n	8010b2a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 8010b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b28:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <vTCPStateChange+0x1be>
 8010b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d101      	bne.n	8010b3e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010b44:	4618      	mov	r0, r3
 8010b46:	f000 ffff 	bl	8011b48 <prvTCPSocketIsActive>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d103      	bne.n	8010b58 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	78fa      	ldrb	r2, [r7, #3]
 8010b5c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 8010b60:	78fb      	ldrb	r3, [r7, #3]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <vTCPStateChange+0x1ee>
 8010b66:	78fb      	ldrb	r3, [r7, #3]
 8010b68:	2b08      	cmp	r3, #8
 8010b6a:	f040 8084 	bne.w	8010c76 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 8010b72:	2300      	movs	r3, #0
 8010b74:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8010b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d106      	bne.n	8010b8c <vTCPStateChange+0x20c>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d002      	beq.n	8010b8c <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d006      	beq.n	8010ba2 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	429a      	cmp	r2, r3
 8010b9c:	d101      	bne.n	8010ba2 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ba8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	4619      	mov	r1, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010bb6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	461a      	mov	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010bc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	4806      	ldr	r0, [pc, #24]	@ (8010be4 <vTCPStateChange+0x264>)
 8010bcc:	f010 fee4 	bl	8021998 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d008      	beq.n	8010be8 <vTCPStateChange+0x268>
 8010bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010bda:	e006      	b.n	8010bea <vTCPStateChange+0x26a>
 8010bdc:	08025974 	.word	0x08025974
 8010be0:	08025988 	.word	0x08025988
 8010be4:	080259b8 	.word	0x080259b8
 8010be8:	2300      	movs	r3, #0
 8010bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010bec:	9200      	str	r2, [sp, #0]
 8010bee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010bf0:	6879      	ldr	r1, [r7, #4]
 8010bf2:	4865      	ldr	r0, [pc, #404]	@ (8010d88 <vTCPStateChange+0x408>)
 8010bf4:	f010 fed0 	bl	8021998 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010bf8:	f7f3 f96c 	bl	8003ed4 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c02:	f003 0304 	and.w	r3, r3, #4
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d107      	bne.n	8010c1c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c12:	f003 0302 	and.w	r3, r3, #2
 8010c16:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d026      	beq.n	8010c6a <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c22:	f003 0308 	and.w	r3, r3, #8
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d11e      	bne.n	8010c6a <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f7ff fe71 	bl	8010914 <vTCPRemoveTCPChild>
 8010c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010c3a:	f36f 0382 	bfc	r3, #2, #1
 8010c3e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010c48:	f36f 0341 	bfc	r3, #1, #1
 8010c4c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8010c50:	f7f9 f978 	bl	8009f44 <xIsCallingFromIPTask>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d104      	bne.n	8010c64 <vTCPStateChange+0x2e4>
 8010c5a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8010c5e:	484b      	ldr	r0, [pc, #300]	@ (8010d8c <vTCPStateChange+0x40c>)
 8010c60:	f7f0 fd72 	bl	8001748 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7ff fd57 	bl	8010718 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8010c6a:	f7f3 f941 	bl	8003ef0 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8010c6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c70:	4847      	ldr	r0, [pc, #284]	@ (8010d90 <vTCPStateChange+0x410>)
 8010c72:	f010 fe91 	bl	8021998 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8010c76:	78fb      	ldrb	r3, [r7, #3]
 8010c78:	2b08      	cmp	r3, #8
 8010c7a:	d11b      	bne.n	8010cb4 <vTCPStateChange+0x334>
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c82:	f003 0308 	and.w	r3, r3, #8
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d013      	beq.n	8010cb4 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8010c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c90:	3b03      	subs	r3, #3
 8010c92:	2b01      	cmp	r3, #1
 8010c94:	d80d      	bhi.n	8010cb2 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	483d      	ldr	r0, [pc, #244]	@ (8010d94 <vTCPStateChange+0x414>)
 8010c9e:	f010 fe7b 	bl	8021998 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7ff fd50 	bl	8010750 <vSocketListenNextTime>
                    break;
 8010cb0:	e000      	b.n	8010cb4 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010cb2:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f7ff fe07 	bl	80108c8 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8010cba:	4b37      	ldr	r3, [pc, #220]	@ (8010d98 <vTCPStateChange+0x418>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	db4f      	blt.n	8010d62 <vTCPStateChange+0x3e2>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010cc6:	2b17      	cmp	r3, #23
 8010cc8:	d04b      	beq.n	8010d62 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	7a1b      	ldrb	r3, [r3, #8]
 8010cce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010cd2:	b2db      	uxtb	r3, r3
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <vTCPStateChange+0x35e>
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d01d      	beq.n	8010d18 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8010cdc:	e026      	b.n	8010d2c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ce2:	061a      	lsls	r2, r3, #24
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ce8:	021b      	lsls	r3, r3, #8
 8010cea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010cee:	431a      	orrs	r2, r3
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cf4:	0a1b      	lsrs	r3, r3, #8
 8010cf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010cfa:	431a      	orrs	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d00:	0e1b      	lsrs	r3, r3, #24
 8010d02:	4313      	orrs	r3, r2
 8010d04:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010d06:	f107 0208 	add.w	r2, r7, #8
 8010d0a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8010d0e:	2328      	movs	r3, #40	@ 0x28
 8010d10:	2002      	movs	r0, #2
 8010d12:	f7fe f827 	bl	800ed64 <FreeRTOS_inet_ntop>
                           break;
 8010d16:	e009      	b.n	8010d2c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8010d1e:	f107 0208 	add.w	r2, r7, #8
 8010d22:	2328      	movs	r3, #40	@ 0x28
 8010d24:	200a      	movs	r0, #10
 8010d26:	f7fe f81d 	bl	800ed64 <FreeRTOS_inet_ntop>
                            break;
 8010d2a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010d30:	461d      	mov	r5, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d38:	461e      	mov	r6, r3
 8010d3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f001 fd30 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 8010d44:	4604      	mov	r4, r0
 8010d46:	78fb      	ldrb	r3, [r7, #3]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f001 fd2b 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	f107 0208 	add.w	r2, r7, #8
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	9400      	str	r4, [sp, #0]
 8010d58:	4633      	mov	r3, r6
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	480f      	ldr	r0, [pc, #60]	@ (8010d9c <vTCPStateChange+0x41c>)
 8010d5e:	f010 fe1b 	bl	8021998 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8010d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d005      	beq.n	8010d74 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8010d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d6a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010d6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010d72:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8010d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8010d7a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8010d7c:	f7fe f871 	bl	800ee62 <vSocketWakeUpUser>
        }
    }
 8010d80:	bf00      	nop
 8010d82:	3754      	adds	r7, #84	@ 0x54
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d88:	080259f4 	.word	0x080259f4
 8010d8c:	08025988 	.word	0x08025988
 8010d90:	08025a28 	.word	0x08025a28
 8010d94:	08025a4c 	.word	0x08025a4c
 8010d98:	20001484 	.word	0x20001484
 8010d9c:	08025a70 	.word	0x08025a70

08010da0 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010da4:	b098      	sub	sp, #96	@ 0x60
 8010da6:	af02      	add	r7, sp, #8
 8010da8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010daa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010dae:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010db2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010db6:	2b02      	cmp	r3, #2
 8010db8:	f040 80cc 	bne.w	8010f54 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8010dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dbe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010dc2:	f003 0308 	and.w	r3, r3, #8
 8010dc6:	b2db      	uxtb	r3, r3
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d01a      	beq.n	8010e02 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8010dcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dce:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d811      	bhi.n	8010dfa <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8010dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dd8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d102      	bne.n	8010de6 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8010de0:	2300      	movs	r3, #0
 8010de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8010de4:	e010      	b.n	8010e08 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8010de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010de8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010dec:	3b01      	subs	r3, #1
 8010dee:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010df2:	fa02 f303 	lsl.w	r3, r2, r3
 8010df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8010df8:	e006      	b.n	8010e08 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8010dfa:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8010dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e00:	e002      	b.n	8010e08 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010e02:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010e06:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010e12:	4618      	mov	r0, r3
 8010e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e16:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e1e:	9300      	str	r3, [sp, #0]
 8010e20:	4613      	mov	r3, r2
 8010e22:	4602      	mov	r2, r0
 8010e24:	48a4      	ldr	r0, [pc, #656]	@ (80110b8 <prvTCPNextTimeout+0x318>)
 8010e26:	f010 fdb7 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8010e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e30:	647a      	str	r2, [r7, #68]	@ 0x44
 8010e32:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8010e36:	4622      	mov	r2, r4
 8010e38:	462b      	mov	r3, r5
 8010e3a:	f04f 0000 	mov.w	r0, #0
 8010e3e:	f04f 0100 	mov.w	r1, #0
 8010e42:	0159      	lsls	r1, r3, #5
 8010e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010e48:	0150      	lsls	r0, r2, #5
 8010e4a:	4602      	mov	r2, r0
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	4621      	mov	r1, r4
 8010e50:	1a51      	subs	r1, r2, r1
 8010e52:	6239      	str	r1, [r7, #32]
 8010e54:	4629      	mov	r1, r5
 8010e56:	eb63 0301 	sbc.w	r3, r3, r1
 8010e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e5c:	f04f 0200 	mov.w	r2, #0
 8010e60:	f04f 0300 	mov.w	r3, #0
 8010e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010e68:	4649      	mov	r1, r9
 8010e6a:	008b      	lsls	r3, r1, #2
 8010e6c:	4641      	mov	r1, r8
 8010e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010e72:	4641      	mov	r1, r8
 8010e74:	008a      	lsls	r2, r1, #2
 8010e76:	4610      	mov	r0, r2
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	4622      	mov	r2, r4
 8010e7e:	189b      	adds	r3, r3, r2
 8010e80:	61bb      	str	r3, [r7, #24]
 8010e82:	462b      	mov	r3, r5
 8010e84:	460a      	mov	r2, r1
 8010e86:	eb42 0303 	adc.w	r3, r2, r3
 8010e8a:	61fb      	str	r3, [r7, #28]
 8010e8c:	f04f 0200 	mov.w	r2, #0
 8010e90:	f04f 0300 	mov.w	r3, #0
 8010e94:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010e98:	4629      	mov	r1, r5
 8010e9a:	00cb      	lsls	r3, r1, #3
 8010e9c:	4621      	mov	r1, r4
 8010e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	00ca      	lsls	r2, r1, #3
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010eae:	f04f 0300 	mov.w	r3, #0
 8010eb2:	f7ef fa7d 	bl	80003b0 <__aeabi_uldivmod>
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	460b      	mov	r3, r1
 8010eba:	4613      	mov	r3, r2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d044      	beq.n	8010f4a <prvTCPNextTimeout+0x1aa>
 8010ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010ec6:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010ec8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010ecc:	4622      	mov	r2, r4
 8010ece:	462b      	mov	r3, r5
 8010ed0:	f04f 0000 	mov.w	r0, #0
 8010ed4:	f04f 0100 	mov.w	r1, #0
 8010ed8:	0159      	lsls	r1, r3, #5
 8010eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010ede:	0150      	lsls	r0, r2, #5
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8010eea:	4629      	mov	r1, r5
 8010eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8010ef0:	f04f 0200 	mov.w	r2, #0
 8010ef4:	f04f 0300 	mov.w	r3, #0
 8010ef8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010efc:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010f00:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010f04:	4692      	mov	sl, r2
 8010f06:	469b      	mov	fp, r3
 8010f08:	4623      	mov	r3, r4
 8010f0a:	eb1a 0303 	adds.w	r3, sl, r3
 8010f0e:	613b      	str	r3, [r7, #16]
 8010f10:	462b      	mov	r3, r5
 8010f12:	eb4b 0303 	adc.w	r3, fp, r3
 8010f16:	617b      	str	r3, [r7, #20]
 8010f18:	f04f 0200 	mov.w	r2, #0
 8010f1c:	f04f 0300 	mov.w	r3, #0
 8010f20:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010f24:	4629      	mov	r1, r5
 8010f26:	00cb      	lsls	r3, r1, #3
 8010f28:	4621      	mov	r1, r4
 8010f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f2e:	4621      	mov	r1, r4
 8010f30:	00ca      	lsls	r2, r1, #3
 8010f32:	4610      	mov	r0, r2
 8010f34:	4619      	mov	r1, r3
 8010f36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010f3a:	f04f 0300 	mov.w	r3, #0
 8010f3e:	f7ef fa37 	bl	80003b0 <__aeabi_uldivmod>
 8010f42:	4602      	mov	r2, r0
 8010f44:	460b      	mov	r3, r1
 8010f46:	b292      	uxth	r2, r2
 8010f48:	e000      	b.n	8010f4c <prvTCPNextTimeout+0x1ac>
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010f52:	e0a8      	b.n	80110a6 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f56:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	f040 80a3 	bne.w	80110a6 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f62:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f68:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8010f6c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010f70:	461a      	mov	r2, r3
 8010f72:	f004 fcbd 	bl	80158f0 <xTCPWindowTxHasData>
 8010f76:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8010f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d108      	bne.n	8010f90 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8010f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d002      	beq.n	8010f8a <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8010f84:	2301      	movs	r3, #1
 8010f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f88:	e002      	b.n	8010f90 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010f8a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010f8e:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8010f90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f92:	2200      	movs	r2, #0
 8010f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f96:	637a      	str	r2, [r7, #52]	@ 0x34
 8010f98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010f9c:	4652      	mov	r2, sl
 8010f9e:	465b      	mov	r3, fp
 8010fa0:	f04f 0000 	mov.w	r0, #0
 8010fa4:	f04f 0100 	mov.w	r1, #0
 8010fa8:	0159      	lsls	r1, r3, #5
 8010faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010fae:	0150      	lsls	r0, r2, #5
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4651      	mov	r1, sl
 8010fb6:	ebb2 0801 	subs.w	r8, r2, r1
 8010fba:	4659      	mov	r1, fp
 8010fbc:	eb63 0901 	sbc.w	r9, r3, r1
 8010fc0:	f04f 0200 	mov.w	r2, #0
 8010fc4:	f04f 0300 	mov.w	r3, #0
 8010fc8:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010fcc:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010fd0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8010fd4:	4690      	mov	r8, r2
 8010fd6:	4699      	mov	r9, r3
 8010fd8:	4653      	mov	r3, sl
 8010fda:	eb18 0303 	adds.w	r3, r8, r3
 8010fde:	60bb      	str	r3, [r7, #8]
 8010fe0:	465b      	mov	r3, fp
 8010fe2:	eb49 0303 	adc.w	r3, r9, r3
 8010fe6:	60fb      	str	r3, [r7, #12]
 8010fe8:	f04f 0200 	mov.w	r2, #0
 8010fec:	f04f 0300 	mov.w	r3, #0
 8010ff0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010ff4:	4649      	mov	r1, r9
 8010ff6:	00cb      	lsls	r3, r1, #3
 8010ff8:	4641      	mov	r1, r8
 8010ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010ffe:	4641      	mov	r1, r8
 8011000:	00ca      	lsls	r2, r1, #3
 8011002:	4610      	mov	r0, r2
 8011004:	4619      	mov	r1, r3
 8011006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801100a:	f04f 0300 	mov.w	r3, #0
 801100e:	f7ef f9cf 	bl	80003b0 <__aeabi_uldivmod>
 8011012:	4602      	mov	r2, r0
 8011014:	460b      	mov	r3, r1
 8011016:	4613      	mov	r3, r2
 8011018:	2b00      	cmp	r3, #0
 801101a:	d040      	beq.n	801109e <prvTCPNextTimeout+0x2fe>
 801101c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801101e:	2200      	movs	r2, #0
 8011020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011024:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011028:	4642      	mov	r2, r8
 801102a:	464b      	mov	r3, r9
 801102c:	f04f 0000 	mov.w	r0, #0
 8011030:	f04f 0100 	mov.w	r1, #0
 8011034:	0159      	lsls	r1, r3, #5
 8011036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801103a:	0150      	lsls	r0, r2, #5
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	4641      	mov	r1, r8
 8011042:	1a54      	subs	r4, r2, r1
 8011044:	4649      	mov	r1, r9
 8011046:	eb63 0501 	sbc.w	r5, r3, r1
 801104a:	f04f 0200 	mov.w	r2, #0
 801104e:	f04f 0300 	mov.w	r3, #0
 8011052:	00ab      	lsls	r3, r5, #2
 8011054:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011058:	00a2      	lsls	r2, r4, #2
 801105a:	4614      	mov	r4, r2
 801105c:	461d      	mov	r5, r3
 801105e:	4643      	mov	r3, r8
 8011060:	18e3      	adds	r3, r4, r3
 8011062:	603b      	str	r3, [r7, #0]
 8011064:	464b      	mov	r3, r9
 8011066:	eb45 0303 	adc.w	r3, r5, r3
 801106a:	607b      	str	r3, [r7, #4]
 801106c:	f04f 0200 	mov.w	r2, #0
 8011070:	f04f 0300 	mov.w	r3, #0
 8011074:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011078:	4629      	mov	r1, r5
 801107a:	00cb      	lsls	r3, r1, #3
 801107c:	4621      	mov	r1, r4
 801107e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011082:	4621      	mov	r1, r4
 8011084:	00ca      	lsls	r2, r1, #3
 8011086:	4610      	mov	r0, r2
 8011088:	4619      	mov	r1, r3
 801108a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801108e:	f04f 0300 	mov.w	r3, #0
 8011092:	f7ef f98d 	bl	80003b0 <__aeabi_uldivmod>
 8011096:	4602      	mov	r2, r0
 8011098:	460b      	mov	r3, r1
 801109a:	b292      	uxth	r2, r2
 801109c:	e000      	b.n	80110a0 <prvTCPNextTimeout+0x300>
 801109e:	2201      	movs	r2, #1
 80110a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110a2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 80110a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110a8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 80110ac:	4618      	mov	r0, r3
 80110ae:	3758      	adds	r7, #88	@ 0x58
 80110b0:	46bd      	mov	sp, r7
 80110b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80110b6:	bf00      	nop
 80110b8:	08025a94 	.word	0x08025a94

080110bc <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 80110bc:	b4b0      	push	{r4, r5, r7}
 80110be:	b08b      	sub	sp, #44	@ 0x2c
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	899b      	ldrh	r3, [r3, #12]
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d10e      	bne.n	80110f6 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	330e      	adds	r3, #14
 80110dc:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 80110de:	2301      	movs	r3, #1
 80110e0:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	3308      	adds	r3, #8
 80110e6:	f107 0408 	add.w	r4, r7, #8
 80110ea:	6818      	ldr	r0, [r3, #0]
 80110ec:	6859      	ldr	r1, [r3, #4]
 80110ee:	689a      	ldr	r2, [r3, #8]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110f4:	e018      	b.n	8011128 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	330e      	adds	r3, #14
 80110fa:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011100:	6a3b      	ldr	r3, [r7, #32]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	061a      	lsls	r2, r3, #24
 8011106:	6a3b      	ldr	r3, [r7, #32]
 8011108:	68db      	ldr	r3, [r3, #12]
 801110a:	021b      	lsls	r3, r3, #8
 801110c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011110:	431a      	orrs	r2, r3
 8011112:	6a3b      	ldr	r3, [r7, #32]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	0a1b      	lsrs	r3, r3, #8
 8011118:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801111c:	431a      	orrs	r2, r3
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	68db      	ldr	r3, [r3, #12]
 8011122:	0e1b      	lsrs	r3, r3, #24
 8011124:	4313      	orrs	r3, r2
 8011126:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	461d      	mov	r5, r3
 801112c:	f107 0408 	add.w	r4, r7, #8
 8011130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011134:	6823      	ldr	r3, [r4, #0]
 8011136:	602b      	str	r3, [r5, #0]
    }
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	372c      	adds	r7, #44	@ 0x2c
 801113c:	46bd      	mov	sp, r7
 801113e:	bcb0      	pop	{r4, r5, r7}
 8011140:	4770      	bx	lr
	...

08011144 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011144:	b5b0      	push	{r4, r5, r7, lr}
 8011146:	b096      	sub	sp, #88	@ 0x58
 8011148:	af04      	add	r7, sp, #16
 801114a:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 801114c:	2301      	movs	r3, #1
 801114e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d104      	bne.n	8011160 <xProcessReceivedTCPPacket+0x1c>
 8011156:	f240 21f7 	movw	r1, #759	@ 0x2f7
 801115a:	4898      	ldr	r0, [pc, #608]	@ (80113bc <xProcessReceivedTCPPacket+0x278>)
 801115c:	f7f0 faf4 	bl	8001748 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011164:	2b00      	cmp	r3, #0
 8011166:	d104      	bne.n	8011172 <xProcessReceivedTCPPacket+0x2e>
 8011168:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 801116c:	4893      	ldr	r0, [pc, #588]	@ (80113bc <xProcessReceivedTCPPacket+0x278>)
 801116e:	f7f0 faeb 	bl	8001748 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	4618      	mov	r0, r3
 801117a:	f7f8 fb55 	bl	8009828 <uxIPHeaderSizePacket>
 801117e:	4603      	mov	r3, r0
 8011180:	330e      	adds	r3, #14
 8011182:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801118a:	3314      	adds	r3, #20
 801118c:	429a      	cmp	r2, r3
 801118e:	d202      	bcs.n	8011196 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011190:	2300      	movs	r3, #0
 8011192:	647b      	str	r3, [r7, #68]	@ 0x44
 8011194:	e191      	b.n	80114ba <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011196:	69fb      	ldr	r3, [r7, #28]
 8011198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 801119a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801119c:	4413      	add	r3, r2
 801119e:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80111a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a2:	7b5b      	ldrb	r3, [r3, #13]
 80111a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 80111a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111a8:	885b      	ldrh	r3, [r3, #2]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	021b      	lsls	r3, r3, #8
 80111ae:	b21a      	sxth	r2, r3
 80111b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b2:	885b      	ldrh	r3, [r3, #2]
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	0a1b      	lsrs	r3, r3, #8
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	b21b      	sxth	r3, r3
 80111bc:	4313      	orrs	r3, r2
 80111be:	b21b      	sxth	r3, r3
 80111c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 80111c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	021b      	lsls	r3, r3, #8
 80111ca:	b21a      	sxth	r2, r3
 80111cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ce:	881b      	ldrh	r3, [r3, #0]
 80111d0:	b29b      	uxth	r3, r3
 80111d2:	0a1b      	lsrs	r3, r3, #8
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	b21b      	sxth	r3, r3
 80111d8:	4313      	orrs	r3, r2
 80111da:	b21b      	sxth	r3, r3
 80111dc:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111e2:	f107 0308 	add.w	r3, r7, #8
 80111e6:	4611      	mov	r1, r2
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff ff67 	bl	80110bc <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 80111ee:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 80111f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80111f2:	9303      	str	r3, [sp, #12]
 80111f4:	466c      	mov	r4, sp
 80111f6:	f107 0310 	add.w	r3, r7, #16
 80111fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80111fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011202:	f107 0308 	add.w	r3, r7, #8
 8011206:	cb0c      	ldmia	r3, {r2, r3}
 8011208:	4629      	mov	r1, r5
 801120a:	2000      	movs	r0, #0
 801120c:	f7fe fbc2 	bl	800f994 <pxTCPSocketLookup>
 8011210:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011214:	2b00      	cmp	r3, #0
 8011216:	d008      	beq.n	801122a <xProcessReceivedTCPPacket+0xe6>
 8011218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801121a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801121e:	4618      	mov	r0, r3
 8011220:	f000 fc92 	bl	8011b48 <prvTCPSocketIsActive>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d116      	bne.n	8011258 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801122a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801122c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801122e:	4619      	mov	r1, r3
 8011230:	4863      	ldr	r0, [pc, #396]	@ (80113c0 <xProcessReceivedTCPPacket+0x27c>)
 8011232:	f010 fbb1 	bl	8021998 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011236:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011238:	f003 031f 	and.w	r3, r3, #31
 801123c:	2b10      	cmp	r3, #16
 801123e:	d008      	beq.n	8011252 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011240:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011242:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011246:	2b00      	cmp	r3, #0
 8011248:	d103      	bne.n	8011252 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	4618      	mov	r0, r3
 801124e:	f002 fd0b 	bl	8013c68 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8011252:	2300      	movs	r3, #0
 8011254:	647b      	str	r3, [r7, #68]	@ 0x44
 8011256:	e0d6      	b.n	8011406 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8011258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801125a:	2200      	movs	r2, #0
 801125c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8011260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011262:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011266:	2b01      	cmp	r3, #1
 8011268:	d127      	bne.n	80112ba <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 801126a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801126c:	f003 031f 	and.w	r3, r3, #31
 8011270:	2b02      	cmp	r3, #2
 8011272:	d015      	beq.n	80112a0 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8011274:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011276:	4618      	mov	r0, r3
 8011278:	f003 fbbe 	bl	80149f8 <prvTCPFlagMeaning>
 801127c:	4601      	mov	r1, r0
 801127e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011280:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011282:	4850      	ldr	r0, [pc, #320]	@ (80113c4 <xProcessReceivedTCPPacket+0x280>)
 8011284:	f010 fb88 	bl	8021998 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8011288:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801128a:	f003 0304 	and.w	r3, r3, #4
 801128e:	2b00      	cmp	r3, #0
 8011290:	d103      	bne.n	801129a <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	4618      	mov	r0, r3
 8011296:	f002 fce7 	bl	8013c68 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 801129a:	2300      	movs	r3, #0
 801129c:	647b      	str	r3, [r7, #68]	@ 0x44
 801129e:	e0b2      	b.n	8011406 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	4619      	mov	r1, r3
 80112a4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80112a6:	f001 f999 	bl	80125dc <prvHandleListen>
 80112aa:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 80112ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f040 80a9 	bne.w	8011406 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 80112b4:	2300      	movs	r3, #0
 80112b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80112b8:	e0a5      	b.n	8011406 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 80112ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112bc:	f003 0304 	and.w	r3, r3, #4
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d068      	beq.n	8011396 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 80112c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80112c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80112c8:	4619      	mov	r1, r3
 80112ca:	483f      	ldr	r0, [pc, #252]	@ (80113c8 <xProcessReceivedTCPPacket+0x284>)
 80112cc:	f010 fb64 	bl	8021998 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80112d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d11f      	bne.n	801131a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80112da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	061a      	lsls	r2, r3, #24
 80112e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e2:	689b      	ldr	r3, [r3, #8]
 80112e4:	021b      	lsls	r3, r3, #8
 80112e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80112ea:	431a      	orrs	r2, r3
 80112ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	0a1b      	lsrs	r3, r3, #8
 80112f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80112f6:	431a      	orrs	r2, r3
 80112f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112fa:	689b      	ldr	r3, [r3, #8]
 80112fc:	0e1b      	lsrs	r3, r3, #24
 80112fe:	4313      	orrs	r3, r2
 8011300:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011304:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011308:	3301      	adds	r3, #1
 801130a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801130c:	429a      	cmp	r2, r3
 801130e:	d13f      	bne.n	8011390 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011310:	2100      	movs	r1, #0
 8011312:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011314:	f7ff fb34 	bl	8010980 <vTCPStateChange>
 8011318:	e03a      	b.n	8011390 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801131a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	061a      	lsls	r2, r3, #24
 8011320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	021b      	lsls	r3, r3, #8
 8011326:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801132a:	431a      	orrs	r2, r3
 801132c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	0a1b      	lsrs	r3, r3, #8
 8011332:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011336:	431a      	orrs	r2, r3
 8011338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	0e1b      	lsrs	r3, r3, #24
 801133e:	4313      	orrs	r3, r2
 8011340:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8011342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011344:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8011348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801134a:	429a      	cmp	r2, r3
 801134c:	d104      	bne.n	8011358 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801134e:	2100      	movs	r1, #0
 8011350:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011352:	f7ff fb15 	bl	8010980 <vTCPStateChange>
 8011356:	e01b      	b.n	8011390 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801135a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801135e:	4619      	mov	r1, r3
 8011360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011362:	f003 fc82 	bl	8014c6a <xSequenceGreaterThan>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d011      	beq.n	8011390 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 801136c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801136e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8011372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011374:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8011378:	4413      	add	r3, r2
 801137a:	4619      	mov	r1, r3
 801137c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801137e:	f003 fc5e 	bl	8014c3e <xSequenceLessThan>
 8011382:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8011384:	2b00      	cmp	r3, #0
 8011386:	d003      	beq.n	8011390 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	4618      	mov	r0, r3
 801138c:	f002 fc5f 	bl	8013c4e <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8011390:	2300      	movs	r3, #0
 8011392:	647b      	str	r3, [r7, #68]	@ 0x44
 8011394:	e037      	b.n	8011406 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8011396:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011398:	f003 031f 	and.w	r3, r3, #31
 801139c:	2b02      	cmp	r3, #2
 801139e:	d117      	bne.n	80113d0 <xProcessReceivedTCPPacket+0x28c>
 80113a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80113a6:	2b04      	cmp	r3, #4
 80113a8:	d912      	bls.n	80113d0 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 80113aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80113ac:	4619      	mov	r1, r3
 80113ae:	4807      	ldr	r0, [pc, #28]	@ (80113cc <xProcessReceivedTCPPacket+0x288>)
 80113b0:	f010 faf2 	bl	8021998 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 80113b4:	2300      	movs	r3, #0
 80113b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80113b8:	e025      	b.n	8011406 <xProcessReceivedTCPPacket+0x2c2>
 80113ba:	bf00      	nop
 80113bc:	08025988 	.word	0x08025988
 80113c0:	08025ac0 	.word	0x08025ac0
 80113c4:	08025ae8 	.word	0x08025ae8
 80113c8:	08025b20 	.word	0x08025b20
 80113cc:	08025b44 	.word	0x08025b44
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 80113d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80113d2:	f7f8 fa43 	bl	800985c <uxIPHeaderSizeSocket>
 80113d6:	4603      	mov	r3, r0
 80113d8:	330e      	adds	r3, #14
 80113da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	33a0      	adds	r3, #160	@ 0xa0
 80113e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113e2:	4413      	add	r3, r2
 80113e4:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80113ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ee:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80113f0:	2214      	movs	r2, #20
 80113f2:	4619      	mov	r1, r3
 80113f4:	f010 fcec 	bl	8021dd0 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 80113f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fa:	330d      	adds	r3, #13
 80113fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80113fe:	4413      	add	r3, r2
 8011400:	2210      	movs	r2, #16
 8011402:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011408:	2b00      	cmp	r3, #0
 801140a:	d056      	beq.n	80114ba <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 801140c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801140e:	2b00      	cmp	r3, #0
 8011410:	d104      	bne.n	801141c <xProcessReceivedTCPPacket+0x2d8>
 8011412:	f240 319e 	movw	r1, #926	@ 0x39e
 8011416:	482b      	ldr	r0, [pc, #172]	@ (80114c4 <xProcessReceivedTCPPacket+0x380>)
 8011418:	f7f0 f996 	bl	8001748 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 801141c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801141e:	f7ff fa53 	bl	80108c8 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011424:	7b1b      	ldrb	r3, [r3, #12]
 8011426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801142a:	2b50      	cmp	r3, #80	@ 0x50
 801142c:	d905      	bls.n	801143a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	4619      	mov	r1, r3
 8011432:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011434:	f000 f894 	bl	8011560 <prvCheckOptions>
 8011438:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 801143a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801143c:	2b00      	cmp	r3, #0
 801143e:	d03c      	beq.n	80114ba <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011442:	89db      	ldrh	r3, [r3, #14]
 8011444:	b29b      	uxth	r3, r3
 8011446:	021b      	lsls	r3, r3, #8
 8011448:	b21a      	sxth	r2, r3
 801144a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801144c:	89db      	ldrh	r3, [r3, #14]
 801144e:	b29b      	uxth	r3, r3
 8011450:	0a1b      	lsrs	r3, r3, #8
 8011452:	b29b      	uxth	r3, r3
 8011454:	b21b      	sxth	r3, r3
 8011456:	4313      	orrs	r3, r2
 8011458:	b21b      	sxth	r3, r3
 801145a:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801145c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801145e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011460:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8011464:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011466:	f003 0302 	and.w	r3, r3, #2
 801146a:	2b00      	cmp	r3, #0
 801146c:	d10a      	bne.n	8011484 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801146e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011470:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011476:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 801147a:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801147e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011480:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8011484:	f107 031c 	add.w	r3, r7, #28
 8011488:	4619      	mov	r1, r3
 801148a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801148c:	f000 ff78 	bl	8012380 <prvTCPHandleState>
 8011490:	4603      	mov	r3, r0
 8011492:	2b00      	cmp	r3, #0
 8011494:	dd05      	ble.n	80114a2 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8011496:	f107 031c 	add.w	r3, r7, #28
 801149a:	4619      	mov	r1, r3
 801149c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801149e:	f001 fc6f 	bl	8012d80 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 80114a2:	69fb      	ldr	r3, [r7, #28]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d005      	beq.n	80114b4 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f005 fbcc 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 80114b4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80114b6:	f7ff fc73 	bl	8010da0 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 80114ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80114bc:	4618      	mov	r0, r3
 80114be:	3748      	adds	r7, #72	@ 0x48
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bdb0      	pop	{r4, r5, r7, pc}
 80114c4:	08025988 	.word	0x08025988

080114c8 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b088      	sub	sp, #32
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80114d4:	021b      	lsls	r3, r3, #8
 80114d6:	b21a      	sxth	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80114dc:	0a1b      	lsrs	r3, r3, #8
 80114de:	b29b      	uxth	r3, r3
 80114e0:	b21b      	sxth	r3, r3
 80114e2:	4313      	orrs	r3, r2
 80114e4:	b21b      	sxth	r3, r3
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 80114ea:	2300      	movs	r3, #0
 80114ec:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80114ee:	4b19      	ldr	r3, [pc, #100]	@ (8011554 <xTCPCheckNewClient+0x8c>)
 80114f0:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80114f2:	4b19      	ldr	r3, [pc, #100]	@ (8011558 <xTCPCheckNewClient+0x90>)
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	61fb      	str	r3, [r7, #28]
 80114f8:	e023      	b.n	8011542 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	429a      	cmp	r2, r3
 8011502:	d11b      	bne.n	801153c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011510:	2b06      	cmp	r3, #6
 8011512:	d113      	bne.n	801153c <xTCPCheckNewClient+0x74>
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801151a:	f003 0302 	and.w	r3, r3, #2
 801151e:	b2db      	uxtb	r3, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	d00b      	beq.n	801153c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801152e:	4619      	mov	r1, r3
 8011530:	480a      	ldr	r0, [pc, #40]	@ (801155c <xTCPCheckNewClient+0x94>)
 8011532:	f010 fa31 	bl	8021998 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011536:	2301      	movs	r3, #1
 8011538:	61bb      	str	r3, [r7, #24]
                    break;
 801153a:	e006      	b.n	801154a <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011542:	69fa      	ldr	r2, [r7, #28]
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	429a      	cmp	r2, r3
 8011548:	d1d7      	bne.n	80114fa <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 801154a:	69bb      	ldr	r3, [r7, #24]
    }
 801154c:	4618      	mov	r0, r3
 801154e:	3720      	adds	r7, #32
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20001448 	.word	0x20001448
 8011558:	20001440 	.word	0x20001440
 801155c:	08025b64 	.word	0x08025b64

08011560 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011560:	b580      	push	{r7, lr}
 8011562:	b08c      	sub	sp, #48	@ 0x30
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 801156a:	6838      	ldr	r0, [r7, #0]
 801156c:	f7f8 f95c 	bl	8009828 <uxIPHeaderSizePacket>
 8011570:	4603      	mov	r3, r0
 8011572:	330e      	adds	r3, #14
 8011574:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	4413      	add	r3, r2
 801157e:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8011580:	2301      	movs	r3, #1
 8011582:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	3314      	adds	r3, #20
 8011588:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	3314      	adds	r3, #20
 8011592:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8011594:	693b      	ldr	r3, [r7, #16]
 8011596:	7b1b      	ldrb	r3, [r3, #12]
 8011598:	2b50      	cmp	r3, #80	@ 0x50
 801159a:	d93f      	bls.n	801161c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	7b1b      	ldrb	r3, [r3, #12]
 80115a0:	091b      	lsrs	r3, r3, #4
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	3b05      	subs	r3, #5
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 80115ac:	7bfb      	ldrb	r3, [r7, #15]
 80115ae:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d230      	bcs.n	801161c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	6a3a      	ldr	r2, [r7, #32]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d829      	bhi.n	801161c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	7b5b      	ldrb	r3, [r3, #13]
 80115cc:	f003 0302 	and.w	r3, r3, #2
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d002      	beq.n	80115da <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 80115d4:	2301      	movs	r3, #1
 80115d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115d8:	e001      	b.n	80115de <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 80115da:	2300      	movs	r3, #0
 80115dc:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d018      	beq.n	8011616 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80115e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	6a39      	ldr	r1, [r7, #32]
 80115ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115ec:	f000 f81c 	bl	8011628 <prvSingleStepTCPHeaderOptions>
 80115f0:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	da02      	bge.n	80115fe <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 80115f8:	2300      	movs	r3, #0
 80115fa:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 80115fc:	e00e      	b.n	801161c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d00a      	beq.n	801161a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	6a3a      	ldr	r2, [r7, #32]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011610:	4413      	add	r3, r2
 8011612:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011614:	e7e3      	b.n	80115de <prvCheckOptions+0x7e>
                            break;
 8011616:	bf00      	nop
 8011618:	e000      	b.n	801161c <prvCheckOptions+0xbc>
                            break;
 801161a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801161e:	4618      	mov	r0, r3
 8011620:	3730      	adds	r7, #48	@ 0x30
 8011622:	46bd      	mov	sp, r7
 8011624:	bd80      	pop	{r7, pc}
	...

08011628 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011628:	b580      	push	{r7, lr}
 801162a:	b08a      	sub	sp, #40	@ 0x28
 801162c:	af00      	add	r7, sp, #0
 801162e:	60f8      	str	r0, [r7, #12]
 8011630:	60b9      	str	r1, [r7, #8]
 8011632:	607a      	str	r2, [r7, #4]
 8011634:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011644:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011646:	2300      	movs	r3, #0
 8011648:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	781b      	ldrb	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d102      	bne.n	8011658 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	61fb      	str	r3, [r7, #28]
 8011656:	e0da      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d102      	bne.n	8011666 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8011660:	2301      	movs	r3, #1
 8011662:	61fb      	str	r3, [r7, #28]
 8011664:	e0d3      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	2b01      	cmp	r3, #1
 801166a:	d803      	bhi.n	8011674 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 801166c:	f04f 33ff 	mov.w	r3, #4294967295
 8011670:	61fb      	str	r3, [r7, #28]
 8011672:	e0cc      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	781b      	ldrb	r3, [r3, #0]
 8011678:	2b03      	cmp	r3, #3
 801167a:	d11e      	bne.n	80116ba <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	2b02      	cmp	r3, #2
 8011680:	d904      	bls.n	801168c <prvSingleStepTCPHeaderOptions+0x64>
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	3301      	adds	r3, #1
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	2b03      	cmp	r3, #3
 801168a:	d003      	beq.n	8011694 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 801168c:	f04f 33ff 	mov.w	r3, #4294967295
 8011690:	61fb      	str	r3, [r7, #28]
 8011692:	e0bc      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00c      	beq.n	80116b4 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	3302      	adds	r3, #2
 801169e:	781a      	ldrb	r2, [r3, #0]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80116ac:	f043 0310 	orr.w	r3, r3, #16
 80116b0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 80116b4:	2303      	movs	r3, #3
 80116b6:	61fb      	str	r3, [r7, #28]
 80116b8:	e0a9      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	2b02      	cmp	r3, #2
 80116c0:	d16d      	bne.n	801179e <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	2b03      	cmp	r3, #3
 80116c6:	d904      	bls.n	80116d2 <prvSingleStepTCPHeaderOptions+0xaa>
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	3301      	adds	r3, #1
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	d003      	beq.n	80116da <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 80116d2:	f04f 33ff 	mov.w	r3, #4294967295
 80116d6:	61fb      	str	r3, [r7, #28]
 80116d8:	e099      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	3302      	adds	r3, #2
 80116de:	4618      	mov	r0, r3
 80116e0:	f7f8 fe4f 	bl	800a382 <usChar2u16>
 80116e4:	4603      	mov	r3, r0
 80116e6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80116ee:	461a      	mov	r2, r3
 80116f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d010      	beq.n	8011718 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 80116f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d105      	bne.n	8011708 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 80116fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011700:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011702:	2301      	movs	r3, #1
 8011704:	61bb      	str	r3, [r7, #24]
 8011706:	e007      	b.n	8011718 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801170e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011710:	4619      	mov	r1, r3
 8011712:	4841      	ldr	r0, [pc, #260]	@ (8011818 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011714:	f010 f940 	bl	8021998 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d177      	bne.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011720:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011724:	d202      	bcs.n	801172c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011726:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801172a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011732:	461a      	mov	r2, r3
 8011734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011736:	4293      	cmp	r3, r2
 8011738:	d22e      	bcs.n	8011798 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011740:	f043 0301 	orr.w	r3, r3, #1
 8011744:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801174e:	461a      	mov	r2, r3
 8011750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011752:	4293      	cmp	r3, r2
 8011754:	d207      	bcs.n	8011766 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801175c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801175e:	4619      	mov	r1, r3
 8011760:	482e      	ldr	r0, [pc, #184]	@ (801181c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8011762:	f010 f919 	bl	8021998 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011772:	fb03 f202 	mul.w	r2, r3, r2
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 801177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177c:	b29a      	uxth	r2, r3
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8011784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011786:	b29a      	uxth	r2, r3
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011790:	b29a      	uxth	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8011798:	2304      	movs	r3, #4
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	e037      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	3301      	adds	r3, #1
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 80117ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d904      	bls.n	80117be <prvSingleStepTCPHeaderOptions+0x196>
 80117b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80117b8:	697a      	ldr	r2, [r7, #20]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d203      	bcs.n	80117c6 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 80117be:	f04f 33ff 	mov.w	r3, #4294967295
 80117c2:	61fb      	str	r3, [r7, #28]
 80117c4:	e023      	b.n	801180e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	781b      	ldrb	r3, [r3, #0]
 80117ca:	2b05      	cmp	r3, #5
 80117cc:	d11a      	bne.n	8011804 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 80117ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80117d2:	3b02      	subs	r3, #2
 80117d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	3302      	adds	r3, #2
 80117dc:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 80117de:	e00d      	b.n	80117fc <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	4619      	mov	r1, r3
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f000 f81a 	bl	8011820 <prvReadSackOption>
                            lIndex += 8;
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	3308      	adds	r3, #8
 80117f0:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 80117f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80117f6:	3b08      	subs	r3, #8
 80117f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 80117fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011800:	2b07      	cmp	r3, #7
 8011802:	d8ed      	bhi.n	80117e0 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011804:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011808:	69fa      	ldr	r2, [r7, #28]
 801180a:	4413      	add	r3, r2
 801180c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801180e:	69fb      	ldr	r3, [r7, #28]
    }
 8011810:	4618      	mov	r0, r3
 8011812:	3728      	adds	r7, #40	@ 0x28
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	08025b90 	.word	0x08025b90
 801181c:	08025ba8 	.word	0x08025ba8

08011820 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011820:	b580      	push	{r7, lr}
 8011822:	b08a      	sub	sp, #40	@ 0x28
 8011824:	af02      	add	r7, sp, #8
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 801182c:	68fa      	ldr	r2, [r7, #12]
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	4413      	add	r3, r2
 8011832:	4618      	mov	r0, r3
 8011834:	f7f8 fd8a 	bl	800a34c <ulChar2u32>
 8011838:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	3304      	adds	r3, #4
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	4413      	add	r3, r2
 8011842:	4618      	mov	r0, r3
 8011844:	f7f8 fd82 	bl	800a34c <ulChar2u32>
 8011848:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011850:	69ba      	ldr	r2, [r7, #24]
 8011852:	69f9      	ldr	r1, [r7, #28]
 8011854:	4618      	mov	r0, r3
 8011856:	f004 fba3 	bl	8015fa0 <ulTCPWindowTxSack>
 801185a:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d029      	beq.n	80118ba <prvReadSackOption+0x9a>
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d026      	beq.n	80118ba <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011872:	2300      	movs	r3, #0
 8011874:	9300      	str	r3, [sp, #0]
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	2200      	movs	r2, #0
 801187a:	2100      	movs	r1, #0
 801187c:	f7fe fed9 	bl	8010632 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	f043 0202 	orr.w	r2, r3, #2
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011890:	f003 0302 	and.w	r3, r3, #2
 8011894:	2b00      	cmp	r3, #0
 8011896:	d005      	beq.n	80118a4 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d005      	beq.n	80118ba <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80118b4:	6979      	ldr	r1, [r7, #20]
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 80118ba:	bf00      	nop
 80118bc:	3720      	adds	r7, #32
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}

080118c2 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 80118c2:	b590      	push	{r4, r7, lr}
 80118c4:	b08f      	sub	sp, #60	@ 0x3c
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	6078      	str	r0, [r7, #4]
 80118ca:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f7f7 ffa9 	bl	8009828 <uxIPHeaderSizePacket>
 80118d6:	4603      	mov	r3, r0
 80118d8:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80118da:	4423      	add	r3, r4
 80118dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80118de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7f7 ffa0 	bl	8009828 <uxIPHeaderSizePacket>
 80118e8:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 80118ea:	2300      	movs	r3, #0
 80118ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80118f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f2:	7b1b      	ldrb	r3, [r3, #12]
 80118f4:	089b      	lsrs	r3, r3, #2
 80118f6:	b2db      	uxtb	r3, r3
 80118f8:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80118fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011900:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011904:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801190a:	69f9      	ldr	r1, [r7, #28]
 801190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801190e:	440b      	add	r3, r1
 8011910:	330e      	adds	r3, #14
 8011912:	441a      	add	r2, r3
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801191c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801191e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011920:	3b0e      	subs	r3, #14
 8011922:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011928:	899b      	ldrh	r3, [r3, #12]
 801192a:	b29b      	uxth	r3, r3
 801192c:	2b08      	cmp	r3, #8
 801192e:	d004      	beq.n	801193a <prvCheckRxData+0x78>
 8011930:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011934:	4293      	cmp	r3, r2
 8011936:	d015      	beq.n	8011964 <prvCheckRxData+0xa2>
 8011938:	e02c      	b.n	8011994 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801193e:	330e      	adds	r3, #14
 8011940:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	885b      	ldrh	r3, [r3, #2]
 8011946:	b29b      	uxth	r3, r3
 8011948:	021b      	lsls	r3, r3, #8
 801194a:	b21a      	sxth	r2, r3
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	885b      	ldrh	r3, [r3, #2]
 8011950:	b29b      	uxth	r3, r3
 8011952:	0a1b      	lsrs	r3, r3, #8
 8011954:	b29b      	uxth	r3, r3
 8011956:	b21b      	sxth	r3, r3
 8011958:	4313      	orrs	r3, r2
 801195a:	b21b      	sxth	r3, r3
 801195c:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801195e:	8afb      	ldrh	r3, [r7, #22]
 8011960:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011962:	e01a      	b.n	801199a <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011968:	330e      	adds	r3, #14
 801196a:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	889b      	ldrh	r3, [r3, #4]
 8011970:	b29b      	uxth	r3, r3
 8011972:	021b      	lsls	r3, r3, #8
 8011974:	b21a      	sxth	r2, r3
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	889b      	ldrh	r3, [r3, #4]
 801197a:	b29b      	uxth	r3, r3
 801197c:	0a1b      	lsrs	r3, r3, #8
 801197e:	b29b      	uxth	r3, r3
 8011980:	b21b      	sxth	r3, r3
 8011982:	4313      	orrs	r3, r2
 8011984:	b21b      	sxth	r3, r3
 8011986:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011988:	8afb      	ldrh	r3, [r7, #22]
 801198a:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 801198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801198e:	3328      	adds	r3, #40	@ 0x28
 8011990:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011992:	e002      	b.n	801199a <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011994:	2300      	movs	r3, #0
 8011996:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011998:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 801199a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801199c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801199e:	429a      	cmp	r2, r3
 80119a0:	dd01      	ble.n	80119a6 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 80119a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119a4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 80119a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	4413      	add	r3, r2
 80119ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ae:	429a      	cmp	r2, r3
 80119b0:	dd06      	ble.n	80119c0 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 80119b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	4413      	add	r3, r2
 80119b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80119be:	e001      	b.n	80119c4 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 80119c0:	2300      	movs	r3, #0
 80119c2:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 80119c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119c6:	7b5b      	ldrb	r3, [r3, #13]
 80119c8:	f003 0320 	and.w	r3, r3, #32
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d01c      	beq.n	8011a0a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 80119d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d2:	8a5b      	ldrh	r3, [r3, #18]
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	021b      	lsls	r3, r3, #8
 80119d8:	b21a      	sxth	r2, r3
 80119da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119dc:	8a5b      	ldrh	r3, [r3, #18]
 80119de:	b29b      	uxth	r3, r3
 80119e0:	0a1b      	lsrs	r3, r3, #8
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	b21b      	sxth	r3, r3
 80119e6:	4313      	orrs	r3, r2
 80119e8:	b21b      	sxth	r3, r3
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	441a      	add	r2, r3
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80119fa:	68f9      	ldr	r1, [r7, #12]
 80119fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80119fe:	f7f8 fc51 	bl	800a2a4 <FreeRTOS_min_int32>
 8011a02:	4602      	mov	r2, r0
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	1a9b      	subs	r3, r3, r2
 8011a08:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 8011a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	373c      	adds	r7, #60	@ 0x3c
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd90      	pop	{r4, r7, pc}

08011a14 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b092      	sub	sp, #72	@ 0x48
 8011a18:	af02      	add	r7, sp, #8
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
 8011a20:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f7f7 ff00 	bl	8009828 <uxIPHeaderSizePacket>
 8011a28:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a30:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011a32:	4413      	add	r3, r2
 8011a34:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a38:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011a40:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011a42:	2300      	movs	r3, #0
 8011a44:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	061a      	lsls	r2, r3, #24
 8011a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	021b      	lsls	r3, r3, #8
 8011a5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	0a1b      	lsrs	r3, r3, #8
 8011a66:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011a6a:	431a      	orrs	r2, r3
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	0e1b      	lsrs	r3, r3, #24
 8011a72:	4313      	orrs	r3, r2
 8011a74:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d057      	beq.n	8011b2c <prvStoreRxData+0x118>
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011a82:	2b03      	cmp	r3, #3
 8011a84:	d952      	bls.n	8011b2c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d007      	beq.n	8011aa4 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fe fc89 	bl	80103b2 <uxStreamBufferGetSpace>
 8011aa0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011aa2:	e003      	b.n	8011aac <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 8011aac:	f107 0310 	add.w	r3, r7, #16
 8011ab0:	9300      	str	r3, [sp, #0]
 8011ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ab6:	69f9      	ldr	r1, [r7, #28]
 8011ab8:	6a38      	ldr	r0, [r7, #32]
 8011aba:	f003 fd45 	bl	8015548 <lTCPWindowRxCheck>
 8011abe:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	db20      	blt.n	8011b08 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d007      	beq.n	8011adc <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	4413      	add	r3, r2
 8011ada:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8011adc:	69b9      	ldr	r1, [r7, #24]
 8011ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7fe f8d2 	bl	800fc8c <lTCPAddRxdata>
 8011ae8:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 8011aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d00a      	beq.n	8011b08 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011af4:	6979      	ldr	r1, [r7, #20]
 8011af6:	4813      	ldr	r0, [pc, #76]	@ (8011b44 <prvStoreRxData+0x130>)
 8011af8:	f00f ff4e 	bl	8021998 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f002 f8b3 	bl	8013c68 <prvTCPSendReset>
                    xResult = -1;
 8011b02:	f04f 33ff 	mov.w	r3, #4294967295
 8011b06:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d113      	bne.n	8011b36 <prvStoreRxData+0x122>
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00f      	beq.n	8011b36 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	68f8      	ldr	r0, [r7, #12]
 8011b20:	f7fe f8b4 	bl	800fc8c <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011b24:	6a3b      	ldr	r3, [r7, #32]
 8011b26:	2200      	movs	r2, #0
 8011b28:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 8011b2a:	e004      	b.n	8011b36 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8011b34:	e000      	b.n	8011b38 <prvStoreRxData+0x124>
        {
 8011b36:	bf00      	nop
        }

        return xResult;
 8011b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3740      	adds	r7, #64	@ 0x40
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	08025bc0 	.word	0x08025bc0

08011b48 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 8011b52:	79fb      	ldrb	r3, [r7, #7]
 8011b54:	2b0b      	cmp	r3, #11
 8011b56:	bf8c      	ite	hi
 8011b58:	2201      	movhi	r2, #1
 8011b5a:	2200      	movls	r2, #0
 8011b5c:	b2d2      	uxtb	r2, r2
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	d10f      	bne.n	8011b82 <prvTCPSocketIsActive+0x3a>
 8011b62:	f640 3281 	movw	r2, #2945	@ 0xb81
 8011b66:	fa22 f303 	lsr.w	r3, r2, r3
 8011b6a:	f003 0301 	and.w	r3, r3, #1
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	bf14      	ite	ne
 8011b72:	2301      	movne	r3, #1
 8011b74:	2300      	moveq	r3, #0
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d002      	beq.n	8011b82 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	60fb      	str	r3, [r7, #12]
                break;
 8011b80:	e002      	b.n	8011b88 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011b82:	2301      	movs	r3, #1
 8011b84:	60fb      	str	r3, [r7, #12]
                break;
 8011b86:	bf00      	nop
        }

        return xResult;
 8011b88:	68fb      	ldr	r3, [r7, #12]
    }
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3714      	adds	r7, #20
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b94:	4770      	bx	lr
	...

08011b98 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b9a:	b089      	sub	sp, #36	@ 0x24
 8011b9c:	af02      	add	r7, sp, #8
 8011b9e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ba6:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011ba8:	7cfb      	ldrb	r3, [r7, #19]
 8011baa:	2b08      	cmp	r3, #8
 8011bac:	d00b      	beq.n	8011bc6 <prvTCPStatusAgeCheck+0x2e>
 8011bae:	2b08      	cmp	r3, #8
 8011bb0:	dc0c      	bgt.n	8011bcc <prvTCPStatusAgeCheck+0x34>
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	dc02      	bgt.n	8011bbc <prvTCPStatusAgeCheck+0x24>
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da05      	bge.n	8011bc6 <prvTCPStatusAgeCheck+0x2e>
 8011bba:	e007      	b.n	8011bcc <prvTCPStatusAgeCheck+0x34>
 8011bbc:	2b05      	cmp	r3, #5
 8011bbe:	d105      	bne.n	8011bcc <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	617b      	str	r3, [r7, #20]
                    break;
 8011bc4:	e005      	b.n	8011bd2 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	617b      	str	r3, [r7, #20]
                    break;
 8011bca:	e002      	b.n	8011bd2 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8011bcc:	2301      	movs	r3, #1
 8011bce:	617b      	str	r3, [r7, #20]
                    break;
 8011bd0:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d032      	beq.n	8011c3e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011bd8:	f7f2 fa8e 	bl	80040f8 <xTaskGetTickCount>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011be4:	1ad3      	subs	r3, r2, r3
 8011be6:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	d925      	bls.n	8011c3e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011bf6:	461d      	mov	r5, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c02:	461e      	mov	r6, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 fdca 	bl	80127a4 <FreeRTOS_GetTCPStateName>
 8011c10:	4603      	mov	r3, r0
 8011c12:	9300      	str	r3, [sp, #0]
 8011c14:	4633      	mov	r3, r6
 8011c16:	4622      	mov	r2, r4
 8011c18:	4629      	mov	r1, r5
 8011c1a:	480b      	ldr	r0, [pc, #44]	@ (8011c48 <prvTCPStatusAgeCheck+0xb0>)
 8011c1c:	f00f febc 	bl	8021998 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011c20:	2108      	movs	r1, #8
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7fe feac 	bl	8010980 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011c2e:	f003 0304 	and.w	r3, r3, #4
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 8011c3e:	697b      	ldr	r3, [r7, #20]
        }
 8011c40:	4618      	mov	r0, r3
 8011c42:	371c      	adds	r7, #28
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c48:	08025be8 	.word	0x08025be8

08011c4c <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011c4c:	b5b0      	push	{r4, r5, r7, lr}
 8011c4e:	b08a      	sub	sp, #40	@ 0x28
 8011c50:	af02      	add	r7, sp, #8
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011c5a:	6838      	ldr	r0, [r7, #0]
 8011c5c:	f7f7 fde4 	bl	8009828 <uxIPHeaderSizePacket>
 8011c60:	4603      	mov	r3, r0
 8011c62:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011c64:	4423      	add	r3, r4
 8011c66:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	74fb      	strb	r3, [r7, #19]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	7b5b      	ldrb	r3, [r3, #13]
 8011c74:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011c7c:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	061a      	lsls	r2, r3, #24
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	689b      	ldr	r3, [r3, #8]
 8011c8c:	021b      	lsls	r3, r3, #8
 8011c8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011c92:	431a      	orrs	r2, r3
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	689b      	ldr	r3, [r3, #8]
 8011c98:	0a1b      	lsrs	r3, r3, #8
 8011c9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011c9e:	431a      	orrs	r2, r3
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	689b      	ldr	r3, [r3, #8]
 8011ca4:	0e1b      	lsrs	r3, r3, #24
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8011caa:	7cbb      	ldrb	r3, [r7, #18]
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d004      	beq.n	8011cbe <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	695b      	ldr	r3, [r3, #20]
 8011cb8:	1c5a      	adds	r2, r3, #1
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d10b      	bne.n	8011ce6 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	6a1a      	ldr	r2, [r3, #32]
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011cd6:	687a      	ldr	r2, [r7, #4]
 8011cd8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011cdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ce0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011ce4:	e00c      	b.n	8011d00 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cea:	3301      	adds	r3, #1
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d106      	bne.n	8011d00 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011cf8:	f043 0301 	orr.w	r3, r3, #1
 8011cfc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011d06:	f003 0301 	and.w	r3, r3, #1
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d10b      	bne.n	8011d28 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	2211      	movs	r2, #17
 8011d1c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8011d1e:	210a      	movs	r1, #10
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7fe fe2d 	bl	8010980 <vTCPStateChange>
 8011d26:	e023      	b.n	8011d70 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d2c:	1c5a      	adds	r2, r3, #1
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011d38:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d103      	bne.n	8011d4a <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2200      	movs	r2, #0
 8011d46:	735a      	strb	r2, [r3, #13]
 8011d48:	e012      	b.n	8011d70 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011d50:	f003 0302 	and.w	r3, r3, #2
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d103      	bne.n	8011d62 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2210      	movs	r2, #16
 8011d5e:	735a      	strb	r2, [r3, #13]
 8011d60:	e002      	b.n	8011d68 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	2200      	movs	r2, #0
 8011d66:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011d68:	2108      	movs	r1, #8
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7fe fe08 	bl	8010980 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6a1a      	ldr	r2, [r3, #32]
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	7b5b      	ldrb	r3, [r3, #13]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00d      	beq.n	8011d9c <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7f7 fd6b 	bl	800985c <uxIPHeaderSizeSocket>
 8011d86:	4603      	mov	r3, r0
 8011d88:	b2da      	uxtb	r2, r3
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011d90:	4413      	add	r3, r2
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	3314      	adds	r3, #20
 8011d96:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011d98:	7cfb      	ldrb	r3, [r7, #19]
 8011d9a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011da2:	3314      	adds	r3, #20
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8011dae:	4b14      	ldr	r3, [pc, #80]	@ (8011e00 <prvTCPHandleFin+0x1b4>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d01f      	beq.n	8011df6 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	69db      	ldr	r3, [r3, #28]
 8011dba:	68ba      	ldr	r2, [r7, #8]
 8011dbc:	1ad0      	subs	r0, r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	6a1a      	ldr	r2, [r3, #32]
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	69db      	ldr	r3, [r3, #28]
 8011dc6:	1ad4      	subs	r4, r2, r3
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	1ad5      	subs	r5, r2, r3
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	69db      	ldr	r3, [r3, #28]
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	6911      	ldr	r1, [r2, #16]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	68d2      	ldr	r2, [r2, #12]
 8011de4:	1a8a      	subs	r2, r1, r2
 8011de6:	9201      	str	r2, [sp, #4]
 8011de8:	9300      	str	r3, [sp, #0]
 8011dea:	462b      	mov	r3, r5
 8011dec:	4622      	mov	r2, r4
 8011dee:	4601      	mov	r1, r0
 8011df0:	4804      	ldr	r0, [pc, #16]	@ (8011e04 <prvTCPHandleFin+0x1b8>)
 8011df2:	f00f fdd1 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011df6:	69fb      	ldr	r3, [r7, #28]
    }
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3720      	adds	r7, #32
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8011e00:	20001484 	.word	0x20001484
 8011e04:	08025c20 	.word	0x08025c20

08011e08 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011e08:	b590      	push	{r4, r7, lr}
 8011e0a:	b09b      	sub	sp, #108	@ 0x6c
 8011e0c:	af02      	add	r7, sp, #8
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f7f7 fd1e 	bl	800985c <uxIPHeaderSizeSocket>
 8011e20:	4603      	mov	r3, r0
 8011e22:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011e24:	4423      	add	r3, r4
 8011e26:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e2a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e36:	7b5b      	ldrb	r3, [r3, #13]
 8011e38:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	061a      	lsls	r2, r3, #24
 8011e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	021b      	lsls	r3, r3, #8
 8011e48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011e4c:	431a      	orrs	r2, r3
 8011e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	0a1b      	lsrs	r3, r3, #8
 8011e54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011e58:	431a      	orrs	r2, r3
 8011e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	0e1b      	lsrs	r3, r3, #24
 8011e60:	4313      	orrs	r3, r2
 8011e62:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8011e6c:	2310      	movs	r3, #16
 8011e6e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8011e72:	2317      	movs	r3, #23
 8011e74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011e7e:	2b02      	cmp	r3, #2
 8011e80:	d105      	bne.n	8011e8e <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011e82:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8011e86:	f043 0302 	orr.w	r3, r3, #2
 8011e8a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8011e8e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011e92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011e96:	4013      	ands	r3, r2
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d044      	beq.n	8011f2c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ea8:	2b04      	cmp	r3, #4
 8011eaa:	d101      	bne.n	8011eb0 <prvHandleSynReceived+0xa8>
 8011eac:	4977      	ldr	r1, [pc, #476]	@ (801208c <prvHandleSynReceived+0x284>)
 8011eae:	e000      	b.n	8011eb2 <prvHandleSynReceived+0xaa>
 8011eb0:	4977      	ldr	r1, [pc, #476]	@ (8012090 <prvHandleSynReceived+0x288>)
 8011eb2:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011eb6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011eba:	4876      	ldr	r0, [pc, #472]	@ (8012094 <prvHandleSynReceived+0x28c>)
 8011ebc:	f00f fd6c 	bl	8021998 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011ec0:	2108      	movs	r1, #8
 8011ec2:	68f8      	ldr	r0, [r7, #12]
 8011ec4:	f7fe fd5c 	bl	8010980 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8011ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eca:	689b      	ldr	r3, [r3, #8]
 8011ecc:	061a      	lsls	r2, r3, #24
 8011ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ed0:	689b      	ldr	r3, [r3, #8]
 8011ed2:	021b      	lsls	r3, r3, #8
 8011ed4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ed8:	431a      	orrs	r2, r3
 8011eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011edc:	689b      	ldr	r3, [r3, #8]
 8011ede:	0a1b      	lsrs	r3, r3, #8
 8011ee0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ee4:	431a      	orrs	r2, r3
 8011ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ee8:	689b      	ldr	r3, [r3, #8]
 8011eea:	0e1b      	lsrs	r3, r3, #24
 8011eec:	431a      	orrs	r2, r3
 8011eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ef6:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011efa:	7b5b      	ldrb	r3, [r3, #13]
 8011efc:	f043 0304 	orr.w	r3, r3, #4
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f04:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011f06:	68f8      	ldr	r0, [r7, #12]
 8011f08:	f7f7 fca8 	bl	800985c <uxIPHeaderSizeSocket>
 8011f0c:	4602      	mov	r2, r0
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	4413      	add	r3, r2
 8011f12:	3314      	adds	r3, #20
 8011f14:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f18:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011f1a:	683b      	ldr	r3, [r7, #0]
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	3314      	adds	r3, #20
 8011f20:	b2db      	uxtb	r3, r3
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f28:	731a      	strb	r2, [r3, #12]
 8011f2a:	e0aa      	b.n	8012082 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011f32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f34:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f3e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f48:	2b02      	cmp	r3, #2
 8011f4a:	d12e      	bne.n	8011faa <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011f4c:	68f8      	ldr	r0, [r7, #12]
 8011f4e:	f7f7 fc85 	bl	800985c <uxIPHeaderSizeSocket>
 8011f52:	4603      	mov	r3, r0
 8011f54:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8011f56:	33a0      	adds	r3, #160	@ 0xa0
 8011f58:	68fa      	ldr	r2, [r7, #12]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	330a      	adds	r3, #10
 8011f5e:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f62:	2210      	movs	r2, #16
 8011f64:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f68:	2210      	movs	r2, #16
 8011f6a:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011f80:	f003 f8ec 	bl	801515c <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f86:	1c5a      	adds	r2, r3, #1
 8011f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f8a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f92:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f96:	6a1b      	ldr	r3, [r3, #32]
 8011f98:	1c5a      	adds	r2, r3, #1
 8011f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f9c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8011f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fa2:	1c5a      	adds	r2, r3, #1
 8011fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fa6:	635a      	str	r2, [r3, #52]	@ 0x34
 8011fa8:	e005      	b.n	8011fb6 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fb4:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb8:	69db      	ldr	r3, [r3, #28]
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	7a1b      	ldrb	r3, [r3, #8]
 8011fc4:	f003 0301 	and.w	r3, r3, #1
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d001      	beq.n	8011fd2 <prvHandleSynReceived+0x1ca>
 8011fce:	200a      	movs	r0, #10
 8011fd0:	e000      	b.n	8011fd4 <prvHandleSynReceived+0x1cc>
 8011fd2:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011fda:	f107 0210 	add.w	r2, r7, #16
 8011fde:	2328      	movs	r3, #40	@ 0x28
 8011fe0:	f7fc fec0 	bl	800ed64 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d101      	bne.n	8011ff2 <prvHandleSynReceived+0x1ea>
 8011fee:	492a      	ldr	r1, [pc, #168]	@ (8012098 <prvHandleSynReceived+0x290>)
 8011ff0:	e000      	b.n	8011ff4 <prvHandleSynReceived+0x1ec>
 8011ff2:	492a      	ldr	r1, [pc, #168]	@ (801209c <prvHandleSynReceived+0x294>)
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011ff8:	461c      	mov	r4, r3
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012000:	461a      	mov	r2, r3
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012008:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801200c:	b2db      	uxtb	r3, r3
 801200e:	4618      	mov	r0, r3
 8012010:	f107 0310 	add.w	r3, r7, #16
 8012014:	9001      	str	r0, [sp, #4]
 8012016:	9200      	str	r2, [sp, #0]
 8012018:	4622      	mov	r2, r4
 801201a:	4821      	ldr	r0, [pc, #132]	@ (80120a0 <prvHandleSynReceived+0x298>)
 801201c:	f00f fcbc 	bl	8021998 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012026:	2b02      	cmp	r3, #2
 8012028:	d002      	beq.n	8012030 <prvHandleSynReceived+0x228>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d014      	beq.n	801205a <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012032:	2210      	movs	r2, #16
 8012034:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012036:	68f8      	ldr	r0, [r7, #12]
 8012038:	f7f7 fc10 	bl	800985c <uxIPHeaderSizeSocket>
 801203c:	4602      	mov	r2, r0
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	4413      	add	r3, r2
 8012042:	3314      	adds	r3, #20
 8012044:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012048:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	b2db      	uxtb	r3, r3
 801204e:	3314      	adds	r3, #20
 8012050:	b2db      	uxtb	r3, r3
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	b2da      	uxtb	r2, r3
 8012056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012058:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012060:	f003 0310 	and.w	r3, r3, #16
 8012064:	b2db      	uxtb	r3, r3
 8012066:	2b00      	cmp	r3, #0
 8012068:	d107      	bne.n	801207a <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2200      	movs	r2, #0
 801206e:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 801207a:	2105      	movs	r1, #5
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f7fe fc7f 	bl	8010980 <vTCPStateChange>
        }

        return xSendLength;
 8012082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012084:	4618      	mov	r0, r3
 8012086:	3764      	adds	r7, #100	@ 0x64
 8012088:	46bd      	mov	sp, r7
 801208a:	bd90      	pop	{r4, r7, pc}
 801208c:	08025c60 	.word	0x08025c60
 8012090:	08025c70 	.word	0x08025c70
 8012094:	08025c80 	.word	0x08025c80
 8012098:	08025ca4 	.word	0x08025ca4
 801209c:	08025cac 	.word	0x08025cac
 80120a0:	08025cb4 	.word	0x08025cb4

080120a4 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 80120a4:	b590      	push	{r4, r7, lr}
 80120a6:	b097      	sub	sp, #92	@ 0x5c
 80120a8:	af02      	add	r7, sp, #8
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
 80120b0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80120b8:	68f8      	ldr	r0, [r7, #12]
 80120ba:	f7f7 fbcf 	bl	800985c <uxIPHeaderSizeSocket>
 80120be:	4603      	mov	r3, r0
 80120c0:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80120c2:	4423      	add	r3, r4
 80120c4:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80120c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120c8:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80120d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80120d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120d4:	7b5b      	ldrb	r3, [r3, #13]
 80120d6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 80120da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	061a      	lsls	r2, r3, #24
 80120e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	021b      	lsls	r3, r3, #8
 80120e6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120ea:	431a      	orrs	r2, r3
 80120ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	0a1b      	lsrs	r3, r3, #8
 80120f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120f6:	431a      	orrs	r2, r3
 80120f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	0e1b      	lsrs	r3, r3, #24
 80120fe:	4313      	orrs	r3, r2
 8012100:	637b      	str	r3, [r7, #52]	@ 0x34
 8012102:	2300      	movs	r3, #0
 8012104:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012106:	2300      	movs	r3, #0
 8012108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801210a:	2300      	movs	r3, #0
 801210c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801210e:	2300      	movs	r3, #0
 8012110:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012114:	89db      	ldrh	r3, [r3, #14]
 8012116:	b29b      	uxth	r3, r3
 8012118:	021b      	lsls	r3, r3, #8
 801211a:	b21a      	sxth	r2, r3
 801211c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801211e:	89db      	ldrh	r3, [r3, #14]
 8012120:	b29b      	uxth	r3, r3
 8012122:	0a1b      	lsrs	r3, r3, #8
 8012124:	b29b      	uxth	r3, r3
 8012126:	b21b      	sxth	r3, r3
 8012128:	4313      	orrs	r3, r2
 801212a:	b21b      	sxth	r3, r3
 801212c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801212e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012142:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 801214c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012150:	f003 0310 	and.w	r3, r3, #16
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 8106 	beq.w	8012366 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 801215a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801215c:	689b      	ldr	r3, [r3, #8]
 801215e:	061a      	lsls	r2, r3, #24
 8012160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	021b      	lsls	r3, r3, #8
 8012166:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801216a:	431a      	orrs	r2, r3
 801216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801216e:	689b      	ldr	r3, [r3, #8]
 8012170:	0a1b      	lsrs	r3, r3, #8
 8012172:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012176:	431a      	orrs	r2, r3
 8012178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	0e1b      	lsrs	r3, r3, #24
 801217e:	4313      	orrs	r3, r2
 8012180:	4619      	mov	r1, r3
 8012182:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012184:	f003 feee 	bl	8015f64 <ulTCPWindowTxAck>
 8012188:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d02c      	beq.n	80121ee <prvHandleEstablished+0x14a>
 8012194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012196:	2b00      	cmp	r3, #0
 8012198:	d029      	beq.n	80121ee <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80121a0:	2300      	movs	r3, #0
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a6:	2200      	movs	r2, #0
 80121a8:	2100      	movs	r1, #0
 80121aa:	f7fe fa42 	bl	8010632 <uxStreamBufferGet>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d01c      	beq.n	80121ee <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	f043 0202 	orr.w	r2, r3, #2
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80121c4:	f003 0302 	and.w	r3, r3, #2
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d005      	beq.n	80121d8 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d005      	beq.n	80121ee <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80121e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 80121f8:	68f8      	ldr	r0, [r7, #12]
 80121fa:	f001 fb13 	bl	8013824 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80121fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012200:	6a1a      	ldr	r2, [r3, #32]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801220e:	f003 0320 	and.w	r3, r3, #32
 8012212:	b2db      	uxtb	r3, r3
 8012214:	2b00      	cmp	r3, #0
 8012216:	d105      	bne.n	8012224 <prvHandleEstablished+0x180>
 8012218:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801221c:	f003 0301 	and.w	r3, r3, #1
 8012220:	2b00      	cmp	r3, #0
 8012222:	d06b      	beq.n	80122fc <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012224:	2301      	movs	r3, #1
 8012226:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012232:	b2db      	uxtb	r3, r3
 8012234:	2b00      	cmp	r3, #0
 8012236:	d13a      	bne.n	80122ae <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012238:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801223a:	f002 fe87 	bl	8014f4c <xTCPWindowRxEmpty>
 801223e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012240:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012242:	f003 fafd 	bl	8015840 <xTCPWindowTxDone>
 8012246:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8012248:	6a3b      	ldr	r3, [r7, #32]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d002      	beq.n	8012254 <prvHandleEstablished+0x1b0>
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d10f      	bne.n	8012274 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012258:	4619      	mov	r1, r3
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012260:	461a      	mov	r2, r3
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	6a3b      	ldr	r3, [r7, #32]
 8012268:	4841      	ldr	r0, [pc, #260]	@ (8012370 <prvHandleEstablished+0x2cc>)
 801226a:	f00f fb95 	bl	8021998 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801226e:	2300      	movs	r3, #0
 8012270:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012272:	e01c      	b.n	80122ae <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8012274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	441a      	add	r2, r3
 801227a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8012282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012284:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	2b01      	cmp	r3, #1
 801228a:	dd10      	ble.n	80122ae <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 801228c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801228e:	691a      	ldr	r2, [r3, #16]
 8012290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012292:	68db      	ldr	r3, [r3, #12]
 8012294:	1ad1      	subs	r1, r2, r3
 8012296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012298:	699a      	ldr	r2, [r3, #24]
 801229a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	460a      	mov	r2, r1
 80122a2:	69b9      	ldr	r1, [r7, #24]
 80122a4:	4833      	ldr	r0, [pc, #204]	@ (8012374 <prvHandleEstablished+0x2d0>)
 80122a6:	f00f fb77 	bl	8021998 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 80122aa:	2300      	movs	r3, #0
 80122ac:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 80122ae:	4b32      	ldr	r3, [pc, #200]	@ (8012378 <prvHandleEstablished+0x2d4>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	dd11      	ble.n	80122da <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80122bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80122be:	1ad1      	subs	r1, r2, r3
 80122c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122c2:	6a1a      	ldr	r2, [r3, #32]
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80122ca:	1ad3      	subs	r3, r2, r3
 80122cc:	9300      	str	r3, [sp, #0]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	460a      	mov	r2, r1
 80122d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80122d4:	4829      	ldr	r0, [pc, #164]	@ (801237c <prvHandleEstablished+0x2d8>)
 80122d6:	f00f fb5f 	bl	8021998 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 80122da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00d      	beq.n	80122fc <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 80122e0:	68fa      	ldr	r2, [r7, #12]
 80122e2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80122e6:	f043 0320 	orr.w	r3, r3, #32
 80122ea:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	4619      	mov	r1, r3
 80122f4:	68f8      	ldr	r0, [r7, #12]
 80122f6:	f7ff fca9 	bl	8011c4c <prvTCPHandleFin>
 80122fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 80122fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d131      	bne.n	8012366 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012304:	2210      	movs	r2, #16
 8012306:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d01d      	beq.n	801234a <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f7f7 faa4 	bl	800985c <uxIPHeaderSizeSocket>
 8012314:	4602      	mov	r2, r0
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	4413      	add	r3, r2
 801231a:	3314      	adds	r3, #20
 801231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801231e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012320:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	b2db      	uxtb	r3, r3
 8012326:	3314      	adds	r3, #20
 8012328:	b2db      	uxtb	r3, r3
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	b2da      	uxtb	r2, r3
 801232e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012330:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801233c:	b2db      	uxtb	r3, r3
 801233e:	2b00      	cmp	r3, #0
 8012340:	d003      	beq.n	801234a <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012348:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d10a      	bne.n	8012366 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012350:	683a      	ldr	r2, [r7, #0]
 8012352:	68b9      	ldr	r1, [r7, #8]
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f001 f8a1 	bl	801349c <prvTCPPrepareSend>
 801235a:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2b00      	cmp	r3, #0
 8012360:	dd01      	ble.n	8012366 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8012366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012368:	4618      	mov	r0, r3
 801236a:	3754      	adds	r7, #84	@ 0x54
 801236c:	46bd      	mov	sp, r7
 801236e:	bd90      	pop	{r4, r7, pc}
 8012370:	08025ce8 	.word	0x08025ce8
 8012374:	08025d14 	.word	0x08025d14
 8012378:	20001484 	.word	0x20001484
 801237c:	08025d48 	.word	0x08025d48

08012380 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012380:	b590      	push	{r4, r7, lr}
 8012382:	b08f      	sub	sp, #60	@ 0x3c
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	4618      	mov	r0, r3
 8012396:	f7f7 fa47 	bl	8009828 <uxIPHeaderSizePacket>
 801239a:	4603      	mov	r3, r0
 801239c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801239e:	4423      	add	r3, r4
 80123a0:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80123a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 80123a6:	2300      	movs	r3, #0
 80123a8:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80123aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	061a      	lsls	r2, r3, #24
 80123b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	021b      	lsls	r3, r3, #8
 80123b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80123ba:	431a      	orrs	r2, r3
 80123bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	0a1b      	lsrs	r3, r3, #8
 80123c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80123c6:	431a      	orrs	r2, r3
 80123c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	0e1b      	lsrs	r3, r3, #24
 80123ce:	4313      	orrs	r3, r2
 80123d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 80123d2:	2300      	movs	r3, #0
 80123d4:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80123d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d8:	7b5b      	ldrb	r3, [r3, #13]
 80123da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80123e4:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 80123e6:	2300      	movs	r3, #0
 80123e8:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f107 0208 	add.w	r2, r7, #8
 80123f2:	4611      	mov	r1, r2
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fa64 	bl	80118c2 <prvCheckRxData>
 80123fa:	4603      	mov	r3, r0
 80123fc:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012404:	2b04      	cmp	r3, #4
 8012406:	d90c      	bls.n	8012422 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	691a      	ldr	r2, [r3, #16]
 801240c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801240e:	3301      	adds	r3, #1
 8012410:	429a      	cmp	r2, r3
 8012412:	d106      	bne.n	8012422 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801241a:	f043 0301 	orr.w	r3, r3, #1
 801241e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	441a      	add	r2, r3
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	699b      	ldr	r3, [r3, #24]
 801242c:	1ad3      	subs	r3, r2, r3
 801242e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	dd04      	ble.n	8012440 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	441a      	add	r2, r3
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8012440:	68b9      	ldr	r1, [r7, #8]
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f7ff fae3 	bl	8011a14 <prvStoreRxData>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	da03      	bge.n	801245c <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8012454:	f04f 33ff 	mov.w	r3, #4294967295
 8012458:	637b      	str	r3, [r7, #52]	@ 0x34
 801245a:	e0ae      	b.n	80125ba <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 801245c:	683b      	ldr	r3, [r7, #0]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4619      	mov	r1, r3
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f001 fa0c 	bl	8013880 <prvSetOptions>
 8012468:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012470:	2b04      	cmp	r3, #4
 8012472:	d10c      	bne.n	801248e <prvTCPHandleState+0x10e>
 8012474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012478:	f003 031f 	and.w	r3, r3, #31
 801247c:	2b02      	cmp	r3, #2
 801247e:	d106      	bne.n	801248e <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8012480:	4855      	ldr	r0, [pc, #340]	@ (80125d8 <prvTCPHandleState+0x258>)
 8012482:	f00f fa89 	bl	8021998 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8012486:	2103      	movs	r1, #3
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f7fe fa79 	bl	8010980 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801248e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012492:	f003 0301 	and.w	r3, r3, #1
 8012496:	2b00      	cmp	r3, #0
 8012498:	d022      	beq.n	80124e0 <prvTCPHandleState+0x160>
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80124a0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d11a      	bne.n	80124e0 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80124aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	441a      	add	r2, r3
 80124b0:	69fb      	ldr	r3, [r7, #28]
 80124b2:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80124ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124be:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80124c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80124cc:	b2db      	uxtb	r3, r3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d106      	bne.n	80124e0 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 80124d2:	687a      	ldr	r2, [r7, #4]
 80124d4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80124d8:	f043 0302 	orr.w	r3, r3, #2
 80124dc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80124e6:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	2b0b      	cmp	r3, #11
 80124ec:	d864      	bhi.n	80125b8 <prvTCPHandleState+0x238>
 80124ee:	a201      	add	r2, pc, #4	@ (adr r2, 80124f4 <prvTCPHandleState+0x174>)
 80124f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f4:	080125b9 	.word	0x080125b9
 80124f8:	080125b9 	.word	0x080125b9
 80124fc:	08012587 	.word	0x08012587
 8012500:	08012525 	.word	0x08012525
 8012504:	08012587 	.word	0x08012587
 8012508:	08012599 	.word	0x08012599
 801250c:	080125a9 	.word	0x080125a9
 8012510:	080125a9 	.word	0x080125a9
 8012514:	080125b9 	.word	0x080125b9
 8012518:	080125b9 	.word	0x080125b9
 801251c:	080125a9 	.word	0x080125a9
 8012520:	080125b9 	.word	0x080125b9
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 fe4e 	bl	80131c8 <prvSetSynAckOptions>
 801252c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 801252e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012530:	2212      	movs	r2, #18
 8012532:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012534:	6878      	ldr	r0, [r7, #4]
 8012536:	f7f7 f991 	bl	800985c <uxIPHeaderSizeSocket>
 801253a:	4602      	mov	r2, r0
 801253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253e:	4413      	add	r3, r2
 8012540:	3314      	adds	r3, #20
 8012542:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254a:	b2db      	uxtb	r3, r3
 801254c:	3314      	adds	r3, #20
 801254e:	b2db      	uxtb	r3, r3
 8012550:	009b      	lsls	r3, r3, #2
 8012552:	b2da      	uxtb	r2, r3
 8012554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012556:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8012558:	2104      	movs	r1, #4
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f7fe fa10 	bl	8010980 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012562:	1c5a      	adds	r2, r3, #1
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801256a:	1c5a      	adds	r2, r3, #1
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	69db      	ldr	r3, [r3, #28]
 8012574:	1c5a      	adds	r2, r3, #1
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	69db      	ldr	r3, [r3, #28]
 801257e:	1c5a      	adds	r2, r3, #1
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	621a      	str	r2, [r3, #32]
                    break;
 8012584:	e019      	b.n	80125ba <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	6819      	ldr	r1, [r3, #0]
 801258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258c:	697a      	ldr	r2, [r7, #20]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7ff fc3a 	bl	8011e08 <prvHandleSynReceived>
 8012594:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012596:	e010      	b.n	80125ba <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8012598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259a:	697a      	ldr	r2, [r7, #20]
 801259c:	6839      	ldr	r1, [r7, #0]
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f7ff fd80 	bl	80120a4 <prvHandleEstablished>
 80125a4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80125a6:	e008      	b.n	80125ba <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	4619      	mov	r1, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff fb4c 	bl	8011c4c <prvTCPHandleFin>
 80125b4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 80125b6:	e000      	b.n	80125ba <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 80125b8:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 80125ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125bc:	2b00      	cmp	r3, #0
 80125be:	dd06      	ble.n	80125ce <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 80125c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125c2:	697a      	ldr	r2, [r7, #20]
 80125c4:	6839      	ldr	r1, [r7, #0]
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f001 fa1a 	bl	8013a00 <prvSendData>
 80125cc:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 80125ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80125d0:	4618      	mov	r0, r3
 80125d2:	373c      	adds	r7, #60	@ 0x3c
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd90      	pop	{r4, r7, pc}
 80125d8:	08025d80 	.word	0x08025d80

080125dc <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80125ea:	6838      	ldr	r0, [r7, #0]
 80125ec:	f7f7 f91c 	bl	8009828 <uxIPHeaderSizePacket>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b14      	cmp	r3, #20
 80125f4:	d002      	beq.n	80125fc <prvHandleListen+0x20>
 80125f6:	2b28      	cmp	r3, #40	@ 0x28
 80125f8:	d006      	beq.n	8012608 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 80125fa:	e00b      	b.n	8012614 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 f8ee 	bl	80127e0 <prvHandleListen_IPV4>
 8012604:	60f8      	str	r0, [r7, #12]
                    break;
 8012606:	e005      	b.n	8012614 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f000 fa10 	bl	8012a30 <prvHandleListen_IPV6>
 8012610:	60f8      	str	r0, [r7, #12]
                    break;
 8012612:	bf00      	nop
        }

        return pxNewSocket;
 8012614:	68fb      	ldr	r3, [r7, #12]
    }
 8012616:	4618      	mov	r0, r3
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
	...

08012620 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012620:	b590      	push	{r4, r7, lr}
 8012622:	b08f      	sub	sp, #60	@ 0x3c
 8012624:	af04      	add	r7, sp, #16
 8012626:	6078      	str	r0, [r7, #4]
 8012628:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	6a1a      	ldr	r2, [r3, #32]
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d009      	beq.n	80126d6 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126ce:	f043 0205 	orr.w	r2, r3, #5
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 80126d6:	f107 030c 	add.w	r3, r7, #12
 80126da:	4619      	mov	r1, r3
 80126dc:	6838      	ldr	r0, [r7, #0]
 80126de:	f7fc fb65 	bl	800edac <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80126e8:	f043 0304 	orr.w	r3, r3, #4
 80126ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	683a      	ldr	r2, [r7, #0]
 80126f4:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80126fc:	3301      	adds	r3, #1
 80126fe:	b29a      	uxth	r2, r3
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801270a:	2b00      	cmp	r3, #0
 801270c:	d102      	bne.n	8012714 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	687a      	ldr	r2, [r7, #4]
 8012712:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012718:	4619      	mov	r1, r3
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012720:	4618      	mov	r0, r3
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012728:	461c      	mov	r4, r3
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012730:	2b01      	cmp	r3, #1
 8012732:	d101      	bne.n	8012738 <prvTCPSocketCopy+0x118>
 8012734:	4a17      	ldr	r2, [pc, #92]	@ (8012794 <prvTCPSocketCopy+0x174>)
 8012736:	e000      	b.n	801273a <prvTCPSocketCopy+0x11a>
 8012738:	4a17      	ldr	r2, [pc, #92]	@ (8012798 <prvTCPSocketCopy+0x178>)
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <prvTCPSocketCopy+0x126>
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012744:	e000      	b.n	8012748 <prvTCPSocketCopy+0x128>
 8012746:	2300      	movs	r3, #0
 8012748:	9303      	str	r3, [sp, #12]
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	9302      	str	r3, [sp, #8]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	9301      	str	r3, [sp, #4]
 8012752:	9200      	str	r2, [sp, #0]
 8012754:	4623      	mov	r3, r4
 8012756:	4602      	mov	r2, r0
 8012758:	4810      	ldr	r0, [pc, #64]	@ (801279c <prvTCPSocketCopy+0x17c>)
 801275a:	f00f f91d 	bl	8021998 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801275e:	f107 010c 	add.w	r1, r7, #12
 8012762:	2301      	movs	r3, #1
 8012764:	2218      	movs	r2, #24
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	f7fb fccc 	bl	800e104 <vSocketBind>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d008      	beq.n	8012784 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8012772:	480b      	ldr	r0, [pc, #44]	@ (80127a0 <prvTCPSocketCopy+0x180>)
 8012774:	f00f f910 	bl	8021998 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7fb fd77 	bl	800e26c <vSocketClose>
            xResult = pdFALSE;
 801277e:	2300      	movs	r3, #0
 8012780:	627b      	str	r3, [r7, #36]	@ 0x24
 8012782:	e001      	b.n	8012788 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8012784:	2301      	movs	r3, #1
 8012786:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8012788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801278a:	4618      	mov	r0, r3
 801278c:	372c      	adds	r7, #44	@ 0x2c
 801278e:	46bd      	mov	sp, r7
 8012790:	bd90      	pop	{r4, r7, pc}
 8012792:	bf00      	nop
 8012794:	08025dc0 	.word	0x08025dc0
 8012798:	08025dc4 	.word	0x08025dc4
 801279c:	08025dc8 	.word	0x08025dc8
 80127a0:	08025e0c 	.word	0x08025e0c

080127a4 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 80127a4:	b480      	push	{r7}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	db02      	blt.n	80127bc <FreeRTOS_GetTCPStateName+0x18>
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2b0c      	cmp	r3, #12
 80127ba:	dd04      	ble.n	80127c6 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 80127bc:	230d      	movs	r3, #13
 80127be:	60fb      	str	r3, [r7, #12]
                xIndex--;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	3b01      	subs	r3, #1
 80127c4:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 80127c6:	4a05      	ldr	r2, [pc, #20]	@ (80127dc <FreeRTOS_GetTCPStateName+0x38>)
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 80127ce:	4618      	mov	r0, r3
 80127d0:	3714      	adds	r7, #20
 80127d2:	46bd      	mov	sp, r7
 80127d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	080270d4 	.word	0x080270d4

080127e0 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b08f      	sub	sp, #60	@ 0x3c
 80127e4:	af02      	add	r7, sp, #8
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 80127ea:	2300      	movs	r3, #0
 80127ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 80127f2:	2300      	movs	r3, #0
 80127f4:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 80127fa:	2300      	movs	r3, #0
 80127fc:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d008      	beq.n	8012816 <prvHandleListen_IPV4+0x36>
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d005      	beq.n	8012816 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801280e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012814:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012816:	6a3b      	ldr	r3, [r7, #32]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d015      	beq.n	8012848 <prvHandleListen_IPV4+0x68>
 801281c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801281e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012822:	6a3b      	ldr	r3, [r7, #32]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	429a      	cmp	r2, r3
 8012828:	d10e      	bne.n	8012848 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 801282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801282c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012836:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 801283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801283e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012840:	f7ee ffa2 	bl	8001788 <ulApplicationGetNextSequenceNumber>
 8012844:	6278      	str	r0, [r7, #36]	@ 0x24
 8012846:	e001      	b.n	801284c <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012848:	2300      	movs	r3, #0
 801284a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 801284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284e:	2b00      	cmp	r3, #0
 8012850:	d059      	beq.n	8012906 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012858:	f003 0308 	and.w	r3, r3, #8
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00c      	beq.n	801287c <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801286c:	f043 0304 	orr.w	r3, r3, #4
 8012870:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	67da      	str	r2, [r3, #124]	@ 0x7c
 801287a:	e044      	b.n	8012906 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801287c:	2300      	movs	r3, #0
 801287e:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801288c:	429a      	cmp	r2, r3
 801288e:	d31b      	bcc.n	80128c8 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012894:	4619      	mov	r1, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801289c:	461a      	mov	r2, r3
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80128a4:	4618      	mov	r0, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d101      	bne.n	80128b4 <prvHandleListen_IPV4+0xd4>
 80128b0:	4b5b      	ldr	r3, [pc, #364]	@ (8012a20 <prvHandleListen_IPV4+0x240>)
 80128b2:	e000      	b.n	80128b6 <prvHandleListen_IPV4+0xd6>
 80128b4:	4b5b      	ldr	r3, [pc, #364]	@ (8012a24 <prvHandleListen_IPV4+0x244>)
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	4603      	mov	r3, r0
 80128ba:	485b      	ldr	r0, [pc, #364]	@ (8012a28 <prvHandleListen_IPV4+0x248>)
 80128bc:	f00f f86c 	bl	8021998 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80128c0:	6838      	ldr	r0, [r7, #0]
 80128c2:	f001 f9d1 	bl	8013c68 <prvTCPSendReset>
 80128c6:	e01e      	b.n	8012906 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80128c8:	2206      	movs	r2, #6
 80128ca:	2101      	movs	r1, #1
 80128cc:	2002      	movs	r0, #2
 80128ce:	f7fb f8bf 	bl	800da50 <FreeRTOS_socket>
 80128d2:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d003      	beq.n	80128e2 <prvHandleListen_IPV4+0x102>
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128e0:	d106      	bne.n	80128f0 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80128e2:	4852      	ldr	r0, [pc, #328]	@ (8012a2c <prvHandleListen_IPV4+0x24c>)
 80128e4:	f00f f858 	bl	8021998 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80128e8:	6838      	ldr	r0, [r7, #0]
 80128ea:	f001 f9bd 	bl	8013c68 <prvTCPSendReset>
 80128ee:	e00a      	b.n	8012906 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	6978      	ldr	r0, [r7, #20]
 80128f4:	f7ff fe94 	bl	8012620 <prvTCPSocketCopy>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d003      	beq.n	8012906 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012902:	2301      	movs	r3, #1
 8012904:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012908:	2b00      	cmp	r3, #0
 801290a:	f000 8083 	beq.w	8012a14 <prvHandleListen_IPV4+0x234>
 801290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012910:	2b00      	cmp	r3, #0
 8012912:	d07f      	beq.n	8012a14 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012918:	6838      	ldr	r0, [r7, #0]
 801291a:	f7f6 ff85 	bl	8009828 <uxIPHeaderSizePacket>
 801291e:	4603      	mov	r3, r0
 8012920:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012922:	4423      	add	r3, r4
 8012924:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801292c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801292e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012930:	7a13      	ldrb	r3, [r2, #8]
 8012932:	f36f 0300 	bfc	r3, #0, #1
 8012936:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801293a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801293c:	b29b      	uxth	r3, r3
 801293e:	021b      	lsls	r3, r3, #8
 8012940:	b21a      	sxth	r2, r3
 8012942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012944:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012946:	b29b      	uxth	r3, r3
 8012948:	0a1b      	lsrs	r3, r3, #8
 801294a:	b29b      	uxth	r3, r3
 801294c:	b21b      	sxth	r3, r3
 801294e:	4313      	orrs	r3, r2
 8012950:	b21b      	sxth	r3, r3
 8012952:	b29a      	uxth	r2, r3
 8012954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012956:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 801295a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012960:	061a      	lsls	r2, r3, #24
 8012962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012964:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012968:	021b      	lsls	r3, r3, #8
 801296a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801296e:	431a      	orrs	r2, r3
 8012970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012972:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012976:	0a1b      	lsrs	r3, r3, #8
 8012978:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801297c:	431a      	orrs	r2, r3
 801297e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012980:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012984:	0e1b      	lsrs	r3, r3, #24
 8012986:	431a      	orrs	r2, r3
 8012988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298a:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801298c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012990:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	061a      	lsls	r2, r3, #24
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	021b      	lsls	r3, r3, #8
 80129a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80129a4:	431a      	orrs	r2, r3
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	685b      	ldr	r3, [r3, #4]
 80129aa:	0a1b      	lsrs	r3, r3, #8
 80129ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80129b0:	431a      	orrs	r2, r3
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	0e1b      	lsrs	r3, r3, #24
 80129b8:	431a      	orrs	r2, r3
 80129ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129bc:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80129c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129c2:	f002 f877 	bl	8014ab4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80129c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129c8:	f000 fb66 	bl	8013098 <prvTCPCreateWindow>
 80129cc:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d008      	beq.n	80129e6 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80129d4:	69fb      	ldr	r3, [r7, #28]
 80129d6:	2b01      	cmp	r3, #1
 80129d8:	d102      	bne.n	80129e0 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 80129da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129dc:	f7fb fc46 	bl	800e26c <vSocketClose>
                }

                pxReturn = NULL;
 80129e0:	2300      	movs	r3, #0
 80129e2:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80129e4:	e016      	b.n	8012a14 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80129e6:	2103      	movs	r1, #3
 80129e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80129ea:	f7fd ffc9 	bl	8010980 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80129f4:	d902      	bls.n	80129fc <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80129f6:	235a      	movs	r3, #90	@ 0x5a
 80129f8:	61bb      	str	r3, [r7, #24]
 80129fa:	e002      	b.n	8012a02 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a00:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a04:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012a0c:	69ba      	ldr	r2, [r7, #24]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	f00f f9de 	bl	8021dd0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3734      	adds	r7, #52	@ 0x34
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bd90      	pop	{r4, r7, pc}
 8012a1e:	bf00      	nop
 8012a20:	08025eb4 	.word	0x08025eb4
 8012a24:	08025eb8 	.word	0x08025eb8
 8012a28:	08025ebc 	.word	0x08025ebc
 8012a2c:	08025eec 	.word	0x08025eec

08012a30 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012a30:	b590      	push	{r4, r7, lr}
 8012a32:	b08f      	sub	sp, #60	@ 0x3c
 8012a34:	af02      	add	r7, sp, #8
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012a46:	2300      	movs	r3, #0
 8012a48:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d024      	beq.n	8012a9e <prvHandleListen_IPV6+0x6e>
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d021      	beq.n	8012a9e <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d103      	bne.n	8012a70 <prvHandleListen_IPV6+0x40>
 8012a68:	215d      	movs	r1, #93	@ 0x5d
 8012a6a:	487b      	ldr	r0, [pc, #492]	@ (8012c58 <prvHandleListen_IPV6+0x228>)
 8012a6c:	f7ee fe6c 	bl	8001748 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a72:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a7a:	3338      	adds	r3, #56	@ 0x38
 8012a7c:	2210      	movs	r2, #16
 8012a7e:	4619      	mov	r1, r3
 8012a80:	f010 f93b 	bl	8022cfa <memcmp>
 8012a84:	4603      	mov	r3, r0
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d109      	bne.n	8012a9e <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8012a8a:	f107 0308 	add.w	r3, r7, #8
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ee ff24 	bl	80018dc <xApplicationGetRandomNumber>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d101      	bne.n	8012a9e <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 8012a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d059      	beq.n	8012b58 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012aaa:	f003 0308 	and.w	r3, r3, #8
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00c      	beq.n	8012ace <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012abe:	f043 0304 	orr.w	r3, r3, #4
 8012ac2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	67da      	str	r2, [r3, #124]	@ 0x7c
 8012acc:	e044      	b.n	8012b58 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d31b      	bcc.n	8012b1a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012aee:	461a      	mov	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012af6:	4618      	mov	r0, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012afe:	2b01      	cmp	r3, #1
 8012b00:	d101      	bne.n	8012b06 <prvHandleListen_IPV6+0xd6>
 8012b02:	4b56      	ldr	r3, [pc, #344]	@ (8012c5c <prvHandleListen_IPV6+0x22c>)
 8012b04:	e000      	b.n	8012b08 <prvHandleListen_IPV6+0xd8>
 8012b06:	4b56      	ldr	r3, [pc, #344]	@ (8012c60 <prvHandleListen_IPV6+0x230>)
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	4855      	ldr	r0, [pc, #340]	@ (8012c64 <prvHandleListen_IPV6+0x234>)
 8012b0e:	f00e ff43 	bl	8021998 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012b12:	6838      	ldr	r0, [r7, #0]
 8012b14:	f001 f8a8 	bl	8013c68 <prvTCPSendReset>
 8012b18:	e01e      	b.n	8012b58 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012b1a:	2206      	movs	r2, #6
 8012b1c:	2101      	movs	r1, #1
 8012b1e:	200a      	movs	r0, #10
 8012b20:	f7fa ff96 	bl	800da50 <FreeRTOS_socket>
 8012b24:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d003      	beq.n	8012b34 <prvHandleListen_IPV6+0x104>
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b32:	d106      	bne.n	8012b42 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012b34:	484c      	ldr	r0, [pc, #304]	@ (8012c68 <prvHandleListen_IPV6+0x238>)
 8012b36:	f00e ff2f 	bl	8021998 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012b3a:	6838      	ldr	r0, [r7, #0]
 8012b3c:	f001 f894 	bl	8013c68 <prvTCPSendReset>
 8012b40:	e00a      	b.n	8012b58 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012b42:	6879      	ldr	r1, [r7, #4]
 8012b44:	69b8      	ldr	r0, [r7, #24]
 8012b46:	f7ff fd6b 	bl	8012620 <prvTCPSocketCopy>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d003      	beq.n	8012b58 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012b54:	2301      	movs	r3, #1
 8012b56:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8012b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d076      	beq.n	8012c4c <prvHandleListen_IPV6+0x21c>
 8012b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d073      	beq.n	8012c4c <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012b68:	6838      	ldr	r0, [r7, #0]
 8012b6a:	f7f6 fe5d 	bl	8009828 <uxIPHeaderSizePacket>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012b72:	4423      	add	r3, r4
 8012b74:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 8012b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b80:	7a13      	ldrb	r3, [r2, #8]
 8012b82:	f043 0301 	orr.w	r3, r3, #1
 8012b86:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b8c:	330e      	adds	r3, #14
 8012b8e:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b94:	b29b      	uxth	r3, r3
 8012b96:	021b      	lsls	r3, r3, #8
 8012b98:	b21a      	sxth	r2, r3
 8012b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	0a1b      	lsrs	r3, r3, #8
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	b21b      	sxth	r3, r3
 8012ba6:	4313      	orrs	r3, r2
 8012ba8:	b21b      	sxth	r3, r3
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bb4:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	3308      	adds	r3, #8
 8012bbc:	2210      	movs	r2, #16
 8012bbe:	4619      	mov	r1, r3
 8012bc0:	f00f f906 	bl	8021dd0 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc8:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	685b      	ldr	r3, [r3, #4]
 8012bd0:	061a      	lsls	r2, r3, #24
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	021b      	lsls	r3, r3, #8
 8012bd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012bdc:	431a      	orrs	r2, r3
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	0a1b      	lsrs	r3, r3, #8
 8012be4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012be8:	431a      	orrs	r2, r3
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	685b      	ldr	r3, [r3, #4]
 8012bee:	0e1b      	lsrs	r3, r3, #24
 8012bf0:	431a      	orrs	r2, r3
 8012bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bf4:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012bf8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012bfa:	f001 ff5b 	bl	8014ab4 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c00:	f000 fa4a 	bl	8013098 <prvTCPCreateWindow>
 8012c04:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d008      	beq.n	8012c1e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012c0c:	6a3b      	ldr	r3, [r7, #32]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d102      	bne.n	8012c18 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c14:	f7fb fb2a 	bl	800e26c <vSocketClose>
                }

                pxReturn = NULL;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012c1c:	e016      	b.n	8012c4c <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012c1e:	2103      	movs	r1, #3
 8012c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012c22:	f7fd fead 	bl	8010980 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c2a:	2b5a      	cmp	r3, #90	@ 0x5a
 8012c2c:	d902      	bls.n	8012c34 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012c2e:	235a      	movs	r3, #90	@ 0x5a
 8012c30:	61fb      	str	r3, [r7, #28]
 8012c32:	e002      	b.n	8012c3a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c38:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c3c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012c44:	69fa      	ldr	r2, [r7, #28]
 8012c46:	4619      	mov	r1, r3
 8012c48:	f00f f8c2 	bl	8021dd0 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3734      	adds	r7, #52	@ 0x34
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd90      	pop	{r4, r7, pc}
 8012c56:	bf00      	nop
 8012c58:	08025f0c 	.word	0x08025f0c
 8012c5c:	08025f4c 	.word	0x08025f4c
 8012c60:	08025f50 	.word	0x08025f50
 8012c64:	08025f54 	.word	0x08025f54
 8012c68:	08025f84 	.word	0x08025f84

08012c6c <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012c74:	2301      	movs	r3, #1
 8012c76:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012c7e:	f003 0308 	and.w	r3, r3, #8
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d107      	bne.n	8012c98 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 fa51 	bl	8013130 <prvTCPPrepareConnect>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d001      	beq.n	8012c98 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012c94:	2300      	movs	r3, #0
 8012c96:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012c98:	68fb      	ldr	r3, [r7, #12]
    }
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
	...

08012ca4 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b088      	sub	sp, #32
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8012cac:	2300      	movs	r3, #0
 8012cae:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012cba:	2b02      	cmp	r3, #2
 8012cbc:	d010      	beq.n	8012ce0 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012cc2:	f107 030c 	add.w	r3, r7, #12
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 f859 	bl	8012d80 <prvTCPSendRepeated>
 8012cce:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d04d      	beq.n	8012d72 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f003 ffb5 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
 8012cde:	e048      	b.n	8012d72 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d90d      	bls.n	8012d06 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	4821      	ldr	r0, [pc, #132]	@ (8012d7c <prvTCPSendPacket+0xd8>)
 8012cf8:	f00e fe4e 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012cfc:	2108      	movs	r1, #8
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f7fd fe3e 	bl	8010980 <vTCPStateChange>
 8012d04:	e035      	b.n	8012d72 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f7ff ffb0 	bl	8012c6c <prvTCPMakeSurePrepared>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b01      	cmp	r3, #1
 8012d10:	d12f      	bne.n	8012d72 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7f6 fda2 	bl	800985c <uxIPHeaderSizeSocket>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	330e      	adds	r3, #14
 8012d1c:	33a0      	adds	r3, #160	@ 0xa0
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	4413      	add	r3, r2
 8012d22:	330a      	adds	r3, #10
 8012d24:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 fa4c 	bl	80131c8 <prvSetSynAckOptions>
 8012d30:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7f6 fd92 	bl	800985c <uxIPHeaderSizeSocket>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	3314      	adds	r3, #20
 8012d40:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	3314      	adds	r3, #20
 8012d4c:	b2db      	uxtb	r3, r3
 8012d4e:	009b      	lsls	r3, r3, #2
 8012d50:	b2da      	uxtb	r2, r3
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	b2da      	uxtb	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8012d66:	69fa      	ldr	r2, [r7, #28]
 8012d68:	2300      	movs	r3, #0
 8012d6a:	2100      	movs	r1, #0
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 f837 	bl	8012de0 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012d72:	69fb      	ldr	r3, [r7, #28]
    }
 8012d74:	4618      	mov	r0, r3
 8012d76:	3720      	adds	r7, #32
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	08025fa4 	.word	0x08025fa4

08012d80 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
 8012d96:	e019      	b.n	8012dcc <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	6839      	ldr	r1, [r7, #0]
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f000 fb7d 	bl	801349c <prvTCPPrepareSend>
 8012da2:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	dd14      	ble.n	8012dd4 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	6819      	ldr	r1, [r3, #0]
 8012dae:	68ba      	ldr	r2, [r7, #8]
 8012db0:	2301      	movs	r3, #1
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f000 f814 	bl	8012de0 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8012dbe:	693a      	ldr	r2, [r7, #16]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	617b      	str	r3, [r7, #20]
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	2b07      	cmp	r3, #7
 8012dd0:	d9e2      	bls.n	8012d98 <prvTCPSendRepeated+0x18>
 8012dd2:	e000      	b.n	8012dd6 <prvTCPSendRepeated+0x56>
                break;
 8012dd4:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012dd6:	693b      	ldr	r3, [r7, #16]
    }
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3718      	adds	r7, #24
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd80      	pop	{r7, pc}

08012de0 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b086      	sub	sp, #24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
 8012dec:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012df2:	2300      	movs	r3, #0
 8012df4:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d008      	beq.n	8012e0e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8012dfc:	6938      	ldr	r0, [r7, #16]
 8012dfe:	f7f6 fd13 	bl	8009828 <uxIPHeaderSizePacket>
 8012e02:	4603      	mov	r3, r0
 8012e04:	2b28      	cmp	r3, #40	@ 0x28
 8012e06:	d113      	bne.n	8012e30 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012e08:	2301      	movs	r3, #1
 8012e0a:	617b      	str	r3, [r7, #20]
 8012e0c:	e010      	b.n	8012e30 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d008      	beq.n	8012e26 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f7f6 fd21 	bl	800985c <uxIPHeaderSizeSocket>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b28      	cmp	r3, #40	@ 0x28
 8012e1e:	d107      	bne.n	8012e30 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012e20:	2301      	movs	r3, #1
 8012e22:	617b      	str	r3, [r7, #20]
 8012e24:	e004      	b.n	8012e30 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8012e26:	f240 1119 	movw	r1, #281	@ 0x119
 8012e2a:	480c      	ldr	r0, [pc, #48]	@ (8012e5c <prvTCPReturnPacket+0x7c>)
 8012e2c:	f7ee fc8c 	bl	8001748 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	2b01      	cmp	r3, #1
 8012e34:	d105      	bne.n	8012e42 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	687a      	ldr	r2, [r7, #4]
 8012e3a:	68b9      	ldr	r1, [r7, #8]
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f001 fa61 	bl	8014304 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d105      	bne.n	8012e54 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	68b9      	ldr	r1, [r7, #8]
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f000 ff18 	bl	8013c84 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8012e54:	bf00      	nop
 8012e56:	3718      	adds	r7, #24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	08025fc0 	.word	0x08025fc0

08012e60 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b08a      	sub	sp, #40	@ 0x28
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012e72:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012e7c:	4413      	add	r3, r2
 8012e7e:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d007      	beq.n	8012e9a <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fd fa9f 	bl	80103d4 <uxStreamBufferFrontSpace>
 8012e96:	6278      	str	r0, [r7, #36]	@ 0x24
 8012e98:	e003      	b.n	8012ea2 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012ea0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f7 fa0b 	bl	800a2c4 <FreeRTOS_min_uint32>
 8012eae:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012eb6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d107      	bne.n	8012ed0 <prvTCPReturn_CheckTCPWindow+0x70>
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012ec6:	f003 0304 	and.w	r3, r3, #4
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012eda:	461a      	mov	r2, r3
 8012edc:	6a3b      	ldr	r3, [r7, #32]
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d20a      	bcs.n	8012ef8 <prvTCPReturn_CheckTCPWindow+0x98>
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012ee8:	461a      	mov	r2, r3
 8012eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d303      	bcc.n	8012ef8 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012ef6:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8012efe:	461a      	mov	r2, r3
 8012f00:	6a3b      	ldr	r3, [r7, #32]
 8012f02:	40d3      	lsrs	r3, r2
 8012f04:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	d902      	bls.n	8012f16 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012f10:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012f14:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	021b      	lsls	r3, r3, #8
 8012f1c:	b21a      	sxth	r2, r3
 8012f1e:	69fb      	ldr	r3, [r7, #28]
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	0a1b      	lsrs	r3, r3, #8
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	b21b      	sxth	r3, r3
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	b21b      	sxth	r3, r3
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012f38:	f36f 0300 	bfc	r3, #0, #1
 8012f3c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	691a      	ldr	r2, [r3, #16]
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	441a      	add	r2, r3
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8012f4c:	bf00      	nop
 8012f4e:	3728      	adds	r7, #40	@ 0x28
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}

08012f54 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b088      	sub	sp, #32
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	607a      	str	r2, [r7, #4]
 8012f60:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012f68:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012f72:	4413      	add	r3, r2
 8012f74:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012f7c:	f003 0302 	and.w	r3, r3, #2
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d029      	beq.n	8012fda <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012f8c:	f36f 0341 	bfc	r3, #1, #1
 8012f90:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012f94:	68fa      	ldr	r2, [r7, #12]
 8012f96:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012f9a:	f043 0304 	orr.w	r3, r3, #4
 8012f9e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012fa8:	1e5a      	subs	r2, r3, #1
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	061a      	lsls	r2, r3, #24
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	021b      	lsls	r3, r3, #8
 8012fba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012fbe:	431a      	orrs	r2, r3
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	685b      	ldr	r3, [r3, #4]
 8012fc4:	0a1b      	lsrs	r3, r3, #8
 8012fc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012fca:	431a      	orrs	r2, r3
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	0e1b      	lsrs	r3, r3, #24
 8012fd2:	431a      	orrs	r2, r3
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	605a      	str	r2, [r3, #4]
 8012fd8:	e043      	b.n	8013062 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012fe0:	061a      	lsls	r2, r3, #24
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012fe8:	021b      	lsls	r3, r3, #8
 8012fea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012fee:	431a      	orrs	r2, r3
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012ff6:	0a1b      	lsrs	r3, r3, #8
 8012ff8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ffc:	431a      	orrs	r2, r3
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013004:	0e1b      	lsrs	r3, r3, #24
 8013006:	431a      	orrs	r2, r3
 8013008:	69bb      	ldr	r3, [r7, #24]
 801300a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	7b5b      	ldrb	r3, [r3, #13]
 8013010:	f003 0301 	and.w	r3, r3, #1
 8013014:	2b00      	cmp	r3, #0
 8013016:	d024      	beq.n	8013062 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	f7f6 fc1f 	bl	800985c <uxIPHeaderSizeSocket>
 801301e:	4602      	mov	r2, r0
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	1a9b      	subs	r3, r3, r2
 8013024:	3b14      	subs	r3, #20
 8013026:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013028:	69fb      	ldr	r3, [r7, #28]
 801302a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	441a      	add	r2, r3
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013034:	429a      	cmp	r2, r3
 8013036:	d014      	beq.n	8013062 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	7b5b      	ldrb	r3, [r3, #13]
 801303c:	f023 0301 	bic.w	r3, r3, #1
 8013040:	b2da      	uxtb	r2, r3
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013046:	69fb      	ldr	r3, [r7, #28]
 8013048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	69db      	ldr	r3, [r3, #28]
 801304e:	1ad1      	subs	r1, r2, r3
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	69db      	ldr	r3, [r3, #28]
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	697a      	ldr	r2, [r7, #20]
 801305c:	480d      	ldr	r0, [pc, #52]	@ (8013094 <prvTCPReturn_SetSequenceNumber+0x140>)
 801305e:	f00e fc9b 	bl	8021998 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013062:	69fb      	ldr	r3, [r7, #28]
 8013064:	691b      	ldr	r3, [r3, #16]
 8013066:	061a      	lsls	r2, r3, #24
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	691b      	ldr	r3, [r3, #16]
 801306c:	021b      	lsls	r3, r3, #8
 801306e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013072:	431a      	orrs	r2, r3
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	691b      	ldr	r3, [r3, #16]
 8013078:	0a1b      	lsrs	r3, r3, #8
 801307a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801307e:	431a      	orrs	r2, r3
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	691b      	ldr	r3, [r3, #16]
 8013084:	0e1b      	lsrs	r3, r3, #24
 8013086:	431a      	orrs	r2, r3
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	609a      	str	r2, [r3, #8]
    }
 801308c:	bf00      	nop
 801308e:	3720      	adds	r7, #32
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	08025ffc 	.word	0x08025ffc

08013098 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013098:	b5b0      	push	{r4, r5, r7, lr}
 801309a:	b088      	sub	sp, #32
 801309c:	af02      	add	r7, sp, #8
 801309e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80130a6:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80130ae:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 80130b0:	4b1d      	ldr	r3, [pc, #116]	@ (8013128 <prvTCPCreateWindow+0x90>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d014      	beq.n	80130e2 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80130be:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80130c2:	fb02 f103 	mul.w	r1, r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	4603      	mov	r3, r0
 80130dc:	4813      	ldr	r0, [pc, #76]	@ (801312c <prvTCPCreateWindow+0x94>)
 80130de:	f00e fc5b 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80130ee:	fb02 f103 	mul.w	r1, r2, r3
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80130f8:	fb02 f403 	mul.w	r4, r2, r3
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801310e:	9201      	str	r2, [sp, #4]
 8013110:	9300      	str	r3, [sp, #0]
 8013112:	462b      	mov	r3, r5
 8013114:	4622      	mov	r2, r4
 8013116:	f001 ffd7 	bl	80150c8 <xTCPWindowCreate>
 801311a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801311c:	68fb      	ldr	r3, [r7, #12]
    }
 801311e:	4618      	mov	r0, r3
 8013120:	3718      	adds	r7, #24
 8013122:	46bd      	mov	sp, r7
 8013124:	bdb0      	pop	{r4, r5, r7, pc}
 8013126:	bf00      	nop
 8013128:	20001484 	.word	0x20001484
 801312c:	0802601c 	.word	0x0802601c

08013130 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013138:	2301      	movs	r3, #1
 801313a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	7a1b      	ldrb	r3, [r3, #8]
 8013140:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013144:	b2db      	uxtb	r3, r3
 8013146:	2b00      	cmp	r3, #0
 8013148:	d002      	beq.n	8013150 <prvTCPPrepareConnect+0x20>
 801314a:	2b01      	cmp	r3, #1
 801314c:	d005      	beq.n	801315a <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801314e:	e009      	b.n	8013164 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f000 ff69 	bl	8014028 <prvTCPPrepareConnect_IPV4>
 8013156:	60f8      	str	r0, [r7, #12]
                    break;
 8013158:	e004      	b.n	8013164 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f001 fab4 	bl	80146c8 <prvTCPPrepareConnect_IPV6>
 8013160:	60f8      	str	r0, [r7, #12]
                    break;
 8013162:	bf00      	nop
        }

        return xReturn;
 8013164:	68fb      	ldr	r3, [r7, #12]
    }
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
	...

08013170 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013184:	fb02 f303 	mul.w	r3, r2, r3
 8013188:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 801318a:	2300      	movs	r3, #0
 801318c:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 801318e:	e005      	b.n	801319c <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	085b      	lsrs	r3, r3, #1
 8013194:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013196:	7afb      	ldrb	r3, [r7, #11]
 8013198:	3301      	adds	r3, #1
 801319a:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131a2:	d2f5      	bcs.n	8013190 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80131b0:	461a      	mov	r2, r3
 80131b2:	7afb      	ldrb	r3, [r7, #11]
 80131b4:	4803      	ldr	r0, [pc, #12]	@ (80131c4 <prvWinScaleFactor+0x54>)
 80131b6:	f00e fbef 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 80131ba:	7afb      	ldrb	r3, [r7, #11]
        }
 80131bc:	4618      	mov	r0, r3
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	08026054 	.word	0x08026054

080131c8 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80131d8:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	2202      	movs	r2, #2
 80131de:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	2204      	movs	r2, #4
 80131e4:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 80131e6:	89fb      	ldrh	r3, [r7, #14]
 80131e8:	0a1b      	lsrs	r3, r3, #8
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	b2da      	uxtb	r2, r3
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 80131f2:	89fb      	ldrh	r3, [r7, #14]
 80131f4:	b2da      	uxtb	r2, r3
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7ff ffb8 	bl	8013170 <prvWinScaleFactor>
 8013200:	4603      	mov	r3, r0
 8013202:	461a      	mov	r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	2201      	movs	r2, #1
 801320e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2203      	movs	r2, #3
 8013214:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	2203      	movs	r2, #3
 801321a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013226:	2308      	movs	r3, #8
 8013228:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	4413      	add	r3, r2
 8013230:	3314      	adds	r3, #20
 8013232:	2201      	movs	r2, #1
 8013234:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	3301      	adds	r3, #1
 801323a:	683a      	ldr	r2, [r7, #0]
 801323c:	4413      	add	r3, r2
 801323e:	2201      	movs	r2, #1
 8013240:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	3302      	adds	r3, #2
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	4413      	add	r3, r2
 801324a:	2204      	movs	r2, #4
 801324c:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	3303      	adds	r3, #3
 8013252:	683a      	ldr	r2, [r7, #0]
 8013254:	4413      	add	r3, r2
 8013256:	2202      	movs	r2, #2
 8013258:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	3304      	adds	r3, #4
 801325e:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8013260:	68bb      	ldr	r3, [r7, #8]
    }
 8013262:	4618      	mov	r0, r3
 8013264:	3710      	adds	r7, #16
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
	...

0801326c <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 801326c:	b580      	push	{r7, lr}
 801326e:	b088      	sub	sp, #32
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
 8013278:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 801327a:	4b38      	ldr	r3, [pc, #224]	@ (801335c <prvTCPBufferResize+0xf0>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d00b      	beq.n	801329a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8013282:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8013286:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8013288:	68bb      	ldr	r3, [r7, #8]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d102      	bne.n	8013294 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801328e:	2301      	movs	r3, #1
 8013290:	617b      	str	r3, [r7, #20]
 8013292:	e020      	b.n	80132d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013294:	2300      	movs	r3, #0
 8013296:	617b      	str	r3, [r7, #20]
 8013298:	e01d      	b.n	80132d6 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801329a:	68f8      	ldr	r0, [r7, #12]
 801329c:	f7f6 fade 	bl	800985c <uxIPHeaderSizeSocket>
 80132a0:	4602      	mov	r2, r0
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	4413      	add	r3, r2
 80132a6:	3322      	adds	r3, #34	@ 0x22
 80132a8:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	69ba      	ldr	r2, [r7, #24]
 80132ae:	4413      	add	r3, r2
 80132b0:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	2b59      	cmp	r3, #89	@ 0x59
 80132b6:	d801      	bhi.n	80132bc <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80132b8:	235a      	movs	r3, #90	@ 0x5a
 80132ba:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d004      	beq.n	80132cc <prvTCPBufferResize+0x60>
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c6:	69ba      	ldr	r2, [r7, #24]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d902      	bls.n	80132d2 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 80132cc:	2301      	movs	r3, #1
 80132ce:	617b      	str	r3, [r7, #20]
 80132d0:	e001      	b.n	80132d6 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80132d2:	2300      	movs	r3, #0
 80132d4:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d023      	beq.n	8013324 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 80132dc:	2100      	movs	r1, #0
 80132de:	69b8      	ldr	r0, [r7, #24]
 80132e0:	f003 fc4a 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 80132e4:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d031      	beq.n	8013350 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	69ba      	ldr	r2, [r7, #24]
 80132f0:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d00c      	beq.n	8013312 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013304:	461a      	mov	r2, r3
 8013306:	f00e fd63 	bl	8021dd0 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801330a:	68b8      	ldr	r0, [r7, #8]
 801330c:	f003 fc9c 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
 8013310:	e01e      	b.n	8013350 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013312:	69fb      	ldr	r3, [r7, #28]
 8013314:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	33aa      	adds	r3, #170	@ 0xaa
 801331a:	225a      	movs	r2, #90	@ 0x5a
 801331c:	4619      	mov	r1, r3
 801331e:	f00e fd57 	bl	8021dd0 <memcpy>
 8013322:	e015      	b.n	8013350 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d104      	bne.n	8013334 <prvTCPBufferResize+0xc8>
 801332a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801332e:	480c      	ldr	r0, [pc, #48]	@ (8013360 <prvTCPBufferResize+0xf4>)
 8013330:	f7ee fa0a 	bl	8001748 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f7f6 fa8f 	bl	800985c <uxIPHeaderSizeSocket>
 801333e:	4602      	mov	r2, r0
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	441a      	add	r2, r3
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	4413      	add	r3, r2
 8013348:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8013350:	69fb      	ldr	r3, [r7, #28]
    }
 8013352:	4618      	mov	r0, r3
 8013354:	3720      	adds	r7, #32
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	08027120 	.word	0x08027120
 8013360:	08025fc0 	.word	0x08025fc0

08013364 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8013364:	b580      	push	{r7, lr}
 8013366:	b086      	sub	sp, #24
 8013368:	af00      	add	r7, sp, #0
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8013370:	2300      	movs	r3, #0
 8013372:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8013374:	2300      	movs	r3, #0
 8013376:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d008      	beq.n	8013390 <prvTCPReturn_SetEndPoint+0x2c>
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013382:	2b00      	cmp	r3, #0
 8013384:	d004      	beq.n	8013390 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801338e:	e078      	b.n	8013482 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8013390:	483e      	ldr	r0, [pc, #248]	@ (801348c <prvTCPReturn_SetEndPoint+0x128>)
 8013392:	f00e fb01 	bl	8021998 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b14      	cmp	r3, #20
 801339a:	d003      	beq.n	80133a4 <prvTCPReturn_SetEndPoint+0x40>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2b28      	cmp	r3, #40	@ 0x28
 80133a0:	d03d      	beq.n	801341e <prvTCPReturn_SetEndPoint+0xba>
 80133a2:	e056      	b.n	8013452 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133a8:	330e      	adds	r3, #14
 80133aa:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	691b      	ldr	r3, [r3, #16]
 80133b0:	2108      	movs	r1, #8
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7f9 fea8 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 80133b8:	4602      	mov	r2, r0
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d149      	bne.n	801345a <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	061a      	lsls	r2, r3, #24
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	021b      	lsls	r3, r3, #8
 80133d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80133d6:	431a      	orrs	r2, r3
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	0a1b      	lsrs	r3, r3, #8
 80133de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80133e2:	431a      	orrs	r2, r3
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	0e1b      	lsrs	r3, r3, #24
 80133ea:	ea42 0103 	orr.w	r1, r2, r3
 80133ee:	697b      	ldr	r3, [r7, #20]
 80133f0:	691b      	ldr	r3, [r3, #16]
 80133f2:	061a      	lsls	r2, r3, #24
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	691b      	ldr	r3, [r3, #16]
 80133f8:	021b      	lsls	r3, r3, #8
 80133fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80133fe:	431a      	orrs	r2, r3
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	691b      	ldr	r3, [r3, #16]
 8013404:	0a1b      	lsrs	r3, r3, #8
 8013406:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801340a:	431a      	orrs	r2, r3
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	691b      	ldr	r3, [r3, #16]
 8013410:	0e1b      	lsrs	r3, r3, #24
 8013412:	4313      	orrs	r3, r2
 8013414:	461a      	mov	r2, r3
 8013416:	481e      	ldr	r0, [pc, #120]	@ (8013490 <prvTCPReturn_SetEndPoint+0x12c>)
 8013418:	f00e fabe 	bl	8021998 <lUDPLoggingPrintf>
                        break;
 801341c:	e01d      	b.n	801345a <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013422:	330e      	adds	r3, #14
 8013424:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	3318      	adds	r3, #24
 801342a:	4618      	mov	r0, r3
 801342c:	f7f9 fe26 	bl	800d07c <FreeRTOS_FindEndPointOnIP_IPv6>
 8013430:	4602      	mov	r2, r0
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013436:	68bb      	ldr	r3, [r7, #8]
 8013438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801343a:	2b00      	cmp	r3, #0
 801343c:	d10f      	bne.n	801345e <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	f103 0108 	add.w	r1, r3, #8
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	3318      	adds	r3, #24
 8013448:	461a      	mov	r2, r3
 801344a:	4812      	ldr	r0, [pc, #72]	@ (8013494 <prvTCPReturn_SetEndPoint+0x130>)
 801344c:	f00e faa4 	bl	8021998 <lUDPLoggingPrintf>
                        break;
 8013450:	e005      	b.n	801345e <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	2200      	movs	r2, #0
 8013456:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8013458:	e002      	b.n	8013460 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801345a:	bf00      	nop
 801345c:	e000      	b.n	8013460 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801345e:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013464:	2b00      	cmp	r3, #0
 8013466:	d00c      	beq.n	8013482 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801346c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8013470:	4619      	mov	r1, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013476:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 801347a:	461a      	mov	r2, r3
 801347c:	4806      	ldr	r0, [pc, #24]	@ (8013498 <prvTCPReturn_SetEndPoint+0x134>)
 801347e:	f00e fa8b 	bl	8021998 <lUDPLoggingPrintf>
    }
 8013482:	bf00      	nop
 8013484:	3718      	adds	r7, #24
 8013486:	46bd      	mov	sp, r7
 8013488:	bd80      	pop	{r7, pc}
 801348a:	bf00      	nop
 801348c:	08026088 	.word	0x08026088
 8013490:	080260b0 	.word	0x080260b0
 8013494:	080260e4 	.word	0x080260e4
 8013498:	08026118 	.word	0x08026118

0801349c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 801349c:	b580      	push	{r7, lr}
 801349e:	b096      	sub	sp, #88	@ 0x58
 80134a0:	af02      	add	r7, sp, #8
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 80134a8:	2300      	movs	r3, #0
 80134aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d004      	beq.n	80134be <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 80134b4:	68bb      	ldr	r3, [r7, #8]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80134bc:	e002      	b.n	80134c4 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	33aa      	adds	r3, #170	@ 0xaa
 80134c2:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f7f6 f9c9 	bl	800985c <uxIPHeaderSizeSocket>
 80134ca:	4603      	mov	r3, r0
 80134cc:	330e      	adds	r3, #14
 80134ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80134d0:	4413      	add	r3, r2
 80134d2:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80134da:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 80134dc:	2300      	movs	r3, #0
 80134de:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 80134e0:	2300      	movs	r3, #0
 80134e2:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80134e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134e6:	7b5b      	ldrb	r3, [r3, #13]
 80134e8:	f043 0310 	orr.w	r3, r3, #16
 80134ec:	b2da      	uxtb	r2, r3
 80134ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134f0:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 80a5 	beq.w	8013648 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013504:	2b01      	cmp	r3, #1
 8013506:	d90a      	bls.n	801351e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801350e:	f107 0210 	add.w	r2, r7, #16
 8013512:	4619      	mov	r1, r3
 8013514:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013516:	f002 fb13 	bl	8015b40 <ulTCPWindowTxGet>
 801351a:	4603      	mov	r3, r0
 801351c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801351e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013520:	2b00      	cmp	r3, #0
 8013522:	f340 8091 	ble.w	8013648 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	6819      	ldr	r1, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7ff fe9c 	bl	801326c <prvTCPBufferResize>
 8013534:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013538:	2b00      	cmp	r3, #0
 801353a:	f000 8082 	beq.w	8013642 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013542:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013548:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f7f6 f986 	bl	800985c <uxIPHeaderSizeSocket>
 8013550:	4603      	mov	r3, r0
 8013552:	330e      	adds	r3, #14
 8013554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013556:	4413      	add	r3, r2
 8013558:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7f6 f97e 	bl	800985c <uxIPHeaderSizeSocket>
 8013560:	4602      	mov	r2, r0
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4413      	add	r3, r2
 8013566:	3322      	adds	r3, #34	@ 0x22
 8013568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801356a:	4413      	add	r3, r2
 801356c:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	4619      	mov	r1, r3
 8013580:	f7fc fef9 	bl	8010376 <uxStreamBufferDistance>
 8013584:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801358c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801358e:	2201      	movs	r2, #1
 8013590:	9200      	str	r2, [sp, #0]
 8013592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013596:	f7fd f84c 	bl	8010632 <uxStreamBufferGet>
 801359a:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 801359c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801359e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d007      	beq.n	80135b4 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 80135a4:	6939      	ldr	r1, [r7, #16]
 80135a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135a8:	9300      	str	r3, [sp, #0]
 80135aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135ae:	4898      	ldr	r0, [pc, #608]	@ (8013810 <prvTCPPrepareSend+0x374>)
 80135b0:	f00e f9f2 	bl	8021998 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80135ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d041      	beq.n	8013648 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	4619      	mov	r1, r3
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80135d4:	689b      	ldr	r3, [r3, #8]
 80135d6:	461a      	mov	r2, r3
 80135d8:	f7fc fecd 	bl	8010376 <uxStreamBufferDistance>
 80135dc:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 80135de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d130      	bne.n	8013648 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80135ec:	689b      	ldr	r3, [r3, #8]
 80135ee:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013604:	6a3b      	ldr	r3, [r7, #32]
 8013606:	9301      	str	r3, [sp, #4]
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013612:	4880      	ldr	r0, [pc, #512]	@ (8013814 <prvTCPPrepareSend+0x378>)
 8013614:	f00e f9c0 	bl	8021998 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801361a:	7b5b      	ldrb	r3, [r3, #13]
 801361c:	f043 0301 	orr.w	r3, r3, #1
 8013620:	b2da      	uxtb	r2, r3
 8013622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013624:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801362a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801362c:	441a      	add	r2, r3
 801362e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013630:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013638:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801363c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013640:	e002      	b.n	8013648 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013642:	f04f 33ff 	mov.w	r3, #4294967295
 8013646:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801364a:	2b00      	cmp	r3, #0
 801364c:	f2c0 8099 	blt.w	8013782 <prvTCPPrepareSend+0x2e6>
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013656:	2b05      	cmp	r3, #5
 8013658:	f040 8093 	bne.w	8013782 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013662:	f003 0320 	and.w	r3, r3, #32
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b00      	cmp	r3, #0
 801366a:	d029      	beq.n	80136c0 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 801366c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801366e:	f002 f8e7 	bl	8015840 <xTCPWindowTxDone>
 8013672:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013674:	2b00      	cmp	r3, #0
 8013676:	d023      	beq.n	80136c0 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013678:	68fa      	ldr	r2, [r7, #12]
 801367a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801367e:	f36f 1345 	bfc	r3, #5, #1
 8013682:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013688:	7b5b      	ldrb	r3, [r3, #13]
 801368a:	f043 0301 	orr.w	r3, r3, #1
 801368e:	b2da      	uxtb	r2, r3
 8013690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013692:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801369a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801369e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80136a8:	f043 0301 	orr.w	r3, r3, #1
 80136ac:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80136b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b2:	6a1a      	ldr	r2, [r3, #32]
 80136b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b6:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 80136b8:	2106      	movs	r1, #6
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	f7fd f960 	bl	8010980 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80136c6:	2b03      	cmp	r3, #3
 80136c8:	d90f      	bls.n	80136ea <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80136d4:	461a      	mov	r2, r3
 80136d6:	4850      	ldr	r0, [pc, #320]	@ (8013818 <prvTCPPrepareSend+0x37c>)
 80136d8:	f00e f95e 	bl	8021998 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80136dc:	2108      	movs	r1, #8
 80136de:	68f8      	ldr	r0, [r7, #12]
 80136e0:	f7fd f94e 	bl	8010980 <vTCPStateChange>
                    lDataLen = -1;
 80136e4:	f04f 33ff 	mov.w	r3, #4294967295
 80136e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80136ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d148      	bne.n	8013782 <prvTCPPrepareSend+0x2e6>
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80136f6:	f003 0301 	and.w	r3, r3, #1
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d140      	bne.n	8013782 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013700:	f7f0 fcfa 	bl	80040f8 <xTaskGetTickCount>
 8013704:	4602      	mov	r2, r0
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801370c:	1ad3      	subs	r3, r2, r3
 801370e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013710:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013714:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013720:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013724:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013726:	697a      	ldr	r2, [r7, #20]
 8013728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801372a:	429a      	cmp	r2, r3
 801372c:	d929      	bls.n	8013782 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 801372e:	f7f0 fce3 	bl	80040f8 <xTaskGetTickCount>
 8013732:	4602      	mov	r2, r0
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 801373a:	4b38      	ldr	r3, [pc, #224]	@ (801381c <prvTCPPrepareSend+0x380>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d00b      	beq.n	801375a <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801374c:	461a      	mov	r2, r3
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013754:	4832      	ldr	r0, [pc, #200]	@ (8013820 <prvTCPPrepareSend+0x384>)
 8013756:	f00e f91f 	bl	8021998 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 801375a:	68fa      	ldr	r2, [r7, #12]
 801375c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013760:	f043 0302 	orr.w	r3, r3, #2
 8013764:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801376e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013778:	3301      	adds	r3, #1
 801377a:	b2da      	uxtb	r2, r3
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8013782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013784:	2b00      	cmp	r3, #0
 8013786:	db3e      	blt.n	8013806 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8013788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801378a:	2b00      	cmp	r3, #0
 801378c:	dc0f      	bgt.n	80137ae <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013794:	f003 0301 	and.w	r3, r3, #1
 8013798:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 801379a:	2b00      	cmp	r3, #0
 801379c:	d107      	bne.n	80137ae <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80137a4:	f003 0302 	and.w	r3, r3, #2
 80137a8:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d02b      	beq.n	8013806 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 80137ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137b0:	7b5b      	ldrb	r3, [r3, #13]
 80137b2:	f023 0308 	bic.w	r3, r3, #8
 80137b6:	b2da      	uxtb	r2, r3
 80137b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137ba:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	3314      	adds	r3, #20
 80137c2:	b2db      	uxtb	r3, r3
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	b2da      	uxtb	r2, r3
 80137c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137ca:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 80137cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137ce:	7b5b      	ldrb	r3, [r3, #13]
 80137d0:	f043 0310 	orr.w	r3, r3, #16
 80137d4:	b2da      	uxtb	r2, r3
 80137d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137d8:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 80137da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d006      	beq.n	80137ee <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 80137e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137e2:	7b5b      	ldrb	r3, [r3, #13]
 80137e4:	f043 0308 	orr.w	r3, r3, #8
 80137e8:	b2da      	uxtb	r2, r3
 80137ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80137ec:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80137ee:	68f8      	ldr	r0, [r7, #12]
 80137f0:	f7f6 f834 	bl	800985c <uxIPHeaderSizeSocket>
 80137f4:	4602      	mov	r2, r0
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4413      	add	r3, r2
 80137fa:	3314      	adds	r3, #20
 80137fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 80137fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013802:	4413      	add	r3, r2
 8013804:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013808:	4618      	mov	r0, r3
 801380a:	3750      	adds	r7, #80	@ 0x50
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	0802614c 	.word	0x0802614c
 8013814:	08026180 	.word	0x08026180
 8013818:	080261a8 	.word	0x080261a8
 801381c:	20001484 	.word	0x20001484
 8013820:	080261c8 	.word	0x080261c8

08013824 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013832:	4618      	mov	r0, r3
 8013834:	f7fc fdf0 	bl	8010418 <uxStreamBufferMidSpace>
 8013838:	4603      	mov	r3, r0
 801383a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2b00      	cmp	r3, #0
 8013840:	dd1a      	ble.n	8013878 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013848:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013850:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013852:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801385a:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801385c:	f001 ff5c 	bl	8015718 <lTCPWindowTxAdd>
 8013860:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	2b00      	cmp	r3, #0
 8013866:	dd07      	ble.n	8013878 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801386e:	68ba      	ldr	r2, [r7, #8]
 8013870:	4611      	mov	r1, r2
 8013872:	4618      	mov	r0, r3
 8013874:	f7fc fdf7 	bl	8010466 <vStreamBufferMoveMid>
            }
        }
    }
 8013878:	bf00      	nop
 801387a:	3710      	adds	r7, #16
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013880:	b590      	push	{r4, r7, lr}
 8013882:	b08b      	sub	sp, #44	@ 0x2c
 8013884:	af02      	add	r7, sp, #8
 8013886:	6078      	str	r0, [r7, #4]
 8013888:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801388e:	6838      	ldr	r0, [r7, #0]
 8013890:	f7f5 ffca 	bl	8009828 <uxIPHeaderSizePacket>
 8013894:	4603      	mov	r3, r0
 8013896:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013898:	4423      	add	r3, r4
 801389a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80138a6:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80138ae:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d05c      	beq.n	8013970 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 80138b6:	4b4f      	ldr	r3, [pc, #316]	@ (80139f4 <prvSetOptions+0x174>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	db44      	blt.n	8013948 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80138c2:	4618      	mov	r0, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80138ca:	461c      	mov	r4, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138d2:	061a      	lsls	r2, r3, #24
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138da:	021b      	lsls	r3, r3, #8
 80138dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80138e0:	431a      	orrs	r2, r3
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138e8:	0a1b      	lsrs	r3, r3, #8
 80138ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80138ee:	431a      	orrs	r2, r3
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80138f6:	0e1b      	lsrs	r3, r3, #24
 80138f8:	431a      	orrs	r2, r3
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013900:	1ad3      	subs	r3, r2, r3
 8013902:	693a      	ldr	r2, [r7, #16]
 8013904:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013908:	0611      	lsls	r1, r2, #24
 801390a:	693a      	ldr	r2, [r7, #16]
 801390c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013910:	0212      	lsls	r2, r2, #8
 8013912:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013916:	4311      	orrs	r1, r2
 8013918:	693a      	ldr	r2, [r7, #16]
 801391a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801391e:	0a12      	lsrs	r2, r2, #8
 8013920:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013924:	4311      	orrs	r1, r2
 8013926:	693a      	ldr	r2, [r7, #16]
 8013928:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801392c:	0e12      	lsrs	r2, r2, #24
 801392e:	4311      	orrs	r1, r2
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013936:	1a8a      	subs	r2, r1, r2
 8013938:	9201      	str	r2, [sp, #4]
 801393a:	9300      	str	r3, [sp, #0]
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	4622      	mov	r2, r4
 8013940:	4601      	mov	r1, r0
 8013942:	482d      	ldr	r0, [pc, #180]	@ (80139f8 <prvSetOptions+0x178>)
 8013944:	f00e f828 	bl	8021998 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	3380      	adds	r3, #128	@ 0x80
 801394c:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	3314      	adds	r3, #20
 8013952:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013954:	69fa      	ldr	r2, [r7, #28]
 8013956:	68f9      	ldr	r1, [r7, #12]
 8013958:	68b8      	ldr	r0, [r7, #8]
 801395a:	f00e fa39 	bl	8021dd0 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	b2db      	uxtb	r3, r3
 8013962:	3314      	adds	r3, #20
 8013964:	b2db      	uxtb	r3, r3
 8013966:	009b      	lsls	r3, r3, #2
 8013968:	b2da      	uxtb	r2, r3
 801396a:	697b      	ldr	r3, [r7, #20]
 801396c:	731a      	strb	r2, [r3, #12]
 801396e:	e03c      	b.n	80139ea <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013976:	2b04      	cmp	r3, #4
 8013978:	d937      	bls.n	80139ea <prvSetOptions+0x16a>
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013980:	f003 0301 	and.w	r3, r3, #1
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b00      	cmp	r3, #0
 8013988:	d02f      	beq.n	80139ea <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013990:	f36f 0300 	bfc	r3, #0, #1
 8013994:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013998:	4b16      	ldr	r3, [pc, #88]	@ (80139f4 <prvSetOptions+0x174>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	db06      	blt.n	80139ae <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80139a6:	4619      	mov	r1, r3
 80139a8:	4814      	ldr	r0, [pc, #80]	@ (80139fc <prvSetOptions+0x17c>)
 80139aa:	f00d fff5 	bl	8021998 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 80139ae:	697b      	ldr	r3, [r7, #20]
 80139b0:	2202      	movs	r2, #2
 80139b2:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	2204      	movs	r2, #4
 80139b8:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80139c0:	0a1b      	lsrs	r3, r3, #8
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	b2da      	uxtb	r2, r3
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80139d0:	b2da      	uxtb	r2, r3
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 80139d6:	2304      	movs	r3, #4
 80139d8:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	3314      	adds	r3, #20
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	b2da      	uxtb	r2, r3
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80139ea:	69fb      	ldr	r3, [r7, #28]
    }
 80139ec:	4618      	mov	r0, r3
 80139ee:	3724      	adds	r7, #36	@ 0x24
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd90      	pop	{r4, r7, pc}
 80139f4:	20001484 	.word	0x20001484
 80139f8:	080261e8 	.word	0x080261e8
 80139fc:	08026210 	.word	0x08026210

08013a00 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a02:	b093      	sub	sp, #76	@ 0x4c
 8013a04:	af04      	add	r7, sp, #16
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
 8013a0c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7f5 ff05 	bl	8009828 <uxIPHeaderSizePacket>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013a22:	4423      	add	r3, r4
 8013a24:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013a30:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013a36:	68bb      	ldr	r3, [r7, #8]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7f5 fef4 	bl	8009828 <uxIPHeaderSizePacket>
 8013a40:	4603      	mov	r3, r0
 8013a42:	3314      	adds	r3, #20
 8013a44:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a48:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	691b      	ldr	r3, [r3, #16]
 8013a52:	1ad3      	subs	r3, r2, r3
 8013a54:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d079      	beq.n	8013b5e <prvSendData+0x15e>
 8013a6a:	69ba      	ldr	r2, [r7, #24]
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	db75      	blt.n	8013b5e <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013a7c:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d16d      	bne.n	8013b5e <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a84:	6a3b      	ldr	r3, [r7, #32]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d169      	bne.n	8013b5e <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013a90:	2b05      	cmp	r3, #5
 8013a92:	d164      	bne.n	8013b5e <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a96:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013a98:	2b10      	cmp	r3, #16
 8013a9a:	d160      	bne.n	8013b5e <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013aa2:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d00f      	beq.n	8013ad2 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d005      	beq.n	8013ac8 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f003 f8c0 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	681a      	ldr	r2, [r3, #0]
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8013ad2:	687a      	ldr	r2, [r7, #4]
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d204      	bcs.n	8013ae4 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2202      	movs	r2, #2
 8013ade:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8013ae2:	e00c      	b.n	8013afe <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2214      	movs	r2, #20
 8013ae8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d103      	bne.n	8013afe <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2201      	movs	r2, #1
 8013afa:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013afe:	4b3d      	ldr	r3, [pc, #244]	@ (8013bf4 <prvSendData+0x1f4>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	dd25      	ble.n	8013b52 <prvSendData+0x152>
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013b0a:	2b17      	cmp	r3, #23
 8013b0c:	d021      	beq.n	8013b52 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013b12:	461d      	mov	r5, r3
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013b1a:	461e      	mov	r6, r3
 8013b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1e:	691a      	ldr	r2, [r3, #16]
 8013b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	1ad0      	subs	r0, r2, r3
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8013b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b2e:	69db      	ldr	r3, [r3, #28]
 8013b30:	1ad3      	subs	r3, r2, r3
 8013b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b34:	68f9      	ldr	r1, [r7, #12]
 8013b36:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	69b9      	ldr	r1, [r7, #24]
 8013b3e:	9103      	str	r1, [sp, #12]
 8013b40:	9402      	str	r4, [sp, #8]
 8013b42:	9201      	str	r2, [sp, #4]
 8013b44:	9300      	str	r3, [sp, #0]
 8013b46:	4603      	mov	r3, r0
 8013b48:	4632      	mov	r2, r6
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	482a      	ldr	r0, [pc, #168]	@ (8013bf8 <prvSendData+0x1f8>)
 8013b4e:	f00d ff23 	bl	8021998 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	2200      	movs	r2, #0
 8013b56:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8013b5c:	e015      	b.n	8013b8a <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d010      	beq.n	8013b8a <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d005      	beq.n	8013b82 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f003 f863 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2200      	movs	r2, #0
 8013b86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8013b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d02b      	beq.n	8013be8 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013b90:	4b18      	ldr	r3, [pc, #96]	@ (8013bf4 <prvSendData+0x1f4>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b01      	cmp	r3, #1
 8013b96:	dd1d      	ble.n	8013bd4 <prvSendData+0x1d4>
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013b9c:	2b17      	cmp	r3, #23
 8013b9e:	d019      	beq.n	8013bd4 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013bac:	461c      	mov	r4, r3
 8013bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb0:	691a      	ldr	r2, [r3, #16]
 8013bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb4:	68db      	ldr	r3, [r3, #12]
 8013bb6:	1ad1      	subs	r1, r2, r3
 8013bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bbe:	69db      	ldr	r3, [r3, #28]
 8013bc0:	1ad3      	subs	r3, r2, r3
 8013bc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bc4:	9201      	str	r2, [sp, #4]
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	460b      	mov	r3, r1
 8013bca:	4622      	mov	r2, r4
 8013bcc:	4601      	mov	r1, r0
 8013bce:	480b      	ldr	r0, [pc, #44]	@ (8013bfc <prvSendData+0x1fc>)
 8013bd0:	f00d fee2 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013bd4:	68bb      	ldr	r3, [r7, #8]
 8013bd6:	6819      	ldr	r1, [r3, #0]
 8013bd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bda:	2301      	movs	r3, #1
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f7ff f8ff 	bl	8012de0 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	2200      	movs	r2, #0
 8013be6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8013bea:	4618      	mov	r0, r3
 8013bec:	373c      	adds	r7, #60	@ 0x3c
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	20001484 	.word	0x20001484
 8013bf8:	08026224 	.word	0x08026224
 8013bfc:	0802625c 	.word	0x0802625c

08013c00 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	460b      	mov	r3, r1
 8013c0a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	f7f5 fe09 	bl	8009828 <uxIPHeaderSizePacket>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b14      	cmp	r3, #20
 8013c1a:	d002      	beq.n	8013c22 <prvTCPSendSpecialPacketHelper+0x22>
 8013c1c:	2b28      	cmp	r3, #40	@ 0x28
 8013c1e:	d007      	beq.n	8013c30 <prvTCPSendSpecialPacketHelper+0x30>
 8013c20:	e00d      	b.n	8013c3e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013c22:	78fb      	ldrb	r3, [r7, #3]
 8013c24:	4619      	mov	r1, r3
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f000 fb18 	bl	801425c <prvTCPSendSpecialPktHelper_IPV4>
 8013c2c:	60f8      	str	r0, [r7, #12]
                        break;
 8013c2e:	e009      	b.n	8013c44 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8013c30:	78fb      	ldrb	r3, [r7, #3]
 8013c32:	4619      	mov	r1, r3
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f000 fe8b 	bl	8014950 <prvTCPSendSpecialPktHelper_IPV6>
 8013c3a:	60f8      	str	r0, [r7, #12]
                        break;
 8013c3c:	e002      	b.n	8013c44 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	60fb      	str	r3, [r7, #12]
                    break;
 8013c42:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8013c44:	68fb      	ldr	r3, [r7, #12]
    }
 8013c46:	4618      	mov	r0, r3
 8013c48:	3710      	adds	r7, #16
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b082      	sub	sp, #8
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8013c56:	2110      	movs	r1, #16
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ff ffd1 	bl	8013c00 <prvTCPSendSpecialPacketHelper>
 8013c5e:	4603      	mov	r3, r0
    }
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8013c70:	2114      	movs	r1, #20
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7ff ffc4 	bl	8013c00 <prvTCPSendSpecialPacketHelper>
 8013c78:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}
	...

08013c84 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b0a6      	sub	sp, #152	@ 0x98
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
 8013c90:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013c92:	2300      	movs	r3, #0
 8013c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013c98:	2300      	movs	r3, #0
 8013c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8013cbc:	2314      	movs	r3, #20
 8013cbe:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d117      	bne.n	8013cfc <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013cd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013cd8:	2238      	movs	r2, #56	@ 0x38
 8013cda:	2100      	movs	r1, #0
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f00e f984 	bl	8021fea <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013cec:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013cf2:	225a      	movs	r2, #90	@ 0x5a
 8013cf4:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013cfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d114      	bne.n	8013d2e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013d10:	f7f6 f83c 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 8013d14:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d003      	beq.n	8013d28 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013d20:	2301      	movs	r3, #1
 8013d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013d26:	e002      	b.n	8013d2e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013d28:	48bc      	ldr	r0, [pc, #752]	@ (801401c <prvTCPReturnPacket_IPV4+0x398>)
 8013d2a:	f00d fe35 	bl	8021998 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013d2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	f000 8166 	beq.w	8014004 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d3e:	330e      	adds	r3, #14
 8013d40:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013d4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013d50:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013d5a:	330e      	adds	r3, #14
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10b      	bne.n	8013d84 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013d6c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013d72:	68f8      	ldr	r0, [r7, #12]
 8013d74:	f7ff faf6 	bl	8013364 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013d78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	f000 813d 	beq.w	8013ffe <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d028      	beq.n	8013ddc <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013d8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013d8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f7ff f865 	bl	8012e60 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8013d9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013d9e:	68f8      	ldr	r0, [r7, #12]
 8013da0:	f7ff f8d8 	bl	8012f54 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013da8:	061a      	lsls	r2, r3, #24
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013dae:	021b      	lsls	r3, r3, #8
 8013db0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013db4:	431a      	orrs	r2, r3
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013dba:	0a1b      	lsrs	r3, r3, #8
 8013dbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013dc0:	431a      	orrs	r2, r3
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013dc6:	0e1b      	lsrs	r3, r3, #24
 8013dc8:	431a      	orrs	r2, r3
 8013dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dcc:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8013dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dd8:	60da      	str	r2, [r3, #12]
 8013dda:	e017      	b.n	8013e0c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8013ddc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013de4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013de8:	689a      	ldr	r2, [r3, #8]
 8013dea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013dee:	605a      	str	r2, [r3, #4]
 8013df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013df4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013df6:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013df8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013dfa:	691b      	ldr	r3, [r3, #16]
 8013dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013dfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e00:	68da      	ldr	r2, [r3, #12]
 8013e02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e04:	611a      	str	r2, [r3, #16]
 8013e06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8013e0a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8013e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e0e:	2280      	movs	r2, #128	@ 0x80
 8013e10:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	021b      	lsls	r3, r3, #8
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	0a1b      	lsrs	r3, r3, #8
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	4313      	orrs	r3, r2
 8013e22:	b29a      	uxth	r2, r3
 8013e24:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e26:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8013e28:	4b7d      	ldr	r3, [pc, #500]	@ (8014020 <prvTCPReturnPacket_IPV4+0x39c>)
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	021b      	lsls	r3, r3, #8
 8013e2e:	b21a      	sxth	r2, r3
 8013e30:	4b7b      	ldr	r3, [pc, #492]	@ (8014020 <prvTCPReturnPacket_IPV4+0x39c>)
 8013e32:	881b      	ldrh	r3, [r3, #0]
 8013e34:	0a1b      	lsrs	r3, r3, #8
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	b21b      	sxth	r3, r3
 8013e3a:	4313      	orrs	r3, r2
 8013e3c:	b21b      	sxth	r3, r3
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e42:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8013e44:	4b76      	ldr	r3, [pc, #472]	@ (8014020 <prvTCPReturnPacket_IPV4+0x39c>)
 8013e46:	881b      	ldrh	r3, [r3, #0]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	4b74      	ldr	r3, [pc, #464]	@ (8014020 <prvTCPReturnPacket_IPV4+0x39c>)
 8013e4e:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8013e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013e52:	2200      	movs	r2, #0
 8013e54:	719a      	strb	r2, [r3, #6]
 8013e56:	2200      	movs	r2, #0
 8013e58:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8013e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e5e:	781a      	ldrb	r2, [r3, #0]
 8013e60:	785b      	ldrb	r3, [r3, #1]
 8013e62:	021b      	lsls	r3, r3, #8
 8013e64:	4313      	orrs	r3, r2
 8013e66:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8013e6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e6e:	885b      	ldrh	r3, [r3, #2]
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e76:	801a      	strh	r2, [r3, #0]
 8013e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013e7c:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8013e80:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e90:	f103 020e 	add.w	r2, r3, #14
 8013e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013e98:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013e9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e9c:	3306      	adds	r3, #6
 8013e9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ea4:	691b      	ldr	r3, [r3, #16]
 8013ea6:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8013ea8:	f107 0214 	add.w	r2, r7, #20
 8013eac:	f107 011c 	add.w	r1, r7, #28
 8013eb0:	f107 0318 	add.w	r3, r7, #24
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7f2 fe9d 	bl	8006bf4 <eARPGetCacheEntry>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8013ec0:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8013ec4:	2b01      	cmp	r3, #1
 8013ec6:	d108      	bne.n	8013eda <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8013ec8:	f107 031c 	add.w	r3, r7, #28
 8013ecc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013ed0:	697a      	ldr	r2, [r7, #20]
 8013ed2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8013ed8:	e003      	b.n	8013ee2 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013edc:	3306      	adds	r3, #6
 8013ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 808a 	beq.w	8014002 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013eee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ef0:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013ef2:	2206      	movs	r2, #6
 8013ef4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013ef8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013efa:	f00d ff69 	bl	8021dd0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f04:	33e8      	adds	r3, #232	@ 0xe8
 8013f06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013f0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f0c:	3306      	adds	r3, #6
 8013f0e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013f10:	2206      	movs	r2, #6
 8013f12:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013f16:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013f18:	f00d ff5a 	bl	8021dd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f22:	2b3b      	cmp	r3, #59	@ 0x3b
 8013f24:	d81a      	bhi.n	8013f5c <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013f30:	e00c      	b.n	8013f4c <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f3c:	4413      	add	r3, r2
 8013f3e:	2200      	movs	r2, #0
 8013f40:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f46:	3301      	adds	r3, #1
 8013f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013f50:	2b3b      	cmp	r3, #59	@ 0x3b
 8013f52:	ddee      	ble.n	8013f32 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013f54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f58:	223c      	movs	r2, #60	@ 0x3c
 8013f5a:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013f5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f62:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d104      	bne.n	8013f74 <prvTCPReturnPacket_IPV4+0x2f0>
 8013f6a:	f240 111d 	movw	r1, #285	@ 0x11d
 8013f6e:	482d      	ldr	r0, [pc, #180]	@ (8014024 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013f70:	f7ed fbea 	bl	8001748 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f7a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013f7e:	68db      	ldr	r3, [r3, #12]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d104      	bne.n	8013f8e <prvTCPReturnPacket_IPV4+0x30a>
 8013f84:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8013f88:	4826      	ldr	r0, [pc, #152]	@ (8014024 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013f8a:	f7ed fbdd 	bl	8001748 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013f8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f94:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013f98:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013fa6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013fa8:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d121      	bne.n	8013ff6 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fb6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8013fba:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8013fbe:	021b      	lsls	r3, r3, #8
 8013fc0:	4313      	orrs	r3, r2
 8013fc2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013fcc:	b29a      	uxth	r2, r3
 8013fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fd2:	845a      	strh	r2, [r3, #34]	@ 0x22
 8013fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013fd8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8013fdc:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013fe0:	691a      	ldr	r2, [r3, #16]
 8013fe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013fe4:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013fe8:	3306      	adds	r3, #6
 8013fea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013fec:	2206      	movs	r2, #6
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f00d feee 	bl	8021dd0 <memcpy>
 8013ff4:	e006      	b.n	8014004 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013ffc:	e002      	b.n	8014004 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8013ffe:	bf00      	nop
 8014000:	e000      	b.n	8014004 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014002:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014004:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014008:	2b01      	cmp	r3, #1
 801400a:	d103      	bne.n	8014014 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801400c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014010:	f002 fe1a 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014014:	bf00      	nop
 8014016:	3798      	adds	r7, #152	@ 0x98
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	08026288 	.word	0x08026288
 8014020:	20000fdc 	.word	0x20000fdc
 8014024:	080262b0 	.word	0x080262b0

08014028 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801402a:	b093      	sub	sp, #76	@ 0x4c
 801402c:	af06      	add	r7, sp, #24
 801402e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014030:	2301      	movs	r3, #1
 8014032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014034:	2300      	movs	r3, #0
 8014036:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014038:	f107 030c 	add.w	r3, r7, #12
 801403c:	2206      	movs	r2, #6
 801403e:	2100      	movs	r1, #0
 8014040:	4618      	mov	r0, r3
 8014042:	f00d ffd2 	bl	8021fea <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801404a:	061a      	lsls	r2, r3, #24
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014050:	021b      	lsls	r3, r3, #8
 8014052:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014056:	431a      	orrs	r2, r3
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801405c:	0a1b      	lsrs	r3, r3, #8
 801405e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014062:	431a      	orrs	r2, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014068:	0e1b      	lsrs	r3, r3, #24
 801406a:	4313      	orrs	r3, r2
 801406c:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014074:	f107 010c 	add.w	r1, r7, #12
 8014078:	f107 0314 	add.w	r3, r7, #20
 801407c:	4618      	mov	r0, r3
 801407e:	f7f2 fdb9 	bl	8006bf4 <eARPGetCacheEntry>
 8014082:	4603      	mov	r3, r0
 8014084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801408c:	2b01      	cmp	r3, #1
 801408e:	d037      	beq.n	8014100 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014096:	3301      	adds	r3, #1
 8014098:	b2da      	uxtb	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	061a      	lsls	r2, r3, #24
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	021b      	lsls	r3, r3, #8
 80140ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80140b0:	431a      	orrs	r2, r3
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	0a1b      	lsrs	r3, r3, #8
 80140b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80140ba:	431a      	orrs	r2, r3
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	0e1b      	lsrs	r3, r3, #24
 80140c0:	431a      	orrs	r2, r3
 80140c2:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 80140c6:	7b38      	ldrb	r0, [r7, #12]
 80140c8:	7b7c      	ldrb	r4, [r7, #13]
 80140ca:	7bbd      	ldrb	r5, [r7, #14]
 80140cc:	7bfe      	ldrb	r6, [r7, #15]
 80140ce:	f897 c010 	ldrb.w	ip, [r7, #16]
 80140d2:	f8c7 c000 	str.w	ip, [r7]
 80140d6:	f897 c011 	ldrb.w	ip, [r7, #17]
 80140da:	4663      	mov	r3, ip
 80140dc:	9305      	str	r3, [sp, #20]
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	9304      	str	r3, [sp, #16]
 80140e2:	9603      	str	r6, [sp, #12]
 80140e4:	9502      	str	r5, [sp, #8]
 80140e6:	9401      	str	r4, [sp, #4]
 80140e8:	9000      	str	r0, [sp, #0]
 80140ea:	4673      	mov	r3, lr
 80140ec:	485a      	ldr	r0, [pc, #360]	@ (8014258 <prvTCPPrepareConnect_IPV4+0x230>)
 80140ee:	f00d fc53 	bl	8021998 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 80140f2:	697b      	ldr	r3, [r7, #20]
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7f2 ffd1 	bl	800709c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 80140fa:	2300      	movs	r3, #0
 80140fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80140fe:	e000      	b.n	8014102 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014100:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014104:	2b00      	cmp	r3, #0
 8014106:	d010      	beq.n	801412a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801411a:	f7ed fb35 	bl	8001788 <ulApplicationGetNextSequenceNumber>
 801411e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014122:	2b00      	cmp	r3, #0
 8014124:	d101      	bne.n	801412a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014126:	2300      	movs	r3, #0
 8014128:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801412c:	2b00      	cmp	r3, #0
 801412e:	f000 808d 	beq.w	801424c <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	33aa      	adds	r3, #170	@ 0xaa
 8014136:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014138:	6a3b      	ldr	r3, [r7, #32]
 801413a:	330e      	adds	r3, #14
 801413c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2200      	movs	r2, #0
 8014142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801414c:	f043 0308 	orr.w	r3, r3, #8
 8014150:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	33aa      	adds	r3, #170	@ 0xaa
 8014158:	225a      	movs	r2, #90	@ 0x5a
 801415a:	2100      	movs	r1, #0
 801415c:	4618      	mov	r0, r3
 801415e:	f00d ff44 	bl	8021fea <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014162:	6a3b      	ldr	r3, [r7, #32]
 8014164:	3306      	adds	r3, #6
 8014166:	461a      	mov	r2, r3
 8014168:	f107 030c 	add.w	r3, r7, #12
 801416c:	6818      	ldr	r0, [r3, #0]
 801416e:	6010      	str	r0, [r2, #0]
 8014170:	889b      	ldrh	r3, [r3, #4]
 8014172:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	2200      	movs	r2, #0
 8014178:	f042 0208 	orr.w	r2, r2, #8
 801417c:	731a      	strb	r2, [r3, #12]
 801417e:	2200      	movs	r2, #0
 8014180:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	2245      	movs	r2, #69	@ 0x45
 8014186:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014188:	2338      	movs	r3, #56	@ 0x38
 801418a:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 801418c:	8b7b      	ldrh	r3, [r7, #26]
 801418e:	021b      	lsls	r3, r3, #8
 8014190:	b21a      	sxth	r2, r3
 8014192:	8b7b      	ldrh	r3, [r7, #26]
 8014194:	0a1b      	lsrs	r3, r3, #8
 8014196:	b29b      	uxth	r3, r3
 8014198:	b21b      	sxth	r3, r3
 801419a:	4313      	orrs	r3, r2
 801419c:	b21b      	sxth	r3, r3
 801419e:	b29a      	uxth	r2, r3
 80141a0:	69fb      	ldr	r3, [r7, #28]
 80141a2:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	2280      	movs	r2, #128	@ 0x80
 80141a8:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	2206      	movs	r2, #6
 80141ae:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141b4:	061a      	lsls	r2, r3, #24
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141ba:	021b      	lsls	r3, r3, #8
 80141bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141c0:	431a      	orrs	r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141c6:	0a1b      	lsrs	r3, r3, #8
 80141c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141cc:	431a      	orrs	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80141d2:	0e1b      	lsrs	r3, r3, #24
 80141d4:	431a      	orrs	r2, r3
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80141e0:	021b      	lsls	r3, r3, #8
 80141e2:	b21a      	sxth	r2, r3
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80141ea:	0a1b      	lsrs	r3, r3, #8
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	b21b      	sxth	r3, r3
 80141f0:	4313      	orrs	r3, r2
 80141f2:	b21b      	sxth	r3, r3
 80141f4:	b29a      	uxth	r2, r3
 80141f6:	6a3b      	ldr	r3, [r7, #32]
 80141f8:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80141fe:	021b      	lsls	r3, r3, #8
 8014200:	b21a      	sxth	r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014206:	0a1b      	lsrs	r3, r3, #8
 8014208:	b29b      	uxth	r3, r3
 801420a:	b21b      	sxth	r3, r3
 801420c:	4313      	orrs	r3, r2
 801420e:	b21b      	sxth	r3, r3
 8014210:	b29a      	uxth	r2, r3
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	2200      	movs	r2, #0
 801421a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014222:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014226:	6a3b      	ldr	r3, [r7, #32]
 8014228:	2250      	movs	r2, #80	@ 0x50
 801422a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801422e:	6a3b      	ldr	r3, [r7, #32]
 8014230:	2202      	movs	r2, #2
 8014232:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fc3c 	bl	8014ab4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801423c:	6878      	ldr	r0, [r7, #4]
 801423e:	f7fe ff2b 	bl	8013098 <prvTCPCreateWindow>
 8014242:	4603      	mov	r3, r0
 8014244:	2b01      	cmp	r3, #1
 8014246:	d001      	beq.n	801424c <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8014248:	2300      	movs	r3, #0
 801424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 801424c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801424e:	4618      	mov	r0, r3
 8014250:	3734      	adds	r7, #52	@ 0x34
 8014252:	46bd      	mov	sp, r7
 8014254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014256:	bf00      	nop
 8014258:	080262f0 	.word	0x080262f0

0801425c <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b086      	sub	sp, #24
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	460b      	mov	r3, r1
 8014266:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801426c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801426e:	2328      	movs	r3, #40	@ 0x28
 8014270:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014278:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	78fa      	ldrb	r2, [r7, #3]
 801427e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	2250      	movs	r2, #80	@ 0x50
 8014286:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801428a:	7bfb      	ldrb	r3, [r7, #15]
 801428c:	f003 0302 	and.w	r3, r3, #2
 8014290:	2b00      	cmp	r3, #0
 8014292:	d02c      	beq.n	80142ee <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801429a:	061a      	lsls	r2, r3, #24
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80142a2:	021b      	lsls	r3, r3, #8
 80142a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80142a8:	431a      	orrs	r2, r3
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80142b0:	0a1b      	lsrs	r3, r3, #8
 80142b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80142b6:	431a      	orrs	r2, r3
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80142be:	0e1b      	lsrs	r3, r3, #24
 80142c0:	4313      	orrs	r3, r2
 80142c2:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	3301      	adds	r3, #1
 80142c8:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	061a      	lsls	r2, r3, #24
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	021b      	lsls	r3, r3, #8
 80142d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80142d6:	431a      	orrs	r2, r3
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	0a1b      	lsrs	r3, r3, #8
 80142dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80142e0:	431a      	orrs	r2, r3
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	0e1b      	lsrs	r3, r3, #24
 80142e6:	431a      	orrs	r2, r3
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80142ee:	2300      	movs	r3, #0
 80142f0:	693a      	ldr	r2, [r7, #16]
 80142f2:	6879      	ldr	r1, [r7, #4]
 80142f4:	2000      	movs	r0, #0
 80142f6:	f7fe fd73 	bl	8012de0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80142fa:	2300      	movs	r3, #0
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3718      	adds	r7, #24
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014304:	b5b0      	push	{r4, r5, r7, lr}
 8014306:	b0aa      	sub	sp, #168	@ 0xa8
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
 8014310:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014312:	2300      	movs	r3, #0
 8014314:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014318:	2300      	movs	r3, #0
 801431a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801431e:	2300      	movs	r3, #0
 8014320:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 801432a:	2300      	movs	r3, #0
 801432c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014336:	2300      	movs	r3, #0
 8014338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 801433c:	2300      	movs	r3, #0
 801433e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8014342:	2328      	movs	r3, #40	@ 0x28
 8014344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8014348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d103      	bne.n	8014358 <prvTCPReturnPacket_IPV6+0x54>
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	2b00      	cmp	r3, #0
 8014354:	f000 81ae 	beq.w	80146b4 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d117      	bne.n	8014390 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014360:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014364:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014368:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801436c:	2238      	movs	r2, #56	@ 0x38
 801436e:	2100      	movs	r1, #0
 8014370:	4618      	mov	r0, r3
 8014372:	f00d fe3a 	bl	8021fea <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 801437c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014380:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014386:	225a      	movs	r2, #90	@ 0x5a
 8014388:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 801438a:	2300      	movs	r3, #0
 801438c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014390:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014394:	2b00      	cmp	r3, #0
 8014396:	d114      	bne.n	80143c2 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801439e:	4619      	mov	r1, r3
 80143a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80143a4:	f7f5 fcf2 	bl	8009d8c <pxDuplicateNetworkBufferWithDescriptor>
 80143a8:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 80143ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d003      	beq.n	80143bc <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 80143b4:	2301      	movs	r3, #1
 80143b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80143ba:	e002      	b.n	80143c2 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80143bc:	48c0      	ldr	r0, [pc, #768]	@ (80146c0 <prvTCPReturnPacket_IPV6+0x3bc>)
 80143be:	f00d faeb 	bl	8021998 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80143c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	f000 8175 	beq.w	80146b6 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80143cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d103      	bne.n	80143de <prvTCPReturnPacket_IPV6+0xda>
 80143d6:	219d      	movs	r1, #157	@ 0x9d
 80143d8:	48ba      	ldr	r0, [pc, #744]	@ (80146c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 80143da:	f7ed f9b5 	bl	8001748 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80143de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143e4:	330e      	adds	r3, #14
 80143e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80143ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80143ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80143f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80143f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80143fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014402:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014406:	330e      	adds	r3, #14
 8014408:	4413      	add	r3, r2
 801440a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801440e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014414:	2b00      	cmp	r3, #0
 8014416:	d117      	bne.n	8014448 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014418:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801441c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014420:	68f8      	ldr	r0, [r7, #12]
 8014422:	f7fe ff9f 	bl	8013364 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801442c:	2b00      	cmp	r3, #0
 801442e:	d10b      	bne.n	8014448 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014434:	2b00      	cmp	r3, #0
 8014436:	d003      	beq.n	8014440 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014438:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801443c:	f002 fc04 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8014440:	2300      	movs	r3, #0
 8014442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8014446:	e136      	b.n	80146b6 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d025      	beq.n	801449a <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801444e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014452:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014456:	68f8      	ldr	r0, [r7, #12]
 8014458:	f7fe fd02 	bl	8012e60 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014462:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014466:	68f8      	ldr	r0, [r7, #12]
 8014468:	f7fe fd74 	bl	8012f54 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801446c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014470:	f103 0018 	add.w	r0, r3, #24
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	3354      	adds	r3, #84	@ 0x54
 8014478:	2210      	movs	r2, #16
 801447a:	4619      	mov	r1, r3
 801447c:	f00d fca8 	bl	8021dd0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014484:	f103 0008 	add.w	r0, r3, #8
 8014488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801448e:	3338      	adds	r3, #56	@ 0x38
 8014490:	2210      	movs	r2, #16
 8014492:	4619      	mov	r1, r3
 8014494:	f00d fc9c 	bl	8021dd0 <memcpy>
 8014498:	e02d      	b.n	80144f6 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801449a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80144a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144a6:	689a      	ldr	r2, [r3, #8]
 80144a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144ac:	605a      	str	r2, [r3, #4]
 80144ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80144b4:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80144b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144ba:	3318      	adds	r3, #24
 80144bc:	f107 0410 	add.w	r4, r7, #16
 80144c0:	6818      	ldr	r0, [r3, #0]
 80144c2:	6859      	ldr	r1, [r3, #4]
 80144c4:	689a      	ldr	r2, [r3, #8]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80144ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144ce:	f103 0018 	add.w	r0, r3, #24
 80144d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144d6:	3308      	adds	r3, #8
 80144d8:	2210      	movs	r2, #16
 80144da:	4619      	mov	r1, r3
 80144dc:	f00d fc78 	bl	8021dd0 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80144e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80144e4:	3308      	adds	r3, #8
 80144e6:	461d      	mov	r5, r3
 80144e8:	f107 0410 	add.w	r4, r7, #16
 80144ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144ee:	6028      	str	r0, [r5, #0]
 80144f0:	6069      	str	r1, [r5, #4]
 80144f2:	60aa      	str	r2, [r5, #8]
 80144f4:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	3b28      	subs	r3, #40	@ 0x28
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	021b      	lsls	r3, r3, #8
 8014500:	b29a      	uxth	r2, r3
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	3b28      	subs	r3, #40	@ 0x28
 8014506:	0a1b      	lsrs	r3, r3, #8
 8014508:	b29b      	uxth	r3, r3
 801450a:	4313      	orrs	r3, r2
 801450c:	b29a      	uxth	r2, r3
 801450e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014512:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014518:	781a      	ldrb	r2, [r3, #0]
 801451a:	785b      	ldrb	r3, [r3, #1]
 801451c:	021b      	lsls	r3, r3, #8
 801451e:	4313      	orrs	r3, r2
 8014520:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014524:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014528:	885b      	ldrh	r3, [r3, #2]
 801452a:	b29a      	uxth	r2, r3
 801452c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014530:	801a      	strh	r2, [r3, #0]
 8014532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014536:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 801453a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 801453c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801454a:	f103 020e 	add.w	r2, r3, #14
 801454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014552:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014558:	3318      	adds	r3, #24
 801455a:	f107 0420 	add.w	r4, r7, #32
 801455e:	6818      	ldr	r0, [r3, #0]
 8014560:	6859      	ldr	r1, [r3, #4]
 8014562:	689a      	ldr	r2, [r3, #8]
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8014568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801456c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014570:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014574:	f107 0320 	add.w	r3, r7, #32
 8014578:	4618      	mov	r0, r3
 801457a:	f7f6 ffa7 	bl	800b4cc <eNDGetCacheEntry>
 801457e:	4603      	mov	r3, r0
 8014580:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8014584:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8014588:	2b01      	cmp	r3, #1
 801458a:	d104      	bne.n	8014596 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 801458c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014594:	e004      	b.n	80145a0 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014596:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801459a:	3306      	adds	r3, #6
 801459c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 80145a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80145a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 80145a8:	2206      	movs	r2, #6
 80145aa:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80145ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80145b2:	f00d fc0d 	bl	8021dd0 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80145b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145bc:	33e8      	adds	r3, #232	@ 0xe8
 80145be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 80145c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80145c6:	3306      	adds	r3, #6
 80145c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80145cc:	2206      	movs	r2, #6
 80145ce:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80145d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80145d6:	f00d fbfb 	bl	8021dd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80145da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145e0:	2b3b      	cmp	r3, #59	@ 0x3b
 80145e2:	d81a      	bhi.n	801461a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80145e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80145ee:	e00c      	b.n	801460a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80145f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80145f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80145f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80145fa:	4413      	add	r3, r2
 80145fc:	2200      	movs	r2, #0
 80145fe:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014604:	3301      	adds	r3, #1
 8014606:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801460a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801460e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014610:	ddee      	ble.n	80145f0 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014616:	223c      	movs	r2, #60	@ 0x3c
 8014618:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801461a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014620:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014624:	2b00      	cmp	r3, #0
 8014626:	d104      	bne.n	8014632 <prvTCPReturnPacket_IPV6+0x32e>
 8014628:	f44f 718c 	mov.w	r1, #280	@ 0x118
 801462c:	4825      	ldr	r0, [pc, #148]	@ (80146c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 801462e:	f7ed f88b 	bl	8001748 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014638:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801463c:	68db      	ldr	r3, [r3, #12]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d104      	bne.n	801464c <prvTCPReturnPacket_IPV6+0x348>
 8014642:	f240 1119 	movw	r1, #281	@ 0x119
 8014646:	481f      	ldr	r0, [pc, #124]	@ (80146c4 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014648:	f7ed f87e 	bl	8001748 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801464c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014652:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014656:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014658:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014660:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014664:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014666:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014668:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801466c:	2b00      	cmp	r3, #0
 801466e:	d122      	bne.n	80146b6 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014674:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8014678:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 801467c:	021b      	lsls	r3, r3, #8
 801467e:	4313      	orrs	r3, r2
 8014680:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8014684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014688:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801468a:	b29a      	uxth	r2, r3
 801468c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014690:	86da      	strh	r2, [r3, #54]	@ 0x36
 8014692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014696:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 801469a:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801469c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146a0:	f103 0008 	add.w	r0, r3, #8
 80146a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80146a8:	3318      	adds	r3, #24
 80146aa:	2210      	movs	r2, #16
 80146ac:	4619      	mov	r1, r3
 80146ae:	f00d fb8f 	bl	8021dd0 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 80146b2:	e000      	b.n	80146b6 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 80146b4:	bf00      	nop
}
 80146b6:	bf00      	nop
 80146b8:	37a8      	adds	r7, #168	@ 0xa8
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bdb0      	pop	{r4, r5, r7, pc}
 80146be:	bf00      	nop
 80146c0:	08026330 	.word	0x08026330
 80146c4:	08026358 	.word	0x08026358

080146c8 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80146c8:	b590      	push	{r4, r7, lr}
 80146ca:	b093      	sub	sp, #76	@ 0x4c
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80146d0:	2300      	movs	r3, #0
 80146d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80146d4:	2300      	movs	r3, #0
 80146d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80146d8:	2301      	movs	r3, #1
 80146da:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 80146dc:	2300      	movs	r3, #0
 80146de:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80146e0:	2300      	movs	r3, #0
 80146e2:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 80146e4:	2300      	movs	r3, #0
 80146e6:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80146e8:	f107 0310 	add.w	r3, r7, #16
 80146ec:	2206      	movs	r2, #6
 80146ee:	2100      	movs	r1, #0
 80146f0:	4618      	mov	r0, r3
 80146f2:	f00d fc7a 	bl	8021fea <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 80146f6:	f107 0318 	add.w	r3, r7, #24
 80146fa:	2210      	movs	r2, #16
 80146fc:	2100      	movs	r1, #0
 80146fe:	4618      	mov	r0, r3
 8014700:	f00d fc73 	bl	8021fea <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3354      	adds	r3, #84	@ 0x54
 8014708:	f107 0418 	add.w	r4, r7, #24
 801470c:	6818      	ldr	r0, [r3, #0]
 801470e:	6859      	ldr	r1, [r3, #4]
 8014710:	689a      	ldr	r2, [r3, #8]
 8014712:	68db      	ldr	r3, [r3, #12]
 8014714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014716:	f107 020c 	add.w	r2, r7, #12
 801471a:	f107 0110 	add.w	r1, r7, #16
 801471e:	f107 0318 	add.w	r3, r7, #24
 8014722:	4618      	mov	r0, r3
 8014724:	f7f6 fed2 	bl	800b4cc <eNDGetCacheEntry>
 8014728:	4603      	mov	r3, r0
 801472a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 801472e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014732:	68fa      	ldr	r2, [r7, #12]
 8014734:	4619      	mov	r1, r3
 8014736:	4881      	ldr	r0, [pc, #516]	@ (801493c <prvTCPPrepareConnect_IPV6+0x274>)
 8014738:	f00d f92e 	bl	8021998 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014742:	68fa      	ldr	r2, [r7, #12]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7f5 f887 	bl	800985c <uxIPHeaderSizeSocket>
 801474e:	4603      	mov	r3, r0
 8014750:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014752:	33a0      	adds	r3, #160	@ 0xa0
 8014754:	687a      	ldr	r2, [r7, #4]
 8014756:	4413      	add	r3, r2
 8014758:	330a      	adds	r3, #10
 801475a:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 801475c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014760:	2b01      	cmp	r3, #1
 8014762:	d02c      	beq.n	80147be <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801476a:	3301      	adds	r3, #1
 801476c:	b2da      	uxtb	r2, r3
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d001      	beq.n	801477e <prvTCPPrepareConnect_IPV6+0xb6>
 801477a:	4a71      	ldr	r2, [pc, #452]	@ (8014940 <prvTCPPrepareConnect_IPV6+0x278>)
 801477c:	e000      	b.n	8014780 <prvTCPPrepareConnect_IPV6+0xb8>
 801477e:	4a71      	ldr	r2, [pc, #452]	@ (8014944 <prvTCPPrepareConnect_IPV6+0x27c>)
 8014780:	f107 0318 	add.w	r3, r7, #24
 8014784:	4619      	mov	r1, r3
 8014786:	4870      	ldr	r0, [pc, #448]	@ (8014948 <prvTCPPrepareConnect_IPV6+0x280>)
 8014788:	f00d f906 	bl	8021998 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d012      	beq.n	80147b8 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8014792:	2356      	movs	r3, #86	@ 0x56
 8014794:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8014796:	2100      	movs	r1, #0
 8014798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801479a:	f002 f9ed 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 801479e:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 80147a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d008      	beq.n	80147b8 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147aa:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 80147ac:	f107 0318 	add.w	r3, r7, #24
 80147b0:	4619      	mov	r1, r3
 80147b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80147b4:	f7f7 f8f6 	bl	800b9a4 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 80147b8:	2300      	movs	r3, #0
 80147ba:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 80147bc:	e000      	b.n	80147c0 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 80147be:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 80147c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d010      	beq.n	80147e8 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80147d8:	f7ec ffd6 	bl	8001788 <ulApplicationGetNextSequenceNumber>
 80147dc:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 80147de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d101      	bne.n	80147e8 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 80147e4:	2300      	movs	r3, #0
 80147e6:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 80147e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d05d      	beq.n	80148aa <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	33aa      	adds	r3, #170	@ 0xaa
 80147f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 80147f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147f6:	330e      	adds	r3, #14
 80147f8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014808:	f043 0308 	orr.w	r3, r3, #8
 801480c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	33aa      	adds	r3, #170	@ 0xaa
 8014814:	225a      	movs	r2, #90	@ 0x5a
 8014816:	2100      	movs	r1, #0
 8014818:	4618      	mov	r0, r3
 801481a:	f00d fbe6 	bl	8021fea <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801481e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014820:	3306      	adds	r3, #6
 8014822:	461a      	mov	r2, r3
 8014824:	f107 0310 	add.w	r3, r7, #16
 8014828:	6818      	ldr	r0, [r3, #0]
 801482a:	6010      	str	r0, [r2, #0]
 801482c:	889b      	ldrh	r3, [r3, #4]
 801482e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	7a1b      	ldrb	r3, [r3, #8]
 8014834:	f003 0301 	and.w	r3, r3, #1
 8014838:	b2db      	uxtb	r3, r3
 801483a:	2b00      	cmp	r3, #0
 801483c:	d035      	beq.n	80148aa <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 801483e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014840:	2200      	movs	r2, #0
 8014842:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014846:	731a      	strb	r2, [r3, #12]
 8014848:	2200      	movs	r2, #0
 801484a:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801484e:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8014850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014852:	2260      	movs	r2, #96	@ 0x60
 8014854:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8014856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014858:	2200      	movs	r2, #0
 801485a:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 801485c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801485e:	2200      	movs	r2, #0
 8014860:	709a      	strb	r2, [r3, #2]
 8014862:	2200      	movs	r2, #0
 8014864:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8014866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014868:	2200      	movs	r2, #0
 801486a:	711a      	strb	r2, [r3, #4]
 801486c:	2200      	movs	r2, #0
 801486e:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8014872:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8014874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014876:	2206      	movs	r2, #6
 8014878:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 801487a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801487c:	2280      	movs	r2, #128	@ 0x80
 801487e:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8014880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014882:	f103 0008 	add.w	r0, r3, #8
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	3354      	adds	r3, #84	@ 0x54
 801488a:	2210      	movs	r2, #16
 801488c:	4619      	mov	r1, r3
 801488e:	f00d fa9f 	bl	8021dd0 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014894:	f103 0018 	add.w	r0, r3, #24
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	3328      	adds	r3, #40	@ 0x28
 801489c:	2210      	movs	r2, #16
 801489e:	4619      	mov	r1, r3
 80148a0:	f00d fa96 	bl	8021dd0 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148a8:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d03a      	beq.n	8014926 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80148bc:	021b      	lsls	r3, r3, #8
 80148be:	b21a      	sxth	r2, r3
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80148c6:	0a1b      	lsrs	r3, r3, #8
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	b21b      	sxth	r3, r3
 80148cc:	4313      	orrs	r3, r2
 80148ce:	b21b      	sxth	r3, r3
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148d4:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80148da:	021b      	lsls	r3, r3, #8
 80148dc:	b21a      	sxth	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80148e2:	0a1b      	lsrs	r3, r3, #8
 80148e4:	b29b      	uxth	r3, r3
 80148e6:	b21b      	sxth	r3, r3
 80148e8:	4313      	orrs	r3, r2
 80148ea:	b21b      	sxth	r3, r3
 80148ec:	b29a      	uxth	r2, r3
 80148ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148f0:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	2200      	movs	r2, #0
 80148f6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80148fe:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014904:	2250      	movs	r2, #80	@ 0x50
 8014906:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801490a:	2202      	movs	r2, #2
 801490c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f000 f8d0 	bl	8014ab4 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f7fe fbbf 	bl	8013098 <prvTCPCreateWindow>
 801491a:	4603      	mov	r3, r0
 801491c:	2b01      	cmp	r3, #1
 801491e:	d007      	beq.n	8014930 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014920:	2300      	movs	r3, #0
 8014922:	647b      	str	r3, [r7, #68]	@ 0x44
 8014924:	e004      	b.n	8014930 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014926:	4809      	ldr	r0, [pc, #36]	@ (801494c <prvTCPPrepareConnect_IPV6+0x284>)
 8014928:	f00d f836 	bl	8021998 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 801492c:	2300      	movs	r3, #0
 801492e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014932:	4618      	mov	r0, r3
 8014934:	374c      	adds	r7, #76	@ 0x4c
 8014936:	46bd      	mov	sp, r7
 8014938:	bd90      	pop	{r4, r7, pc}
 801493a:	bf00      	nop
 801493c:	08026398 	.word	0x08026398
 8014940:	080263c0 	.word	0x080263c0
 8014944:	080263c4 	.word	0x080263c4
 8014948:	080263c8 	.word	0x080263c8
 801494c:	080263ec 	.word	0x080263ec

08014950 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b086      	sub	sp, #24
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
 8014958:	460b      	mov	r3, r1
 801495a:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014960:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014962:	233c      	movs	r3, #60	@ 0x3c
 8014964:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801496c:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	78fa      	ldrb	r2, [r7, #3]
 8014972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	2250      	movs	r2, #80	@ 0x50
 801497a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801497e:	7bfb      	ldrb	r3, [r7, #15]
 8014980:	f003 0302 	and.w	r3, r3, #2
 8014984:	2b00      	cmp	r3, #0
 8014986:	d02c      	beq.n	80149e2 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014988:	697b      	ldr	r3, [r7, #20]
 801498a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801498e:	061a      	lsls	r2, r3, #24
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014996:	021b      	lsls	r3, r3, #8
 8014998:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801499c:	431a      	orrs	r2, r3
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80149a4:	0a1b      	lsrs	r3, r3, #8
 80149a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80149aa:	431a      	orrs	r2, r3
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80149b2:	0e1b      	lsrs	r3, r3, #24
 80149b4:	4313      	orrs	r3, r2
 80149b6:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	3301      	adds	r3, #1
 80149bc:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	061a      	lsls	r2, r3, #24
 80149c2:	68bb      	ldr	r3, [r7, #8]
 80149c4:	021b      	lsls	r3, r3, #8
 80149c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80149ca:	431a      	orrs	r2, r3
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	0a1b      	lsrs	r3, r3, #8
 80149d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80149d4:	431a      	orrs	r2, r3
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	0e1b      	lsrs	r3, r3, #24
 80149da:	431a      	orrs	r2, r3
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80149e2:	2300      	movs	r3, #0
 80149e4:	693a      	ldr	r2, [r7, #16]
 80149e6:	6879      	ldr	r1, [r7, #4]
 80149e8:	2000      	movs	r0, #0
 80149ea:	f7fe f9f9 	bl	8012de0 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80149ee:	2300      	movs	r3, #0
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80149f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149fa:	b08d      	sub	sp, #52	@ 0x34
 80149fc:	af08      	add	r7, sp, #32
 80149fe:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d002      	beq.n	8014a14 <prvTCPFlagMeaning+0x1c>
 8014a0e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014a12:	e001      	b.n	8014a18 <prvTCPFlagMeaning+0x20>
 8014a14:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d001      	beq.n	8014a26 <prvTCPFlagMeaning+0x2e>
 8014a22:	2353      	movs	r3, #83	@ 0x53
 8014a24:	e000      	b.n	8014a28 <prvTCPFlagMeaning+0x30>
 8014a26:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 8014a2e:	2a00      	cmp	r2, #0
 8014a30:	d001      	beq.n	8014a36 <prvTCPFlagMeaning+0x3e>
 8014a32:	2252      	movs	r2, #82	@ 0x52
 8014a34:	e000      	b.n	8014a38 <prvTCPFlagMeaning+0x40>
 8014a36:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014a38:	68f9      	ldr	r1, [r7, #12]
 8014a3a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 8014a3e:	2900      	cmp	r1, #0
 8014a40:	d001      	beq.n	8014a46 <prvTCPFlagMeaning+0x4e>
 8014a42:	2150      	movs	r1, #80	@ 0x50
 8014a44:	e000      	b.n	8014a48 <prvTCPFlagMeaning+0x50>
 8014a46:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014a48:	68f8      	ldr	r0, [r7, #12]
 8014a4a:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 8014a4e:	2800      	cmp	r0, #0
 8014a50:	d001      	beq.n	8014a56 <prvTCPFlagMeaning+0x5e>
 8014a52:	2041      	movs	r0, #65	@ 0x41
 8014a54:	e000      	b.n	8014a58 <prvTCPFlagMeaning+0x60>
 8014a56:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014a58:	68fc      	ldr	r4, [r7, #12]
 8014a5a:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 8014a5e:	2c00      	cmp	r4, #0
 8014a60:	d001      	beq.n	8014a66 <prvTCPFlagMeaning+0x6e>
 8014a62:	2455      	movs	r4, #85	@ 0x55
 8014a64:	e000      	b.n	8014a68 <prvTCPFlagMeaning+0x70>
 8014a66:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014a68:	68fd      	ldr	r5, [r7, #12]
 8014a6a:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 8014a6e:	2d00      	cmp	r5, #0
 8014a70:	d001      	beq.n	8014a76 <prvTCPFlagMeaning+0x7e>
 8014a72:	2545      	movs	r5, #69	@ 0x45
 8014a74:	e000      	b.n	8014a78 <prvTCPFlagMeaning+0x80>
 8014a76:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014a78:	68fe      	ldr	r6, [r7, #12]
 8014a7a:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 8014a7e:	2e00      	cmp	r6, #0
 8014a80:	d001      	beq.n	8014a86 <prvTCPFlagMeaning+0x8e>
 8014a82:	2643      	movs	r6, #67	@ 0x43
 8014a84:	e000      	b.n	8014a88 <prvTCPFlagMeaning+0x90>
 8014a86:	262e      	movs	r6, #46	@ 0x2e
 8014a88:	9606      	str	r6, [sp, #24]
 8014a8a:	9505      	str	r5, [sp, #20]
 8014a8c:	9404      	str	r4, [sp, #16]
 8014a8e:	9003      	str	r0, [sp, #12]
 8014a90:	9102      	str	r1, [sp, #8]
 8014a92:	9201      	str	r2, [sp, #4]
 8014a94:	9300      	str	r3, [sp, #0]
 8014a96:	4663      	mov	r3, ip
 8014a98:	4a04      	ldr	r2, [pc, #16]	@ (8014aac <prvTCPFlagMeaning+0xb4>)
 8014a9a:	210a      	movs	r1, #10
 8014a9c:	4804      	ldr	r0, [pc, #16]	@ (8014ab0 <prvTCPFlagMeaning+0xb8>)
 8014a9e:	f00d ffa7 	bl	80229f0 <snprintf>
            return retString;
 8014aa2:	4b03      	ldr	r3, [pc, #12]	@ (8014ab0 <prvTCPFlagMeaning+0xb8>)
        }
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3714      	adds	r7, #20
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aac:	08026418 	.word	0x08026418
 8014ab0:	20001460 	.word	0x20001460

08014ab4 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	7a1b      	ldrb	r3, [r3, #8]
 8014ac0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <prvSocketSetMSS+0x1c>
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d004      	beq.n	8014ad8 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8014ace:	e007      	b.n	8014ae0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f000 f809 	bl	8014ae8 <prvSocketSetMSS_IPV4>
                    break;
 8014ad6:	e003      	b.n	8014ae0 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f000 f84b 	bl	8014b74 <prvSocketSetMSS_IPV6>
                    break;
 8014ade:	bf00      	nop
        }
    }
 8014ae0:	bf00      	nop
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b084      	sub	sp, #16
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014af0:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014af4:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014afa:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d023      	beq.n	8014b4a <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014b02:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014b06:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b0c:	061a      	lsls	r2, r3, #24
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b12:	021b      	lsls	r3, r3, #8
 8014b14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014b18:	431a      	orrs	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b1e:	0a1b      	lsrs	r3, r3, #8
 8014b20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014b24:	431a      	orrs	r2, r3
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b2a:	0e1b      	lsrs	r3, r3, #24
 8014b2c:	431a      	orrs	r2, r3
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	405a      	eors	r2, r3
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	4013      	ands	r3, r2
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d005      	beq.n	8014b4a <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014b3e:	68f9      	ldr	r1, [r7, #12]
 8014b40:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014b44:	f7f5 fbbe 	bl	800a2c4 <FreeRTOS_min_uint32>
 8014b48:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014b54:	68f9      	ldr	r1, [r7, #12]
 8014b56:	4806      	ldr	r0, [pc, #24]	@ (8014b70 <prvSocketSetMSS_IPV4+0x88>)
 8014b58:	f00c ff1e 	bl	8021998 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	b29a      	uxth	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8014b66:	bf00      	nop
 8014b68:	3710      	adds	r7, #16
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	0802642c 	.word	0x0802642c

08014b74 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b090      	sub	sp, #64	@ 0x40
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014b7c:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014b80:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014b82:	2300      	movs	r3, #0
 8014b84:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d103      	bne.n	8014b94 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8014b8c:	481f      	ldr	r0, [pc, #124]	@ (8014c0c <prvSocketSetMSS_IPV6+0x98>)
 8014b8e:	f00c ff03 	bl	8021998 <lUDPLoggingPrintf>

            break;
 8014b92:	e036      	b.n	8014c02 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b98:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d018      	beq.n	8014bd2 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014ba0:	2314      	movs	r3, #20
 8014ba2:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014ba6:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014baa:	1a9b      	subs	r3, r3, r2
 8014bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	3354      	adds	r3, #84	@ 0x54
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7f8 fdb4 	bl	800d720 <xIPv6_GetIPType>
 8014bb8:	4603      	mov	r3, r0
 8014bba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 8014bbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d105      	bne.n	8014bd2 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014bc8:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8014bcc:	f7f5 fb7a 	bl	800a2c4 <FreeRTOS_min_uint32>
 8014bd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014bd8:	f107 0208 	add.w	r2, r7, #8
 8014bdc:	2328      	movs	r3, #40	@ 0x28
 8014bde:	200a      	movs	r0, #10
 8014be0:	f7fa f8c0 	bl	800ed64 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014bea:	f107 0208 	add.w	r2, r7, #8
 8014bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014bf0:	4807      	ldr	r0, [pc, #28]	@ (8014c10 <prvSocketSetMSS_IPV6+0x9c>)
 8014bf2:	f00c fed1 	bl	8021998 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014bf8:	b29a      	uxth	r2, r3
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014c00:	bf00      	nop
 8014c02:	bf00      	nop
 8014c04:	3740      	adds	r7, #64	@ 0x40
 8014c06:	46bd      	mov	sp, r7
 8014c08:	bd80      	pop	{r7, pc}
 8014c0a:	bf00      	nop
 8014c0c:	08026458 	.word	0x08026458
 8014c10:	08026484 	.word	0x08026484

08014c14 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014c14:	b480      	push	{r7}
 8014c16:	b085      	sub	sp, #20
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014c22:	683a      	ldr	r2, [r7, #0]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	1ad3      	subs	r3, r2, r3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	db01      	blt.n	8014c30 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 8014c2c:	2301      	movs	r3, #1
 8014c2e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8014c30:	68fb      	ldr	r3, [r7, #12]
        }
 8014c32:	4618      	mov	r0, r3
 8014c34:	3714      	adds	r7, #20
 8014c36:	46bd      	mov	sp, r7
 8014c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3c:	4770      	bx	lr

08014c3e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 8014c3e:	b480      	push	{r7}
 8014c40:	b085      	sub	sp, #20
 8014c42:	af00      	add	r7, sp, #0
 8014c44:	6078      	str	r0, [r7, #4]
 8014c46:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014c48:	2300      	movs	r3, #0
 8014c4a:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8014c4c:	683a      	ldr	r2, [r7, #0]
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	3b01      	subs	r3, #1
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	db01      	blt.n	8014c5c <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8014c58:	2301      	movs	r3, #1
 8014c5a:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
    }
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3714      	adds	r7, #20
 8014c62:	46bd      	mov	sp, r7
 8014c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c68:	4770      	bx	lr

08014c6a <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8014c6a:	b480      	push	{r7}
 8014c6c:	b085      	sub	sp, #20
 8014c6e:	af00      	add	r7, sp, #0
 8014c70:	6078      	str	r0, [r7, #4]
 8014c72:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014c74:	2300      	movs	r3, #0
 8014c76:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	1ad3      	subs	r3, r2, r3
 8014c7e:	3b01      	subs	r3, #1
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	db01      	blt.n	8014c88 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014c84:	2301      	movs	r3, #1
 8014c86:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014c88:	68fb      	ldr	r3, [r7, #12]
    }
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3714      	adds	r7, #20
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014c96:	b480      	push	{r7}
 8014c98:	b085      	sub	sp, #20
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
 8014c9e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014ca4:	687a      	ldr	r2, [r7, #4]
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	1ad3      	subs	r3, r2, r3
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	db01      	blt.n	8014cb2 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8014cae:	2301      	movs	r3, #1
 8014cb0:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
    }
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3714      	adds	r7, #20
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbe:	4770      	bx	lr

08014cc0 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	3308      	adds	r3, #8
 8014cce:	461a      	mov	r2, r3
 8014cd0:	6839      	ldr	r1, [r7, #0]
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f000 f822 	bl	8014d1c <vListInsertGeneric>
        }
 8014cd8:	bf00      	nop
 8014cda:	3708      	adds	r7, #8
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b082      	sub	sp, #8
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014ce8:	f7ef fa06 	bl	80040f8 <xTaskGetTickCount>
 8014cec:	4602      	mov	r2, r0
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	601a      	str	r2, [r3, #0]
    }
 8014cf2:	bf00      	nop
 8014cf4:	3708      	adds	r7, #8
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8014cfa:	b580      	push	{r7, lr}
 8014cfc:	b084      	sub	sp, #16
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014d02:	f7ef f9f9 	bl	80040f8 <xTaskGetTickCount>
 8014d06:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014d12:	68bb      	ldr	r3, [r7, #8]
    }
 8014d14:	4618      	mov	r0, r3
 8014d16:	3710      	adds	r7, #16
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	bd80      	pop	{r7, pc}

08014d1c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8014d1c:	b480      	push	{r7}
 8014d1e:	b085      	sub	sp, #20
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	60f8      	str	r0, [r7, #12]
 8014d24:	60b9      	str	r1, [r7, #8]
 8014d26:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	689a      	ldr	r2, [r3, #8]
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	689b      	ldr	r3, [r3, #8]
 8014d3a:	68ba      	ldr	r2, [r7, #8]
 8014d3c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	68ba      	ldr	r2, [r7, #8]
 8014d42:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8014d44:	68bb      	ldr	r3, [r7, #8]
 8014d46:	68fa      	ldr	r2, [r7, #12]
 8014d48:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	1c5a      	adds	r2, r3, #1
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	601a      	str	r2, [r3, #0]
        }
 8014d54:	bf00      	nop
 8014d56:	3714      	adds	r7, #20
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b082      	sub	sp, #8
 8014d64:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8014d66:	4827      	ldr	r0, [pc, #156]	@ (8014e04 <prvCreateSectors+0xa4>)
 8014d68:	f7ed ffe0 	bl	8002d2c <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8014d6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8014d70:	f7f1 f830 	bl	8005dd4 <pvPortMalloc>
 8014d74:	4603      	mov	r3, r0
 8014d76:	4a24      	ldr	r2, [pc, #144]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014d78:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8014d7a:	4b23      	ldr	r3, [pc, #140]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d107      	bne.n	8014d92 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014d82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014d86:	4821      	ldr	r0, [pc, #132]	@ (8014e0c <prvCreateSectors+0xac>)
 8014d88:	f00c fe06 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	603b      	str	r3, [r7, #0]
 8014d90:	e032      	b.n	8014df8 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014d92:	4b1d      	ldr	r3, [pc, #116]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f00d f924 	bl	8021fea <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014da2:	2300      	movs	r3, #0
 8014da4:	607b      	str	r3, [r7, #4]
 8014da6:	e022      	b.n	8014dee <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014da8:	4b17      	ldr	r3, [pc, #92]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014daa:	6819      	ldr	r1, [r3, #0]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	019a      	lsls	r2, r3, #6
 8014db0:	4b15      	ldr	r3, [pc, #84]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014db2:	6818      	ldr	r0, [r3, #0]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	019b      	lsls	r3, r3, #6
 8014db8:	4403      	add	r3, r0
 8014dba:	440a      	add	r2, r1
 8014dbc:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014dbe:	4b12      	ldr	r3, [pc, #72]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014dc0:	6819      	ldr	r1, [r3, #0]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	019a      	lsls	r2, r3, #6
 8014dc6:	4b10      	ldr	r3, [pc, #64]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014dc8:	6818      	ldr	r0, [r3, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	019b      	lsls	r3, r3, #6
 8014dce:	4403      	add	r3, r0
 8014dd0:	440a      	add	r2, r1
 8014dd2:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8014dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8014e08 <prvCreateSectors+0xa8>)
 8014dd6:	681a      	ldr	r2, [r3, #0]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	019b      	lsls	r3, r3, #6
 8014ddc:	4413      	add	r3, r2
 8014dde:	332c      	adds	r3, #44	@ 0x2c
 8014de0:	4619      	mov	r1, r3
 8014de2:	4808      	ldr	r0, [pc, #32]	@ (8014e04 <prvCreateSectors+0xa4>)
 8014de4:	f7ff ff6c 	bl	8014cc0 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	3301      	adds	r3, #1
 8014dec:	607b      	str	r3, [r7, #4]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	2b3f      	cmp	r3, #63	@ 0x3f
 8014df2:	ddd9      	ble.n	8014da8 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014df4:	2301      	movs	r3, #1
 8014df6:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014df8:	683b      	ldr	r3, [r7, #0]
        }
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3708      	adds	r7, #8
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	20001470 	.word	0x20001470
 8014e08:	2000146c 	.word	0x2000146c
 8014e0c:	080264b4 	.word	0x080264b4

08014e10 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014e10:	b480      	push	{r7}
 8014e12:	b087      	sub	sp, #28
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	33ac      	adds	r3, #172	@ 0xac
 8014e22:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	685b      	ldr	r3, [r3, #4]
 8014e28:	617b      	str	r3, [r7, #20]
 8014e2a:	e00d      	b.n	8014e48 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8014e2c:	697b      	ldr	r3, [r7, #20]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	683a      	ldr	r2, [r7, #0]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d102      	bne.n	8014e42 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	613b      	str	r3, [r7, #16]
                    break;
 8014e40:	e006      	b.n	8014e50 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8014e48:	697a      	ldr	r2, [r7, #20]
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d1ed      	bne.n	8014e2c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8014e50:	693b      	ldr	r3, [r7, #16]
        }
 8014e52:	4618      	mov	r0, r3
 8014e54:	371c      	adds	r7, #28
 8014e56:	46bd      	mov	sp, r7
 8014e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5c:	4770      	bx	lr
	...

08014e60 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b088      	sub	sp, #32
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	607a      	str	r2, [r7, #4]
 8014e6c:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8014e6e:	4b33      	ldr	r3, [pc, #204]	@ (8014f3c <xTCPWindowNew+0xdc>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d10c      	bne.n	8014e90 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d001      	beq.n	8014e80 <xTCPWindowNew+0x20>
 8014e7c:	2352      	movs	r3, #82	@ 0x52
 8014e7e:	e000      	b.n	8014e82 <xTCPWindowNew+0x22>
 8014e80:	2354      	movs	r3, #84	@ 0x54
 8014e82:	4619      	mov	r1, r3
 8014e84:	482e      	ldr	r0, [pc, #184]	@ (8014f40 <xTCPWindowNew+0xe0>)
 8014e86:	f00c fd87 	bl	8021998 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	61fb      	str	r3, [r7, #28]
 8014e8e:	e04f      	b.n	8014f30 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8014e90:	4b2a      	ldr	r3, [pc, #168]	@ (8014f3c <xTCPWindowNew+0xdc>)
 8014e92:	68db      	ldr	r3, [r3, #12]
 8014e94:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014e96:	69bb      	ldr	r3, [r7, #24]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d104      	bne.n	8014eac <xTCPWindowNew+0x4c>
 8014ea2:	f240 2125 	movw	r1, #549	@ 0x225
 8014ea6:	4827      	ldr	r0, [pc, #156]	@ (8014f44 <xTCPWindowNew+0xe4>)
 8014ea8:	f7ec fc4e 	bl	8001748 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d104      	bne.n	8014ebc <xTCPWindowNew+0x5c>
 8014eb2:	f240 2126 	movw	r1, #550	@ 0x226
 8014eb6:	4823      	ldr	r0, [pc, #140]	@ (8014f44 <xTCPWindowNew+0xe4>)
 8014eb8:	f7ec fc46 	bl	8001748 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8014ebc:	69b8      	ldr	r0, [r7, #24]
 8014ebe:	f7ed ffbf 	bl	8002e40 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d006      	beq.n	8014ed6 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	33a4      	adds	r3, #164	@ 0xa4
 8014ecc:	69b9      	ldr	r1, [r7, #24]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff fef6 	bl	8014cc0 <vListInsertFifo>
 8014ed4:	e005      	b.n	8014ee2 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	3390      	adds	r3, #144	@ 0x90
 8014eda:	69b9      	ldr	r1, [r7, #24]
 8014edc:	4618      	mov	r0, r3
 8014ede:	f7ff feef 	bl	8014cc0 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8014ee2:	69fb      	ldr	r3, [r7, #28]
 8014ee4:	3310      	adds	r3, #16
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f7ff fefa 	bl	8014ce0 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <xTCPWindowNew+0x9c>
 8014ef8:	2101      	movs	r1, #1
 8014efa:	e000      	b.n	8014efe <xTCPWindowNew+0x9e>
 8014efc:	2100      	movs	r1, #0
 8014efe:	69fa      	ldr	r2, [r7, #28]
 8014f00:	7d93      	ldrb	r3, [r2, #22]
 8014f02:	f361 0382 	bfi	r3, r1, #2, #1
 8014f06:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	687a      	ldr	r2, [r7, #4]
 8014f0c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8014f0e:	69fb      	ldr	r3, [r7, #28]
 8014f10:	687a      	ldr	r2, [r7, #4]
 8014f12:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	68ba      	ldr	r2, [r7, #8]
 8014f18:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8014f1a:	4b08      	ldr	r3, [pc, #32]	@ (8014f3c <xTCPWindowNew+0xdc>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014f20:	4b09      	ldr	r3, [pc, #36]	@ (8014f48 <xTCPWindowNew+0xe8>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	429a      	cmp	r2, r3
 8014f28:	d202      	bcs.n	8014f30 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8014f2a:	4a07      	ldr	r2, [pc, #28]	@ (8014f48 <xTCPWindowNew+0xe8>)
 8014f2c:	697b      	ldr	r3, [r7, #20]
 8014f2e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8014f30:	69fb      	ldr	r3, [r7, #28]
        }
 8014f32:	4618      	mov	r0, r3
 8014f34:	3720      	adds	r7, #32
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	20001470 	.word	0x20001470
 8014f40:	080264d8 	.word	0x080264d8
 8014f44:	08026508 	.word	0x08026508
 8014f48:	2000001c 	.word	0x2000001c

08014f4c <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d002      	beq.n	8014f64 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	60fb      	str	r3, [r7, #12]
 8014f62:	e01e      	b.n	8014fa2 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	691b      	ldr	r3, [r3, #16]
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	699b      	ldr	r3, [r3, #24]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	4610      	mov	r0, r2
 8014f72:	f7ff fe90 	bl	8014c96 <xSequenceGreaterThanOrEqual>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d002      	beq.n	8014f82 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	60fb      	str	r3, [r7, #12]
 8014f80:	e00f      	b.n	8014fa2 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	691a      	ldr	r2, [r3, #16]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	68db      	ldr	r3, [r3, #12]
 8014f8a:	1ad1      	subs	r1, r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	699a      	ldr	r2, [r3, #24]
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	1ad3      	subs	r3, r2, r3
 8014f96:	461a      	mov	r2, r3
 8014f98:	4804      	ldr	r0, [pc, #16]	@ (8014fac <xTCPWindowRxEmpty+0x60>)
 8014f9a:	f00c fcfd 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
        }
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3710      	adds	r7, #16
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	08026538 	.word	0x08026538

08014fb0 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d102      	bne.n	8014fc6 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	60fb      	str	r3, [r7, #12]
 8014fc4:	e008      	b.n	8014fd8 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	68db      	ldr	r3, [r3, #12]
 8014fd0:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8014fd2:	68b8      	ldr	r0, [r7, #8]
 8014fd4:	f7ed ff34 	bl	8002e40 <uxListRemove>
            }

            return pxSegment;
 8014fd8:	68fb      	ldr	r3, [r7, #12]
        }
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3710      	adds	r7, #16
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}

08014fe2 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8014fe2:	b480      	push	{r7}
 8014fe4:	b085      	sub	sp, #20
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d102      	bne.n	8014ff8 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	60fb      	str	r3, [r7, #12]
 8014ff6:	e005      	b.n	8015004 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015004:	68fb      	ldr	r3, [r7, #12]
        }
 8015006:	4618      	mov	r0, r3
 8015008:	3714      	adds	r7, #20
 801500a:	46bd      	mov	sp, r7
 801500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015010:	4770      	bx	lr
	...

08015014 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015020:	2b00      	cmp	r3, #0
 8015022:	d004      	beq.n	801502e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	3318      	adds	r3, #24
 8015028:	4618      	mov	r0, r3
 801502a:	f7ed ff09 	bl	8002e40 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	2200      	movs	r2, #0
 8015032:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2200      	movs	r2, #0
 8015038:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015044:	2b00      	cmp	r3, #0
 8015046:	d004      	beq.n	8015052 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	332c      	adds	r3, #44	@ 0x2c
 801504c:	4618      	mov	r0, r3
 801504e:	f7ed fef7 	bl	8002e40 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	332c      	adds	r3, #44	@ 0x2c
 8015056:	4619      	mov	r1, r3
 8015058:	4803      	ldr	r0, [pc, #12]	@ (8015068 <vTCPWindowFree+0x54>)
 801505a:	f7ff fe31 	bl	8014cc0 <vListInsertFifo>
        }
 801505e:	bf00      	nop
 8015060:	3708      	adds	r7, #8
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
 8015066:	bf00      	nop
 8015068:	20001470 	.word	0x20001470

0801506c <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015074:	2300      	movs	r3, #0
 8015076:	613b      	str	r3, [r7, #16]
 8015078:	e01d      	b.n	80150b6 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d003      	beq.n	8015088 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	33a4      	adds	r3, #164	@ 0xa4
 8015084:	617b      	str	r3, [r7, #20]
 8015086:	e002      	b.n	801508e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	3390      	adds	r3, #144	@ 0x90
 801508c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	689b      	ldr	r3, [r3, #8]
 8015092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015096:	d10b      	bne.n	80150b0 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015098:	e006      	b.n	80150a8 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 80150a2:	68f8      	ldr	r0, [r7, #12]
 80150a4:	f7ff ffb6 	bl	8015014 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1f4      	bne.n	801509a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	3301      	adds	r3, #1
 80150b4:	613b      	str	r3, [r7, #16]
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	2b01      	cmp	r3, #1
 80150ba:	ddde      	ble.n	801507a <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 80150bc:	bf00      	nop
 80150be:	bf00      	nop
 80150c0:	3718      	adds	r7, #24
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
	...

080150c8 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 80150d6:	2301      	movs	r3, #1
 80150d8:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 80150da:	4b1d      	ldr	r3, [pc, #116]	@ (8015150 <xTCPWindowCreate+0x88>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d102      	bne.n	80150e8 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 80150e2:	f7ff fe3d 	bl	8014d60 <prvCreateSectors>
 80150e6:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	3390      	adds	r3, #144	@ 0x90
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7ed fe1d 	bl	8002d2c <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	33a4      	adds	r3, #164	@ 0xa4
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7ed fe18 	bl	8002d2c <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	3340      	adds	r3, #64	@ 0x40
 8015100:	4618      	mov	r0, r3
 8015102:	f7ed fe13 	bl	8002d2c <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	3354      	adds	r3, #84	@ 0x54
 801510a:	4618      	mov	r0, r3
 801510c:	f7ed fe0e 	bl	8002d2c <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	3368      	adds	r3, #104	@ 0x68
 8015114:	4618      	mov	r0, r3
 8015116:	f7ed fe09 	bl	8002d2c <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801511a:	4b0e      	ldr	r3, [pc, #56]	@ (8015154 <xTCPWindowCreate+0x8c>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d004      	beq.n	801512c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015122:	687a      	ldr	r2, [r7, #4]
 8015124:	68b9      	ldr	r1, [r7, #8]
 8015126:	480c      	ldr	r0, [pc, #48]	@ (8015158 <xTCPWindowCreate+0x90>)
 8015128:	f00c fc36 	bl	8021998 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513a:	6a3a      	ldr	r2, [r7, #32]
 801513c:	6839      	ldr	r1, [r7, #0]
 801513e:	68f8      	ldr	r0, [r7, #12]
 8015140:	f000 f80c 	bl	801515c <vTCPWindowInit>

        return xReturn;
 8015144:	697b      	ldr	r3, [r7, #20]
    }
 8015146:	4618      	mov	r0, r3
 8015148:	3718      	adds	r7, #24
 801514a:	46bd      	mov	sp, r7
 801514c:	bd80      	pop	{r7, pc}
 801514e:	bf00      	nop
 8015150:	2000146c 	.word	0x2000146c
 8015154:	20001484 	.word	0x20001484
 8015158:	08026568 	.word	0x08026568

0801515c <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 801515c:	b480      	push	{r7}
 801515e:	b087      	sub	sp, #28
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 801516a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801516e:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2200      	movs	r2, #0
 8015174:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015176:	68fa      	ldr	r2, [r7, #12]
 8015178:	7813      	ldrb	r3, [r2, #0]
 801517a:	f043 0301 	orr.w	r3, r3, #1
 801517e:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d024      	beq.n	80151d0 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 801518c:	2b00      	cmp	r3, #0
 801518e:	d004      	beq.n	801519a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	b29a      	uxth	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80151a0:	461a      	mov	r2, r3
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	4293      	cmp	r3, r2
 80151a6:	d304      	bcc.n	80151b2 <vTCPWindowInit+0x56>
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d10e      	bne.n	80151d0 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	685a      	ldr	r2, [r3, #4]
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80151bc:	683a      	ldr	r2, [r7, #0]
 80151be:	fb03 f202 	mul.w	r2, r3, r2
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	697a      	ldr	r2, [r7, #20]
 80151d4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	68ba      	ldr	r2, [r7, #8]
 80151da:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	68ba      	ldr	r2, [r7, #8]
 80151e0:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	687a      	ldr	r2, [r7, #4]
 80151ec:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	687a      	ldr	r2, [r7, #4]
 80151f2:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	687a      	ldr	r2, [r7, #4]
 8015204:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015206:	bf00      	nop
 8015208:	371c      	adds	r7, #28
 801520a:	46bd      	mov	sp, r7
 801520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015210:	4770      	bx	lr
	...

08015214 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015216:	b08f      	sub	sp, #60	@ 0x3c
 8015218:	af04      	add	r7, sp, #16
 801521a:	60f8      	str	r0, [r7, #12]
 801521c:	60b9      	str	r1, [r7, #8]
 801521e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015220:	2300      	movs	r3, #0
 8015222:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015224:	68ba      	ldr	r2, [r7, #8]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	4413      	add	r3, r2
 801522a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	33ac      	adds	r3, #172	@ 0xac
 8015230:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	623b      	str	r3, [r7, #32]
 8015238:	e027      	b.n	801528a <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	68db      	ldr	r3, [r3, #12]
 801523e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68b9      	ldr	r1, [r7, #8]
 8015246:	4618      	mov	r0, r3
 8015248:	f7ff fd25 	bl	8014c96 <xSequenceGreaterThanOrEqual>
 801524c:	4603      	mov	r3, r0
 801524e:	2b00      	cmp	r3, #0
 8015250:	d018      	beq.n	8015284 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	69f9      	ldr	r1, [r7, #28]
 8015258:	4618      	mov	r0, r3
 801525a:	f7ff fcf0 	bl	8014c3e <xSequenceLessThan>
 801525e:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015260:	2b00      	cmp	r3, #0
 8015262:	d00f      	beq.n	8015284 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8015264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015266:	2b00      	cmp	r3, #0
 8015268:	d00a      	beq.n	8015280 <xTCPWindowRxConfirm+0x6c>
 801526a:	697b      	ldr	r3, [r7, #20]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	4619      	mov	r1, r3
 8015274:	4610      	mov	r0, r2
 8015276:	f7ff fce2 	bl	8014c3e <xSequenceLessThan>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d001      	beq.n	8015284 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8015280:	697b      	ldr	r3, [r7, #20]
 8015282:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015284:	6a3b      	ldr	r3, [r7, #32]
 8015286:	685b      	ldr	r3, [r3, #4]
 8015288:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 801528a:	6a3a      	ldr	r2, [r7, #32]
 801528c:	69bb      	ldr	r3, [r7, #24]
 801528e:	429a      	cmp	r2, r3
 8015290:	d1d3      	bne.n	801523a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8015292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015294:	2b00      	cmp	r3, #0
 8015296:	d030      	beq.n	80152fa <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801529a:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 801529c:	68ba      	ldr	r2, [r7, #8]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d104      	bne.n	80152ac <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80152a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a4:	689a      	ldr	r2, [r3, #8]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d026      	beq.n	80152fa <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80152b2:	461e      	mov	r6, r3
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	68db      	ldr	r3, [r3, #12]
 80152b8:	68ba      	ldr	r2, [r7, #8]
 80152ba:	1ad5      	subs	r5, r2, r3
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	441a      	add	r2, r3
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	68db      	ldr	r3, [r3, #12]
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152ca:	6811      	ldr	r1, [r2, #0]
 80152cc:	68fa      	ldr	r2, [r7, #12]
 80152ce:	68d2      	ldr	r2, [r2, #12]
 80152d0:	1a8a      	subs	r2, r1, r2
 80152d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80152d4:	6889      	ldr	r1, [r1, #8]
 80152d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80152d8:	6800      	ldr	r0, [r0, #0]
 80152da:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80152dc:	68a4      	ldr	r4, [r4, #8]
 80152de:	4404      	add	r4, r0
 80152e0:	68f8      	ldr	r0, [r7, #12]
 80152e2:	68c0      	ldr	r0, [r0, #12]
 80152e4:	1a20      	subs	r0, r4, r0
 80152e6:	9003      	str	r0, [sp, #12]
 80152e8:	9102      	str	r1, [sp, #8]
 80152ea:	9201      	str	r2, [sp, #4]
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	462a      	mov	r2, r5
 80152f2:	4631      	mov	r1, r6
 80152f4:	4803      	ldr	r0, [pc, #12]	@ (8015304 <xTCPWindowRxConfirm+0xf0>)
 80152f6:	f00c fb4f 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80152fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80152fc:	4618      	mov	r0, r3
 80152fe:	372c      	adds	r7, #44	@ 0x2c
 8015300:	46bd      	mov	sp, r7
 8015302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015304:	08026598 	.word	0x08026598

08015308 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015308:	b5b0      	push	{r4, r5, r7, lr}
 801530a:	b08a      	sub	sp, #40	@ 0x28
 801530c:	af04      	add	r7, sp, #16
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	691b      	ldr	r3, [r3, #16]
 8015316:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015318:	693a      	ldr	r2, [r7, #16]
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	4413      	add	r3, r2
 801531e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015326:	2b00      	cmp	r3, #0
 8015328:	d04e      	beq.n	80153c8 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801532e:	683a      	ldr	r2, [r7, #0]
 8015330:	6939      	ldr	r1, [r7, #16]
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f7ff ff6e 	bl	8015214 <xTCPWindowRxConfirm>
 8015338:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d002      	beq.n	8015346 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8015340:	68b8      	ldr	r0, [r7, #8]
 8015342:	f7ff fe67 	bl	8015014 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1f0      	bne.n	801532e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801534c:	6979      	ldr	r1, [r7, #20]
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ff fd5e 	bl	8014e10 <xTCPWindowRxFind>
 8015354:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d009      	beq.n	8015370 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	461a      	mov	r2, r3
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	4413      	add	r3, r2
 8015366:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8015368:	68b8      	ldr	r0, [r7, #8]
 801536a:	f7ff fe53 	bl	8015014 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801536e:	e7ed      	b.n	801534c <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8015370:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8015372:	68fa      	ldr	r2, [r7, #12]
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	429a      	cmp	r2, r3
 8015378:	d026      	beq.n	80153c8 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 801537a:	697a      	ldr	r2, [r7, #20]
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	1ad2      	subs	r2, r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8015384:	4b14      	ldr	r3, [pc, #80]	@ (80153d8 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	dd1d      	ble.n	80153c8 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015392:	461c      	mov	r4, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801539a:	461d      	mov	r5, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	68db      	ldr	r3, [r3, #12]
 80153a0:	693a      	ldr	r2, [r7, #16]
 80153a2:	1ad0      	subs	r0, r2, r3
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	68d2      	ldr	r2, [r2, #12]
 80153ac:	68f9      	ldr	r1, [r7, #12]
 80153ae:	1a8a      	subs	r2, r1, r2
 80153b0:	6879      	ldr	r1, [r7, #4]
 80153b2:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 80153b6:	9102      	str	r1, [sp, #8]
 80153b8:	9201      	str	r2, [sp, #4]
 80153ba:	9300      	str	r3, [sp, #0]
 80153bc:	4603      	mov	r3, r0
 80153be:	462a      	mov	r2, r5
 80153c0:	4621      	mov	r1, r4
 80153c2:	4806      	ldr	r0, [pc, #24]	@ (80153dc <prvTCPWindowRx_ExpectedRX+0xd4>)
 80153c4:	f00c fae8 	bl	8021998 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	697a      	ldr	r2, [r7, #20]
 80153cc:	611a      	str	r2, [r3, #16]
        }
 80153ce:	bf00      	nop
 80153d0:	3718      	adds	r7, #24
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bdb0      	pop	{r4, r5, r7, pc}
 80153d6:	bf00      	nop
 80153d8:	20001484 	.word	0x20001484
 80153dc:	080265d8 	.word	0x080265d8

080153e0 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 80153e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153e2:	b08f      	sub	sp, #60	@ 0x3c
 80153e4:	af04      	add	r7, sp, #16
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 80153ec:	f04f 33ff 	mov.w	r3, #4294967295
 80153f0:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80153f2:	68ba      	ldr	r2, [r7, #8]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	4413      	add	r3, r2
 80153f8:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	691b      	ldr	r3, [r3, #16]
 80153fe:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015400:	6a39      	ldr	r1, [r7, #32]
 8015402:	68f8      	ldr	r0, [r7, #12]
 8015404:	f7ff fd04 	bl	8014e10 <xTCPWindowRxFind>
 8015408:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801540a:	69bb      	ldr	r3, [r7, #24]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d006      	beq.n	801541e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015410:	69bb      	ldr	r3, [r7, #24]
 8015412:	689b      	ldr	r3, [r3, #8]
 8015414:	461a      	mov	r2, r3
 8015416:	6a3b      	ldr	r3, [r7, #32]
 8015418:	4413      	add	r3, r2
 801541a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801541c:	e7f0      	b.n	8015400 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801541e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015420:	4b45      	ldr	r3, [pc, #276]	@ (8015538 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	dd20      	ble.n	801546a <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801542e:	461d      	mov	r5, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015436:	461e      	mov	r6, r3
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	68db      	ldr	r3, [r3, #12]
 801543c:	68ba      	ldr	r2, [r7, #8]
 801543e:	1ad0      	subs	r0, r2, r3
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	69fa      	ldr	r2, [r7, #28]
 8015446:	1ad3      	subs	r3, r2, r3
 8015448:	68b9      	ldr	r1, [r7, #8]
 801544a:	69fa      	ldr	r2, [r7, #28]
 801544c:	1a8a      	subs	r2, r1, r2
 801544e:	4614      	mov	r4, r2
 8015450:	68fa      	ldr	r2, [r7, #12]
 8015452:	68d2      	ldr	r2, [r2, #12]
 8015454:	6a39      	ldr	r1, [r7, #32]
 8015456:	1a8a      	subs	r2, r1, r2
 8015458:	9202      	str	r2, [sp, #8]
 801545a:	9401      	str	r4, [sp, #4]
 801545c:	9300      	str	r3, [sp, #0]
 801545e:	4603      	mov	r3, r0
 8015460:	4632      	mov	r2, r6
 8015462:	4629      	mov	r1, r5
 8015464:	4835      	ldr	r0, [pc, #212]	@ (801553c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8015466:	f00c fa97 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	4a34      	ldr	r2, [pc, #208]	@ (8015540 <prvTCPWindowRx_UnexpectedRX+0x160>)
 801546e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	061a      	lsls	r2, r3, #24
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	021b      	lsls	r3, r3, #8
 801547a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801547e:	431a      	orrs	r2, r3
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	0a1b      	lsrs	r3, r3, #8
 8015484:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015488:	431a      	orrs	r2, r3
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	0e1b      	lsrs	r3, r3, #24
 801548e:	431a      	orrs	r2, r3
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8015496:	6a3b      	ldr	r3, [r7, #32]
 8015498:	061a      	lsls	r2, r3, #24
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	021b      	lsls	r3, r3, #8
 801549e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80154a2:	431a      	orrs	r2, r3
 80154a4:	6a3b      	ldr	r3, [r7, #32]
 80154a6:	0a1b      	lsrs	r3, r3, #8
 80154a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80154ac:	431a      	orrs	r2, r3
 80154ae:	6a3b      	ldr	r3, [r7, #32]
 80154b0:	0e1b      	lsrs	r3, r3, #24
 80154b2:	431a      	orrs	r2, r3
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	220c      	movs	r2, #12
 80154be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 80154c2:	68b9      	ldr	r1, [r7, #8]
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f7ff fca3 	bl	8014e10 <xTCPWindowRxFind>
 80154ca:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d12d      	bne.n	801552e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 80154d2:	687a      	ldr	r2, [r7, #4]
 80154d4:	2301      	movs	r3, #1
 80154d6:	68b9      	ldr	r1, [r7, #8]
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f7ff fcc1 	bl	8014e60 <xTCPWindowNew>
 80154de:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d104      	bne.n	80154f0 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	2200      	movs	r2, #0
 80154ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80154ee:	e01e      	b.n	801552e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 80154f0:	4b11      	ldr	r3, [pc, #68]	@ (8015538 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d014      	beq.n	8015522 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80154fe:	4619      	mov	r1, r3
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015506:	4618      	mov	r0, r3
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	68db      	ldr	r3, [r3, #12]
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	1ad2      	subs	r2, r2, r3
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015516:	9300      	str	r3, [sp, #0]
 8015518:	4613      	mov	r3, r2
 801551a:	4602      	mov	r2, r0
 801551c:	4809      	ldr	r0, [pc, #36]	@ (8015544 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801551e:	f00c fa3b 	bl	8021998 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015522:	68ba      	ldr	r2, [r7, #8]
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 801552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015530:	4618      	mov	r0, r3
 8015532:	372c      	adds	r7, #44	@ 0x2c
 8015534:	46bd      	mov	sp, r7
 8015536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015538:	20001484 	.word	0x20001484
 801553c:	0802661c 	.word	0x0802661c
 8015540:	0a050101 	.word	0x0a050101
 8015544:	0802665c 	.word	0x0802665c

08015548 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015548:	b580      	push	{r7, lr}
 801554a:	b08c      	sub	sp, #48	@ 0x30
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	607a      	str	r2, [r7, #4]
 8015554:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8015556:	f04f 33ff 	mov.w	r3, #4294967295
 801555a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8015564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015566:	2200      	movs	r2, #0
 8015568:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	691b      	ldr	r3, [r3, #16]
 801556e:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8015570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015574:	4413      	add	r3, r2
 8015576:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015578:	69fa      	ldr	r2, [r7, #28]
 801557a:	6a3b      	ldr	r3, [r7, #32]
 801557c:	1ad3      	subs	r3, r2, r3
 801557e:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8015584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015586:	6a3b      	ldr	r3, [r7, #32]
 8015588:	1ad3      	subs	r3, r2, r3
 801558a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 801558c:	69bb      	ldr	r3, [r7, #24]
 801558e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	2b00      	cmp	r3, #0
 8015594:	da18      	bge.n	80155c8 <lTCPWindowRxCheck+0x80>
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2b00      	cmp	r3, #0
 801559a:	dd15      	ble.n	80155c8 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155a2:	1ad2      	subs	r2, r2, r3
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80155a8:	4824      	ldr	r0, [pc, #144]	@ (801563c <lTCPWindowRxCheck+0xf4>)
 80155aa:	f00c f9f5 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155b2:	1ad3      	subs	r3, r2, r3
 80155b4:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155ba:	4413      	add	r3, r2
 80155bc:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	425b      	negs	r3, r3
 80155c2:	461a      	mov	r2, r3
 80155c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155c6:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2200      	movs	r2, #0
 80155cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2200      	movs	r2, #0
 80155d4:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 80155d6:	6a3a      	ldr	r2, [r7, #32]
 80155d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155da:	429a      	cmp	r2, r3
 80155dc:	d110      	bne.n	8015600 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 80155de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d905      	bls.n	80155f2 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 80155e6:	683a      	ldr	r2, [r7, #0]
 80155e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80155ea:	4815      	ldr	r0, [pc, #84]	@ (8015640 <lTCPWindowRxCheck+0xf8>)
 80155ec:	f00c f9d4 	bl	8021998 <lUDPLoggingPrintf>
 80155f0:	e01f      	b.n	8015632 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80155f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f7ff fe87 	bl	8015308 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80155fe:	e018      	b.n	8015632 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015602:	3301      	adds	r3, #1
 8015604:	6a3a      	ldr	r2, [r7, #32]
 8015606:	429a      	cmp	r2, r3
 8015608:	d013      	beq.n	8015632 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	2b00      	cmp	r3, #0
 801560e:	dd10      	ble.n	8015632 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	697a      	ldr	r2, [r7, #20]
 8015614:	429a      	cmp	r2, r3
 8015616:	dd06      	ble.n	8015626 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801561c:	6979      	ldr	r1, [r7, #20]
 801561e:	4809      	ldr	r0, [pc, #36]	@ (8015644 <lTCPWindowRxCheck+0xfc>)
 8015620:	f00c f9ba 	bl	8021998 <lUDPLoggingPrintf>
 8015624:	e005      	b.n	8015632 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801562a:	68f8      	ldr	r0, [r7, #12]
 801562c:	f7ff fed8 	bl	80153e0 <prvTCPWindowRx_UnexpectedRX>
 8015630:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015634:	4618      	mov	r0, r3
 8015636:	3730      	adds	r7, #48	@ 0x30
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}
 801563c:	0802668c 	.word	0x0802668c
 8015640:	080266cc 	.word	0x080266cc
 8015644:	0802670c 	.word	0x0802670c

08015648 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015648:	b480      	push	{r7}
 801564a:	b087      	sub	sp, #28
 801564c:	af00      	add	r7, sp, #0
 801564e:	60f8      	str	r0, [r7, #12]
 8015650:	60b9      	str	r1, [r7, #8]
 8015652:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8015654:	68fa      	ldr	r2, [r7, #12]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4413      	add	r3, r2
 801565a:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 801565c:	697a      	ldr	r2, [r7, #20]
 801565e:	68bb      	ldr	r3, [r7, #8]
 8015660:	429a      	cmp	r2, r3
 8015662:	db03      	blt.n	801566c <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8015664:	697a      	ldr	r2, [r7, #20]
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 801566c:	697b      	ldr	r3, [r7, #20]
        }
 801566e:	4618      	mov	r0, r3
 8015670:	371c      	adds	r7, #28
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
	...

0801567c <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 801567c:	b580      	push	{r7, lr}
 801567e:	b088      	sub	sp, #32
 8015680:	af02      	add	r7, sp, #8
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	685a      	ldr	r2, [r3, #4]
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	1ad3      	subs	r3, r2, r3
 8015692:	4619      	mov	r1, r3
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7f4 fe05 	bl	800a2a4 <FreeRTOS_min_int32>
 801569a:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	689a      	ldr	r2, [r3, #8]
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	441a      	add	r2, r3
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	689a      	ldr	r2, [r3, #8]
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	429a      	cmp	r2, r3
 80156b2:	db02      	blt.n	80156ba <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2200      	movs	r2, #0
 80156b8:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	441a      	add	r2, r3
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 80156c6:	4b12      	ldr	r3, [pc, #72]	@ (8015710 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	dd1a      	ble.n	8015704 <prvTCPWindowTxAdd_FrontSegment+0x88>
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80156d4:	2b17      	cmp	r3, #23
 80156d6:	d015      	beq.n	8015704 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	69db      	ldr	r3, [r3, #28]
 80156e0:	1ad1      	subs	r1, r2, r3
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	6898      	ldr	r0, [r3, #8]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	69db      	ldr	r3, [r3, #28]
 80156ee:	1ad3      	subs	r3, r2, r3
 80156f0:	68ba      	ldr	r2, [r7, #8]
 80156f2:	68d2      	ldr	r2, [r2, #12]
 80156f4:	9201      	str	r2, [sp, #4]
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	4603      	mov	r3, r0
 80156fa:	460a      	mov	r2, r1
 80156fc:	6879      	ldr	r1, [r7, #4]
 80156fe:	4805      	ldr	r0, [pc, #20]	@ (8015714 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015700:	f00c f94a 	bl	8021998 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015704:	697b      	ldr	r3, [r7, #20]
        }
 8015706:	4618      	mov	r0, r3
 8015708:	3718      	adds	r7, #24
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	20001484 	.word	0x20001484
 8015714:	08026750 	.word	0x08026750

08015718 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015718:	b580      	push	{r7, lr}
 801571a:	b08a      	sub	sp, #40	@ 0x28
 801571c:	af00      	add	r7, sp, #0
 801571e:	60f8      	str	r0, [r7, #12]
 8015720:	60b9      	str	r1, [r7, #8]
 8015722:	607a      	str	r2, [r7, #4]
 8015724:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015736:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d073      	beq.n	8015826 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	689a      	ldr	r2, [r3, #8]
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015746:	429a      	cmp	r2, r3
 8015748:	da6d      	bge.n	8015826 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801574a:	69bb      	ldr	r3, [r7, #24]
 801574c:	7d9b      	ldrb	r3, [r3, #22]
 801574e:	f003 0301 	and.w	r3, r3, #1
 8015752:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015754:	2b00      	cmp	r3, #0
 8015756:	d166      	bne.n	8015826 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 801575c:	2b00      	cmp	r3, #0
 801575e:	d062      	beq.n	8015826 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8015760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015762:	69b9      	ldr	r1, [r7, #24]
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	f7ff ff89 	bl	801567c <prvTCPWindowTxAdd_FrontSegment>
 801576a:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 801576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	1ad3      	subs	r3, r2, r3
 8015772:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8015774:	6a3a      	ldr	r2, [r7, #32]
 8015776:	697b      	ldr	r3, [r7, #20]
 8015778:	4413      	add	r3, r2
 801577a:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 801577c:	697a      	ldr	r2, [r7, #20]
 801577e:	6839      	ldr	r1, [r7, #0]
 8015780:	69f8      	ldr	r0, [r7, #28]
 8015782:	f7ff ff61 	bl	8015648 <lTCPIncrementTxPosition>
 8015786:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8015788:	e04d      	b.n	8015826 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015794:	461a      	mov	r2, r3
 8015796:	2300      	movs	r3, #0
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f7ff fb61 	bl	8014e60 <xTCPWindowNew>
 801579e:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 80157a0:	69bb      	ldr	r3, [r7, #24]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d037      	beq.n	8015816 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	4619      	mov	r1, r3
 80157ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80157ae:	f7f4 fd79 	bl	800a2a4 <FreeRTOS_min_int32>
 80157b2:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 80157b4:	69bb      	ldr	r3, [r7, #24]
 80157b6:	697a      	ldr	r2, [r7, #20]
 80157b8:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 80157ba:	69bb      	ldr	r3, [r7, #24]
 80157bc:	69fa      	ldr	r2, [r7, #28]
 80157be:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 80157c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	1ad3      	subs	r3, r2, r3
 80157c6:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80157c8:	697a      	ldr	r2, [r7, #20]
 80157ca:	6839      	ldr	r1, [r7, #0]
 80157cc:	69f8      	ldr	r0, [r7, #28]
 80157ce:	f7ff ff3b 	bl	8015648 <lTCPIncrementTxPosition>
 80157d2:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	441a      	add	r2, r3
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 80157e0:	6a3a      	ldr	r2, [r7, #32]
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	4413      	add	r3, r2
 80157e6:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	3318      	adds	r3, #24
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7ff fa63 	bl	8014cc0 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	689a      	ldr	r2, [r3, #8]
 80157fe:	69bb      	ldr	r3, [r7, #24]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	429a      	cmp	r2, r3
 8015804:	da03      	bge.n	801580e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	69ba      	ldr	r2, [r7, #24]
 801580a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801580c:	e00b      	b.n	8015826 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	2200      	movs	r2, #0
 8015812:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015814:	e007      	b.n	8015826 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015816:	6a3b      	ldr	r3, [r7, #32]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d008      	beq.n	801582e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 801581c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801581e:	4807      	ldr	r0, [pc, #28]	@ (801583c <lTCPWindowTxAdd+0x124>)
 8015820:	f00c f8ba 	bl	8021998 <lUDPLoggingPrintf>
                    }

                    break;
 8015824:	e003      	b.n	801582e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015828:	2b00      	cmp	r3, #0
 801582a:	dcae      	bgt.n	801578a <lTCPWindowTxAdd+0x72>
 801582c:	e000      	b.n	8015830 <lTCPWindowTxAdd+0x118>
                    break;
 801582e:	bf00      	nop
                }
            }

            return lDone;
 8015830:	6a3b      	ldr	r3, [r7, #32]
        }
 8015832:	4618      	mov	r0, r3
 8015834:	3728      	adds	r7, #40	@ 0x28
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
 801583a:	bf00      	nop
 801583c:	08026798 	.word	0x08026798

08015840 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015840:	b480      	push	{r7}
 8015842:	b083      	sub	sp, #12
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801584e:	2b00      	cmp	r3, #0
 8015850:	d101      	bne.n	8015856 <xTCPWindowTxDone+0x16>
 8015852:	2301      	movs	r3, #1
 8015854:	e000      	b.n	8015858 <xTCPWindowTxDone+0x18>
 8015856:	2300      	movs	r3, #0
        }
 8015858:	4618      	mov	r0, r3
 801585a:	370c      	adds	r7, #12
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr

08015864 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	3354      	adds	r3, #84	@ 0x54
 8015872:	4618      	mov	r0, r3
 8015874:	f7ff fbb5 	bl	8014fe2 <xTCPWindowPeekHead>
 8015878:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d102      	bne.n	8015886 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8015880:	2300      	movs	r3, #0
 8015882:	613b      	str	r3, [r7, #16]
 8015884:	e02f      	b.n	80158e6 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	6a1b      	ldr	r3, [r3, #32]
 801588e:	429a      	cmp	r2, r3
 8015890:	d306      	bcc.n	80158a0 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6a1b      	ldr	r3, [r3, #32]
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	617b      	str	r3, [r7, #20]
 801589e:	e001      	b.n	80158a4 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 80158a0:	2300      	movs	r3, #0
 80158a2:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 80158a4:	6979      	ldr	r1, [r7, #20]
 80158a6:	6838      	ldr	r0, [r7, #0]
 80158a8:	f7f4 fd0c 	bl	800a2c4 <FreeRTOS_min_uint32>
 80158ac:	4602      	mov	r2, r0
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	1a9b      	subs	r3, r3, r2
 80158b2:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	689b      	ldr	r3, [r3, #8]
 80158b8:	461a      	mov	r2, r3
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	4293      	cmp	r3, r2
 80158be:	d302      	bcc.n	80158c6 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 80158c0:	2301      	movs	r3, #1
 80158c2:	613b      	str	r3, [r7, #16]
 80158c4:	e001      	b.n	80158ca <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 80158c6:	2300      	movs	r3, #0
 80158c8:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d00a      	beq.n	80158e6 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	689b      	ldr	r3, [r3, #8]
 80158d8:	4619      	mov	r1, r3
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 80158de:	429a      	cmp	r2, r3
 80158e0:	d201      	bcs.n	80158e6 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 80158e2:	2300      	movs	r3, #0
 80158e4:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 80158e6:	693b      	ldr	r3, [r7, #16]
        }
 80158e8:	4618      	mov	r0, r3
 80158ea:	3718      	adds	r7, #24
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd80      	pop	{r7, pc}

080158f0 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b08a      	sub	sp, #40	@ 0x28
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2200      	movs	r2, #0
 8015900:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015906:	2b00      	cmp	r3, #0
 8015908:	d002      	beq.n	8015910 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801590a:	2301      	movs	r3, #1
 801590c:	627b      	str	r3, [r7, #36]	@ 0x24
 801590e:	e050      	b.n	80159b2 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	3368      	adds	r3, #104	@ 0x68
 8015914:	4618      	mov	r0, r3
 8015916:	f7ff fb64 	bl	8014fe2 <xTCPWindowPeekHead>
 801591a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801591c:	6a3b      	ldr	r3, [r7, #32]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d01f      	beq.n	8015962 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015926:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015928:	6a3b      	ldr	r3, [r7, #32]
 801592a:	3310      	adds	r3, #16
 801592c:	4618      	mov	r0, r3
 801592e:	f7ff f9e4 	bl	8014cfa <ulTimerGetAge>
 8015932:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015934:	6a3b      	ldr	r3, [r7, #32]
 8015936:	7d1b      	ldrb	r3, [r3, #20]
 8015938:	461a      	mov	r2, r3
 801593a:	2301      	movs	r3, #1
 801593c:	4093      	lsls	r3, r2
 801593e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	69fa      	ldr	r2, [r7, #28]
 8015944:	fb02 f303 	mul.w	r3, r2, r3
 8015948:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 801594a:	697a      	ldr	r2, [r7, #20]
 801594c:	69bb      	ldr	r3, [r7, #24]
 801594e:	429a      	cmp	r2, r3
 8015950:	d904      	bls.n	801595c <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015952:	697a      	ldr	r2, [r7, #20]
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	1ad2      	subs	r2, r2, r3
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 801595c:	2301      	movs	r3, #1
 801595e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015960:	e027      	b.n	80159b2 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	3354      	adds	r3, #84	@ 0x54
 8015966:	4618      	mov	r0, r3
 8015968:	f7ff fb3b 	bl	8014fe2 <xTCPWindowPeekHead>
 801596c:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801596e:	6a3b      	ldr	r3, [r7, #32]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d102      	bne.n	801597a <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015974:	2300      	movs	r3, #0
 8015976:	627b      	str	r3, [r7, #36]	@ 0x24
 8015978:	e01b      	b.n	80159b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801597a:	68b9      	ldr	r1, [r7, #8]
 801597c:	68f8      	ldr	r0, [r7, #12]
 801597e:	f7ff ff71 	bl	8015864 <prvTCPWindowTxHasSpace>
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d102      	bne.n	801598e <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015988:	2300      	movs	r3, #0
 801598a:	627b      	str	r3, [r7, #36]	@ 0x24
 801598c:	e011      	b.n	80159b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	f003 0302 	and.w	r3, r3, #2
 8015996:	b2db      	uxtb	r3, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	d008      	beq.n	80159ae <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801599c:	6a3b      	ldr	r3, [r7, #32]
 801599e:	689a      	ldr	r2, [r3, #8]
 80159a0:	6a3b      	ldr	r3, [r7, #32]
 80159a2:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80159a4:	429a      	cmp	r2, r3
 80159a6:	da02      	bge.n	80159ae <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 80159a8:	2300      	movs	r3, #0
 80159aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80159ac:	e001      	b.n	80159b2 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 80159ae:	2301      	movs	r3, #1
 80159b0:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 80159b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80159b4:	4618      	mov	r0, r3
 80159b6:	3728      	adds	r7, #40	@ 0x28
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 80159bc:	b590      	push	{r4, r7, lr}
 80159be:	b087      	sub	sp, #28
 80159c0:	af02      	add	r7, sp, #8
 80159c2:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	3368      	adds	r3, #104	@ 0x68
 80159c8:	4618      	mov	r0, r3
 80159ca:	f7ff fb0a 	bl	8014fe2 <xTCPWindowPeekHead>
 80159ce:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d043      	beq.n	8015a5e <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	7d1b      	ldrb	r3, [r3, #20]
 80159da:	461a      	mov	r2, r3
 80159dc:	2301      	movs	r3, #1
 80159de:	4093      	lsls	r3, r2
 80159e0:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159e6:	461a      	mov	r2, r3
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	fb02 f303 	mul.w	r3, r2, r3
 80159ee:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	3310      	adds	r3, #16
 80159f4:	4618      	mov	r0, r3
 80159f6:	f7ff f980 	bl	8014cfa <ulTimerGetAge>
 80159fa:	4602      	mov	r2, r0
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	4293      	cmp	r3, r2
 8015a00:	d22b      	bcs.n	8015a5a <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3368      	adds	r3, #104	@ 0x68
 8015a06:	4618      	mov	r0, r3
 8015a08:	f7ff fad2 	bl	8014fb0 <xTCPWindowGetHead>
 8015a0c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2200      	movs	r2, #0
 8015a12:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015a14:	4b14      	ldr	r3, [pc, #80]	@ (8015a68 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d020      	beq.n	8015a5e <pxTCPWindowTx_GetWaitQueue+0xa2>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a22:	2b17      	cmp	r3, #23
 8015a24:	d01b      	beq.n	8015a5e <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a34:	461c      	mov	r4, r3
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	6899      	ldr	r1, [r3, #8]
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681a      	ldr	r2, [r3, #0]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	69db      	ldr	r3, [r3, #28]
 8015a42:	1ad3      	subs	r3, r2, r3
 8015a44:	68fa      	ldr	r2, [r7, #12]
 8015a46:	6812      	ldr	r2, [r2, #0]
 8015a48:	9201      	str	r2, [sp, #4]
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	4622      	mov	r2, r4
 8015a50:	4601      	mov	r1, r0
 8015a52:	4806      	ldr	r0, [pc, #24]	@ (8015a6c <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015a54:	f00b ffa0 	bl	8021998 <lUDPLoggingPrintf>
 8015a58:	e001      	b.n	8015a5e <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
        }
 8015a60:	4618      	mov	r0, r3
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd90      	pop	{r4, r7, pc}
 8015a68:	20001484 	.word	0x20001484
 8015a6c:	080267d4 	.word	0x080267d4

08015a70 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b087      	sub	sp, #28
 8015a74:	af02      	add	r7, sp, #8
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	3354      	adds	r3, #84	@ 0x54
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7ff faaf 	bl	8014fe2 <xTCPWindowPeekHead>
 8015a84:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d04f      	beq.n	8015b2c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	f003 0302 	and.w	r3, r3, #2
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d008      	beq.n	8015aac <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	689a      	ldr	r2, [r3, #8]
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015aa2:	429a      	cmp	r2, r3
 8015aa4:	da02      	bge.n	8015aac <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	60fb      	str	r3, [r7, #12]
 8015aaa:	e03f      	b.n	8015b2c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff fed8 	bl	8015864 <prvTCPWindowTxHasSpace>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d102      	bne.n	8015ac0 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8015aba:	2300      	movs	r3, #0
 8015abc:	60fb      	str	r3, [r7, #12]
 8015abe:	e035      	b.n	8015b2c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	3354      	adds	r3, #84	@ 0x54
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7ff fa73 	bl	8014fb0 <xTCPWindowGetHead>
 8015aca:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015ad0:	68fa      	ldr	r2, [r7, #12]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d102      	bne.n	8015adc <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	68fa      	ldr	r2, [r7, #12]
 8015ae2:	6892      	ldr	r2, [r2, #8]
 8015ae4:	441a      	add	r2, r3
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015aea:	4b13      	ldr	r3, [pc, #76]	@ (8015b38 <pxTCPWindowTx_GetTXQueue+0xc8>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	dd1c      	ble.n	8015b2c <pxTCPWindowTx_GetTXQueue+0xbc>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015af8:	2b17      	cmp	r3, #23
 8015afa:	d017      	beq.n	8015b2c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b02:	4618      	mov	r0, r3
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b0a:	461c      	mov	r4, r3
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	6899      	ldr	r1, [r3, #8]
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	69db      	ldr	r3, [r3, #28]
 8015b18:	1ad3      	subs	r3, r2, r3
 8015b1a:	683a      	ldr	r2, [r7, #0]
 8015b1c:	9201      	str	r2, [sp, #4]
 8015b1e:	9300      	str	r3, [sp, #0]
 8015b20:	460b      	mov	r3, r1
 8015b22:	4622      	mov	r2, r4
 8015b24:	4601      	mov	r1, r0
 8015b26:	4805      	ldr	r0, [pc, #20]	@ (8015b3c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015b28:	f00b ff36 	bl	8021998 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
        }
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3714      	adds	r7, #20
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd90      	pop	{r4, r7, pc}
 8015b36:	bf00      	nop
 8015b38:	20001484 	.word	0x20001484
 8015b3c:	08026820 	.word	0x08026820

08015b40 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 8015b40:	b590      	push	{r4, r7, lr}
 8015b42:	b08b      	sub	sp, #44	@ 0x2c
 8015b44:	af02      	add	r7, sp, #8
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	3340      	adds	r3, #64	@ 0x40
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7ff fa2b 	bl	8014fb0 <xTCPWindowGetHead>
 8015b5a:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8015b64:	69fb      	ldr	r3, [r7, #28]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d01c      	beq.n	8015ba4 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8015b6a:	4b41      	ldr	r3, [pc, #260]	@ (8015c70 <ulTCPWindowTxGet+0x130>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d024      	beq.n	8015bbc <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b78:	4618      	mov	r0, r3
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b80:	461c      	mov	r4, r3
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	6899      	ldr	r1, [r3, #8]
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	69db      	ldr	r3, [r3, #28]
 8015b8e:	1ad3      	subs	r3, r2, r3
 8015b90:	68ba      	ldr	r2, [r7, #8]
 8015b92:	9201      	str	r2, [sp, #4]
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	460b      	mov	r3, r1
 8015b98:	4622      	mov	r2, r4
 8015b9a:	4601      	mov	r1, r0
 8015b9c:	4835      	ldr	r0, [pc, #212]	@ (8015c74 <ulTCPWindowTxGet+0x134>)
 8015b9e:	f00b fefb 	bl	8021998 <lUDPLoggingPrintf>
 8015ba2:	e00b      	b.n	8015bbc <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015ba4:	68f8      	ldr	r0, [r7, #12]
 8015ba6:	f7ff ff09 	bl	80159bc <pxTCPWindowTx_GetWaitQueue>
 8015baa:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d104      	bne.n	8015bbc <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015bb2:	68b9      	ldr	r1, [r7, #8]
 8015bb4:	68f8      	ldr	r0, [r7, #12]
 8015bb6:	f7ff ff5b 	bl	8015a70 <pxTCPWindowTx_GetTXQueue>
 8015bba:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d051      	beq.n	8015c66 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015bc2:	69fb      	ldr	r3, [r7, #28]
 8015bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d004      	beq.n	8015bd4 <ulTCPWindowTxGet+0x94>
 8015bca:	f240 7136 	movw	r1, #1846	@ 0x736
 8015bce:	482a      	ldr	r0, [pc, #168]	@ (8015c78 <ulTCPWindowTxGet+0x138>)
 8015bd0:	f7eb fdba 	bl	8001748 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015bda:	69fb      	ldr	r3, [r7, #28]
 8015bdc:	3318      	adds	r3, #24
 8015bde:	4619      	mov	r1, r3
 8015be0:	4610      	mov	r0, r2
 8015be2:	f7ff f86d 	bl	8014cc0 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015be6:	69fa      	ldr	r2, [r7, #28]
 8015be8:	7d93      	ldrb	r3, [r2, #22]
 8015bea:	f043 0301 	orr.w	r3, r3, #1
 8015bee:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015bf0:	69fb      	ldr	r3, [r7, #28]
 8015bf2:	7d1b      	ldrb	r3, [r3, #20]
 8015bf4:	3301      	adds	r3, #1
 8015bf6:	b2da      	uxtb	r2, r3
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	7d1b      	ldrb	r3, [r3, #20]
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	d120      	bne.n	8015c46 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	689a      	ldr	r2, [r3, #8]
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015c0e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d918      	bls.n	8015c46 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015c1a:	005b      	lsls	r3, r3, #1
 8015c1c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015c24:	4619      	mov	r1, r3
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	689a      	ldr	r2, [r3, #8]
 8015c32:	8afb      	ldrh	r3, [r7, #22]
 8015c34:	9300      	str	r3, [sp, #0]
 8015c36:	4613      	mov	r3, r2
 8015c38:	4602      	mov	r2, r0
 8015c3a:	4810      	ldr	r0, [pc, #64]	@ (8015c7c <ulTCPWindowTxGet+0x13c>)
 8015c3c:	f00b feac 	bl	8021998 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 8015c40:	8afa      	ldrh	r2, [r7, #22]
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8015c46:	69fb      	ldr	r3, [r7, #28]
 8015c48:	3310      	adds	r3, #16
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7ff f848 	bl	8014ce0 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	68da      	ldr	r2, [r3, #12]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	689b      	ldr	r3, [r3, #8]
 8015c64:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8015c66:	69bb      	ldr	r3, [r7, #24]
        }
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3724      	adds	r7, #36	@ 0x24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd90      	pop	{r4, r7, pc}
 8015c70:	20001484 	.word	0x20001484
 8015c74:	0802686c 	.word	0x0802686c
 8015c78:	08026508 	.word	0x08026508
 8015c7c:	080268b8 	.word	0x080268b8

08015c80 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b084      	sub	sp, #16
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	3310      	adds	r3, #16
 8015c8e:	4618      	mov	r0, r3
 8015c90:	f7ff f833 	bl	8014cfa <ulTimerGetAge>
 8015c94:	4603      	mov	r3, r0
 8015c96:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	dc0e      	bgt.n	8015cc0 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	00db      	lsls	r3, r3, #3
 8015caa:	1a9a      	subs	r2, r3, r2
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	4413      	add	r3, r2
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	da00      	bge.n	8015cb6 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015cb4:	3307      	adds	r3, #7
 8015cb6:	10db      	asrs	r3, r3, #3
 8015cb8:	461a      	mov	r2, r3
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8015cbe:	e00d      	b.n	8015cdc <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	005b      	lsls	r3, r3, #1
 8015cc8:	441a      	add	r2, r3
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	4413      	add	r3, r2
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	da00      	bge.n	8015cd4 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015cd2:	3303      	adds	r3, #3
 8015cd4:	109b      	asrs	r3, r3, #2
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015ce0:	2b31      	cmp	r3, #49	@ 0x31
 8015ce2:	dc02      	bgt.n	8015cea <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	2232      	movs	r2, #50	@ 0x32
 8015ce8:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8015cea:	bf00      	nop
 8015cec:	3710      	adds	r7, #16
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
	...

08015cf4 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015cf4:	b5b0      	push	{r4, r5, r7, lr}
 8015cf6:	b090      	sub	sp, #64	@ 0x40
 8015cf8:	af04      	add	r7, sp, #16
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	60b9      	str	r1, [r7, #8]
 8015cfe:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015d00:	2300      	movs	r3, #0
 8015d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	3398      	adds	r3, #152	@ 0x98
 8015d0c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015d14:	e0a6      	b.n	8015e64 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015d16:	2300      	movs	r3, #0
 8015d18:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d1c:	68db      	ldr	r3, [r3, #12]
 8015d1e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d22:	685b      	ldr	r3, [r3, #4]
 8015d24:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015d26:	69bb      	ldr	r3, [r7, #24]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015d2e:	f7fe ff9c 	bl	8014c6a <xSequenceGreaterThan>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	f040 8094 	bne.w	8015e62 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8015d3a:	69bb      	ldr	r3, [r7, #24]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d40:	429a      	cmp	r2, r3
 8015d42:	f040 809c 	bne.w	8015e7e <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	689b      	ldr	r3, [r3, #8]
 8015d4a:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015d4c:	69bb      	ldr	r3, [r7, #24]
 8015d4e:	7d9b      	ldrb	r3, [r3, #22]
 8015d50:	f003 0302 	and.w	r3, r3, #2
 8015d54:	b2db      	uxtb	r3, r3
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d144      	bne.n	8015de4 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	681a      	ldr	r2, [r3, #0]
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	4413      	add	r3, r2
 8015d62:	6879      	ldr	r1, [r7, #4]
 8015d64:	4618      	mov	r0, r3
 8015d66:	f7fe ff80 	bl	8014c6a <xSequenceGreaterThan>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d023      	beq.n	8015db8 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8015d70:	69bb      	ldr	r3, [r7, #24]
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	69db      	ldr	r3, [r3, #28]
 8015d78:	1ad3      	subs	r3, r2, r3
 8015d7a:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015d82:	461c      	mov	r4, r3
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015d8a:	461d      	mov	r5, r3
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	69db      	ldr	r3, [r3, #28]
 8015d90:	693a      	ldr	r2, [r7, #16]
 8015d92:	1ad0      	subs	r0, r2, r3
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	69db      	ldr	r3, [r3, #28]
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	1ad3      	subs	r3, r2, r3
 8015d9c:	6939      	ldr	r1, [r7, #16]
 8015d9e:	697a      	ldr	r2, [r7, #20]
 8015da0:	440a      	add	r2, r1
 8015da2:	9202      	str	r2, [sp, #8]
 8015da4:	693a      	ldr	r2, [r7, #16]
 8015da6:	9201      	str	r2, [sp, #4]
 8015da8:	9300      	str	r3, [sp, #0]
 8015daa:	4603      	mov	r3, r0
 8015dac:	462a      	mov	r2, r5
 8015dae:	4621      	mov	r1, r4
 8015db0:	4836      	ldr	r0, [pc, #216]	@ (8015e8c <prvTCPWindowTxCheckAck+0x198>)
 8015db2:	f00b fdf1 	bl	8021998 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8015db6:	e063      	b.n	8015e80 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8015db8:	69ba      	ldr	r2, [r7, #24]
 8015dba:	7d93      	ldrb	r3, [r2, #22]
 8015dbc:	f043 0302 	orr.w	r3, r3, #2
 8015dc0:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	7d1b      	ldrb	r3, [r3, #20]
 8015dc6:	2b01      	cmp	r3, #1
 8015dc8:	d10a      	bne.n	8015de0 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8015dca:	69bb      	ldr	r3, [r7, #24]
 8015dcc:	681a      	ldr	r2, [r3, #0]
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d103      	bne.n	8015de0 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8015dd8:	69b9      	ldr	r1, [r7, #24]
 8015dda:	68f8      	ldr	r0, [r7, #12]
 8015ddc:	f7ff ff50 	bl	8015c80 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8015de0:	2301      	movs	r3, #1
 8015de2:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	6a1b      	ldr	r3, [r3, #32]
 8015de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d128      	bne.n	8015e40 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015dee:	4b28      	ldr	r3, [pc, #160]	@ (8015e90 <prvTCPWindowTxCheckAck+0x19c>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	dd15      	ble.n	8015e22 <prvTCPWindowTxCheckAck+0x12e>
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015dfc:	2b17      	cmp	r3, #23
 8015dfe:	d010      	beq.n	8015e22 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	69db      	ldr	r3, [r3, #28]
 8015e04:	68ba      	ldr	r2, [r7, #8]
 8015e06:	1ad1      	subs	r1, r2, r3
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	69db      	ldr	r3, [r3, #28]
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	1ad0      	subs	r0, r2, r3
 8015e10:	69bb      	ldr	r3, [r7, #24]
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	69db      	ldr	r3, [r3, #28]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	481d      	ldr	r0, [pc, #116]	@ (8015e94 <prvTCPWindowTxCheckAck+0x1a0>)
 8015e1e:	f00b fdbb 	bl	8021998 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	6a1a      	ldr	r2, [r3, #32]
 8015e26:	697b      	ldr	r3, [r7, #20]
 8015e28:	441a      	add	r2, r3
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8015e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	4413      	add	r3, r2
 8015e34:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8015e36:	69b8      	ldr	r0, [r7, #24]
 8015e38:	f7ff f8ec 	bl	8015014 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8015e40:	6a3b      	ldr	r3, [r7, #32]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d008      	beq.n	8015e58 <prvTCPWindowTxCheckAck+0x164>
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d004      	beq.n	8015e58 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015e4e:	69bb      	ldr	r3, [r7, #24]
 8015e50:	3318      	adds	r3, #24
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7ec fff4 	bl	8002e40 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8015e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015e5a:	697b      	ldr	r3, [r7, #20]
 8015e5c:	4413      	add	r3, r2
 8015e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015e60:	e000      	b.n	8015e64 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8015e62:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d009      	beq.n	8015e80 <prvTCPWindowTxCheckAck+0x18c>
 8015e6c:	6879      	ldr	r1, [r7, #4]
 8015e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015e70:	f7fe fee5 	bl	8014c3e <xSequenceLessThan>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	f47f af4d 	bne.w	8015d16 <prvTCPWindowTxCheckAck+0x22>
 8015e7c:	e000      	b.n	8015e80 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8015e7e:	bf00      	nop
            }

            return ulBytesConfirmed;
 8015e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015e82:	4618      	mov	r0, r3
 8015e84:	3730      	adds	r7, #48	@ 0x30
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bdb0      	pop	{r4, r5, r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	080268f0 	.word	0x080268f0
 8015e90:	20001484 	.word	0x20001484
 8015e94:	08026938 	.word	0x08026938

08015e98 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
 8015ea0:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	3370      	adds	r3, #112	@ 0x70
 8015eaa:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8015eb2:	e049      	b.n	8015f48 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015eb4:	697b      	ldr	r3, [r7, #20]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	7d9b      	ldrb	r3, [r3, #22]
 8015ec4:	f003 0302 	and.w	r3, r3, #2
 8015ec8:	b2db      	uxtb	r3, r3
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d13c      	bne.n	8015f48 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	6839      	ldr	r1, [r7, #0]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7fe feb2 	bl	8014c3e <xSequenceLessThan>
 8015eda:	4603      	mov	r3, r0
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d033      	beq.n	8015f48 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	7d5b      	ldrb	r3, [r3, #21]
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	b2da      	uxtb	r2, r3
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8015eec:	68bb      	ldr	r3, [r7, #8]
 8015eee:	7d5b      	ldrb	r3, [r3, #21]
 8015ef0:	2b03      	cmp	r3, #3
 8015ef2:	d129      	bne.n	8015f48 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015ef4:	68bb      	ldr	r3, [r7, #8]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015efa:	4b18      	ldr	r3, [pc, #96]	@ (8015f5c <prvTCPWindowFastRetransmit+0xc4>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	db11      	blt.n	8015f26 <prvTCPWindowFastRetransmit+0x8e>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015f08:	2b17      	cmp	r3, #23
 8015f0a:	d00c      	beq.n	8015f26 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	681a      	ldr	r2, [r3, #0]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	69db      	ldr	r3, [r3, #28]
 8015f14:	1ad1      	subs	r1, r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	69db      	ldr	r3, [r3, #28]
 8015f1a:	683a      	ldr	r2, [r7, #0]
 8015f1c:	1ad3      	subs	r3, r2, r3
 8015f1e:	461a      	mov	r2, r3
 8015f20:	480f      	ldr	r0, [pc, #60]	@ (8015f60 <prvTCPWindowFastRetransmit+0xc8>)
 8015f22:	f00b fd39 	bl	8021998 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	3318      	adds	r3, #24
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	f7ec ff88 	bl	8002e40 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8015f36:	68bb      	ldr	r3, [r7, #8]
 8015f38:	3318      	adds	r3, #24
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	4610      	mov	r0, r2
 8015f3e:	f7fe febf 	bl	8014cc0 <vListInsertFifo>
                            ulCount++;
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	3301      	adds	r3, #1
 8015f46:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8015f48:	697a      	ldr	r2, [r7, #20]
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d1b1      	bne.n	8015eb4 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8015f50:	693b      	ldr	r3, [r7, #16]
        }
 8015f52:	4618      	mov	r0, r3
 8015f54:	3718      	adds	r7, #24
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
 8015f5a:	bf00      	nop
 8015f5c:	20001484 	.word	0x20001484
 8015f60:	08026974 	.word	0x08026974

08015f64 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6a1b      	ldr	r3, [r3, #32]
 8015f72:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015f74:	68b9      	ldr	r1, [r7, #8]
 8015f76:	6838      	ldr	r0, [r7, #0]
 8015f78:	f7fe fe4c 	bl	8014c14 <xSequenceLessThanOrEqual>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d002      	beq.n	8015f88 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8015f82:	2300      	movs	r3, #0
 8015f84:	60fb      	str	r3, [r7, #12]
 8015f86:	e005      	b.n	8015f94 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015f88:	683a      	ldr	r2, [r7, #0]
 8015f8a:	68b9      	ldr	r1, [r7, #8]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f7ff feb1 	bl	8015cf4 <prvTCPWindowTxCheckAck>
 8015f92:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8015f94:	68fb      	ldr	r3, [r7, #12]
        }
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
	...

08015fa0 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8015fa0:	b5b0      	push	{r4, r5, r7, lr}
 8015fa2:	b088      	sub	sp, #32
 8015fa4:	af02      	add	r7, sp, #8
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	6a1b      	ldr	r3, [r3, #32]
 8015fb0:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015fb2:	687a      	ldr	r2, [r7, #4]
 8015fb4:	68b9      	ldr	r1, [r7, #8]
 8015fb6:	68f8      	ldr	r0, [r7, #12]
 8015fb8:	f7ff fe9c 	bl	8015cf4 <prvTCPWindowTxCheckAck>
 8015fbc:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8015fbe:	68b9      	ldr	r1, [r7, #8]
 8015fc0:	68f8      	ldr	r0, [r7, #12]
 8015fc2:	f7ff ff69 	bl	8015e98 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015fc6:	4b16      	ldr	r3, [pc, #88]	@ (8016020 <ulTCPWindowTxSack+0x80>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	dd23      	ble.n	8016016 <ulTCPWindowTxSack+0x76>
 8015fce:	6979      	ldr	r1, [r7, #20]
 8015fd0:	68b8      	ldr	r0, [r7, #8]
 8015fd2:	f7fe fe4a 	bl	8014c6a <xSequenceGreaterThan>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d01c      	beq.n	8016016 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015fe2:	461c      	mov	r4, r3
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015fea:	461d      	mov	r5, r3
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	69db      	ldr	r3, [r3, #28]
 8015ff0:	68ba      	ldr	r2, [r7, #8]
 8015ff2:	1ad0      	subs	r0, r2, r3
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	69db      	ldr	r3, [r3, #28]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	1ad3      	subs	r3, r2, r3
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	6a11      	ldr	r1, [r2, #32]
 8016000:	68fa      	ldr	r2, [r7, #12]
 8016002:	69d2      	ldr	r2, [r2, #28]
 8016004:	1a8a      	subs	r2, r1, r2
 8016006:	9201      	str	r2, [sp, #4]
 8016008:	9300      	str	r3, [sp, #0]
 801600a:	4603      	mov	r3, r0
 801600c:	462a      	mov	r2, r5
 801600e:	4621      	mov	r1, r4
 8016010:	4804      	ldr	r0, [pc, #16]	@ (8016024 <ulTCPWindowTxSack+0x84>)
 8016012:	f00b fcc1 	bl	8021998 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016016:	693b      	ldr	r3, [r7, #16]
        }
 8016018:	4618      	mov	r0, r3
 801601a:	3718      	adds	r7, #24
 801601c:	46bd      	mov	sp, r7
 801601e:	bdb0      	pop	{r4, r5, r7, pc}
 8016020:	20001484 	.word	0x20001484
 8016024:	080269b4 	.word	0x080269b4

08016028 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b084      	sub	sp, #16
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d014      	beq.n	8016060 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801603a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	899b      	ldrh	r3, [r3, #12]
 8016040:	b29b      	uxth	r3, r3
 8016042:	2b08      	cmp	r3, #8
 8016044:	d004      	beq.n	8016050 <vProcessGeneratedUDPPacket+0x28>
 8016046:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801604a:	4293      	cmp	r3, r2
 801604c:	d004      	beq.n	8016058 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 801604e:	e007      	b.n	8016060 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 f845 	bl	80160e0 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016056:	e003      	b.n	8016060 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 fae3 	bl	8016624 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 801605e:	bf00      	nop
        }
    }
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b086      	sub	sp, #24
 801606c:	af00      	add	r7, sp, #0
 801606e:	60f8      	str	r0, [r7, #12]
 8016070:	460b      	mov	r3, r1
 8016072:	607a      	str	r2, [r7, #4]
 8016074:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016076:	2300      	movs	r3, #0
 8016078:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d103      	bne.n	8016088 <xProcessReceivedUDPPacket+0x20>
 8016080:	2178      	movs	r1, #120	@ 0x78
 8016082:	4816      	ldr	r0, [pc, #88]	@ (80160dc <xProcessReceivedUDPPacket+0x74>)
 8016084:	f7eb fb60 	bl	8001748 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801608c:	2b00      	cmp	r3, #0
 801608e:	d103      	bne.n	8016098 <xProcessReceivedUDPPacket+0x30>
 8016090:	2179      	movs	r1, #121	@ 0x79
 8016092:	4812      	ldr	r0, [pc, #72]	@ (80160dc <xProcessReceivedUDPPacket+0x74>)
 8016094:	f7eb fb58 	bl	8001748 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801609c:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801609e:	693b      	ldr	r3, [r7, #16]
 80160a0:	899b      	ldrh	r3, [r3, #12]
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	2b08      	cmp	r3, #8
 80160a6:	d004      	beq.n	80160b2 <xProcessReceivedUDPPacket+0x4a>
 80160a8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d008      	beq.n	80160c2 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 80160b0:	e00f      	b.n	80160d2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 80160b2:	897b      	ldrh	r3, [r7, #10]
 80160b4:	687a      	ldr	r2, [r7, #4]
 80160b6:	4619      	mov	r1, r3
 80160b8:	68f8      	ldr	r0, [r7, #12]
 80160ba:	f000 f92f 	bl	801631c <xProcessReceivedUDPPacket_IPv4>
 80160be:	6178      	str	r0, [r7, #20]
                break;
 80160c0:	e007      	b.n	80160d2 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 80160c2:	897b      	ldrh	r3, [r7, #10]
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	4619      	mov	r1, r3
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	f000 fbdd 	bl	8016888 <xProcessReceivedUDPPacket_IPv6>
 80160ce:	6178      	str	r0, [r7, #20]
                break;
 80160d0:	bf00      	nop
    }

    return xReturn;
 80160d2:	697b      	ldr	r3, [r7, #20]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	080269e8 	.word	0x080269e8

080160e0 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b08e      	sub	sp, #56	@ 0x38
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	695b      	ldr	r3, [r3, #20]
 80160ec:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160f2:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d104      	bne.n	801610c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016106:	3b2a      	subs	r3, #42	@ 0x2a
 8016108:	633b      	str	r3, [r7, #48]	@ 0x30
 801610a:	e003      	b.n	8016114 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016110:	3b2a      	subs	r3, #42	@ 0x2a
 8016112:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016116:	f107 0208 	add.w	r2, r7, #8
 801611a:	f107 030c 	add.w	r3, r7, #12
 801611e:	4618      	mov	r0, r3
 8016120:	f7f0 fd68 	bl	8006bf4 <eARPGetCacheEntry>
 8016124:	4603      	mov	r3, r0
 8016126:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801612e:	2b00      	cmp	r3, #0
 8016130:	d102      	bne.n	8016138 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016132:	68ba      	ldr	r2, [r7, #8]
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016138:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801613c:	2b02      	cmp	r3, #2
 801613e:	f000 80a0 	beq.w	8016282 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016142:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016146:	2b01      	cmp	r3, #1
 8016148:	d176      	bne.n	8016238 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 801614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801614c:	330e      	adds	r3, #14
 801614e:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016154:	2b00      	cmp	r3, #0
 8016156:	d025      	beq.n	80161a4 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801615a:	3322      	adds	r3, #34	@ 0x22
 801615c:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016162:	6a3b      	ldr	r3, [r7, #32]
 8016164:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801616a:	6a3b      	ldr	r3, [r7, #32]
 801616c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 801616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016170:	b29b      	uxth	r3, r3
 8016172:	3308      	adds	r3, #8
 8016174:	b29a      	uxth	r2, r3
 8016176:	6a3b      	ldr	r3, [r7, #32]
 8016178:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801617a:	6a3b      	ldr	r3, [r7, #32]
 801617c:	889b      	ldrh	r3, [r3, #4]
 801617e:	b29b      	uxth	r3, r3
 8016180:	021b      	lsls	r3, r3, #8
 8016182:	b21a      	sxth	r2, r3
 8016184:	6a3b      	ldr	r3, [r7, #32]
 8016186:	889b      	ldrh	r3, [r3, #4]
 8016188:	b29b      	uxth	r3, r3
 801618a:	0a1b      	lsrs	r3, r3, #8
 801618c:	b29b      	uxth	r3, r3
 801618e:	b21b      	sxth	r3, r3
 8016190:	4313      	orrs	r3, r2
 8016192:	b21b      	sxth	r3, r3
 8016194:	b29a      	uxth	r2, r3
 8016196:	6a3b      	ldr	r3, [r7, #32]
 8016198:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801619a:	6a3b      	ldr	r3, [r7, #32]
 801619c:	2200      	movs	r2, #0
 801619e:	719a      	strb	r2, [r3, #6]
 80161a0:	2200      	movs	r2, #0
 80161a2:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 80161a4:	4b5b      	ldr	r3, [pc, #364]	@ (8016314 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 80161a6:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ac:	3306      	adds	r3, #6
 80161ae:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 80161b0:	2218      	movs	r2, #24
 80161b2:	69f9      	ldr	r1, [r7, #28]
 80161b4:	69b8      	ldr	r0, [r7, #24]
 80161b6:	f00b fe0b 	bl	8021dd0 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d109      	bne.n	80161d6 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 80161c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161c4:	2201      	movs	r2, #1
 80161c6:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 80161c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	331c      	adds	r3, #28
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d2:	805a      	strh	r2, [r3, #2]
 80161d4:	e005      	b.n	80161e2 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 80161d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161d8:	b29b      	uxth	r3, r3
 80161da:	331c      	adds	r3, #28
 80161dc:	b29a      	uxth	r2, r3
 80161de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e0:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80161e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e4:	885b      	ldrh	r3, [r3, #2]
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	021b      	lsls	r3, r3, #8
 80161ea:	b21a      	sxth	r2, r3
 80161ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ee:	885b      	ldrh	r3, [r3, #2]
 80161f0:	b29b      	uxth	r3, r3
 80161f2:	0a1b      	lsrs	r3, r3, #8
 80161f4:	b29b      	uxth	r3, r3
 80161f6:	b21b      	sxth	r3, r3
 80161f8:	4313      	orrs	r3, r2
 80161fa:	b21b      	sxth	r3, r3
 80161fc:	b29a      	uxth	r2, r3
 80161fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016200:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	695a      	ldr	r2, [r3, #20]
 8016206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016208:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801620e:	2b00      	cmp	r3, #0
 8016210:	d004      	beq.n	801621c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621e:	2200      	movs	r2, #0
 8016220:	719a      	strb	r2, [r3, #6]
 8016222:	2200      	movs	r2, #0
 8016224:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	695b      	ldr	r3, [r3, #20]
 801622a:	4a3b      	ldr	r2, [pc, #236]	@ (8016318 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801622c:	4293      	cmp	r3, r2
 801622e:	d128      	bne.n	8016282 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016232:	2201      	movs	r2, #1
 8016234:	721a      	strb	r2, [r3, #8]
 8016236:	e024      	b.n	8016282 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016238:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801623c:	2b00      	cmp	r3, #0
 801623e:	d11d      	bne.n	801627c <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2200      	movs	r2, #0
 8016244:	4619      	mov	r1, r3
 8016246:	2000      	movs	r0, #0
 8016248:	f7f0 fbc0 	bl	80069cc <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	695b      	ldr	r3, [r3, #20]
 8016250:	210b      	movs	r1, #11
 8016252:	4618      	mov	r0, r3
 8016254:	f7f6 ff58 	bl	800d108 <FreeRTOS_FindEndPointOnNetMask>
 8016258:	4602      	mov	r2, r0
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016262:	2b00      	cmp	r3, #0
 8016264:	d103      	bne.n	801626e <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8016266:	2302      	movs	r3, #2
 8016268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801626c:	e009      	b.n	8016282 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801626e:	68fa      	ldr	r2, [r7, #12]
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f7f0 ff25 	bl	80070c4 <vARPGenerateRequestPacket>
 801627a:	e002      	b.n	8016282 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 801627c:	2302      	movs	r3, #2
 801627e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8016282:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016286:	2b02      	cmp	r3, #2
 8016288:	d03d      	beq.n	8016306 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801628e:	2b00      	cmp	r3, #0
 8016290:	d035      	beq.n	80162fe <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016296:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801629a:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162a0:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 80162a2:	693b      	ldr	r3, [r7, #16]
 80162a4:	1d98      	adds	r0, r3, #6
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162aa:	33e8      	adds	r3, #232	@ 0xe8
 80162ac:	2206      	movs	r2, #6
 80162ae:	4619      	mov	r1, r3
 80162b0:	f00b fd8e 	bl	8021dd0 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80162ba:	d812      	bhi.n	80162e2 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80162c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162c2:	e008      	b.n	80162d6 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ca:	4413      	add	r3, r2
 80162cc:	2200      	movs	r2, #0
 80162ce:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80162d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d2:	3301      	adds	r3, #1
 80162d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80162da:	ddf3      	ble.n	80162c4 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	223c      	movs	r2, #60	@ 0x3c
 80162e0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d011      	beq.n	801630c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	68db      	ldr	r3, [r3, #12]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d00d      	beq.n	801630c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	68db      	ldr	r3, [r3, #12]
 80162f4:	2201      	movs	r2, #1
 80162f6:	6879      	ldr	r1, [r7, #4]
 80162f8:	6978      	ldr	r0, [r7, #20]
 80162fa:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 80162fc:	e006      	b.n	801630c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fca2 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
}
 8016304:	e002      	b.n	801630c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 fc9e 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
}
 801630c:	bf00      	nop
 801630e:	3738      	adds	r7, #56	@ 0x38
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}
 8016314:	08027108 	.word	0x08027108
 8016318:	fc0000e0 	.word	0xfc0000e0

0801631c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 801631c:	b590      	push	{r4, r7, lr}
 801631e:	b099      	sub	sp, #100	@ 0x64
 8016320:	af02      	add	r7, sp, #8
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	460b      	mov	r3, r1
 8016326:	607a      	str	r2, [r7, #4]
 8016328:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801632a:	2301      	movs	r3, #1
 801632c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d104      	bne.n	801633e <xProcessReceivedUDPPacket_IPv4+0x22>
 8016334:	f240 116f 	movw	r1, #367	@ 0x16f
 8016338:	4872      	ldr	r0, [pc, #456]	@ (8016504 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801633a:	f7eb fa05 	bl	8001748 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016342:	2b00      	cmp	r3, #0
 8016344:	d104      	bne.n	8016350 <xProcessReceivedUDPPacket_IPv4+0x34>
 8016346:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 801634a:	486e      	ldr	r0, [pc, #440]	@ (8016504 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801634c:	f7eb f9fc 	bl	8001748 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016354:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801635a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801635c:	897b      	ldrh	r3, [r7, #10]
 801635e:	4618      	mov	r0, r3
 8016360:	f7f8 fc60 	bl	800ec24 <pxUDPSocketLookup>
 8016364:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	2200      	movs	r2, #0
 801636a:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 801636c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801636e:	2b00      	cmp	r3, #0
 8016370:	f000 8085 	beq.w	801647e <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8016374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016376:	2b00      	cmp	r3, #0
 8016378:	d018      	beq.n	80163ac <xProcessReceivedUDPPacket_IPv4+0x90>
 801637a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d014      	beq.n	80163ac <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	f7f0 fa0c 	bl	80067a0 <xCheckRequiresARPResolution>
 8016388:	4603      	mov	r3, r0
 801638a:	2b01      	cmp	r3, #1
 801638c:	d105      	bne.n	801639a <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2201      	movs	r2, #1
 8016392:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8016394:	2300      	movs	r3, #0
 8016396:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8016398:	e0ae      	b.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 801639a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801639c:	1d9a      	adds	r2, r3, #6
 801639e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163a0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80163a4:	4619      	mov	r1, r3
 80163a6:	4610      	mov	r0, r2
 80163a8:	f7f0 fada 	bl	8006960 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80163ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d02f      	beq.n	8016414 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163b8:	332a      	adds	r3, #42	@ 0x2a
 80163ba:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80163bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80163c0:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80163c6:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	695b      	ldr	r3, [r3, #20]
 80163cc:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80163ce:	2302      	movs	r3, #2
 80163d0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80163d4:	2318      	movs	r3, #24
 80163d6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 80163da:	897b      	ldrh	r3, [r7, #10]
 80163dc:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 80163de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80163e0:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80163e4:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80163e6:	2302      	movs	r3, #2
 80163e8:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80163ea:	2318      	movs	r3, #24
 80163ec:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163f2:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 80163f6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80163fa:	f107 0310 	add.w	r3, r7, #16
 80163fe:	9300      	str	r3, [sp, #0]
 8016400:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016402:	460b      	mov	r3, r1
 8016404:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016406:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016408:	47a0      	blx	r4
 801640a:	4603      	mov	r3, r0
 801640c:	2b00      	cmp	r3, #0
 801640e:	d001      	beq.n	8016414 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016410:	2300      	movs	r3, #0
 8016412:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016416:	2b01      	cmp	r3, #1
 8016418:	d16e      	bne.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 801641a:	f7ed fd5b 	bl	8003ed4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801641e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016420:	3354      	adds	r3, #84	@ 0x54
 8016422:	68fa      	ldr	r2, [r7, #12]
 8016424:	4611      	mov	r1, r2
 8016426:	4618      	mov	r0, r3
 8016428:	f7ec fcad 	bl	8002d86 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 801642c:	f7ed fd60 	bl	8003ef0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016430:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d005      	beq.n	8016444 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801643a:	685b      	ldr	r3, [r3, #4]
 801643c:	2101      	movs	r1, #1
 801643e:	4618      	mov	r0, r3
 8016440:	f7ec fb9c 	bl	8002b7c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016444:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016448:	2b00      	cmp	r3, #0
 801644a:	d00c      	beq.n	8016466 <xProcessReceivedUDPPacket_IPv4+0x14a>
 801644c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801644e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016450:	f003 0301 	and.w	r3, r3, #1
 8016454:	2b00      	cmp	r3, #0
 8016456:	d006      	beq.n	8016466 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2101      	movs	r1, #1
 8016460:	4618      	mov	r0, r3
 8016462:	f7ec fb8b 	bl	8002b7c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801646a:	2b00      	cmp	r3, #0
 801646c:	d044      	beq.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801646e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016470:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016472:	2300      	movs	r3, #0
 8016474:	2200      	movs	r2, #0
 8016476:	2100      	movs	r1, #0
 8016478:	f7ec fe5c 	bl	8003134 <xQueueGenericSend>
 801647c:	e03c      	b.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801647e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016480:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016482:	b29b      	uxth	r3, r3
 8016484:	021b      	lsls	r3, r3, #8
 8016486:	b21a      	sxth	r2, r3
 8016488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801648a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801648c:	b29b      	uxth	r3, r3
 801648e:	0a1b      	lsrs	r3, r3, #8
 8016490:	b29b      	uxth	r3, r3
 8016492:	b21b      	sxth	r3, r3
 8016494:	4313      	orrs	r3, r2
 8016496:	b21b      	sxth	r3, r3
 8016498:	2b35      	cmp	r3, #53	@ 0x35
 801649a:	d10f      	bne.n	80164bc <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 801649c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801649e:	1d98      	adds	r0, r3, #6
 80164a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164a2:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164aa:	461a      	mov	r2, r3
 80164ac:	f7f0 fa8e 	bl	80069cc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80164b0:	68f8      	ldr	r0, [r7, #12]
 80164b2:	f7f0 ff20 	bl	80072f6 <ulDNSHandlePacket>
 80164b6:	4603      	mov	r3, r0
 80164b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80164ba:	e01d      	b.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80164bc:	897b      	ldrh	r3, [r7, #10]
 80164be:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80164c2:	4293      	cmp	r3, r2
 80164c4:	d006      	beq.n	80164d4 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 80164c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80164ca:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 80164cc:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80164d0:	4293      	cmp	r3, r2
 80164d2:	d10f      	bne.n	80164f4 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80164d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164d6:	1d98      	adds	r0, r3, #6
 80164d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164da:	f8d3 101a 	ldr.w	r1, [r3, #26]
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80164e2:	461a      	mov	r2, r3
 80164e4:	f7f0 fa72 	bl	80069cc <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80164e8:	68f8      	ldr	r0, [r7, #12]
 80164ea:	f7f0 ff04 	bl	80072f6 <ulDNSHandlePacket>
 80164ee:	4603      	mov	r3, r0
 80164f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80164f2:	e001      	b.n	80164f8 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80164f4:	2300      	movs	r3, #0
 80164f6:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80164f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	375c      	adds	r7, #92	@ 0x5c
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd90      	pop	{r4, r7, pc}
 8016502:	bf00      	nop
 8016504:	08026a18 	.word	0x08026a18

08016508 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016512:	2000      	movs	r0, #0
 8016514:	f7f6 fd20 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8016518:	6178      	str	r0, [r7, #20]
 801651a:	e021      	b.n	8016560 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b60      	cmp	r3, #96	@ 0x60
 8016520:	d119      	bne.n	8016556 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016522:	697b      	ldr	r3, [r7, #20]
 8016524:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016528:	f003 0304 	and.w	r3, r3, #4
 801652c:	b2db      	uxtb	r3, r3
 801652e:	2b00      	cmp	r3, #0
 8016530:	d011      	beq.n	8016556 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	3338      	adds	r3, #56	@ 0x38
 8016536:	4618      	mov	r0, r3
 8016538:	f7f7 f8f2 	bl	800d720 <xIPv6_GetIPType>
 801653c:	4603      	mov	r3, r0
 801653e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016540:	7cfb      	ldrb	r3, [r7, #19]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d101      	bne.n	801654a <pxGetEndpoint+0x42>
 8016546:	2301      	movs	r3, #1
 8016548:	e000      	b.n	801654c <pxGetEndpoint+0x44>
 801654a:	2300      	movs	r3, #0
 801654c:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801654e:	68fa      	ldr	r2, [r7, #12]
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	429a      	cmp	r2, r3
 8016554:	d008      	beq.n	8016568 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8016556:	6979      	ldr	r1, [r7, #20]
 8016558:	2000      	movs	r0, #0
 801655a:	f7f6 fd1f 	bl	800cf9c <FreeRTOS_NextEndPoint>
 801655e:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1da      	bne.n	801651c <pxGetEndpoint+0x14>
 8016566:	e000      	b.n	801656a <pxGetEndpoint+0x62>
                {
                    break;
 8016568:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 801656a:	697b      	ldr	r3, [r7, #20]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3718      	adds	r7, #24
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801657e:	2300      	movs	r3, #0
 8016580:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f103 0114 	add.w	r1, r3, #20
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801658c:	2b00      	cmp	r3, #0
 801658e:	d001      	beq.n	8016594 <prvStartLookup+0x20>
 8016590:	4b1e      	ldr	r3, [pc, #120]	@ (801660c <prvStartLookup+0x98>)
 8016592:	e000      	b.n	8016596 <prvStartLookup+0x22>
 8016594:	4b1e      	ldr	r3, [pc, #120]	@ (8016610 <prvStartLookup+0x9c>)
 8016596:	461a      	mov	r2, r3
 8016598:	481e      	ldr	r0, [pc, #120]	@ (8016614 <prvStartLookup+0xa0>)
 801659a:	f00b f9fd 	bl	8021998 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d11f      	bne.n	80165e6 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	3314      	adds	r3, #20
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f7 f8b8 	bl	800d720 <xIPv6_GetIPType>
 80165b0:	4603      	mov	r3, r0
 80165b2:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80165b4:	7bbb      	ldrb	r3, [r7, #14]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d101      	bne.n	80165be <prvStartLookup+0x4a>
 80165ba:	2301      	movs	r3, #1
 80165bc:	e000      	b.n	80165c0 <prvStartLookup+0x4c>
 80165be:	2300      	movs	r3, #0
 80165c0:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 80165c2:	68b9      	ldr	r1, [r7, #8]
 80165c4:	2060      	movs	r0, #96	@ 0x60
 80165c6:	f7ff ff9f 	bl	8016508 <pxGetEndpoint>
 80165ca:	4602      	mov	r2, r0
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d001      	beq.n	80165dc <prvStartLookup+0x68>
 80165d8:	4b0f      	ldr	r3, [pc, #60]	@ (8016618 <prvStartLookup+0xa4>)
 80165da:	e000      	b.n	80165de <prvStartLookup+0x6a>
 80165dc:	4b0f      	ldr	r3, [pc, #60]	@ (801661c <prvStartLookup+0xa8>)
 80165de:	4619      	mov	r1, r3
 80165e0:	480f      	ldr	r0, [pc, #60]	@ (8016620 <prvStartLookup+0xac>)
 80165e2:	f00b f9d9 	bl	8021998 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d008      	beq.n	8016600 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	3314      	adds	r3, #20
 80165f2:	4619      	mov	r1, r3
 80165f4:	6878      	ldr	r0, [r7, #4]
 80165f6:	f7f5 f9d5 	bl	800b9a4 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	2201      	movs	r2, #1
 80165fe:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016600:	7bfb      	ldrb	r3, [r7, #15]
}
 8016602:	4618      	mov	r0, r3
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	08026a4c 	.word	0x08026a4c
 8016610:	08026a50 	.word	0x08026a50
 8016614:	08026a54 	.word	0x08026a54
 8016618:	08026a78 	.word	0x08026a78
 801661c:	08026a7c 	.word	0x08026a7c
 8016620:	08026a80 	.word	0x08026a80

08016624 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016624:	b590      	push	{r4, r7, lr}
 8016626:	b093      	sub	sp, #76	@ 0x4c
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 801662c:	2300      	movs	r3, #0
 801662e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016630:	2300      	movs	r3, #0
 8016632:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016634:	2300      	movs	r3, #0
 8016636:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016638:	2300      	movs	r3, #0
 801663a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016640:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016644:	330e      	adds	r3, #14
 8016646:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	3314      	adds	r3, #20
 801664c:	f107 040c 	add.w	r4, r7, #12
 8016650:	6818      	ldr	r0, [r3, #0]
 8016652:	6859      	ldr	r1, [r3, #4]
 8016654:	689a      	ldr	r2, [r3, #8]
 8016656:	68db      	ldr	r3, [r3, #12]
 8016658:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801665e:	2b00      	cmp	r3, #0
 8016660:	d107      	bne.n	8016672 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8016662:	233e      	movs	r3, #62	@ 0x3e
 8016664:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801666a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801666c:	1ad3      	subs	r3, r2, r3
 801666e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016670:	e003      	b.n	801667a <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016676:	3b3e      	subs	r3, #62	@ 0x3e
 8016678:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	3314      	adds	r3, #20
 801667e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016680:	f107 021c 	add.w	r2, r7, #28
 8016684:	4618      	mov	r0, r3
 8016686:	f7f4 ff21 	bl	800b4cc <eNDGetCacheEntry>
 801668a:	4603      	mov	r3, r0
 801668c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8016690:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016694:	2b02      	cmp	r3, #2
 8016696:	f000 80b1 	beq.w	80167fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 801669a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801669e:	2b01      	cmp	r3, #1
 80166a0:	f040 8095 	bne.w	80167ce <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80166a4:	69fa      	ldr	r2, [r7, #28]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d109      	bne.n	80166c6 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80166b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166b4:	2260      	movs	r2, #96	@ 0x60
 80166b6:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 80166b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ba:	223a      	movs	r2, #58	@ 0x3a
 80166bc:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 80166be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c0:	2280      	movs	r2, #128	@ 0x80
 80166c2:	71da      	strb	r2, [r3, #7]
 80166c4:	e05e      	b.n	8016784 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 80166c6:	2300      	movs	r3, #0
 80166c8:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 80166ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166cc:	3336      	adds	r3, #54	@ 0x36
 80166ce:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 80166d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d2:	2260      	movs	r2, #96	@ 0x60
 80166d4:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 80166d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d8:	2200      	movs	r2, #0
 80166da:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 80166dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166de:	2200      	movs	r2, #0
 80166e0:	709a      	strb	r2, [r3, #2]
 80166e2:	2200      	movs	r2, #0
 80166e4:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 80166e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e8:	22ff      	movs	r2, #255	@ 0xff
 80166ea:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	3b36      	subs	r3, #54	@ 0x36
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f8:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80166fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166fc:	2211      	movs	r2, #17
 80166fe:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016704:	b29b      	uxth	r3, r3
 8016706:	3b36      	subs	r3, #54	@ 0x36
 8016708:	b29a      	uxth	r2, r3
 801670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801670c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016710:	889b      	ldrh	r3, [r3, #4]
 8016712:	b29b      	uxth	r3, r3
 8016714:	021b      	lsls	r3, r3, #8
 8016716:	b21a      	sxth	r2, r3
 8016718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671a:	889b      	ldrh	r3, [r3, #4]
 801671c:	b29b      	uxth	r3, r3
 801671e:	0a1b      	lsrs	r3, r3, #8
 8016720:	b29b      	uxth	r3, r3
 8016722:	b21b      	sxth	r3, r3
 8016724:	4313      	orrs	r3, r2
 8016726:	b21b      	sxth	r3, r3
 8016728:	b29a      	uxth	r2, r3
 801672a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801672c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016734:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 801673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801673c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 801673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016740:	889b      	ldrh	r3, [r3, #4]
 8016742:	b29b      	uxth	r3, r3
 8016744:	021b      	lsls	r3, r3, #8
 8016746:	b21a      	sxth	r2, r3
 8016748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801674a:	889b      	ldrh	r3, [r3, #4]
 801674c:	b29b      	uxth	r3, r3
 801674e:	0a1b      	lsrs	r3, r3, #8
 8016750:	b29b      	uxth	r3, r3
 8016752:	b21b      	sxth	r3, r3
 8016754:	4313      	orrs	r3, r2
 8016756:	b21b      	sxth	r3, r3
 8016758:	b29a      	uxth	r2, r3
 801675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675c:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016760:	2200      	movs	r2, #0
 8016762:	719a      	strb	r2, [r3, #6]
 8016764:	2200      	movs	r2, #0
 8016766:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801676c:	2b00      	cmp	r3, #0
 801676e:	d009      	beq.n	8016784 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016772:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801677a:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801677c:	2210      	movs	r2, #16
 801677e:	4619      	mov	r1, r3
 8016780:	f00b fb26 	bl	8021dd0 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016788:	2b00      	cmp	r3, #0
 801678a:	d10e      	bne.n	80167aa <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 801678c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801678e:	b29b      	uxth	r3, r3
 8016790:	3308      	adds	r3, #8
 8016792:	b29b      	uxth	r3, r3
 8016794:	021b      	lsls	r3, r3, #8
 8016796:	b29a      	uxth	r2, r3
 8016798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801679a:	3308      	adds	r3, #8
 801679c:	0a1b      	lsrs	r3, r3, #8
 801679e:	b29b      	uxth	r3, r3
 80167a0:	4313      	orrs	r3, r2
 80167a2:	b29a      	uxth	r2, r3
 80167a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167a6:	809a      	strh	r2, [r3, #4]
 80167a8:	e028      	b.n	80167fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80167aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ac:	2211      	movs	r2, #17
 80167ae:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 80167b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	3308      	adds	r3, #8
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	021b      	lsls	r3, r3, #8
 80167ba:	b29a      	uxth	r2, r3
 80167bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80167be:	3308      	adds	r3, #8
 80167c0:	0a1b      	lsrs	r3, r3, #8
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4313      	orrs	r3, r2
 80167c6:	b29a      	uxth	r2, r3
 80167c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ca:	809a      	strh	r2, [r3, #4]
 80167cc:	e016      	b.n	80167fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80167ce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d10f      	bne.n	80167f6 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d002      	beq.n	80167e2 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80167dc:	69fa      	ldr	r2, [r7, #28]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 80167e2:	f107 0320 	add.w	r3, r7, #32
 80167e6:	4619      	mov	r1, r3
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7ff fec3 	bl	8016574 <prvStartLookup>
 80167ee:	4603      	mov	r3, r0
 80167f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80167f4:	e002      	b.n	80167fc <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80167f6:	2302      	movs	r3, #2
 80167f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 80167fc:	6a3b      	ldr	r3, [r7, #32]
 80167fe:	2b01      	cmp	r3, #1
 8016800:	d03d      	beq.n	801687e <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016802:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016806:	2b02      	cmp	r3, #2
 8016808:	d036      	beq.n	8016878 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801680e:	2b00      	cmp	r3, #0
 8016810:	d02e      	beq.n	8016870 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016816:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801681a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016820:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016824:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801682a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 801682c:	2206      	movs	r2, #6
 801682e:	4619      	mov	r1, r3
 8016830:	f00b face 	bl	8021dd0 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016838:	2b3b      	cmp	r3, #59	@ 0x3b
 801683a:	d812      	bhi.n	8016862 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016842:	e008      	b.n	8016856 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801684a:	4413      	add	r3, r2
 801684c:	2200      	movs	r2, #0
 801684e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016852:	3301      	adds	r3, #1
 8016854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016858:	2b3b      	cmp	r3, #59	@ 0x3b
 801685a:	ddf3      	ble.n	8016844 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	223c      	movs	r2, #60	@ 0x3c
 8016860:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016864:	68db      	ldr	r3, [r3, #12]
 8016866:	2201      	movs	r2, #1
 8016868:	6879      	ldr	r1, [r7, #4]
 801686a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801686c:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801686e:	e006      	b.n	801687e <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f000 f9e9 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
}
 8016876:	e002      	b.n	801687e <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f000 f9e5 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
}
 801687e:	bf00      	nop
 8016880:	374c      	adds	r7, #76	@ 0x4c
 8016882:	46bd      	mov	sp, r7
 8016884:	bd90      	pop	{r4, r7, pc}
	...

08016888 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016888:	b590      	push	{r4, r7, lr}
 801688a:	b09b      	sub	sp, #108	@ 0x6c
 801688c:	af02      	add	r7, sp, #8
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	460b      	mov	r3, r1
 8016892:	607a      	str	r2, [r7, #4]
 8016894:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016896:	2301      	movs	r3, #1
 8016898:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d104      	bne.n	80168aa <xProcessReceivedUDPPacket_IPv6+0x22>
 80168a0:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 80168a4:	4874      	ldr	r0, [pc, #464]	@ (8016a78 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80168a6:	f7ea ff4f 	bl	8001748 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d104      	bne.n	80168bc <xProcessReceivedUDPPacket_IPv6+0x34>
 80168b2:	f240 1187 	movw	r1, #391	@ 0x187
 80168b6:	4870      	ldr	r0, [pc, #448]	@ (8016a78 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 80168b8:	f7ea ff46 	bl	8001748 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168c0:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80168c2:	897b      	ldrh	r3, [r7, #10]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f8 f9ad 	bl	800ec24 <pxUDPSocketLookup>
 80168ca:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 80168d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80168d4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d109      	bne.n	80168f0 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 80168dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80168de:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	4619      	mov	r1, r3
 80168e4:	4865      	ldr	r0, [pc, #404]	@ (8016a7c <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 80168e6:	f00b f857 	bl	8021998 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 80168ea:	2300      	movs	r3, #0
 80168ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80168ee:	e0bd      	b.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80168f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	f000 8091 	beq.w	8016a1a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f7ef ff51 	bl	80067a0 <xCheckRequiresARPResolution>
 80168fe:	4603      	mov	r3, r0
 8016900:	2b01      	cmp	r3, #1
 8016902:	d105      	bne.n	8016910 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2201      	movs	r2, #1
 8016908:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801690a:	2300      	movs	r3, #0
 801690c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801690e:	e0ad      	b.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016912:	1d98      	adds	r0, r3, #6
 8016914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016916:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801691e:	461a      	mov	r2, r3
 8016920:	f7f4 fe82 	bl	800b628 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016924:	68f8      	ldr	r0, [r7, #12]
 8016926:	f7f2 ff7f 	bl	8009828 <uxIPHeaderSizePacket>
 801692a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801692c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801692e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016930:	2b00      	cmp	r3, #0
 8016932:	d03d      	beq.n	80169b0 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801693a:	3316      	adds	r3, #22
 801693c:	4413      	add	r3, r2
 801693e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016944:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801694a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 801694c:	897b      	ldrh	r3, [r7, #10]
 801694e:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016952:	3316      	adds	r3, #22
 8016954:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016958:	6818      	ldr	r0, [r3, #0]
 801695a:	6859      	ldr	r1, [r3, #4]
 801695c:	689a      	ldr	r2, [r3, #8]
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016964:	3326      	adds	r3, #38	@ 0x26
 8016966:	f107 041c 	add.w	r4, r7, #28
 801696a:	6818      	ldr	r0, [r3, #0]
 801696c:	6859      	ldr	r1, [r3, #4]
 801696e:	689a      	ldr	r2, [r3, #8]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016974:	230a      	movs	r3, #10
 8016976:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 801697a:	230a      	movs	r3, #10
 801697c:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801697e:	2318      	movs	r3, #24
 8016980:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016984:	2318      	movs	r3, #24
 8016986:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801698c:	3b3e      	subs	r3, #62	@ 0x3e
 801698e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016990:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016994:	f107 0314 	add.w	r3, r7, #20
 8016998:	9300      	str	r3, [sp, #0]
 801699a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801699c:	4613      	mov	r3, r2
 801699e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80169a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80169a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80169a4:	47a0      	blx	r4
 80169a6:	4603      	mov	r3, r0
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d001      	beq.n	80169b0 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80169ac:	2300      	movs	r3, #0
 80169ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80169b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d15a      	bne.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80169b6:	f7ed fa8d 	bl	8003ed4 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80169ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169bc:	3354      	adds	r3, #84	@ 0x54
 80169be:	68fa      	ldr	r2, [r7, #12]
 80169c0:	4611      	mov	r1, r2
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ec f9df 	bl	8002d86 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80169c8:	f7ed fa92 	bl	8003ef0 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80169cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d005      	beq.n	80169e0 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80169d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	2101      	movs	r1, #1
 80169da:	4618      	mov	r0, r3
 80169dc:	f7ec f8ce 	bl	8002b7c <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80169e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d00c      	beq.n	8016a02 <xProcessReceivedUDPPacket_IPv6+0x17a>
 80169e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169ec:	f003 0301 	and.w	r3, r3, #1
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d006      	beq.n	8016a02 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80169f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80169f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2101      	movs	r1, #1
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7ec f8bd 	bl	8002b7c <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016a02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d030      	beq.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8016a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016a0c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016a0e:	2300      	movs	r3, #0
 8016a10:	2200      	movs	r2, #0
 8016a12:	2100      	movs	r1, #0
 8016a14:	f7ec fb8e 	bl	8003134 <xQueueGenericSend>
 8016a18:	e028      	b.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8016a1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016a1e:	b29b      	uxth	r3, r3
 8016a20:	021b      	lsls	r3, r3, #8
 8016a22:	b21a      	sxth	r2, r3
 8016a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	0a1b      	lsrs	r3, r3, #8
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	b21b      	sxth	r3, r3
 8016a30:	4313      	orrs	r3, r2
 8016a32:	b21b      	sxth	r3, r3
 8016a34:	2b35      	cmp	r3, #53	@ 0x35
 8016a36:	d105      	bne.n	8016a44 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	f7f0 fc5c 	bl	80072f6 <ulDNSHandlePacket>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016a42:	e013      	b.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016a44:	897b      	ldrh	r3, [r7, #10]
 8016a46:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016a4a:	4293      	cmp	r3, r2
 8016a4c:	d006      	beq.n	8016a5c <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 8016a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016a52:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016a54:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d105      	bne.n	8016a68 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016a5c:	68f8      	ldr	r0, [r7, #12]
 8016a5e:	f7f0 fc4a 	bl	80072f6 <ulDNSHandlePacket>
 8016a62:	4603      	mov	r3, r0
 8016a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016a66:	e001      	b.n	8016a6c <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016a68:	2300      	movs	r3, #0
 8016a6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	3764      	adds	r7, #100	@ 0x64
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bd90      	pop	{r4, r7, pc}
 8016a76:	bf00      	nop
 8016a78:	08026aa8 	.word	0x08026aa8
 8016a7c:	08026adc 	.word	0x08026adc

08016a80 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016a80:	b480      	push	{r7}
 8016a82:	b083      	sub	sp, #12
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016a88:	2301      	movs	r3, #1
    }
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	370c      	adds	r7, #12
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a94:	4770      	bx	lr

08016a96 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016a96:	b480      	push	{r7}
 8016a98:	af00      	add	r7, sp, #0
    }
 8016a9a:	bf00      	nop
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa2:	4770      	bx	lr

08016aa4 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8016aaa:	4b2e      	ldr	r3, [pc, #184]	@ (8016b64 <xNetworkBuffersInitialise+0xc0>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d149      	bne.n	8016b46 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8016ab2:	2140      	movs	r1, #64	@ 0x40
 8016ab4:	2040      	movs	r0, #64	@ 0x40
 8016ab6:	f7ec fb13 	bl	80030e0 <xQueueCreateCountingSemaphore>
 8016aba:	4603      	mov	r3, r0
 8016abc:	4a29      	ldr	r2, [pc, #164]	@ (8016b64 <xNetworkBuffersInitialise+0xc0>)
 8016abe:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8016ac0:	4b28      	ldr	r3, [pc, #160]	@ (8016b64 <xNetworkBuffersInitialise+0xc0>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d103      	bne.n	8016ad0 <xNetworkBuffersInitialise+0x2c>
 8016ac8:	21c3      	movs	r1, #195	@ 0xc3
 8016aca:	4827      	ldr	r0, [pc, #156]	@ (8016b68 <xNetworkBuffersInitialise+0xc4>)
 8016acc:	f7ea fe3c 	bl	8001748 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8016ad0:	4b24      	ldr	r3, [pc, #144]	@ (8016b64 <xNetworkBuffersInitialise+0xc0>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d036      	beq.n	8016b46 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8016ad8:	4824      	ldr	r0, [pc, #144]	@ (8016b6c <xNetworkBuffersInitialise+0xc8>)
 8016ada:	f7ec f927 	bl	8002d2c <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 8016ade:	4824      	ldr	r0, [pc, #144]	@ (8016b70 <xNetworkBuffersInitialise+0xcc>)
 8016ae0:	f001 fa24 	bl	8017f2c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016ae4:	2300      	movs	r3, #0
 8016ae6:	603b      	str	r3, [r7, #0]
 8016ae8:	e027      	b.n	8016b3a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016aea:	683a      	ldr	r2, [r7, #0]
 8016aec:	4613      	mov	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	1a9b      	subs	r3, r3, r2
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	4a1e      	ldr	r2, [pc, #120]	@ (8016b70 <xNetworkBuffersInitialise+0xcc>)
 8016af6:	4413      	add	r3, r2
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7ec f937 	bl	8002d6c <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 8016afe:	683a      	ldr	r2, [r7, #0]
 8016b00:	4613      	mov	r3, r2
 8016b02:	00db      	lsls	r3, r3, #3
 8016b04:	1a9b      	subs	r3, r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	4a19      	ldr	r2, [pc, #100]	@ (8016b70 <xNetworkBuffersInitialise+0xcc>)
 8016b0a:	1899      	adds	r1, r3, r2
 8016b0c:	4818      	ldr	r0, [pc, #96]	@ (8016b70 <xNetworkBuffersInitialise+0xcc>)
 8016b0e:	683a      	ldr	r2, [r7, #0]
 8016b10:	4613      	mov	r3, r2
 8016b12:	00db      	lsls	r3, r3, #3
 8016b14:	1a9b      	subs	r3, r3, r2
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	4403      	add	r3, r0
 8016b1a:	330c      	adds	r3, #12
 8016b1c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 8016b1e:	683a      	ldr	r2, [r7, #0]
 8016b20:	4613      	mov	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	1a9b      	subs	r3, r3, r2
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	4a11      	ldr	r2, [pc, #68]	@ (8016b70 <xNetworkBuffersInitialise+0xcc>)
 8016b2a:	4413      	add	r3, r2
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	480f      	ldr	r0, [pc, #60]	@ (8016b6c <xNetworkBuffersInitialise+0xc8>)
 8016b30:	f7ec f94d 	bl	8002dce <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	3301      	adds	r3, #1
 8016b38:	603b      	str	r3, [r7, #0]
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8016b3e:	d9d4      	bls.n	8016aea <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 8016b40:	4b0c      	ldr	r3, [pc, #48]	@ (8016b74 <xNetworkBuffersInitialise+0xd0>)
 8016b42:	2240      	movs	r2, #64	@ 0x40
 8016b44:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8016b46:	4b07      	ldr	r3, [pc, #28]	@ (8016b64 <xNetworkBuffersInitialise+0xc0>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d102      	bne.n	8016b54 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	607b      	str	r3, [r7, #4]
 8016b52:	e001      	b.n	8016b58 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8016b54:	2301      	movs	r3, #1
 8016b56:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8016b58:	687b      	ldr	r3, [r7, #4]
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}
 8016b62:	bf00      	nop
 8016b64:	200022a0 	.word	0x200022a0
 8016b68:	08026b1c 	.word	0x08026b1c
 8016b6c:	20001488 	.word	0x20001488
 8016b70:	200014a0 	.word	0x200014a0
 8016b74:	2000149c 	.word	0x2000149c

08016b78 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b086      	sub	sp, #24
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
 8016b80:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016b82:	2300      	movs	r3, #0
 8016b84:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016b86:	2300      	movs	r3, #0
 8016b88:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8016b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8016c34 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d04b      	beq.n	8016c2a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016b92:	4b28      	ldr	r3, [pc, #160]	@ (8016c34 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	6839      	ldr	r1, [r7, #0]
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7ec fc83 	bl	80034a4 <xQueueSemaphoreTake>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b01      	cmp	r3, #1
 8016ba2:	d13d      	bne.n	8016c20 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016ba4:	f7ef f814 	bl	8005bd0 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016ba8:	4b23      	ldr	r3, [pc, #140]	@ (8016c38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	68db      	ldr	r3, [r3, #12]
 8016bae:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016bb0:	6978      	ldr	r0, [r7, #20]
 8016bb2:	f7ff ff65 	bl	8016a80 <bIsValidNetworkDescriptor>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d009      	beq.n	8016bd0 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8016c38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d104      	bne.n	8016bd0 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7ec f939 	bl	8002e40 <uxListRemove>
 8016bce:	e001      	b.n	8016bd4 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016bd0:	2301      	movs	r3, #1
 8016bd2:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016bd4:	f7ef f828 	bl	8005c28 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	2b01      	cmp	r3, #1
 8016bdc:	d10b      	bne.n	8016bf6 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 8016bde:	6978      	ldr	r0, [r7, #20]
 8016be0:	f7ff ff4e 	bl	8016a80 <bIsValidNetworkDescriptor>
 8016be4:	4603      	mov	r3, r0
 8016be6:	461a      	mov	r2, r3
 8016be8:	6979      	ldr	r1, [r7, #20]
 8016bea:	4814      	ldr	r0, [pc, #80]	@ (8016c3c <pxGetNetworkBufferWithDescriptor+0xc4>)
 8016bec:	f00a fed4 	bl	8021998 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	617b      	str	r3, [r7, #20]
 8016bf4:	e019      	b.n	8016c2a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016bf6:	4b10      	ldr	r3, [pc, #64]	@ (8016c38 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 8016bfc:	4b10      	ldr	r3, [pc, #64]	@ (8016c40 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	68fa      	ldr	r2, [r7, #12]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d202      	bcs.n	8016c0c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016c06:	4a0e      	ldr	r2, [pc, #56]	@ (8016c40 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	2200      	movs	r2, #0
 8016c16:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8016c1e:	e004      	b.n	8016c2a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016c20:	f240 113b 	movw	r1, #315	@ 0x13b
 8016c24:	4807      	ldr	r0, [pc, #28]	@ (8016c44 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016c26:	f7ea fd8f 	bl	8001748 <vAssertCalled>
        }
    }

    return pxReturn;
 8016c2a:	697b      	ldr	r3, [r7, #20]
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	200022a0 	.word	0x200022a0
 8016c38:	20001488 	.word	0x20001488
 8016c3c:	08026b68 	.word	0x08026b68
 8016c40:	2000149c 	.word	0x2000149c
 8016c44:	08026b1c 	.word	0x08026b1c

08016c48 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b084      	sub	sp, #16
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f7ff ff15 	bl	8016a80 <bIsValidNetworkDescriptor>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d104      	bne.n	8016c66 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8016c5c:	6879      	ldr	r1, [r7, #4]
 8016c5e:	4819      	ldr	r0, [pc, #100]	@ (8016cc4 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8016c60:	f00a fe9a 	bl	8021998 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8016c64:	e029      	b.n	8016cba <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8016c66:	f7ee ffb3 	bl	8005bd0 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	4a16      	ldr	r2, [pc, #88]	@ (8016cc8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016c70:	4293      	cmp	r3, r2
 8016c72:	d101      	bne.n	8016c78 <vReleaseNetworkBufferAndDescriptor+0x30>
 8016c74:	2301      	movs	r3, #1
 8016c76:	e000      	b.n	8016c7a <vReleaseNetworkBufferAndDescriptor+0x32>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d104      	bne.n	8016c8c <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4619      	mov	r1, r3
 8016c86:	4810      	ldr	r0, [pc, #64]	@ (8016cc8 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016c88:	f7ec f87d 	bl	8002d86 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8016c8c:	f7ee ffcc 	bl	8005c28 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d008      	beq.n	8016ca8 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016c96:	f000 f829 	bl	8016cec <uxGetNumberOfFreeNetworkBuffers>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	6879      	ldr	r1, [r7, #4]
 8016ca0:	480a      	ldr	r0, [pc, #40]	@ (8016ccc <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016ca2:	f00a fe79 	bl	8021998 <lUDPLoggingPrintf>
}
 8016ca6:	e008      	b.n	8016cba <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016ca8:	4b09      	ldr	r3, [pc, #36]	@ (8016cd0 <vReleaseNetworkBufferAndDescriptor+0x88>)
 8016caa:	6818      	ldr	r0, [r3, #0]
 8016cac:	2300      	movs	r3, #0
 8016cae:	2200      	movs	r2, #0
 8016cb0:	2100      	movs	r1, #0
 8016cb2:	f7ec fa3f 	bl	8003134 <xQueueGenericSend>
            prvShowWarnings();
 8016cb6:	f7ff feee 	bl	8016a96 <prvShowWarnings>
}
 8016cba:	bf00      	nop
 8016cbc:	3710      	adds	r7, #16
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bd80      	pop	{r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	08026bac 	.word	0x08026bac
 8016cc8:	20001488 	.word	0x20001488
 8016ccc:	08026be4 	.word	0x08026be4
 8016cd0:	200022a0 	.word	0x200022a0

08016cd4 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016cd4:	b480      	push	{r7}
 8016cd6:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016cd8:	4b03      	ldr	r3, [pc, #12]	@ (8016ce8 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8016cda:	681b      	ldr	r3, [r3, #0]
}
 8016cdc:	4618      	mov	r0, r3
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop
 8016ce8:	2000149c 	.word	0x2000149c

08016cec <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8016cec:	b480      	push	{r7}
 8016cee:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016cf0:	4b03      	ldr	r3, [pc, #12]	@ (8016d00 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	20001488 	.word	0x20001488

08016d04 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016d04:	b480      	push	{r7}
 8016d06:	b085      	sub	sp, #20
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	4a11      	ldr	r2, [pc, #68]	@ (8016d58 <xHas_1F_PHYSPCS+0x54>)
 8016d14:	4293      	cmp	r3, r2
 8016d16:	d016      	beq.n	8016d46 <xHas_1F_PHYSPCS+0x42>
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8016d58 <xHas_1F_PHYSPCS+0x54>)
 8016d1c:	4293      	cmp	r3, r2
 8016d1e:	d80f      	bhi.n	8016d40 <xHas_1F_PHYSPCS+0x3c>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	4a0e      	ldr	r2, [pc, #56]	@ (8016d5c <xHas_1F_PHYSPCS+0x58>)
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d00e      	beq.n	8016d46 <xHas_1F_PHYSPCS+0x42>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8016d5c <xHas_1F_PHYSPCS+0x58>)
 8016d2c:	4293      	cmp	r3, r2
 8016d2e:	d807      	bhi.n	8016d40 <xHas_1F_PHYSPCS+0x3c>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	4a0b      	ldr	r2, [pc, #44]	@ (8016d60 <xHas_1F_PHYSPCS+0x5c>)
 8016d34:	4293      	cmp	r3, r2
 8016d36:	d006      	beq.n	8016d46 <xHas_1F_PHYSPCS+0x42>
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8016d64 <xHas_1F_PHYSPCS+0x60>)
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	d002      	beq.n	8016d46 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8016d40:	2301      	movs	r3, #1
 8016d42:	60fb      	str	r3, [r7, #12]
            break;
 8016d44:	e000      	b.n	8016d48 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8016d46:	bf00      	nop
    }

    return xResult;
 8016d48:	68fb      	ldr	r3, [r7, #12]
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3714      	adds	r7, #20
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	ff000710 	.word	0xff000710
 8016d5c:	2000a250 	.word	0x2000a250
 8016d60:	20005c90 	.word	0x20005c90
 8016d64:	2000a221 	.word	0x2000a221

08016d68 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b085      	sub	sp, #20
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8016d70:	2300      	movs	r3, #0
 8016d72:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	4a0d      	ldr	r2, [pc, #52]	@ (8016dac <xHas_19_PHYCR+0x44>)
 8016d78:	4293      	cmp	r3, r2
 8016d7a:	d00b      	beq.n	8016d94 <xHas_19_PHYCR+0x2c>
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8016dac <xHas_19_PHYCR+0x44>)
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d80a      	bhi.n	8016d9a <xHas_19_PHYCR+0x32>
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	4a0a      	ldr	r2, [pc, #40]	@ (8016db0 <xHas_19_PHYCR+0x48>)
 8016d88:	4293      	cmp	r3, r2
 8016d8a:	d003      	beq.n	8016d94 <xHas_19_PHYCR+0x2c>
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	4a09      	ldr	r2, [pc, #36]	@ (8016db4 <xHas_19_PHYCR+0x4c>)
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d102      	bne.n	8016d9a <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016d94:	2301      	movs	r3, #1
 8016d96:	60fb      	str	r3, [r7, #12]
            break;
 8016d98:	e000      	b.n	8016d9c <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8016d9a:	bf00      	nop
    }

    return xResult;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
}
 8016d9e:	4618      	mov	r0, r3
 8016da0:	3714      	adds	r7, #20
 8016da2:	46bd      	mov	sp, r7
 8016da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da8:	4770      	bx	lr
 8016daa:	bf00      	nop
 8016dac:	2000a221 	.word	0x2000a221
 8016db0:	0007c130 	.word	0x0007c130
 8016db4:	20005c90 	.word	0x20005c90

08016db8 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	60f8      	str	r0, [r7, #12]
 8016dc0:	60b9      	str	r1, [r7, #8]
 8016dc2:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8016dc4:	2240      	movs	r2, #64	@ 0x40
 8016dc6:	2100      	movs	r1, #0
 8016dc8:	68f8      	ldr	r0, [r7, #12]
 8016dca:	f00b f90e 	bl	8021fea <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	68ba      	ldr	r2, [r7, #8]
 8016dd2:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	605a      	str	r2, [r3, #4]
}
 8016dda:	bf00      	nop
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}
	...

08016de4 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b086      	sub	sp, #24
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2200      	movs	r2, #0
 8016df0:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016df2:	2300      	movs	r3, #0
 8016df4:	617b      	str	r3, [r7, #20]
 8016df6:	e03a      	b.n	8016e6e <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f107 020c 	add.w	r2, r7, #12
 8016e04:	2103      	movs	r1, #3
 8016e06:	6978      	ldr	r0, [r7, #20]
 8016e08:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d029      	beq.n	8016e68 <xPhyDiscover+0x84>
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d026      	beq.n	8016e68 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	f107 0208 	add.w	r2, r7, #8
 8016e22:	2102      	movs	r1, #2
 8016e24:	6978      	ldr	r0, [r7, #20]
 8016e26:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	041a      	lsls	r2, r3, #16
 8016e2c:	68f9      	ldr	r1, [r7, #12]
 8016e2e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8016e32:	400b      	ands	r3, r1
 8016e34:	4313      	orrs	r3, r2
 8016e36:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e3c:	697a      	ldr	r2, [r7, #20]
 8016e3e:	b2d1      	uxtb	r1, r2
 8016e40:	687a      	ldr	r2, [r7, #4]
 8016e42:	4413      	add	r3, r2
 8016e44:	460a      	mov	r2, r1
 8016e46:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	3202      	adds	r2, #2
 8016e50:	6939      	ldr	r1, [r7, #16]
 8016e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e5a:	1c5a      	adds	r2, r3, #1
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e64:	2b04      	cmp	r3, #4
 8016e66:	d005      	beq.n	8016e74 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	617b      	str	r3, [r7, #20]
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	2b1f      	cmp	r3, #31
 8016e72:	ddc1      	ble.n	8016df8 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	dd05      	ble.n	8016e88 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	689b      	ldr	r3, [r3, #8]
 8016e80:	4619      	mov	r1, r3
 8016e82:	4804      	ldr	r0, [pc, #16]	@ (8016e94 <xPhyDiscover+0xb0>)
 8016e84:	f00a fd88 	bl	8021998 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3718      	adds	r7, #24
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}
 8016e94:	08026c28 	.word	0x08026c28

08016e98 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b08c      	sub	sp, #48	@ 0x30
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	6078      	str	r0, [r7, #4]
 8016ea0:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016eaa:	e017      	b.n	8016edc <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eb0:	4413      	add	r3, r2
 8016eb2:	3318      	adds	r3, #24
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	f107 0218 	add.w	r2, r7, #24
 8016ec0:	2100      	movs	r1, #0
 8016ec2:	69f8      	ldr	r0, [r7, #28]
 8016ec4:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	685b      	ldr	r3, [r3, #4]
 8016eca:	69ba      	ldr	r2, [r7, #24]
 8016ecc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	69f8      	ldr	r0, [r7, #28]
 8016ed4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed8:	3301      	adds	r3, #1
 8016eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	dbe2      	blt.n	8016eac <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8016ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016eea:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8016eec:	f107 030c 	add.w	r3, r7, #12
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7ed fcab 	bl	800484c <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016efa:	e01f      	b.n	8016f3c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f00:	4413      	add	r3, r2
 8016f02:	3318      	adds	r3, #24
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f107 0218 	add.w	r2, r7, #24
 8016f10:	2100      	movs	r1, #0
 8016f12:	6a38      	ldr	r0, [r7, #32]
 8016f14:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016f16:	69bb      	ldr	r3, [r7, #24]
 8016f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d10a      	bne.n	8016f36 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016f22:	482d      	ldr	r0, [pc, #180]	@ (8016fd8 <xPhyReset+0x140>)
 8016f24:	f00a fd38 	bl	8021998 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016f28:	2201      	movs	r2, #1
 8016f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f32:	4313      	orrs	r3, r2
 8016f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f38:	3301      	adds	r3, #1
 8016f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016f42:	429a      	cmp	r2, r3
 8016f44:	dbda      	blt.n	8016efc <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8016f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	d013      	beq.n	8016f76 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016f4e:	f107 0214 	add.w	r2, r7, #20
 8016f52:	f107 030c 	add.w	r3, r7, #12
 8016f56:	4611      	mov	r1, r2
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7ed fcaf 	bl	80048bc <xTaskCheckForTimeOut>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d004      	beq.n	8016f6e <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016f64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016f66:	481d      	ldr	r0, [pc, #116]	@ (8016fdc <xPhyReset+0x144>)
 8016f68:	f00a fd16 	bl	8021998 <lUDPLoggingPrintf>
            break;
 8016f6c:	e004      	b.n	8016f78 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016f6e:	2032      	movs	r0, #50	@ 0x32
 8016f70:	f7ec fef8 	bl	8003d64 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016f74:	e7bf      	b.n	8016ef6 <xPhyReset+0x5e>
            break;
 8016f76:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016f78:	2300      	movs	r3, #0
 8016f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016f7c:	e01e      	b.n	8016fbc <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8016f7e:	2201      	movs	r2, #1
 8016f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f82:	409a      	lsls	r2, r3
 8016f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f86:	4013      	ands	r3, r2
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d114      	bne.n	8016fb6 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f90:	4413      	add	r3, r2
 8016f92:	3318      	adds	r3, #24
 8016f94:	781b      	ldrb	r3, [r3, #0]
 8016f96:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	f107 0218 	add.w	r2, r7, #24
 8016fa0:	2100      	movs	r1, #0
 8016fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016fa4:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	685b      	ldr	r3, [r3, #4]
 8016faa:	69ba      	ldr	r2, [r7, #24]
 8016fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016fb0:	2100      	movs	r1, #0
 8016fb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016fb4:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb8:	3301      	adds	r3, #1
 8016fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016fc2:	429a      	cmp	r2, r3
 8016fc4:	dbdb      	blt.n	8016f7e <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016fc6:	2032      	movs	r0, #50	@ 0x32
 8016fc8:	f7ec fecc 	bl	8003d64 <vTaskDelay>

    return ulDoneMask;
 8016fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3730      	adds	r7, #48	@ 0x30
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd80      	pop	{r7, pc}
 8016fd6:	bf00      	nop
 8016fd8:	08026c34 	.word	0x08026c34
 8016fdc:	08026c58 	.word	0x08026c58

08016fe0 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b088      	sub	sp, #32
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	dc05      	bgt.n	8016ffe <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016ff2:	487c      	ldr	r0, [pc, #496]	@ (80171e4 <xPhyConfigure+0x204>)
 8016ff4:	f00a fcd0 	bl	8021998 <lUDPLoggingPrintf>
        return -1;
 8016ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ffc:	e0ed      	b.n	80171da <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	2b03      	cmp	r3, #3
 8017004:	d107      	bne.n	8017016 <xPhyConfigure+0x36>
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	789b      	ldrb	r3, [r3, #2]
 801700a:	2b03      	cmp	r3, #3
 801700c:	d103      	bne.n	8017016 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801700e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017012:	61fb      	str	r3, [r7, #28]
 8017014:	e044      	b.n	80170a0 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017016:	2301      	movs	r3, #1
 8017018:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	781b      	ldrb	r3, [r3, #0]
 801701e:	2b03      	cmp	r3, #3
 8017020:	d10d      	bne.n	801703e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	789b      	ldrb	r3, [r3, #2]
 8017026:	2b02      	cmp	r3, #2
 8017028:	d104      	bne.n	8017034 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017030:	61fb      	str	r3, [r7, #28]
 8017032:	e035      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017034:	69fb      	ldr	r3, [r7, #28]
 8017036:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 801703a:	61fb      	str	r3, [r7, #28]
 801703c:	e030      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	789b      	ldrb	r3, [r3, #2]
 8017042:	2b03      	cmp	r3, #3
 8017044:	d10d      	bne.n	8017062 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	2b01      	cmp	r3, #1
 801704c:	d104      	bne.n	8017058 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017054:	61fb      	str	r3, [r7, #28]
 8017056:	e023      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017058:	69fb      	ldr	r3, [r7, #28]
 801705a:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 801705e:	61fb      	str	r3, [r7, #28]
 8017060:	e01e      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017062:	683b      	ldr	r3, [r7, #0]
 8017064:	781b      	ldrb	r3, [r3, #0]
 8017066:	2b02      	cmp	r3, #2
 8017068:	d10d      	bne.n	8017086 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	789b      	ldrb	r3, [r3, #2]
 801706e:	2b02      	cmp	r3, #2
 8017070:	d104      	bne.n	801707c <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017072:	69fb      	ldr	r3, [r7, #28]
 8017074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017078:	61fb      	str	r3, [r7, #28]
 801707a:	e011      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 801707c:	69fb      	ldr	r3, [r7, #28]
 801707e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017082:	61fb      	str	r3, [r7, #28]
 8017084:	e00c      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	789b      	ldrb	r3, [r3, #2]
 801708a:	2b02      	cmp	r3, #2
 801708c:	d104      	bne.n	8017098 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 801708e:	69fb      	ldr	r3, [r7, #28]
 8017090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017094:	61fb      	str	r3, [r7, #28]
 8017096:	e003      	b.n	80170a0 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	f043 0320 	orr.w	r3, r3, #32
 801709e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170a4:	2201      	movs	r2, #1
 80170a6:	fa02 f303 	lsl.w	r3, r2, r3
 80170aa:	3b01      	subs	r3, #1
 80170ac:	4619      	mov	r1, r3
 80170ae:	6878      	ldr	r0, [r7, #4]
 80170b0:	f7ff fef2 	bl	8016e98 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80170b4:	2300      	movs	r3, #0
 80170b6:	61bb      	str	r3, [r7, #24]
 80170b8:	e080      	b.n	80171bc <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80170ba:	687a      	ldr	r2, [r7, #4]
 80170bc:	69bb      	ldr	r3, [r7, #24]
 80170be:	4413      	add	r3, r2
 80170c0:	3318      	adds	r3, #24
 80170c2:	781b      	ldrb	r3, [r3, #0]
 80170c4:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	69ba      	ldr	r2, [r7, #24]
 80170ca:	3202      	adds	r2, #2
 80170cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80170d0:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	685b      	ldr	r3, [r3, #4]
 80170d6:	69fa      	ldr	r2, [r7, #28]
 80170d8:	2104      	movs	r1, #4
 80170da:	6978      	ldr	r0, [r7, #20]
 80170dc:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f107 020c 	add.w	r2, r7, #12
 80170e6:	2100      	movs	r1, #0
 80170e8:	6978      	ldr	r0, [r7, #20]
 80170ea:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 80170f2:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80170fa:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	781b      	ldrb	r3, [r3, #0]
 8017100:	2b02      	cmp	r3, #2
 8017102:	d003      	beq.n	801710c <xPhyConfigure+0x12c>
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	2b03      	cmp	r3, #3
 801710a:	d104      	bne.n	8017116 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017112:	60fb      	str	r3, [r7, #12]
 8017114:	e007      	b.n	8017126 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	781b      	ldrb	r3, [r3, #0]
 801711a:	2b01      	cmp	r3, #1
 801711c:	d103      	bne.n	8017126 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017124:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	789b      	ldrb	r3, [r3, #2]
 801712a:	2b02      	cmp	r3, #2
 801712c:	d003      	beq.n	8017136 <xPhyConfigure+0x156>
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	789b      	ldrb	r3, [r3, #2]
 8017132:	2b03      	cmp	r3, #3
 8017134:	d104      	bne.n	8017140 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801713c:	60fb      	str	r3, [r7, #12]
 801713e:	e007      	b.n	8017150 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	789b      	ldrb	r3, [r3, #2]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d103      	bne.n	8017150 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801714e:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017150:	6938      	ldr	r0, [r7, #16]
 8017152:	f7ff fe09 	bl	8016d68 <xHas_19_PHYCR>
 8017156:	4603      	mov	r3, r0
 8017158:	2b00      	cmp	r3, #0
 801715a:	d026      	beq.n	80171aa <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f107 0208 	add.w	r2, r7, #8
 8017164:	2119      	movs	r1, #25
 8017166:	6978      	ldr	r0, [r7, #20]
 8017168:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017170:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017172:	683b      	ldr	r3, [r7, #0]
 8017174:	785b      	ldrb	r3, [r3, #1]
 8017176:	2b03      	cmp	r3, #3
 8017178:	d104      	bne.n	8017184 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 801717a:	68bb      	ldr	r3, [r7, #8]
 801717c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017180:	60bb      	str	r3, [r7, #8]
 8017182:	e00c      	b.n	801719e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017184:	683b      	ldr	r3, [r7, #0]
 8017186:	785b      	ldrb	r3, [r3, #1]
 8017188:	2b02      	cmp	r3, #2
 801718a:	d104      	bne.n	8017196 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017192:	60bb      	str	r3, [r7, #8]
 8017194:	e003      	b.n	801719e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017196:	68bb      	ldr	r3, [r7, #8]
 8017198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801719c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	685b      	ldr	r3, [r3, #4]
 80171a2:	68ba      	ldr	r2, [r7, #8]
 80171a4:	2119      	movs	r1, #25
 80171a6:	6978      	ldr	r0, [r7, #20]
 80171a8:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	461a      	mov	r2, r3
 80171ae:	69f9      	ldr	r1, [r7, #28]
 80171b0:	480d      	ldr	r0, [pc, #52]	@ (80171e8 <xPhyConfigure+0x208>)
 80171b2:	f00a fbf1 	bl	8021998 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	3301      	adds	r3, #1
 80171ba:	61bb      	str	r3, [r7, #24]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171c0:	69ba      	ldr	r2, [r7, #24]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	f6ff af79 	blt.w	80170ba <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	69fa      	ldr	r2, [r7, #28]
 80171d6:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 80171d8:	2300      	movs	r3, #0
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3720      	adds	r7, #32
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}
 80171e2:	bf00      	nop
 80171e4:	08026c8c 	.word	0x08026c8c
 80171e8:	08026cb0 	.word	0x08026cb0

080171ec <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 80171ec:	b590      	push	{r4, r7, lr}
 80171ee:	b095      	sub	sp, #84	@ 0x54
 80171f0:	af02      	add	r7, sp, #8
 80171f2:	6078      	str	r0, [r7, #4]
 80171f4:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d101      	bne.n	8017200 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	e18d      	b.n	801751c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017200:	2300      	movs	r3, #0
 8017202:	647b      	str	r3, [r7, #68]	@ 0x44
 8017204:	e020      	b.n	8017248 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017206:	683a      	ldr	r2, [r7, #0]
 8017208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801720a:	fa22 f303 	lsr.w	r3, r2, r3
 801720e:	f003 0301 	and.w	r3, r3, #1
 8017212:	2b00      	cmp	r3, #0
 8017214:	d015      	beq.n	8017242 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017216:	687a      	ldr	r2, [r7, #4]
 8017218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801721a:	4413      	add	r3, r2
 801721c:	3318      	adds	r3, #24
 801721e:	781b      	ldrb	r3, [r3, #0]
 8017220:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	687a      	ldr	r2, [r7, #4]
 8017228:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801722a:	2104      	movs	r1, #4
 801722c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801722e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	687a      	ldr	r2, [r7, #4]
 8017236:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801723c:	2100      	movs	r1, #0
 801723e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017240:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017244:	3301      	adds	r3, #1
 8017246:	647b      	str	r3, [r7, #68]	@ 0x44
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801724c:	461a      	mov	r2, r3
 801724e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017250:	4293      	cmp	r3, r2
 8017252:	d3d8      	bcc.n	8017206 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8017254:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8017258:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 801725a:	f107 0318 	add.w	r3, r7, #24
 801725e:	4618      	mov	r0, r3
 8017260:	f7ed faf4 	bl	800484c <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8017264:	2300      	movs	r3, #0
 8017266:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8017268:	2301      	movs	r3, #1
 801726a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801726c:	2300      	movs	r3, #0
 801726e:	647b      	str	r3, [r7, #68]	@ 0x44
 8017270:	e025      	b.n	80172be <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8017272:	683a      	ldr	r2, [r7, #0]
 8017274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017276:	4013      	ands	r3, r2
 8017278:	2b00      	cmp	r3, #0
 801727a:	d01a      	beq.n	80172b2 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 801727c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801727e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017280:	4013      	ands	r3, r2
 8017282:	2b00      	cmp	r3, #0
 8017284:	d115      	bne.n	80172b2 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801728a:	4413      	add	r3, r2
 801728c:	3318      	adds	r3, #24
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801729a:	2101      	movs	r1, #1
 801729c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801729e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 80172a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a2:	f003 0320 	and.w	r3, r3, #32
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d003      	beq.n	80172b2 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 80172aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80172ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172ae:	4313      	orrs	r3, r2
 80172b0:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80172b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172b4:	3301      	adds	r3, #1
 80172b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80172b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172ba:	005b      	lsls	r3, r3, #1
 80172bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172c2:	461a      	mov	r2, r3
 80172c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172c6:	4293      	cmp	r3, r2
 80172c8:	d3d3      	bcc.n	8017272 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 80172ca:	683a      	ldr	r2, [r7, #0]
 80172cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80172ce:	429a      	cmp	r2, r3
 80172d0:	d013      	beq.n	80172fa <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80172d2:	f107 0220 	add.w	r2, r7, #32
 80172d6:	f107 0318 	add.w	r3, r7, #24
 80172da:	4611      	mov	r1, r2
 80172dc:	4618      	mov	r0, r3
 80172de:	f7ed faed 	bl	80048bc <xTaskCheckForTimeOut>
 80172e2:	4603      	mov	r3, r0
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d004      	beq.n	80172f2 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80172e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80172ea:	488e      	ldr	r0, [pc, #568]	@ (8017524 <xPhyStartAutoNegotiation+0x338>)
 80172ec:	f00a fb54 	bl	8021998 <lUDPLoggingPrintf>
            break;
 80172f0:	e004      	b.n	80172fc <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80172f2:	2032      	movs	r0, #50	@ 0x32
 80172f4:	f7ec fd36 	bl	8003d64 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80172f8:	e7b6      	b.n	8017268 <xPhyStartAutoNegotiation+0x7c>
            break;
 80172fa:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80172fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80172fe:	2b00      	cmp	r3, #0
 8017300:	f000 810b 	beq.w	801751a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017304:	2301      	movs	r3, #1
 8017306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801730c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801730e:	43db      	mvns	r3, r3
 8017310:	401a      	ands	r2, r3
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017316:	2300      	movs	r3, #0
 8017318:	647b      	str	r3, [r7, #68]	@ 0x44
 801731a:	e0f7      	b.n	801750c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801731c:	687a      	ldr	r2, [r7, #4]
 801731e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017320:	4413      	add	r3, r2
 8017322:	3318      	adds	r3, #24
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801732c:	3202      	adds	r2, #2
 801732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017332:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017334:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017338:	4013      	ands	r3, r2
 801733a:	2b00      	cmp	r3, #0
 801733c:	f000 80df 	beq.w	80174fe <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	685b      	ldr	r3, [r3, #4]
 8017344:	687a      	ldr	r2, [r7, #4]
 8017346:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017348:	2100      	movs	r1, #0
 801734a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801734c:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017356:	2101      	movs	r1, #1
 8017358:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801735a:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 801735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735e:	f003 0304 	and.w	r3, r3, #4
 8017362:	2b00      	cmp	r3, #0
 8017364:	d005      	beq.n	8017372 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801736c:	431a      	orrs	r2, r3
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8017372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017374:	4a6c      	ldr	r2, [pc, #432]	@ (8017528 <xPhyStartAutoNegotiation+0x33c>)
 8017376:	4293      	cmp	r3, r2
 8017378:	d130      	bne.n	80173dc <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	f107 0214 	add.w	r2, r7, #20
 8017382:	211e      	movs	r1, #30
 8017384:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017386:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	f003 0307 	and.w	r3, r3, #7
 801738e:	3b01      	subs	r3, #1
 8017390:	2b05      	cmp	r3, #5
 8017392:	d814      	bhi.n	80173be <xPhyStartAutoNegotiation+0x1d2>
 8017394:	a201      	add	r2, pc, #4	@ (adr r2, 801739c <xPhyStartAutoNegotiation+0x1b0>)
 8017396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801739a:	bf00      	nop
 801739c:	080173b5 	.word	0x080173b5
 80173a0:	080173bf 	.word	0x080173bf
 80173a4:	080173bf 	.word	0x080173bf
 80173a8:	080173bf 	.word	0x080173bf
 80173ac:	080173b5 	.word	0x080173b5
 80173b0:	080173bf 	.word	0x080173bf
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80173b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b6:	f043 0302 	orr.w	r3, r3, #2
 80173ba:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80173bc:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	f003 0307 	and.w	r3, r3, #7
 80173c4:	2b02      	cmp	r3, #2
 80173c6:	d801      	bhi.n	80173cc <xPhyStartAutoNegotiation+0x1e0>
 80173c8:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 80173ca:	e05b      	b.n	8017484 <xPhyStartAutoNegotiation+0x298>
 80173cc:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 80173ce:	2b01      	cmp	r3, #1
 80173d0:	d858      	bhi.n	8017484 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80173d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173d4:	f043 0304 	orr.w	r3, r3, #4
 80173d8:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 80173da:	e053      	b.n	8017484 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 80173dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173de:	4a53      	ldr	r2, [pc, #332]	@ (801752c <xPhyStartAutoNegotiation+0x340>)
 80173e0:	4293      	cmp	r3, r2
 80173e2:	d126      	bne.n	8017432 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 80173e4:	2300      	movs	r3, #0
 80173e6:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 80173e8:	2300      	movs	r3, #0
 80173ea:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f107 0210 	add.w	r2, r7, #16
 80173f4:	211f      	movs	r1, #31
 80173f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80173f8:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	0a1b      	lsrs	r3, r3, #8
 80173fe:	f003 0307 	and.w	r3, r3, #7
 8017402:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017404:	2300      	movs	r3, #0
 8017406:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801740a:	2b02      	cmp	r3, #2
 801740c:	d002      	beq.n	8017414 <xPhyStartAutoNegotiation+0x228>
 801740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017410:	2b05      	cmp	r3, #5
 8017412:	d103      	bne.n	801741c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017416:	f043 0302 	orr.w	r3, r3, #2
 801741a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801741e:	2b05      	cmp	r3, #5
 8017420:	d002      	beq.n	8017428 <xPhyStartAutoNegotiation+0x23c>
 8017422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017424:	2b06      	cmp	r3, #6
 8017426:	d12d      	bne.n	8017484 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742a:	f043 0304 	orr.w	r3, r3, #4
 801742e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017430:	e028      	b.n	8017484 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017432:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017434:	f7ff fc66 	bl	8016d04 <xHas_1F_PHYSPCS>
 8017438:	4603      	mov	r3, r0
 801743a:	2b00      	cmp	r3, #0
 801743c:	d01b      	beq.n	8017476 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	f107 020c 	add.w	r2, r7, #12
 8017446:	211f      	movs	r1, #31
 8017448:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801744a:	4798      	blx	r3
                ulRegValue = 0;
 801744c:	2300      	movs	r3, #0
 801744e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	f003 0310 	and.w	r3, r3, #16
 8017456:	2b00      	cmp	r3, #0
 8017458:	d003      	beq.n	8017462 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801745c:	f043 0304 	orr.w	r3, r3, #4
 8017460:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	f003 030c 	and.w	r3, r3, #12
 8017468:	2b04      	cmp	r3, #4
 801746a:	d10b      	bne.n	8017484 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 801746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801746e:	f043 0302 	orr.w	r3, r3, #2
 8017472:	627b      	str	r3, [r7, #36]	@ 0x24
 8017474:	e006      	b.n	8017484 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801747e:	2110      	movs	r1, #16
 8017480:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017482:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8017484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017488:	f003 0304 	and.w	r3, r3, #4
 801748c:	2b00      	cmp	r3, #0
 801748e:	d001      	beq.n	8017494 <xPhyStartAutoNegotiation+0x2a8>
 8017490:	4827      	ldr	r0, [pc, #156]	@ (8017530 <xPhyStartAutoNegotiation+0x344>)
 8017492:	e000      	b.n	8017496 <xPhyStartAutoNegotiation+0x2aa>
 8017494:	4827      	ldr	r0, [pc, #156]	@ (8017534 <xPhyStartAutoNegotiation+0x348>)
 8017496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017498:	f003 0302 	and.w	r3, r3, #2
 801749c:	2b00      	cmp	r3, #0
 801749e:	d001      	beq.n	80174a4 <xPhyStartAutoNegotiation+0x2b8>
 80174a0:	240a      	movs	r4, #10
 80174a2:	e000      	b.n	80174a6 <xPhyStartAutoNegotiation+0x2ba>
 80174a4:	2464      	movs	r4, #100	@ 0x64
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80174aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174ac:	4013      	ands	r3, r2
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d001      	beq.n	80174b6 <xPhyStartAutoNegotiation+0x2ca>
 80174b2:	4b21      	ldr	r3, [pc, #132]	@ (8017538 <xPhyStartAutoNegotiation+0x34c>)
 80174b4:	e000      	b.n	80174b8 <xPhyStartAutoNegotiation+0x2cc>
 80174b6:	4b21      	ldr	r3, [pc, #132]	@ (801753c <xPhyStartAutoNegotiation+0x350>)
 80174b8:	9300      	str	r3, [sp, #0]
 80174ba:	4623      	mov	r3, r4
 80174bc:	4602      	mov	r2, r0
 80174be:	4820      	ldr	r0, [pc, #128]	@ (8017540 <xPhyStartAutoNegotiation+0x354>)
 80174c0:	f00a fa6a 	bl	8021998 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 80174c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c6:	f003 0304 	and.w	r3, r3, #4
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d004      	beq.n	80174d8 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	2202      	movs	r2, #2
 80174d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80174d6:	e003      	b.n	80174e0 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2201      	movs	r2, #1
 80174dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 80174e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e2:	f003 0302 	and.w	r3, r3, #2
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d004      	beq.n	80174f4 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	2201      	movs	r2, #1
 80174ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80174f2:	e005      	b.n	8017500 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2202      	movs	r2, #2
 80174f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80174fc:	e000      	b.n	8017500 <xPhyStartAutoNegotiation+0x314>
                continue;
 80174fe:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017502:	3301      	adds	r3, #1
 8017504:	647b      	str	r3, [r7, #68]	@ 0x44
 8017506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017508:	005b      	lsls	r3, r3, #1
 801750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017510:	461a      	mov	r2, r3
 8017512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017514:	4293      	cmp	r3, r2
 8017516:	f4ff af01 	bcc.w	801731c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801751a:	2300      	movs	r3, #0
}
 801751c:	4618      	mov	r0, r3
 801751e:	374c      	adds	r7, #76	@ 0x4c
 8017520:	46bd      	mov	sp, r7
 8017522:	bd90      	pop	{r4, r7, pc}
 8017524:	08026cd4 	.word	0x08026cd4
 8017528:	00221560 	.word	0x00221560
 801752c:	00221550 	.word	0x00221550
 8017530:	08026d20 	.word	0x08026d20
 8017534:	08026d28 	.word	0x08026d28
 8017538:	08026d30 	.word	0x08026d30
 801753c:	08026d38 	.word	0x08026d38
 8017540:	08026d3c 	.word	0x08026d3c

08017544 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b088      	sub	sp, #32
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
 801754c:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801754e:	2301      	movs	r3, #1
 8017550:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8017552:	2300      	movs	r3, #0
 8017554:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8017556:	683b      	ldr	r3, [r7, #0]
 8017558:	2b00      	cmp	r3, #0
 801755a:	dd2b      	ble.n	80175b4 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	331c      	adds	r3, #28
 8017560:	4618      	mov	r0, r3
 8017562:	f7ed f973 	bl	800484c <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f643 2298 	movw	r2, #15000	@ 0x3a98
 801756c:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801756e:	2300      	movs	r3, #0
 8017570:	61bb      	str	r3, [r7, #24]
 8017572:	e019      	b.n	80175a8 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	4013      	ands	r3, r2
 801757c:	2b00      	cmp	r3, #0
 801757e:	d10d      	bne.n	801759c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017584:	69fb      	ldr	r3, [r7, #28]
 8017586:	431a      	orrs	r2, r3
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017590:	4619      	mov	r1, r3
 8017592:	4842      	ldr	r0, [pc, #264]	@ (801769c <xPhyCheckLinkStatus+0x158>)
 8017594:	f00a fa00 	bl	8021998 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8017598:	2301      	movs	r3, #1
 801759a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801759c:	69bb      	ldr	r3, [r7, #24]
 801759e:	3301      	adds	r3, #1
 80175a0:	61bb      	str	r3, [r7, #24]
 80175a2:	69fb      	ldr	r3, [r7, #28]
 80175a4:	005b      	lsls	r3, r3, #1
 80175a6:	61fb      	str	r3, [r7, #28]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175ac:	69ba      	ldr	r2, [r7, #24]
 80175ae:	429a      	cmp	r2, r3
 80175b0:	dbe0      	blt.n	8017574 <xPhyCheckLinkStatus+0x30>
 80175b2:	e06e      	b.n	8017692 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f103 021c 	add.w	r2, r3, #28
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	3324      	adds	r3, #36	@ 0x24
 80175be:	4619      	mov	r1, r3
 80175c0:	4610      	mov	r0, r2
 80175c2:	f7ed f97b 	bl	80048bc <xTaskCheckForTimeOut>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d062      	beq.n	8017692 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80175cc:	2300      	movs	r3, #0
 80175ce:	61bb      	str	r3, [r7, #24]
 80175d0:	e045      	b.n	801765e <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	69bb      	ldr	r3, [r7, #24]
 80175d6:	4413      	add	r3, r2
 80175d8:	3318      	adds	r3, #24
 80175da:	781b      	ldrb	r3, [r3, #0]
 80175dc:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	f107 020c 	add.w	r2, r7, #12
 80175e6:	2101      	movs	r1, #1
 80175e8:	6938      	ldr	r0, [r7, #16]
 80175ea:	4798      	blx	r3
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d12f      	bne.n	8017652 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	4013      	ands	r3, r2
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	bf14      	ite	ne
 80175fe:	2301      	movne	r3, #1
 8017600:	2300      	moveq	r3, #0
 8017602:	b2da      	uxtb	r2, r3
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f003 0304 	and.w	r3, r3, #4
 801760a:	2b00      	cmp	r3, #0
 801760c:	bf14      	ite	ne
 801760e:	2301      	movne	r3, #1
 8017610:	2300      	moveq	r3, #0
 8017612:	b2db      	uxtb	r3, r3
 8017614:	4053      	eors	r3, r2
 8017616:	b2db      	uxtb	r3, r3
 8017618:	2b00      	cmp	r3, #0
 801761a:	d01a      	beq.n	8017652 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f003 0304 	and.w	r3, r3, #4
 8017622:	2b00      	cmp	r3, #0
 8017624:	d006      	beq.n	8017634 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801762a:	69fb      	ldr	r3, [r7, #28]
 801762c:	431a      	orrs	r2, r3
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	635a      	str	r2, [r3, #52]	@ 0x34
 8017632:	e006      	b.n	8017642 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017638:	69fb      	ldr	r3, [r7, #28]
 801763a:	43db      	mvns	r3, r3
 801763c:	401a      	ands	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017646:	4619      	mov	r1, r3
 8017648:	4814      	ldr	r0, [pc, #80]	@ (801769c <xPhyCheckLinkStatus+0x158>)
 801764a:	f00a f9a5 	bl	8021998 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801764e:	2301      	movs	r3, #1
 8017650:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017652:	69bb      	ldr	r3, [r7, #24]
 8017654:	3301      	adds	r3, #1
 8017656:	61bb      	str	r3, [r7, #24]
 8017658:	69fb      	ldr	r3, [r7, #28]
 801765a:	005b      	lsls	r3, r3, #1
 801765c:	61fb      	str	r3, [r7, #28]
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017662:	69ba      	ldr	r2, [r7, #24]
 8017664:	429a      	cmp	r2, r3
 8017666:	dbb4      	blt.n	80175d2 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	331c      	adds	r3, #28
 801766c:	4618      	mov	r0, r3
 801766e:	f7ed f8ed 	bl	800484c <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017676:	69fb      	ldr	r3, [r7, #28]
 8017678:	085b      	lsrs	r3, r3, #1
 801767a:	4013      	ands	r3, r2
 801767c:	2b00      	cmp	r3, #0
 801767e:	d004      	beq.n	801768a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017686:	625a      	str	r2, [r3, #36]	@ 0x24
 8017688:	e003      	b.n	8017692 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017690:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8017692:	697b      	ldr	r3, [r7, #20]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3720      	adds	r7, #32
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	08026d70 	.word	0x08026d70

080176a0 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 80176a0:	b480      	push	{r7}
 80176a2:	b085      	sub	sp, #20
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 80176a8:	2300      	movs	r3, #0
 80176aa:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 80176ac:	2300      	movs	r3, #0
 80176ae:	60bb      	str	r3, [r7, #8]
 80176b0:	e013      	b.n	80176da <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 80176b2:	2201      	movs	r2, #1
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	fa02 f303 	lsl.w	r3, r2, r3
 80176ba:	461a      	mov	r2, r3
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	4013      	ands	r3, r2
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d007      	beq.n	80176d4 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 80176c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	fa22 f303 	lsr.w	r3, r2, r3
 80176ce:	68fa      	ldr	r2, [r7, #12]
 80176d0:	4313      	orrs	r3, r2
 80176d2:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	3301      	adds	r3, #1
 80176d8:	60bb      	str	r3, [r7, #8]
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	2b1f      	cmp	r3, #31
 80176de:	dde8      	ble.n	80176b2 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 80176e0:	68fb      	ldr	r3, [r7, #12]
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3714      	adds	r7, #20
 80176e6:	46bd      	mov	sp, r7
 80176e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ec:	4770      	bx	lr
	...

080176f0 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 80176f0:	b590      	push	{r4, r7, lr}
 80176f2:	b087      	sub	sp, #28
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 80176f8:	f04f 33ff 	mov.w	r3, #4294967295
 80176fc:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80176fe:	2300      	movs	r3, #0
 8017700:	613b      	str	r3, [r7, #16]
 8017702:	e024      	b.n	801774e <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017704:	693b      	ldr	r3, [r7, #16]
 8017706:	687a      	ldr	r2, [r7, #4]
 8017708:	4413      	add	r3, r2
 801770a:	781b      	ldrb	r3, [r3, #0]
 801770c:	461a      	mov	r2, r3
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	4053      	eors	r3, r2
 8017712:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017714:	2300      	movs	r3, #0
 8017716:	617b      	str	r3, [r7, #20]
 8017718:	e013      	b.n	8017742 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	f003 0301 	and.w	r3, r3, #1
 8017720:	2b00      	cmp	r3, #0
 8017722:	d008      	beq.n	8017736 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	085c      	lsrs	r4, r3, #1
 8017728:	480e      	ldr	r0, [pc, #56]	@ (8017764 <prvComputeCRC32_MAC+0x74>)
 801772a:	f7ff ffb9 	bl	80176a0 <prvRevBits32>
 801772e:	4603      	mov	r3, r0
 8017730:	4063      	eors	r3, r4
 8017732:	60fb      	str	r3, [r7, #12]
 8017734:	e002      	b.n	801773c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	085b      	lsrs	r3, r3, #1
 801773a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	3301      	adds	r3, #1
 8017740:	617b      	str	r3, [r7, #20]
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	2b07      	cmp	r3, #7
 8017746:	dde8      	ble.n	801771a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	3301      	adds	r3, #1
 801774c:	613b      	str	r3, [r7, #16]
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	2b05      	cmp	r3, #5
 8017752:	ddd7      	ble.n	8017704 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	43db      	mvns	r3, r3
 8017758:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 801775a:	68fb      	ldr	r3, [r7, #12]
}
 801775c:	4618      	mov	r0, r3
 801775e:	371c      	adds	r7, #28
 8017760:	46bd      	mov	sp, r7
 8017762:	bd90      	pop	{r4, r7, pc}
 8017764:	04c11db7 	.word	0x04c11db7

08017768 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f7ff ffbd 	bl	80176f0 <prvComputeCRC32_MAC>
 8017776:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8017778:	68f8      	ldr	r0, [r7, #12]
 801777a:	f7ff ff91 	bl	80176a0 <prvRevBits32>
 801777e:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	0e9b      	lsrs	r3, r3, #26
}
 8017784:	4618      	mov	r0, r3
 8017786:	3710      	adds	r7, #16
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}

0801778c <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
 8017794:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8017796:	6838      	ldr	r0, [r7, #0]
 8017798:	f7ff ffe6 	bl	8017768 <prvComputeEthernet_MACHash>
 801779c:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	2b1f      	cmp	r3, #31
 80177a2:	d80c      	bhi.n	80177be <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	691a      	ldr	r2, [r3, #16]
 80177aa:	2101      	movs	r1, #1
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	fa01 f303 	lsl.w	r3, r1, r3
 80177b2:	4619      	mov	r1, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	430a      	orrs	r2, r1
 80177ba:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 80177bc:	e00d      	b.n	80177da <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	695a      	ldr	r2, [r3, #20]
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	f003 031f 	and.w	r3, r3, #31
 80177ca:	2101      	movs	r1, #1
 80177cc:	fa01 f303 	lsl.w	r3, r1, r3
 80177d0:	4619      	mov	r1, r3
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	430a      	orrs	r2, r1
 80177d8:	615a      	str	r2, [r3, #20]
}
 80177da:	bf00      	nop
 80177dc:	3710      	adds	r7, #16
 80177de:	46bd      	mov	sp, r7
 80177e0:	bd80      	pop	{r7, pc}

080177e2 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 80177e2:	b580      	push	{r7, lr}
 80177e4:	b086      	sub	sp, #24
 80177e6:	af00      	add	r7, sp, #0
 80177e8:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 80177ea:	230a      	movs	r3, #10
 80177ec:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 80177ee:	2300      	movs	r3, #0
 80177f0:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80177f2:	6939      	ldr	r1, [r7, #16]
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f7ff f9bf 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 80177fa:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d002      	beq.n	8017808 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017806:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017808:	697b      	ldr	r3, [r7, #20]
}
 801780a:	4618      	mov	r0, r3
 801780c:	3718      	adds	r7, #24
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
	...

08017814 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b08e      	sub	sp, #56	@ 0x38
 8017818:	af02      	add	r7, sp, #8
 801781a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 801781c:	2300      	movs	r3, #0
 801781e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017820:	2300      	movs	r3, #0
 8017822:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017824:	4b8d      	ldr	r3, [pc, #564]	@ (8017a5c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	2b00      	cmp	r3, #0
 801782a:	f040 8104 	bne.w	8017a36 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 801782e:	4a8c      	ldr	r2, [pc, #560]	@ (8017a60 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f7f5 fb8f 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 801783a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 801783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801783e:	2b00      	cmp	r3, #0
 8017840:	d104      	bne.n	801784c <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017842:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017846:	4887      	ldr	r0, [pc, #540]	@ (8017a64 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017848:	f7e9 ff7e 	bl	8001748 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 801784c:	4b86      	ldr	r3, [pc, #536]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801784e:	4a87      	ldr	r2, [pc, #540]	@ (8017a6c <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8017850:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8017852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017854:	33e8      	adds	r3, #232	@ 0xe8
 8017856:	4a84      	ldr	r2, [pc, #528]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017858:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801785a:	4b83      	ldr	r3, [pc, #524]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801785c:	2201      	movs	r2, #1
 801785e:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8017860:	4b81      	ldr	r3, [pc, #516]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017862:	4a83      	ldr	r2, [pc, #524]	@ (8017a70 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017864:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8017866:	4b80      	ldr	r3, [pc, #512]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017868:	4a82      	ldr	r2, [pc, #520]	@ (8017a74 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 801786a:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 801786c:	4b7e      	ldr	r3, [pc, #504]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801786e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8017872:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017874:	2260      	movs	r2, #96	@ 0x60
 8017876:	2100      	movs	r1, #0
 8017878:	487d      	ldr	r0, [pc, #500]	@ (8017a70 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 801787a:	f00a fbb6 	bl	8021fea <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801787e:	2260      	movs	r2, #96	@ 0x60
 8017880:	2100      	movs	r1, #0
 8017882:	487c      	ldr	r0, [pc, #496]	@ (8017a74 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017884:	f00a fbb1 	bl	8021fea <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8017888:	4877      	ldr	r0, [pc, #476]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801788a:	f000 fc71 	bl	8018170 <HAL_ETH_Init>
 801788e:	4603      	mov	r3, r0
 8017890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017894:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017898:	2b00      	cmp	r3, #0
 801789a:	f040 80c9 	bne.w	8017a30 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801789e:	4b72      	ldr	r3, [pc, #456]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	6899      	ldr	r1, [r3, #8]
 80178a4:	4b70      	ldr	r3, [pc, #448]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80178a6:	681a      	ldr	r2, [r3, #0]
 80178a8:	f240 4316 	movw	r3, #1046	@ 0x416
 80178ac:	430b      	orrs	r3, r1
 80178ae:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 80178b0:	2234      	movs	r2, #52	@ 0x34
 80178b2:	2100      	movs	r1, #0
 80178b4:	4870      	ldr	r0, [pc, #448]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178b6:	f00a fb98 	bl	8021fea <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 80178ba:	4b6f      	ldr	r3, [pc, #444]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178bc:	2220      	movs	r2, #32
 80178be:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 80178c0:	4b6d      	ldr	r3, [pc, #436]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	f043 0301 	orr.w	r3, r3, #1
 80178c8:	4a6b      	ldr	r2, [pc, #428]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178ca:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80178cc:	4b6a      	ldr	r3, [pc, #424]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80178d2:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80178d4:	4b68      	ldr	r3, [pc, #416]	@ (8017a78 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 80178da:	2104      	movs	r1, #4
 80178dc:	2004      	movs	r0, #4
 80178de:	f7eb fbff 	bl	80030e0 <xQueueCreateCountingSemaphore>
 80178e2:	4603      	mov	r3, r0
 80178e4:	4a65      	ldr	r2, [pc, #404]	@ (8017a7c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80178e6:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 80178e8:	4b64      	ldr	r3, [pc, #400]	@ (8017a7c <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d104      	bne.n	80178fa <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80178f0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80178f4:	485b      	ldr	r0, [pc, #364]	@ (8017a64 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80178f6:	f7e9 ff27 	bl	8001748 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80178fa:	2001      	movs	r0, #1
 80178fc:	f7eb fbd7 	bl	80030ae <xQueueCreateMutex>
 8017900:	4603      	mov	r3, r0
 8017902:	4a5f      	ldr	r2, [pc, #380]	@ (8017a80 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017904:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017906:	4b5e      	ldr	r3, [pc, #376]	@ (8017a80 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d104      	bne.n	8017918 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801790e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017912:	4854      	ldr	r0, [pc, #336]	@ (8017a64 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017914:	f7e9 ff18 	bl	8001748 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017918:	2300      	movs	r3, #0
 801791a:	627b      	str	r3, [r7, #36]	@ 0x24
 801791c:	e015      	b.n	801794a <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801791e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017922:	f7ff ff5e 	bl	80177e2 <pucGetRXBuffer>
 8017926:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017928:	69fb      	ldr	r3, [r7, #28]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d104      	bne.n	8017938 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801792e:	f240 1189 	movw	r1, #393	@ 0x189
 8017932:	484c      	ldr	r0, [pc, #304]	@ (8017a64 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017934:	f7e9 ff08 	bl	8001748 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017938:	2300      	movs	r3, #0
 801793a:	69fa      	ldr	r2, [r7, #28]
 801793c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801793e:	484a      	ldr	r0, [pc, #296]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017940:	f000 fd02 	bl	8018348 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017946:	3301      	adds	r3, #1
 8017948:	627b      	str	r3, [r7, #36]	@ 0x24
 801794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801794c:	2b03      	cmp	r3, #3
 801794e:	d9e6      	bls.n	801791e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017950:	494c      	ldr	r1, [pc, #304]	@ (8017a84 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017952:	4845      	ldr	r0, [pc, #276]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017954:	f7ff ff1a 	bl	801778c <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017958:	494b      	ldr	r1, [pc, #300]	@ (8017a88 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 801795a:	4843      	ldr	r0, [pc, #268]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801795c:	f7ff ff16 	bl	801778c <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017960:	e03a      	b.n	80179d8 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017964:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017968:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801796c:	b2db      	uxtb	r3, r3
 801796e:	2b00      	cmp	r3, #0
 8017970:	d002      	beq.n	8017978 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017972:	2b01      	cmp	r3, #1
 8017974:	d00d      	beq.n	8017992 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017976:	e028      	b.n	80179ca <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017978:	4b3b      	ldr	r3, [pc, #236]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801797a:	685a      	ldr	r2, [r3, #4]
 801797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801797e:	33e8      	adds	r3, #232	@ 0xe8
 8017980:	429a      	cmp	r2, r3
 8017982:	d021      	beq.n	80179c8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017986:	33e8      	adds	r3, #232	@ 0xe8
 8017988:	4619      	mov	r1, r3
 801798a:	4837      	ldr	r0, [pc, #220]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801798c:	f7ff fefe 	bl	801778c <prvSetMAC_HashFilter>
                                break;
 8017990:	e01a      	b.n	80179c8 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017992:	4a3e      	ldr	r2, [pc, #248]	@ (8017a8c <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017994:	f107 0314 	add.w	r3, r7, #20
 8017998:	e892 0003 	ldmia.w	r2, {r0, r1}
 801799c:	6018      	str	r0, [r3, #0]
 801799e:	3304      	adds	r3, #4
 80179a0:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 80179a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80179a8:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 80179aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ac:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80179b0:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 80179b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179b4:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80179b8:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80179ba:	f107 0314 	add.w	r3, r7, #20
 80179be:	4619      	mov	r1, r3
 80179c0:	4829      	ldr	r0, [pc, #164]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80179c2:	f7ff fee3 	bl	801778c <prvSetMAC_HashFilter>
                               break;
 80179c6:	e000      	b.n	80179ca <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 80179c8:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 80179ca:	4b25      	ldr	r3, [pc, #148]	@ (8017a60 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80179d0:	4618      	mov	r0, r3
 80179d2:	f7f5 fae3 	bl	800cf9c <FreeRTOS_NextEndPoint>
 80179d6:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 80179d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d1c1      	bne.n	8017962 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 80179de:	4a2c      	ldr	r2, [pc, #176]	@ (8017a90 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 80179e0:	f107 030c 	add.w	r3, r7, #12
 80179e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179e8:	6018      	str	r0, [r3, #0]
 80179ea:	3304      	adds	r3, #4
 80179ec:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80179ee:	f107 030c 	add.w	r3, r7, #12
 80179f2:	4619      	mov	r1, r3
 80179f4:	481c      	ldr	r0, [pc, #112]	@ (8017a68 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80179f6:	f7ff fec9 	bl	801778c <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80179fa:	f000 f911 	bl	8017c20 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80179fe:	2001      	movs	r0, #1
 8017a00:	f000 f926 	bl	8017c50 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017a04:	4b23      	ldr	r3, [pc, #140]	@ (8017a94 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017a06:	9301      	str	r3, [sp, #4]
 8017a08:	2305      	movs	r3, #5
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017a12:	4921      	ldr	r1, [pc, #132]	@ (8017a98 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017a14:	4821      	ldr	r0, [pc, #132]	@ (8017a9c <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017a16:	f7ec f865 	bl	8003ae4 <xTaskCreate>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b01      	cmp	r3, #1
 8017a1e:	d103      	bne.n	8017a28 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017a20:	4b0e      	ldr	r3, [pc, #56]	@ (8017a5c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017a22:	2201      	movs	r2, #1
 8017a24:	701a      	strb	r2, [r3, #0]
 8017a26:	e006      	b.n	8017a36 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017a28:	4b0c      	ldr	r3, [pc, #48]	@ (8017a5c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017a2a:	2202      	movs	r2, #2
 8017a2c:	701a      	strb	r2, [r3, #0]
 8017a2e:	e002      	b.n	8017a36 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017a30:	4b0a      	ldr	r3, [pc, #40]	@ (8017a5c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017a32:	2202      	movs	r2, #2
 8017a34:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017a36:	4b09      	ldr	r3, [pc, #36]	@ (8017a5c <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017a38:	781b      	ldrb	r3, [r3, #0]
 8017a3a:	2b01      	cmp	r3, #1
 8017a3c:	d108      	bne.n	8017a50 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 8017a3e:	4b18      	ldr	r3, [pc, #96]	@ (8017aa0 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d004      	beq.n	8017a50 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017a46:	2301      	movs	r3, #1
 8017a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8017a4a:	4816      	ldr	r0, [pc, #88]	@ (8017aa4 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8017a4c:	f009 ffa4 	bl	8021998 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3730      	adds	r7, #48	@ 0x30
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	200022a8 	.word	0x200022a8
 8017a60:	2000235c 	.word	0x2000235c
 8017a64:	08026d98 	.word	0x08026d98
 8017a68:	200022b4 	.word	0x200022b4
 8017a6c:	40028000 	.word	0x40028000
 8017a70:	24040060 	.word	0x24040060
 8017a74:	24040000 	.word	0x24040000
 8017a78:	20002328 	.word	0x20002328
 8017a7c:	200022ac 	.word	0x200022ac
 8017a80:	200022b0 	.word	0x200022b0
 8017a84:	08027024 	.word	0x08027024
 8017a88:	0802702c 	.word	0x0802702c
 8017a8c:	08026e10 	.word	0x08026e10
 8017a90:	08026e18 	.word	0x08026e18
 8017a94:	20002360 	.word	0x20002360
 8017a98:	08026dec 	.word	0x08026dec
 8017a9c:	08018005 	.word	0x08018005
 8017aa0:	20002364 	.word	0x20002364
 8017aa4:	08026df8 	.word	0x08026df8

08017aa8 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	b085      	sub	sp, #20
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8017ab0:	4b07      	ldr	r3, [pc, #28]	@ (8017ad0 <xSTM32H_GetPhyLinkStatus+0x28>)
 8017ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d002      	beq.n	8017abe <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8017ab8:	2301      	movs	r3, #1
 8017aba:	60fb      	str	r3, [r7, #12]
 8017abc:	e001      	b.n	8017ac2 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 8017abe:	2300      	movs	r3, #0
 8017ac0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
}
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	3714      	adds	r7, #20
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ace:	4770      	bx	lr
 8017ad0:	20002364 	.word	0x20002364

08017ad4 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
 8017adc:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	4a10      	ldr	r2, [pc, #64]	@ (8017b24 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8017ae2:	2111      	movs	r1, #17
 8017ae4:	4810      	ldr	r0, [pc, #64]	@ (8017b28 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017ae6:	f00a ff83 	bl	80229f0 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 8017aea:	2228      	movs	r2, #40	@ 0x28
 8017aec:	2100      	movs	r1, #0
 8017aee:	6838      	ldr	r0, [r7, #0]
 8017af0:	f00a fa7b 	bl	8021fea <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	4a0c      	ldr	r2, [pc, #48]	@ (8017b28 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017af8:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 8017afa:	687a      	ldr	r2, [r7, #4]
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017b00:	683b      	ldr	r3, [r7, #0]
 8017b02:	4a0a      	ldr	r2, [pc, #40]	@ (8017b2c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017b04:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017b06:	683b      	ldr	r3, [r7, #0]
 8017b08:	4a09      	ldr	r2, [pc, #36]	@ (8017b30 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 8017b0a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 8017b0c:	683b      	ldr	r3, [r7, #0]
 8017b0e:	4a09      	ldr	r2, [pc, #36]	@ (8017b34 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017b10:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017b12:	6838      	ldr	r0, [r7, #0]
 8017b14:	f7f5 f94c 	bl	800cdb0 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017b18:	683b      	ldr	r3, [r7, #0]
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3708      	adds	r7, #8
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	08026e20 	.word	0x08026e20
 8017b28:	200023a4 	.word	0x200023a4
 8017b2c:	08017815 	.word	0x08017815
 8017b30:	08017b39 	.word	0x08017b39
 8017b34:	08017aa9 	.word	0x08017aa9

08017b38 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b08a      	sub	sp, #40	@ 0x28
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017b44:	2300      	movs	r3, #0
 8017b46:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8017b48:	2364      	movs	r3, #100	@ 0x64
 8017b4a:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8017b4c:	68f8      	ldr	r0, [r7, #12]
 8017b4e:	f7ff ffab 	bl	8017aa8 <xSTM32H_GetPhyLinkStatus>
 8017b52:	4603      	mov	r3, r0
 8017b54:	2b01      	cmp	r3, #1
 8017b56:	d14c      	bne.n	8017bf2 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b5c:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d104      	bne.n	8017b6e <xSTM32H_NetworkInterfaceOutput+0x36>
 8017b64:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8017b68:	4827      	ldr	r0, [pc, #156]	@ (8017c08 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8017b6a:	f7e9 fded 	bl	8001748 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 8017b72:	68bb      	ldr	r3, [r7, #8]
 8017b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8017b76:	617b      	str	r3, [r7, #20]
 8017b78:	2300      	movs	r3, #0
 8017b7a:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8017b7c:	68bb      	ldr	r3, [r7, #8]
 8017b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b80:	4a22      	ldr	r2, [pc, #136]	@ (8017c0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017b82:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017b84:	4a21      	ldr	r2, [pc, #132]	@ (8017c0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017b86:	f107 0310 	add.w	r3, r7, #16
 8017b8a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8017b8c:	4b20      	ldr	r3, [pc, #128]	@ (8017c10 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	6a39      	ldr	r1, [r7, #32]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7eb fc86 	bl	80034a4 <xQueueSemaphoreTake>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b01      	cmp	r3, #1
 8017b9c:	d003      	beq.n	8017ba6 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 8017b9e:	481d      	ldr	r0, [pc, #116]	@ (8017c14 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017ba0:	f009 fefa 	bl	8021998 <lUDPLoggingPrintf>
 8017ba4:	e025      	b.n	8017bf2 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017ba6:	f3bf 8f4f 	dsb	sy
}
 8017baa:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8017bac:	4b1a      	ldr	r3, [pc, #104]	@ (8017c18 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	6a39      	ldr	r1, [r7, #32]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7eb fc76 	bl	80034a4 <xQueueSemaphoreTake>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d019      	beq.n	8017bf2 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017bc2:	4912      	ldr	r1, [pc, #72]	@ (8017c0c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017bc4:	4815      	ldr	r0, [pc, #84]	@ (8017c1c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017bc6:	f000 fcef 	bl	80185a8 <HAL_ETH_Transmit_IT>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d102      	bne.n	8017bd6 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017bd4:	e006      	b.n	8017be4 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8017c10 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017bd8:	6818      	ldr	r0, [r3, #0]
 8017bda:	2300      	movs	r3, #0
 8017bdc:	2200      	movs	r2, #0
 8017bde:	2100      	movs	r1, #0
 8017be0:	f7eb faa8 	bl	8003134 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017be4:	4b0c      	ldr	r3, [pc, #48]	@ (8017c18 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017be6:	6818      	ldr	r0, [r3, #0]
 8017be8:	2300      	movs	r3, #0
 8017bea:	2200      	movs	r2, #0
 8017bec:	2100      	movs	r1, #0
 8017bee:	f7eb faa1 	bl	8003134 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017bf8:	68b8      	ldr	r0, [r7, #8]
 8017bfa:	f7ff f825 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 8017bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3728      	adds	r7, #40	@ 0x28
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}
 8017c08:	08026d98 	.word	0x08026d98
 8017c0c:	20002328 	.word	0x20002328
 8017c10:	200022ac 	.word	0x200022ac
 8017c14:	08026e28 	.word	0x08026e28
 8017c18:	200022b0 	.word	0x200022b0
 8017c1c:	200022b4 	.word	0x200022b4

08017c20 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017c24:	4a06      	ldr	r2, [pc, #24]	@ (8017c40 <prvMACBProbePhy+0x20>)
 8017c26:	4907      	ldr	r1, [pc, #28]	@ (8017c44 <prvMACBProbePhy+0x24>)
 8017c28:	4807      	ldr	r0, [pc, #28]	@ (8017c48 <prvMACBProbePhy+0x28>)
 8017c2a:	f7ff f8c5 	bl	8016db8 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 8017c2e:	4806      	ldr	r0, [pc, #24]	@ (8017c48 <prvMACBProbePhy+0x28>)
 8017c30:	f7ff f8d8 	bl	8016de4 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8017c34:	4905      	ldr	r1, [pc, #20]	@ (8017c4c <prvMACBProbePhy+0x2c>)
 8017c36:	4804      	ldr	r0, [pc, #16]	@ (8017c48 <prvMACBProbePhy+0x28>)
 8017c38:	f7ff f9d2 	bl	8016fe0 <xPhyConfigure>
}
 8017c3c:	bf00      	nop
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	08017e41 	.word	0x08017e41
 8017c44:	08017e09 	.word	0x08017e09
 8017c48:	20002364 	.word	0x20002364
 8017c4c:	08027124 	.word	0x08027124

08017c50 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b09e      	sub	sp, #120	@ 0x78
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8017c60:	4b25      	ldr	r3, [pc, #148]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c64:	687a      	ldr	r2, [r7, #4]
 8017c66:	4619      	mov	r1, r3
 8017c68:	4824      	ldr	r0, [pc, #144]	@ (8017cfc <prvEthernetUpdateConfig+0xac>)
 8017c6a:	f009 fe95 	bl	8021998 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d103      	bne.n	8017c7c <prvEthernetUpdateConfig+0x2c>
 8017c74:	4b20      	ldr	r3, [pc, #128]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d035      	beq.n	8017ce8 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8017c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c80:	2201      	movs	r2, #1
 8017c82:	fa02 f303 	lsl.w	r3, r2, r3
 8017c86:	3b01      	subs	r3, #1
 8017c88:	4619      	mov	r1, r3
 8017c8a:	481b      	ldr	r0, [pc, #108]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017c8c:	f7ff faae 	bl	80171ec <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017c90:	4b19      	ldr	r3, [pc, #100]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017c92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017c96:	2b02      	cmp	r3, #2
 8017c98:	d103      	bne.n	8017ca2 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8017c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017c9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017ca0:	e001      	b.n	8017ca6 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017ca6:	4b14      	ldr	r3, [pc, #80]	@ (8017cf8 <prvEthernetUpdateConfig+0xa8>)
 8017ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017cac:	2b01      	cmp	r3, #1
 8017cae:	d102      	bne.n	8017cb6 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017cb0:	2300      	movs	r3, #0
 8017cb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8017cb4:	e002      	b.n	8017cbc <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017cb6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8017cba:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017cbc:	f107 030c 	add.w	r3, r7, #12
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	480f      	ldr	r0, [pc, #60]	@ (8017d00 <prvEthernetUpdateConfig+0xb0>)
 8017cc4:	f000 ffcc 	bl	8018c60 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017cca:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8017ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017cce:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017cd0:	f107 030c 	add.w	r3, r7, #12
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	480a      	ldr	r0, [pc, #40]	@ (8017d00 <prvEthernetUpdateConfig+0xb0>)
 8017cd8:	f001 f996 	bl	8019008 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8017cdc:	2301      	movs	r3, #1
 8017cde:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017ce0:	4807      	ldr	r0, [pc, #28]	@ (8017d00 <prvEthernetUpdateConfig+0xb0>)
 8017ce2:	f000 fb64 	bl	80183ae <HAL_ETH_Start_IT>
 8017ce6:	e003      	b.n	8017cf0 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017ce8:	4805      	ldr	r0, [pc, #20]	@ (8017d00 <prvEthernetUpdateConfig+0xb0>)
 8017cea:	f000 fbe5 	bl	80184b8 <HAL_ETH_Stop_IT>
    }
}
 8017cee:	bf00      	nop
 8017cf0:	bf00      	nop
 8017cf2:	3778      	adds	r7, #120	@ 0x78
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	20002364 	.word	0x20002364
 8017cfc:	08026e60 	.word	0x08026e60
 8017d00:	200022b4 	.word	0x200022b4

08017d04 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b08c      	sub	sp, #48	@ 0x30
 8017d08:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8017d0a:	2300      	movs	r3, #0
 8017d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8017d0e:	2300      	movs	r3, #0
 8017d10:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017d12:	f107 0308 	add.w	r3, r7, #8
 8017d16:	4619      	mov	r1, r3
 8017d18:	4838      	ldr	r0, [pc, #224]	@ (8017dfc <prvNetworkInterfaceInput+0xf8>)
 8017d1a:	f000 fd19 	bl	8018750 <HAL_ETH_GetRxData>
 8017d1e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d101      	bne.n	8017d2a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d28:	e064      	b.n	8017df4 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8017d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d2c:	3301      	adds	r3, #1
 8017d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8017d30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8017d34:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d004      	beq.n	8017d46 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7f2 f8ab 	bl	8009e9a <pxPacketBuffer_to_NetworkBuffer>
 8017d44:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8017d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d102      	bne.n	8017d52 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8017d4c:	482c      	ldr	r0, [pc, #176]	@ (8017e00 <prvNetworkInterfaceInput+0xfc>)
 8017d4e:	f009 fe23 	bl	8021998 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8017d52:	2100      	movs	r1, #0
 8017d54:	69b8      	ldr	r0, [r7, #24]
 8017d56:	f7fe ff0f 	bl	8016b78 <pxGetNetworkBufferWithDescriptor>
 8017d5a:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d102      	bne.n	8017d68 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8017d62:	2300      	movs	r3, #0
 8017d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d66:	e005      	b.n	8017d74 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8017d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d002      	beq.n	8017d74 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8017d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d70:	69fa      	ldr	r2, [r7, #28]
 8017d72:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8017d74:	2300      	movs	r3, #0
 8017d76:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d002      	beq.n	8017d84 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d82:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017d86:	481d      	ldr	r0, [pc, #116]	@ (8017dfc <prvNetworkInterfaceInput+0xf8>)
 8017d88:	f000 fd2a 	bl	80187e0 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8017d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d0bd      	beq.n	8017d0e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017d92:	2300      	movs	r3, #0
 8017d94:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7f1 f9e4 	bl	8009168 <eConsiderFrameForProcessing>
 8017da0:	4603      	mov	r3, r0
 8017da2:	2b01      	cmp	r3, #1
 8017da4:	d002      	beq.n	8017dac <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017da6:	2301      	movs	r3, #1
 8017da8:	623b      	str	r3, [r7, #32]
 8017daa:	e01c      	b.n	8017de6 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8017dac:	2301      	movs	r3, #1
 8017dae:	703b      	strb	r3, [r7, #0]
 8017db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db2:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8017db4:	4b13      	ldr	r3, [pc, #76]	@ (8017e04 <prvNetworkInterfaceInput+0x100>)
 8017db6:	681a      	ldr	r2, [r3, #0]
 8017db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dba:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8017dbc:	4b11      	ldr	r3, [pc, #68]	@ (8017e04 <prvNetworkInterfaceInput+0x100>)
 8017dbe:	681a      	ldr	r2, [r3, #0]
 8017dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	4610      	mov	r0, r2
 8017dc8:	f7f5 fb96 	bl	800d4f8 <FreeRTOS_MatchingEndpoint>
 8017dcc:	4602      	mov	r2, r0
 8017dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd0:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8017dd2:	463b      	mov	r3, r7
 8017dd4:	2100      	movs	r1, #0
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	f7f1 f972 	bl	80090c0 <xSendEventStructToIPTask>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d101      	bne.n	8017de6 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8017de2:	2301      	movs	r3, #1
 8017de4:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d090      	beq.n	8017d0e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8017dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017dee:	f7fe ff2b 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
    {
 8017df2:	e78c      	b.n	8017d0e <prvNetworkInterfaceInput+0xa>
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	3730      	adds	r7, #48	@ 0x30
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	bd80      	pop	{r7, pc}
 8017dfc:	200022b4 	.word	0x200022b4
 8017e00:	08026e94 	.word	0x08026e94
 8017e04:	2000235c 	.word	0x2000235c

08017e08 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b086      	sub	sp, #24
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017e14:	f04f 33ff 	mov.w	r3, #4294967295
 8017e18:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	68ba      	ldr	r2, [r7, #8]
 8017e1e:	68f9      	ldr	r1, [r7, #12]
 8017e20:	4806      	ldr	r0, [pc, #24]	@ (8017e3c <ETH_PHY_IO_ReadReg+0x34>)
 8017e22:	f000 fe75 	bl	8018b10 <HAL_ETH_ReadPHYRegister>
 8017e26:	4603      	mov	r3, r0
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d101      	bne.n	8017e30 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017e30:	697b      	ldr	r3, [r7, #20]
}
 8017e32:	4618      	mov	r0, r3
 8017e34:	3718      	adds	r7, #24
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd80      	pop	{r7, pc}
 8017e3a:	bf00      	nop
 8017e3c:	200022b4 	.word	0x200022b4

08017e40 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b086      	sub	sp, #24
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e50:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	68ba      	ldr	r2, [r7, #8]
 8017e56:	68f9      	ldr	r1, [r7, #12]
 8017e58:	4806      	ldr	r0, [pc, #24]	@ (8017e74 <ETH_PHY_IO_WriteReg+0x34>)
 8017e5a:	f000 fead 	bl	8018bb8 <HAL_ETH_WritePHYRegister>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d101      	bne.n	8017e68 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8017e64:	2300      	movs	r3, #0
 8017e66:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8017e68:	697b      	ldr	r3, [r7, #20]
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3718      	adds	r7, #24
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	200022b4 	.word	0x200022b4

08017e78 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8017e7c:	4802      	ldr	r0, [pc, #8]	@ (8017e88 <ETH_IRQHandler+0x10>)
 8017e7e:	f000 fd27 	bl	80188d0 <HAL_ETH_IRQHandler>
}
 8017e82:	bf00      	nop
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	200022b4 	.word	0x200022b4

08017e8c <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b084      	sub	sp, #16
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017e94:	2300      	movs	r3, #0
 8017e96:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8017e98:	4b10      	ldr	r3, [pc, #64]	@ (8017edc <prvSetFlagsAndNotify+0x50>)
 8017e9a:	681a      	ldr	r2, [r3, #0]
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	4313      	orrs	r3, r2
 8017ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8017edc <prvSetFlagsAndNotify+0x50>)
 8017ea2:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8017ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8017ee0 <prvSetFlagsAndNotify+0x54>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d012      	beq.n	8017ed2 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8017eac:	4b0c      	ldr	r3, [pc, #48]	@ (8017ee0 <prvSetFlagsAndNotify+0x54>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	f107 020c 	add.w	r2, r7, #12
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7ed fbd4 	bl	8005664 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d007      	beq.n	8017ed2 <prvSetFlagsAndNotify+0x46>
 8017ec2:	4b08      	ldr	r3, [pc, #32]	@ (8017ee4 <prvSetFlagsAndNotify+0x58>)
 8017ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017ec8:	601a      	str	r2, [r3, #0]
 8017eca:	f3bf 8f4f 	dsb	sy
 8017ece:	f3bf 8f6f 	isb	sy
    }
}
 8017ed2:	bf00      	nop
 8017ed4:	3710      	adds	r7, #16
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	bd80      	pop	{r7, pc}
 8017eda:	bf00      	nop
 8017edc:	200022a4 	.word	0x200022a4
 8017ee0:	20002360 	.word	0x20002360
 8017ee4:	e000ed04 	.word	0xe000ed04

08017ee8 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017ef0:	2002      	movs	r0, #2
 8017ef2:	f7ff ffcb 	bl	8017e8c <prvSetFlagsAndNotify>
}
 8017ef6:	bf00      	nop
 8017ef8:	3708      	adds	r7, #8
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}

08017efe <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017efe:	b580      	push	{r7, lr}
 8017f00:	b082      	sub	sp, #8
 8017f02:	af00      	add	r7, sp, #0
 8017f04:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017f06:	2001      	movs	r0, #1
 8017f08:	f7ff ffc0 	bl	8017e8c <prvSetFlagsAndNotify>
}
 8017f0c:	bf00      	nop
 8017f0e:	3708      	adds	r7, #8
 8017f10:	46bd      	mov	sp, r7
 8017f12:	bd80      	pop	{r7, pc}

08017f14 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b082      	sub	sp, #8
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8017f1c:	2004      	movs	r0, #4
 8017f1e:	f7ff ffb5 	bl	8017e8c <prvSetFlagsAndNotify>
}
 8017f22:	bf00      	nop
 8017f24:	3708      	adds	r7, #8
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
	...

08017f2c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8017f2c:	b480      	push	{r7}
 8017f2e:	b085      	sub	sp, #20
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8017f34:	4b15      	ldr	r3, [pc, #84]	@ (8017f8c <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8017f36:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017f38:	2300      	movs	r3, #0
 8017f3a:	60bb      	str	r3, [r7, #8]
 8017f3c:	e01c      	b.n	8017f78 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8017f3e:	68ba      	ldr	r2, [r7, #8]
 8017f40:	4613      	mov	r3, r2
 8017f42:	00db      	lsls	r3, r3, #3
 8017f44:	1a9b      	subs	r3, r3, r2
 8017f46:	00db      	lsls	r3, r3, #3
 8017f48:	461a      	mov	r2, r3
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	4413      	add	r3, r2
 8017f4e:	68fa      	ldr	r2, [r7, #12]
 8017f50:	320a      	adds	r2, #10
 8017f52:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8017f54:	68ba      	ldr	r2, [r7, #8]
 8017f56:	4613      	mov	r3, r2
 8017f58:	00db      	lsls	r3, r3, #3
 8017f5a:	1a9b      	subs	r3, r3, r2
 8017f5c:	00db      	lsls	r3, r3, #3
 8017f5e:	461a      	mov	r2, r3
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	4413      	add	r3, r2
 8017f64:	461a      	mov	r2, r3
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8017f70:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	3301      	adds	r3, #1
 8017f76:	60bb      	str	r3, [r7, #8]
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8017f7c:	d9df      	bls.n	8017f3e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8017f7e:	bf00      	nop
 8017f80:	bf00      	nop
 8017f82:	3714      	adds	r7, #20
 8017f84:	46bd      	mov	sp, r7
 8017f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8a:	4770      	bx	lr
 8017f8c:	240400c0 	.word	0x240400c0

08017f90 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b082      	sub	sp, #8
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
 8017f98:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8017f9a:	f7ed fe19 	bl	8005bd0 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	43db      	mvns	r3, r3
 8017fa6:	401a      	ands	r2, r3
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8017fac:	f7ed fe3c 	bl	8005c28 <vPortExitCritical>
}
 8017fb0:	bf00      	nop
 8017fb2:	3708      	adds	r7, #8
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8017fb8:	b480      	push	{r7}
 8017fba:	b087      	sub	sp, #28
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	3330      	adds	r3, #48	@ 0x30
 8017fc8:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017fca:	2300      	movs	r3, #0
 8017fcc:	617b      	str	r3, [r7, #20]
 8017fce:	e00e      	b.n	8017fee <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	697a      	ldr	r2, [r7, #20]
 8017fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8017fd8:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8017fda:	68bb      	ldr	r3, [r7, #8]
 8017fdc:	68db      	ldr	r3, [r3, #12]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	da02      	bge.n	8017fe8 <uxGetOwnCount+0x30>
            {
                xCount++;
 8017fe2:	693b      	ldr	r3, [r7, #16]
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017fe8:	697b      	ldr	r3, [r7, #20]
 8017fea:	3301      	adds	r3, #1
 8017fec:	617b      	str	r3, [r7, #20]
 8017fee:	697b      	ldr	r3, [r7, #20]
 8017ff0:	2b03      	cmp	r3, #3
 8017ff2:	d9ed      	bls.n	8017fd0 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017ff4:	693b      	ldr	r3, [r7, #16]
    }
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	371c      	adds	r7, #28
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018000:	4770      	bx	lr
	...

08018004 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b088      	sub	sp, #32
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 801800c:	2364      	movs	r3, #100	@ 0x64
 801800e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018010:	2300      	movs	r3, #0
 8018012:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018014:	2304      	movs	r3, #4
 8018016:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018018:	2300      	movs	r3, #0
 801801a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 801801c:	f7f2 f8d6 	bl	800a1cc <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018020:	4b43      	ldr	r3, [pc, #268]	@ (8018130 <prvEMACHandlerTask+0x12c>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	4618      	mov	r0, r3
 8018026:	f7eb fb2b 	bl	8003680 <uxQueueMessagesWaiting>
 801802a:	4603      	mov	r3, r0
 801802c:	f1c3 0304 	rsb	r3, r3, #4
 8018030:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018032:	69fa      	ldr	r2, [r7, #28]
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	429a      	cmp	r2, r3
 8018038:	d206      	bcs.n	8018048 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 801803e:	2204      	movs	r2, #4
 8018040:	69f9      	ldr	r1, [r7, #28]
 8018042:	483c      	ldr	r0, [pc, #240]	@ (8018134 <prvEMACHandlerTask+0x130>)
 8018044:	f009 fca8 	bl	8021998 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018048:	483b      	ldr	r0, [pc, #236]	@ (8018138 <prvEMACHandlerTask+0x134>)
 801804a:	f7ff ffb5 	bl	8017fb8 <uxGetOwnCount>
 801804e:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018050:	69ba      	ldr	r2, [r7, #24]
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	429a      	cmp	r2, r3
 8018056:	d906      	bls.n	8018066 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018058:	68bb      	ldr	r3, [r7, #8]
 801805a:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 801805c:	2204      	movs	r2, #4
 801805e:	69b9      	ldr	r1, [r7, #24]
 8018060:	4836      	ldr	r0, [pc, #216]	@ (801813c <prvEMACHandlerTask+0x138>)
 8018062:	f009 fc99 	bl	8021998 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018066:	693a      	ldr	r2, [r7, #16]
 8018068:	2100      	movs	r1, #0
 801806a:	2000      	movs	r0, #0
 801806c:	f7ec ff8a 	bl	8004f84 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018070:	4b33      	ldr	r3, [pc, #204]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f003 0301 	and.w	r3, r3, #1
 8018078:	2b00      	cmp	r3, #0
 801807a:	d006      	beq.n	801808a <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 801807c:	2101      	movs	r1, #1
 801807e:	4830      	ldr	r0, [pc, #192]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 8018080:	f7ff ff86 	bl	8017f90 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018084:	f7ff fe3e 	bl	8017d04 <prvNetworkInterfaceInput>
 8018088:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 801808a:	4b2d      	ldr	r3, [pc, #180]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	f003 0302 	and.w	r3, r3, #2
 8018092:	2b00      	cmp	r3, #0
 8018094:	d017      	beq.n	80180c6 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018096:	2102      	movs	r1, #2
 8018098:	4829      	ldr	r0, [pc, #164]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 801809a:	f7ff ff79 	bl	8017f90 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 801809e:	4b29      	ldr	r3, [pc, #164]	@ (8018144 <prvEMACHandlerTask+0x140>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7eb f9fc 	bl	80034a4 <xQueueSemaphoreTake>
 80180ac:	4603      	mov	r3, r0
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d009      	beq.n	80180c6 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 80180b2:	4821      	ldr	r0, [pc, #132]	@ (8018138 <prvEMACHandlerTask+0x134>)
 80180b4:	f001 fb04 	bl	80196c0 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 80180b8:	4b22      	ldr	r3, [pc, #136]	@ (8018144 <prvEMACHandlerTask+0x140>)
 80180ba:	6818      	ldr	r0, [r3, #0]
 80180bc:	2300      	movs	r3, #0
 80180be:	2200      	movs	r2, #0
 80180c0:	2100      	movs	r1, #0
 80180c2:	f7eb f837 	bl	8003134 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 80180c6:	4b1e      	ldr	r3, [pc, #120]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	f003 0304 	and.w	r3, r3, #4
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d00f      	beq.n	80180f2 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 80180d2:	2104      	movs	r1, #4
 80180d4:	481a      	ldr	r0, [pc, #104]	@ (8018140 <prvEMACHandlerTask+0x13c>)
 80180d6:	f7ff ff5b 	bl	8017f90 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 80180da:	4b17      	ldr	r3, [pc, #92]	@ (8018138 <prvEMACHandlerTask+0x134>)
 80180dc:	2210      	movs	r2, #16
 80180de:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 80180e0:	4815      	ldr	r0, [pc, #84]	@ (8018138 <prvEMACHandlerTask+0x134>)
 80180e2:	f000 f964 	bl	80183ae <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 80180e6:	f7ff fe0d 	bl	8017d04 <prvNetworkInterfaceInput>
 80180ea:	4602      	mov	r2, r0
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	4413      	add	r3, r2
 80180f0:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 80180f2:	6979      	ldr	r1, [r7, #20]
 80180f4:	4814      	ldr	r0, [pc, #80]	@ (8018148 <prvEMACHandlerTask+0x144>)
 80180f6:	f7ff fa25 	bl	8017544 <xPhyCheckLinkStatus>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d08b      	beq.n	8018018 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018100:	4b12      	ldr	r3, [pc, #72]	@ (801814c <prvEMACHandlerTask+0x148>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	4618      	mov	r0, r3
 8018106:	f7ff fccf 	bl	8017aa8 <xSTM32H_GetPhyLinkStatus>
 801810a:	4603      	mov	r3, r0
 801810c:	2b00      	cmp	r3, #0
 801810e:	d10b      	bne.n	8018128 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018110:	4809      	ldr	r0, [pc, #36]	@ (8018138 <prvEMACHandlerTask+0x134>)
 8018112:	f000 f9d1 	bl	80184b8 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018116:	2260      	movs	r2, #96	@ 0x60
 8018118:	2100      	movs	r1, #0
 801811a:	480d      	ldr	r0, [pc, #52]	@ (8018150 <prvEMACHandlerTask+0x14c>)
 801811c:	f009 ff65 	bl	8021fea <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018120:	4805      	ldr	r0, [pc, #20]	@ (8018138 <prvEMACHandlerTask+0x134>)
 8018122:	f001 facd 	bl	80196c0 <ETH_Clear_Tx_Descriptors>
 8018126:	e777      	b.n	8018018 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018128:	2000      	movs	r0, #0
 801812a:	f7ff fd91 	bl	8017c50 <prvEthernetUpdateConfig>
    {
 801812e:	e773      	b.n	8018018 <prvEMACHandlerTask+0x14>
 8018130:	200022ac 	.word	0x200022ac
 8018134:	08026eb8 	.word	0x08026eb8
 8018138:	200022b4 	.word	0x200022b4
 801813c:	08026ed0 	.word	0x08026ed0
 8018140:	200022a4 	.word	0x200022a4
 8018144:	200022b0 	.word	0x200022b0
 8018148:	20002364 	.word	0x20002364
 801814c:	2000235c 	.word	0x2000235c
 8018150:	24040060 	.word	0x24040060

08018154 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018154:	b480      	push	{r7}
 8018156:	b083      	sub	sp, #12
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	683a      	ldr	r2, [r7, #0]
 8018162:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018164:	bf00      	nop
 8018166:	370c      	adds	r7, #12
 8018168:	46bd      	mov	sp, r7
 801816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801816e:	4770      	bx	lr

08018170 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d101      	bne.n	8018182 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 801817e:	2301      	movs	r3, #1
 8018180:	e0d4      	b.n	801832c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018186:	2b00      	cmp	r3, #0
 8018188:	d102      	bne.n	8018190 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f7e9 fd1a 	bl	8001bc4 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2223      	movs	r2, #35	@ 0x23
 8018194:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018196:	4b67      	ldr	r3, [pc, #412]	@ (8018334 <HAL_ETH_Init+0x1c4>)
 8018198:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801819c:	4a65      	ldr	r2, [pc, #404]	@ (8018334 <HAL_ETH_Init+0x1c4>)
 801819e:	f043 0302 	orr.w	r3, r3, #2
 80181a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80181a6:	4b63      	ldr	r3, [pc, #396]	@ (8018334 <HAL_ETH_Init+0x1c4>)
 80181a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80181ac:	f003 0302 	and.w	r3, r3, #2
 80181b0:	60bb      	str	r3, [r7, #8]
 80181b2:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	7a1b      	ldrb	r3, [r3, #8]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d103      	bne.n	80181c4 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 80181bc:	2000      	movs	r0, #0
 80181be:	f001 fc17 	bl	80199f0 <HAL_SYSCFG_ETHInterfaceSelect>
 80181c2:	e003      	b.n	80181cc <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 80181c4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80181c8:	f001 fc12 	bl	80199f0 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	6812      	ldr	r2, [r2, #0]
 80181da:	f043 0301 	orr.w	r3, r3, #1
 80181de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181e2:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 80181e4:	f001 fbc8 	bl	8019978 <HAL_GetTick>
 80181e8:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 80181ea:	e010      	b.n	801820e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 80181ec:	f001 fbc4 	bl	8019978 <HAL_GetTick>
 80181f0:	4602      	mov	r2, r0
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	1ad3      	subs	r3, r2, r3
 80181f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80181fa:	d908      	bls.n	801820e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	2204      	movs	r2, #4
 8018200:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018202:	21e0      	movs	r1, #224	@ 0xe0
 8018204:	6878      	ldr	r0, [r7, #4]
 8018206:	f7ff ffa5 	bl	8018154 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801820a:	2301      	movs	r3, #1
 801820c:	e08e      	b.n	801832c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f003 0301 	and.w	r3, r3, #1
 801821c:	2b00      	cmp	r3, #0
 801821e:	d1e5      	bne.n	80181ec <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f001 f94b 	bl	80194bc <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018226:	f004 ff49 	bl	801d0bc <HAL_RCC_GetHCLKFreq>
 801822a:	4603      	mov	r3, r0
 801822c:	4a42      	ldr	r2, [pc, #264]	@ (8018338 <HAL_ETH_Init+0x1c8>)
 801822e:	fba2 2303 	umull	r2, r3, r2, r3
 8018232:	0c9a      	lsrs	r2, r3, #18
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	3a01      	subs	r2, #1
 801823a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801823e:	6878      	ldr	r0, [r7, #4]
 8018240:	f001 f89e 	bl	8019380 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801824c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8018250:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8018254:	687a      	ldr	r2, [r7, #4]
 8018256:	6812      	ldr	r2, [r2, #0]
 8018258:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801825c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018260:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	695b      	ldr	r3, [r3, #20]
 8018268:	f003 0303 	and.w	r3, r3, #3
 801826c:	2b00      	cmp	r3, #0
 801826e:	d008      	beq.n	8018282 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2201      	movs	r2, #1
 8018274:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018276:	21e0      	movs	r1, #224	@ 0xe0
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	f7ff ff6b 	bl	8018154 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801827e:	2301      	movs	r3, #1
 8018280:	e054      	b.n	801832c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801828a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801828e:	4b2b      	ldr	r3, [pc, #172]	@ (801833c <HAL_ETH_Init+0x1cc>)
 8018290:	4013      	ands	r3, r2
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	6952      	ldr	r2, [r2, #20]
 8018296:	0051      	lsls	r1, r2, #1
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	6812      	ldr	r2, [r2, #0]
 801829c:	430b      	orrs	r3, r1
 801829e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80182a2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 80182a6:	6878      	ldr	r0, [r7, #4]
 80182a8:	f001 f960 	bl	801956c <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 80182ac:	6878      	ldr	r0, [r7, #4]
 80182ae:	f001 f9a9 	bl	8019604 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	685b      	ldr	r3, [r3, #4]
 80182b6:	3305      	adds	r3, #5
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	021a      	lsls	r2, r3, #8
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	685b      	ldr	r3, [r3, #4]
 80182c0:	3304      	adds	r3, #4
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	4619      	mov	r1, r3
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	430a      	orrs	r2, r1
 80182cc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	685b      	ldr	r3, [r3, #4]
 80182d4:	3303      	adds	r3, #3
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	061a      	lsls	r2, r3, #24
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	685b      	ldr	r3, [r3, #4]
 80182de:	3302      	adds	r3, #2
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	041b      	lsls	r3, r3, #16
 80182e4:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	685b      	ldr	r3, [r3, #4]
 80182ea:	3301      	adds	r3, #1
 80182ec:	781b      	ldrb	r3, [r3, #0]
 80182ee:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80182f0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80182fe:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018300:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2200      	movs	r2, #0
 8018308:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	2210      	movs	r2, #16
 801830e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2210      	movs	r2, #16
 8018314:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	4a09      	ldr	r2, [pc, #36]	@ (8018340 <HAL_ETH_Init+0x1d0>)
 801831c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4a07      	ldr	r2, [pc, #28]	@ (8018344 <HAL_ETH_Init+0x1d4>)
 8018326:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 801832a:	2300      	movs	r3, #0
        }
 801832c:	4618      	mov	r0, r3
 801832e:	3710      	adds	r7, #16
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	58024400 	.word	0x58024400
 8018338:	431bde83 	.word	0x431bde83
 801833c:	ffff8001 	.word	0xffff8001
 8018340:	0c020060 	.word	0x0c020060
 8018344:	0c20c000 	.word	0x0c20c000

08018348 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8018348:	b480      	push	{r7}
 801834a:	b087      	sub	sp, #28
 801834c:	af00      	add	r7, sp, #0
 801834e:	60f8      	str	r0, [r7, #12]
 8018350:	60b9      	str	r1, [r7, #8]
 8018352:	607a      	str	r2, [r7, #4]
 8018354:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	68ba      	ldr	r2, [r7, #8]
 801835a:	320c      	adds	r2, #12
 801835c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018360:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d002      	beq.n	801836e <HAL_ETH_DescAssignMemory+0x26>
 8018368:	68bb      	ldr	r3, [r7, #8]
 801836a:	2b03      	cmp	r3, #3
 801836c:	d904      	bls.n	8018378 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	2201      	movs	r2, #1
 8018372:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8018374:	2301      	movs	r3, #1
 8018376:	e014      	b.n	80183a2 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8018378:	687a      	ldr	r2, [r7, #4]
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801837e:	687a      	ldr	r2, [r7, #4]
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	68db      	ldr	r3, [r3, #12]
 8018388:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	68db      	ldr	r3, [r3, #12]
 8018394:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 80183a0:	2300      	movs	r3, #0
        }
 80183a2:	4618      	mov	r0, r3
 80183a4:	371c      	adds	r7, #28
 80183a6:	46bd      	mov	sp, r7
 80183a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ac:	4770      	bx	lr

080183ae <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 80183ae:	b480      	push	{r7}
 80183b0:	b085      	sub	sp, #20
 80183b2:	af00      	add	r7, sp, #0
 80183b4:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183ba:	2b10      	cmp	r3, #16
 80183bc:	d175      	bne.n	80184aa <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	2223      	movs	r2, #35	@ 0x23
 80183c2:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80183c4:	2300      	movs	r3, #0
 80183c6:	60fb      	str	r3, [r7, #12]
 80183c8:	e00e      	b.n	80183e8 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	68fa      	ldr	r2, [r7, #12]
 80183ce:	320c      	adds	r2, #12
 80183d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183d4:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	68db      	ldr	r3, [r3, #12]
 80183da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80183de:	68bb      	ldr	r3, [r7, #8]
 80183e0:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	3301      	adds	r3, #1
 80183e6:	60fb      	str	r3, [r7, #12]
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	2b03      	cmp	r3, #3
 80183ec:	d9ed      	bls.n	80183ca <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2201      	movs	r2, #1
 80183f2:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	f042 0202 	orr.w	r2, r2, #2
 8018402:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	681a      	ldr	r2, [r3, #0]
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	f042 0201 	orr.w	r2, r2, #1
 8018412:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	f042 0201 	orr.w	r2, r2, #1
 8018424:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018430:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018434:	687a      	ldr	r2, [r7, #4]
 8018436:	6812      	ldr	r2, [r2, #0]
 8018438:	f043 0301 	orr.w	r3, r3, #1
 801843c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018440:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801844c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018450:	687a      	ldr	r2, [r7, #4]
 8018452:	6812      	ldr	r2, [r2, #0]
 8018454:	f043 0301 	orr.w	r3, r3, #1
 8018458:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801845c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018468:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801846c:	687a      	ldr	r2, [r7, #4]
 801846e:	6812      	ldr	r2, [r2, #0]
 8018470:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8018474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018478:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018484:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8018490:	430b      	orrs	r3, r1
 8018492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018496:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	2210      	movs	r2, #16
 801849e:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2222      	movs	r2, #34	@ 0x22
 80184a4:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 80184a6:	2300      	movs	r3, #0
 80184a8:	e000      	b.n	80184ac <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 80184aa:	2301      	movs	r3, #1
            }
        }
 80184ac:	4618      	mov	r0, r3
 80184ae:	3714      	adds	r7, #20
 80184b0:	46bd      	mov	sp, r7
 80184b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b6:	4770      	bx	lr

080184b8 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 80184b8:	b480      	push	{r7}
 80184ba:	b085      	sub	sp, #20
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d066      	beq.n	8018596 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2223      	movs	r2, #35	@ 0x23
 80184cc:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184d6:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	681a      	ldr	r2, [r3, #0]
 80184de:	4b31      	ldr	r3, [pc, #196]	@ (80185a4 <HAL_ETH_Stop_IT+0xec>)
 80184e0:	400b      	ands	r3, r1
 80184e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80184e6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80184f6:	687a      	ldr	r2, [r7, #4]
 80184f8:	6812      	ldr	r2, [r2, #0]
 80184fa:	f023 0301 	bic.w	r3, r3, #1
 80184fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018502:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801850e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018512:	687a      	ldr	r2, [r7, #4]
 8018514:	6812      	ldr	r2, [r2, #0]
 8018516:	f023 0301 	bic.w	r3, r3, #1
 801851a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801851e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	f022 0201 	bic.w	r2, r2, #1
 8018530:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	f042 0201 	orr.w	r2, r2, #1
 8018542:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	681a      	ldr	r2, [r3, #0]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	f022 0202 	bic.w	r2, r2, #2
 8018554:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018556:	2300      	movs	r3, #0
 8018558:	60fb      	str	r3, [r7, #12]
 801855a:	e00e      	b.n	801857a <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	68fa      	ldr	r2, [r7, #12]
 8018560:	320c      	adds	r2, #12
 8018562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018566:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	68db      	ldr	r3, [r3, #12]
 801856c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018570:	68bb      	ldr	r3, [r7, #8]
 8018572:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	3301      	adds	r3, #1
 8018578:	60fb      	str	r3, [r7, #12]
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	2b03      	cmp	r3, #3
 801857e:	d9ed      	bls.n	801855c <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2200      	movs	r2, #0
 8018584:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2210      	movs	r2, #16
 801858a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2210      	movs	r2, #16
 8018590:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8018592:	2300      	movs	r3, #0
 8018594:	e000      	b.n	8018598 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8018596:	2301      	movs	r3, #1
            }
        }
 8018598:	4618      	mov	r0, r3
 801859a:	3714      	adds	r7, #20
 801859c:	46bd      	mov	sp, r7
 801859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a2:	4770      	bx	lr
 80185a4:	ffff2fbe 	.word	0xffff2fbe

080185a8 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 80185a8:	b580      	push	{r7, lr}
 80185aa:	b082      	sub	sp, #8
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
 80185b0:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d107      	bne.n	80185c8 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80185bc:	f043 0201 	orr.w	r2, r3, #1
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 80185c4:	2301      	movs	r3, #1
 80185c6:	e039      	b.n	801863c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80185cc:	2b10      	cmp	r3, #16
 80185ce:	d134      	bne.n	801863a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 80185d0:	2201      	movs	r2, #1
 80185d2:	6839      	ldr	r1, [r7, #0]
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f001 f8c1 	bl	801975c <ETH_Prepare_Tx_Descriptors>
 80185da:	4603      	mov	r3, r0
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d007      	beq.n	80185f0 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80185e4:	f043 0202 	orr.w	r2, r3, #2
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 80185ec:	2301      	movs	r3, #1
 80185ee:	e025      	b.n	801863c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185f4:	1c5a      	adds	r2, r3, #1
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185fe:	2b03      	cmp	r3, #3
 8018600:	d904      	bls.n	801860c <HAL_ETH_Transmit_IT+0x64>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018606:	1f1a      	subs	r2, r3, #4
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	681a      	ldr	r2, [r3, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	3106      	adds	r1, #6
 8018618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801861c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018620:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018624:	f3bf 8f4f 	dsb	sy
}
 8018628:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018632:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018636:	2300      	movs	r3, #0
 8018638:	e000      	b.n	801863c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 801863a:	2301      	movs	r3, #1
            }
        }
 801863c:	4618      	mov	r0, r3
 801863e:	3708      	adds	r7, #8
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}

08018644 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018644:	b580      	push	{r7, lr}
 8018646:	b08a      	sub	sp, #40	@ 0x28
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	3330      	adds	r3, #48	@ 0x30
 8018650:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8018652:	69bb      	ldr	r3, [r7, #24]
 8018654:	691b      	ldr	r3, [r3, #16]
 8018656:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018658:	69bb      	ldr	r3, [r7, #24]
 801865a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801865c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018660:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8018662:	2300      	movs	r3, #0
 8018664:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8018666:	2300      	movs	r3, #0
 8018668:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 801866a:	2300      	movs	r3, #0
 801866c:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801866e:	e055      	b.n	801871c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	68db      	ldr	r3, [r3, #12]
 8018674:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8018676:	6a3b      	ldr	r3, [r7, #32]
 8018678:	3301      	adds	r3, #1
 801867a:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018682:	2b00      	cmp	r3, #0
 8018684:	d006      	beq.n	8018694 <HAL_ETH_IsRxDataAvailable+0x50>
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801868c:	2b00      	cmp	r3, #0
 801868e:	d001      	beq.n	8018694 <HAL_ETH_IsRxDataAvailable+0x50>
 8018690:	2301      	movs	r3, #1
 8018692:	e000      	b.n	8018696 <HAL_ETH_IsRxDataAvailable+0x52>
 8018694:	2300      	movs	r3, #0
 8018696:	2b00      	cmp	r3, #0
 8018698:	d104      	bne.n	80186a4 <HAL_ETH_IsRxDataAvailable+0x60>
 801869a:	f240 4195 	movw	r1, #1173	@ 0x495
 801869e:	482b      	ldr	r0, [pc, #172]	@ (801874c <HAL_ETH_IsRxDataAvailable+0x108>)
 80186a0:	f7e9 f852 	bl	8001748 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d036      	beq.n	801871c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	3301      	adds	r3, #1
 80186b2:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 80186b4:	693b      	ldr	r3, [r7, #16]
 80186b6:	2b01      	cmp	r3, #1
 80186b8:	d101      	bne.n	80186be <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 80186ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186bc:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 80186be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c0:	3301      	adds	r3, #1
 80186c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80186c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c6:	2b03      	cmp	r3, #3
 80186c8:	d902      	bls.n	80186d0 <HAL_ETH_IsRxDataAvailable+0x8c>
 80186ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186cc:	3b04      	subs	r3, #4
 80186ce:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80186d0:	69bb      	ldr	r3, [r7, #24]
 80186d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80186d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186d8:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	68db      	ldr	r3, [r3, #12]
 80186de:	2b00      	cmp	r3, #0
 80186e0:	db11      	blt.n	8018706 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 80186e2:	697b      	ldr	r3, [r7, #20]
 80186e4:	68db      	ldr	r3, [r3, #12]
 80186e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d00b      	beq.n	8018706 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 80186ee:	69bb      	ldr	r3, [r7, #24]
 80186f0:	2201      	movs	r2, #1
 80186f2:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 80186f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f6:	3301      	adds	r3, #1
 80186f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80186fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186fc:	2b03      	cmp	r3, #3
 80186fe:	d902      	bls.n	8018706 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018702:	3b04      	subs	r3, #4
 8018704:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801870a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 801870c:	69bb      	ldr	r3, [r7, #24]
 801870e:	69fa      	ldr	r2, [r7, #28]
 8018710:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018712:	69bb      	ldr	r3, [r7, #24]
 8018714:	693a      	ldr	r2, [r7, #16]
 8018716:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018718:	2301      	movs	r3, #1
 801871a:	e012      	b.n	8018742 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	68db      	ldr	r3, [r3, #12]
 8018720:	2b00      	cmp	r3, #0
 8018722:	db02      	blt.n	801872a <HAL_ETH_IsRxDataAvailable+0xe6>
 8018724:	6a3b      	ldr	r3, [r7, #32]
 8018726:	2b03      	cmp	r3, #3
 8018728:	d9a2      	bls.n	8018670 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 801872a:	693b      	ldr	r3, [r7, #16]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d004      	beq.n	801873a <HAL_ETH_IsRxDataAvailable+0xf6>
 8018730:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018734:	4805      	ldr	r0, [pc, #20]	@ (801874c <HAL_ETH_IsRxDataAvailable+0x108>)
 8018736:	f7e9 f807 	bl	8001748 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 801873a:	69bb      	ldr	r3, [r7, #24]
 801873c:	2200      	movs	r2, #0
 801873e:	619a      	str	r2, [r3, #24]

            return 0;
 8018740:	2300      	movs	r3, #0
        }
 8018742:	4618      	mov	r0, r3
 8018744:	3728      	adds	r7, #40	@ 0x28
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}
 801874a:	bf00      	nop
 801874c:	08026ee8 	.word	0x08026ee8

08018750 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8018750:	b580      	push	{r7, lr}
 8018752:	b086      	sub	sp, #24
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	3330      	adds	r3, #48	@ 0x30
 801875e:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d104      	bne.n	8018770 <HAL_ETH_GetRxData+0x20>
 8018766:	f240 511f 	movw	r1, #1311	@ 0x51f
 801876a:	481c      	ldr	r0, [pc, #112]	@ (80187dc <HAL_ETH_GetRxData+0x8c>)
 801876c:	f7e8 ffec 	bl	8001748 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f7ff ff67 	bl	8018644 <HAL_ETH_IsRxDataAvailable>
 8018776:	4603      	mov	r3, r0
 8018778:	2b00      	cmp	r3, #0
 801877a:	d101      	bne.n	8018780 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 801877c:	2300      	movs	r3, #0
 801877e:	e028      	b.n	80187d2 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	695b      	ldr	r3, [r3, #20]
 8018784:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	693a      	ldr	r2, [r7, #16]
 801878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801878e:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8018790:	697b      	ldr	r3, [r7, #20]
 8018792:	699b      	ldr	r3, [r3, #24]
 8018794:	2b01      	cmp	r3, #1
 8018796:	d004      	beq.n	80187a2 <HAL_ETH_GetRxData+0x52>
 8018798:	f240 512a 	movw	r1, #1322	@ 0x52a
 801879c:	480f      	ldr	r0, [pc, #60]	@ (80187dc <HAL_ETH_GetRxData+0x8c>)
 801879e:	f7e8 ffd3 	bl	8001748 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80187aa:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	691b      	ldr	r3, [r3, #16]
 80187b0:	461a      	mov	r2, r3
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	68ba      	ldr	r2, [r7, #8]
 80187ba:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	695b      	ldr	r3, [r3, #20]
 80187c0:	68ba      	ldr	r2, [r7, #8]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d904      	bls.n	80187d0 <HAL_ETH_GetRxData+0x80>
 80187c6:	f240 5133 	movw	r1, #1331	@ 0x533
 80187ca:	4804      	ldr	r0, [pc, #16]	@ (80187dc <HAL_ETH_GetRxData+0x8c>)
 80187cc:	f7e8 ffbc 	bl	8001748 <vAssertCalled>

            return packet_length;
 80187d0:	68bb      	ldr	r3, [r7, #8]
        }
 80187d2:	4618      	mov	r0, r3
 80187d4:	3718      	adds	r7, #24
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	08026ee8 	.word	0x08026ee8

080187e0 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 80187e0:	b480      	push	{r7}
 80187e2:	b08b      	sub	sp, #44	@ 0x2c
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	3330      	adds	r3, #48	@ 0x30
 80187ee:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	695b      	ldr	r3, [r3, #20]
 80187f4:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187fe:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	699b      	ldr	r3, [r3, #24]
 8018804:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	699b      	ldr	r3, [r3, #24]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d101      	bne.n	8018812 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801880e:	2301      	movs	r3, #1
 8018810:	e057      	b.n	80188c2 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	69db      	ldr	r3, [r3, #28]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d002      	beq.n	8018820 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 801881a:	69fb      	ldr	r3, [r7, #28]
 801881c:	3301      	adds	r3, #1
 801881e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018820:	2300      	movs	r3, #0
 8018822:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d005      	beq.n	8018836 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 801882a:	683b      	ldr	r3, [r7, #0]
 801882c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 801882e:	683a      	ldr	r2, [r7, #0]
 8018830:	6a3b      	ldr	r3, [r7, #32]
 8018832:	611a      	str	r2, [r3, #16]
 8018834:	e002      	b.n	801883c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018836:	6a3b      	ldr	r3, [r7, #32]
 8018838:	691b      	ldr	r3, [r3, #16]
 801883a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 801883c:	693a      	ldr	r2, [r7, #16]
 801883e:	6a3b      	ldr	r3, [r7, #32]
 8018840:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018842:	6a3b      	ldr	r3, [r7, #32]
 8018844:	68db      	ldr	r3, [r3, #12]
 8018846:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018848:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801884c:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801884e:	68fb      	ldr	r3, [r7, #12]
 8018850:	6a1b      	ldr	r3, [r3, #32]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d003      	beq.n	801885e <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8018856:	697b      	ldr	r3, [r7, #20]
 8018858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801885c:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801885e:	697b      	ldr	r3, [r7, #20]
 8018860:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018864:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8018866:	6a3b      	ldr	r3, [r7, #32]
 8018868:	697a      	ldr	r2, [r7, #20]
 801886a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801886c:	f3bf 8f4f 	dsb	sy
}
 8018870:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8018872:	6a3b      	ldr	r3, [r7, #32]
 8018874:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8018876:	69fb      	ldr	r3, [r7, #28]
 8018878:	3b01      	subs	r3, #1
 801887a:	69ba      	ldr	r2, [r7, #24]
 801887c:	429a      	cmp	r2, r3
 801887e:	d211      	bcs.n	80188a4 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8018880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018882:	3301      	adds	r3, #1
 8018884:	627b      	str	r3, [r7, #36]	@ 0x24
 8018886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018888:	2b03      	cmp	r3, #3
 801888a:	d902      	bls.n	8018892 <HAL_ETH_BuildRxDescriptors+0xb2>
 801888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801888e:	3b04      	subs	r3, #4
 8018890:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801889a:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801889c:	69bb      	ldr	r3, [r7, #24]
 801889e:	3301      	adds	r3, #1
 80188a0:	61bb      	str	r3, [r7, #24]
            {
 80188a2:	e7bf      	b.n	8018824 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 80188a4:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	681a      	ldr	r2, [r3, #0]
 80188aa:	6a3b      	ldr	r3, [r7, #32]
 80188ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80188b0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	2200      	movs	r2, #0
 80188b8:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	2200      	movs	r2, #0
 80188be:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 80188c0:	2300      	movs	r3, #0
        }
 80188c2:	4618      	mov	r0, r3
 80188c4:	372c      	adds	r7, #44	@ 0x2c
 80188c6:	46bd      	mov	sp, r7
 80188c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188cc:	4770      	bx	lr
	...

080188d0 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b082      	sub	sp, #8
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80188e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188e8:	2b40      	cmp	r3, #64	@ 0x40
 80188ea:	d115      	bne.n	8018918 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80188f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80188f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188fc:	2b40      	cmp	r3, #64	@ 0x40
 80188fe:	d10b      	bne.n	8018918 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018900:	6878      	ldr	r0, [r7, #4]
 8018902:	f7ff fafc 	bl	8017efe <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801890e:	461a      	mov	r2, r3
 8018910:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018914:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018920:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018924:	f003 0301 	and.w	r3, r3, #1
 8018928:	2b01      	cmp	r3, #1
 801892a:	d115      	bne.n	8018958 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018934:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018938:	f003 0301 	and.w	r3, r3, #1
 801893c:	2b01      	cmp	r3, #1
 801893e:	d10b      	bne.n	8018958 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018940:	6878      	ldr	r0, [r7, #4]
 8018942:	f7ff fad1 	bl	8017ee8 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801894e:	461a      	mov	r2, r3
 8018950:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018954:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018960:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801896c:	d14f      	bne.n	8018a0e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018976:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801897a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801897e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018982:	d144      	bne.n	8018a0e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018988:	f043 0208 	orr.w	r2, r3, #8
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018998:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801899c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80189a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80189a4:	d11d      	bne.n	80189e2 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ae:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80189b2:	f241 1302 	movw	r3, #4354	@ 0x1102
 80189b6:	4013      	ands	r3, r2
 80189b8:	687a      	ldr	r2, [r7, #4]
 80189ba:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189c4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80189c8:	687a      	ldr	r2, [r7, #4]
 80189ca:	6812      	ldr	r2, [r2, #0]
 80189cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80189d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189d4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 80189d8:	21e0      	movs	r1, #224	@ 0xe0
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f7ff fbba 	bl	8018154 <set_error_state>
 80189e0:	e012      	b.n	8018a08 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ea:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80189ee:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189fe:	461a      	mov	r2, r3
 8018a00:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018a04:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f7ff fa83 	bl	8017f14 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018a16:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8018a1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8018a1e:	d10f      	bne.n	8018a40 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018a2c:	21e0      	movs	r1, #224	@ 0xe0
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f7ff fb90 	bl	8018154 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f000 f843 	bl	8018ac0 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018a48:	f003 0310 	and.w	r3, r3, #16
 8018a4c:	2b10      	cmp	r3, #16
 8018a4e:	d10d      	bne.n	8018a6c <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018a58:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f000 f837 	bl	8018ad4 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	2200      	movs	r2, #0
 8018a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018a74:	f003 0320 	and.w	r3, r3, #32
 8018a78:	2b20      	cmp	r3, #32
 8018a7a:	d10d      	bne.n	8018a98 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018a84:	f003 020f 	and.w	r2, r3, #15
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f000 f82b 	bl	8018ae8 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2200      	movs	r2, #0
 8018a96:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018a98:	4b08      	ldr	r3, [pc, #32]	@ (8018abc <HAL_ETH_IRQHandler+0x1ec>)
 8018a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d006      	beq.n	8018ab2 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8018aa4:	4b05      	ldr	r3, [pc, #20]	@ (8018abc <HAL_ETH_IRQHandler+0x1ec>)
 8018aa6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8018aaa:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f000 f825 	bl	8018afc <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8018ab2:	bf00      	nop
 8018ab4:	3708      	adds	r7, #8
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	58000080 	.word	0x58000080

08018ac0 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8018ac0:	b480      	push	{r7}
 8018ac2:	b083      	sub	sp, #12
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8018ac8:	bf00      	nop
 8018aca:	370c      	adds	r7, #12
 8018acc:	46bd      	mov	sp, r7
 8018ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad2:	4770      	bx	lr

08018ad4 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8018ad4:	b480      	push	{r7}
 8018ad6:	b083      	sub	sp, #12
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8018adc:	bf00      	nop
 8018ade:	370c      	adds	r7, #12
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae6:	4770      	bx	lr

08018ae8 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018af0:	bf00      	nop
 8018af2:	370c      	adds	r7, #12
 8018af4:	46bd      	mov	sp, r7
 8018af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afa:	4770      	bx	lr

08018afc <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 8018afc:	b480      	push	{r7}
 8018afe:	b083      	sub	sp, #12
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018b04:	bf00      	nop
 8018b06:	370c      	adds	r7, #12
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b0e:	4770      	bx	lr

08018b10 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b086      	sub	sp, #24
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	60f8      	str	r0, [r7, #12]
 8018b18:	60b9      	str	r1, [r7, #8]
 8018b1a:	607a      	str	r2, [r7, #4]
 8018b1c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b26:	f003 0301 	and.w	r3, r3, #1
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d001      	beq.n	8018b32 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 8018b2e:	2301      	movs	r3, #1
 8018b30:	e03e      	b.n	8018bb0 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b3a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018b42:	68bb      	ldr	r3, [r7, #8]
 8018b44:	055b      	lsls	r3, r3, #21
 8018b46:	4313      	orrs	r3, r2
 8018b48:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	041b      	lsls	r3, r3, #16
 8018b54:	4313      	orrs	r3, r2
 8018b56:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8018b58:	697b      	ldr	r3, [r7, #20]
 8018b5a:	f043 030c 	orr.w	r3, r3, #12
 8018b5e:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018b60:	697b      	ldr	r3, [r7, #20]
 8018b62:	f043 0301 	orr.w	r3, r3, #1
 8018b66:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	697a      	ldr	r2, [r7, #20]
 8018b6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018b72:	f000 ff01 	bl	8019978 <HAL_GetTick>
 8018b76:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b78:	e009      	b.n	8018b8e <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018b7a:	f000 fefd 	bl	8019978 <HAL_GetTick>
 8018b7e:	4602      	mov	r2, r0
 8018b80:	693b      	ldr	r3, [r7, #16]
 8018b82:	1ad3      	subs	r3, r2, r3
 8018b84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018b88:	d901      	bls.n	8018b8e <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8018b8a:	2301      	movs	r3, #1
 8018b8c:	e010      	b.n	8018bb0 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018b96:	f003 0301 	and.w	r3, r3, #1
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d1ed      	bne.n	8018b7a <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018ba6:	b29b      	uxth	r3, r3
 8018ba8:	461a      	mov	r2, r3
 8018baa:	683b      	ldr	r3, [r7, #0]
 8018bac:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 8018bae:	2300      	movs	r3, #0
        }
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3718      	adds	r7, #24
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b086      	sub	sp, #24
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	60b9      	str	r1, [r7, #8]
 8018bc2:	607a      	str	r2, [r7, #4]
 8018bc4:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018bce:	f003 0301 	and.w	r3, r3, #1
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d001      	beq.n	8018bda <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	e03c      	b.n	8018c54 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018be2:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018be4:	697b      	ldr	r3, [r7, #20]
 8018be6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8018bea:	68bb      	ldr	r3, [r7, #8]
 8018bec:	055b      	lsls	r3, r3, #21
 8018bee:	4313      	orrs	r3, r2
 8018bf0:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018bf2:	697b      	ldr	r3, [r7, #20]
 8018bf4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	041b      	lsls	r3, r3, #16
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	f023 030c 	bic.w	r3, r3, #12
 8018c06:	f043 0304 	orr.w	r3, r3, #4
 8018c0a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	f043 0301 	orr.w	r3, r3, #1
 8018c12:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018c14:	683b      	ldr	r3, [r7, #0]
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	4b10      	ldr	r3, [pc, #64]	@ (8018c5c <HAL_ETH_WritePHYRegister+0xa4>)
 8018c1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 8018c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8018c5c <HAL_ETH_WritePHYRegister+0xa4>)
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018c26:	f000 fea7 	bl	8019978 <HAL_GetTick>
 8018c2a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018c2c:	e009      	b.n	8018c42 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8018c2e:	f000 fea3 	bl	8019978 <HAL_GetTick>
 8018c32:	4602      	mov	r2, r0
 8018c34:	693b      	ldr	r3, [r7, #16]
 8018c36:	1ad3      	subs	r3, r2, r3
 8018c38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018c3c:	d901      	bls.n	8018c42 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 8018c3e:	2301      	movs	r3, #1
 8018c40:	e008      	b.n	8018c54 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018c4a:	f003 0301 	and.w	r3, r3, #1
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d1ed      	bne.n	8018c2e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8018c52:	2300      	movs	r3, #0
        }
 8018c54:	4618      	mov	r0, r3
 8018c56:	3718      	adds	r7, #24
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	40028000 	.word	0x40028000

08018c60 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018c60:	b480      	push	{r7}
 8018c62:	b083      	sub	sp, #12
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d101      	bne.n	8018c74 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018c70:	2301      	movs	r3, #1
 8018c72:	e1c3      	b.n	8018ffc <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	f003 020c 	and.w	r2, r3, #12
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	681b      	ldr	r3, [r3, #0]
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	f003 0310 	and.w	r3, r3, #16
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	bf14      	ite	ne
 8018c90:	2301      	movne	r3, #1
 8018c92:	2300      	moveq	r3, #0
 8018c94:	b2db      	uxtb	r3, r3
 8018c96:	461a      	mov	r2, r3
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	681b      	ldr	r3, [r3, #0]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	681b      	ldr	r3, [r3, #0]
 8018cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	bf0c      	ite	eq
 8018cba:	2301      	moveq	r3, #1
 8018cbc:	2300      	movne	r3, #0
 8018cbe:	b2db      	uxtb	r3, r3
 8018cc0:	461a      	mov	r2, r3
 8018cc2:	683b      	ldr	r3, [r7, #0]
 8018cc4:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	bf14      	ite	ne
 8018cd6:	2301      	movne	r3, #1
 8018cd8:	2300      	moveq	r3, #0
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	461a      	mov	r2, r3
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	bf0c      	ite	eq
 8018cf0:	2301      	moveq	r3, #1
 8018cf2:	2300      	movne	r3, #0
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	bf14      	ite	ne
 8018d0a:	2301      	movne	r3, #1
 8018d0c:	2300      	moveq	r3, #0
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	461a      	mov	r2, r3
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	bf14      	ite	ne
 8018d24:	2301      	movne	r3, #1
 8018d26:	2300      	moveq	r3, #0
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	461a      	mov	r2, r3
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	bf14      	ite	ne
 8018d5a:	2301      	movne	r3, #1
 8018d5c:	2300      	moveq	r3, #0
 8018d5e:	b2db      	uxtb	r3, r3
 8018d60:	461a      	mov	r2, r3
 8018d62:	683b      	ldr	r3, [r7, #0]
 8018d64:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	bf0c      	ite	eq
 8018d74:	2301      	moveq	r3, #1
 8018d76:	2300      	movne	r3, #0
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	461a      	mov	r2, r3
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	bf0c      	ite	eq
 8018d8e:	2301      	moveq	r3, #1
 8018d90:	2300      	movne	r3, #0
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	461a      	mov	r2, r3
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	bf14      	ite	ne
 8018da8:	2301      	movne	r3, #1
 8018daa:	2300      	moveq	r3, #0
 8018dac:	b2db      	uxtb	r3, r3
 8018dae:	461a      	mov	r2, r3
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	bf14      	ite	ne
 8018dc2:	2301      	movne	r3, #1
 8018dc4:	2300      	moveq	r3, #0
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	461a      	mov	r2, r3
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	bf14      	ite	ne
 8018ddc:	2301      	movne	r3, #1
 8018dde:	2300      	moveq	r3, #0
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	461a      	mov	r2, r3
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	bf14      	ite	ne
 8018df6:	2301      	movne	r3, #1
 8018df8:	2300      	moveq	r3, #0
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	461a      	mov	r2, r3
 8018dfe:	683b      	ldr	r3, [r7, #0]
 8018e00:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8018e0c:	683b      	ldr	r3, [r7, #0]
 8018e0e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	bf14      	ite	ne
 8018e1e:	2301      	movne	r3, #1
 8018e20:	2300      	moveq	r3, #0
 8018e22:	b2db      	uxtb	r3, r3
 8018e24:	461a      	mov	r2, r3
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8018e34:	683b      	ldr	r3, [r7, #0]
 8018e36:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	685b      	ldr	r3, [r3, #4]
 8018e3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	bf0c      	ite	eq
 8018e54:	2301      	moveq	r3, #1
 8018e56:	2300      	movne	r3, #0
 8018e58:	b2db      	uxtb	r3, r3
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	685b      	ldr	r3, [r3, #4]
 8018e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	bf14      	ite	ne
 8018e70:	2301      	movne	r3, #1
 8018e72:	2300      	moveq	r3, #0
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	461a      	mov	r2, r3
 8018e78:	683b      	ldr	r3, [r7, #0]
 8018e7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	685b      	ldr	r3, [r3, #4]
 8018e84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	bf14      	ite	ne
 8018e8c:	2301      	movne	r3, #1
 8018e8e:	2300      	moveq	r3, #0
 8018e90:	b2db      	uxtb	r3, r3
 8018e92:	461a      	mov	r2, r3
 8018e94:	683b      	ldr	r3, [r7, #0]
 8018e96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	685b      	ldr	r3, [r3, #4]
 8018ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	bf14      	ite	ne
 8018ea8:	2301      	movne	r3, #1
 8018eaa:	2300      	moveq	r3, #0
 8018eac:	b2db      	uxtb	r3, r3
 8018eae:	461a      	mov	r2, r3
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	685b      	ldr	r3, [r3, #4]
 8018ebc:	0e5b      	lsrs	r3, r3, #25
 8018ebe:	f003 021f 	and.w	r2, r3, #31
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	bf14      	ite	ne
 8018ed4:	2301      	movne	r3, #1
 8018ed6:	2300      	moveq	r3, #0
 8018ed8:	b2db      	uxtb	r3, r3
 8018eda:	461a      	mov	r2, r3
 8018edc:	683b      	ldr	r3, [r7, #0]
 8018ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	68db      	ldr	r3, [r3, #12]
 8018ee8:	f003 020f 	and.w	r2, r3, #15
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ef6:	f003 0302 	and.w	r3, r3, #2
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	bf14      	ite	ne
 8018efe:	2301      	movne	r3, #1
 8018f00:	2300      	moveq	r3, #0
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	461a      	mov	r2, r3
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	bf0c      	ite	eq
 8018f1a:	2301      	moveq	r3, #1
 8018f1c:	2300      	movne	r3, #0
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	461a      	mov	r2, r3
 8018f22:	683b      	ldr	r3, [r7, #0]
 8018f24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f3c:	0c1b      	lsrs	r3, r3, #16
 8018f3e:	b29a      	uxth	r2, r3
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018f4c:	f003 0301 	and.w	r3, r3, #1
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	bf14      	ite	ne
 8018f54:	2301      	movne	r3, #1
 8018f56:	2300      	moveq	r3, #0
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018f6a:	f003 0302 	and.w	r3, r3, #2
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	bf14      	ite	ne
 8018f72:	2301      	movne	r3, #1
 8018f74:	2300      	moveq	r3, #0
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	461a      	mov	r2, r3
 8018f7a:	683b      	ldr	r3, [r7, #0]
 8018f7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018f88:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018f98:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8018f9c:	683b      	ldr	r3, [r7, #0]
 8018f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018fa8:	f003 0308 	and.w	r3, r3, #8
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	bf14      	ite	ne
 8018fb0:	2301      	movne	r3, #1
 8018fb2:	2300      	moveq	r3, #0
 8018fb4:	b2db      	uxtb	r3, r3
 8018fb6:	461a      	mov	r2, r3
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018fc6:	f003 0310 	and.w	r3, r3, #16
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	bf14      	ite	ne
 8018fce:	2301      	movne	r3, #1
 8018fd0:	2300      	moveq	r3, #0
 8018fd2:	b2db      	uxtb	r3, r3
 8018fd4:	461a      	mov	r2, r3
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	bf0c      	ite	eq
 8018fec:	2301      	moveq	r3, #1
 8018fee:	2300      	movne	r3, #0
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	461a      	mov	r2, r3
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8018ffa:	2300      	movs	r3, #0
        }
 8018ffc:	4618      	mov	r0, r3
 8018ffe:	370c      	adds	r7, #12
 8019000:	46bd      	mov	sp, r7
 8019002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019006:	4770      	bx	lr

08019008 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019008:	b580      	push	{r7, lr}
 801900a:	b082      	sub	sp, #8
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	2b00      	cmp	r3, #0
 8019016:	d101      	bne.n	801901c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019018:	2301      	movs	r3, #1
 801901a:	e00a      	b.n	8019032 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019020:	2b10      	cmp	r3, #16
 8019022:	d105      	bne.n	8019030 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019024:	6839      	ldr	r1, [r7, #0]
 8019026:	6878      	ldr	r0, [r7, #4]
 8019028:	f000 f808 	bl	801903c <ETH_SetMACConfig>

                return HAL_OK;
 801902c:	2300      	movs	r3, #0
 801902e:	e000      	b.n	8019032 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019030:	2301      	movs	r3, #1
            }
        }
 8019032:	4618      	mov	r0, r3
 8019034:	3708      	adds	r7, #8
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
	...

0801903c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 801903c:	b480      	push	{r7}
 801903e:	b085      	sub	sp, #20
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019046:	683b      	ldr	r3, [r7, #0]
 8019048:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 801904e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	791b      	ldrb	r3, [r3, #4]
 8019054:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019056:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	7b1b      	ldrb	r3, [r3, #12]
 801905c:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 801905e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019060:	683b      	ldr	r3, [r7, #0]
 8019062:	7b5b      	ldrb	r3, [r3, #13]
 8019064:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019066:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	7b9b      	ldrb	r3, [r3, #14]
 801906c:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 801906e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	7bdb      	ldrb	r3, [r3, #15]
 8019074:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019076:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019078:	683a      	ldr	r2, [r7, #0]
 801907a:	7c12      	ldrb	r2, [r2, #16]
 801907c:	2a00      	cmp	r2, #0
 801907e:	d102      	bne.n	8019086 <ETH_SetMACConfig+0x4a>
 8019080:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019084:	e000      	b.n	8019088 <ETH_SetMACConfig+0x4c>
 8019086:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019088:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 801908a:	683a      	ldr	r2, [r7, #0]
 801908c:	7c52      	ldrb	r2, [r2, #17]
 801908e:	2a00      	cmp	r2, #0
 8019090:	d102      	bne.n	8019098 <ETH_SetMACConfig+0x5c>
 8019092:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019096:	e000      	b.n	801909a <ETH_SetMACConfig+0x5e>
 8019098:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 801909a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	7c9b      	ldrb	r3, [r3, #18]
 80190a0:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80190a2:	431a      	orrs	r2, r3
                          macconf->Speed |
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80190a8:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 80190ae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	7f1b      	ldrb	r3, [r3, #28]
 80190b4:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 80190b6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	7f5b      	ldrb	r3, [r3, #29]
 80190bc:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 80190be:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80190c0:	683a      	ldr	r2, [r7, #0]
 80190c2:	7f92      	ldrb	r2, [r2, #30]
 80190c4:	2a00      	cmp	r2, #0
 80190c6:	d102      	bne.n	80190ce <ETH_SetMACConfig+0x92>
 80190c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80190cc:	e000      	b.n	80190d0 <ETH_SetMACConfig+0x94>
 80190ce:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 80190d0:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	7fdb      	ldrb	r3, [r3, #31]
 80190d6:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 80190d8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 80190da:	683a      	ldr	r2, [r7, #0]
 80190dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80190e0:	2a00      	cmp	r2, #0
 80190e2:	d102      	bne.n	80190ea <ETH_SetMACConfig+0xae>
 80190e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80190e8:	e000      	b.n	80190ec <ETH_SetMACConfig+0xb0>
 80190ea:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 80190ec:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80190ee:	683b      	ldr	r3, [r7, #0]
 80190f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 80190f2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 80190f4:	683b      	ldr	r3, [r7, #0]
 80190f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80190fa:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 80190fc:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019102:	4313      	orrs	r3, r2
 8019104:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	4b56      	ldr	r3, [pc, #344]	@ (8019268 <ETH_SetMACConfig+0x22c>)
 801910e:	4013      	ands	r3, r2
 8019110:	687a      	ldr	r2, [r7, #4]
 8019112:	6812      	ldr	r2, [r2, #0]
 8019114:	68f9      	ldr	r1, [r7, #12]
 8019116:	430b      	orrs	r3, r1
 8019118:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801911e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019126:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019128:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019130:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019132:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019134:	683b      	ldr	r3, [r7, #0]
 8019136:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801913a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801913c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801913e:	683a      	ldr	r2, [r7, #0]
 8019140:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019144:	2a00      	cmp	r2, #0
 8019146:	d102      	bne.n	801914e <ETH_SetMACConfig+0x112>
 8019148:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801914c:	e000      	b.n	8019150 <ETH_SetMACConfig+0x114>
 801914e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019150:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019156:	4313      	orrs	r3, r2
 8019158:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	685a      	ldr	r2, [r3, #4]
 8019160:	4b42      	ldr	r3, [pc, #264]	@ (801926c <ETH_SetMACConfig+0x230>)
 8019162:	4013      	ands	r3, r2
 8019164:	687a      	ldr	r2, [r7, #4]
 8019166:	6812      	ldr	r2, [r2, #0]
 8019168:	68f9      	ldr	r1, [r7, #12]
 801916a:	430b      	orrs	r3, r1
 801916c:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019174:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 801917a:	4313      	orrs	r3, r2
 801917c:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	68da      	ldr	r2, [r3, #12]
 8019184:	4b3a      	ldr	r3, [pc, #232]	@ (8019270 <ETH_SetMACConfig+0x234>)
 8019186:	4013      	ands	r3, r2
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	6812      	ldr	r2, [r2, #0]
 801918c:	68f9      	ldr	r1, [r7, #12]
 801918e:	430b      	orrs	r3, r1
 8019190:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019192:	683b      	ldr	r3, [r7, #0]
 8019194:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019198:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801919e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 80191a0:	683a      	ldr	r2, [r7, #0]
 80191a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80191a6:	2a00      	cmp	r2, #0
 80191a8:	d101      	bne.n	80191ae <ETH_SetMACConfig+0x172>
 80191aa:	2280      	movs	r2, #128	@ 0x80
 80191ac:	e000      	b.n	80191b0 <ETH_SetMACConfig+0x174>
 80191ae:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 80191b0:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80191b6:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80191b8:	4313      	orrs	r3, r2
 80191ba:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80191c2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80191c6:	4013      	ands	r3, r2
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	6812      	ldr	r2, [r2, #0]
 80191cc:	68f9      	ldr	r1, [r7, #12]
 80191ce:	430b      	orrs	r3, r1
 80191d0:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80191d2:	683b      	ldr	r3, [r7, #0]
 80191d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80191d8:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80191e0:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 80191e2:	4313      	orrs	r3, r2
 80191e4:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80191ee:	f023 0103 	bic.w	r1, r3, #3
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	68fa      	ldr	r2, [r7, #12]
 80191f8:	430a      	orrs	r2, r1
 80191fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019206:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	430a      	orrs	r2, r1
 8019214:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019218:	683b      	ldr	r3, [r7, #0]
 801921a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019222:	2a00      	cmp	r2, #0
 8019224:	d101      	bne.n	801922a <ETH_SetMACConfig+0x1ee>
 8019226:	2240      	movs	r2, #64	@ 0x40
 8019228:	e000      	b.n	801922c <ETH_SetMACConfig+0x1f0>
 801922a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801922c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801922e:	683b      	ldr	r3, [r7, #0]
 8019230:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019234:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019236:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801923e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019240:	4313      	orrs	r3, r2
 8019242:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801924c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	68fa      	ldr	r2, [r7, #12]
 8019256:	430a      	orrs	r2, r1
 8019258:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801925c:	bf00      	nop
 801925e:	3714      	adds	r7, #20
 8019260:	46bd      	mov	sp, r7
 8019262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019266:	4770      	bx	lr
 8019268:	00048083 	.word	0x00048083
 801926c:	c0f88000 	.word	0xc0f88000
 8019270:	fffffef0 	.word	0xfffffef0

08019274 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8019274:	b480      	push	{r7}
 8019276:	b085      	sub	sp, #20
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019286:	681a      	ldr	r2, [r3, #0]
 8019288:	4b38      	ldr	r3, [pc, #224]	@ (801936c <ETH_SetDMAConfig+0xf8>)
 801928a:	4013      	ands	r3, r2
 801928c:	683a      	ldr	r2, [r7, #0]
 801928e:	6811      	ldr	r1, [r2, #0]
 8019290:	687a      	ldr	r2, [r7, #4]
 8019292:	6812      	ldr	r2, [r2, #0]
 8019294:	430b      	orrs	r3, r1
 8019296:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801929a:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	791b      	ldrb	r3, [r3, #4]
 80192a0:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80192a6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	7b1b      	ldrb	r3, [r3, #12]
 80192ac:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80192ae:	4313      	orrs	r3, r2
 80192b0:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	4b2c      	ldr	r3, [pc, #176]	@ (8019370 <ETH_SetDMAConfig+0xfc>)
 80192be:	4013      	ands	r3, r2
 80192c0:	687a      	ldr	r2, [r7, #4]
 80192c2:	6812      	ldr	r2, [r2, #0]
 80192c4:	68f9      	ldr	r1, [r7, #12]
 80192c6:	430b      	orrs	r3, r1
 80192c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192cc:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	7b5b      	ldrb	r3, [r3, #13]
 80192d2:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 80192d8:	4313      	orrs	r3, r2
 80192da:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80192e8:	4b22      	ldr	r3, [pc, #136]	@ (8019374 <ETH_SetDMAConfig+0x100>)
 80192ea:	4013      	ands	r3, r2
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	6812      	ldr	r2, [r2, #0]
 80192f0:	68f9      	ldr	r1, [r7, #12]
 80192f2:	430b      	orrs	r3, r1
 80192f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019300:	683b      	ldr	r3, [r7, #0]
 8019302:	7d1b      	ldrb	r3, [r3, #20]
 8019304:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019306:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	7f5b      	ldrb	r3, [r3, #29]
 801930c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801930e:	4313      	orrs	r3, r2
 8019310:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801931a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801931e:	4b16      	ldr	r3, [pc, #88]	@ (8019378 <ETH_SetDMAConfig+0x104>)
 8019320:	4013      	ands	r3, r2
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	6812      	ldr	r2, [r2, #0]
 8019326:	68f9      	ldr	r1, [r7, #12]
 8019328:	430b      	orrs	r3, r1
 801932a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801932e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	7f1b      	ldrb	r3, [r3, #28]
 8019336:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801933c:	4313      	orrs	r3, r2
 801933e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019348:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801934c:	4b0b      	ldr	r3, [pc, #44]	@ (801937c <ETH_SetDMAConfig+0x108>)
 801934e:	4013      	ands	r3, r2
 8019350:	687a      	ldr	r2, [r7, #4]
 8019352:	6812      	ldr	r2, [r2, #0]
 8019354:	68f9      	ldr	r1, [r7, #12]
 8019356:	430b      	orrs	r3, r1
 8019358:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801935c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8019360:	bf00      	nop
 8019362:	3714      	adds	r7, #20
 8019364:	46bd      	mov	sp, r7
 8019366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936a:	4770      	bx	lr
 801936c:	ffff87fd 	.word	0xffff87fd
 8019370:	ffff2ffe 	.word	0xffff2ffe
 8019374:	fffec000 	.word	0xfffec000
 8019378:	ffc0efef 	.word	0xffc0efef
 801937c:	7fc0ffff 	.word	0x7fc0ffff

08019380 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8019380:	b580      	push	{r7, lr}
 8019382:	b0a4      	sub	sp, #144	@ 0x90
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8019388:	2301      	movs	r3, #1
 801938a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801938e:	2300      	movs	r3, #0
 8019390:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8019392:	2300      	movs	r3, #0
 8019394:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8019398:	2300      	movs	r3, #0
 801939a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801939e:	2301      	movs	r3, #1
 80193a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80193a4:	2301      	movs	r3, #1
 80193a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 80193aa:	2301      	movs	r3, #1
 80193ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 80193b0:	2300      	movs	r3, #0
 80193b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80193b6:	2301      	movs	r3, #1
 80193b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80193bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80193c0:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80193c2:	2300      	movs	r3, #0
 80193c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80193c8:	2300      	movs	r3, #0
 80193ca:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80193cc:	2300      	movs	r3, #0
 80193ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80193d2:	2300      	movs	r3, #0
 80193d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 80193d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80193dc:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80193de:	2300      	movs	r3, #0
 80193e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80193e4:	2300      	movs	r3, #0
 80193e6:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 80193e8:	2301      	movs	r3, #1
 80193ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 80193ee:	2300      	movs	r3, #0
 80193f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 80193f4:	2300      	movs	r3, #0
 80193f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80193fa:	2300      	movs	r3, #0
 80193fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 80193fe:	2300      	movs	r3, #0
 8019400:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019402:	2300      	movs	r3, #0
 8019404:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019406:	2300      	movs	r3, #0
 8019408:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801940c:	2300      	movs	r3, #0
 801940e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019412:	2301      	movs	r3, #1
 8019414:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019418:	2320      	movs	r3, #32
 801941a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801941e:	2301      	movs	r3, #1
 8019420:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019424:	2300      	movs	r3, #0
 8019426:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801942a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801942e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019430:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019434:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019436:	2300      	movs	r3, #0
 8019438:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801943c:	2302      	movs	r3, #2
 801943e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8019442:	2300      	movs	r3, #0
 8019444:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8019448:	2300      	movs	r3, #0
 801944a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801944e:	2300      	movs	r3, #0
 8019450:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8019454:	2301      	movs	r3, #1
 8019456:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801945a:	2300      	movs	r3, #0
 801945c:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801945e:	2301      	movs	r3, #1
 8019460:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8019464:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019468:	4619      	mov	r1, r3
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f7ff fde6 	bl	801903c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8019470:	2301      	movs	r3, #1
 8019472:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8019474:	2301      	movs	r3, #1
 8019476:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8019478:	2300      	movs	r3, #0
 801947a:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801947c:	2300      	movs	r3, #0
 801947e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8019482:	2300      	movs	r3, #0
 8019484:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8019486:	2300      	movs	r3, #0
 8019488:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801948a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801948e:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8019490:	2300      	movs	r3, #0
 8019492:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8019494:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019498:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801949a:	2300      	movs	r3, #0
 801949c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 80194a0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80194a4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 80194a6:	f107 0308 	add.w	r3, r7, #8
 80194aa:	4619      	mov	r1, r3
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f7ff fee1 	bl	8019274 <ETH_SetDMAConfig>
        }
 80194b2:	bf00      	nop
 80194b4:	3790      	adds	r7, #144	@ 0x90
 80194b6:	46bd      	mov	sp, r7
 80194b8:	bd80      	pop	{r7, pc}
	...

080194bc <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 80194bc:	b580      	push	{r7, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80194cc:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80194d4:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 80194d6:	f003 fdf1 	bl	801d0bc <HAL_RCC_GetHCLKFreq>
 80194da:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	4a1e      	ldr	r2, [pc, #120]	@ (8019558 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80194e0:	4293      	cmp	r3, r2
 80194e2:	d908      	bls.n	80194f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	4a1d      	ldr	r2, [pc, #116]	@ (801955c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80194e8:	4293      	cmp	r3, r2
 80194ea:	d804      	bhi.n	80194f6 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80194f2:	60fb      	str	r3, [r7, #12]
 80194f4:	e027      	b.n	8019546 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 80194f6:	68bb      	ldr	r3, [r7, #8]
 80194f8:	4a18      	ldr	r2, [pc, #96]	@ (801955c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d908      	bls.n	8019510 <ETH_MAC_MDIO_ClkConfig+0x54>
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	4a17      	ldr	r2, [pc, #92]	@ (8019560 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019502:	4293      	cmp	r3, r2
 8019504:	d204      	bcs.n	8019510 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801950c:	60fb      	str	r3, [r7, #12]
 801950e:	e01a      	b.n	8019546 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019510:	68bb      	ldr	r3, [r7, #8]
 8019512:	4a13      	ldr	r2, [pc, #76]	@ (8019560 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019514:	4293      	cmp	r3, r2
 8019516:	d303      	bcc.n	8019520 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	4a12      	ldr	r2, [pc, #72]	@ (8019564 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801951c:	4293      	cmp	r3, r2
 801951e:	d911      	bls.n	8019544 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	4a10      	ldr	r2, [pc, #64]	@ (8019564 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d908      	bls.n	801953a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	4a0f      	ldr	r2, [pc, #60]	@ (8019568 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801952c:	4293      	cmp	r3, r2
 801952e:	d804      	bhi.n	801953a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019536:	60fb      	str	r3, [r7, #12]
 8019538:	e005      	b.n	8019546 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019540:	60fb      	str	r3, [r7, #12]
 8019542:	e000      	b.n	8019546 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019544:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	68fa      	ldr	r2, [r7, #12]
 801954c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8019550:	bf00      	nop
 8019552:	3710      	adds	r7, #16
 8019554:	46bd      	mov	sp, r7
 8019556:	bd80      	pop	{r7, pc}
 8019558:	01312cff 	.word	0x01312cff
 801955c:	02160ebf 	.word	0x02160ebf
 8019560:	03938700 	.word	0x03938700
 8019564:	05f5e0ff 	.word	0x05f5e0ff
 8019568:	08f0d17f 	.word	0x08f0d17f

0801956c <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801956c:	b480      	push	{r7}
 801956e:	b085      	sub	sp, #20
 8019570:	af00      	add	r7, sp, #0
 8019572:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019574:	2300      	movs	r3, #0
 8019576:	60fb      	str	r3, [r7, #12]
 8019578:	e01d      	b.n	80195b6 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	68d9      	ldr	r1, [r3, #12]
 801957e:	68fa      	ldr	r2, [r7, #12]
 8019580:	4613      	mov	r3, r2
 8019582:	005b      	lsls	r3, r3, #1
 8019584:	4413      	add	r3, r2
 8019586:	00db      	lsls	r3, r3, #3
 8019588:	440b      	add	r3, r1
 801958a:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	2200      	movs	r2, #0
 8019590:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	2200      	movs	r2, #0
 8019596:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8019598:	68bb      	ldr	r3, [r7, #8]
 801959a:	2200      	movs	r2, #0
 801959c:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	2200      	movs	r2, #0
 80195a2:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 80195a4:	68b9      	ldr	r1, [r7, #8]
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	68fa      	ldr	r2, [r7, #12]
 80195aa:	3206      	adds	r2, #6
 80195ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	3301      	adds	r3, #1
 80195b4:	60fb      	str	r3, [r7, #12]
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	2b03      	cmp	r3, #3
 80195ba:	d9de      	bls.n	801957a <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2200      	movs	r2, #0
 80195c0:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	2200      	movs	r2, #0
 80195c6:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195d0:	461a      	mov	r2, r3
 80195d2:	2303      	movs	r3, #3
 80195d4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	68da      	ldr	r2, [r3, #12]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195e4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	68da      	ldr	r2, [r3, #12]
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80195f4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 80195f8:	bf00      	nop
 80195fa:	3714      	adds	r7, #20
 80195fc:	46bd      	mov	sp, r7
 80195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019602:	4770      	bx	lr

08019604 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019604:	b480      	push	{r7}
 8019606:	b085      	sub	sp, #20
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801960c:	2300      	movs	r3, #0
 801960e:	60fb      	str	r3, [r7, #12]
 8019610:	e023      	b.n	801965a <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6919      	ldr	r1, [r3, #16]
 8019616:	68fa      	ldr	r2, [r7, #12]
 8019618:	4613      	mov	r3, r2
 801961a:	005b      	lsls	r3, r3, #1
 801961c:	4413      	add	r3, r2
 801961e:	00db      	lsls	r3, r3, #3
 8019620:	440b      	add	r3, r1
 8019622:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	2200      	movs	r2, #0
 8019628:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801962a:	68bb      	ldr	r3, [r7, #8]
 801962c:	2200      	movs	r2, #0
 801962e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	2200      	movs	r2, #0
 8019634:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019636:	68bb      	ldr	r3, [r7, #8]
 8019638:	2200      	movs	r2, #0
 801963a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801963c:	68bb      	ldr	r3, [r7, #8]
 801963e:	2200      	movs	r2, #0
 8019640:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	2200      	movs	r2, #0
 8019646:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019648:	68b9      	ldr	r1, [r7, #8]
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	68fa      	ldr	r2, [r7, #12]
 801964e:	320c      	adds	r2, #12
 8019650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019654:	68fb      	ldr	r3, [r7, #12]
 8019656:	3301      	adds	r3, #1
 8019658:	60fb      	str	r3, [r7, #12]
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	2b03      	cmp	r3, #3
 801965e:	d9d8      	bls.n	8019612 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2200      	movs	r2, #0
 8019664:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	2200      	movs	r2, #0
 801966a:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2200      	movs	r2, #0
 8019670:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	2200      	movs	r2, #0
 8019676:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	2200      	movs	r2, #0
 801967c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019686:	461a      	mov	r2, r3
 8019688:	2303      	movs	r3, #3
 801968a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	691a      	ldr	r2, [r3, #16]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801969a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	691b      	ldr	r3, [r3, #16]
 80196a2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196ae:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 80196b2:	bf00      	nop
 80196b4:	3714      	adds	r7, #20
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr
	...

080196c0 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b086      	sub	sp, #24
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196cc:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80196ce:	e032      	b.n	8019736 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	697a      	ldr	r2, [r7, #20]
 80196d4:	3206      	adds	r2, #6
 80196d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80196da:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 80196dc:	693b      	ldr	r3, [r7, #16]
 80196de:	68db      	ldr	r3, [r3, #12]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	db31      	blt.n	8019748 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 80196e4:	693b      	ldr	r3, [r7, #16]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d02d      	beq.n	801974c <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 80196f0:	68f8      	ldr	r0, [r7, #12]
 80196f2:	f7f0 fbd2 	bl	8009e9a <pxPacketBuffer_to_NetworkBuffer>
 80196f6:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 80196f8:	68bb      	ldr	r3, [r7, #8]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d002      	beq.n	8019704 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80196fe:	68b8      	ldr	r0, [r7, #8]
 8019700:	f7fd faa2 	bl	8016c48 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019704:	693b      	ldr	r3, [r7, #16]
 8019706:	2200      	movs	r2, #0
 8019708:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	3301      	adds	r3, #1
 801970e:	617b      	str	r3, [r7, #20]
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	2b03      	cmp	r3, #3
 8019714:	d902      	bls.n	801971c <ETH_Clear_Tx_Descriptors+0x5c>
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	3b04      	subs	r3, #4
 801971a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	697a      	ldr	r2, [r7, #20]
 8019720:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019722:	f3bf 8f4f 	dsb	sy
}
 8019726:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019728:	4b0b      	ldr	r3, [pc, #44]	@ (8019758 <ETH_Clear_Tx_Descriptors+0x98>)
 801972a:	6818      	ldr	r0, [r3, #0]
 801972c:	2300      	movs	r3, #0
 801972e:	2200      	movs	r2, #0
 8019730:	2100      	movs	r1, #0
 8019732:	f7e9 fcff 	bl	8003134 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019736:	4b08      	ldr	r3, [pc, #32]	@ (8019758 <ETH_Clear_Tx_Descriptors+0x98>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	4618      	mov	r0, r3
 801973c:	f7e9 ffa0 	bl	8003680 <uxQueueMessagesWaiting>
 8019740:	4603      	mov	r3, r0
 8019742:	2b04      	cmp	r3, #4
 8019744:	d1c4      	bne.n	80196d0 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019746:	e002      	b.n	801974e <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019748:	bf00      	nop
 801974a:	e000      	b.n	801974e <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801974c:	bf00      	nop
        }
 801974e:	bf00      	nop
 8019750:	3718      	adds	r7, #24
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
 8019756:	bf00      	nop
 8019758:	200022ac 	.word	0x200022ac

0801975c <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801975c:	b480      	push	{r7}
 801975e:	b08b      	sub	sp, #44	@ 0x2c
 8019760:	af00      	add	r7, sp, #0
 8019762:	60f8      	str	r0, [r7, #12]
 8019764:	60b9      	str	r1, [r7, #8]
 8019766:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	3318      	adds	r3, #24
 801976c:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801976e:	6a3b      	ldr	r3, [r7, #32]
 8019770:	691b      	ldr	r3, [r3, #16]
 8019772:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8019774:	6a3b      	ldr	r3, [r7, #32]
 8019776:	69fa      	ldr	r2, [r7, #28]
 8019778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801977c:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	689b      	ldr	r3, [r3, #8]
 8019782:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	2200      	movs	r2, #0
 8019788:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801978a:	69bb      	ldr	r3, [r7, #24]
 801978c:	68db      	ldr	r3, [r3, #12]
 801978e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8019790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019792:	2b00      	cmp	r3, #0
 8019794:	da01      	bge.n	801979a <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8019796:	2302      	movs	r3, #2
 8019798:	e05c      	b.n	8019854 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801979a:	697b      	ldr	r3, [r7, #20]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	461a      	mov	r2, r3
 80197a0:	69bb      	ldr	r3, [r7, #24]
 80197a2:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 80197a4:	69bb      	ldr	r3, [r7, #24]
 80197a6:	689a      	ldr	r2, [r3, #8]
 80197a8:	4b2d      	ldr	r3, [pc, #180]	@ (8019860 <ETH_Prepare_Tx_Descriptors+0x104>)
 80197aa:	4013      	ands	r3, r2
 80197ac:	697a      	ldr	r2, [r7, #20]
 80197ae:	6852      	ldr	r2, [r2, #4]
 80197b0:	431a      	orrs	r2, r3
 80197b2:	69bb      	ldr	r3, [r7, #24]
 80197b4:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 80197b6:	69bb      	ldr	r3, [r7, #24]
 80197b8:	2200      	movs	r2, #0
 80197ba:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 80197bc:	69bb      	ldr	r3, [r7, #24]
 80197be:	689a      	ldr	r2, [r3, #8]
 80197c0:	4b28      	ldr	r3, [pc, #160]	@ (8019864 <ETH_Prepare_Tx_Descriptors+0x108>)
 80197c2:	4013      	ands	r3, r2
 80197c4:	69ba      	ldr	r2, [r7, #24]
 80197c6:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 80197c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80197ca:	4b27      	ldr	r3, [pc, #156]	@ (8019868 <ETH_Prepare_Tx_Descriptors+0x10c>)
 80197cc:	4013      	ands	r3, r2
 80197ce:	68ba      	ldr	r2, [r7, #8]
 80197d0:	6852      	ldr	r2, [r2, #4]
 80197d2:	4313      	orrs	r3, r2
 80197d4:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	f003 0301 	and.w	r3, r3, #1
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d006      	beq.n	80197f0 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 80197e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80197e8:	68bb      	ldr	r3, [r7, #8]
 80197ea:	695b      	ldr	r3, [r3, #20]
 80197ec:	4313      	orrs	r3, r2
 80197ee:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	f003 0320 	and.w	r3, r3, #32
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d006      	beq.n	801980a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 80197fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019802:	68bb      	ldr	r3, [r7, #8]
 8019804:	691b      	ldr	r3, [r3, #16]
 8019806:	4313      	orrs	r3, r2
 8019808:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801980c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019810:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019814:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019818:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801981c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019820:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d006      	beq.n	8019836 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019828:	69bb      	ldr	r3, [r7, #24]
 801982a:	689b      	ldr	r3, [r3, #8]
 801982c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019830:	69bb      	ldr	r3, [r7, #24]
 8019832:	609a      	str	r2, [r3, #8]
 8019834:	e005      	b.n	8019842 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019836:	69bb      	ldr	r3, [r7, #24]
 8019838:	689b      	ldr	r3, [r3, #8]
 801983a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801983e:	69bb      	ldr	r3, [r7, #24]
 8019840:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019842:	69bb      	ldr	r3, [r7, #24]
 8019844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019846:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019848:	69bb      	ldr	r3, [r7, #24]
 801984a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801984c:	f3bf 8f4f 	dsb	sy
}
 8019850:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8019852:	2300      	movs	r3, #0
        }
 8019854:	4618      	mov	r0, r3
 8019856:	372c      	adds	r7, #44	@ 0x2c
 8019858:	46bd      	mov	sp, r7
 801985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985e:	4770      	bx	lr
 8019860:	ffffc000 	.word	0xffffc000
 8019864:	c000ffff 	.word	0xc000ffff
 8019868:	ffff8000 	.word	0xffff8000

0801986c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b082      	sub	sp, #8
 8019870:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019872:	2003      	movs	r0, #3
 8019874:	f000 f9a0 	bl	8019bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019878:	f003 faa6 	bl	801cdc8 <HAL_RCC_GetSysClockFreq>
 801987c:	4602      	mov	r2, r0
 801987e:	4b15      	ldr	r3, [pc, #84]	@ (80198d4 <HAL_Init+0x68>)
 8019880:	699b      	ldr	r3, [r3, #24]
 8019882:	0a1b      	lsrs	r3, r3, #8
 8019884:	f003 030f 	and.w	r3, r3, #15
 8019888:	4913      	ldr	r1, [pc, #76]	@ (80198d8 <HAL_Init+0x6c>)
 801988a:	5ccb      	ldrb	r3, [r1, r3]
 801988c:	f003 031f 	and.w	r3, r3, #31
 8019890:	fa22 f303 	lsr.w	r3, r2, r3
 8019894:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019896:	4b0f      	ldr	r3, [pc, #60]	@ (80198d4 <HAL_Init+0x68>)
 8019898:	699b      	ldr	r3, [r3, #24]
 801989a:	f003 030f 	and.w	r3, r3, #15
 801989e:	4a0e      	ldr	r2, [pc, #56]	@ (80198d8 <HAL_Init+0x6c>)
 80198a0:	5cd3      	ldrb	r3, [r2, r3]
 80198a2:	f003 031f 	and.w	r3, r3, #31
 80198a6:	687a      	ldr	r2, [r7, #4]
 80198a8:	fa22 f303 	lsr.w	r3, r2, r3
 80198ac:	4a0b      	ldr	r2, [pc, #44]	@ (80198dc <HAL_Init+0x70>)
 80198ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80198b0:	4a0b      	ldr	r2, [pc, #44]	@ (80198e0 <HAL_Init+0x74>)
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80198b6:	200f      	movs	r0, #15
 80198b8:	f000 f814 	bl	80198e4 <HAL_InitTick>
 80198bc:	4603      	mov	r3, r0
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d001      	beq.n	80198c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80198c2:	2301      	movs	r3, #1
 80198c4:	e002      	b.n	80198cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80198c6:	f7e8 f963 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80198ca:	2300      	movs	r3, #0
}
 80198cc:	4618      	mov	r0, r3
 80198ce:	3708      	adds	r7, #8
 80198d0:	46bd      	mov	sp, r7
 80198d2:	bd80      	pop	{r7, pc}
 80198d4:	58024400 	.word	0x58024400
 80198d8:	08026fec 	.word	0x08026fec
 80198dc:	20000004 	.word	0x20000004
 80198e0:	20000000 	.word	0x20000000

080198e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b082      	sub	sp, #8
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80198ec:	4b15      	ldr	r3, [pc, #84]	@ (8019944 <HAL_InitTick+0x60>)
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d101      	bne.n	80198f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80198f4:	2301      	movs	r3, #1
 80198f6:	e021      	b.n	801993c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80198f8:	4b13      	ldr	r3, [pc, #76]	@ (8019948 <HAL_InitTick+0x64>)
 80198fa:	681a      	ldr	r2, [r3, #0]
 80198fc:	4b11      	ldr	r3, [pc, #68]	@ (8019944 <HAL_InitTick+0x60>)
 80198fe:	781b      	ldrb	r3, [r3, #0]
 8019900:	4619      	mov	r1, r3
 8019902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019906:	fbb3 f3f1 	udiv	r3, r3, r1
 801990a:	fbb2 f3f3 	udiv	r3, r2, r3
 801990e:	4618      	mov	r0, r3
 8019910:	f000 f985 	bl	8019c1e <HAL_SYSTICK_Config>
 8019914:	4603      	mov	r3, r0
 8019916:	2b00      	cmp	r3, #0
 8019918:	d001      	beq.n	801991e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801991a:	2301      	movs	r3, #1
 801991c:	e00e      	b.n	801993c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2b0f      	cmp	r3, #15
 8019922:	d80a      	bhi.n	801993a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019924:	2200      	movs	r2, #0
 8019926:	6879      	ldr	r1, [r7, #4]
 8019928:	f04f 30ff 	mov.w	r0, #4294967295
 801992c:	f000 f94f 	bl	8019bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019930:	4a06      	ldr	r2, [pc, #24]	@ (801994c <HAL_InitTick+0x68>)
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019936:	2300      	movs	r3, #0
 8019938:	e000      	b.n	801993c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801993a:	2301      	movs	r3, #1
}
 801993c:	4618      	mov	r0, r3
 801993e:	3708      	adds	r7, #8
 8019940:	46bd      	mov	sp, r7
 8019942:	bd80      	pop	{r7, pc}
 8019944:	20000024 	.word	0x20000024
 8019948:	20000000 	.word	0x20000000
 801994c:	20000020 	.word	0x20000020

08019950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019950:	b480      	push	{r7}
 8019952:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019954:	4b06      	ldr	r3, [pc, #24]	@ (8019970 <HAL_IncTick+0x20>)
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	461a      	mov	r2, r3
 801995a:	4b06      	ldr	r3, [pc, #24]	@ (8019974 <HAL_IncTick+0x24>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	4413      	add	r3, r2
 8019960:	4a04      	ldr	r2, [pc, #16]	@ (8019974 <HAL_IncTick+0x24>)
 8019962:	6013      	str	r3, [r2, #0]
}
 8019964:	bf00      	nop
 8019966:	46bd      	mov	sp, r7
 8019968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801996c:	4770      	bx	lr
 801996e:	bf00      	nop
 8019970:	20000024 	.word	0x20000024
 8019974:	200023b8 	.word	0x200023b8

08019978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019978:	b480      	push	{r7}
 801997a:	af00      	add	r7, sp, #0
  return uwTick;
 801997c:	4b03      	ldr	r3, [pc, #12]	@ (801998c <HAL_GetTick+0x14>)
 801997e:	681b      	ldr	r3, [r3, #0]
}
 8019980:	4618      	mov	r0, r3
 8019982:	46bd      	mov	sp, r7
 8019984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019988:	4770      	bx	lr
 801998a:	bf00      	nop
 801998c:	200023b8 	.word	0x200023b8

08019990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b084      	sub	sp, #16
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019998:	f7ff ffee 	bl	8019978 <HAL_GetTick>
 801999c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199a8:	d005      	beq.n	80199b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80199aa:	4b0a      	ldr	r3, [pc, #40]	@ (80199d4 <HAL_Delay+0x44>)
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	461a      	mov	r2, r3
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	4413      	add	r3, r2
 80199b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80199b6:	bf00      	nop
 80199b8:	f7ff ffde 	bl	8019978 <HAL_GetTick>
 80199bc:	4602      	mov	r2, r0
 80199be:	68bb      	ldr	r3, [r7, #8]
 80199c0:	1ad3      	subs	r3, r2, r3
 80199c2:	68fa      	ldr	r2, [r7, #12]
 80199c4:	429a      	cmp	r2, r3
 80199c6:	d8f7      	bhi.n	80199b8 <HAL_Delay+0x28>
  {
  }
}
 80199c8:	bf00      	nop
 80199ca:	bf00      	nop
 80199cc:	3710      	adds	r7, #16
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	20000024 	.word	0x20000024

080199d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80199d8:	b480      	push	{r7}
 80199da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80199dc:	4b03      	ldr	r3, [pc, #12]	@ (80199ec <HAL_GetREVID+0x14>)
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	0c1b      	lsrs	r3, r3, #16
}
 80199e2:	4618      	mov	r0, r3
 80199e4:	46bd      	mov	sp, r7
 80199e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ea:	4770      	bx	lr
 80199ec:	5c001000 	.word	0x5c001000

080199f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80199f0:	b480      	push	{r7}
 80199f2:	b083      	sub	sp, #12
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80199f8:	4b06      	ldr	r3, [pc, #24]	@ (8019a14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80199fa:	685b      	ldr	r3, [r3, #4]
 80199fc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019a00:	4904      	ldr	r1, [pc, #16]	@ (8019a14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	4313      	orrs	r3, r2
 8019a06:	604b      	str	r3, [r1, #4]
}
 8019a08:	bf00      	nop
 8019a0a:	370c      	adds	r7, #12
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a12:	4770      	bx	lr
 8019a14:	58000400 	.word	0x58000400

08019a18 <__NVIC_SetPriorityGrouping>:
{
 8019a18:	b480      	push	{r7}
 8019a1a:	b085      	sub	sp, #20
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f003 0307 	and.w	r3, r3, #7
 8019a26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019a28:	4b0b      	ldr	r3, [pc, #44]	@ (8019a58 <__NVIC_SetPriorityGrouping+0x40>)
 8019a2a:	68db      	ldr	r3, [r3, #12]
 8019a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019a2e:	68ba      	ldr	r2, [r7, #8]
 8019a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019a34:	4013      	ands	r3, r2
 8019a36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019a40:	4b06      	ldr	r3, [pc, #24]	@ (8019a5c <__NVIC_SetPriorityGrouping+0x44>)
 8019a42:	4313      	orrs	r3, r2
 8019a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019a46:	4a04      	ldr	r2, [pc, #16]	@ (8019a58 <__NVIC_SetPriorityGrouping+0x40>)
 8019a48:	68bb      	ldr	r3, [r7, #8]
 8019a4a:	60d3      	str	r3, [r2, #12]
}
 8019a4c:	bf00      	nop
 8019a4e:	3714      	adds	r7, #20
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr
 8019a58:	e000ed00 	.word	0xe000ed00
 8019a5c:	05fa0000 	.word	0x05fa0000

08019a60 <__NVIC_GetPriorityGrouping>:
{
 8019a60:	b480      	push	{r7}
 8019a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019a64:	4b04      	ldr	r3, [pc, #16]	@ (8019a78 <__NVIC_GetPriorityGrouping+0x18>)
 8019a66:	68db      	ldr	r3, [r3, #12]
 8019a68:	0a1b      	lsrs	r3, r3, #8
 8019a6a:	f003 0307 	and.w	r3, r3, #7
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	46bd      	mov	sp, r7
 8019a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a76:	4770      	bx	lr
 8019a78:	e000ed00 	.word	0xe000ed00

08019a7c <__NVIC_EnableIRQ>:
{
 8019a7c:	b480      	push	{r7}
 8019a7e:	b083      	sub	sp, #12
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	4603      	mov	r3, r0
 8019a84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	db0b      	blt.n	8019aa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019a8e:	88fb      	ldrh	r3, [r7, #6]
 8019a90:	f003 021f 	and.w	r2, r3, #31
 8019a94:	4907      	ldr	r1, [pc, #28]	@ (8019ab4 <__NVIC_EnableIRQ+0x38>)
 8019a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019a9a:	095b      	lsrs	r3, r3, #5
 8019a9c:	2001      	movs	r0, #1
 8019a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8019aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019aa6:	bf00      	nop
 8019aa8:	370c      	adds	r7, #12
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab0:	4770      	bx	lr
 8019ab2:	bf00      	nop
 8019ab4:	e000e100 	.word	0xe000e100

08019ab8 <__NVIC_SetPriority>:
{
 8019ab8:	b480      	push	{r7}
 8019aba:	b083      	sub	sp, #12
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	4603      	mov	r3, r0
 8019ac0:	6039      	str	r1, [r7, #0]
 8019ac2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	db0a      	blt.n	8019ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019acc:	683b      	ldr	r3, [r7, #0]
 8019ace:	b2da      	uxtb	r2, r3
 8019ad0:	490c      	ldr	r1, [pc, #48]	@ (8019b04 <__NVIC_SetPriority+0x4c>)
 8019ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019ad6:	0112      	lsls	r2, r2, #4
 8019ad8:	b2d2      	uxtb	r2, r2
 8019ada:	440b      	add	r3, r1
 8019adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8019ae0:	e00a      	b.n	8019af8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019ae2:	683b      	ldr	r3, [r7, #0]
 8019ae4:	b2da      	uxtb	r2, r3
 8019ae6:	4908      	ldr	r1, [pc, #32]	@ (8019b08 <__NVIC_SetPriority+0x50>)
 8019ae8:	88fb      	ldrh	r3, [r7, #6]
 8019aea:	f003 030f 	and.w	r3, r3, #15
 8019aee:	3b04      	subs	r3, #4
 8019af0:	0112      	lsls	r2, r2, #4
 8019af2:	b2d2      	uxtb	r2, r2
 8019af4:	440b      	add	r3, r1
 8019af6:	761a      	strb	r2, [r3, #24]
}
 8019af8:	bf00      	nop
 8019afa:	370c      	adds	r7, #12
 8019afc:	46bd      	mov	sp, r7
 8019afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b02:	4770      	bx	lr
 8019b04:	e000e100 	.word	0xe000e100
 8019b08:	e000ed00 	.word	0xe000ed00

08019b0c <NVIC_EncodePriority>:
{
 8019b0c:	b480      	push	{r7}
 8019b0e:	b089      	sub	sp, #36	@ 0x24
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	60f8      	str	r0, [r7, #12]
 8019b14:	60b9      	str	r1, [r7, #8]
 8019b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	f003 0307 	and.w	r3, r3, #7
 8019b1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	f1c3 0307 	rsb	r3, r3, #7
 8019b26:	2b04      	cmp	r3, #4
 8019b28:	bf28      	it	cs
 8019b2a:	2304      	movcs	r3, #4
 8019b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019b2e:	69fb      	ldr	r3, [r7, #28]
 8019b30:	3304      	adds	r3, #4
 8019b32:	2b06      	cmp	r3, #6
 8019b34:	d902      	bls.n	8019b3c <NVIC_EncodePriority+0x30>
 8019b36:	69fb      	ldr	r3, [r7, #28]
 8019b38:	3b03      	subs	r3, #3
 8019b3a:	e000      	b.n	8019b3e <NVIC_EncodePriority+0x32>
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019b40:	f04f 32ff 	mov.w	r2, #4294967295
 8019b44:	69bb      	ldr	r3, [r7, #24]
 8019b46:	fa02 f303 	lsl.w	r3, r2, r3
 8019b4a:	43da      	mvns	r2, r3
 8019b4c:	68bb      	ldr	r3, [r7, #8]
 8019b4e:	401a      	ands	r2, r3
 8019b50:	697b      	ldr	r3, [r7, #20]
 8019b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019b54:	f04f 31ff 	mov.w	r1, #4294967295
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8019b5e:	43d9      	mvns	r1, r3
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019b64:	4313      	orrs	r3, r2
}
 8019b66:	4618      	mov	r0, r3
 8019b68:	3724      	adds	r7, #36	@ 0x24
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b70:	4770      	bx	lr
	...

08019b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019b74:	b580      	push	{r7, lr}
 8019b76:	b082      	sub	sp, #8
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	3b01      	subs	r3, #1
 8019b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019b84:	d301      	bcc.n	8019b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019b86:	2301      	movs	r3, #1
 8019b88:	e00f      	b.n	8019baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8019bb4 <SysTick_Config+0x40>)
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	3b01      	subs	r3, #1
 8019b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019b92:	210f      	movs	r1, #15
 8019b94:	f04f 30ff 	mov.w	r0, #4294967295
 8019b98:	f7ff ff8e 	bl	8019ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019b9c:	4b05      	ldr	r3, [pc, #20]	@ (8019bb4 <SysTick_Config+0x40>)
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019ba2:	4b04      	ldr	r3, [pc, #16]	@ (8019bb4 <SysTick_Config+0x40>)
 8019ba4:	2207      	movs	r2, #7
 8019ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019ba8:	2300      	movs	r3, #0
}
 8019baa:	4618      	mov	r0, r3
 8019bac:	3708      	adds	r7, #8
 8019bae:	46bd      	mov	sp, r7
 8019bb0:	bd80      	pop	{r7, pc}
 8019bb2:	bf00      	nop
 8019bb4:	e000e010 	.word	0xe000e010

08019bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b082      	sub	sp, #8
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019bc0:	6878      	ldr	r0, [r7, #4]
 8019bc2:	f7ff ff29 	bl	8019a18 <__NVIC_SetPriorityGrouping>
}
 8019bc6:	bf00      	nop
 8019bc8:	3708      	adds	r7, #8
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}

08019bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019bce:	b580      	push	{r7, lr}
 8019bd0:	b086      	sub	sp, #24
 8019bd2:	af00      	add	r7, sp, #0
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	60b9      	str	r1, [r7, #8]
 8019bd8:	607a      	str	r2, [r7, #4]
 8019bda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019bdc:	f7ff ff40 	bl	8019a60 <__NVIC_GetPriorityGrouping>
 8019be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	68b9      	ldr	r1, [r7, #8]
 8019be6:	6978      	ldr	r0, [r7, #20]
 8019be8:	f7ff ff90 	bl	8019b0c <NVIC_EncodePriority>
 8019bec:	4602      	mov	r2, r0
 8019bee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019bf2:	4611      	mov	r1, r2
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	f7ff ff5f 	bl	8019ab8 <__NVIC_SetPriority>
}
 8019bfa:	bf00      	nop
 8019bfc:	3718      	adds	r7, #24
 8019bfe:	46bd      	mov	sp, r7
 8019c00:	bd80      	pop	{r7, pc}

08019c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019c02:	b580      	push	{r7, lr}
 8019c04:	b082      	sub	sp, #8
 8019c06:	af00      	add	r7, sp, #0
 8019c08:	4603      	mov	r3, r0
 8019c0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019c10:	4618      	mov	r0, r3
 8019c12:	f7ff ff33 	bl	8019a7c <__NVIC_EnableIRQ>
}
 8019c16:	bf00      	nop
 8019c18:	3708      	adds	r7, #8
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd80      	pop	{r7, pc}

08019c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019c1e:	b580      	push	{r7, lr}
 8019c20:	b082      	sub	sp, #8
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7ff ffa4 	bl	8019b74 <SysTick_Config>
 8019c2c:	4603      	mov	r3, r0
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3708      	adds	r7, #8
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}
	...

08019c38 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019c38:	b480      	push	{r7}
 8019c3a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019c3c:	f3bf 8f5f 	dmb	sy
}
 8019c40:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019c42:	4b07      	ldr	r3, [pc, #28]	@ (8019c60 <HAL_MPU_Disable+0x28>)
 8019c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c46:	4a06      	ldr	r2, [pc, #24]	@ (8019c60 <HAL_MPU_Disable+0x28>)
 8019c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019c4c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019c4e:	4b05      	ldr	r3, [pc, #20]	@ (8019c64 <HAL_MPU_Disable+0x2c>)
 8019c50:	2200      	movs	r2, #0
 8019c52:	605a      	str	r2, [r3, #4]
}
 8019c54:	bf00      	nop
 8019c56:	46bd      	mov	sp, r7
 8019c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c5c:	4770      	bx	lr
 8019c5e:	bf00      	nop
 8019c60:	e000ed00 	.word	0xe000ed00
 8019c64:	e000ed90 	.word	0xe000ed90

08019c68 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019c68:	b480      	push	{r7}
 8019c6a:	b083      	sub	sp, #12
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019c70:	4a0b      	ldr	r2, [pc, #44]	@ (8019ca0 <HAL_MPU_Enable+0x38>)
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	f043 0301 	orr.w	r3, r3, #1
 8019c78:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8019ca4 <HAL_MPU_Enable+0x3c>)
 8019c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c7e:	4a09      	ldr	r2, [pc, #36]	@ (8019ca4 <HAL_MPU_Enable+0x3c>)
 8019c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019c84:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019c86:	f3bf 8f4f 	dsb	sy
}
 8019c8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019c8c:	f3bf 8f6f 	isb	sy
}
 8019c90:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019c92:	bf00      	nop
 8019c94:	370c      	adds	r7, #12
 8019c96:	46bd      	mov	sp, r7
 8019c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9c:	4770      	bx	lr
 8019c9e:	bf00      	nop
 8019ca0:	e000ed90 	.word	0xe000ed90
 8019ca4:	e000ed00 	.word	0xe000ed00

08019ca8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019ca8:	b480      	push	{r7}
 8019caa:	b083      	sub	sp, #12
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	785a      	ldrb	r2, [r3, #1]
 8019cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8019d24 <HAL_MPU_ConfigRegion+0x7c>)
 8019cb6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8019d24 <HAL_MPU_ConfigRegion+0x7c>)
 8019cba:	691b      	ldr	r3, [r3, #16]
 8019cbc:	4a19      	ldr	r2, [pc, #100]	@ (8019d24 <HAL_MPU_ConfigRegion+0x7c>)
 8019cbe:	f023 0301 	bic.w	r3, r3, #1
 8019cc2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8019cc4:	4a17      	ldr	r2, [pc, #92]	@ (8019d24 <HAL_MPU_ConfigRegion+0x7c>)
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	7b1b      	ldrb	r3, [r3, #12]
 8019cd0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	7adb      	ldrb	r3, [r3, #11]
 8019cd6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	7a9b      	ldrb	r3, [r3, #10]
 8019cde:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	7b5b      	ldrb	r3, [r3, #13]
 8019ce6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019ce8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	7b9b      	ldrb	r3, [r3, #14]
 8019cee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019cf0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	7bdb      	ldrb	r3, [r3, #15]
 8019cf6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019cf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	7a5b      	ldrb	r3, [r3, #9]
 8019cfe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019d00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	7a1b      	ldrb	r3, [r3, #8]
 8019d06:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019d08:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	7812      	ldrb	r2, [r2, #0]
 8019d0e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019d10:	4a04      	ldr	r2, [pc, #16]	@ (8019d24 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019d12:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019d14:	6113      	str	r3, [r2, #16]
}
 8019d16:	bf00      	nop
 8019d18:	370c      	adds	r7, #12
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d20:	4770      	bx	lr
 8019d22:	bf00      	nop
 8019d24:	e000ed90 	.word	0xe000ed90

08019d28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b086      	sub	sp, #24
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019d30:	f7ff fe22 	bl	8019978 <HAL_GetTick>
 8019d34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d101      	bne.n	8019d40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	e316      	b.n	801a36e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	4a66      	ldr	r2, [pc, #408]	@ (8019ee0 <HAL_DMA_Init+0x1b8>)
 8019d46:	4293      	cmp	r3, r2
 8019d48:	d04a      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	4a65      	ldr	r2, [pc, #404]	@ (8019ee4 <HAL_DMA_Init+0x1bc>)
 8019d50:	4293      	cmp	r3, r2
 8019d52:	d045      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	4a63      	ldr	r2, [pc, #396]	@ (8019ee8 <HAL_DMA_Init+0x1c0>)
 8019d5a:	4293      	cmp	r3, r2
 8019d5c:	d040      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	4a62      	ldr	r2, [pc, #392]	@ (8019eec <HAL_DMA_Init+0x1c4>)
 8019d64:	4293      	cmp	r3, r2
 8019d66:	d03b      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	4a60      	ldr	r2, [pc, #384]	@ (8019ef0 <HAL_DMA_Init+0x1c8>)
 8019d6e:	4293      	cmp	r3, r2
 8019d70:	d036      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	4a5f      	ldr	r2, [pc, #380]	@ (8019ef4 <HAL_DMA_Init+0x1cc>)
 8019d78:	4293      	cmp	r3, r2
 8019d7a:	d031      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	4a5d      	ldr	r2, [pc, #372]	@ (8019ef8 <HAL_DMA_Init+0x1d0>)
 8019d82:	4293      	cmp	r3, r2
 8019d84:	d02c      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8019efc <HAL_DMA_Init+0x1d4>)
 8019d8c:	4293      	cmp	r3, r2
 8019d8e:	d027      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	681b      	ldr	r3, [r3, #0]
 8019d94:	4a5a      	ldr	r2, [pc, #360]	@ (8019f00 <HAL_DMA_Init+0x1d8>)
 8019d96:	4293      	cmp	r3, r2
 8019d98:	d022      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	4a59      	ldr	r2, [pc, #356]	@ (8019f04 <HAL_DMA_Init+0x1dc>)
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d01d      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	4a57      	ldr	r2, [pc, #348]	@ (8019f08 <HAL_DMA_Init+0x1e0>)
 8019daa:	4293      	cmp	r3, r2
 8019dac:	d018      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	4a56      	ldr	r2, [pc, #344]	@ (8019f0c <HAL_DMA_Init+0x1e4>)
 8019db4:	4293      	cmp	r3, r2
 8019db6:	d013      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	4a54      	ldr	r2, [pc, #336]	@ (8019f10 <HAL_DMA_Init+0x1e8>)
 8019dbe:	4293      	cmp	r3, r2
 8019dc0:	d00e      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4a53      	ldr	r2, [pc, #332]	@ (8019f14 <HAL_DMA_Init+0x1ec>)
 8019dc8:	4293      	cmp	r3, r2
 8019dca:	d009      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	4a51      	ldr	r2, [pc, #324]	@ (8019f18 <HAL_DMA_Init+0x1f0>)
 8019dd2:	4293      	cmp	r3, r2
 8019dd4:	d004      	beq.n	8019de0 <HAL_DMA_Init+0xb8>
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	4a50      	ldr	r2, [pc, #320]	@ (8019f1c <HAL_DMA_Init+0x1f4>)
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	d101      	bne.n	8019de4 <HAL_DMA_Init+0xbc>
 8019de0:	2301      	movs	r3, #1
 8019de2:	e000      	b.n	8019de6 <HAL_DMA_Init+0xbe>
 8019de4:	2300      	movs	r3, #0
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	f000 813b 	beq.w	801a062 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	2202      	movs	r2, #2
 8019df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2200      	movs	r2, #0
 8019df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	4a37      	ldr	r2, [pc, #220]	@ (8019ee0 <HAL_DMA_Init+0x1b8>)
 8019e02:	4293      	cmp	r3, r2
 8019e04:	d04a      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	4a36      	ldr	r2, [pc, #216]	@ (8019ee4 <HAL_DMA_Init+0x1bc>)
 8019e0c:	4293      	cmp	r3, r2
 8019e0e:	d045      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	4a34      	ldr	r2, [pc, #208]	@ (8019ee8 <HAL_DMA_Init+0x1c0>)
 8019e16:	4293      	cmp	r3, r2
 8019e18:	d040      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4a33      	ldr	r2, [pc, #204]	@ (8019eec <HAL_DMA_Init+0x1c4>)
 8019e20:	4293      	cmp	r3, r2
 8019e22:	d03b      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	4a31      	ldr	r2, [pc, #196]	@ (8019ef0 <HAL_DMA_Init+0x1c8>)
 8019e2a:	4293      	cmp	r3, r2
 8019e2c:	d036      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	4a30      	ldr	r2, [pc, #192]	@ (8019ef4 <HAL_DMA_Init+0x1cc>)
 8019e34:	4293      	cmp	r3, r2
 8019e36:	d031      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	4a2e      	ldr	r2, [pc, #184]	@ (8019ef8 <HAL_DMA_Init+0x1d0>)
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	d02c      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	4a2d      	ldr	r2, [pc, #180]	@ (8019efc <HAL_DMA_Init+0x1d4>)
 8019e48:	4293      	cmp	r3, r2
 8019e4a:	d027      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	4a2b      	ldr	r2, [pc, #172]	@ (8019f00 <HAL_DMA_Init+0x1d8>)
 8019e52:	4293      	cmp	r3, r2
 8019e54:	d022      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8019f04 <HAL_DMA_Init+0x1dc>)
 8019e5c:	4293      	cmp	r3, r2
 8019e5e:	d01d      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4a28      	ldr	r2, [pc, #160]	@ (8019f08 <HAL_DMA_Init+0x1e0>)
 8019e66:	4293      	cmp	r3, r2
 8019e68:	d018      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4a27      	ldr	r2, [pc, #156]	@ (8019f0c <HAL_DMA_Init+0x1e4>)
 8019e70:	4293      	cmp	r3, r2
 8019e72:	d013      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	681b      	ldr	r3, [r3, #0]
 8019e78:	4a25      	ldr	r2, [pc, #148]	@ (8019f10 <HAL_DMA_Init+0x1e8>)
 8019e7a:	4293      	cmp	r3, r2
 8019e7c:	d00e      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	4a24      	ldr	r2, [pc, #144]	@ (8019f14 <HAL_DMA_Init+0x1ec>)
 8019e84:	4293      	cmp	r3, r2
 8019e86:	d009      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	4a22      	ldr	r2, [pc, #136]	@ (8019f18 <HAL_DMA_Init+0x1f0>)
 8019e8e:	4293      	cmp	r3, r2
 8019e90:	d004      	beq.n	8019e9c <HAL_DMA_Init+0x174>
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	4a21      	ldr	r2, [pc, #132]	@ (8019f1c <HAL_DMA_Init+0x1f4>)
 8019e98:	4293      	cmp	r3, r2
 8019e9a:	d108      	bne.n	8019eae <HAL_DMA_Init+0x186>
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	681a      	ldr	r2, [r3, #0]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	f022 0201 	bic.w	r2, r2, #1
 8019eaa:	601a      	str	r2, [r3, #0]
 8019eac:	e007      	b.n	8019ebe <HAL_DMA_Init+0x196>
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f022 0201 	bic.w	r2, r2, #1
 8019ebc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019ebe:	e02f      	b.n	8019f20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019ec0:	f7ff fd5a 	bl	8019978 <HAL_GetTick>
 8019ec4:	4602      	mov	r2, r0
 8019ec6:	693b      	ldr	r3, [r7, #16]
 8019ec8:	1ad3      	subs	r3, r2, r3
 8019eca:	2b05      	cmp	r3, #5
 8019ecc:	d928      	bls.n	8019f20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2220      	movs	r2, #32
 8019ed2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	2203      	movs	r2, #3
 8019ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8019edc:	2301      	movs	r3, #1
 8019ede:	e246      	b.n	801a36e <HAL_DMA_Init+0x646>
 8019ee0:	40020010 	.word	0x40020010
 8019ee4:	40020028 	.word	0x40020028
 8019ee8:	40020040 	.word	0x40020040
 8019eec:	40020058 	.word	0x40020058
 8019ef0:	40020070 	.word	0x40020070
 8019ef4:	40020088 	.word	0x40020088
 8019ef8:	400200a0 	.word	0x400200a0
 8019efc:	400200b8 	.word	0x400200b8
 8019f00:	40020410 	.word	0x40020410
 8019f04:	40020428 	.word	0x40020428
 8019f08:	40020440 	.word	0x40020440
 8019f0c:	40020458 	.word	0x40020458
 8019f10:	40020470 	.word	0x40020470
 8019f14:	40020488 	.word	0x40020488
 8019f18:	400204a0 	.word	0x400204a0
 8019f1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	f003 0301 	and.w	r3, r3, #1
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d1c8      	bne.n	8019ec0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8019f36:	697a      	ldr	r2, [r7, #20]
 8019f38:	4b83      	ldr	r3, [pc, #524]	@ (801a148 <HAL_DMA_Init+0x420>)
 8019f3a:	4013      	ands	r3, r2
 8019f3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8019f46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	691b      	ldr	r3, [r3, #16]
 8019f4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	699b      	ldr	r3, [r3, #24]
 8019f58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6a1b      	ldr	r3, [r3, #32]
 8019f64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8019f66:	697a      	ldr	r2, [r7, #20]
 8019f68:	4313      	orrs	r3, r2
 8019f6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f70:	2b04      	cmp	r3, #4
 8019f72:	d107      	bne.n	8019f84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f7c:	4313      	orrs	r3, r2
 8019f7e:	697a      	ldr	r2, [r7, #20]
 8019f80:	4313      	orrs	r3, r2
 8019f82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8019f84:	4b71      	ldr	r3, [pc, #452]	@ (801a14c <HAL_DMA_Init+0x424>)
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	4b71      	ldr	r3, [pc, #452]	@ (801a150 <HAL_DMA_Init+0x428>)
 8019f8a:	4013      	ands	r3, r2
 8019f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019f90:	d328      	bcc.n	8019fe4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	685b      	ldr	r3, [r3, #4]
 8019f96:	2b28      	cmp	r3, #40	@ 0x28
 8019f98:	d903      	bls.n	8019fa2 <HAL_DMA_Init+0x27a>
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	685b      	ldr	r3, [r3, #4]
 8019f9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019fa0:	d917      	bls.n	8019fd2 <HAL_DMA_Init+0x2aa>
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	685b      	ldr	r3, [r3, #4]
 8019fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fa8:	d903      	bls.n	8019fb2 <HAL_DMA_Init+0x28a>
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	2b42      	cmp	r3, #66	@ 0x42
 8019fb0:	d90f      	bls.n	8019fd2 <HAL_DMA_Init+0x2aa>
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	2b46      	cmp	r3, #70	@ 0x46
 8019fb8:	d903      	bls.n	8019fc2 <HAL_DMA_Init+0x29a>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	685b      	ldr	r3, [r3, #4]
 8019fbe:	2b48      	cmp	r3, #72	@ 0x48
 8019fc0:	d907      	bls.n	8019fd2 <HAL_DMA_Init+0x2aa>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	685b      	ldr	r3, [r3, #4]
 8019fc6:	2b4e      	cmp	r3, #78	@ 0x4e
 8019fc8:	d905      	bls.n	8019fd6 <HAL_DMA_Init+0x2ae>
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	2b52      	cmp	r3, #82	@ 0x52
 8019fd0:	d801      	bhi.n	8019fd6 <HAL_DMA_Init+0x2ae>
 8019fd2:	2301      	movs	r3, #1
 8019fd4:	e000      	b.n	8019fd8 <HAL_DMA_Init+0x2b0>
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d003      	beq.n	8019fe4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019fdc:	697b      	ldr	r3, [r7, #20]
 8019fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019fe2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	697a      	ldr	r2, [r7, #20]
 8019fea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	695b      	ldr	r3, [r3, #20]
 8019ff2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	f023 0307 	bic.w	r3, r3, #7
 8019ffa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a000:	697a      	ldr	r2, [r7, #20]
 801a002:	4313      	orrs	r3, r2
 801a004:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a00a:	2b04      	cmp	r3, #4
 801a00c:	d117      	bne.n	801a03e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a012:	697a      	ldr	r2, [r7, #20]
 801a014:	4313      	orrs	r3, r2
 801a016:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d00e      	beq.n	801a03e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	f001 fbff 	bl	801b824 <DMA_CheckFifoParam>
 801a026:	4603      	mov	r3, r0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d008      	beq.n	801a03e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	2240      	movs	r2, #64	@ 0x40
 801a030:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2201      	movs	r2, #1
 801a036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801a03a:	2301      	movs	r3, #1
 801a03c:	e197      	b.n	801a36e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	697a      	ldr	r2, [r7, #20]
 801a044:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	f001 fb3a 	bl	801b6c0 <DMA_CalcBaseAndBitshift>
 801a04c:	4603      	mov	r3, r0
 801a04e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a054:	f003 031f 	and.w	r3, r3, #31
 801a058:	223f      	movs	r2, #63	@ 0x3f
 801a05a:	409a      	lsls	r2, r3
 801a05c:	68bb      	ldr	r3, [r7, #8]
 801a05e:	609a      	str	r2, [r3, #8]
 801a060:	e0cd      	b.n	801a1fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	4a3b      	ldr	r2, [pc, #236]	@ (801a154 <HAL_DMA_Init+0x42c>)
 801a068:	4293      	cmp	r3, r2
 801a06a:	d022      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	4a39      	ldr	r2, [pc, #228]	@ (801a158 <HAL_DMA_Init+0x430>)
 801a072:	4293      	cmp	r3, r2
 801a074:	d01d      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	4a38      	ldr	r2, [pc, #224]	@ (801a15c <HAL_DMA_Init+0x434>)
 801a07c:	4293      	cmp	r3, r2
 801a07e:	d018      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	4a36      	ldr	r2, [pc, #216]	@ (801a160 <HAL_DMA_Init+0x438>)
 801a086:	4293      	cmp	r3, r2
 801a088:	d013      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	4a35      	ldr	r2, [pc, #212]	@ (801a164 <HAL_DMA_Init+0x43c>)
 801a090:	4293      	cmp	r3, r2
 801a092:	d00e      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	4a33      	ldr	r2, [pc, #204]	@ (801a168 <HAL_DMA_Init+0x440>)
 801a09a:	4293      	cmp	r3, r2
 801a09c:	d009      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	4a32      	ldr	r2, [pc, #200]	@ (801a16c <HAL_DMA_Init+0x444>)
 801a0a4:	4293      	cmp	r3, r2
 801a0a6:	d004      	beq.n	801a0b2 <HAL_DMA_Init+0x38a>
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	4a30      	ldr	r2, [pc, #192]	@ (801a170 <HAL_DMA_Init+0x448>)
 801a0ae:	4293      	cmp	r3, r2
 801a0b0:	d101      	bne.n	801a0b6 <HAL_DMA_Init+0x38e>
 801a0b2:	2301      	movs	r3, #1
 801a0b4:	e000      	b.n	801a0b8 <HAL_DMA_Init+0x390>
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	f000 8097 	beq.w	801a1ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	4a24      	ldr	r2, [pc, #144]	@ (801a154 <HAL_DMA_Init+0x42c>)
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	d021      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	4a22      	ldr	r2, [pc, #136]	@ (801a158 <HAL_DMA_Init+0x430>)
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d01c      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	4a21      	ldr	r2, [pc, #132]	@ (801a15c <HAL_DMA_Init+0x434>)
 801a0d8:	4293      	cmp	r3, r2
 801a0da:	d017      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	4a1f      	ldr	r2, [pc, #124]	@ (801a160 <HAL_DMA_Init+0x438>)
 801a0e2:	4293      	cmp	r3, r2
 801a0e4:	d012      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	4a1e      	ldr	r2, [pc, #120]	@ (801a164 <HAL_DMA_Init+0x43c>)
 801a0ec:	4293      	cmp	r3, r2
 801a0ee:	d00d      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	4a1c      	ldr	r2, [pc, #112]	@ (801a168 <HAL_DMA_Init+0x440>)
 801a0f6:	4293      	cmp	r3, r2
 801a0f8:	d008      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	4a1b      	ldr	r2, [pc, #108]	@ (801a16c <HAL_DMA_Init+0x444>)
 801a100:	4293      	cmp	r3, r2
 801a102:	d003      	beq.n	801a10c <HAL_DMA_Init+0x3e4>
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	4a19      	ldr	r2, [pc, #100]	@ (801a170 <HAL_DMA_Init+0x448>)
 801a10a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	2202      	movs	r2, #2
 801a110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2200      	movs	r2, #0
 801a118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a124:	697a      	ldr	r2, [r7, #20]
 801a126:	4b13      	ldr	r3, [pc, #76]	@ (801a174 <HAL_DMA_Init+0x44c>)
 801a128:	4013      	ands	r3, r2
 801a12a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	689b      	ldr	r3, [r3, #8]
 801a130:	2b40      	cmp	r3, #64	@ 0x40
 801a132:	d021      	beq.n	801a178 <HAL_DMA_Init+0x450>
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	689b      	ldr	r3, [r3, #8]
 801a138:	2b80      	cmp	r3, #128	@ 0x80
 801a13a:	d102      	bne.n	801a142 <HAL_DMA_Init+0x41a>
 801a13c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a140:	e01b      	b.n	801a17a <HAL_DMA_Init+0x452>
 801a142:	2300      	movs	r3, #0
 801a144:	e019      	b.n	801a17a <HAL_DMA_Init+0x452>
 801a146:	bf00      	nop
 801a148:	fe10803f 	.word	0xfe10803f
 801a14c:	5c001000 	.word	0x5c001000
 801a150:	ffff0000 	.word	0xffff0000
 801a154:	58025408 	.word	0x58025408
 801a158:	5802541c 	.word	0x5802541c
 801a15c:	58025430 	.word	0x58025430
 801a160:	58025444 	.word	0x58025444
 801a164:	58025458 	.word	0x58025458
 801a168:	5802546c 	.word	0x5802546c
 801a16c:	58025480 	.word	0x58025480
 801a170:	58025494 	.word	0x58025494
 801a174:	fffe000f 	.word	0xfffe000f
 801a178:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a17a:	687a      	ldr	r2, [r7, #4]
 801a17c:	68d2      	ldr	r2, [r2, #12]
 801a17e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	691b      	ldr	r3, [r3, #16]
 801a186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	695b      	ldr	r3, [r3, #20]
 801a18e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	699b      	ldr	r3, [r3, #24]
 801a196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	69db      	ldr	r3, [r3, #28]
 801a19e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a1a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	6a1b      	ldr	r3, [r3, #32]
 801a1a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a1a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a1aa:	697a      	ldr	r2, [r7, #20]
 801a1ac:	4313      	orrs	r3, r2
 801a1ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	697a      	ldr	r2, [r7, #20]
 801a1b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	461a      	mov	r2, r3
 801a1be:	4b6e      	ldr	r3, [pc, #440]	@ (801a378 <HAL_DMA_Init+0x650>)
 801a1c0:	4413      	add	r3, r2
 801a1c2:	4a6e      	ldr	r2, [pc, #440]	@ (801a37c <HAL_DMA_Init+0x654>)
 801a1c4:	fba2 2303 	umull	r2, r3, r2, r3
 801a1c8:	091b      	lsrs	r3, r3, #4
 801a1ca:	009a      	lsls	r2, r3, #2
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a1d0:	6878      	ldr	r0, [r7, #4]
 801a1d2:	f001 fa75 	bl	801b6c0 <DMA_CalcBaseAndBitshift>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a1de:	f003 031f 	and.w	r3, r3, #31
 801a1e2:	2201      	movs	r2, #1
 801a1e4:	409a      	lsls	r2, r3
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	605a      	str	r2, [r3, #4]
 801a1ea:	e008      	b.n	801a1fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	2240      	movs	r2, #64	@ 0x40
 801a1f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	2203      	movs	r2, #3
 801a1f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a1fa:	2301      	movs	r3, #1
 801a1fc:	e0b7      	b.n	801a36e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	681b      	ldr	r3, [r3, #0]
 801a202:	4a5f      	ldr	r2, [pc, #380]	@ (801a380 <HAL_DMA_Init+0x658>)
 801a204:	4293      	cmp	r3, r2
 801a206:	d072      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	4a5d      	ldr	r2, [pc, #372]	@ (801a384 <HAL_DMA_Init+0x65c>)
 801a20e:	4293      	cmp	r3, r2
 801a210:	d06d      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4a5c      	ldr	r2, [pc, #368]	@ (801a388 <HAL_DMA_Init+0x660>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d068      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	4a5a      	ldr	r2, [pc, #360]	@ (801a38c <HAL_DMA_Init+0x664>)
 801a222:	4293      	cmp	r3, r2
 801a224:	d063      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	4a59      	ldr	r2, [pc, #356]	@ (801a390 <HAL_DMA_Init+0x668>)
 801a22c:	4293      	cmp	r3, r2
 801a22e:	d05e      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	4a57      	ldr	r2, [pc, #348]	@ (801a394 <HAL_DMA_Init+0x66c>)
 801a236:	4293      	cmp	r3, r2
 801a238:	d059      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a56      	ldr	r2, [pc, #344]	@ (801a398 <HAL_DMA_Init+0x670>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d054      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	4a54      	ldr	r2, [pc, #336]	@ (801a39c <HAL_DMA_Init+0x674>)
 801a24a:	4293      	cmp	r3, r2
 801a24c:	d04f      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	4a53      	ldr	r2, [pc, #332]	@ (801a3a0 <HAL_DMA_Init+0x678>)
 801a254:	4293      	cmp	r3, r2
 801a256:	d04a      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	4a51      	ldr	r2, [pc, #324]	@ (801a3a4 <HAL_DMA_Init+0x67c>)
 801a25e:	4293      	cmp	r3, r2
 801a260:	d045      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4a50      	ldr	r2, [pc, #320]	@ (801a3a8 <HAL_DMA_Init+0x680>)
 801a268:	4293      	cmp	r3, r2
 801a26a:	d040      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	4a4e      	ldr	r2, [pc, #312]	@ (801a3ac <HAL_DMA_Init+0x684>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d03b      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4a4d      	ldr	r2, [pc, #308]	@ (801a3b0 <HAL_DMA_Init+0x688>)
 801a27c:	4293      	cmp	r3, r2
 801a27e:	d036      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4a4b      	ldr	r2, [pc, #300]	@ (801a3b4 <HAL_DMA_Init+0x68c>)
 801a286:	4293      	cmp	r3, r2
 801a288:	d031      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4a4a      	ldr	r2, [pc, #296]	@ (801a3b8 <HAL_DMA_Init+0x690>)
 801a290:	4293      	cmp	r3, r2
 801a292:	d02c      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	4a48      	ldr	r2, [pc, #288]	@ (801a3bc <HAL_DMA_Init+0x694>)
 801a29a:	4293      	cmp	r3, r2
 801a29c:	d027      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	4a47      	ldr	r2, [pc, #284]	@ (801a3c0 <HAL_DMA_Init+0x698>)
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	d022      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	4a45      	ldr	r2, [pc, #276]	@ (801a3c4 <HAL_DMA_Init+0x69c>)
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	d01d      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4a44      	ldr	r2, [pc, #272]	@ (801a3c8 <HAL_DMA_Init+0x6a0>)
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d018      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a42      	ldr	r2, [pc, #264]	@ (801a3cc <HAL_DMA_Init+0x6a4>)
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	d013      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	4a41      	ldr	r2, [pc, #260]	@ (801a3d0 <HAL_DMA_Init+0x6a8>)
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d00e      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a3f      	ldr	r2, [pc, #252]	@ (801a3d4 <HAL_DMA_Init+0x6ac>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d009      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	4a3e      	ldr	r2, [pc, #248]	@ (801a3d8 <HAL_DMA_Init+0x6b0>)
 801a2e0:	4293      	cmp	r3, r2
 801a2e2:	d004      	beq.n	801a2ee <HAL_DMA_Init+0x5c6>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4a3c      	ldr	r2, [pc, #240]	@ (801a3dc <HAL_DMA_Init+0x6b4>)
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d101      	bne.n	801a2f2 <HAL_DMA_Init+0x5ca>
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	e000      	b.n	801a2f4 <HAL_DMA_Init+0x5cc>
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d032      	beq.n	801a35e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f001 fb0f 	bl	801b91c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	689b      	ldr	r3, [r3, #8]
 801a302:	2b80      	cmp	r3, #128	@ 0x80
 801a304:	d102      	bne.n	801a30c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	2200      	movs	r2, #0
 801a30a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	685a      	ldr	r2, [r3, #4]
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a314:	b2d2      	uxtb	r2, r2
 801a316:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a31c:	687a      	ldr	r2, [r7, #4]
 801a31e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a320:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	685b      	ldr	r3, [r3, #4]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d010      	beq.n	801a34c <HAL_DMA_Init+0x624>
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	685b      	ldr	r3, [r3, #4]
 801a32e:	2b08      	cmp	r3, #8
 801a330:	d80c      	bhi.n	801a34c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f001 fb8c 	bl	801ba50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a33c:	2200      	movs	r2, #0
 801a33e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a344:	687a      	ldr	r2, [r7, #4]
 801a346:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a348:	605a      	str	r2, [r3, #4]
 801a34a:	e008      	b.n	801a35e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2200      	movs	r2, #0
 801a350:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	2200      	movs	r2, #0
 801a356:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	2200      	movs	r2, #0
 801a35c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	2200      	movs	r2, #0
 801a362:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2201      	movs	r2, #1
 801a368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801a36c:	2300      	movs	r3, #0
}
 801a36e:	4618      	mov	r0, r3
 801a370:	3718      	adds	r7, #24
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}
 801a376:	bf00      	nop
 801a378:	a7fdabf8 	.word	0xa7fdabf8
 801a37c:	cccccccd 	.word	0xcccccccd
 801a380:	40020010 	.word	0x40020010
 801a384:	40020028 	.word	0x40020028
 801a388:	40020040 	.word	0x40020040
 801a38c:	40020058 	.word	0x40020058
 801a390:	40020070 	.word	0x40020070
 801a394:	40020088 	.word	0x40020088
 801a398:	400200a0 	.word	0x400200a0
 801a39c:	400200b8 	.word	0x400200b8
 801a3a0:	40020410 	.word	0x40020410
 801a3a4:	40020428 	.word	0x40020428
 801a3a8:	40020440 	.word	0x40020440
 801a3ac:	40020458 	.word	0x40020458
 801a3b0:	40020470 	.word	0x40020470
 801a3b4:	40020488 	.word	0x40020488
 801a3b8:	400204a0 	.word	0x400204a0
 801a3bc:	400204b8 	.word	0x400204b8
 801a3c0:	58025408 	.word	0x58025408
 801a3c4:	5802541c 	.word	0x5802541c
 801a3c8:	58025430 	.word	0x58025430
 801a3cc:	58025444 	.word	0x58025444
 801a3d0:	58025458 	.word	0x58025458
 801a3d4:	5802546c 	.word	0x5802546c
 801a3d8:	58025480 	.word	0x58025480
 801a3dc:	58025494 	.word	0x58025494

0801a3e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b084      	sub	sp, #16
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d101      	bne.n	801a3f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801a3ee:	2301      	movs	r3, #1
 801a3f0:	e237      	b.n	801a862 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a3f8:	b2db      	uxtb	r3, r3
 801a3fa:	2b02      	cmp	r3, #2
 801a3fc:	d004      	beq.n	801a408 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	2280      	movs	r2, #128	@ 0x80
 801a402:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801a404:	2301      	movs	r3, #1
 801a406:	e22c      	b.n	801a862 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	4a5c      	ldr	r2, [pc, #368]	@ (801a580 <HAL_DMA_Abort_IT+0x1a0>)
 801a40e:	4293      	cmp	r3, r2
 801a410:	d04a      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	4a5b      	ldr	r2, [pc, #364]	@ (801a584 <HAL_DMA_Abort_IT+0x1a4>)
 801a418:	4293      	cmp	r3, r2
 801a41a:	d045      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	4a59      	ldr	r2, [pc, #356]	@ (801a588 <HAL_DMA_Abort_IT+0x1a8>)
 801a422:	4293      	cmp	r3, r2
 801a424:	d040      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	4a58      	ldr	r2, [pc, #352]	@ (801a58c <HAL_DMA_Abort_IT+0x1ac>)
 801a42c:	4293      	cmp	r3, r2
 801a42e:	d03b      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	4a56      	ldr	r2, [pc, #344]	@ (801a590 <HAL_DMA_Abort_IT+0x1b0>)
 801a436:	4293      	cmp	r3, r2
 801a438:	d036      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	4a55      	ldr	r2, [pc, #340]	@ (801a594 <HAL_DMA_Abort_IT+0x1b4>)
 801a440:	4293      	cmp	r3, r2
 801a442:	d031      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	681b      	ldr	r3, [r3, #0]
 801a448:	4a53      	ldr	r2, [pc, #332]	@ (801a598 <HAL_DMA_Abort_IT+0x1b8>)
 801a44a:	4293      	cmp	r3, r2
 801a44c:	d02c      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	4a52      	ldr	r2, [pc, #328]	@ (801a59c <HAL_DMA_Abort_IT+0x1bc>)
 801a454:	4293      	cmp	r3, r2
 801a456:	d027      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	4a50      	ldr	r2, [pc, #320]	@ (801a5a0 <HAL_DMA_Abort_IT+0x1c0>)
 801a45e:	4293      	cmp	r3, r2
 801a460:	d022      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	4a4f      	ldr	r2, [pc, #316]	@ (801a5a4 <HAL_DMA_Abort_IT+0x1c4>)
 801a468:	4293      	cmp	r3, r2
 801a46a:	d01d      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4a4d      	ldr	r2, [pc, #308]	@ (801a5a8 <HAL_DMA_Abort_IT+0x1c8>)
 801a472:	4293      	cmp	r3, r2
 801a474:	d018      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	4a4c      	ldr	r2, [pc, #304]	@ (801a5ac <HAL_DMA_Abort_IT+0x1cc>)
 801a47c:	4293      	cmp	r3, r2
 801a47e:	d013      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	4a4a      	ldr	r2, [pc, #296]	@ (801a5b0 <HAL_DMA_Abort_IT+0x1d0>)
 801a486:	4293      	cmp	r3, r2
 801a488:	d00e      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	4a49      	ldr	r2, [pc, #292]	@ (801a5b4 <HAL_DMA_Abort_IT+0x1d4>)
 801a490:	4293      	cmp	r3, r2
 801a492:	d009      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	4a47      	ldr	r2, [pc, #284]	@ (801a5b8 <HAL_DMA_Abort_IT+0x1d8>)
 801a49a:	4293      	cmp	r3, r2
 801a49c:	d004      	beq.n	801a4a8 <HAL_DMA_Abort_IT+0xc8>
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	4a46      	ldr	r2, [pc, #280]	@ (801a5bc <HAL_DMA_Abort_IT+0x1dc>)
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	d101      	bne.n	801a4ac <HAL_DMA_Abort_IT+0xcc>
 801a4a8:	2301      	movs	r3, #1
 801a4aa:	e000      	b.n	801a4ae <HAL_DMA_Abort_IT+0xce>
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	f000 8086 	beq.w	801a5c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	2204      	movs	r2, #4
 801a4b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	4a2f      	ldr	r2, [pc, #188]	@ (801a580 <HAL_DMA_Abort_IT+0x1a0>)
 801a4c2:	4293      	cmp	r3, r2
 801a4c4:	d04a      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4a2e      	ldr	r2, [pc, #184]	@ (801a584 <HAL_DMA_Abort_IT+0x1a4>)
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	d045      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	4a2c      	ldr	r2, [pc, #176]	@ (801a588 <HAL_DMA_Abort_IT+0x1a8>)
 801a4d6:	4293      	cmp	r3, r2
 801a4d8:	d040      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	4a2b      	ldr	r2, [pc, #172]	@ (801a58c <HAL_DMA_Abort_IT+0x1ac>)
 801a4e0:	4293      	cmp	r3, r2
 801a4e2:	d03b      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	4a29      	ldr	r2, [pc, #164]	@ (801a590 <HAL_DMA_Abort_IT+0x1b0>)
 801a4ea:	4293      	cmp	r3, r2
 801a4ec:	d036      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	4a28      	ldr	r2, [pc, #160]	@ (801a594 <HAL_DMA_Abort_IT+0x1b4>)
 801a4f4:	4293      	cmp	r3, r2
 801a4f6:	d031      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	4a26      	ldr	r2, [pc, #152]	@ (801a598 <HAL_DMA_Abort_IT+0x1b8>)
 801a4fe:	4293      	cmp	r3, r2
 801a500:	d02c      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	4a25      	ldr	r2, [pc, #148]	@ (801a59c <HAL_DMA_Abort_IT+0x1bc>)
 801a508:	4293      	cmp	r3, r2
 801a50a:	d027      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	4a23      	ldr	r2, [pc, #140]	@ (801a5a0 <HAL_DMA_Abort_IT+0x1c0>)
 801a512:	4293      	cmp	r3, r2
 801a514:	d022      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	4a22      	ldr	r2, [pc, #136]	@ (801a5a4 <HAL_DMA_Abort_IT+0x1c4>)
 801a51c:	4293      	cmp	r3, r2
 801a51e:	d01d      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a520:	687b      	ldr	r3, [r7, #4]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	4a20      	ldr	r2, [pc, #128]	@ (801a5a8 <HAL_DMA_Abort_IT+0x1c8>)
 801a526:	4293      	cmp	r3, r2
 801a528:	d018      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	4a1f      	ldr	r2, [pc, #124]	@ (801a5ac <HAL_DMA_Abort_IT+0x1cc>)
 801a530:	4293      	cmp	r3, r2
 801a532:	d013      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	4a1d      	ldr	r2, [pc, #116]	@ (801a5b0 <HAL_DMA_Abort_IT+0x1d0>)
 801a53a:	4293      	cmp	r3, r2
 801a53c:	d00e      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	4a1c      	ldr	r2, [pc, #112]	@ (801a5b4 <HAL_DMA_Abort_IT+0x1d4>)
 801a544:	4293      	cmp	r3, r2
 801a546:	d009      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	4a1a      	ldr	r2, [pc, #104]	@ (801a5b8 <HAL_DMA_Abort_IT+0x1d8>)
 801a54e:	4293      	cmp	r3, r2
 801a550:	d004      	beq.n	801a55c <HAL_DMA_Abort_IT+0x17c>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	4a19      	ldr	r2, [pc, #100]	@ (801a5bc <HAL_DMA_Abort_IT+0x1dc>)
 801a558:	4293      	cmp	r3, r2
 801a55a:	d108      	bne.n	801a56e <HAL_DMA_Abort_IT+0x18e>
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	681b      	ldr	r3, [r3, #0]
 801a560:	681a      	ldr	r2, [r3, #0]
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	f022 0201 	bic.w	r2, r2, #1
 801a56a:	601a      	str	r2, [r3, #0]
 801a56c:	e178      	b.n	801a860 <HAL_DMA_Abort_IT+0x480>
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	681a      	ldr	r2, [r3, #0]
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	f022 0201 	bic.w	r2, r2, #1
 801a57c:	601a      	str	r2, [r3, #0]
 801a57e:	e16f      	b.n	801a860 <HAL_DMA_Abort_IT+0x480>
 801a580:	40020010 	.word	0x40020010
 801a584:	40020028 	.word	0x40020028
 801a588:	40020040 	.word	0x40020040
 801a58c:	40020058 	.word	0x40020058
 801a590:	40020070 	.word	0x40020070
 801a594:	40020088 	.word	0x40020088
 801a598:	400200a0 	.word	0x400200a0
 801a59c:	400200b8 	.word	0x400200b8
 801a5a0:	40020410 	.word	0x40020410
 801a5a4:	40020428 	.word	0x40020428
 801a5a8:	40020440 	.word	0x40020440
 801a5ac:	40020458 	.word	0x40020458
 801a5b0:	40020470 	.word	0x40020470
 801a5b4:	40020488 	.word	0x40020488
 801a5b8:	400204a0 	.word	0x400204a0
 801a5bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	681a      	ldr	r2, [r3, #0]
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	f022 020e 	bic.w	r2, r2, #14
 801a5ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	4a6c      	ldr	r2, [pc, #432]	@ (801a788 <HAL_DMA_Abort_IT+0x3a8>)
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d04a      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	4a6b      	ldr	r2, [pc, #428]	@ (801a78c <HAL_DMA_Abort_IT+0x3ac>)
 801a5e0:	4293      	cmp	r3, r2
 801a5e2:	d045      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	4a69      	ldr	r2, [pc, #420]	@ (801a790 <HAL_DMA_Abort_IT+0x3b0>)
 801a5ea:	4293      	cmp	r3, r2
 801a5ec:	d040      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	4a68      	ldr	r2, [pc, #416]	@ (801a794 <HAL_DMA_Abort_IT+0x3b4>)
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	d03b      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	4a66      	ldr	r2, [pc, #408]	@ (801a798 <HAL_DMA_Abort_IT+0x3b8>)
 801a5fe:	4293      	cmp	r3, r2
 801a600:	d036      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4a65      	ldr	r2, [pc, #404]	@ (801a79c <HAL_DMA_Abort_IT+0x3bc>)
 801a608:	4293      	cmp	r3, r2
 801a60a:	d031      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	4a63      	ldr	r2, [pc, #396]	@ (801a7a0 <HAL_DMA_Abort_IT+0x3c0>)
 801a612:	4293      	cmp	r3, r2
 801a614:	d02c      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	4a62      	ldr	r2, [pc, #392]	@ (801a7a4 <HAL_DMA_Abort_IT+0x3c4>)
 801a61c:	4293      	cmp	r3, r2
 801a61e:	d027      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	4a60      	ldr	r2, [pc, #384]	@ (801a7a8 <HAL_DMA_Abort_IT+0x3c8>)
 801a626:	4293      	cmp	r3, r2
 801a628:	d022      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	4a5f      	ldr	r2, [pc, #380]	@ (801a7ac <HAL_DMA_Abort_IT+0x3cc>)
 801a630:	4293      	cmp	r3, r2
 801a632:	d01d      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	4a5d      	ldr	r2, [pc, #372]	@ (801a7b0 <HAL_DMA_Abort_IT+0x3d0>)
 801a63a:	4293      	cmp	r3, r2
 801a63c:	d018      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4a5c      	ldr	r2, [pc, #368]	@ (801a7b4 <HAL_DMA_Abort_IT+0x3d4>)
 801a644:	4293      	cmp	r3, r2
 801a646:	d013      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	681b      	ldr	r3, [r3, #0]
 801a64c:	4a5a      	ldr	r2, [pc, #360]	@ (801a7b8 <HAL_DMA_Abort_IT+0x3d8>)
 801a64e:	4293      	cmp	r3, r2
 801a650:	d00e      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	4a59      	ldr	r2, [pc, #356]	@ (801a7bc <HAL_DMA_Abort_IT+0x3dc>)
 801a658:	4293      	cmp	r3, r2
 801a65a:	d009      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	4a57      	ldr	r2, [pc, #348]	@ (801a7c0 <HAL_DMA_Abort_IT+0x3e0>)
 801a662:	4293      	cmp	r3, r2
 801a664:	d004      	beq.n	801a670 <HAL_DMA_Abort_IT+0x290>
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	4a56      	ldr	r2, [pc, #344]	@ (801a7c4 <HAL_DMA_Abort_IT+0x3e4>)
 801a66c:	4293      	cmp	r3, r2
 801a66e:	d108      	bne.n	801a682 <HAL_DMA_Abort_IT+0x2a2>
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	f022 0201 	bic.w	r2, r2, #1
 801a67e:	601a      	str	r2, [r3, #0]
 801a680:	e007      	b.n	801a692 <HAL_DMA_Abort_IT+0x2b2>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	681a      	ldr	r2, [r3, #0]
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	f022 0201 	bic.w	r2, r2, #1
 801a690:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	4a3c      	ldr	r2, [pc, #240]	@ (801a788 <HAL_DMA_Abort_IT+0x3a8>)
 801a698:	4293      	cmp	r3, r2
 801a69a:	d072      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	4a3a      	ldr	r2, [pc, #232]	@ (801a78c <HAL_DMA_Abort_IT+0x3ac>)
 801a6a2:	4293      	cmp	r3, r2
 801a6a4:	d06d      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	681b      	ldr	r3, [r3, #0]
 801a6aa:	4a39      	ldr	r2, [pc, #228]	@ (801a790 <HAL_DMA_Abort_IT+0x3b0>)
 801a6ac:	4293      	cmp	r3, r2
 801a6ae:	d068      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	4a37      	ldr	r2, [pc, #220]	@ (801a794 <HAL_DMA_Abort_IT+0x3b4>)
 801a6b6:	4293      	cmp	r3, r2
 801a6b8:	d063      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	4a36      	ldr	r2, [pc, #216]	@ (801a798 <HAL_DMA_Abort_IT+0x3b8>)
 801a6c0:	4293      	cmp	r3, r2
 801a6c2:	d05e      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	4a34      	ldr	r2, [pc, #208]	@ (801a79c <HAL_DMA_Abort_IT+0x3bc>)
 801a6ca:	4293      	cmp	r3, r2
 801a6cc:	d059      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	681b      	ldr	r3, [r3, #0]
 801a6d2:	4a33      	ldr	r2, [pc, #204]	@ (801a7a0 <HAL_DMA_Abort_IT+0x3c0>)
 801a6d4:	4293      	cmp	r3, r2
 801a6d6:	d054      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	4a31      	ldr	r2, [pc, #196]	@ (801a7a4 <HAL_DMA_Abort_IT+0x3c4>)
 801a6de:	4293      	cmp	r3, r2
 801a6e0:	d04f      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	4a30      	ldr	r2, [pc, #192]	@ (801a7a8 <HAL_DMA_Abort_IT+0x3c8>)
 801a6e8:	4293      	cmp	r3, r2
 801a6ea:	d04a      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	4a2e      	ldr	r2, [pc, #184]	@ (801a7ac <HAL_DMA_Abort_IT+0x3cc>)
 801a6f2:	4293      	cmp	r3, r2
 801a6f4:	d045      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	4a2d      	ldr	r2, [pc, #180]	@ (801a7b0 <HAL_DMA_Abort_IT+0x3d0>)
 801a6fc:	4293      	cmp	r3, r2
 801a6fe:	d040      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	4a2b      	ldr	r2, [pc, #172]	@ (801a7b4 <HAL_DMA_Abort_IT+0x3d4>)
 801a706:	4293      	cmp	r3, r2
 801a708:	d03b      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	4a2a      	ldr	r2, [pc, #168]	@ (801a7b8 <HAL_DMA_Abort_IT+0x3d8>)
 801a710:	4293      	cmp	r3, r2
 801a712:	d036      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	4a28      	ldr	r2, [pc, #160]	@ (801a7bc <HAL_DMA_Abort_IT+0x3dc>)
 801a71a:	4293      	cmp	r3, r2
 801a71c:	d031      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	4a27      	ldr	r2, [pc, #156]	@ (801a7c0 <HAL_DMA_Abort_IT+0x3e0>)
 801a724:	4293      	cmp	r3, r2
 801a726:	d02c      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	4a25      	ldr	r2, [pc, #148]	@ (801a7c4 <HAL_DMA_Abort_IT+0x3e4>)
 801a72e:	4293      	cmp	r3, r2
 801a730:	d027      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	4a24      	ldr	r2, [pc, #144]	@ (801a7c8 <HAL_DMA_Abort_IT+0x3e8>)
 801a738:	4293      	cmp	r3, r2
 801a73a:	d022      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	4a22      	ldr	r2, [pc, #136]	@ (801a7cc <HAL_DMA_Abort_IT+0x3ec>)
 801a742:	4293      	cmp	r3, r2
 801a744:	d01d      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	4a21      	ldr	r2, [pc, #132]	@ (801a7d0 <HAL_DMA_Abort_IT+0x3f0>)
 801a74c:	4293      	cmp	r3, r2
 801a74e:	d018      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	4a1f      	ldr	r2, [pc, #124]	@ (801a7d4 <HAL_DMA_Abort_IT+0x3f4>)
 801a756:	4293      	cmp	r3, r2
 801a758:	d013      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	4a1e      	ldr	r2, [pc, #120]	@ (801a7d8 <HAL_DMA_Abort_IT+0x3f8>)
 801a760:	4293      	cmp	r3, r2
 801a762:	d00e      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	4a1c      	ldr	r2, [pc, #112]	@ (801a7dc <HAL_DMA_Abort_IT+0x3fc>)
 801a76a:	4293      	cmp	r3, r2
 801a76c:	d009      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	4a1b      	ldr	r2, [pc, #108]	@ (801a7e0 <HAL_DMA_Abort_IT+0x400>)
 801a774:	4293      	cmp	r3, r2
 801a776:	d004      	beq.n	801a782 <HAL_DMA_Abort_IT+0x3a2>
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	4a19      	ldr	r2, [pc, #100]	@ (801a7e4 <HAL_DMA_Abort_IT+0x404>)
 801a77e:	4293      	cmp	r3, r2
 801a780:	d132      	bne.n	801a7e8 <HAL_DMA_Abort_IT+0x408>
 801a782:	2301      	movs	r3, #1
 801a784:	e031      	b.n	801a7ea <HAL_DMA_Abort_IT+0x40a>
 801a786:	bf00      	nop
 801a788:	40020010 	.word	0x40020010
 801a78c:	40020028 	.word	0x40020028
 801a790:	40020040 	.word	0x40020040
 801a794:	40020058 	.word	0x40020058
 801a798:	40020070 	.word	0x40020070
 801a79c:	40020088 	.word	0x40020088
 801a7a0:	400200a0 	.word	0x400200a0
 801a7a4:	400200b8 	.word	0x400200b8
 801a7a8:	40020410 	.word	0x40020410
 801a7ac:	40020428 	.word	0x40020428
 801a7b0:	40020440 	.word	0x40020440
 801a7b4:	40020458 	.word	0x40020458
 801a7b8:	40020470 	.word	0x40020470
 801a7bc:	40020488 	.word	0x40020488
 801a7c0:	400204a0 	.word	0x400204a0
 801a7c4:	400204b8 	.word	0x400204b8
 801a7c8:	58025408 	.word	0x58025408
 801a7cc:	5802541c 	.word	0x5802541c
 801a7d0:	58025430 	.word	0x58025430
 801a7d4:	58025444 	.word	0x58025444
 801a7d8:	58025458 	.word	0x58025458
 801a7dc:	5802546c 	.word	0x5802546c
 801a7e0:	58025480 	.word	0x58025480
 801a7e4:	58025494 	.word	0x58025494
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	d028      	beq.n	801a840 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a7f2:	681a      	ldr	r2, [r3, #0]
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a7f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a7fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a802:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a808:	f003 031f 	and.w	r3, r3, #31
 801a80c:	2201      	movs	r2, #1
 801a80e:	409a      	lsls	r2, r3
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a818:	687a      	ldr	r2, [r7, #4]
 801a81a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a81c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a822:	2b00      	cmp	r3, #0
 801a824:	d00c      	beq.n	801a840 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a82a:	681a      	ldr	r2, [r3, #0]
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a834:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a83a:	687a      	ldr	r2, [r7, #4]
 801a83c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a83e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	2201      	movs	r2, #1
 801a844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2200      	movs	r2, #0
 801a84c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a854:	2b00      	cmp	r3, #0
 801a856:	d003      	beq.n	801a860 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a85c:	6878      	ldr	r0, [r7, #4]
 801a85e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801a860:	2300      	movs	r3, #0
}
 801a862:	4618      	mov	r0, r3
 801a864:	3710      	adds	r7, #16
 801a866:	46bd      	mov	sp, r7
 801a868:	bd80      	pop	{r7, pc}
 801a86a:	bf00      	nop

0801a86c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b08a      	sub	sp, #40	@ 0x28
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801a874:	2300      	movs	r3, #0
 801a876:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801a878:	4b67      	ldr	r3, [pc, #412]	@ (801aa18 <HAL_DMA_IRQHandler+0x1ac>)
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4a67      	ldr	r2, [pc, #412]	@ (801aa1c <HAL_DMA_IRQHandler+0x1b0>)
 801a87e:	fba2 2303 	umull	r2, r3, r2, r3
 801a882:	0a9b      	lsrs	r3, r3, #10
 801a884:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a88a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a890:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801a892:	6a3b      	ldr	r3, [r7, #32]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	4a5f      	ldr	r2, [pc, #380]	@ (801aa20 <HAL_DMA_IRQHandler+0x1b4>)
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d04a      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a5d      	ldr	r2, [pc, #372]	@ (801aa24 <HAL_DMA_IRQHandler+0x1b8>)
 801a8ae:	4293      	cmp	r3, r2
 801a8b0:	d045      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4a5c      	ldr	r2, [pc, #368]	@ (801aa28 <HAL_DMA_IRQHandler+0x1bc>)
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d040      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	4a5a      	ldr	r2, [pc, #360]	@ (801aa2c <HAL_DMA_IRQHandler+0x1c0>)
 801a8c2:	4293      	cmp	r3, r2
 801a8c4:	d03b      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4a59      	ldr	r2, [pc, #356]	@ (801aa30 <HAL_DMA_IRQHandler+0x1c4>)
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	d036      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	4a57      	ldr	r2, [pc, #348]	@ (801aa34 <HAL_DMA_IRQHandler+0x1c8>)
 801a8d6:	4293      	cmp	r3, r2
 801a8d8:	d031      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	4a56      	ldr	r2, [pc, #344]	@ (801aa38 <HAL_DMA_IRQHandler+0x1cc>)
 801a8e0:	4293      	cmp	r3, r2
 801a8e2:	d02c      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	4a54      	ldr	r2, [pc, #336]	@ (801aa3c <HAL_DMA_IRQHandler+0x1d0>)
 801a8ea:	4293      	cmp	r3, r2
 801a8ec:	d027      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4a53      	ldr	r2, [pc, #332]	@ (801aa40 <HAL_DMA_IRQHandler+0x1d4>)
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d022      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	4a51      	ldr	r2, [pc, #324]	@ (801aa44 <HAL_DMA_IRQHandler+0x1d8>)
 801a8fe:	4293      	cmp	r3, r2
 801a900:	d01d      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	4a50      	ldr	r2, [pc, #320]	@ (801aa48 <HAL_DMA_IRQHandler+0x1dc>)
 801a908:	4293      	cmp	r3, r2
 801a90a:	d018      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	4a4e      	ldr	r2, [pc, #312]	@ (801aa4c <HAL_DMA_IRQHandler+0x1e0>)
 801a912:	4293      	cmp	r3, r2
 801a914:	d013      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	4a4d      	ldr	r2, [pc, #308]	@ (801aa50 <HAL_DMA_IRQHandler+0x1e4>)
 801a91c:	4293      	cmp	r3, r2
 801a91e:	d00e      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a4b      	ldr	r2, [pc, #300]	@ (801aa54 <HAL_DMA_IRQHandler+0x1e8>)
 801a926:	4293      	cmp	r3, r2
 801a928:	d009      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	4a4a      	ldr	r2, [pc, #296]	@ (801aa58 <HAL_DMA_IRQHandler+0x1ec>)
 801a930:	4293      	cmp	r3, r2
 801a932:	d004      	beq.n	801a93e <HAL_DMA_IRQHandler+0xd2>
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	4a48      	ldr	r2, [pc, #288]	@ (801aa5c <HAL_DMA_IRQHandler+0x1f0>)
 801a93a:	4293      	cmp	r3, r2
 801a93c:	d101      	bne.n	801a942 <HAL_DMA_IRQHandler+0xd6>
 801a93e:	2301      	movs	r3, #1
 801a940:	e000      	b.n	801a944 <HAL_DMA_IRQHandler+0xd8>
 801a942:	2300      	movs	r3, #0
 801a944:	2b00      	cmp	r3, #0
 801a946:	f000 842b 	beq.w	801b1a0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a94e:	f003 031f 	and.w	r3, r3, #31
 801a952:	2208      	movs	r2, #8
 801a954:	409a      	lsls	r2, r3
 801a956:	69bb      	ldr	r3, [r7, #24]
 801a958:	4013      	ands	r3, r2
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f000 80a2 	beq.w	801aaa4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	4a2e      	ldr	r2, [pc, #184]	@ (801aa20 <HAL_DMA_IRQHandler+0x1b4>)
 801a966:	4293      	cmp	r3, r2
 801a968:	d04a      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	4a2d      	ldr	r2, [pc, #180]	@ (801aa24 <HAL_DMA_IRQHandler+0x1b8>)
 801a970:	4293      	cmp	r3, r2
 801a972:	d045      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	4a2b      	ldr	r2, [pc, #172]	@ (801aa28 <HAL_DMA_IRQHandler+0x1bc>)
 801a97a:	4293      	cmp	r3, r2
 801a97c:	d040      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	4a2a      	ldr	r2, [pc, #168]	@ (801aa2c <HAL_DMA_IRQHandler+0x1c0>)
 801a984:	4293      	cmp	r3, r2
 801a986:	d03b      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	4a28      	ldr	r2, [pc, #160]	@ (801aa30 <HAL_DMA_IRQHandler+0x1c4>)
 801a98e:	4293      	cmp	r3, r2
 801a990:	d036      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	4a27      	ldr	r2, [pc, #156]	@ (801aa34 <HAL_DMA_IRQHandler+0x1c8>)
 801a998:	4293      	cmp	r3, r2
 801a99a:	d031      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	4a25      	ldr	r2, [pc, #148]	@ (801aa38 <HAL_DMA_IRQHandler+0x1cc>)
 801a9a2:	4293      	cmp	r3, r2
 801a9a4:	d02c      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	681b      	ldr	r3, [r3, #0]
 801a9aa:	4a24      	ldr	r2, [pc, #144]	@ (801aa3c <HAL_DMA_IRQHandler+0x1d0>)
 801a9ac:	4293      	cmp	r3, r2
 801a9ae:	d027      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	4a22      	ldr	r2, [pc, #136]	@ (801aa40 <HAL_DMA_IRQHandler+0x1d4>)
 801a9b6:	4293      	cmp	r3, r2
 801a9b8:	d022      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4a21      	ldr	r2, [pc, #132]	@ (801aa44 <HAL_DMA_IRQHandler+0x1d8>)
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d01d      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4a1f      	ldr	r2, [pc, #124]	@ (801aa48 <HAL_DMA_IRQHandler+0x1dc>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d018      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	4a1e      	ldr	r2, [pc, #120]	@ (801aa4c <HAL_DMA_IRQHandler+0x1e0>)
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	d013      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4a1c      	ldr	r2, [pc, #112]	@ (801aa50 <HAL_DMA_IRQHandler+0x1e4>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d00e      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	4a1b      	ldr	r2, [pc, #108]	@ (801aa54 <HAL_DMA_IRQHandler+0x1e8>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	d009      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a19      	ldr	r2, [pc, #100]	@ (801aa58 <HAL_DMA_IRQHandler+0x1ec>)
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	d004      	beq.n	801aa00 <HAL_DMA_IRQHandler+0x194>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4a18      	ldr	r2, [pc, #96]	@ (801aa5c <HAL_DMA_IRQHandler+0x1f0>)
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d12f      	bne.n	801aa60 <HAL_DMA_IRQHandler+0x1f4>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	f003 0304 	and.w	r3, r3, #4
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	bf14      	ite	ne
 801aa0e:	2301      	movne	r3, #1
 801aa10:	2300      	moveq	r3, #0
 801aa12:	b2db      	uxtb	r3, r3
 801aa14:	e02e      	b.n	801aa74 <HAL_DMA_IRQHandler+0x208>
 801aa16:	bf00      	nop
 801aa18:	20000000 	.word	0x20000000
 801aa1c:	1b4e81b5 	.word	0x1b4e81b5
 801aa20:	40020010 	.word	0x40020010
 801aa24:	40020028 	.word	0x40020028
 801aa28:	40020040 	.word	0x40020040
 801aa2c:	40020058 	.word	0x40020058
 801aa30:	40020070 	.word	0x40020070
 801aa34:	40020088 	.word	0x40020088
 801aa38:	400200a0 	.word	0x400200a0
 801aa3c:	400200b8 	.word	0x400200b8
 801aa40:	40020410 	.word	0x40020410
 801aa44:	40020428 	.word	0x40020428
 801aa48:	40020440 	.word	0x40020440
 801aa4c:	40020458 	.word	0x40020458
 801aa50:	40020470 	.word	0x40020470
 801aa54:	40020488 	.word	0x40020488
 801aa58:	400204a0 	.word	0x400204a0
 801aa5c:	400204b8 	.word	0x400204b8
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	f003 0308 	and.w	r3, r3, #8
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	bf14      	ite	ne
 801aa6e:	2301      	movne	r3, #1
 801aa70:	2300      	moveq	r3, #0
 801aa72:	b2db      	uxtb	r3, r3
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	d015      	beq.n	801aaa4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801aa78:	687b      	ldr	r3, [r7, #4]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	681a      	ldr	r2, [r3, #0]
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	f022 0204 	bic.w	r2, r2, #4
 801aa86:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aa8c:	f003 031f 	and.w	r3, r3, #31
 801aa90:	2208      	movs	r2, #8
 801aa92:	409a      	lsls	r2, r3
 801aa94:	6a3b      	ldr	r3, [r7, #32]
 801aa96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801aa9c:	f043 0201 	orr.w	r2, r3, #1
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aaa8:	f003 031f 	and.w	r3, r3, #31
 801aaac:	69ba      	ldr	r2, [r7, #24]
 801aaae:	fa22 f303 	lsr.w	r3, r2, r3
 801aab2:	f003 0301 	and.w	r3, r3, #1
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d06e      	beq.n	801ab98 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	4a69      	ldr	r2, [pc, #420]	@ (801ac64 <HAL_DMA_IRQHandler+0x3f8>)
 801aac0:	4293      	cmp	r3, r2
 801aac2:	d04a      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	4a67      	ldr	r2, [pc, #412]	@ (801ac68 <HAL_DMA_IRQHandler+0x3fc>)
 801aaca:	4293      	cmp	r3, r2
 801aacc:	d045      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	4a66      	ldr	r2, [pc, #408]	@ (801ac6c <HAL_DMA_IRQHandler+0x400>)
 801aad4:	4293      	cmp	r3, r2
 801aad6:	d040      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	4a64      	ldr	r2, [pc, #400]	@ (801ac70 <HAL_DMA_IRQHandler+0x404>)
 801aade:	4293      	cmp	r3, r2
 801aae0:	d03b      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	681b      	ldr	r3, [r3, #0]
 801aae6:	4a63      	ldr	r2, [pc, #396]	@ (801ac74 <HAL_DMA_IRQHandler+0x408>)
 801aae8:	4293      	cmp	r3, r2
 801aaea:	d036      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	4a61      	ldr	r2, [pc, #388]	@ (801ac78 <HAL_DMA_IRQHandler+0x40c>)
 801aaf2:	4293      	cmp	r3, r2
 801aaf4:	d031      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	681b      	ldr	r3, [r3, #0]
 801aafa:	4a60      	ldr	r2, [pc, #384]	@ (801ac7c <HAL_DMA_IRQHandler+0x410>)
 801aafc:	4293      	cmp	r3, r2
 801aafe:	d02c      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4a5e      	ldr	r2, [pc, #376]	@ (801ac80 <HAL_DMA_IRQHandler+0x414>)
 801ab06:	4293      	cmp	r3, r2
 801ab08:	d027      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4a5d      	ldr	r2, [pc, #372]	@ (801ac84 <HAL_DMA_IRQHandler+0x418>)
 801ab10:	4293      	cmp	r3, r2
 801ab12:	d022      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	4a5b      	ldr	r2, [pc, #364]	@ (801ac88 <HAL_DMA_IRQHandler+0x41c>)
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	d01d      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	4a5a      	ldr	r2, [pc, #360]	@ (801ac8c <HAL_DMA_IRQHandler+0x420>)
 801ab24:	4293      	cmp	r3, r2
 801ab26:	d018      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	4a58      	ldr	r2, [pc, #352]	@ (801ac90 <HAL_DMA_IRQHandler+0x424>)
 801ab2e:	4293      	cmp	r3, r2
 801ab30:	d013      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	4a57      	ldr	r2, [pc, #348]	@ (801ac94 <HAL_DMA_IRQHandler+0x428>)
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	d00e      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	4a55      	ldr	r2, [pc, #340]	@ (801ac98 <HAL_DMA_IRQHandler+0x42c>)
 801ab42:	4293      	cmp	r3, r2
 801ab44:	d009      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	4a54      	ldr	r2, [pc, #336]	@ (801ac9c <HAL_DMA_IRQHandler+0x430>)
 801ab4c:	4293      	cmp	r3, r2
 801ab4e:	d004      	beq.n	801ab5a <HAL_DMA_IRQHandler+0x2ee>
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	4a52      	ldr	r2, [pc, #328]	@ (801aca0 <HAL_DMA_IRQHandler+0x434>)
 801ab56:	4293      	cmp	r3, r2
 801ab58:	d10a      	bne.n	801ab70 <HAL_DMA_IRQHandler+0x304>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	695b      	ldr	r3, [r3, #20]
 801ab60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	bf14      	ite	ne
 801ab68:	2301      	movne	r3, #1
 801ab6a:	2300      	moveq	r3, #0
 801ab6c:	b2db      	uxtb	r3, r3
 801ab6e:	e003      	b.n	801ab78 <HAL_DMA_IRQHandler+0x30c>
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	2300      	movs	r3, #0
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d00d      	beq.n	801ab98 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab80:	f003 031f 	and.w	r3, r3, #31
 801ab84:	2201      	movs	r2, #1
 801ab86:	409a      	lsls	r2, r3
 801ab88:	6a3b      	ldr	r3, [r7, #32]
 801ab8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ab90:	f043 0202 	orr.w	r2, r3, #2
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab9c:	f003 031f 	and.w	r3, r3, #31
 801aba0:	2204      	movs	r2, #4
 801aba2:	409a      	lsls	r2, r3
 801aba4:	69bb      	ldr	r3, [r7, #24]
 801aba6:	4013      	ands	r3, r2
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	f000 808f 	beq.w	801accc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	681b      	ldr	r3, [r3, #0]
 801abb2:	4a2c      	ldr	r2, [pc, #176]	@ (801ac64 <HAL_DMA_IRQHandler+0x3f8>)
 801abb4:	4293      	cmp	r3, r2
 801abb6:	d04a      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	4a2a      	ldr	r2, [pc, #168]	@ (801ac68 <HAL_DMA_IRQHandler+0x3fc>)
 801abbe:	4293      	cmp	r3, r2
 801abc0:	d045      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	4a29      	ldr	r2, [pc, #164]	@ (801ac6c <HAL_DMA_IRQHandler+0x400>)
 801abc8:	4293      	cmp	r3, r2
 801abca:	d040      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4a27      	ldr	r2, [pc, #156]	@ (801ac70 <HAL_DMA_IRQHandler+0x404>)
 801abd2:	4293      	cmp	r3, r2
 801abd4:	d03b      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4a26      	ldr	r2, [pc, #152]	@ (801ac74 <HAL_DMA_IRQHandler+0x408>)
 801abdc:	4293      	cmp	r3, r2
 801abde:	d036      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	4a24      	ldr	r2, [pc, #144]	@ (801ac78 <HAL_DMA_IRQHandler+0x40c>)
 801abe6:	4293      	cmp	r3, r2
 801abe8:	d031      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4a23      	ldr	r2, [pc, #140]	@ (801ac7c <HAL_DMA_IRQHandler+0x410>)
 801abf0:	4293      	cmp	r3, r2
 801abf2:	d02c      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	4a21      	ldr	r2, [pc, #132]	@ (801ac80 <HAL_DMA_IRQHandler+0x414>)
 801abfa:	4293      	cmp	r3, r2
 801abfc:	d027      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	4a20      	ldr	r2, [pc, #128]	@ (801ac84 <HAL_DMA_IRQHandler+0x418>)
 801ac04:	4293      	cmp	r3, r2
 801ac06:	d022      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a1e      	ldr	r2, [pc, #120]	@ (801ac88 <HAL_DMA_IRQHandler+0x41c>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d01d      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a1d      	ldr	r2, [pc, #116]	@ (801ac8c <HAL_DMA_IRQHandler+0x420>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d018      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4a1b      	ldr	r2, [pc, #108]	@ (801ac90 <HAL_DMA_IRQHandler+0x424>)
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d013      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	4a1a      	ldr	r2, [pc, #104]	@ (801ac94 <HAL_DMA_IRQHandler+0x428>)
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d00e      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4a18      	ldr	r2, [pc, #96]	@ (801ac98 <HAL_DMA_IRQHandler+0x42c>)
 801ac36:	4293      	cmp	r3, r2
 801ac38:	d009      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4a17      	ldr	r2, [pc, #92]	@ (801ac9c <HAL_DMA_IRQHandler+0x430>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d004      	beq.n	801ac4e <HAL_DMA_IRQHandler+0x3e2>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	4a15      	ldr	r2, [pc, #84]	@ (801aca0 <HAL_DMA_IRQHandler+0x434>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d12a      	bne.n	801aca4 <HAL_DMA_IRQHandler+0x438>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	f003 0302 	and.w	r3, r3, #2
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	bf14      	ite	ne
 801ac5c:	2301      	movne	r3, #1
 801ac5e:	2300      	moveq	r3, #0
 801ac60:	b2db      	uxtb	r3, r3
 801ac62:	e023      	b.n	801acac <HAL_DMA_IRQHandler+0x440>
 801ac64:	40020010 	.word	0x40020010
 801ac68:	40020028 	.word	0x40020028
 801ac6c:	40020040 	.word	0x40020040
 801ac70:	40020058 	.word	0x40020058
 801ac74:	40020070 	.word	0x40020070
 801ac78:	40020088 	.word	0x40020088
 801ac7c:	400200a0 	.word	0x400200a0
 801ac80:	400200b8 	.word	0x400200b8
 801ac84:	40020410 	.word	0x40020410
 801ac88:	40020428 	.word	0x40020428
 801ac8c:	40020440 	.word	0x40020440
 801ac90:	40020458 	.word	0x40020458
 801ac94:	40020470 	.word	0x40020470
 801ac98:	40020488 	.word	0x40020488
 801ac9c:	400204a0 	.word	0x400204a0
 801aca0:	400204b8 	.word	0x400204b8
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	2300      	movs	r3, #0
 801acac:	2b00      	cmp	r3, #0
 801acae:	d00d      	beq.n	801accc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acb4:	f003 031f 	and.w	r3, r3, #31
 801acb8:	2204      	movs	r2, #4
 801acba:	409a      	lsls	r2, r3
 801acbc:	6a3b      	ldr	r3, [r7, #32]
 801acbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801acc4:	f043 0204 	orr.w	r2, r3, #4
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801acd0:	f003 031f 	and.w	r3, r3, #31
 801acd4:	2210      	movs	r2, #16
 801acd6:	409a      	lsls	r2, r3
 801acd8:	69bb      	ldr	r3, [r7, #24]
 801acda:	4013      	ands	r3, r2
 801acdc:	2b00      	cmp	r3, #0
 801acde:	f000 80a6 	beq.w	801ae2e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	4a85      	ldr	r2, [pc, #532]	@ (801aefc <HAL_DMA_IRQHandler+0x690>)
 801ace8:	4293      	cmp	r3, r2
 801acea:	d04a      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	4a83      	ldr	r2, [pc, #524]	@ (801af00 <HAL_DMA_IRQHandler+0x694>)
 801acf2:	4293      	cmp	r3, r2
 801acf4:	d045      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	4a82      	ldr	r2, [pc, #520]	@ (801af04 <HAL_DMA_IRQHandler+0x698>)
 801acfc:	4293      	cmp	r3, r2
 801acfe:	d040      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	4a80      	ldr	r2, [pc, #512]	@ (801af08 <HAL_DMA_IRQHandler+0x69c>)
 801ad06:	4293      	cmp	r3, r2
 801ad08:	d03b      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	4a7f      	ldr	r2, [pc, #508]	@ (801af0c <HAL_DMA_IRQHandler+0x6a0>)
 801ad10:	4293      	cmp	r3, r2
 801ad12:	d036      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	4a7d      	ldr	r2, [pc, #500]	@ (801af10 <HAL_DMA_IRQHandler+0x6a4>)
 801ad1a:	4293      	cmp	r3, r2
 801ad1c:	d031      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	4a7c      	ldr	r2, [pc, #496]	@ (801af14 <HAL_DMA_IRQHandler+0x6a8>)
 801ad24:	4293      	cmp	r3, r2
 801ad26:	d02c      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	4a7a      	ldr	r2, [pc, #488]	@ (801af18 <HAL_DMA_IRQHandler+0x6ac>)
 801ad2e:	4293      	cmp	r3, r2
 801ad30:	d027      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	4a79      	ldr	r2, [pc, #484]	@ (801af1c <HAL_DMA_IRQHandler+0x6b0>)
 801ad38:	4293      	cmp	r3, r2
 801ad3a:	d022      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4a77      	ldr	r2, [pc, #476]	@ (801af20 <HAL_DMA_IRQHandler+0x6b4>)
 801ad42:	4293      	cmp	r3, r2
 801ad44:	d01d      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	681b      	ldr	r3, [r3, #0]
 801ad4a:	4a76      	ldr	r2, [pc, #472]	@ (801af24 <HAL_DMA_IRQHandler+0x6b8>)
 801ad4c:	4293      	cmp	r3, r2
 801ad4e:	d018      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	4a74      	ldr	r2, [pc, #464]	@ (801af28 <HAL_DMA_IRQHandler+0x6bc>)
 801ad56:	4293      	cmp	r3, r2
 801ad58:	d013      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	4a73      	ldr	r2, [pc, #460]	@ (801af2c <HAL_DMA_IRQHandler+0x6c0>)
 801ad60:	4293      	cmp	r3, r2
 801ad62:	d00e      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	4a71      	ldr	r2, [pc, #452]	@ (801af30 <HAL_DMA_IRQHandler+0x6c4>)
 801ad6a:	4293      	cmp	r3, r2
 801ad6c:	d009      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	4a70      	ldr	r2, [pc, #448]	@ (801af34 <HAL_DMA_IRQHandler+0x6c8>)
 801ad74:	4293      	cmp	r3, r2
 801ad76:	d004      	beq.n	801ad82 <HAL_DMA_IRQHandler+0x516>
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	4a6e      	ldr	r2, [pc, #440]	@ (801af38 <HAL_DMA_IRQHandler+0x6cc>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d10a      	bne.n	801ad98 <HAL_DMA_IRQHandler+0x52c>
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	f003 0308 	and.w	r3, r3, #8
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	bf14      	ite	ne
 801ad90:	2301      	movne	r3, #1
 801ad92:	2300      	moveq	r3, #0
 801ad94:	b2db      	uxtb	r3, r3
 801ad96:	e009      	b.n	801adac <HAL_DMA_IRQHandler+0x540>
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	f003 0304 	and.w	r3, r3, #4
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	bf14      	ite	ne
 801ada6:	2301      	movne	r3, #1
 801ada8:	2300      	moveq	r3, #0
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	2b00      	cmp	r3, #0
 801adae:	d03e      	beq.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801adb4:	f003 031f 	and.w	r3, r3, #31
 801adb8:	2210      	movs	r2, #16
 801adba:	409a      	lsls	r2, r3
 801adbc:	6a3b      	ldr	r3, [r7, #32]
 801adbe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d018      	beq.n	801ae00 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	681b      	ldr	r3, [r3, #0]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801add8:	2b00      	cmp	r3, #0
 801adda:	d108      	bne.n	801adee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d024      	beq.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	4798      	blx	r3
 801adec:	e01f      	b.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d01b      	beq.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801adfa:	6878      	ldr	r0, [r7, #4]
 801adfc:	4798      	blx	r3
 801adfe:	e016      	b.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d107      	bne.n	801ae1e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	681a      	ldr	r2, [r3, #0]
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	f022 0208 	bic.w	r2, r2, #8
 801ae1c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d003      	beq.n	801ae2e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ae2a:	6878      	ldr	r0, [r7, #4]
 801ae2c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae32:	f003 031f 	and.w	r3, r3, #31
 801ae36:	2220      	movs	r2, #32
 801ae38:	409a      	lsls	r2, r3
 801ae3a:	69bb      	ldr	r3, [r7, #24]
 801ae3c:	4013      	ands	r3, r2
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	f000 8110 	beq.w	801b064 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	4a2c      	ldr	r2, [pc, #176]	@ (801aefc <HAL_DMA_IRQHandler+0x690>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d04a      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	4a2b      	ldr	r2, [pc, #172]	@ (801af00 <HAL_DMA_IRQHandler+0x694>)
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d045      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	4a29      	ldr	r2, [pc, #164]	@ (801af04 <HAL_DMA_IRQHandler+0x698>)
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	d040      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4a28      	ldr	r2, [pc, #160]	@ (801af08 <HAL_DMA_IRQHandler+0x69c>)
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	d03b      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4a26      	ldr	r2, [pc, #152]	@ (801af0c <HAL_DMA_IRQHandler+0x6a0>)
 801ae72:	4293      	cmp	r3, r2
 801ae74:	d036      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	4a25      	ldr	r2, [pc, #148]	@ (801af10 <HAL_DMA_IRQHandler+0x6a4>)
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d031      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	4a23      	ldr	r2, [pc, #140]	@ (801af14 <HAL_DMA_IRQHandler+0x6a8>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d02c      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4a22      	ldr	r2, [pc, #136]	@ (801af18 <HAL_DMA_IRQHandler+0x6ac>)
 801ae90:	4293      	cmp	r3, r2
 801ae92:	d027      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a20      	ldr	r2, [pc, #128]	@ (801af1c <HAL_DMA_IRQHandler+0x6b0>)
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	d022      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	4a1f      	ldr	r2, [pc, #124]	@ (801af20 <HAL_DMA_IRQHandler+0x6b4>)
 801aea4:	4293      	cmp	r3, r2
 801aea6:	d01d      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	4a1d      	ldr	r2, [pc, #116]	@ (801af24 <HAL_DMA_IRQHandler+0x6b8>)
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	d018      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	4a1c      	ldr	r2, [pc, #112]	@ (801af28 <HAL_DMA_IRQHandler+0x6bc>)
 801aeb8:	4293      	cmp	r3, r2
 801aeba:	d013      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	4a1a      	ldr	r2, [pc, #104]	@ (801af2c <HAL_DMA_IRQHandler+0x6c0>)
 801aec2:	4293      	cmp	r3, r2
 801aec4:	d00e      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aec6:	687b      	ldr	r3, [r7, #4]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	4a19      	ldr	r2, [pc, #100]	@ (801af30 <HAL_DMA_IRQHandler+0x6c4>)
 801aecc:	4293      	cmp	r3, r2
 801aece:	d009      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	4a17      	ldr	r2, [pc, #92]	@ (801af34 <HAL_DMA_IRQHandler+0x6c8>)
 801aed6:	4293      	cmp	r3, r2
 801aed8:	d004      	beq.n	801aee4 <HAL_DMA_IRQHandler+0x678>
 801aeda:	687b      	ldr	r3, [r7, #4]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	4a16      	ldr	r2, [pc, #88]	@ (801af38 <HAL_DMA_IRQHandler+0x6cc>)
 801aee0:	4293      	cmp	r3, r2
 801aee2:	d12b      	bne.n	801af3c <HAL_DMA_IRQHandler+0x6d0>
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	f003 0310 	and.w	r3, r3, #16
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	bf14      	ite	ne
 801aef2:	2301      	movne	r3, #1
 801aef4:	2300      	moveq	r3, #0
 801aef6:	b2db      	uxtb	r3, r3
 801aef8:	e02a      	b.n	801af50 <HAL_DMA_IRQHandler+0x6e4>
 801aefa:	bf00      	nop
 801aefc:	40020010 	.word	0x40020010
 801af00:	40020028 	.word	0x40020028
 801af04:	40020040 	.word	0x40020040
 801af08:	40020058 	.word	0x40020058
 801af0c:	40020070 	.word	0x40020070
 801af10:	40020088 	.word	0x40020088
 801af14:	400200a0 	.word	0x400200a0
 801af18:	400200b8 	.word	0x400200b8
 801af1c:	40020410 	.word	0x40020410
 801af20:	40020428 	.word	0x40020428
 801af24:	40020440 	.word	0x40020440
 801af28:	40020458 	.word	0x40020458
 801af2c:	40020470 	.word	0x40020470
 801af30:	40020488 	.word	0x40020488
 801af34:	400204a0 	.word	0x400204a0
 801af38:	400204b8 	.word	0x400204b8
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	f003 0302 	and.w	r3, r3, #2
 801af46:	2b00      	cmp	r3, #0
 801af48:	bf14      	ite	ne
 801af4a:	2301      	movne	r3, #1
 801af4c:	2300      	moveq	r3, #0
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	2b00      	cmp	r3, #0
 801af52:	f000 8087 	beq.w	801b064 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af5a:	f003 031f 	and.w	r3, r3, #31
 801af5e:	2220      	movs	r2, #32
 801af60:	409a      	lsls	r2, r3
 801af62:	6a3b      	ldr	r3, [r7, #32]
 801af64:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801af6c:	b2db      	uxtb	r3, r3
 801af6e:	2b04      	cmp	r3, #4
 801af70:	d139      	bne.n	801afe6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	681a      	ldr	r2, [r3, #0]
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	f022 0216 	bic.w	r2, r2, #22
 801af80:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	695a      	ldr	r2, [r3, #20]
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801af90:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af96:	2b00      	cmp	r3, #0
 801af98:	d103      	bne.n	801afa2 <HAL_DMA_IRQHandler+0x736>
 801af9a:	687b      	ldr	r3, [r7, #4]
 801af9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801af9e:	2b00      	cmp	r3, #0
 801afa0:	d007      	beq.n	801afb2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	681a      	ldr	r2, [r3, #0]
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	f022 0208 	bic.w	r2, r2, #8
 801afb0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801afb6:	f003 031f 	and.w	r3, r3, #31
 801afba:	223f      	movs	r2, #63	@ 0x3f
 801afbc:	409a      	lsls	r2, r3
 801afbe:	6a3b      	ldr	r3, [r7, #32]
 801afc0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	2201      	movs	r2, #1
 801afc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	2200      	movs	r2, #0
 801afce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	f000 834a 	beq.w	801b670 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801afe0:	6878      	ldr	r0, [r7, #4]
 801afe2:	4798      	blx	r3
          }
          return;
 801afe4:	e344      	b.n	801b670 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d018      	beq.n	801b026 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801affe:	2b00      	cmp	r3, #0
 801b000:	d108      	bne.n	801b014 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b006:	2b00      	cmp	r3, #0
 801b008:	d02c      	beq.n	801b064 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b00e:	6878      	ldr	r0, [r7, #4]
 801b010:	4798      	blx	r3
 801b012:	e027      	b.n	801b064 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d023      	beq.n	801b064 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b020:	6878      	ldr	r0, [r7, #4]
 801b022:	4798      	blx	r3
 801b024:	e01e      	b.n	801b064 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b030:	2b00      	cmp	r3, #0
 801b032:	d10f      	bne.n	801b054 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	681a      	ldr	r2, [r3, #0]
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	f022 0210 	bic.w	r2, r2, #16
 801b042:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	2201      	movs	r2, #1
 801b048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2200      	movs	r2, #0
 801b050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d003      	beq.n	801b064 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b068:	2b00      	cmp	r3, #0
 801b06a:	f000 8306 	beq.w	801b67a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b072:	f003 0301 	and.w	r3, r3, #1
 801b076:	2b00      	cmp	r3, #0
 801b078:	f000 8088 	beq.w	801b18c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2204      	movs	r2, #4
 801b080:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	4a7a      	ldr	r2, [pc, #488]	@ (801b274 <HAL_DMA_IRQHandler+0xa08>)
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d04a      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4a79      	ldr	r2, [pc, #484]	@ (801b278 <HAL_DMA_IRQHandler+0xa0c>)
 801b094:	4293      	cmp	r3, r2
 801b096:	d045      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	4a77      	ldr	r2, [pc, #476]	@ (801b27c <HAL_DMA_IRQHandler+0xa10>)
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d040      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	4a76      	ldr	r2, [pc, #472]	@ (801b280 <HAL_DMA_IRQHandler+0xa14>)
 801b0a8:	4293      	cmp	r3, r2
 801b0aa:	d03b      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4a74      	ldr	r2, [pc, #464]	@ (801b284 <HAL_DMA_IRQHandler+0xa18>)
 801b0b2:	4293      	cmp	r3, r2
 801b0b4:	d036      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	4a73      	ldr	r2, [pc, #460]	@ (801b288 <HAL_DMA_IRQHandler+0xa1c>)
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d031      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	4a71      	ldr	r2, [pc, #452]	@ (801b28c <HAL_DMA_IRQHandler+0xa20>)
 801b0c6:	4293      	cmp	r3, r2
 801b0c8:	d02c      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	4a70      	ldr	r2, [pc, #448]	@ (801b290 <HAL_DMA_IRQHandler+0xa24>)
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d027      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a6e      	ldr	r2, [pc, #440]	@ (801b294 <HAL_DMA_IRQHandler+0xa28>)
 801b0da:	4293      	cmp	r3, r2
 801b0dc:	d022      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4a6d      	ldr	r2, [pc, #436]	@ (801b298 <HAL_DMA_IRQHandler+0xa2c>)
 801b0e4:	4293      	cmp	r3, r2
 801b0e6:	d01d      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4a6b      	ldr	r2, [pc, #428]	@ (801b29c <HAL_DMA_IRQHandler+0xa30>)
 801b0ee:	4293      	cmp	r3, r2
 801b0f0:	d018      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	4a6a      	ldr	r2, [pc, #424]	@ (801b2a0 <HAL_DMA_IRQHandler+0xa34>)
 801b0f8:	4293      	cmp	r3, r2
 801b0fa:	d013      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	4a68      	ldr	r2, [pc, #416]	@ (801b2a4 <HAL_DMA_IRQHandler+0xa38>)
 801b102:	4293      	cmp	r3, r2
 801b104:	d00e      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	4a67      	ldr	r2, [pc, #412]	@ (801b2a8 <HAL_DMA_IRQHandler+0xa3c>)
 801b10c:	4293      	cmp	r3, r2
 801b10e:	d009      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a65      	ldr	r2, [pc, #404]	@ (801b2ac <HAL_DMA_IRQHandler+0xa40>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d004      	beq.n	801b124 <HAL_DMA_IRQHandler+0x8b8>
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4a64      	ldr	r2, [pc, #400]	@ (801b2b0 <HAL_DMA_IRQHandler+0xa44>)
 801b120:	4293      	cmp	r3, r2
 801b122:	d108      	bne.n	801b136 <HAL_DMA_IRQHandler+0x8ca>
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	681a      	ldr	r2, [r3, #0]
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f022 0201 	bic.w	r2, r2, #1
 801b132:	601a      	str	r2, [r3, #0]
 801b134:	e007      	b.n	801b146 <HAL_DMA_IRQHandler+0x8da>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	681a      	ldr	r2, [r3, #0]
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	f022 0201 	bic.w	r2, r2, #1
 801b144:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	3301      	adds	r3, #1
 801b14a:	60fb      	str	r3, [r7, #12]
 801b14c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b14e:	429a      	cmp	r2, r3
 801b150:	d307      	bcc.n	801b162 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	f003 0301 	and.w	r3, r3, #1
 801b15c:	2b00      	cmp	r3, #0
 801b15e:	d1f2      	bne.n	801b146 <HAL_DMA_IRQHandler+0x8da>
 801b160:	e000      	b.n	801b164 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b162:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	f003 0301 	and.w	r3, r3, #1
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d004      	beq.n	801b17c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2203      	movs	r2, #3
 801b176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b17a:	e003      	b.n	801b184 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2201      	movs	r2, #1
 801b180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	2200      	movs	r2, #0
 801b188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b190:	2b00      	cmp	r3, #0
 801b192:	f000 8272 	beq.w	801b67a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	4798      	blx	r3
 801b19e:	e26c      	b.n	801b67a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	4a43      	ldr	r2, [pc, #268]	@ (801b2b4 <HAL_DMA_IRQHandler+0xa48>)
 801b1a6:	4293      	cmp	r3, r2
 801b1a8:	d022      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	4a42      	ldr	r2, [pc, #264]	@ (801b2b8 <HAL_DMA_IRQHandler+0xa4c>)
 801b1b0:	4293      	cmp	r3, r2
 801b1b2:	d01d      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	4a40      	ldr	r2, [pc, #256]	@ (801b2bc <HAL_DMA_IRQHandler+0xa50>)
 801b1ba:	4293      	cmp	r3, r2
 801b1bc:	d018      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	4a3f      	ldr	r2, [pc, #252]	@ (801b2c0 <HAL_DMA_IRQHandler+0xa54>)
 801b1c4:	4293      	cmp	r3, r2
 801b1c6:	d013      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	4a3d      	ldr	r2, [pc, #244]	@ (801b2c4 <HAL_DMA_IRQHandler+0xa58>)
 801b1ce:	4293      	cmp	r3, r2
 801b1d0:	d00e      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	4a3c      	ldr	r2, [pc, #240]	@ (801b2c8 <HAL_DMA_IRQHandler+0xa5c>)
 801b1d8:	4293      	cmp	r3, r2
 801b1da:	d009      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	4a3a      	ldr	r2, [pc, #232]	@ (801b2cc <HAL_DMA_IRQHandler+0xa60>)
 801b1e2:	4293      	cmp	r3, r2
 801b1e4:	d004      	beq.n	801b1f0 <HAL_DMA_IRQHandler+0x984>
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	4a39      	ldr	r2, [pc, #228]	@ (801b2d0 <HAL_DMA_IRQHandler+0xa64>)
 801b1ec:	4293      	cmp	r3, r2
 801b1ee:	d101      	bne.n	801b1f4 <HAL_DMA_IRQHandler+0x988>
 801b1f0:	2301      	movs	r3, #1
 801b1f2:	e000      	b.n	801b1f6 <HAL_DMA_IRQHandler+0x98a>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	f000 823f 	beq.w	801b67a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b208:	f003 031f 	and.w	r3, r3, #31
 801b20c:	2204      	movs	r2, #4
 801b20e:	409a      	lsls	r2, r3
 801b210:	697b      	ldr	r3, [r7, #20]
 801b212:	4013      	ands	r3, r2
 801b214:	2b00      	cmp	r3, #0
 801b216:	f000 80cd 	beq.w	801b3b4 <HAL_DMA_IRQHandler+0xb48>
 801b21a:	693b      	ldr	r3, [r7, #16]
 801b21c:	f003 0304 	and.w	r3, r3, #4
 801b220:	2b00      	cmp	r3, #0
 801b222:	f000 80c7 	beq.w	801b3b4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b22a:	f003 031f 	and.w	r3, r3, #31
 801b22e:	2204      	movs	r2, #4
 801b230:	409a      	lsls	r2, r3
 801b232:	69fb      	ldr	r3, [r7, #28]
 801b234:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b236:	693b      	ldr	r3, [r7, #16]
 801b238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d049      	beq.n	801b2d4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b240:	693b      	ldr	r3, [r7, #16]
 801b242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b246:	2b00      	cmp	r3, #0
 801b248:	d109      	bne.n	801b25e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b24e:	2b00      	cmp	r3, #0
 801b250:	f000 8210 	beq.w	801b674 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b25c:	e20a      	b.n	801b674 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 8206 	beq.w	801b674 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b270:	e200      	b.n	801b674 <HAL_DMA_IRQHandler+0xe08>
 801b272:	bf00      	nop
 801b274:	40020010 	.word	0x40020010
 801b278:	40020028 	.word	0x40020028
 801b27c:	40020040 	.word	0x40020040
 801b280:	40020058 	.word	0x40020058
 801b284:	40020070 	.word	0x40020070
 801b288:	40020088 	.word	0x40020088
 801b28c:	400200a0 	.word	0x400200a0
 801b290:	400200b8 	.word	0x400200b8
 801b294:	40020410 	.word	0x40020410
 801b298:	40020428 	.word	0x40020428
 801b29c:	40020440 	.word	0x40020440
 801b2a0:	40020458 	.word	0x40020458
 801b2a4:	40020470 	.word	0x40020470
 801b2a8:	40020488 	.word	0x40020488
 801b2ac:	400204a0 	.word	0x400204a0
 801b2b0:	400204b8 	.word	0x400204b8
 801b2b4:	58025408 	.word	0x58025408
 801b2b8:	5802541c 	.word	0x5802541c
 801b2bc:	58025430 	.word	0x58025430
 801b2c0:	58025444 	.word	0x58025444
 801b2c4:	58025458 	.word	0x58025458
 801b2c8:	5802546c 	.word	0x5802546c
 801b2cc:	58025480 	.word	0x58025480
 801b2d0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b2d4:	693b      	ldr	r3, [r7, #16]
 801b2d6:	f003 0320 	and.w	r3, r3, #32
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d160      	bne.n	801b3a0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	4a7f      	ldr	r2, [pc, #508]	@ (801b4e0 <HAL_DMA_IRQHandler+0xc74>)
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	d04a      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	4a7d      	ldr	r2, [pc, #500]	@ (801b4e4 <HAL_DMA_IRQHandler+0xc78>)
 801b2ee:	4293      	cmp	r3, r2
 801b2f0:	d045      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	4a7c      	ldr	r2, [pc, #496]	@ (801b4e8 <HAL_DMA_IRQHandler+0xc7c>)
 801b2f8:	4293      	cmp	r3, r2
 801b2fa:	d040      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	4a7a      	ldr	r2, [pc, #488]	@ (801b4ec <HAL_DMA_IRQHandler+0xc80>)
 801b302:	4293      	cmp	r3, r2
 801b304:	d03b      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	4a79      	ldr	r2, [pc, #484]	@ (801b4f0 <HAL_DMA_IRQHandler+0xc84>)
 801b30c:	4293      	cmp	r3, r2
 801b30e:	d036      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681b      	ldr	r3, [r3, #0]
 801b314:	4a77      	ldr	r2, [pc, #476]	@ (801b4f4 <HAL_DMA_IRQHandler+0xc88>)
 801b316:	4293      	cmp	r3, r2
 801b318:	d031      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	4a76      	ldr	r2, [pc, #472]	@ (801b4f8 <HAL_DMA_IRQHandler+0xc8c>)
 801b320:	4293      	cmp	r3, r2
 801b322:	d02c      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	4a74      	ldr	r2, [pc, #464]	@ (801b4fc <HAL_DMA_IRQHandler+0xc90>)
 801b32a:	4293      	cmp	r3, r2
 801b32c:	d027      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	4a73      	ldr	r2, [pc, #460]	@ (801b500 <HAL_DMA_IRQHandler+0xc94>)
 801b334:	4293      	cmp	r3, r2
 801b336:	d022      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	4a71      	ldr	r2, [pc, #452]	@ (801b504 <HAL_DMA_IRQHandler+0xc98>)
 801b33e:	4293      	cmp	r3, r2
 801b340:	d01d      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	4a70      	ldr	r2, [pc, #448]	@ (801b508 <HAL_DMA_IRQHandler+0xc9c>)
 801b348:	4293      	cmp	r3, r2
 801b34a:	d018      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a6e      	ldr	r2, [pc, #440]	@ (801b50c <HAL_DMA_IRQHandler+0xca0>)
 801b352:	4293      	cmp	r3, r2
 801b354:	d013      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	4a6d      	ldr	r2, [pc, #436]	@ (801b510 <HAL_DMA_IRQHandler+0xca4>)
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d00e      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4a6b      	ldr	r2, [pc, #428]	@ (801b514 <HAL_DMA_IRQHandler+0xca8>)
 801b366:	4293      	cmp	r3, r2
 801b368:	d009      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	4a6a      	ldr	r2, [pc, #424]	@ (801b518 <HAL_DMA_IRQHandler+0xcac>)
 801b370:	4293      	cmp	r3, r2
 801b372:	d004      	beq.n	801b37e <HAL_DMA_IRQHandler+0xb12>
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	4a68      	ldr	r2, [pc, #416]	@ (801b51c <HAL_DMA_IRQHandler+0xcb0>)
 801b37a:	4293      	cmp	r3, r2
 801b37c:	d108      	bne.n	801b390 <HAL_DMA_IRQHandler+0xb24>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	681a      	ldr	r2, [r3, #0]
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	f022 0208 	bic.w	r2, r2, #8
 801b38c:	601a      	str	r2, [r3, #0]
 801b38e:	e007      	b.n	801b3a0 <HAL_DMA_IRQHandler+0xb34>
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	681a      	ldr	r2, [r3, #0]
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	f022 0204 	bic.w	r2, r2, #4
 801b39e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	f000 8165 	beq.w	801b674 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b3ae:	6878      	ldr	r0, [r7, #4]
 801b3b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b3b2:	e15f      	b.n	801b674 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b3b8:	f003 031f 	and.w	r3, r3, #31
 801b3bc:	2202      	movs	r2, #2
 801b3be:	409a      	lsls	r2, r3
 801b3c0:	697b      	ldr	r3, [r7, #20]
 801b3c2:	4013      	ands	r3, r2
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f000 80c5 	beq.w	801b554 <HAL_DMA_IRQHandler+0xce8>
 801b3ca:	693b      	ldr	r3, [r7, #16]
 801b3cc:	f003 0302 	and.w	r3, r3, #2
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	f000 80bf 	beq.w	801b554 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b3da:	f003 031f 	and.w	r3, r3, #31
 801b3de:	2202      	movs	r2, #2
 801b3e0:	409a      	lsls	r2, r3
 801b3e2:	69fb      	ldr	r3, [r7, #28]
 801b3e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b3e6:	693b      	ldr	r3, [r7, #16]
 801b3e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d018      	beq.n	801b422 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b3f0:	693b      	ldr	r3, [r7, #16]
 801b3f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	d109      	bne.n	801b40e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	f000 813a 	beq.w	801b678 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b408:	6878      	ldr	r0, [r7, #4]
 801b40a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b40c:	e134      	b.n	801b678 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b412:	2b00      	cmp	r3, #0
 801b414:	f000 8130 	beq.w	801b678 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b41c:	6878      	ldr	r0, [r7, #4]
 801b41e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b420:	e12a      	b.n	801b678 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b422:	693b      	ldr	r3, [r7, #16]
 801b424:	f003 0320 	and.w	r3, r3, #32
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f040 8089 	bne.w	801b540 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	4a2b      	ldr	r2, [pc, #172]	@ (801b4e0 <HAL_DMA_IRQHandler+0xc74>)
 801b434:	4293      	cmp	r3, r2
 801b436:	d04a      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	4a29      	ldr	r2, [pc, #164]	@ (801b4e4 <HAL_DMA_IRQHandler+0xc78>)
 801b43e:	4293      	cmp	r3, r2
 801b440:	d045      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	4a28      	ldr	r2, [pc, #160]	@ (801b4e8 <HAL_DMA_IRQHandler+0xc7c>)
 801b448:	4293      	cmp	r3, r2
 801b44a:	d040      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	4a26      	ldr	r2, [pc, #152]	@ (801b4ec <HAL_DMA_IRQHandler+0xc80>)
 801b452:	4293      	cmp	r3, r2
 801b454:	d03b      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	4a25      	ldr	r2, [pc, #148]	@ (801b4f0 <HAL_DMA_IRQHandler+0xc84>)
 801b45c:	4293      	cmp	r3, r2
 801b45e:	d036      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	4a23      	ldr	r2, [pc, #140]	@ (801b4f4 <HAL_DMA_IRQHandler+0xc88>)
 801b466:	4293      	cmp	r3, r2
 801b468:	d031      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	4a22      	ldr	r2, [pc, #136]	@ (801b4f8 <HAL_DMA_IRQHandler+0xc8c>)
 801b470:	4293      	cmp	r3, r2
 801b472:	d02c      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	4a20      	ldr	r2, [pc, #128]	@ (801b4fc <HAL_DMA_IRQHandler+0xc90>)
 801b47a:	4293      	cmp	r3, r2
 801b47c:	d027      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	4a1f      	ldr	r2, [pc, #124]	@ (801b500 <HAL_DMA_IRQHandler+0xc94>)
 801b484:	4293      	cmp	r3, r2
 801b486:	d022      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	4a1d      	ldr	r2, [pc, #116]	@ (801b504 <HAL_DMA_IRQHandler+0xc98>)
 801b48e:	4293      	cmp	r3, r2
 801b490:	d01d      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	4a1c      	ldr	r2, [pc, #112]	@ (801b508 <HAL_DMA_IRQHandler+0xc9c>)
 801b498:	4293      	cmp	r3, r2
 801b49a:	d018      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	4a1a      	ldr	r2, [pc, #104]	@ (801b50c <HAL_DMA_IRQHandler+0xca0>)
 801b4a2:	4293      	cmp	r3, r2
 801b4a4:	d013      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	4a19      	ldr	r2, [pc, #100]	@ (801b510 <HAL_DMA_IRQHandler+0xca4>)
 801b4ac:	4293      	cmp	r3, r2
 801b4ae:	d00e      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	4a17      	ldr	r2, [pc, #92]	@ (801b514 <HAL_DMA_IRQHandler+0xca8>)
 801b4b6:	4293      	cmp	r3, r2
 801b4b8:	d009      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	4a16      	ldr	r2, [pc, #88]	@ (801b518 <HAL_DMA_IRQHandler+0xcac>)
 801b4c0:	4293      	cmp	r3, r2
 801b4c2:	d004      	beq.n	801b4ce <HAL_DMA_IRQHandler+0xc62>
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	4a14      	ldr	r2, [pc, #80]	@ (801b51c <HAL_DMA_IRQHandler+0xcb0>)
 801b4ca:	4293      	cmp	r3, r2
 801b4cc:	d128      	bne.n	801b520 <HAL_DMA_IRQHandler+0xcb4>
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	f022 0214 	bic.w	r2, r2, #20
 801b4dc:	601a      	str	r2, [r3, #0]
 801b4de:	e027      	b.n	801b530 <HAL_DMA_IRQHandler+0xcc4>
 801b4e0:	40020010 	.word	0x40020010
 801b4e4:	40020028 	.word	0x40020028
 801b4e8:	40020040 	.word	0x40020040
 801b4ec:	40020058 	.word	0x40020058
 801b4f0:	40020070 	.word	0x40020070
 801b4f4:	40020088 	.word	0x40020088
 801b4f8:	400200a0 	.word	0x400200a0
 801b4fc:	400200b8 	.word	0x400200b8
 801b500:	40020410 	.word	0x40020410
 801b504:	40020428 	.word	0x40020428
 801b508:	40020440 	.word	0x40020440
 801b50c:	40020458 	.word	0x40020458
 801b510:	40020470 	.word	0x40020470
 801b514:	40020488 	.word	0x40020488
 801b518:	400204a0 	.word	0x400204a0
 801b51c:	400204b8 	.word	0x400204b8
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	681a      	ldr	r2, [r3, #0]
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	681b      	ldr	r3, [r3, #0]
 801b52a:	f022 020a 	bic.w	r2, r2, #10
 801b52e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	2201      	movs	r2, #1
 801b534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	2200      	movs	r2, #0
 801b53c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b544:	2b00      	cmp	r3, #0
 801b546:	f000 8097 	beq.w	801b678 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b552:	e091      	b.n	801b678 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b558:	f003 031f 	and.w	r3, r3, #31
 801b55c:	2208      	movs	r2, #8
 801b55e:	409a      	lsls	r2, r3
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	4013      	ands	r3, r2
 801b564:	2b00      	cmp	r3, #0
 801b566:	f000 8088 	beq.w	801b67a <HAL_DMA_IRQHandler+0xe0e>
 801b56a:	693b      	ldr	r3, [r7, #16]
 801b56c:	f003 0308 	and.w	r3, r3, #8
 801b570:	2b00      	cmp	r3, #0
 801b572:	f000 8082 	beq.w	801b67a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	4a41      	ldr	r2, [pc, #260]	@ (801b680 <HAL_DMA_IRQHandler+0xe14>)
 801b57c:	4293      	cmp	r3, r2
 801b57e:	d04a      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	4a3f      	ldr	r2, [pc, #252]	@ (801b684 <HAL_DMA_IRQHandler+0xe18>)
 801b586:	4293      	cmp	r3, r2
 801b588:	d045      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	4a3e      	ldr	r2, [pc, #248]	@ (801b688 <HAL_DMA_IRQHandler+0xe1c>)
 801b590:	4293      	cmp	r3, r2
 801b592:	d040      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	4a3c      	ldr	r2, [pc, #240]	@ (801b68c <HAL_DMA_IRQHandler+0xe20>)
 801b59a:	4293      	cmp	r3, r2
 801b59c:	d03b      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	4a3b      	ldr	r2, [pc, #236]	@ (801b690 <HAL_DMA_IRQHandler+0xe24>)
 801b5a4:	4293      	cmp	r3, r2
 801b5a6:	d036      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	4a39      	ldr	r2, [pc, #228]	@ (801b694 <HAL_DMA_IRQHandler+0xe28>)
 801b5ae:	4293      	cmp	r3, r2
 801b5b0:	d031      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	4a38      	ldr	r2, [pc, #224]	@ (801b698 <HAL_DMA_IRQHandler+0xe2c>)
 801b5b8:	4293      	cmp	r3, r2
 801b5ba:	d02c      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	4a36      	ldr	r2, [pc, #216]	@ (801b69c <HAL_DMA_IRQHandler+0xe30>)
 801b5c2:	4293      	cmp	r3, r2
 801b5c4:	d027      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	681b      	ldr	r3, [r3, #0]
 801b5ca:	4a35      	ldr	r2, [pc, #212]	@ (801b6a0 <HAL_DMA_IRQHandler+0xe34>)
 801b5cc:	4293      	cmp	r3, r2
 801b5ce:	d022      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	4a33      	ldr	r2, [pc, #204]	@ (801b6a4 <HAL_DMA_IRQHandler+0xe38>)
 801b5d6:	4293      	cmp	r3, r2
 801b5d8:	d01d      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	4a32      	ldr	r2, [pc, #200]	@ (801b6a8 <HAL_DMA_IRQHandler+0xe3c>)
 801b5e0:	4293      	cmp	r3, r2
 801b5e2:	d018      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	4a30      	ldr	r2, [pc, #192]	@ (801b6ac <HAL_DMA_IRQHandler+0xe40>)
 801b5ea:	4293      	cmp	r3, r2
 801b5ec:	d013      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4a2f      	ldr	r2, [pc, #188]	@ (801b6b0 <HAL_DMA_IRQHandler+0xe44>)
 801b5f4:	4293      	cmp	r3, r2
 801b5f6:	d00e      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	4a2d      	ldr	r2, [pc, #180]	@ (801b6b4 <HAL_DMA_IRQHandler+0xe48>)
 801b5fe:	4293      	cmp	r3, r2
 801b600:	d009      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	4a2c      	ldr	r2, [pc, #176]	@ (801b6b8 <HAL_DMA_IRQHandler+0xe4c>)
 801b608:	4293      	cmp	r3, r2
 801b60a:	d004      	beq.n	801b616 <HAL_DMA_IRQHandler+0xdaa>
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	4a2a      	ldr	r2, [pc, #168]	@ (801b6bc <HAL_DMA_IRQHandler+0xe50>)
 801b612:	4293      	cmp	r3, r2
 801b614:	d108      	bne.n	801b628 <HAL_DMA_IRQHandler+0xdbc>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	681a      	ldr	r2, [r3, #0]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	f022 021c 	bic.w	r2, r2, #28
 801b624:	601a      	str	r2, [r3, #0]
 801b626:	e007      	b.n	801b638 <HAL_DMA_IRQHandler+0xdcc>
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	681a      	ldr	r2, [r3, #0]
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	f022 020e 	bic.w	r2, r2, #14
 801b636:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b63c:	f003 031f 	and.w	r3, r3, #31
 801b640:	2201      	movs	r2, #1
 801b642:	409a      	lsls	r2, r3
 801b644:	69fb      	ldr	r3, [r7, #28]
 801b646:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	2201      	movs	r2, #1
 801b64c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2201      	movs	r2, #1
 801b652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	2200      	movs	r2, #0
 801b65a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b662:	2b00      	cmp	r3, #0
 801b664:	d009      	beq.n	801b67a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b66a:	6878      	ldr	r0, [r7, #4]
 801b66c:	4798      	blx	r3
 801b66e:	e004      	b.n	801b67a <HAL_DMA_IRQHandler+0xe0e>
          return;
 801b670:	bf00      	nop
 801b672:	e002      	b.n	801b67a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b674:	bf00      	nop
 801b676:	e000      	b.n	801b67a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b678:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b67a:	3728      	adds	r7, #40	@ 0x28
 801b67c:	46bd      	mov	sp, r7
 801b67e:	bd80      	pop	{r7, pc}
 801b680:	40020010 	.word	0x40020010
 801b684:	40020028 	.word	0x40020028
 801b688:	40020040 	.word	0x40020040
 801b68c:	40020058 	.word	0x40020058
 801b690:	40020070 	.word	0x40020070
 801b694:	40020088 	.word	0x40020088
 801b698:	400200a0 	.word	0x400200a0
 801b69c:	400200b8 	.word	0x400200b8
 801b6a0:	40020410 	.word	0x40020410
 801b6a4:	40020428 	.word	0x40020428
 801b6a8:	40020440 	.word	0x40020440
 801b6ac:	40020458 	.word	0x40020458
 801b6b0:	40020470 	.word	0x40020470
 801b6b4:	40020488 	.word	0x40020488
 801b6b8:	400204a0 	.word	0x400204a0
 801b6bc:	400204b8 	.word	0x400204b8

0801b6c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b6c0:	b480      	push	{r7}
 801b6c2:	b085      	sub	sp, #20
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4a42      	ldr	r2, [pc, #264]	@ (801b7d8 <DMA_CalcBaseAndBitshift+0x118>)
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	d04a      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	4a41      	ldr	r2, [pc, #260]	@ (801b7dc <DMA_CalcBaseAndBitshift+0x11c>)
 801b6d8:	4293      	cmp	r3, r2
 801b6da:	d045      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	4a3f      	ldr	r2, [pc, #252]	@ (801b7e0 <DMA_CalcBaseAndBitshift+0x120>)
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d040      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	4a3e      	ldr	r2, [pc, #248]	@ (801b7e4 <DMA_CalcBaseAndBitshift+0x124>)
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d03b      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	4a3c      	ldr	r2, [pc, #240]	@ (801b7e8 <DMA_CalcBaseAndBitshift+0x128>)
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d036      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	4a3b      	ldr	r2, [pc, #236]	@ (801b7ec <DMA_CalcBaseAndBitshift+0x12c>)
 801b700:	4293      	cmp	r3, r2
 801b702:	d031      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	4a39      	ldr	r2, [pc, #228]	@ (801b7f0 <DMA_CalcBaseAndBitshift+0x130>)
 801b70a:	4293      	cmp	r3, r2
 801b70c:	d02c      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	4a38      	ldr	r2, [pc, #224]	@ (801b7f4 <DMA_CalcBaseAndBitshift+0x134>)
 801b714:	4293      	cmp	r3, r2
 801b716:	d027      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	4a36      	ldr	r2, [pc, #216]	@ (801b7f8 <DMA_CalcBaseAndBitshift+0x138>)
 801b71e:	4293      	cmp	r3, r2
 801b720:	d022      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	681b      	ldr	r3, [r3, #0]
 801b726:	4a35      	ldr	r2, [pc, #212]	@ (801b7fc <DMA_CalcBaseAndBitshift+0x13c>)
 801b728:	4293      	cmp	r3, r2
 801b72a:	d01d      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	4a33      	ldr	r2, [pc, #204]	@ (801b800 <DMA_CalcBaseAndBitshift+0x140>)
 801b732:	4293      	cmp	r3, r2
 801b734:	d018      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	4a32      	ldr	r2, [pc, #200]	@ (801b804 <DMA_CalcBaseAndBitshift+0x144>)
 801b73c:	4293      	cmp	r3, r2
 801b73e:	d013      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	4a30      	ldr	r2, [pc, #192]	@ (801b808 <DMA_CalcBaseAndBitshift+0x148>)
 801b746:	4293      	cmp	r3, r2
 801b748:	d00e      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b74a:	687b      	ldr	r3, [r7, #4]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	4a2f      	ldr	r2, [pc, #188]	@ (801b80c <DMA_CalcBaseAndBitshift+0x14c>)
 801b750:	4293      	cmp	r3, r2
 801b752:	d009      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	681b      	ldr	r3, [r3, #0]
 801b758:	4a2d      	ldr	r2, [pc, #180]	@ (801b810 <DMA_CalcBaseAndBitshift+0x150>)
 801b75a:	4293      	cmp	r3, r2
 801b75c:	d004      	beq.n	801b768 <DMA_CalcBaseAndBitshift+0xa8>
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	4a2c      	ldr	r2, [pc, #176]	@ (801b814 <DMA_CalcBaseAndBitshift+0x154>)
 801b764:	4293      	cmp	r3, r2
 801b766:	d101      	bne.n	801b76c <DMA_CalcBaseAndBitshift+0xac>
 801b768:	2301      	movs	r3, #1
 801b76a:	e000      	b.n	801b76e <DMA_CalcBaseAndBitshift+0xae>
 801b76c:	2300      	movs	r3, #0
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d024      	beq.n	801b7bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	681b      	ldr	r3, [r3, #0]
 801b776:	b2db      	uxtb	r3, r3
 801b778:	3b10      	subs	r3, #16
 801b77a:	4a27      	ldr	r2, [pc, #156]	@ (801b818 <DMA_CalcBaseAndBitshift+0x158>)
 801b77c:	fba2 2303 	umull	r2, r3, r2, r3
 801b780:	091b      	lsrs	r3, r3, #4
 801b782:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b784:	68fb      	ldr	r3, [r7, #12]
 801b786:	f003 0307 	and.w	r3, r3, #7
 801b78a:	4a24      	ldr	r2, [pc, #144]	@ (801b81c <DMA_CalcBaseAndBitshift+0x15c>)
 801b78c:	5cd3      	ldrb	r3, [r2, r3]
 801b78e:	461a      	mov	r2, r3
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	2b03      	cmp	r3, #3
 801b798:	d908      	bls.n	801b7ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	461a      	mov	r2, r3
 801b7a0:	4b1f      	ldr	r3, [pc, #124]	@ (801b820 <DMA_CalcBaseAndBitshift+0x160>)
 801b7a2:	4013      	ands	r3, r2
 801b7a4:	1d1a      	adds	r2, r3, #4
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	659a      	str	r2, [r3, #88]	@ 0x58
 801b7aa:	e00d      	b.n	801b7c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	4b1b      	ldr	r3, [pc, #108]	@ (801b820 <DMA_CalcBaseAndBitshift+0x160>)
 801b7b4:	4013      	ands	r3, r2
 801b7b6:	687a      	ldr	r2, [r7, #4]
 801b7b8:	6593      	str	r3, [r2, #88]	@ 0x58
 801b7ba:	e005      	b.n	801b7c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	3714      	adds	r7, #20
 801b7d0:	46bd      	mov	sp, r7
 801b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7d6:	4770      	bx	lr
 801b7d8:	40020010 	.word	0x40020010
 801b7dc:	40020028 	.word	0x40020028
 801b7e0:	40020040 	.word	0x40020040
 801b7e4:	40020058 	.word	0x40020058
 801b7e8:	40020070 	.word	0x40020070
 801b7ec:	40020088 	.word	0x40020088
 801b7f0:	400200a0 	.word	0x400200a0
 801b7f4:	400200b8 	.word	0x400200b8
 801b7f8:	40020410 	.word	0x40020410
 801b7fc:	40020428 	.word	0x40020428
 801b800:	40020440 	.word	0x40020440
 801b804:	40020458 	.word	0x40020458
 801b808:	40020470 	.word	0x40020470
 801b80c:	40020488 	.word	0x40020488
 801b810:	400204a0 	.word	0x400204a0
 801b814:	400204b8 	.word	0x400204b8
 801b818:	aaaaaaab 	.word	0xaaaaaaab
 801b81c:	08027128 	.word	0x08027128
 801b820:	fffffc00 	.word	0xfffffc00

0801b824 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b824:	b480      	push	{r7}
 801b826:	b085      	sub	sp, #20
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b82c:	2300      	movs	r3, #0
 801b82e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	699b      	ldr	r3, [r3, #24]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d120      	bne.n	801b87a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b83c:	2b03      	cmp	r3, #3
 801b83e:	d858      	bhi.n	801b8f2 <DMA_CheckFifoParam+0xce>
 801b840:	a201      	add	r2, pc, #4	@ (adr r2, 801b848 <DMA_CheckFifoParam+0x24>)
 801b842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b846:	bf00      	nop
 801b848:	0801b859 	.word	0x0801b859
 801b84c:	0801b86b 	.word	0x0801b86b
 801b850:	0801b859 	.word	0x0801b859
 801b854:	0801b8f3 	.word	0x0801b8f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b85c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b860:	2b00      	cmp	r3, #0
 801b862:	d048      	beq.n	801b8f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b864:	2301      	movs	r3, #1
 801b866:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b868:	e045      	b.n	801b8f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b86e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b872:	d142      	bne.n	801b8fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b874:	2301      	movs	r3, #1
 801b876:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b878:	e03f      	b.n	801b8fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	699b      	ldr	r3, [r3, #24]
 801b87e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b882:	d123      	bne.n	801b8cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b888:	2b03      	cmp	r3, #3
 801b88a:	d838      	bhi.n	801b8fe <DMA_CheckFifoParam+0xda>
 801b88c:	a201      	add	r2, pc, #4	@ (adr r2, 801b894 <DMA_CheckFifoParam+0x70>)
 801b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b892:	bf00      	nop
 801b894:	0801b8a5 	.word	0x0801b8a5
 801b898:	0801b8ab 	.word	0x0801b8ab
 801b89c:	0801b8a5 	.word	0x0801b8a5
 801b8a0:	0801b8bd 	.word	0x0801b8bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b8a4:	2301      	movs	r3, #1
 801b8a6:	73fb      	strb	r3, [r7, #15]
        break;
 801b8a8:	e030      	b.n	801b90c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d025      	beq.n	801b902 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b8b6:	2301      	movs	r3, #1
 801b8b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b8ba:	e022      	b.n	801b902 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b8c4:	d11f      	bne.n	801b906 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b8ca:	e01c      	b.n	801b906 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b8d0:	2b02      	cmp	r3, #2
 801b8d2:	d902      	bls.n	801b8da <DMA_CheckFifoParam+0xb6>
 801b8d4:	2b03      	cmp	r3, #3
 801b8d6:	d003      	beq.n	801b8e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b8d8:	e018      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b8da:	2301      	movs	r3, #1
 801b8dc:	73fb      	strb	r3, [r7, #15]
        break;
 801b8de:	e015      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d00e      	beq.n	801b90a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b8ec:	2301      	movs	r3, #1
 801b8ee:	73fb      	strb	r3, [r7, #15]
    break;
 801b8f0:	e00b      	b.n	801b90a <DMA_CheckFifoParam+0xe6>
        break;
 801b8f2:	bf00      	nop
 801b8f4:	e00a      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        break;
 801b8f6:	bf00      	nop
 801b8f8:	e008      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        break;
 801b8fa:	bf00      	nop
 801b8fc:	e006      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        break;
 801b8fe:	bf00      	nop
 801b900:	e004      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        break;
 801b902:	bf00      	nop
 801b904:	e002      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
        break;
 801b906:	bf00      	nop
 801b908:	e000      	b.n	801b90c <DMA_CheckFifoParam+0xe8>
    break;
 801b90a:	bf00      	nop
    }
  }

  return status;
 801b90c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b90e:	4618      	mov	r0, r3
 801b910:	3714      	adds	r7, #20
 801b912:	46bd      	mov	sp, r7
 801b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b918:	4770      	bx	lr
 801b91a:	bf00      	nop

0801b91c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b91c:	b480      	push	{r7}
 801b91e:	b085      	sub	sp, #20
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b924:	687b      	ldr	r3, [r7, #4]
 801b926:	681b      	ldr	r3, [r3, #0]
 801b928:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	4a38      	ldr	r2, [pc, #224]	@ (801ba10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b930:	4293      	cmp	r3, r2
 801b932:	d022      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	4a36      	ldr	r2, [pc, #216]	@ (801ba14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b93a:	4293      	cmp	r3, r2
 801b93c:	d01d      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	681b      	ldr	r3, [r3, #0]
 801b942:	4a35      	ldr	r2, [pc, #212]	@ (801ba18 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b944:	4293      	cmp	r3, r2
 801b946:	d018      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	4a33      	ldr	r2, [pc, #204]	@ (801ba1c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b94e:	4293      	cmp	r3, r2
 801b950:	d013      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	4a32      	ldr	r2, [pc, #200]	@ (801ba20 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b958:	4293      	cmp	r3, r2
 801b95a:	d00e      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	681b      	ldr	r3, [r3, #0]
 801b960:	4a30      	ldr	r2, [pc, #192]	@ (801ba24 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b962:	4293      	cmp	r3, r2
 801b964:	d009      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	4a2f      	ldr	r2, [pc, #188]	@ (801ba28 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b96c:	4293      	cmp	r3, r2
 801b96e:	d004      	beq.n	801b97a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	4a2d      	ldr	r2, [pc, #180]	@ (801ba2c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b976:	4293      	cmp	r3, r2
 801b978:	d101      	bne.n	801b97e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b97a:	2301      	movs	r3, #1
 801b97c:	e000      	b.n	801b980 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b97e:	2300      	movs	r3, #0
 801b980:	2b00      	cmp	r3, #0
 801b982:	d01a      	beq.n	801b9ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	b2db      	uxtb	r3, r3
 801b98a:	3b08      	subs	r3, #8
 801b98c:	4a28      	ldr	r2, [pc, #160]	@ (801ba30 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b98e:	fba2 2303 	umull	r2, r3, r2, r3
 801b992:	091b      	lsrs	r3, r3, #4
 801b994:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b996:	68fa      	ldr	r2, [r7, #12]
 801b998:	4b26      	ldr	r3, [pc, #152]	@ (801ba34 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b99a:	4413      	add	r3, r2
 801b99c:	009b      	lsls	r3, r3, #2
 801b99e:	461a      	mov	r2, r3
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	4a24      	ldr	r2, [pc, #144]	@ (801ba38 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b9a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	f003 031f 	and.w	r3, r3, #31
 801b9b0:	2201      	movs	r2, #1
 801b9b2:	409a      	lsls	r2, r3
 801b9b4:	687b      	ldr	r3, [r7, #4]
 801b9b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b9b8:	e024      	b.n	801ba04 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	b2db      	uxtb	r3, r3
 801b9c0:	3b10      	subs	r3, #16
 801b9c2:	4a1e      	ldr	r2, [pc, #120]	@ (801ba3c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b9c4:	fba2 2303 	umull	r2, r3, r2, r3
 801b9c8:	091b      	lsrs	r3, r3, #4
 801b9ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	4a1c      	ldr	r2, [pc, #112]	@ (801ba40 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b9d0:	4293      	cmp	r3, r2
 801b9d2:	d806      	bhi.n	801b9e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b9d4:	68bb      	ldr	r3, [r7, #8]
 801b9d6:	4a1b      	ldr	r2, [pc, #108]	@ (801ba44 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b9d8:	4293      	cmp	r3, r2
 801b9da:	d902      	bls.n	801b9e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	3308      	adds	r3, #8
 801b9e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b9e2:	68fa      	ldr	r2, [r7, #12]
 801b9e4:	4b18      	ldr	r3, [pc, #96]	@ (801ba48 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b9e6:	4413      	add	r3, r2
 801b9e8:	009b      	lsls	r3, r3, #2
 801b9ea:	461a      	mov	r2, r3
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	4a16      	ldr	r2, [pc, #88]	@ (801ba4c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b9f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	f003 031f 	and.w	r3, r3, #31
 801b9fc:	2201      	movs	r2, #1
 801b9fe:	409a      	lsls	r2, r3
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ba04:	bf00      	nop
 801ba06:	3714      	adds	r7, #20
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba0e:	4770      	bx	lr
 801ba10:	58025408 	.word	0x58025408
 801ba14:	5802541c 	.word	0x5802541c
 801ba18:	58025430 	.word	0x58025430
 801ba1c:	58025444 	.word	0x58025444
 801ba20:	58025458 	.word	0x58025458
 801ba24:	5802546c 	.word	0x5802546c
 801ba28:	58025480 	.word	0x58025480
 801ba2c:	58025494 	.word	0x58025494
 801ba30:	cccccccd 	.word	0xcccccccd
 801ba34:	16009600 	.word	0x16009600
 801ba38:	58025880 	.word	0x58025880
 801ba3c:	aaaaaaab 	.word	0xaaaaaaab
 801ba40:	400204b8 	.word	0x400204b8
 801ba44:	4002040f 	.word	0x4002040f
 801ba48:	10008200 	.word	0x10008200
 801ba4c:	40020880 	.word	0x40020880

0801ba50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801ba50:	b480      	push	{r7}
 801ba52:	b085      	sub	sp, #20
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	685b      	ldr	r3, [r3, #4]
 801ba5c:	b2db      	uxtb	r3, r3
 801ba5e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d04a      	beq.n	801bafc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	2b08      	cmp	r3, #8
 801ba6a:	d847      	bhi.n	801bafc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	4a25      	ldr	r2, [pc, #148]	@ (801bb08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801ba72:	4293      	cmp	r3, r2
 801ba74:	d022      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	4a24      	ldr	r2, [pc, #144]	@ (801bb0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801ba7c:	4293      	cmp	r3, r2
 801ba7e:	d01d      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4a22      	ldr	r2, [pc, #136]	@ (801bb10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801ba86:	4293      	cmp	r3, r2
 801ba88:	d018      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	4a21      	ldr	r2, [pc, #132]	@ (801bb14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801ba90:	4293      	cmp	r3, r2
 801ba92:	d013      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	4a1f      	ldr	r2, [pc, #124]	@ (801bb18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801ba9a:	4293      	cmp	r3, r2
 801ba9c:	d00e      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	4a1e      	ldr	r2, [pc, #120]	@ (801bb1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801baa4:	4293      	cmp	r3, r2
 801baa6:	d009      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	4a1c      	ldr	r2, [pc, #112]	@ (801bb20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801baae:	4293      	cmp	r3, r2
 801bab0:	d004      	beq.n	801babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	4a1b      	ldr	r2, [pc, #108]	@ (801bb24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801bab8:	4293      	cmp	r3, r2
 801baba:	d101      	bne.n	801bac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801babc:	2301      	movs	r3, #1
 801babe:	e000      	b.n	801bac2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801bac0:	2300      	movs	r3, #0
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d00a      	beq.n	801badc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801bac6:	68fa      	ldr	r2, [r7, #12]
 801bac8:	4b17      	ldr	r3, [pc, #92]	@ (801bb28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801baca:	4413      	add	r3, r2
 801bacc:	009b      	lsls	r3, r3, #2
 801bace:	461a      	mov	r2, r3
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	4a15      	ldr	r2, [pc, #84]	@ (801bb2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801bad8:	671a      	str	r2, [r3, #112]	@ 0x70
 801bada:	e009      	b.n	801baf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801badc:	68fa      	ldr	r2, [r7, #12]
 801bade:	4b14      	ldr	r3, [pc, #80]	@ (801bb30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801bae0:	4413      	add	r3, r2
 801bae2:	009b      	lsls	r3, r3, #2
 801bae4:	461a      	mov	r2, r3
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	4a11      	ldr	r2, [pc, #68]	@ (801bb34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801baee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	3b01      	subs	r3, #1
 801baf4:	2201      	movs	r2, #1
 801baf6:	409a      	lsls	r2, r3
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801bafc:	bf00      	nop
 801bafe:	3714      	adds	r7, #20
 801bb00:	46bd      	mov	sp, r7
 801bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb06:	4770      	bx	lr
 801bb08:	58025408 	.word	0x58025408
 801bb0c:	5802541c 	.word	0x5802541c
 801bb10:	58025430 	.word	0x58025430
 801bb14:	58025444 	.word	0x58025444
 801bb18:	58025458 	.word	0x58025458
 801bb1c:	5802546c 	.word	0x5802546c
 801bb20:	58025480 	.word	0x58025480
 801bb24:	58025494 	.word	0x58025494
 801bb28:	1600963f 	.word	0x1600963f
 801bb2c:	58025940 	.word	0x58025940
 801bb30:	1000823f 	.word	0x1000823f
 801bb34:	40020940 	.word	0x40020940

0801bb38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bb38:	b480      	push	{r7}
 801bb3a:	b089      	sub	sp, #36	@ 0x24
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
 801bb40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bb42:	2300      	movs	r3, #0
 801bb44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801bb46:	4b89      	ldr	r3, [pc, #548]	@ (801bd6c <HAL_GPIO_Init+0x234>)
 801bb48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801bb4a:	e194      	b.n	801be76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bb4c:	683b      	ldr	r3, [r7, #0]
 801bb4e:	681a      	ldr	r2, [r3, #0]
 801bb50:	2101      	movs	r1, #1
 801bb52:	69fb      	ldr	r3, [r7, #28]
 801bb54:	fa01 f303 	lsl.w	r3, r1, r3
 801bb58:	4013      	ands	r3, r2
 801bb5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801bb5c:	693b      	ldr	r3, [r7, #16]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	f000 8186 	beq.w	801be70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	685b      	ldr	r3, [r3, #4]
 801bb68:	f003 0303 	and.w	r3, r3, #3
 801bb6c:	2b01      	cmp	r3, #1
 801bb6e:	d005      	beq.n	801bb7c <HAL_GPIO_Init+0x44>
 801bb70:	683b      	ldr	r3, [r7, #0]
 801bb72:	685b      	ldr	r3, [r3, #4]
 801bb74:	f003 0303 	and.w	r3, r3, #3
 801bb78:	2b02      	cmp	r3, #2
 801bb7a:	d130      	bne.n	801bbde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	689b      	ldr	r3, [r3, #8]
 801bb80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bb82:	69fb      	ldr	r3, [r7, #28]
 801bb84:	005b      	lsls	r3, r3, #1
 801bb86:	2203      	movs	r2, #3
 801bb88:	fa02 f303 	lsl.w	r3, r2, r3
 801bb8c:	43db      	mvns	r3, r3
 801bb8e:	69ba      	ldr	r2, [r7, #24]
 801bb90:	4013      	ands	r3, r2
 801bb92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bb94:	683b      	ldr	r3, [r7, #0]
 801bb96:	68da      	ldr	r2, [r3, #12]
 801bb98:	69fb      	ldr	r3, [r7, #28]
 801bb9a:	005b      	lsls	r3, r3, #1
 801bb9c:	fa02 f303 	lsl.w	r3, r2, r3
 801bba0:	69ba      	ldr	r2, [r7, #24]
 801bba2:	4313      	orrs	r3, r2
 801bba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	69ba      	ldr	r2, [r7, #24]
 801bbaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	685b      	ldr	r3, [r3, #4]
 801bbb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bbb2:	2201      	movs	r2, #1
 801bbb4:	69fb      	ldr	r3, [r7, #28]
 801bbb6:	fa02 f303 	lsl.w	r3, r2, r3
 801bbba:	43db      	mvns	r3, r3
 801bbbc:	69ba      	ldr	r2, [r7, #24]
 801bbbe:	4013      	ands	r3, r2
 801bbc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bbc2:	683b      	ldr	r3, [r7, #0]
 801bbc4:	685b      	ldr	r3, [r3, #4]
 801bbc6:	091b      	lsrs	r3, r3, #4
 801bbc8:	f003 0201 	and.w	r2, r3, #1
 801bbcc:	69fb      	ldr	r3, [r7, #28]
 801bbce:	fa02 f303 	lsl.w	r3, r2, r3
 801bbd2:	69ba      	ldr	r2, [r7, #24]
 801bbd4:	4313      	orrs	r3, r2
 801bbd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	69ba      	ldr	r2, [r7, #24]
 801bbdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bbde:	683b      	ldr	r3, [r7, #0]
 801bbe0:	685b      	ldr	r3, [r3, #4]
 801bbe2:	f003 0303 	and.w	r3, r3, #3
 801bbe6:	2b03      	cmp	r3, #3
 801bbe8:	d017      	beq.n	801bc1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bbf0:	69fb      	ldr	r3, [r7, #28]
 801bbf2:	005b      	lsls	r3, r3, #1
 801bbf4:	2203      	movs	r2, #3
 801bbf6:	fa02 f303 	lsl.w	r3, r2, r3
 801bbfa:	43db      	mvns	r3, r3
 801bbfc:	69ba      	ldr	r2, [r7, #24]
 801bbfe:	4013      	ands	r3, r2
 801bc00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bc02:	683b      	ldr	r3, [r7, #0]
 801bc04:	689a      	ldr	r2, [r3, #8]
 801bc06:	69fb      	ldr	r3, [r7, #28]
 801bc08:	005b      	lsls	r3, r3, #1
 801bc0a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc0e:	69ba      	ldr	r2, [r7, #24]
 801bc10:	4313      	orrs	r3, r2
 801bc12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	69ba      	ldr	r2, [r7, #24]
 801bc18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bc1a:	683b      	ldr	r3, [r7, #0]
 801bc1c:	685b      	ldr	r3, [r3, #4]
 801bc1e:	f003 0303 	and.w	r3, r3, #3
 801bc22:	2b02      	cmp	r3, #2
 801bc24:	d123      	bne.n	801bc6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bc26:	69fb      	ldr	r3, [r7, #28]
 801bc28:	08da      	lsrs	r2, r3, #3
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	3208      	adds	r2, #8
 801bc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bc32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bc34:	69fb      	ldr	r3, [r7, #28]
 801bc36:	f003 0307 	and.w	r3, r3, #7
 801bc3a:	009b      	lsls	r3, r3, #2
 801bc3c:	220f      	movs	r2, #15
 801bc3e:	fa02 f303 	lsl.w	r3, r2, r3
 801bc42:	43db      	mvns	r3, r3
 801bc44:	69ba      	ldr	r2, [r7, #24]
 801bc46:	4013      	ands	r3, r2
 801bc48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	691a      	ldr	r2, [r3, #16]
 801bc4e:	69fb      	ldr	r3, [r7, #28]
 801bc50:	f003 0307 	and.w	r3, r3, #7
 801bc54:	009b      	lsls	r3, r3, #2
 801bc56:	fa02 f303 	lsl.w	r3, r2, r3
 801bc5a:	69ba      	ldr	r2, [r7, #24]
 801bc5c:	4313      	orrs	r3, r2
 801bc5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801bc60:	69fb      	ldr	r3, [r7, #28]
 801bc62:	08da      	lsrs	r2, r3, #3
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	3208      	adds	r2, #8
 801bc68:	69b9      	ldr	r1, [r7, #24]
 801bc6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bc74:	69fb      	ldr	r3, [r7, #28]
 801bc76:	005b      	lsls	r3, r3, #1
 801bc78:	2203      	movs	r2, #3
 801bc7a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc7e:	43db      	mvns	r3, r3
 801bc80:	69ba      	ldr	r2, [r7, #24]
 801bc82:	4013      	ands	r3, r2
 801bc84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bc86:	683b      	ldr	r3, [r7, #0]
 801bc88:	685b      	ldr	r3, [r3, #4]
 801bc8a:	f003 0203 	and.w	r2, r3, #3
 801bc8e:	69fb      	ldr	r3, [r7, #28]
 801bc90:	005b      	lsls	r3, r3, #1
 801bc92:	fa02 f303 	lsl.w	r3, r2, r3
 801bc96:	69ba      	ldr	r2, [r7, #24]
 801bc98:	4313      	orrs	r3, r2
 801bc9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	69ba      	ldr	r2, [r7, #24]
 801bca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801bca2:	683b      	ldr	r3, [r7, #0]
 801bca4:	685b      	ldr	r3, [r3, #4]
 801bca6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	f000 80e0 	beq.w	801be70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bcb0:	4b2f      	ldr	r3, [pc, #188]	@ (801bd70 <HAL_GPIO_Init+0x238>)
 801bcb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bcb6:	4a2e      	ldr	r2, [pc, #184]	@ (801bd70 <HAL_GPIO_Init+0x238>)
 801bcb8:	f043 0302 	orr.w	r3, r3, #2
 801bcbc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801bcc0:	4b2b      	ldr	r3, [pc, #172]	@ (801bd70 <HAL_GPIO_Init+0x238>)
 801bcc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801bcc6:	f003 0302 	and.w	r3, r3, #2
 801bcca:	60fb      	str	r3, [r7, #12]
 801bccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bcce:	4a29      	ldr	r2, [pc, #164]	@ (801bd74 <HAL_GPIO_Init+0x23c>)
 801bcd0:	69fb      	ldr	r3, [r7, #28]
 801bcd2:	089b      	lsrs	r3, r3, #2
 801bcd4:	3302      	adds	r3, #2
 801bcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bcda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bcdc:	69fb      	ldr	r3, [r7, #28]
 801bcde:	f003 0303 	and.w	r3, r3, #3
 801bce2:	009b      	lsls	r3, r3, #2
 801bce4:	220f      	movs	r2, #15
 801bce6:	fa02 f303 	lsl.w	r3, r2, r3
 801bcea:	43db      	mvns	r3, r3
 801bcec:	69ba      	ldr	r2, [r7, #24]
 801bcee:	4013      	ands	r3, r2
 801bcf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	4a20      	ldr	r2, [pc, #128]	@ (801bd78 <HAL_GPIO_Init+0x240>)
 801bcf6:	4293      	cmp	r3, r2
 801bcf8:	d052      	beq.n	801bda0 <HAL_GPIO_Init+0x268>
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	4a1f      	ldr	r2, [pc, #124]	@ (801bd7c <HAL_GPIO_Init+0x244>)
 801bcfe:	4293      	cmp	r3, r2
 801bd00:	d031      	beq.n	801bd66 <HAL_GPIO_Init+0x22e>
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	4a1e      	ldr	r2, [pc, #120]	@ (801bd80 <HAL_GPIO_Init+0x248>)
 801bd06:	4293      	cmp	r3, r2
 801bd08:	d02b      	beq.n	801bd62 <HAL_GPIO_Init+0x22a>
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	4a1d      	ldr	r2, [pc, #116]	@ (801bd84 <HAL_GPIO_Init+0x24c>)
 801bd0e:	4293      	cmp	r3, r2
 801bd10:	d025      	beq.n	801bd5e <HAL_GPIO_Init+0x226>
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	4a1c      	ldr	r2, [pc, #112]	@ (801bd88 <HAL_GPIO_Init+0x250>)
 801bd16:	4293      	cmp	r3, r2
 801bd18:	d01f      	beq.n	801bd5a <HAL_GPIO_Init+0x222>
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	4a1b      	ldr	r2, [pc, #108]	@ (801bd8c <HAL_GPIO_Init+0x254>)
 801bd1e:	4293      	cmp	r3, r2
 801bd20:	d019      	beq.n	801bd56 <HAL_GPIO_Init+0x21e>
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	4a1a      	ldr	r2, [pc, #104]	@ (801bd90 <HAL_GPIO_Init+0x258>)
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d013      	beq.n	801bd52 <HAL_GPIO_Init+0x21a>
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	4a19      	ldr	r2, [pc, #100]	@ (801bd94 <HAL_GPIO_Init+0x25c>)
 801bd2e:	4293      	cmp	r3, r2
 801bd30:	d00d      	beq.n	801bd4e <HAL_GPIO_Init+0x216>
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	4a18      	ldr	r2, [pc, #96]	@ (801bd98 <HAL_GPIO_Init+0x260>)
 801bd36:	4293      	cmp	r3, r2
 801bd38:	d007      	beq.n	801bd4a <HAL_GPIO_Init+0x212>
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	4a17      	ldr	r2, [pc, #92]	@ (801bd9c <HAL_GPIO_Init+0x264>)
 801bd3e:	4293      	cmp	r3, r2
 801bd40:	d101      	bne.n	801bd46 <HAL_GPIO_Init+0x20e>
 801bd42:	2309      	movs	r3, #9
 801bd44:	e02d      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd46:	230a      	movs	r3, #10
 801bd48:	e02b      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd4a:	2308      	movs	r3, #8
 801bd4c:	e029      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd4e:	2307      	movs	r3, #7
 801bd50:	e027      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd52:	2306      	movs	r3, #6
 801bd54:	e025      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd56:	2305      	movs	r3, #5
 801bd58:	e023      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd5a:	2304      	movs	r3, #4
 801bd5c:	e021      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd5e:	2303      	movs	r3, #3
 801bd60:	e01f      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd62:	2302      	movs	r3, #2
 801bd64:	e01d      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd66:	2301      	movs	r3, #1
 801bd68:	e01b      	b.n	801bda2 <HAL_GPIO_Init+0x26a>
 801bd6a:	bf00      	nop
 801bd6c:	58000080 	.word	0x58000080
 801bd70:	58024400 	.word	0x58024400
 801bd74:	58000400 	.word	0x58000400
 801bd78:	58020000 	.word	0x58020000
 801bd7c:	58020400 	.word	0x58020400
 801bd80:	58020800 	.word	0x58020800
 801bd84:	58020c00 	.word	0x58020c00
 801bd88:	58021000 	.word	0x58021000
 801bd8c:	58021400 	.word	0x58021400
 801bd90:	58021800 	.word	0x58021800
 801bd94:	58021c00 	.word	0x58021c00
 801bd98:	58022000 	.word	0x58022000
 801bd9c:	58022400 	.word	0x58022400
 801bda0:	2300      	movs	r3, #0
 801bda2:	69fa      	ldr	r2, [r7, #28]
 801bda4:	f002 0203 	and.w	r2, r2, #3
 801bda8:	0092      	lsls	r2, r2, #2
 801bdaa:	4093      	lsls	r3, r2
 801bdac:	69ba      	ldr	r2, [r7, #24]
 801bdae:	4313      	orrs	r3, r2
 801bdb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bdb2:	4938      	ldr	r1, [pc, #224]	@ (801be94 <HAL_GPIO_Init+0x35c>)
 801bdb4:	69fb      	ldr	r3, [r7, #28]
 801bdb6:	089b      	lsrs	r3, r3, #2
 801bdb8:	3302      	adds	r3, #2
 801bdba:	69ba      	ldr	r2, [r7, #24]
 801bdbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bdc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bdc8:	693b      	ldr	r3, [r7, #16]
 801bdca:	43db      	mvns	r3, r3
 801bdcc:	69ba      	ldr	r2, [r7, #24]
 801bdce:	4013      	ands	r3, r2
 801bdd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bdd2:	683b      	ldr	r3, [r7, #0]
 801bdd4:	685b      	ldr	r3, [r3, #4]
 801bdd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d003      	beq.n	801bde6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801bdde:	69ba      	ldr	r2, [r7, #24]
 801bde0:	693b      	ldr	r3, [r7, #16]
 801bde2:	4313      	orrs	r3, r2
 801bde4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801bde6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801bdea:	69bb      	ldr	r3, [r7, #24]
 801bdec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801bdee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801bdf6:	693b      	ldr	r3, [r7, #16]
 801bdf8:	43db      	mvns	r3, r3
 801bdfa:	69ba      	ldr	r2, [r7, #24]
 801bdfc:	4013      	ands	r3, r2
 801bdfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801be00:	683b      	ldr	r3, [r7, #0]
 801be02:	685b      	ldr	r3, [r3, #4]
 801be04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d003      	beq.n	801be14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801be0c:	69ba      	ldr	r2, [r7, #24]
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	4313      	orrs	r3, r2
 801be12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801be14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801be18:	69bb      	ldr	r3, [r7, #24]
 801be1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801be1c:	697b      	ldr	r3, [r7, #20]
 801be1e:	685b      	ldr	r3, [r3, #4]
 801be20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	43db      	mvns	r3, r3
 801be26:	69ba      	ldr	r2, [r7, #24]
 801be28:	4013      	ands	r3, r2
 801be2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801be2c:	683b      	ldr	r3, [r7, #0]
 801be2e:	685b      	ldr	r3, [r3, #4]
 801be30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801be34:	2b00      	cmp	r3, #0
 801be36:	d003      	beq.n	801be40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801be38:	69ba      	ldr	r2, [r7, #24]
 801be3a:	693b      	ldr	r3, [r7, #16]
 801be3c:	4313      	orrs	r3, r2
 801be3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801be40:	697b      	ldr	r3, [r7, #20]
 801be42:	69ba      	ldr	r2, [r7, #24]
 801be44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801be46:	697b      	ldr	r3, [r7, #20]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	43db      	mvns	r3, r3
 801be50:	69ba      	ldr	r2, [r7, #24]
 801be52:	4013      	ands	r3, r2
 801be54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801be56:	683b      	ldr	r3, [r7, #0]
 801be58:	685b      	ldr	r3, [r3, #4]
 801be5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d003      	beq.n	801be6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801be62:	69ba      	ldr	r2, [r7, #24]
 801be64:	693b      	ldr	r3, [r7, #16]
 801be66:	4313      	orrs	r3, r2
 801be68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801be6a:	697b      	ldr	r3, [r7, #20]
 801be6c:	69ba      	ldr	r2, [r7, #24]
 801be6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801be70:	69fb      	ldr	r3, [r7, #28]
 801be72:	3301      	adds	r3, #1
 801be74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801be76:	683b      	ldr	r3, [r7, #0]
 801be78:	681a      	ldr	r2, [r3, #0]
 801be7a:	69fb      	ldr	r3, [r7, #28]
 801be7c:	fa22 f303 	lsr.w	r3, r2, r3
 801be80:	2b00      	cmp	r3, #0
 801be82:	f47f ae63 	bne.w	801bb4c <HAL_GPIO_Init+0x14>
  }
}
 801be86:	bf00      	nop
 801be88:	bf00      	nop
 801be8a:	3724      	adds	r7, #36	@ 0x24
 801be8c:	46bd      	mov	sp, r7
 801be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be92:	4770      	bx	lr
 801be94:	58000400 	.word	0x58000400

0801be98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801be98:	b480      	push	{r7}
 801be9a:	b083      	sub	sp, #12
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
 801bea0:	460b      	mov	r3, r1
 801bea2:	807b      	strh	r3, [r7, #2]
 801bea4:	4613      	mov	r3, r2
 801bea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bea8:	787b      	ldrb	r3, [r7, #1]
 801beaa:	2b00      	cmp	r3, #0
 801beac:	d003      	beq.n	801beb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801beae:	887a      	ldrh	r2, [r7, #2]
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801beb4:	e003      	b.n	801bebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801beb6:	887b      	ldrh	r3, [r7, #2]
 801beb8:	041a      	lsls	r2, r3, #16
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	619a      	str	r2, [r3, #24]
}
 801bebe:	bf00      	nop
 801bec0:	370c      	adds	r7, #12
 801bec2:	46bd      	mov	sp, r7
 801bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec8:	4770      	bx	lr
	...

0801becc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801becc:	b580      	push	{r7, lr}
 801bece:	b082      	sub	sp, #8
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d101      	bne.n	801bede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801beda:	2301      	movs	r3, #1
 801bedc:	e08b      	b.n	801bff6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bee4:	b2db      	uxtb	r3, r3
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d106      	bne.n	801bef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	2200      	movs	r2, #0
 801beee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801bef2:	6878      	ldr	r0, [r7, #4]
 801bef4:	f7e5 ff42 	bl	8001d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	2224      	movs	r2, #36	@ 0x24
 801befc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	681a      	ldr	r2, [r3, #0]
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	f022 0201 	bic.w	r2, r2, #1
 801bf0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	685a      	ldr	r2, [r3, #4]
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801bf1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	681b      	ldr	r3, [r3, #0]
 801bf22:	689a      	ldr	r2, [r3, #8]
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801bf2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	68db      	ldr	r3, [r3, #12]
 801bf32:	2b01      	cmp	r3, #1
 801bf34:	d107      	bne.n	801bf46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	689a      	ldr	r2, [r3, #8]
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801bf42:	609a      	str	r2, [r3, #8]
 801bf44:	e006      	b.n	801bf54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	689a      	ldr	r2, [r3, #8]
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801bf52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	68db      	ldr	r3, [r3, #12]
 801bf58:	2b02      	cmp	r3, #2
 801bf5a:	d108      	bne.n	801bf6e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	685a      	ldr	r2, [r3, #4]
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	681b      	ldr	r3, [r3, #0]
 801bf66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801bf6a:	605a      	str	r2, [r3, #4]
 801bf6c:	e007      	b.n	801bf7e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	685a      	ldr	r2, [r3, #4]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801bf7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	6859      	ldr	r1, [r3, #4]
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681a      	ldr	r2, [r3, #0]
 801bf88:	4b1d      	ldr	r3, [pc, #116]	@ (801c000 <HAL_I2C_Init+0x134>)
 801bf8a:	430b      	orrs	r3, r1
 801bf8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	68da      	ldr	r2, [r3, #12]
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801bf9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	691a      	ldr	r2, [r3, #16]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	695b      	ldr	r3, [r3, #20]
 801bfa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	699b      	ldr	r3, [r3, #24]
 801bfae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	430a      	orrs	r2, r1
 801bfb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	69d9      	ldr	r1, [r3, #28]
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	6a1a      	ldr	r2, [r3, #32]
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	430a      	orrs	r2, r1
 801bfc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	681a      	ldr	r2, [r3, #0]
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	f042 0201 	orr.w	r2, r2, #1
 801bfd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	2200      	movs	r2, #0
 801bfdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2220      	movs	r2, #32
 801bfe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	2200      	movs	r2, #0
 801bff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801bff4:	2300      	movs	r3, #0
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3708      	adds	r7, #8
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}
 801bffe:	bf00      	nop
 801c000:	02008000 	.word	0x02008000

0801c004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c004:	b480      	push	{r7}
 801c006:	b083      	sub	sp, #12
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
 801c00c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c014:	b2db      	uxtb	r3, r3
 801c016:	2b20      	cmp	r3, #32
 801c018:	d138      	bne.n	801c08c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c020:	2b01      	cmp	r3, #1
 801c022:	d101      	bne.n	801c028 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c024:	2302      	movs	r3, #2
 801c026:	e032      	b.n	801c08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2201      	movs	r2, #1
 801c02c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	2224      	movs	r2, #36	@ 0x24
 801c034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	681a      	ldr	r2, [r3, #0]
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	f022 0201 	bic.w	r2, r2, #1
 801c046:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	681a      	ldr	r2, [r3, #0]
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801c056:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	681b      	ldr	r3, [r3, #0]
 801c05c:	6819      	ldr	r1, [r3, #0]
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	683a      	ldr	r2, [r7, #0]
 801c064:	430a      	orrs	r2, r1
 801c066:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	681a      	ldr	r2, [r3, #0]
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	f042 0201 	orr.w	r2, r2, #1
 801c076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	2220      	movs	r2, #32
 801c07c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	2200      	movs	r2, #0
 801c084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c088:	2300      	movs	r3, #0
 801c08a:	e000      	b.n	801c08e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c08c:	2302      	movs	r3, #2
  }
}
 801c08e:	4618      	mov	r0, r3
 801c090:	370c      	adds	r7, #12
 801c092:	46bd      	mov	sp, r7
 801c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c098:	4770      	bx	lr

0801c09a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801c09a:	b480      	push	{r7}
 801c09c:	b085      	sub	sp, #20
 801c09e:	af00      	add	r7, sp, #0
 801c0a0:	6078      	str	r0, [r7, #4]
 801c0a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	2b20      	cmp	r3, #32
 801c0ae:	d139      	bne.n	801c124 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c0b6:	2b01      	cmp	r3, #1
 801c0b8:	d101      	bne.n	801c0be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801c0ba:	2302      	movs	r3, #2
 801c0bc:	e033      	b.n	801c126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	2224      	movs	r2, #36	@ 0x24
 801c0ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	681a      	ldr	r2, [r3, #0]
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	681b      	ldr	r3, [r3, #0]
 801c0d8:	f022 0201 	bic.w	r2, r2, #1
 801c0dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c0ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c0ee:	683b      	ldr	r3, [r7, #0]
 801c0f0:	021b      	lsls	r3, r3, #8
 801c0f2:	68fa      	ldr	r2, [r7, #12]
 801c0f4:	4313      	orrs	r3, r2
 801c0f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	68fa      	ldr	r2, [r7, #12]
 801c0fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	681a      	ldr	r2, [r3, #0]
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	f042 0201 	orr.w	r2, r2, #1
 801c10e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	2220      	movs	r2, #32
 801c114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	2200      	movs	r2, #0
 801c11c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c120:	2300      	movs	r3, #0
 801c122:	e000      	b.n	801c126 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c124:	2302      	movs	r3, #2
  }
}
 801c126:	4618      	mov	r0, r3
 801c128:	3714      	adds	r7, #20
 801c12a:	46bd      	mov	sp, r7
 801c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c130:	4770      	bx	lr
	...

0801c134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b084      	sub	sp, #16
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c13c:	4b19      	ldr	r3, [pc, #100]	@ (801c1a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c13e:	68db      	ldr	r3, [r3, #12]
 801c140:	f003 0304 	and.w	r3, r3, #4
 801c144:	2b04      	cmp	r3, #4
 801c146:	d00a      	beq.n	801c15e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c148:	4b16      	ldr	r3, [pc, #88]	@ (801c1a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c14a:	68db      	ldr	r3, [r3, #12]
 801c14c:	f003 0307 	and.w	r3, r3, #7
 801c150:	687a      	ldr	r2, [r7, #4]
 801c152:	429a      	cmp	r2, r3
 801c154:	d001      	beq.n	801c15a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c156:	2301      	movs	r3, #1
 801c158:	e01f      	b.n	801c19a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c15a:	2300      	movs	r3, #0
 801c15c:	e01d      	b.n	801c19a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c15e:	4b11      	ldr	r3, [pc, #68]	@ (801c1a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c160:	68db      	ldr	r3, [r3, #12]
 801c162:	f023 0207 	bic.w	r2, r3, #7
 801c166:	490f      	ldr	r1, [pc, #60]	@ (801c1a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	4313      	orrs	r3, r2
 801c16c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c16e:	f7fd fc03 	bl	8019978 <HAL_GetTick>
 801c172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c174:	e009      	b.n	801c18a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c176:	f7fd fbff 	bl	8019978 <HAL_GetTick>
 801c17a:	4602      	mov	r2, r0
 801c17c:	68fb      	ldr	r3, [r7, #12]
 801c17e:	1ad3      	subs	r3, r2, r3
 801c180:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c184:	d901      	bls.n	801c18a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c186:	2301      	movs	r3, #1
 801c188:	e007      	b.n	801c19a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c18a:	4b06      	ldr	r3, [pc, #24]	@ (801c1a4 <HAL_PWREx_ConfigSupply+0x70>)
 801c18c:	685b      	ldr	r3, [r3, #4]
 801c18e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c196:	d1ee      	bne.n	801c176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c198:	2300      	movs	r3, #0
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3710      	adds	r7, #16
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}
 801c1a2:	bf00      	nop
 801c1a4:	58024800 	.word	0x58024800

0801c1a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b08c      	sub	sp, #48	@ 0x30
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d102      	bne.n	801c1bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c1b6:	2301      	movs	r3, #1
 801c1b8:	f000 bc48 	b.w	801ca4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	f003 0301 	and.w	r3, r3, #1
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	f000 8088 	beq.w	801c2da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c1ca:	4b99      	ldr	r3, [pc, #612]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c1cc:	691b      	ldr	r3, [r3, #16]
 801c1ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c1d4:	4b96      	ldr	r3, [pc, #600]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1dc:	2b10      	cmp	r3, #16
 801c1de:	d007      	beq.n	801c1f0 <HAL_RCC_OscConfig+0x48>
 801c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1e2:	2b18      	cmp	r3, #24
 801c1e4:	d111      	bne.n	801c20a <HAL_RCC_OscConfig+0x62>
 801c1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1e8:	f003 0303 	and.w	r3, r3, #3
 801c1ec:	2b02      	cmp	r3, #2
 801c1ee:	d10c      	bne.n	801c20a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c1f0:	4b8f      	ldr	r3, [pc, #572]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d06d      	beq.n	801c2d8 <HAL_RCC_OscConfig+0x130>
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	685b      	ldr	r3, [r3, #4]
 801c200:	2b00      	cmp	r3, #0
 801c202:	d169      	bne.n	801c2d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c204:	2301      	movs	r3, #1
 801c206:	f000 bc21 	b.w	801ca4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	685b      	ldr	r3, [r3, #4]
 801c20e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c212:	d106      	bne.n	801c222 <HAL_RCC_OscConfig+0x7a>
 801c214:	4b86      	ldr	r3, [pc, #536]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	4a85      	ldr	r2, [pc, #532]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c21a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c21e:	6013      	str	r3, [r2, #0]
 801c220:	e02e      	b.n	801c280 <HAL_RCC_OscConfig+0xd8>
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	685b      	ldr	r3, [r3, #4]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d10c      	bne.n	801c244 <HAL_RCC_OscConfig+0x9c>
 801c22a:	4b81      	ldr	r3, [pc, #516]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	4a80      	ldr	r2, [pc, #512]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c230:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c234:	6013      	str	r3, [r2, #0]
 801c236:	4b7e      	ldr	r3, [pc, #504]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c238:	681b      	ldr	r3, [r3, #0]
 801c23a:	4a7d      	ldr	r2, [pc, #500]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c23c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c240:	6013      	str	r3, [r2, #0]
 801c242:	e01d      	b.n	801c280 <HAL_RCC_OscConfig+0xd8>
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	685b      	ldr	r3, [r3, #4]
 801c248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c24c:	d10c      	bne.n	801c268 <HAL_RCC_OscConfig+0xc0>
 801c24e:	4b78      	ldr	r3, [pc, #480]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	4a77      	ldr	r2, [pc, #476]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c258:	6013      	str	r3, [r2, #0]
 801c25a:	4b75      	ldr	r3, [pc, #468]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	4a74      	ldr	r2, [pc, #464]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c264:	6013      	str	r3, [r2, #0]
 801c266:	e00b      	b.n	801c280 <HAL_RCC_OscConfig+0xd8>
 801c268:	4b71      	ldr	r3, [pc, #452]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c26a:	681b      	ldr	r3, [r3, #0]
 801c26c:	4a70      	ldr	r2, [pc, #448]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c26e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c272:	6013      	str	r3, [r2, #0]
 801c274:	4b6e      	ldr	r3, [pc, #440]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	4a6d      	ldr	r2, [pc, #436]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c27a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c27e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	685b      	ldr	r3, [r3, #4]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d013      	beq.n	801c2b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c288:	f7fd fb76 	bl	8019978 <HAL_GetTick>
 801c28c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c28e:	e008      	b.n	801c2a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c290:	f7fd fb72 	bl	8019978 <HAL_GetTick>
 801c294:	4602      	mov	r2, r0
 801c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c298:	1ad3      	subs	r3, r2, r3
 801c29a:	2b64      	cmp	r3, #100	@ 0x64
 801c29c:	d901      	bls.n	801c2a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c29e:	2303      	movs	r3, #3
 801c2a0:	e3d4      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c2a2:	4b63      	ldr	r3, [pc, #396]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d0f0      	beq.n	801c290 <HAL_RCC_OscConfig+0xe8>
 801c2ae:	e014      	b.n	801c2da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2b0:	f7fd fb62 	bl	8019978 <HAL_GetTick>
 801c2b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c2b6:	e008      	b.n	801c2ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c2b8:	f7fd fb5e 	bl	8019978 <HAL_GetTick>
 801c2bc:	4602      	mov	r2, r0
 801c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2c0:	1ad3      	subs	r3, r2, r3
 801c2c2:	2b64      	cmp	r3, #100	@ 0x64
 801c2c4:	d901      	bls.n	801c2ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c2c6:	2303      	movs	r3, #3
 801c2c8:	e3c0      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c2ca:	4b59      	ldr	r3, [pc, #356]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d1f0      	bne.n	801c2b8 <HAL_RCC_OscConfig+0x110>
 801c2d6:	e000      	b.n	801c2da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c2d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	f003 0302 	and.w	r3, r3, #2
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	f000 80ca 	beq.w	801c47c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c2e8:	4b51      	ldr	r3, [pc, #324]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c2ea:	691b      	ldr	r3, [r3, #16]
 801c2ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c2f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c2f2:	4b4f      	ldr	r3, [pc, #316]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c2f8:	6a3b      	ldr	r3, [r7, #32]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d007      	beq.n	801c30e <HAL_RCC_OscConfig+0x166>
 801c2fe:	6a3b      	ldr	r3, [r7, #32]
 801c300:	2b18      	cmp	r3, #24
 801c302:	d156      	bne.n	801c3b2 <HAL_RCC_OscConfig+0x20a>
 801c304:	69fb      	ldr	r3, [r7, #28]
 801c306:	f003 0303 	and.w	r3, r3, #3
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d151      	bne.n	801c3b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c30e:	4b48      	ldr	r3, [pc, #288]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	f003 0304 	and.w	r3, r3, #4
 801c316:	2b00      	cmp	r3, #0
 801c318:	d005      	beq.n	801c326 <HAL_RCC_OscConfig+0x17e>
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	68db      	ldr	r3, [r3, #12]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d101      	bne.n	801c326 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c322:	2301      	movs	r3, #1
 801c324:	e392      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c326:	4b42      	ldr	r3, [pc, #264]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	f023 0219 	bic.w	r2, r3, #25
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	68db      	ldr	r3, [r3, #12]
 801c332:	493f      	ldr	r1, [pc, #252]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c334:	4313      	orrs	r3, r2
 801c336:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c338:	f7fd fb1e 	bl	8019978 <HAL_GetTick>
 801c33c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c33e:	e008      	b.n	801c352 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c340:	f7fd fb1a 	bl	8019978 <HAL_GetTick>
 801c344:	4602      	mov	r2, r0
 801c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c348:	1ad3      	subs	r3, r2, r3
 801c34a:	2b02      	cmp	r3, #2
 801c34c:	d901      	bls.n	801c352 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c34e:	2303      	movs	r3, #3
 801c350:	e37c      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c352:	4b37      	ldr	r3, [pc, #220]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	f003 0304 	and.w	r3, r3, #4
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d0f0      	beq.n	801c340 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c35e:	f7fd fb3b 	bl	80199d8 <HAL_GetREVID>
 801c362:	4603      	mov	r3, r0
 801c364:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c368:	4293      	cmp	r3, r2
 801c36a:	d817      	bhi.n	801c39c <HAL_RCC_OscConfig+0x1f4>
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	691b      	ldr	r3, [r3, #16]
 801c370:	2b40      	cmp	r3, #64	@ 0x40
 801c372:	d108      	bne.n	801c386 <HAL_RCC_OscConfig+0x1de>
 801c374:	4b2e      	ldr	r3, [pc, #184]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c376:	685b      	ldr	r3, [r3, #4]
 801c378:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c37c:	4a2c      	ldr	r2, [pc, #176]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c37e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c382:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c384:	e07a      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c386:	4b2a      	ldr	r3, [pc, #168]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	691b      	ldr	r3, [r3, #16]
 801c392:	031b      	lsls	r3, r3, #12
 801c394:	4926      	ldr	r1, [pc, #152]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c396:	4313      	orrs	r3, r2
 801c398:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c39a:	e06f      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c39c:	4b24      	ldr	r3, [pc, #144]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c39e:	685b      	ldr	r3, [r3, #4]
 801c3a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	691b      	ldr	r3, [r3, #16]
 801c3a8:	061b      	lsls	r3, r3, #24
 801c3aa:	4921      	ldr	r1, [pc, #132]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c3ac:	4313      	orrs	r3, r2
 801c3ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3b0:	e064      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	68db      	ldr	r3, [r3, #12]
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d047      	beq.n	801c44a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c3ba:	4b1d      	ldr	r3, [pc, #116]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	f023 0219 	bic.w	r2, r3, #25
 801c3c2:	687b      	ldr	r3, [r7, #4]
 801c3c4:	68db      	ldr	r3, [r3, #12]
 801c3c6:	491a      	ldr	r1, [pc, #104]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c3c8:	4313      	orrs	r3, r2
 801c3ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3cc:	f7fd fad4 	bl	8019978 <HAL_GetTick>
 801c3d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c3d2:	e008      	b.n	801c3e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c3d4:	f7fd fad0 	bl	8019978 <HAL_GetTick>
 801c3d8:	4602      	mov	r2, r0
 801c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3dc:	1ad3      	subs	r3, r2, r3
 801c3de:	2b02      	cmp	r3, #2
 801c3e0:	d901      	bls.n	801c3e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c3e2:	2303      	movs	r3, #3
 801c3e4:	e332      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c3e6:	4b12      	ldr	r3, [pc, #72]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	f003 0304 	and.w	r3, r3, #4
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d0f0      	beq.n	801c3d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c3f2:	f7fd faf1 	bl	80199d8 <HAL_GetREVID>
 801c3f6:	4603      	mov	r3, r0
 801c3f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c3fc:	4293      	cmp	r3, r2
 801c3fe:	d819      	bhi.n	801c434 <HAL_RCC_OscConfig+0x28c>
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	691b      	ldr	r3, [r3, #16]
 801c404:	2b40      	cmp	r3, #64	@ 0x40
 801c406:	d108      	bne.n	801c41a <HAL_RCC_OscConfig+0x272>
 801c408:	4b09      	ldr	r3, [pc, #36]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c410:	4a07      	ldr	r2, [pc, #28]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c416:	6053      	str	r3, [r2, #4]
 801c418:	e030      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
 801c41a:	4b05      	ldr	r3, [pc, #20]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c41c:	685b      	ldr	r3, [r3, #4]
 801c41e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	691b      	ldr	r3, [r3, #16]
 801c426:	031b      	lsls	r3, r3, #12
 801c428:	4901      	ldr	r1, [pc, #4]	@ (801c430 <HAL_RCC_OscConfig+0x288>)
 801c42a:	4313      	orrs	r3, r2
 801c42c:	604b      	str	r3, [r1, #4]
 801c42e:	e025      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
 801c430:	58024400 	.word	0x58024400
 801c434:	4b9a      	ldr	r3, [pc, #616]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c436:	685b      	ldr	r3, [r3, #4]
 801c438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	691b      	ldr	r3, [r3, #16]
 801c440:	061b      	lsls	r3, r3, #24
 801c442:	4997      	ldr	r1, [pc, #604]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c444:	4313      	orrs	r3, r2
 801c446:	604b      	str	r3, [r1, #4]
 801c448:	e018      	b.n	801c47c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c44a:	4b95      	ldr	r3, [pc, #596]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c44c:	681b      	ldr	r3, [r3, #0]
 801c44e:	4a94      	ldr	r2, [pc, #592]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c450:	f023 0301 	bic.w	r3, r3, #1
 801c454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c456:	f7fd fa8f 	bl	8019978 <HAL_GetTick>
 801c45a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c45c:	e008      	b.n	801c470 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c45e:	f7fd fa8b 	bl	8019978 <HAL_GetTick>
 801c462:	4602      	mov	r2, r0
 801c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c466:	1ad3      	subs	r3, r2, r3
 801c468:	2b02      	cmp	r3, #2
 801c46a:	d901      	bls.n	801c470 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c46c:	2303      	movs	r3, #3
 801c46e:	e2ed      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c470:	4b8b      	ldr	r3, [pc, #556]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	f003 0304 	and.w	r3, r3, #4
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1f0      	bne.n	801c45e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	f003 0310 	and.w	r3, r3, #16
 801c484:	2b00      	cmp	r3, #0
 801c486:	f000 80a9 	beq.w	801c5dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c48a:	4b85      	ldr	r3, [pc, #532]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c48c:	691b      	ldr	r3, [r3, #16]
 801c48e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c492:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c494:	4b82      	ldr	r3, [pc, #520]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c498:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c49a:	69bb      	ldr	r3, [r7, #24]
 801c49c:	2b08      	cmp	r3, #8
 801c49e:	d007      	beq.n	801c4b0 <HAL_RCC_OscConfig+0x308>
 801c4a0:	69bb      	ldr	r3, [r7, #24]
 801c4a2:	2b18      	cmp	r3, #24
 801c4a4:	d13a      	bne.n	801c51c <HAL_RCC_OscConfig+0x374>
 801c4a6:	697b      	ldr	r3, [r7, #20]
 801c4a8:	f003 0303 	and.w	r3, r3, #3
 801c4ac:	2b01      	cmp	r3, #1
 801c4ae:	d135      	bne.n	801c51c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c4b0:	4b7b      	ldr	r3, [pc, #492]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4b2:	681b      	ldr	r3, [r3, #0]
 801c4b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d005      	beq.n	801c4c8 <HAL_RCC_OscConfig+0x320>
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	69db      	ldr	r3, [r3, #28]
 801c4c0:	2b80      	cmp	r3, #128	@ 0x80
 801c4c2:	d001      	beq.n	801c4c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c4c4:	2301      	movs	r3, #1
 801c4c6:	e2c1      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c4c8:	f7fd fa86 	bl	80199d8 <HAL_GetREVID>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c4d2:	4293      	cmp	r3, r2
 801c4d4:	d817      	bhi.n	801c506 <HAL_RCC_OscConfig+0x35e>
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	6a1b      	ldr	r3, [r3, #32]
 801c4da:	2b20      	cmp	r3, #32
 801c4dc:	d108      	bne.n	801c4f0 <HAL_RCC_OscConfig+0x348>
 801c4de:	4b70      	ldr	r3, [pc, #448]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c4e6:	4a6e      	ldr	r2, [pc, #440]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c4ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c4ee:	e075      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c4f0:	4b6b      	ldr	r3, [pc, #428]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c4f2:	685b      	ldr	r3, [r3, #4]
 801c4f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6a1b      	ldr	r3, [r3, #32]
 801c4fc:	069b      	lsls	r3, r3, #26
 801c4fe:	4968      	ldr	r1, [pc, #416]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c500:	4313      	orrs	r3, r2
 801c502:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c504:	e06a      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c506:	4b66      	ldr	r3, [pc, #408]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c508:	68db      	ldr	r3, [r3, #12]
 801c50a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	6a1b      	ldr	r3, [r3, #32]
 801c512:	061b      	lsls	r3, r3, #24
 801c514:	4962      	ldr	r1, [pc, #392]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c516:	4313      	orrs	r3, r2
 801c518:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c51a:	e05f      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	69db      	ldr	r3, [r3, #28]
 801c520:	2b00      	cmp	r3, #0
 801c522:	d042      	beq.n	801c5aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c524:	4b5e      	ldr	r3, [pc, #376]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c526:	681b      	ldr	r3, [r3, #0]
 801c528:	4a5d      	ldr	r2, [pc, #372]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c52e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c530:	f7fd fa22 	bl	8019978 <HAL_GetTick>
 801c534:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c536:	e008      	b.n	801c54a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c538:	f7fd fa1e 	bl	8019978 <HAL_GetTick>
 801c53c:	4602      	mov	r2, r0
 801c53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c540:	1ad3      	subs	r3, r2, r3
 801c542:	2b02      	cmp	r3, #2
 801c544:	d901      	bls.n	801c54a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c546:	2303      	movs	r3, #3
 801c548:	e280      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c54a:	4b55      	ldr	r3, [pc, #340]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c552:	2b00      	cmp	r3, #0
 801c554:	d0f0      	beq.n	801c538 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c556:	f7fd fa3f 	bl	80199d8 <HAL_GetREVID>
 801c55a:	4603      	mov	r3, r0
 801c55c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c560:	4293      	cmp	r3, r2
 801c562:	d817      	bhi.n	801c594 <HAL_RCC_OscConfig+0x3ec>
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	6a1b      	ldr	r3, [r3, #32]
 801c568:	2b20      	cmp	r3, #32
 801c56a:	d108      	bne.n	801c57e <HAL_RCC_OscConfig+0x3d6>
 801c56c:	4b4c      	ldr	r3, [pc, #304]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c56e:	685b      	ldr	r3, [r3, #4]
 801c570:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c574:	4a4a      	ldr	r2, [pc, #296]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c576:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c57a:	6053      	str	r3, [r2, #4]
 801c57c:	e02e      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
 801c57e:	4b48      	ldr	r3, [pc, #288]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c580:	685b      	ldr	r3, [r3, #4]
 801c582:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	6a1b      	ldr	r3, [r3, #32]
 801c58a:	069b      	lsls	r3, r3, #26
 801c58c:	4944      	ldr	r1, [pc, #272]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c58e:	4313      	orrs	r3, r2
 801c590:	604b      	str	r3, [r1, #4]
 801c592:	e023      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
 801c594:	4b42      	ldr	r3, [pc, #264]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c596:	68db      	ldr	r3, [r3, #12]
 801c598:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	6a1b      	ldr	r3, [r3, #32]
 801c5a0:	061b      	lsls	r3, r3, #24
 801c5a2:	493f      	ldr	r1, [pc, #252]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5a4:	4313      	orrs	r3, r2
 801c5a6:	60cb      	str	r3, [r1, #12]
 801c5a8:	e018      	b.n	801c5dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c5aa:	4b3d      	ldr	r3, [pc, #244]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	4a3c      	ldr	r2, [pc, #240]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c5b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5b6:	f7fd f9df 	bl	8019978 <HAL_GetTick>
 801c5ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c5bc:	e008      	b.n	801c5d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c5be:	f7fd f9db 	bl	8019978 <HAL_GetTick>
 801c5c2:	4602      	mov	r2, r0
 801c5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5c6:	1ad3      	subs	r3, r2, r3
 801c5c8:	2b02      	cmp	r3, #2
 801c5ca:	d901      	bls.n	801c5d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c5cc:	2303      	movs	r3, #3
 801c5ce:	e23d      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c5d0:	4b33      	ldr	r3, [pc, #204]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d1f0      	bne.n	801c5be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	681b      	ldr	r3, [r3, #0]
 801c5e0:	f003 0308 	and.w	r3, r3, #8
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d036      	beq.n	801c656 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	695b      	ldr	r3, [r3, #20]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d019      	beq.n	801c624 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c5f0:	4b2b      	ldr	r3, [pc, #172]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c5f4:	4a2a      	ldr	r2, [pc, #168]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c5f6:	f043 0301 	orr.w	r3, r3, #1
 801c5fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c5fc:	f7fd f9bc 	bl	8019978 <HAL_GetTick>
 801c600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c602:	e008      	b.n	801c616 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c604:	f7fd f9b8 	bl	8019978 <HAL_GetTick>
 801c608:	4602      	mov	r2, r0
 801c60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c60c:	1ad3      	subs	r3, r2, r3
 801c60e:	2b02      	cmp	r3, #2
 801c610:	d901      	bls.n	801c616 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c612:	2303      	movs	r3, #3
 801c614:	e21a      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c616:	4b22      	ldr	r3, [pc, #136]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c618:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c61a:	f003 0302 	and.w	r3, r3, #2
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d0f0      	beq.n	801c604 <HAL_RCC_OscConfig+0x45c>
 801c622:	e018      	b.n	801c656 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c624:	4b1e      	ldr	r3, [pc, #120]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c628:	4a1d      	ldr	r2, [pc, #116]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c62a:	f023 0301 	bic.w	r3, r3, #1
 801c62e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c630:	f7fd f9a2 	bl	8019978 <HAL_GetTick>
 801c634:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c636:	e008      	b.n	801c64a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c638:	f7fd f99e 	bl	8019978 <HAL_GetTick>
 801c63c:	4602      	mov	r2, r0
 801c63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c640:	1ad3      	subs	r3, r2, r3
 801c642:	2b02      	cmp	r3, #2
 801c644:	d901      	bls.n	801c64a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c646:	2303      	movs	r3, #3
 801c648:	e200      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c64a:	4b15      	ldr	r3, [pc, #84]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c64c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c64e:	f003 0302 	and.w	r3, r3, #2
 801c652:	2b00      	cmp	r3, #0
 801c654:	d1f0      	bne.n	801c638 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f003 0320 	and.w	r3, r3, #32
 801c65e:	2b00      	cmp	r3, #0
 801c660:	d039      	beq.n	801c6d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	699b      	ldr	r3, [r3, #24]
 801c666:	2b00      	cmp	r3, #0
 801c668:	d01c      	beq.n	801c6a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c66a:	4b0d      	ldr	r3, [pc, #52]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	4a0c      	ldr	r2, [pc, #48]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c670:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c674:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c676:	f7fd f97f 	bl	8019978 <HAL_GetTick>
 801c67a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c67c:	e008      	b.n	801c690 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c67e:	f7fd f97b 	bl	8019978 <HAL_GetTick>
 801c682:	4602      	mov	r2, r0
 801c684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c686:	1ad3      	subs	r3, r2, r3
 801c688:	2b02      	cmp	r3, #2
 801c68a:	d901      	bls.n	801c690 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c68c:	2303      	movs	r3, #3
 801c68e:	e1dd      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c690:	4b03      	ldr	r3, [pc, #12]	@ (801c6a0 <HAL_RCC_OscConfig+0x4f8>)
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d0f0      	beq.n	801c67e <HAL_RCC_OscConfig+0x4d6>
 801c69c:	e01b      	b.n	801c6d6 <HAL_RCC_OscConfig+0x52e>
 801c69e:	bf00      	nop
 801c6a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c6a4:	4b9b      	ldr	r3, [pc, #620]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	4a9a      	ldr	r2, [pc, #616]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c6aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c6ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c6b0:	f7fd f962 	bl	8019978 <HAL_GetTick>
 801c6b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c6b6:	e008      	b.n	801c6ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c6b8:	f7fd f95e 	bl	8019978 <HAL_GetTick>
 801c6bc:	4602      	mov	r2, r0
 801c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6c0:	1ad3      	subs	r3, r2, r3
 801c6c2:	2b02      	cmp	r3, #2
 801c6c4:	d901      	bls.n	801c6ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c6c6:	2303      	movs	r3, #3
 801c6c8:	e1c0      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c6ca:	4b92      	ldr	r3, [pc, #584]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c6cc:	681b      	ldr	r3, [r3, #0]
 801c6ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d1f0      	bne.n	801c6b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	f003 0304 	and.w	r3, r3, #4
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	f000 8081 	beq.w	801c7e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c6e4:	4b8c      	ldr	r3, [pc, #560]	@ (801c918 <HAL_RCC_OscConfig+0x770>)
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	4a8b      	ldr	r2, [pc, #556]	@ (801c918 <HAL_RCC_OscConfig+0x770>)
 801c6ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c6ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c6f0:	f7fd f942 	bl	8019978 <HAL_GetTick>
 801c6f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c6f6:	e008      	b.n	801c70a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c6f8:	f7fd f93e 	bl	8019978 <HAL_GetTick>
 801c6fc:	4602      	mov	r2, r0
 801c6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c700:	1ad3      	subs	r3, r2, r3
 801c702:	2b64      	cmp	r3, #100	@ 0x64
 801c704:	d901      	bls.n	801c70a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c706:	2303      	movs	r3, #3
 801c708:	e1a0      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c70a:	4b83      	ldr	r3, [pc, #524]	@ (801c918 <HAL_RCC_OscConfig+0x770>)
 801c70c:	681b      	ldr	r3, [r3, #0]
 801c70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c712:	2b00      	cmp	r3, #0
 801c714:	d0f0      	beq.n	801c6f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	689b      	ldr	r3, [r3, #8]
 801c71a:	2b01      	cmp	r3, #1
 801c71c:	d106      	bne.n	801c72c <HAL_RCC_OscConfig+0x584>
 801c71e:	4b7d      	ldr	r3, [pc, #500]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c722:	4a7c      	ldr	r2, [pc, #496]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c724:	f043 0301 	orr.w	r3, r3, #1
 801c728:	6713      	str	r3, [r2, #112]	@ 0x70
 801c72a:	e02d      	b.n	801c788 <HAL_RCC_OscConfig+0x5e0>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	689b      	ldr	r3, [r3, #8]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d10c      	bne.n	801c74e <HAL_RCC_OscConfig+0x5a6>
 801c734:	4b77      	ldr	r3, [pc, #476]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c738:	4a76      	ldr	r2, [pc, #472]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c73a:	f023 0301 	bic.w	r3, r3, #1
 801c73e:	6713      	str	r3, [r2, #112]	@ 0x70
 801c740:	4b74      	ldr	r3, [pc, #464]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c744:	4a73      	ldr	r2, [pc, #460]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c746:	f023 0304 	bic.w	r3, r3, #4
 801c74a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c74c:	e01c      	b.n	801c788 <HAL_RCC_OscConfig+0x5e0>
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	689b      	ldr	r3, [r3, #8]
 801c752:	2b05      	cmp	r3, #5
 801c754:	d10c      	bne.n	801c770 <HAL_RCC_OscConfig+0x5c8>
 801c756:	4b6f      	ldr	r3, [pc, #444]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c75a:	4a6e      	ldr	r2, [pc, #440]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c75c:	f043 0304 	orr.w	r3, r3, #4
 801c760:	6713      	str	r3, [r2, #112]	@ 0x70
 801c762:	4b6c      	ldr	r3, [pc, #432]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c766:	4a6b      	ldr	r2, [pc, #428]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c768:	f043 0301 	orr.w	r3, r3, #1
 801c76c:	6713      	str	r3, [r2, #112]	@ 0x70
 801c76e:	e00b      	b.n	801c788 <HAL_RCC_OscConfig+0x5e0>
 801c770:	4b68      	ldr	r3, [pc, #416]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c774:	4a67      	ldr	r2, [pc, #412]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c776:	f023 0301 	bic.w	r3, r3, #1
 801c77a:	6713      	str	r3, [r2, #112]	@ 0x70
 801c77c:	4b65      	ldr	r3, [pc, #404]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c77e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c780:	4a64      	ldr	r2, [pc, #400]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c782:	f023 0304 	bic.w	r3, r3, #4
 801c786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	689b      	ldr	r3, [r3, #8]
 801c78c:	2b00      	cmp	r3, #0
 801c78e:	d015      	beq.n	801c7bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c790:	f7fd f8f2 	bl	8019978 <HAL_GetTick>
 801c794:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c796:	e00a      	b.n	801c7ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c798:	f7fd f8ee 	bl	8019978 <HAL_GetTick>
 801c79c:	4602      	mov	r2, r0
 801c79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a0:	1ad3      	subs	r3, r2, r3
 801c7a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c7a6:	4293      	cmp	r3, r2
 801c7a8:	d901      	bls.n	801c7ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c7aa:	2303      	movs	r3, #3
 801c7ac:	e14e      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c7ae:	4b59      	ldr	r3, [pc, #356]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c7b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c7b2:	f003 0302 	and.w	r3, r3, #2
 801c7b6:	2b00      	cmp	r3, #0
 801c7b8:	d0ee      	beq.n	801c798 <HAL_RCC_OscConfig+0x5f0>
 801c7ba:	e014      	b.n	801c7e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c7bc:	f7fd f8dc 	bl	8019978 <HAL_GetTick>
 801c7c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c7c2:	e00a      	b.n	801c7da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c7c4:	f7fd f8d8 	bl	8019978 <HAL_GetTick>
 801c7c8:	4602      	mov	r2, r0
 801c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7cc:	1ad3      	subs	r3, r2, r3
 801c7ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c7d2:	4293      	cmp	r3, r2
 801c7d4:	d901      	bls.n	801c7da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c7d6:	2303      	movs	r3, #3
 801c7d8:	e138      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c7da:	4b4e      	ldr	r3, [pc, #312]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c7dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c7de:	f003 0302 	and.w	r3, r3, #2
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	d1ee      	bne.n	801c7c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	f000 812d 	beq.w	801ca4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c7f0:	4b48      	ldr	r3, [pc, #288]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c7f2:	691b      	ldr	r3, [r3, #16]
 801c7f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c7f8:	2b18      	cmp	r3, #24
 801c7fa:	f000 80bd 	beq.w	801c978 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c802:	2b02      	cmp	r3, #2
 801c804:	f040 809e 	bne.w	801c944 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c808:	4b42      	ldr	r3, [pc, #264]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c80a:	681b      	ldr	r3, [r3, #0]
 801c80c:	4a41      	ldr	r2, [pc, #260]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c80e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c814:	f7fd f8b0 	bl	8019978 <HAL_GetTick>
 801c818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c81a:	e008      	b.n	801c82e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c81c:	f7fd f8ac 	bl	8019978 <HAL_GetTick>
 801c820:	4602      	mov	r2, r0
 801c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c824:	1ad3      	subs	r3, r2, r3
 801c826:	2b02      	cmp	r3, #2
 801c828:	d901      	bls.n	801c82e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c82a:	2303      	movs	r3, #3
 801c82c:	e10e      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c82e:	4b39      	ldr	r3, [pc, #228]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c836:	2b00      	cmp	r3, #0
 801c838:	d1f0      	bne.n	801c81c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c83a:	4b36      	ldr	r3, [pc, #216]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c83c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c83e:	4b37      	ldr	r3, [pc, #220]	@ (801c91c <HAL_RCC_OscConfig+0x774>)
 801c840:	4013      	ands	r3, r2
 801c842:	687a      	ldr	r2, [r7, #4]
 801c844:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c846:	687a      	ldr	r2, [r7, #4]
 801c848:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c84a:	0112      	lsls	r2, r2, #4
 801c84c:	430a      	orrs	r2, r1
 801c84e:	4931      	ldr	r1, [pc, #196]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c850:	4313      	orrs	r3, r2
 801c852:	628b      	str	r3, [r1, #40]	@ 0x28
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c858:	3b01      	subs	r3, #1
 801c85a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c862:	3b01      	subs	r3, #1
 801c864:	025b      	lsls	r3, r3, #9
 801c866:	b29b      	uxth	r3, r3
 801c868:	431a      	orrs	r2, r3
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c86e:	3b01      	subs	r3, #1
 801c870:	041b      	lsls	r3, r3, #16
 801c872:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c876:	431a      	orrs	r2, r3
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c87c:	3b01      	subs	r3, #1
 801c87e:	061b      	lsls	r3, r3, #24
 801c880:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c884:	4923      	ldr	r1, [pc, #140]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c886:	4313      	orrs	r3, r2
 801c888:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c88a:	4b22      	ldr	r3, [pc, #136]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c88e:	4a21      	ldr	r2, [pc, #132]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c890:	f023 0301 	bic.w	r3, r3, #1
 801c894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c896:	4b1f      	ldr	r3, [pc, #124]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c89a:	4b21      	ldr	r3, [pc, #132]	@ (801c920 <HAL_RCC_OscConfig+0x778>)
 801c89c:	4013      	ands	r3, r2
 801c89e:	687a      	ldr	r2, [r7, #4]
 801c8a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c8a2:	00d2      	lsls	r2, r2, #3
 801c8a4:	491b      	ldr	r1, [pc, #108]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8a6:	4313      	orrs	r3, r2
 801c8a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c8aa:	4b1a      	ldr	r3, [pc, #104]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8ae:	f023 020c 	bic.w	r2, r3, #12
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c8b6:	4917      	ldr	r1, [pc, #92]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8b8:	4313      	orrs	r3, r2
 801c8ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c8bc:	4b15      	ldr	r3, [pc, #84]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8c0:	f023 0202 	bic.w	r2, r3, #2
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c8c8:	4912      	ldr	r1, [pc, #72]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8ca:	4313      	orrs	r3, r2
 801c8cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c8ce:	4b11      	ldr	r3, [pc, #68]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8d2:	4a10      	ldr	r2, [pc, #64]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c8d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c8da:	4b0e      	ldr	r3, [pc, #56]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8de:	4a0d      	ldr	r2, [pc, #52]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c8e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c8e6:	4b0b      	ldr	r3, [pc, #44]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8ea:	4a0a      	ldr	r2, [pc, #40]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c8f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c8f2:	4b08      	ldr	r3, [pc, #32]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c8f6:	4a07      	ldr	r2, [pc, #28]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c8f8:	f043 0301 	orr.w	r3, r3, #1
 801c8fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c8fe:	4b05      	ldr	r3, [pc, #20]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	4a04      	ldr	r2, [pc, #16]	@ (801c914 <HAL_RCC_OscConfig+0x76c>)
 801c904:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c90a:	f7fd f835 	bl	8019978 <HAL_GetTick>
 801c90e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c910:	e011      	b.n	801c936 <HAL_RCC_OscConfig+0x78e>
 801c912:	bf00      	nop
 801c914:	58024400 	.word	0x58024400
 801c918:	58024800 	.word	0x58024800
 801c91c:	fffffc0c 	.word	0xfffffc0c
 801c920:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c924:	f7fd f828 	bl	8019978 <HAL_GetTick>
 801c928:	4602      	mov	r2, r0
 801c92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c92c:	1ad3      	subs	r3, r2, r3
 801c92e:	2b02      	cmp	r3, #2
 801c930:	d901      	bls.n	801c936 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c932:	2303      	movs	r3, #3
 801c934:	e08a      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c936:	4b47      	ldr	r3, [pc, #284]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d0f0      	beq.n	801c924 <HAL_RCC_OscConfig+0x77c>
 801c942:	e082      	b.n	801ca4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c944:	4b43      	ldr	r3, [pc, #268]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c946:	681b      	ldr	r3, [r3, #0]
 801c948:	4a42      	ldr	r2, [pc, #264]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c94a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c94e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c950:	f7fd f812 	bl	8019978 <HAL_GetTick>
 801c954:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c956:	e008      	b.n	801c96a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c958:	f7fd f80e 	bl	8019978 <HAL_GetTick>
 801c95c:	4602      	mov	r2, r0
 801c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c960:	1ad3      	subs	r3, r2, r3
 801c962:	2b02      	cmp	r3, #2
 801c964:	d901      	bls.n	801c96a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c966:	2303      	movs	r3, #3
 801c968:	e070      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c96a:	4b3a      	ldr	r3, [pc, #232]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c972:	2b00      	cmp	r3, #0
 801c974:	d1f0      	bne.n	801c958 <HAL_RCC_OscConfig+0x7b0>
 801c976:	e068      	b.n	801ca4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c978:	4b36      	ldr	r3, [pc, #216]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c97c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c97e:	4b35      	ldr	r3, [pc, #212]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c982:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c988:	2b01      	cmp	r3, #1
 801c98a:	d031      	beq.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c98c:	693b      	ldr	r3, [r7, #16]
 801c98e:	f003 0203 	and.w	r2, r3, #3
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c996:	429a      	cmp	r2, r3
 801c998:	d12a      	bne.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c99a:	693b      	ldr	r3, [r7, #16]
 801c99c:	091b      	lsrs	r3, r3, #4
 801c99e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c9a6:	429a      	cmp	r2, r3
 801c9a8:	d122      	bne.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c9b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c9b6:	429a      	cmp	r2, r3
 801c9b8:	d11a      	bne.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	0a5b      	lsrs	r3, r3, #9
 801c9be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c9c8:	429a      	cmp	r2, r3
 801c9ca:	d111      	bne.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c9cc:	68fb      	ldr	r3, [r7, #12]
 801c9ce:	0c1b      	lsrs	r3, r3, #16
 801c9d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c9d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c9da:	429a      	cmp	r2, r3
 801c9dc:	d108      	bne.n	801c9f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	0e1b      	lsrs	r3, r3, #24
 801c9e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c9ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c9ec:	429a      	cmp	r2, r3
 801c9ee:	d001      	beq.n	801c9f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c9f0:	2301      	movs	r3, #1
 801c9f2:	e02b      	b.n	801ca4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c9f4:	4b17      	ldr	r3, [pc, #92]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801c9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9f8:	08db      	lsrs	r3, r3, #3
 801c9fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c9fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ca04:	693a      	ldr	r2, [r7, #16]
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d01f      	beq.n	801ca4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801ca0a:	4b12      	ldr	r3, [pc, #72]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca0e:	4a11      	ldr	r2, [pc, #68]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca10:	f023 0301 	bic.w	r3, r3, #1
 801ca14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801ca16:	f7fc ffaf 	bl	8019978 <HAL_GetTick>
 801ca1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801ca1c:	bf00      	nop
 801ca1e:	f7fc ffab 	bl	8019978 <HAL_GetTick>
 801ca22:	4602      	mov	r2, r0
 801ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca26:	4293      	cmp	r3, r2
 801ca28:	d0f9      	beq.n	801ca1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801ca2a:	4b0a      	ldr	r3, [pc, #40]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ca2e:	4b0a      	ldr	r3, [pc, #40]	@ (801ca58 <HAL_RCC_OscConfig+0x8b0>)
 801ca30:	4013      	ands	r3, r2
 801ca32:	687a      	ldr	r2, [r7, #4]
 801ca34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801ca36:	00d2      	lsls	r2, r2, #3
 801ca38:	4906      	ldr	r1, [pc, #24]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca3a:	4313      	orrs	r3, r2
 801ca3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801ca3e:	4b05      	ldr	r3, [pc, #20]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca42:	4a04      	ldr	r2, [pc, #16]	@ (801ca54 <HAL_RCC_OscConfig+0x8ac>)
 801ca44:	f043 0301 	orr.w	r3, r3, #1
 801ca48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801ca4a:	2300      	movs	r3, #0
}
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	3730      	adds	r7, #48	@ 0x30
 801ca50:	46bd      	mov	sp, r7
 801ca52:	bd80      	pop	{r7, pc}
 801ca54:	58024400 	.word	0x58024400
 801ca58:	ffff0007 	.word	0xffff0007

0801ca5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b086      	sub	sp, #24
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
 801ca64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d101      	bne.n	801ca70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	e19c      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ca70:	4b8a      	ldr	r3, [pc, #552]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	f003 030f 	and.w	r3, r3, #15
 801ca78:	683a      	ldr	r2, [r7, #0]
 801ca7a:	429a      	cmp	r2, r3
 801ca7c:	d910      	bls.n	801caa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca7e:	4b87      	ldr	r3, [pc, #540]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	f023 020f 	bic.w	r2, r3, #15
 801ca86:	4985      	ldr	r1, [pc, #532]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	4313      	orrs	r3, r2
 801ca8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ca8e:	4b83      	ldr	r3, [pc, #524]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	f003 030f 	and.w	r3, r3, #15
 801ca96:	683a      	ldr	r2, [r7, #0]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d001      	beq.n	801caa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	e184      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	f003 0304 	and.w	r3, r3, #4
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	d010      	beq.n	801cace <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	691a      	ldr	r2, [r3, #16]
 801cab0:	4b7b      	ldr	r3, [pc, #492]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cab2:	699b      	ldr	r3, [r3, #24]
 801cab4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cab8:	429a      	cmp	r2, r3
 801caba:	d908      	bls.n	801cace <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801cabc:	4b78      	ldr	r3, [pc, #480]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cabe:	699b      	ldr	r3, [r3, #24]
 801cac0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	691b      	ldr	r3, [r3, #16]
 801cac8:	4975      	ldr	r1, [pc, #468]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801caca:	4313      	orrs	r3, r2
 801cacc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	f003 0308 	and.w	r3, r3, #8
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d010      	beq.n	801cafc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	695a      	ldr	r2, [r3, #20]
 801cade:	4b70      	ldr	r3, [pc, #448]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cae0:	69db      	ldr	r3, [r3, #28]
 801cae2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cae6:	429a      	cmp	r2, r3
 801cae8:	d908      	bls.n	801cafc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801caea:	4b6d      	ldr	r3, [pc, #436]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801caec:	69db      	ldr	r3, [r3, #28]
 801caee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	695b      	ldr	r3, [r3, #20]
 801caf6:	496a      	ldr	r1, [pc, #424]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801caf8:	4313      	orrs	r3, r2
 801cafa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	f003 0310 	and.w	r3, r3, #16
 801cb04:	2b00      	cmp	r3, #0
 801cb06:	d010      	beq.n	801cb2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	699a      	ldr	r2, [r3, #24]
 801cb0c:	4b64      	ldr	r3, [pc, #400]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb0e:	69db      	ldr	r3, [r3, #28]
 801cb10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cb14:	429a      	cmp	r2, r3
 801cb16:	d908      	bls.n	801cb2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cb18:	4b61      	ldr	r3, [pc, #388]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb1a:	69db      	ldr	r3, [r3, #28]
 801cb1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	699b      	ldr	r3, [r3, #24]
 801cb24:	495e      	ldr	r1, [pc, #376]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb26:	4313      	orrs	r3, r2
 801cb28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	f003 0320 	and.w	r3, r3, #32
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d010      	beq.n	801cb58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	69da      	ldr	r2, [r3, #28]
 801cb3a:	4b59      	ldr	r3, [pc, #356]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb3c:	6a1b      	ldr	r3, [r3, #32]
 801cb3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cb42:	429a      	cmp	r2, r3
 801cb44:	d908      	bls.n	801cb58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cb46:	4b56      	ldr	r3, [pc, #344]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb48:	6a1b      	ldr	r3, [r3, #32]
 801cb4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	69db      	ldr	r3, [r3, #28]
 801cb52:	4953      	ldr	r1, [pc, #332]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb54:	4313      	orrs	r3, r2
 801cb56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	f003 0302 	and.w	r3, r3, #2
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d010      	beq.n	801cb86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	68da      	ldr	r2, [r3, #12]
 801cb68:	4b4d      	ldr	r3, [pc, #308]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb6a:	699b      	ldr	r3, [r3, #24]
 801cb6c:	f003 030f 	and.w	r3, r3, #15
 801cb70:	429a      	cmp	r2, r3
 801cb72:	d908      	bls.n	801cb86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cb74:	4b4a      	ldr	r3, [pc, #296]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb76:	699b      	ldr	r3, [r3, #24]
 801cb78:	f023 020f 	bic.w	r2, r3, #15
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	68db      	ldr	r3, [r3, #12]
 801cb80:	4947      	ldr	r1, [pc, #284]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb82:	4313      	orrs	r3, r2
 801cb84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	f003 0301 	and.w	r3, r3, #1
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d055      	beq.n	801cc3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801cb92:	4b43      	ldr	r3, [pc, #268]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cb94:	699b      	ldr	r3, [r3, #24]
 801cb96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	689b      	ldr	r3, [r3, #8]
 801cb9e:	4940      	ldr	r1, [pc, #256]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cba0:	4313      	orrs	r3, r2
 801cba2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	685b      	ldr	r3, [r3, #4]
 801cba8:	2b02      	cmp	r3, #2
 801cbaa:	d107      	bne.n	801cbbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801cbac:	4b3c      	ldr	r3, [pc, #240]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cbae:	681b      	ldr	r3, [r3, #0]
 801cbb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d121      	bne.n	801cbfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cbb8:	2301      	movs	r3, #1
 801cbba:	e0f6      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	685b      	ldr	r3, [r3, #4]
 801cbc0:	2b03      	cmp	r3, #3
 801cbc2:	d107      	bne.n	801cbd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801cbc4:	4b36      	ldr	r3, [pc, #216]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d115      	bne.n	801cbfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cbd0:	2301      	movs	r3, #1
 801cbd2:	e0ea      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	2b01      	cmp	r3, #1
 801cbda:	d107      	bne.n	801cbec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801cbdc:	4b30      	ldr	r3, [pc, #192]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d109      	bne.n	801cbfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cbe8:	2301      	movs	r3, #1
 801cbea:	e0de      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801cbec:	4b2c      	ldr	r3, [pc, #176]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	f003 0304 	and.w	r3, r3, #4
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d101      	bne.n	801cbfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801cbf8:	2301      	movs	r3, #1
 801cbfa:	e0d6      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801cbfc:	4b28      	ldr	r3, [pc, #160]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cbfe:	691b      	ldr	r3, [r3, #16]
 801cc00:	f023 0207 	bic.w	r2, r3, #7
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	685b      	ldr	r3, [r3, #4]
 801cc08:	4925      	ldr	r1, [pc, #148]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cc0a:	4313      	orrs	r3, r2
 801cc0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cc0e:	f7fc feb3 	bl	8019978 <HAL_GetTick>
 801cc12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cc14:	e00a      	b.n	801cc2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cc16:	f7fc feaf 	bl	8019978 <HAL_GetTick>
 801cc1a:	4602      	mov	r2, r0
 801cc1c:	697b      	ldr	r3, [r7, #20]
 801cc1e:	1ad3      	subs	r3, r2, r3
 801cc20:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cc24:	4293      	cmp	r3, r2
 801cc26:	d901      	bls.n	801cc2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801cc28:	2303      	movs	r3, #3
 801cc2a:	e0be      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cc2c:	4b1c      	ldr	r3, [pc, #112]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cc2e:	691b      	ldr	r3, [r3, #16]
 801cc30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	685b      	ldr	r3, [r3, #4]
 801cc38:	00db      	lsls	r3, r3, #3
 801cc3a:	429a      	cmp	r2, r3
 801cc3c:	d1eb      	bne.n	801cc16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cc3e:	687b      	ldr	r3, [r7, #4]
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	f003 0302 	and.w	r3, r3, #2
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	d010      	beq.n	801cc6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	68da      	ldr	r2, [r3, #12]
 801cc4e:	4b14      	ldr	r3, [pc, #80]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cc50:	699b      	ldr	r3, [r3, #24]
 801cc52:	f003 030f 	and.w	r3, r3, #15
 801cc56:	429a      	cmp	r2, r3
 801cc58:	d208      	bcs.n	801cc6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cc5a:	4b11      	ldr	r3, [pc, #68]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cc5c:	699b      	ldr	r3, [r3, #24]
 801cc5e:	f023 020f 	bic.w	r2, r3, #15
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	68db      	ldr	r3, [r3, #12]
 801cc66:	490e      	ldr	r1, [pc, #56]	@ (801cca0 <HAL_RCC_ClockConfig+0x244>)
 801cc68:	4313      	orrs	r3, r2
 801cc6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cc6c:	4b0b      	ldr	r3, [pc, #44]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	f003 030f 	and.w	r3, r3, #15
 801cc74:	683a      	ldr	r2, [r7, #0]
 801cc76:	429a      	cmp	r2, r3
 801cc78:	d214      	bcs.n	801cca4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cc7a:	4b08      	ldr	r3, [pc, #32]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	f023 020f 	bic.w	r2, r3, #15
 801cc82:	4906      	ldr	r1, [pc, #24]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	4313      	orrs	r3, r2
 801cc88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cc8a:	4b04      	ldr	r3, [pc, #16]	@ (801cc9c <HAL_RCC_ClockConfig+0x240>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f003 030f 	and.w	r3, r3, #15
 801cc92:	683a      	ldr	r2, [r7, #0]
 801cc94:	429a      	cmp	r2, r3
 801cc96:	d005      	beq.n	801cca4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801cc98:	2301      	movs	r3, #1
 801cc9a:	e086      	b.n	801cdaa <HAL_RCC_ClockConfig+0x34e>
 801cc9c:	52002000 	.word	0x52002000
 801cca0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801cca4:	687b      	ldr	r3, [r7, #4]
 801cca6:	681b      	ldr	r3, [r3, #0]
 801cca8:	f003 0304 	and.w	r3, r3, #4
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d010      	beq.n	801ccd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	691a      	ldr	r2, [r3, #16]
 801ccb4:	4b3f      	ldr	r3, [pc, #252]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801ccb6:	699b      	ldr	r3, [r3, #24]
 801ccb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ccbc:	429a      	cmp	r2, r3
 801ccbe:	d208      	bcs.n	801ccd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ccc0:	4b3c      	ldr	r3, [pc, #240]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801ccc2:	699b      	ldr	r3, [r3, #24]
 801ccc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	691b      	ldr	r3, [r3, #16]
 801cccc:	4939      	ldr	r1, [pc, #228]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801ccce:	4313      	orrs	r3, r2
 801ccd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	f003 0308 	and.w	r3, r3, #8
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d010      	beq.n	801cd00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	695a      	ldr	r2, [r3, #20]
 801cce2:	4b34      	ldr	r3, [pc, #208]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cce4:	69db      	ldr	r3, [r3, #28]
 801cce6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ccea:	429a      	cmp	r2, r3
 801ccec:	d208      	bcs.n	801cd00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ccee:	4b31      	ldr	r3, [pc, #196]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801ccf0:	69db      	ldr	r3, [r3, #28]
 801ccf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	695b      	ldr	r3, [r3, #20]
 801ccfa:	492e      	ldr	r1, [pc, #184]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801ccfc:	4313      	orrs	r3, r2
 801ccfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	f003 0310 	and.w	r3, r3, #16
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d010      	beq.n	801cd2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	699a      	ldr	r2, [r3, #24]
 801cd10:	4b28      	ldr	r3, [pc, #160]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd12:	69db      	ldr	r3, [r3, #28]
 801cd14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801cd18:	429a      	cmp	r2, r3
 801cd1a:	d208      	bcs.n	801cd2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801cd1c:	4b25      	ldr	r3, [pc, #148]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd1e:	69db      	ldr	r3, [r3, #28]
 801cd20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	699b      	ldr	r3, [r3, #24]
 801cd28:	4922      	ldr	r1, [pc, #136]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd2a:	4313      	orrs	r3, r2
 801cd2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	f003 0320 	and.w	r3, r3, #32
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d010      	beq.n	801cd5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	69da      	ldr	r2, [r3, #28]
 801cd3e:	4b1d      	ldr	r3, [pc, #116]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd40:	6a1b      	ldr	r3, [r3, #32]
 801cd42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801cd46:	429a      	cmp	r2, r3
 801cd48:	d208      	bcs.n	801cd5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801cd4a:	4b1a      	ldr	r3, [pc, #104]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd4c:	6a1b      	ldr	r3, [r3, #32]
 801cd4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	69db      	ldr	r3, [r3, #28]
 801cd56:	4917      	ldr	r1, [pc, #92]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd58:	4313      	orrs	r3, r2
 801cd5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801cd5c:	f000 f834 	bl	801cdc8 <HAL_RCC_GetSysClockFreq>
 801cd60:	4602      	mov	r2, r0
 801cd62:	4b14      	ldr	r3, [pc, #80]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd64:	699b      	ldr	r3, [r3, #24]
 801cd66:	0a1b      	lsrs	r3, r3, #8
 801cd68:	f003 030f 	and.w	r3, r3, #15
 801cd6c:	4912      	ldr	r1, [pc, #72]	@ (801cdb8 <HAL_RCC_ClockConfig+0x35c>)
 801cd6e:	5ccb      	ldrb	r3, [r1, r3]
 801cd70:	f003 031f 	and.w	r3, r3, #31
 801cd74:	fa22 f303 	lsr.w	r3, r2, r3
 801cd78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cd7a:	4b0e      	ldr	r3, [pc, #56]	@ (801cdb4 <HAL_RCC_ClockConfig+0x358>)
 801cd7c:	699b      	ldr	r3, [r3, #24]
 801cd7e:	f003 030f 	and.w	r3, r3, #15
 801cd82:	4a0d      	ldr	r2, [pc, #52]	@ (801cdb8 <HAL_RCC_ClockConfig+0x35c>)
 801cd84:	5cd3      	ldrb	r3, [r2, r3]
 801cd86:	f003 031f 	and.w	r3, r3, #31
 801cd8a:	693a      	ldr	r2, [r7, #16]
 801cd8c:	fa22 f303 	lsr.w	r3, r2, r3
 801cd90:	4a0a      	ldr	r2, [pc, #40]	@ (801cdbc <HAL_RCC_ClockConfig+0x360>)
 801cd92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cd94:	4a0a      	ldr	r2, [pc, #40]	@ (801cdc0 <HAL_RCC_ClockConfig+0x364>)
 801cd96:	693b      	ldr	r3, [r7, #16]
 801cd98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801cd9a:	4b0a      	ldr	r3, [pc, #40]	@ (801cdc4 <HAL_RCC_ClockConfig+0x368>)
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	4618      	mov	r0, r3
 801cda0:	f7fc fda0 	bl	80198e4 <HAL_InitTick>
 801cda4:	4603      	mov	r3, r0
 801cda6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801cda8:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdaa:	4618      	mov	r0, r3
 801cdac:	3718      	adds	r7, #24
 801cdae:	46bd      	mov	sp, r7
 801cdb0:	bd80      	pop	{r7, pc}
 801cdb2:	bf00      	nop
 801cdb4:	58024400 	.word	0x58024400
 801cdb8:	08026fec 	.word	0x08026fec
 801cdbc:	20000004 	.word	0x20000004
 801cdc0:	20000000 	.word	0x20000000
 801cdc4:	20000020 	.word	0x20000020

0801cdc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cdc8:	b480      	push	{r7}
 801cdca:	b089      	sub	sp, #36	@ 0x24
 801cdcc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801cdce:	4bb3      	ldr	r3, [pc, #716]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cdd0:	691b      	ldr	r3, [r3, #16]
 801cdd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cdd6:	2b18      	cmp	r3, #24
 801cdd8:	f200 8155 	bhi.w	801d086 <HAL_RCC_GetSysClockFreq+0x2be>
 801cddc:	a201      	add	r2, pc, #4	@ (adr r2, 801cde4 <HAL_RCC_GetSysClockFreq+0x1c>)
 801cdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cde2:	bf00      	nop
 801cde4:	0801ce49 	.word	0x0801ce49
 801cde8:	0801d087 	.word	0x0801d087
 801cdec:	0801d087 	.word	0x0801d087
 801cdf0:	0801d087 	.word	0x0801d087
 801cdf4:	0801d087 	.word	0x0801d087
 801cdf8:	0801d087 	.word	0x0801d087
 801cdfc:	0801d087 	.word	0x0801d087
 801ce00:	0801d087 	.word	0x0801d087
 801ce04:	0801ce6f 	.word	0x0801ce6f
 801ce08:	0801d087 	.word	0x0801d087
 801ce0c:	0801d087 	.word	0x0801d087
 801ce10:	0801d087 	.word	0x0801d087
 801ce14:	0801d087 	.word	0x0801d087
 801ce18:	0801d087 	.word	0x0801d087
 801ce1c:	0801d087 	.word	0x0801d087
 801ce20:	0801d087 	.word	0x0801d087
 801ce24:	0801ce75 	.word	0x0801ce75
 801ce28:	0801d087 	.word	0x0801d087
 801ce2c:	0801d087 	.word	0x0801d087
 801ce30:	0801d087 	.word	0x0801d087
 801ce34:	0801d087 	.word	0x0801d087
 801ce38:	0801d087 	.word	0x0801d087
 801ce3c:	0801d087 	.word	0x0801d087
 801ce40:	0801d087 	.word	0x0801d087
 801ce44:	0801ce7b 	.word	0x0801ce7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ce48:	4b94      	ldr	r3, [pc, #592]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce4a:	681b      	ldr	r3, [r3, #0]
 801ce4c:	f003 0320 	and.w	r3, r3, #32
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d009      	beq.n	801ce68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ce54:	4b91      	ldr	r3, [pc, #580]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	08db      	lsrs	r3, r3, #3
 801ce5a:	f003 0303 	and.w	r3, r3, #3
 801ce5e:	4a90      	ldr	r2, [pc, #576]	@ (801d0a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ce60:	fa22 f303 	lsr.w	r3, r2, r3
 801ce64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801ce66:	e111      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801ce68:	4b8d      	ldr	r3, [pc, #564]	@ (801d0a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ce6a:	61bb      	str	r3, [r7, #24]
      break;
 801ce6c:	e10e      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801ce6e:	4b8d      	ldr	r3, [pc, #564]	@ (801d0a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801ce70:	61bb      	str	r3, [r7, #24]
      break;
 801ce72:	e10b      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801ce74:	4b8c      	ldr	r3, [pc, #560]	@ (801d0a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801ce76:	61bb      	str	r3, [r7, #24]
      break;
 801ce78:	e108      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ce7a:	4b88      	ldr	r3, [pc, #544]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce7e:	f003 0303 	and.w	r3, r3, #3
 801ce82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801ce84:	4b85      	ldr	r3, [pc, #532]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ce88:	091b      	lsrs	r3, r3, #4
 801ce8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ce8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801ce90:	4b82      	ldr	r3, [pc, #520]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce94:	f003 0301 	and.w	r3, r3, #1
 801ce98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ce9a:	4b80      	ldr	r3, [pc, #512]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ce9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce9e:	08db      	lsrs	r3, r3, #3
 801cea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cea4:	68fa      	ldr	r2, [r7, #12]
 801cea6:	fb02 f303 	mul.w	r3, r2, r3
 801ceaa:	ee07 3a90 	vmov	s15, r3
 801ceae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ceb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801ceb6:	693b      	ldr	r3, [r7, #16]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	f000 80e1 	beq.w	801d080 <HAL_RCC_GetSysClockFreq+0x2b8>
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	2b02      	cmp	r3, #2
 801cec2:	f000 8083 	beq.w	801cfcc <HAL_RCC_GetSysClockFreq+0x204>
 801cec6:	697b      	ldr	r3, [r7, #20]
 801cec8:	2b02      	cmp	r3, #2
 801ceca:	f200 80a1 	bhi.w	801d010 <HAL_RCC_GetSysClockFreq+0x248>
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	d003      	beq.n	801cedc <HAL_RCC_GetSysClockFreq+0x114>
 801ced4:	697b      	ldr	r3, [r7, #20]
 801ced6:	2b01      	cmp	r3, #1
 801ced8:	d056      	beq.n	801cf88 <HAL_RCC_GetSysClockFreq+0x1c0>
 801ceda:	e099      	b.n	801d010 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801cedc:	4b6f      	ldr	r3, [pc, #444]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	f003 0320 	and.w	r3, r3, #32
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d02d      	beq.n	801cf44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cee8:	4b6c      	ldr	r3, [pc, #432]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	08db      	lsrs	r3, r3, #3
 801ceee:	f003 0303 	and.w	r3, r3, #3
 801cef2:	4a6b      	ldr	r2, [pc, #428]	@ (801d0a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801cef4:	fa22 f303 	lsr.w	r3, r2, r3
 801cef8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	ee07 3a90 	vmov	s15, r3
 801cf00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf04:	693b      	ldr	r3, [r7, #16]
 801cf06:	ee07 3a90 	vmov	s15, r3
 801cf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf12:	4b62      	ldr	r3, [pc, #392]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf1a:	ee07 3a90 	vmov	s15, r3
 801cf1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf22:	ed97 6a02 	vldr	s12, [r7, #8]
 801cf26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d0ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cf2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cf2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801cf42:	e087      	b.n	801d054 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cf44:	693b      	ldr	r3, [r7, #16]
 801cf46:	ee07 3a90 	vmov	s15, r3
 801cf4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d0b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 801cf52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf56:	4b51      	ldr	r3, [pc, #324]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cf5e:	ee07 3a90 	vmov	s15, r3
 801cf62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cf66:	ed97 6a02 	vldr	s12, [r7, #8]
 801cf6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d0ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cf6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cf76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cf7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cf7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cf82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cf86:	e065      	b.n	801d054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cf88:	693b      	ldr	r3, [r7, #16]
 801cf8a:	ee07 3a90 	vmov	s15, r3
 801cf8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cf92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d0b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801cf96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cf9a:	4b40      	ldr	r3, [pc, #256]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cf9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cfa2:	ee07 3a90 	vmov	s15, r3
 801cfa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfaa:	ed97 6a02 	vldr	s12, [r7, #8]
 801cfae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d0ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cfb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cfb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cfba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cfc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cfc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cfca:	e043      	b.n	801d054 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cfcc:	693b      	ldr	r3, [r7, #16]
 801cfce:	ee07 3a90 	vmov	s15, r3
 801cfd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cfd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d0b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 801cfda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cfde:	4b2f      	ldr	r3, [pc, #188]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cfe6:	ee07 3a90 	vmov	s15, r3
 801cfea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cfee:	ed97 6a02 	vldr	s12, [r7, #8]
 801cff2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d0ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801cff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d006:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d00a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d00e:	e021      	b.n	801d054 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d010:	693b      	ldr	r3, [r7, #16]
 801d012:	ee07 3a90 	vmov	s15, r3
 801d016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d01a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d0b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d022:	4b1e      	ldr	r3, [pc, #120]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d02a:	ee07 3a90 	vmov	s15, r3
 801d02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d032:	ed97 6a02 	vldr	s12, [r7, #8]
 801d036:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d0ac <HAL_RCC_GetSysClockFreq+0x2e4>
 801d03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d04e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d052:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d054:	4b11      	ldr	r3, [pc, #68]	@ (801d09c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d058:	0a5b      	lsrs	r3, r3, #9
 801d05a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d05e:	3301      	adds	r3, #1
 801d060:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d062:	683b      	ldr	r3, [r7, #0]
 801d064:	ee07 3a90 	vmov	s15, r3
 801d068:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d06c:	edd7 6a07 	vldr	s13, [r7, #28]
 801d070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d078:	ee17 3a90 	vmov	r3, s15
 801d07c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d07e:	e005      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d080:	2300      	movs	r3, #0
 801d082:	61bb      	str	r3, [r7, #24]
      break;
 801d084:	e002      	b.n	801d08c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d086:	4b07      	ldr	r3, [pc, #28]	@ (801d0a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d088:	61bb      	str	r3, [r7, #24]
      break;
 801d08a:	bf00      	nop
  }

  return sysclockfreq;
 801d08c:	69bb      	ldr	r3, [r7, #24]
}
 801d08e:	4618      	mov	r0, r3
 801d090:	3724      	adds	r7, #36	@ 0x24
 801d092:	46bd      	mov	sp, r7
 801d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d098:	4770      	bx	lr
 801d09a:	bf00      	nop
 801d09c:	58024400 	.word	0x58024400
 801d0a0:	03d09000 	.word	0x03d09000
 801d0a4:	003d0900 	.word	0x003d0900
 801d0a8:	017d7840 	.word	0x017d7840
 801d0ac:	46000000 	.word	0x46000000
 801d0b0:	4c742400 	.word	0x4c742400
 801d0b4:	4a742400 	.word	0x4a742400
 801d0b8:	4bbebc20 	.word	0x4bbebc20

0801d0bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b082      	sub	sp, #8
 801d0c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d0c2:	f7ff fe81 	bl	801cdc8 <HAL_RCC_GetSysClockFreq>
 801d0c6:	4602      	mov	r2, r0
 801d0c8:	4b10      	ldr	r3, [pc, #64]	@ (801d10c <HAL_RCC_GetHCLKFreq+0x50>)
 801d0ca:	699b      	ldr	r3, [r3, #24]
 801d0cc:	0a1b      	lsrs	r3, r3, #8
 801d0ce:	f003 030f 	and.w	r3, r3, #15
 801d0d2:	490f      	ldr	r1, [pc, #60]	@ (801d110 <HAL_RCC_GetHCLKFreq+0x54>)
 801d0d4:	5ccb      	ldrb	r3, [r1, r3]
 801d0d6:	f003 031f 	and.w	r3, r3, #31
 801d0da:	fa22 f303 	lsr.w	r3, r2, r3
 801d0de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d0e0:	4b0a      	ldr	r3, [pc, #40]	@ (801d10c <HAL_RCC_GetHCLKFreq+0x50>)
 801d0e2:	699b      	ldr	r3, [r3, #24]
 801d0e4:	f003 030f 	and.w	r3, r3, #15
 801d0e8:	4a09      	ldr	r2, [pc, #36]	@ (801d110 <HAL_RCC_GetHCLKFreq+0x54>)
 801d0ea:	5cd3      	ldrb	r3, [r2, r3]
 801d0ec:	f003 031f 	and.w	r3, r3, #31
 801d0f0:	687a      	ldr	r2, [r7, #4]
 801d0f2:	fa22 f303 	lsr.w	r3, r2, r3
 801d0f6:	4a07      	ldr	r2, [pc, #28]	@ (801d114 <HAL_RCC_GetHCLKFreq+0x58>)
 801d0f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d0fa:	4a07      	ldr	r2, [pc, #28]	@ (801d118 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d100:	4b04      	ldr	r3, [pc, #16]	@ (801d114 <HAL_RCC_GetHCLKFreq+0x58>)
 801d102:	681b      	ldr	r3, [r3, #0]
}
 801d104:	4618      	mov	r0, r3
 801d106:	3708      	adds	r7, #8
 801d108:	46bd      	mov	sp, r7
 801d10a:	bd80      	pop	{r7, pc}
 801d10c:	58024400 	.word	0x58024400
 801d110:	08026fec 	.word	0x08026fec
 801d114:	20000004 	.word	0x20000004
 801d118:	20000000 	.word	0x20000000

0801d11c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d11c:	b580      	push	{r7, lr}
 801d11e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d120:	f7ff ffcc 	bl	801d0bc <HAL_RCC_GetHCLKFreq>
 801d124:	4602      	mov	r2, r0
 801d126:	4b06      	ldr	r3, [pc, #24]	@ (801d140 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d128:	69db      	ldr	r3, [r3, #28]
 801d12a:	091b      	lsrs	r3, r3, #4
 801d12c:	f003 0307 	and.w	r3, r3, #7
 801d130:	4904      	ldr	r1, [pc, #16]	@ (801d144 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d132:	5ccb      	ldrb	r3, [r1, r3]
 801d134:	f003 031f 	and.w	r3, r3, #31
 801d138:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	bd80      	pop	{r7, pc}
 801d140:	58024400 	.word	0x58024400
 801d144:	08026fec 	.word	0x08026fec

0801d148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d148:	b580      	push	{r7, lr}
 801d14a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d14c:	f7ff ffb6 	bl	801d0bc <HAL_RCC_GetHCLKFreq>
 801d150:	4602      	mov	r2, r0
 801d152:	4b06      	ldr	r3, [pc, #24]	@ (801d16c <HAL_RCC_GetPCLK2Freq+0x24>)
 801d154:	69db      	ldr	r3, [r3, #28]
 801d156:	0a1b      	lsrs	r3, r3, #8
 801d158:	f003 0307 	and.w	r3, r3, #7
 801d15c:	4904      	ldr	r1, [pc, #16]	@ (801d170 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d15e:	5ccb      	ldrb	r3, [r1, r3]
 801d160:	f003 031f 	and.w	r3, r3, #31
 801d164:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d168:	4618      	mov	r0, r3
 801d16a:	bd80      	pop	{r7, pc}
 801d16c:	58024400 	.word	0x58024400
 801d170:	08026fec 	.word	0x08026fec

0801d174 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d178:	b0ca      	sub	sp, #296	@ 0x128
 801d17a:	af00      	add	r7, sp, #0
 801d17c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d180:	2300      	movs	r3, #0
 801d182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d186:	2300      	movs	r3, #0
 801d188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d194:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d198:	2500      	movs	r5, #0
 801d19a:	ea54 0305 	orrs.w	r3, r4, r5
 801d19e:	d049      	beq.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d1a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d1aa:	d02f      	beq.n	801d20c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d1ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d1b0:	d828      	bhi.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d1b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d1b6:	d01a      	beq.n	801d1ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d1b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d1bc:	d822      	bhi.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d003      	beq.n	801d1ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d1c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d1c6:	d007      	beq.n	801d1d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d1c8:	e01c      	b.n	801d204 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d1ca:	4bb8      	ldr	r3, [pc, #736]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d1ce:	4ab7      	ldr	r2, [pc, #732]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d1d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d1d6:	e01a      	b.n	801d20e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1dc:	3308      	adds	r3, #8
 801d1de:	2102      	movs	r1, #2
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	f001 fc8f 	bl	801eb04 <RCCEx_PLL2_Config>
 801d1e6:	4603      	mov	r3, r0
 801d1e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d1ec:	e00f      	b.n	801d20e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1f2:	3328      	adds	r3, #40	@ 0x28
 801d1f4:	2102      	movs	r1, #2
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f001 fd36 	bl	801ec68 <RCCEx_PLL3_Config>
 801d1fc:	4603      	mov	r3, r0
 801d1fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d202:	e004      	b.n	801d20e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d204:	2301      	movs	r3, #1
 801d206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d20a:	e000      	b.n	801d20e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d20c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d20e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d212:	2b00      	cmp	r3, #0
 801d214:	d10a      	bne.n	801d22c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d216:	4ba5      	ldr	r3, [pc, #660]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d21a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d224:	4aa1      	ldr	r2, [pc, #644]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d226:	430b      	orrs	r3, r1
 801d228:	6513      	str	r3, [r2, #80]	@ 0x50
 801d22a:	e003      	b.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d22c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d23c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d240:	f04f 0900 	mov.w	r9, #0
 801d244:	ea58 0309 	orrs.w	r3, r8, r9
 801d248:	d047      	beq.n	801d2da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d24e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d250:	2b04      	cmp	r3, #4
 801d252:	d82a      	bhi.n	801d2aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d254:	a201      	add	r2, pc, #4	@ (adr r2, 801d25c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d25a:	bf00      	nop
 801d25c:	0801d271 	.word	0x0801d271
 801d260:	0801d27f 	.word	0x0801d27f
 801d264:	0801d295 	.word	0x0801d295
 801d268:	0801d2b3 	.word	0x0801d2b3
 801d26c:	0801d2b3 	.word	0x0801d2b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d270:	4b8e      	ldr	r3, [pc, #568]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d274:	4a8d      	ldr	r2, [pc, #564]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d27a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d27c:	e01a      	b.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d282:	3308      	adds	r3, #8
 801d284:	2100      	movs	r1, #0
 801d286:	4618      	mov	r0, r3
 801d288:	f001 fc3c 	bl	801eb04 <RCCEx_PLL2_Config>
 801d28c:	4603      	mov	r3, r0
 801d28e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d292:	e00f      	b.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d298:	3328      	adds	r3, #40	@ 0x28
 801d29a:	2100      	movs	r1, #0
 801d29c:	4618      	mov	r0, r3
 801d29e:	f001 fce3 	bl	801ec68 <RCCEx_PLL3_Config>
 801d2a2:	4603      	mov	r3, r0
 801d2a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d2a8:	e004      	b.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d2b0:	e000      	b.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d2b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d2b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	d10a      	bne.n	801d2d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d2bc:	4b7b      	ldr	r3, [pc, #492]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d2be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d2c0:	f023 0107 	bic.w	r1, r3, #7
 801d2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d2ca:	4a78      	ldr	r2, [pc, #480]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d2cc:	430b      	orrs	r3, r1
 801d2ce:	6513      	str	r3, [r2, #80]	@ 0x50
 801d2d0:	e003      	b.n	801d2da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d2e6:	f04f 0b00 	mov.w	fp, #0
 801d2ea:	ea5a 030b 	orrs.w	r3, sl, fp
 801d2ee:	d04c      	beq.n	801d38a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d2f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d2fa:	d030      	beq.n	801d35e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d2fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d300:	d829      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d302:	2bc0      	cmp	r3, #192	@ 0xc0
 801d304:	d02d      	beq.n	801d362 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d306:	2bc0      	cmp	r3, #192	@ 0xc0
 801d308:	d825      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d30a:	2b80      	cmp	r3, #128	@ 0x80
 801d30c:	d018      	beq.n	801d340 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d30e:	2b80      	cmp	r3, #128	@ 0x80
 801d310:	d821      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d312:	2b00      	cmp	r3, #0
 801d314:	d002      	beq.n	801d31c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d316:	2b40      	cmp	r3, #64	@ 0x40
 801d318:	d007      	beq.n	801d32a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d31a:	e01c      	b.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d31c:	4b63      	ldr	r3, [pc, #396]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d320:	4a62      	ldr	r2, [pc, #392]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d326:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d328:	e01c      	b.n	801d364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d32e:	3308      	adds	r3, #8
 801d330:	2100      	movs	r1, #0
 801d332:	4618      	mov	r0, r3
 801d334:	f001 fbe6 	bl	801eb04 <RCCEx_PLL2_Config>
 801d338:	4603      	mov	r3, r0
 801d33a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d33e:	e011      	b.n	801d364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d344:	3328      	adds	r3, #40	@ 0x28
 801d346:	2100      	movs	r1, #0
 801d348:	4618      	mov	r0, r3
 801d34a:	f001 fc8d 	bl	801ec68 <RCCEx_PLL3_Config>
 801d34e:	4603      	mov	r3, r0
 801d350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d354:	e006      	b.n	801d364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d356:	2301      	movs	r3, #1
 801d358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d35c:	e002      	b.n	801d364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d35e:	bf00      	nop
 801d360:	e000      	b.n	801d364 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d362:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d10a      	bne.n	801d382 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d36c:	4b4f      	ldr	r3, [pc, #316]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d370:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d37a:	4a4c      	ldr	r2, [pc, #304]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d37c:	430b      	orrs	r3, r1
 801d37e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d380:	e003      	b.n	801d38a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d386:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d38a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d392:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d396:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d39a:	2300      	movs	r3, #0
 801d39c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d3a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d3a4:	460b      	mov	r3, r1
 801d3a6:	4313      	orrs	r3, r2
 801d3a8:	d053      	beq.n	801d452 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d3b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d3b6:	d035      	beq.n	801d424 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d3b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d3bc:	d82e      	bhi.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d3be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d3c2:	d031      	beq.n	801d428 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d3c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d3c8:	d828      	bhi.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d3ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d3ce:	d01a      	beq.n	801d406 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d3d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d3d4:	d822      	bhi.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	d003      	beq.n	801d3e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d3da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d3de:	d007      	beq.n	801d3f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d3e0:	e01c      	b.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3e2:	4b32      	ldr	r3, [pc, #200]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3e6:	4a31      	ldr	r2, [pc, #196]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d3e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d3ee:	e01c      	b.n	801d42a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d3f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3f4:	3308      	adds	r3, #8
 801d3f6:	2100      	movs	r1, #0
 801d3f8:	4618      	mov	r0, r3
 801d3fa:	f001 fb83 	bl	801eb04 <RCCEx_PLL2_Config>
 801d3fe:	4603      	mov	r3, r0
 801d400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d404:	e011      	b.n	801d42a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d40a:	3328      	adds	r3, #40	@ 0x28
 801d40c:	2100      	movs	r1, #0
 801d40e:	4618      	mov	r0, r3
 801d410:	f001 fc2a 	bl	801ec68 <RCCEx_PLL3_Config>
 801d414:	4603      	mov	r3, r0
 801d416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d41a:	e006      	b.n	801d42a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d41c:	2301      	movs	r3, #1
 801d41e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d422:	e002      	b.n	801d42a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d424:	bf00      	nop
 801d426:	e000      	b.n	801d42a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d428:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d42a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d42e:	2b00      	cmp	r3, #0
 801d430:	d10b      	bne.n	801d44a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d432:	4b1e      	ldr	r3, [pc, #120]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d436:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d43e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d442:	4a1a      	ldr	r2, [pc, #104]	@ (801d4ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d444:	430b      	orrs	r3, r1
 801d446:	6593      	str	r3, [r2, #88]	@ 0x58
 801d448:	e003      	b.n	801d452 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d44e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d45a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d45e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d462:	2300      	movs	r3, #0
 801d464:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d468:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d46c:	460b      	mov	r3, r1
 801d46e:	4313      	orrs	r3, r2
 801d470:	d056      	beq.n	801d520 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d476:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d47a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d47e:	d038      	beq.n	801d4f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d484:	d831      	bhi.n	801d4ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d486:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d48a:	d034      	beq.n	801d4f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d48c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d490:	d82b      	bhi.n	801d4ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d496:	d01d      	beq.n	801d4d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d49c:	d825      	bhi.n	801d4ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	d006      	beq.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d4a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d4a6:	d00a      	beq.n	801d4be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d4a8:	e01f      	b.n	801d4ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d4aa:	bf00      	nop
 801d4ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d4b0:	4ba2      	ldr	r3, [pc, #648]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d4b4:	4aa1      	ldr	r2, [pc, #644]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d4b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d4ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d4bc:	e01c      	b.n	801d4f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4c2:	3308      	adds	r3, #8
 801d4c4:	2100      	movs	r1, #0
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f001 fb1c 	bl	801eb04 <RCCEx_PLL2_Config>
 801d4cc:	4603      	mov	r3, r0
 801d4ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d4d2:	e011      	b.n	801d4f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4d8:	3328      	adds	r3, #40	@ 0x28
 801d4da:	2100      	movs	r1, #0
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f001 fbc3 	bl	801ec68 <RCCEx_PLL3_Config>
 801d4e2:	4603      	mov	r3, r0
 801d4e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d4e8:	e006      	b.n	801d4f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d4ea:	2301      	movs	r3, #1
 801d4ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d4f0:	e002      	b.n	801d4f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d4f2:	bf00      	nop
 801d4f4:	e000      	b.n	801d4f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d4f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d4f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d10b      	bne.n	801d518 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d500:	4b8e      	ldr	r3, [pc, #568]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d504:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d50c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d510:	4a8a      	ldr	r2, [pc, #552]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d512:	430b      	orrs	r3, r1
 801d514:	6593      	str	r3, [r2, #88]	@ 0x58
 801d516:	e003      	b.n	801d520 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d51c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d524:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d528:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d52c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d530:	2300      	movs	r3, #0
 801d532:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d536:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d53a:	460b      	mov	r3, r1
 801d53c:	4313      	orrs	r3, r2
 801d53e:	d03a      	beq.n	801d5b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d546:	2b30      	cmp	r3, #48	@ 0x30
 801d548:	d01f      	beq.n	801d58a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d54a:	2b30      	cmp	r3, #48	@ 0x30
 801d54c:	d819      	bhi.n	801d582 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d54e:	2b20      	cmp	r3, #32
 801d550:	d00c      	beq.n	801d56c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d552:	2b20      	cmp	r3, #32
 801d554:	d815      	bhi.n	801d582 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d556:	2b00      	cmp	r3, #0
 801d558:	d019      	beq.n	801d58e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d55a:	2b10      	cmp	r3, #16
 801d55c:	d111      	bne.n	801d582 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d55e:	4b77      	ldr	r3, [pc, #476]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d562:	4a76      	ldr	r2, [pc, #472]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d56a:	e011      	b.n	801d590 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d570:	3308      	adds	r3, #8
 801d572:	2102      	movs	r1, #2
 801d574:	4618      	mov	r0, r3
 801d576:	f001 fac5 	bl	801eb04 <RCCEx_PLL2_Config>
 801d57a:	4603      	mov	r3, r0
 801d57c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d580:	e006      	b.n	801d590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d582:	2301      	movs	r3, #1
 801d584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d588:	e002      	b.n	801d590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d58a:	bf00      	nop
 801d58c:	e000      	b.n	801d590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d58e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d594:	2b00      	cmp	r3, #0
 801d596:	d10a      	bne.n	801d5ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d598:	4b68      	ldr	r3, [pc, #416]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d59a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d59c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d5a6:	4a65      	ldr	r2, [pc, #404]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d5a8:	430b      	orrs	r3, r1
 801d5aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d5ac:	e003      	b.n	801d5b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d5be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d5c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d5c6:	2300      	movs	r3, #0
 801d5c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d5cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d5d0:	460b      	mov	r3, r1
 801d5d2:	4313      	orrs	r3, r2
 801d5d4:	d051      	beq.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d5dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d5e0:	d035      	beq.n	801d64e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d5e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d5e6:	d82e      	bhi.n	801d646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d5e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d5ec:	d031      	beq.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d5ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d5f2:	d828      	bhi.n	801d646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d5f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d5f8:	d01a      	beq.n	801d630 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d5fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d5fe:	d822      	bhi.n	801d646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d600:	2b00      	cmp	r3, #0
 801d602:	d003      	beq.n	801d60c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d608:	d007      	beq.n	801d61a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d60a:	e01c      	b.n	801d646 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d60c:	4b4b      	ldr	r3, [pc, #300]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d610:	4a4a      	ldr	r2, [pc, #296]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d618:	e01c      	b.n	801d654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d61e:	3308      	adds	r3, #8
 801d620:	2100      	movs	r1, #0
 801d622:	4618      	mov	r0, r3
 801d624:	f001 fa6e 	bl	801eb04 <RCCEx_PLL2_Config>
 801d628:	4603      	mov	r3, r0
 801d62a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d62e:	e011      	b.n	801d654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d634:	3328      	adds	r3, #40	@ 0x28
 801d636:	2100      	movs	r1, #0
 801d638:	4618      	mov	r0, r3
 801d63a:	f001 fb15 	bl	801ec68 <RCCEx_PLL3_Config>
 801d63e:	4603      	mov	r3, r0
 801d640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d644:	e006      	b.n	801d654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d646:	2301      	movs	r3, #1
 801d648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d64c:	e002      	b.n	801d654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d64e:	bf00      	nop
 801d650:	e000      	b.n	801d654 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d652:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d10a      	bne.n	801d672 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d65c:	4b37      	ldr	r3, [pc, #220]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d660:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d66a:	4a34      	ldr	r2, [pc, #208]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d66c:	430b      	orrs	r3, r1
 801d66e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d670:	e003      	b.n	801d67a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d682:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d68a:	2300      	movs	r3, #0
 801d68c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d690:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d694:	460b      	mov	r3, r1
 801d696:	4313      	orrs	r3, r2
 801d698:	d056      	beq.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d69e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d6a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d6a4:	d033      	beq.n	801d70e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d6a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d6aa:	d82c      	bhi.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d6ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d6b0:	d02f      	beq.n	801d712 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d6b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d6b6:	d826      	bhi.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d6b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d6bc:	d02b      	beq.n	801d716 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d6be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d6c2:	d820      	bhi.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d6c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d6c8:	d012      	beq.n	801d6f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d6ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d6ce:	d81a      	bhi.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d022      	beq.n	801d71a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d6d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d6d8:	d115      	bne.n	801d706 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6de:	3308      	adds	r3, #8
 801d6e0:	2101      	movs	r1, #1
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f001 fa0e 	bl	801eb04 <RCCEx_PLL2_Config>
 801d6e8:	4603      	mov	r3, r0
 801d6ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d6ee:	e015      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f4:	3328      	adds	r3, #40	@ 0x28
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f001 fab5 	bl	801ec68 <RCCEx_PLL3_Config>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d704:	e00a      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d706:	2301      	movs	r3, #1
 801d708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d70c:	e006      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d70e:	bf00      	nop
 801d710:	e004      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d712:	bf00      	nop
 801d714:	e002      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d716:	bf00      	nop
 801d718:	e000      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d71c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d720:	2b00      	cmp	r3, #0
 801d722:	d10d      	bne.n	801d740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d724:	4b05      	ldr	r3, [pc, #20]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d728:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d732:	4a02      	ldr	r2, [pc, #8]	@ (801d73c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d734:	430b      	orrs	r3, r1
 801d736:	6513      	str	r3, [r2, #80]	@ 0x50
 801d738:	e006      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d73a:	bf00      	nop
 801d73c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d750:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d758:	2300      	movs	r3, #0
 801d75a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d75e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d762:	460b      	mov	r3, r1
 801d764:	4313      	orrs	r3, r2
 801d766:	d055      	beq.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d76c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d774:	d033      	beq.n	801d7de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d776:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d77a:	d82c      	bhi.n	801d7d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d77c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d780:	d02f      	beq.n	801d7e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d786:	d826      	bhi.n	801d7d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d788:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d78c:	d02b      	beq.n	801d7e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d78e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d792:	d820      	bhi.n	801d7d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d798:	d012      	beq.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d79e:	d81a      	bhi.n	801d7d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d022      	beq.n	801d7ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d7a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d7a8:	d115      	bne.n	801d7d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ae:	3308      	adds	r3, #8
 801d7b0:	2101      	movs	r1, #1
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f001 f9a6 	bl	801eb04 <RCCEx_PLL2_Config>
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d7be:	e015      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7c4:	3328      	adds	r3, #40	@ 0x28
 801d7c6:	2101      	movs	r1, #1
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f001 fa4d 	bl	801ec68 <RCCEx_PLL3_Config>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d7d4:	e00a      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d7d6:	2301      	movs	r3, #1
 801d7d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7dc:	e006      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d7de:	bf00      	nop
 801d7e0:	e004      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d7e2:	bf00      	nop
 801d7e4:	e002      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d7e6:	bf00      	nop
 801d7e8:	e000      	b.n	801d7ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d7ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d10b      	bne.n	801d80c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d7f4:	4ba3      	ldr	r3, [pc, #652]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d7f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d804:	4a9f      	ldr	r2, [pc, #636]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d806:	430b      	orrs	r3, r1
 801d808:	6593      	str	r3, [r2, #88]	@ 0x58
 801d80a:	e003      	b.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d80c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d81c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d824:	2300      	movs	r3, #0
 801d826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d82a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d82e:	460b      	mov	r3, r1
 801d830:	4313      	orrs	r3, r2
 801d832:	d037      	beq.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d83a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d83e:	d00e      	beq.n	801d85e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d844:	d816      	bhi.n	801d874 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d846:	2b00      	cmp	r3, #0
 801d848:	d018      	beq.n	801d87c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d84a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d84e:	d111      	bne.n	801d874 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d850:	4b8c      	ldr	r3, [pc, #560]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d854:	4a8b      	ldr	r2, [pc, #556]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d85a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d85c:	e00f      	b.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d862:	3308      	adds	r3, #8
 801d864:	2101      	movs	r1, #1
 801d866:	4618      	mov	r0, r3
 801d868:	f001 f94c 	bl	801eb04 <RCCEx_PLL2_Config>
 801d86c:	4603      	mov	r3, r0
 801d86e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d872:	e004      	b.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d874:	2301      	movs	r3, #1
 801d876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d87a:	e000      	b.n	801d87e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d87e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d882:	2b00      	cmp	r3, #0
 801d884:	d10a      	bne.n	801d89c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d886:	4b7f      	ldr	r3, [pc, #508]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d88a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d894:	4a7b      	ldr	r2, [pc, #492]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d896:	430b      	orrs	r3, r1
 801d898:	6513      	str	r3, [r2, #80]	@ 0x50
 801d89a:	e003      	b.n	801d8a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d89c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d8b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d8ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d8be:	460b      	mov	r3, r1
 801d8c0:	4313      	orrs	r3, r2
 801d8c2:	d039      	beq.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d8ca:	2b03      	cmp	r3, #3
 801d8cc:	d81c      	bhi.n	801d908 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d8ce:	a201      	add	r2, pc, #4	@ (adr r2, 801d8d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8d4:	0801d911 	.word	0x0801d911
 801d8d8:	0801d8e5 	.word	0x0801d8e5
 801d8dc:	0801d8f3 	.word	0x0801d8f3
 801d8e0:	0801d911 	.word	0x0801d911
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d8e4:	4b67      	ldr	r3, [pc, #412]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d8e8:	4a66      	ldr	r2, [pc, #408]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d8ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d8ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d8f0:	e00f      	b.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8f6:	3308      	adds	r3, #8
 801d8f8:	2102      	movs	r1, #2
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	f001 f902 	bl	801eb04 <RCCEx_PLL2_Config>
 801d900:	4603      	mov	r3, r0
 801d902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d906:	e004      	b.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d908:	2301      	movs	r3, #1
 801d90a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d90e:	e000      	b.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d910:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d916:	2b00      	cmp	r3, #0
 801d918:	d10a      	bne.n	801d930 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d91a:	4b5a      	ldr	r3, [pc, #360]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d91c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d91e:	f023 0103 	bic.w	r1, r3, #3
 801d922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d928:	4a56      	ldr	r2, [pc, #344]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d92a:	430b      	orrs	r3, r1
 801d92c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d92e:	e003      	b.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d934:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d940:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d948:	2300      	movs	r3, #0
 801d94a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d94e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d952:	460b      	mov	r3, r1
 801d954:	4313      	orrs	r3, r2
 801d956:	f000 809f 	beq.w	801da98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d95a:	4b4b      	ldr	r3, [pc, #300]	@ (801da88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	4a4a      	ldr	r2, [pc, #296]	@ (801da88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d966:	f7fc f807 	bl	8019978 <HAL_GetTick>
 801d96a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d96e:	e00b      	b.n	801d988 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d970:	f7fc f802 	bl	8019978 <HAL_GetTick>
 801d974:	4602      	mov	r2, r0
 801d976:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d97a:	1ad3      	subs	r3, r2, r3
 801d97c:	2b64      	cmp	r3, #100	@ 0x64
 801d97e:	d903      	bls.n	801d988 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d980:	2303      	movs	r3, #3
 801d982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d986:	e005      	b.n	801d994 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d988:	4b3f      	ldr	r3, [pc, #252]	@ (801da88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d990:	2b00      	cmp	r3, #0
 801d992:	d0ed      	beq.n	801d970 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d179      	bne.n	801da90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d99c:	4b39      	ldr	r3, [pc, #228]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d99e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d9a8:	4053      	eors	r3, r2
 801d9aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d015      	beq.n	801d9de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d9b2:	4b34      	ldr	r3, [pc, #208]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d9ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d9be:	4b31      	ldr	r3, [pc, #196]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9c2:	4a30      	ldr	r2, [pc, #192]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d9c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d9ca:	4b2e      	ldr	r3, [pc, #184]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d9ce:	4a2d      	ldr	r2, [pc, #180]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d9d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d9d6:	4a2b      	ldr	r2, [pc, #172]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d9d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d9dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d9e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d9ea:	d118      	bne.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d9ec:	f7fb ffc4 	bl	8019978 <HAL_GetTick>
 801d9f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d9f4:	e00d      	b.n	801da12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d9f6:	f7fb ffbf 	bl	8019978 <HAL_GetTick>
 801d9fa:	4602      	mov	r2, r0
 801d9fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801da00:	1ad2      	subs	r2, r2, r3
 801da02:	f241 3388 	movw	r3, #5000	@ 0x1388
 801da06:	429a      	cmp	r2, r3
 801da08:	d903      	bls.n	801da12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801da0a:	2303      	movs	r3, #3
 801da0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801da10:	e005      	b.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801da12:	4b1c      	ldr	r3, [pc, #112]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801da16:	f003 0302 	and.w	r3, r3, #2
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d0eb      	beq.n	801d9f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801da1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da22:	2b00      	cmp	r3, #0
 801da24:	d129      	bne.n	801da7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801da26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801da2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801da32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801da36:	d10e      	bne.n	801da56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801da38:	4b12      	ldr	r3, [pc, #72]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da3a:	691b      	ldr	r3, [r3, #16]
 801da3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801da40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801da48:	091a      	lsrs	r2, r3, #4
 801da4a:	4b10      	ldr	r3, [pc, #64]	@ (801da8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801da4c:	4013      	ands	r3, r2
 801da4e:	4a0d      	ldr	r2, [pc, #52]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da50:	430b      	orrs	r3, r1
 801da52:	6113      	str	r3, [r2, #16]
 801da54:	e005      	b.n	801da62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801da56:	4b0b      	ldr	r3, [pc, #44]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da58:	691b      	ldr	r3, [r3, #16]
 801da5a:	4a0a      	ldr	r2, [pc, #40]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801da60:	6113      	str	r3, [r2, #16]
 801da62:	4b08      	ldr	r3, [pc, #32]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801da66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801da6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801da72:	4a04      	ldr	r2, [pc, #16]	@ (801da84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801da74:	430b      	orrs	r3, r1
 801da76:	6713      	str	r3, [r2, #112]	@ 0x70
 801da78:	e00e      	b.n	801da98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801da7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801da82:	e009      	b.n	801da98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801da84:	58024400 	.word	0x58024400
 801da88:	58024800 	.word	0x58024800
 801da8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801da98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daa0:	f002 0301 	and.w	r3, r2, #1
 801daa4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801daa8:	2300      	movs	r3, #0
 801daaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801daae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801dab2:	460b      	mov	r3, r1
 801dab4:	4313      	orrs	r3, r2
 801dab6:	f000 8089 	beq.w	801dbcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801daba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dabe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dac0:	2b28      	cmp	r3, #40	@ 0x28
 801dac2:	d86b      	bhi.n	801db9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801dac4:	a201      	add	r2, pc, #4	@ (adr r2, 801dacc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801dac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801daca:	bf00      	nop
 801dacc:	0801dba5 	.word	0x0801dba5
 801dad0:	0801db9d 	.word	0x0801db9d
 801dad4:	0801db9d 	.word	0x0801db9d
 801dad8:	0801db9d 	.word	0x0801db9d
 801dadc:	0801db9d 	.word	0x0801db9d
 801dae0:	0801db9d 	.word	0x0801db9d
 801dae4:	0801db9d 	.word	0x0801db9d
 801dae8:	0801db9d 	.word	0x0801db9d
 801daec:	0801db71 	.word	0x0801db71
 801daf0:	0801db9d 	.word	0x0801db9d
 801daf4:	0801db9d 	.word	0x0801db9d
 801daf8:	0801db9d 	.word	0x0801db9d
 801dafc:	0801db9d 	.word	0x0801db9d
 801db00:	0801db9d 	.word	0x0801db9d
 801db04:	0801db9d 	.word	0x0801db9d
 801db08:	0801db9d 	.word	0x0801db9d
 801db0c:	0801db87 	.word	0x0801db87
 801db10:	0801db9d 	.word	0x0801db9d
 801db14:	0801db9d 	.word	0x0801db9d
 801db18:	0801db9d 	.word	0x0801db9d
 801db1c:	0801db9d 	.word	0x0801db9d
 801db20:	0801db9d 	.word	0x0801db9d
 801db24:	0801db9d 	.word	0x0801db9d
 801db28:	0801db9d 	.word	0x0801db9d
 801db2c:	0801dba5 	.word	0x0801dba5
 801db30:	0801db9d 	.word	0x0801db9d
 801db34:	0801db9d 	.word	0x0801db9d
 801db38:	0801db9d 	.word	0x0801db9d
 801db3c:	0801db9d 	.word	0x0801db9d
 801db40:	0801db9d 	.word	0x0801db9d
 801db44:	0801db9d 	.word	0x0801db9d
 801db48:	0801db9d 	.word	0x0801db9d
 801db4c:	0801dba5 	.word	0x0801dba5
 801db50:	0801db9d 	.word	0x0801db9d
 801db54:	0801db9d 	.word	0x0801db9d
 801db58:	0801db9d 	.word	0x0801db9d
 801db5c:	0801db9d 	.word	0x0801db9d
 801db60:	0801db9d 	.word	0x0801db9d
 801db64:	0801db9d 	.word	0x0801db9d
 801db68:	0801db9d 	.word	0x0801db9d
 801db6c:	0801dba5 	.word	0x0801dba5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801db70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db74:	3308      	adds	r3, #8
 801db76:	2101      	movs	r1, #1
 801db78:	4618      	mov	r0, r3
 801db7a:	f000 ffc3 	bl	801eb04 <RCCEx_PLL2_Config>
 801db7e:	4603      	mov	r3, r0
 801db80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801db84:	e00f      	b.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801db86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db8a:	3328      	adds	r3, #40	@ 0x28
 801db8c:	2101      	movs	r1, #1
 801db8e:	4618      	mov	r0, r3
 801db90:	f001 f86a 	bl	801ec68 <RCCEx_PLL3_Config>
 801db94:	4603      	mov	r3, r0
 801db96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801db9a:	e004      	b.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801db9c:	2301      	movs	r3, #1
 801db9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dba2:	e000      	b.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801dba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d10a      	bne.n	801dbc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801dbae:	4bbf      	ldr	r3, [pc, #764]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dbb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801dbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dbbc:	4abb      	ldr	r2, [pc, #748]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dbbe:	430b      	orrs	r3, r1
 801dbc0:	6553      	str	r3, [r2, #84]	@ 0x54
 801dbc2:	e003      	b.n	801dbcc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801dbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbd4:	f002 0302 	and.w	r3, r2, #2
 801dbd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801dbdc:	2300      	movs	r3, #0
 801dbde:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801dbe2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801dbe6:	460b      	mov	r3, r1
 801dbe8:	4313      	orrs	r3, r2
 801dbea:	d041      	beq.n	801dc70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801dbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dbf2:	2b05      	cmp	r3, #5
 801dbf4:	d824      	bhi.n	801dc40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801dbf6:	a201      	add	r2, pc, #4	@ (adr r2, 801dbfc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801dbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbfc:	0801dc49 	.word	0x0801dc49
 801dc00:	0801dc15 	.word	0x0801dc15
 801dc04:	0801dc2b 	.word	0x0801dc2b
 801dc08:	0801dc49 	.word	0x0801dc49
 801dc0c:	0801dc49 	.word	0x0801dc49
 801dc10:	0801dc49 	.word	0x0801dc49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc18:	3308      	adds	r3, #8
 801dc1a:	2101      	movs	r1, #1
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f000 ff71 	bl	801eb04 <RCCEx_PLL2_Config>
 801dc22:	4603      	mov	r3, r0
 801dc24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801dc28:	e00f      	b.n	801dc4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc2e:	3328      	adds	r3, #40	@ 0x28
 801dc30:	2101      	movs	r1, #1
 801dc32:	4618      	mov	r0, r3
 801dc34:	f001 f818 	bl	801ec68 <RCCEx_PLL3_Config>
 801dc38:	4603      	mov	r3, r0
 801dc3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801dc3e:	e004      	b.n	801dc4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc40:	2301      	movs	r3, #1
 801dc42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc46:	e000      	b.n	801dc4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801dc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d10a      	bne.n	801dc68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801dc52:	4b96      	ldr	r3, [pc, #600]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dc54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dc56:	f023 0107 	bic.w	r1, r3, #7
 801dc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801dc60:	4a92      	ldr	r2, [pc, #584]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dc62:	430b      	orrs	r3, r1
 801dc64:	6553      	str	r3, [r2, #84]	@ 0x54
 801dc66:	e003      	b.n	801dc70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801dc70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc78:	f002 0304 	and.w	r3, r2, #4
 801dc7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801dc80:	2300      	movs	r3, #0
 801dc82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801dc86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801dc8a:	460b      	mov	r3, r1
 801dc8c:	4313      	orrs	r3, r2
 801dc8e:	d044      	beq.n	801dd1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801dc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dc98:	2b05      	cmp	r3, #5
 801dc9a:	d825      	bhi.n	801dce8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801dc9c:	a201      	add	r2, pc, #4	@ (adr r2, 801dca4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801dc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dca2:	bf00      	nop
 801dca4:	0801dcf1 	.word	0x0801dcf1
 801dca8:	0801dcbd 	.word	0x0801dcbd
 801dcac:	0801dcd3 	.word	0x0801dcd3
 801dcb0:	0801dcf1 	.word	0x0801dcf1
 801dcb4:	0801dcf1 	.word	0x0801dcf1
 801dcb8:	0801dcf1 	.word	0x0801dcf1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dcbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcc0:	3308      	adds	r3, #8
 801dcc2:	2101      	movs	r1, #1
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f000 ff1d 	bl	801eb04 <RCCEx_PLL2_Config>
 801dcca:	4603      	mov	r3, r0
 801dccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dcd0:	e00f      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dcd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcd6:	3328      	adds	r3, #40	@ 0x28
 801dcd8:	2101      	movs	r1, #1
 801dcda:	4618      	mov	r0, r3
 801dcdc:	f000 ffc4 	bl	801ec68 <RCCEx_PLL3_Config>
 801dce0:	4603      	mov	r3, r0
 801dce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801dce6:	e004      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dce8:	2301      	movs	r3, #1
 801dcea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcee:	e000      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801dcf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d10b      	bne.n	801dd12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801dcfa:	4b6c      	ldr	r3, [pc, #432]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dcfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dcfe:	f023 0107 	bic.w	r1, r3, #7
 801dd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dd0a:	4a68      	ldr	r2, [pc, #416]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dd0c:	430b      	orrs	r3, r1
 801dd0e:	6593      	str	r3, [r2, #88]	@ 0x58
 801dd10:	e003      	b.n	801dd1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801dd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd22:	f002 0320 	and.w	r3, r2, #32
 801dd26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801dd30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801dd34:	460b      	mov	r3, r1
 801dd36:	4313      	orrs	r3, r2
 801dd38:	d055      	beq.n	801dde6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801dd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801dd42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dd46:	d033      	beq.n	801ddb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801dd48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dd4c:	d82c      	bhi.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dd52:	d02f      	beq.n	801ddb4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801dd54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dd58:	d826      	bhi.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dd5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dd5e:	d02b      	beq.n	801ddb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801dd60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dd64:	d820      	bhi.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dd66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dd6a:	d012      	beq.n	801dd92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801dd6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dd70:	d81a      	bhi.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d022      	beq.n	801ddbc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801dd76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dd7a:	d115      	bne.n	801dda8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd80:	3308      	adds	r3, #8
 801dd82:	2100      	movs	r1, #0
 801dd84:	4618      	mov	r0, r3
 801dd86:	f000 febd 	bl	801eb04 <RCCEx_PLL2_Config>
 801dd8a:	4603      	mov	r3, r0
 801dd8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dd90:	e015      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd96:	3328      	adds	r3, #40	@ 0x28
 801dd98:	2102      	movs	r1, #2
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f000 ff64 	bl	801ec68 <RCCEx_PLL3_Config>
 801dda0:	4603      	mov	r3, r0
 801dda2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801dda6:	e00a      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dda8:	2301      	movs	r3, #1
 801ddaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ddae:	e006      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ddb0:	bf00      	nop
 801ddb2:	e004      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ddb4:	bf00      	nop
 801ddb6:	e002      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ddb8:	bf00      	nop
 801ddba:	e000      	b.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801ddbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ddbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d10b      	bne.n	801ddde <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ddc6:	4b39      	ldr	r3, [pc, #228]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ddc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ddca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801ddce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ddd6:	4a35      	ldr	r2, [pc, #212]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ddd8:	430b      	orrs	r3, r1
 801ddda:	6553      	str	r3, [r2, #84]	@ 0x54
 801dddc:	e003      	b.n	801dde6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dde2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801dde6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801ddf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801ddfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801de00:	460b      	mov	r3, r1
 801de02:	4313      	orrs	r3, r2
 801de04:	d058      	beq.n	801deb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801de06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801de0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801de12:	d033      	beq.n	801de7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801de14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801de18:	d82c      	bhi.n	801de74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801de1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801de1e:	d02f      	beq.n	801de80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801de20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801de24:	d826      	bhi.n	801de74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801de26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801de2a:	d02b      	beq.n	801de84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801de2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801de30:	d820      	bhi.n	801de74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801de32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801de36:	d012      	beq.n	801de5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801de38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801de3c:	d81a      	bhi.n	801de74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d022      	beq.n	801de88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801de42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801de46:	d115      	bne.n	801de74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801de48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de4c:	3308      	adds	r3, #8
 801de4e:	2100      	movs	r1, #0
 801de50:	4618      	mov	r0, r3
 801de52:	f000 fe57 	bl	801eb04 <RCCEx_PLL2_Config>
 801de56:	4603      	mov	r3, r0
 801de58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801de5c:	e015      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801de5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de62:	3328      	adds	r3, #40	@ 0x28
 801de64:	2102      	movs	r1, #2
 801de66:	4618      	mov	r0, r3
 801de68:	f000 fefe 	bl	801ec68 <RCCEx_PLL3_Config>
 801de6c:	4603      	mov	r3, r0
 801de6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801de72:	e00a      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de74:	2301      	movs	r3, #1
 801de76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de7a:	e006      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801de7c:	bf00      	nop
 801de7e:	e004      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801de80:	bf00      	nop
 801de82:	e002      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801de84:	bf00      	nop
 801de86:	e000      	b.n	801de8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801de88:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d10e      	bne.n	801deb0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801de92:	4b06      	ldr	r3, [pc, #24]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801de94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801de96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801de9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801dea2:	4a02      	ldr	r2, [pc, #8]	@ (801deac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801dea4:	430b      	orrs	r3, r1
 801dea6:	6593      	str	r3, [r2, #88]	@ 0x58
 801dea8:	e006      	b.n	801deb8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801deaa:	bf00      	nop
 801deac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801deb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801deb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801deb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dec0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801dec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801dec8:	2300      	movs	r3, #0
 801deca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801dece:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ded2:	460b      	mov	r3, r1
 801ded4:	4313      	orrs	r3, r2
 801ded6:	d055      	beq.n	801df84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ded8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dedc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801dee0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801dee4:	d033      	beq.n	801df4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801dee6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801deea:	d82c      	bhi.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801deec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801def0:	d02f      	beq.n	801df52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801def2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801def6:	d826      	bhi.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801def8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801defc:	d02b      	beq.n	801df56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801defe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801df02:	d820      	bhi.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801df04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801df08:	d012      	beq.n	801df30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801df0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801df0e:	d81a      	bhi.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801df10:	2b00      	cmp	r3, #0
 801df12:	d022      	beq.n	801df5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801df14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801df18:	d115      	bne.n	801df46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801df1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df1e:	3308      	adds	r3, #8
 801df20:	2100      	movs	r1, #0
 801df22:	4618      	mov	r0, r3
 801df24:	f000 fdee 	bl	801eb04 <RCCEx_PLL2_Config>
 801df28:	4603      	mov	r3, r0
 801df2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801df2e:	e015      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801df30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df34:	3328      	adds	r3, #40	@ 0x28
 801df36:	2102      	movs	r1, #2
 801df38:	4618      	mov	r0, r3
 801df3a:	f000 fe95 	bl	801ec68 <RCCEx_PLL3_Config>
 801df3e:	4603      	mov	r3, r0
 801df40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801df44:	e00a      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801df46:	2301      	movs	r3, #1
 801df48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801df4c:	e006      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801df4e:	bf00      	nop
 801df50:	e004      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801df52:	bf00      	nop
 801df54:	e002      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801df56:	bf00      	nop
 801df58:	e000      	b.n	801df5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801df5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801df5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df60:	2b00      	cmp	r3, #0
 801df62:	d10b      	bne.n	801df7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801df64:	4ba1      	ldr	r3, [pc, #644]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801df68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801df6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801df74:	4a9d      	ldr	r2, [pc, #628]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801df76:	430b      	orrs	r3, r1
 801df78:	6593      	str	r3, [r2, #88]	@ 0x58
 801df7a:	e003      	b.n	801df84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801df7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801df84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df8c:	f002 0308 	and.w	r3, r2, #8
 801df90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801df94:	2300      	movs	r3, #0
 801df96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801df9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801df9e:	460b      	mov	r3, r1
 801dfa0:	4313      	orrs	r3, r2
 801dfa2:	d01e      	beq.n	801dfe2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801dfa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dfac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801dfb0:	d10c      	bne.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801dfb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfb6:	3328      	adds	r3, #40	@ 0x28
 801dfb8:	2102      	movs	r1, #2
 801dfba:	4618      	mov	r0, r3
 801dfbc:	f000 fe54 	bl	801ec68 <RCCEx_PLL3_Config>
 801dfc0:	4603      	mov	r3, r0
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d002      	beq.n	801dfcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801dfc6:	2301      	movs	r3, #1
 801dfc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801dfcc:	4b87      	ldr	r3, [pc, #540]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dfce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dfd0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801dfd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801dfdc:	4a83      	ldr	r2, [pc, #524]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dfde:	430b      	orrs	r3, r1
 801dfe0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801dfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfea:	f002 0310 	and.w	r3, r2, #16
 801dfee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801dff2:	2300      	movs	r3, #0
 801dff4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801dff8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801dffc:	460b      	mov	r3, r1
 801dffe:	4313      	orrs	r3, r2
 801e000:	d01e      	beq.n	801e040 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e006:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e00a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e00e:	d10c      	bne.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e014:	3328      	adds	r3, #40	@ 0x28
 801e016:	2102      	movs	r1, #2
 801e018:	4618      	mov	r0, r3
 801e01a:	f000 fe25 	bl	801ec68 <RCCEx_PLL3_Config>
 801e01e:	4603      	mov	r3, r0
 801e020:	2b00      	cmp	r3, #0
 801e022:	d002      	beq.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e024:	2301      	movs	r3, #1
 801e026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e02a:	4b70      	ldr	r3, [pc, #448]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e02c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e02e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e03a:	4a6c      	ldr	r2, [pc, #432]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e03c:	430b      	orrs	r3, r1
 801e03e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e048:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e04c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e050:	2300      	movs	r3, #0
 801e052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e056:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e05a:	460b      	mov	r3, r1
 801e05c:	4313      	orrs	r3, r2
 801e05e:	d03e      	beq.n	801e0de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e06c:	d022      	beq.n	801e0b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e06e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e072:	d81b      	bhi.n	801e0ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e074:	2b00      	cmp	r3, #0
 801e076:	d003      	beq.n	801e080 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e07c:	d00b      	beq.n	801e096 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e07e:	e015      	b.n	801e0ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e084:	3308      	adds	r3, #8
 801e086:	2100      	movs	r1, #0
 801e088:	4618      	mov	r0, r3
 801e08a:	f000 fd3b 	bl	801eb04 <RCCEx_PLL2_Config>
 801e08e:	4603      	mov	r3, r0
 801e090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e094:	e00f      	b.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e09a:	3328      	adds	r3, #40	@ 0x28
 801e09c:	2102      	movs	r1, #2
 801e09e:	4618      	mov	r0, r3
 801e0a0:	f000 fde2 	bl	801ec68 <RCCEx_PLL3_Config>
 801e0a4:	4603      	mov	r3, r0
 801e0a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e0aa:	e004      	b.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0ac:	2301      	movs	r3, #1
 801e0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e0b2:	e000      	b.n	801e0b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e0b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d10b      	bne.n	801e0d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e0be:	4b4b      	ldr	r3, [pc, #300]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e0c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e0ce:	4a47      	ldr	r2, [pc, #284]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e0d0:	430b      	orrs	r3, r1
 801e0d2:	6593      	str	r3, [r2, #88]	@ 0x58
 801e0d4:	e003      	b.n	801e0de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e0ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e0f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e0f4:	460b      	mov	r3, r1
 801e0f6:	4313      	orrs	r3, r2
 801e0f8:	d03b      	beq.n	801e172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e102:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e106:	d01f      	beq.n	801e148 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e108:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e10c:	d818      	bhi.n	801e140 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e10e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e112:	d003      	beq.n	801e11c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e118:	d007      	beq.n	801e12a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e11a:	e011      	b.n	801e140 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e11c:	4b33      	ldr	r3, [pc, #204]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e120:	4a32      	ldr	r2, [pc, #200]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e126:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e128:	e00f      	b.n	801e14a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e12e:	3328      	adds	r3, #40	@ 0x28
 801e130:	2101      	movs	r1, #1
 801e132:	4618      	mov	r0, r3
 801e134:	f000 fd98 	bl	801ec68 <RCCEx_PLL3_Config>
 801e138:	4603      	mov	r3, r0
 801e13a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e13e:	e004      	b.n	801e14a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e140:	2301      	movs	r3, #1
 801e142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e146:	e000      	b.n	801e14a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e148:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e14a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d10b      	bne.n	801e16a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e152:	4b26      	ldr	r3, [pc, #152]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e156:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e162:	4a22      	ldr	r2, [pc, #136]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e164:	430b      	orrs	r3, r1
 801e166:	6553      	str	r3, [r2, #84]	@ 0x54
 801e168:	e003      	b.n	801e172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e16a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e16e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e17a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e17e:	673b      	str	r3, [r7, #112]	@ 0x70
 801e180:	2300      	movs	r3, #0
 801e182:	677b      	str	r3, [r7, #116]	@ 0x74
 801e184:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e188:	460b      	mov	r3, r1
 801e18a:	4313      	orrs	r3, r2
 801e18c:	d034      	beq.n	801e1f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e194:	2b00      	cmp	r3, #0
 801e196:	d003      	beq.n	801e1a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e19c:	d007      	beq.n	801e1ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e19e:	e011      	b.n	801e1c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e1a0:	4b12      	ldr	r3, [pc, #72]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1a4:	4a11      	ldr	r2, [pc, #68]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e1aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e1ac:	e00e      	b.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b2:	3308      	adds	r3, #8
 801e1b4:	2102      	movs	r1, #2
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f000 fca4 	bl	801eb04 <RCCEx_PLL2_Config>
 801e1bc:	4603      	mov	r3, r0
 801e1be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e1c2:	e003      	b.n	801e1cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e1c4:	2301      	movs	r3, #1
 801e1c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	d10d      	bne.n	801e1f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e1d4:	4b05      	ldr	r3, [pc, #20]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e1d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e1e2:	4a02      	ldr	r2, [pc, #8]	@ (801e1ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e1e4:	430b      	orrs	r3, r1
 801e1e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e1e8:	e006      	b.n	801e1f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e1ea:	bf00      	nop
 801e1ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e200:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e204:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e206:	2300      	movs	r3, #0
 801e208:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e20a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e20e:	460b      	mov	r3, r1
 801e210:	4313      	orrs	r3, r2
 801e212:	d00c      	beq.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e218:	3328      	adds	r3, #40	@ 0x28
 801e21a:	2102      	movs	r1, #2
 801e21c:	4618      	mov	r0, r3
 801e21e:	f000 fd23 	bl	801ec68 <RCCEx_PLL3_Config>
 801e222:	4603      	mov	r3, r0
 801e224:	2b00      	cmp	r3, #0
 801e226:	d002      	beq.n	801e22e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e228:	2301      	movs	r3, #1
 801e22a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e236:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e23a:	663b      	str	r3, [r7, #96]	@ 0x60
 801e23c:	2300      	movs	r3, #0
 801e23e:	667b      	str	r3, [r7, #100]	@ 0x64
 801e240:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e244:	460b      	mov	r3, r1
 801e246:	4313      	orrs	r3, r2
 801e248:	d038      	beq.n	801e2bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e256:	d018      	beq.n	801e28a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e25c:	d811      	bhi.n	801e282 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e25e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e262:	d014      	beq.n	801e28e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e268:	d80b      	bhi.n	801e282 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d011      	beq.n	801e292 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e26e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e272:	d106      	bne.n	801e282 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e274:	4bc3      	ldr	r3, [pc, #780]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e278:	4ac2      	ldr	r2, [pc, #776]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e27a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e27e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e280:	e008      	b.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e282:	2301      	movs	r3, #1
 801e284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e288:	e004      	b.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e28a:	bf00      	nop
 801e28c:	e002      	b.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e28e:	bf00      	nop
 801e290:	e000      	b.n	801e294 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e292:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d10b      	bne.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e29c:	4bb9      	ldr	r3, [pc, #740]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e2ac:	4ab5      	ldr	r2, [pc, #724]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2ae:	430b      	orrs	r3, r1
 801e2b0:	6553      	str	r3, [r2, #84]	@ 0x54
 801e2b2:	e003      	b.n	801e2bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e2b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e2bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e2c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e2ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e2d2:	460b      	mov	r3, r1
 801e2d4:	4313      	orrs	r3, r2
 801e2d6:	d009      	beq.n	801e2ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e2d8:	4baa      	ldr	r3, [pc, #680]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e2dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e2e6:	4aa7      	ldr	r2, [pc, #668]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e2e8:	430b      	orrs	r3, r1
 801e2ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e2f8:	653b      	str	r3, [r7, #80]	@ 0x50
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	657b      	str	r3, [r7, #84]	@ 0x54
 801e2fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e302:	460b      	mov	r3, r1
 801e304:	4313      	orrs	r3, r2
 801e306:	d00a      	beq.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e308:	4b9e      	ldr	r3, [pc, #632]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e30a:	691b      	ldr	r3, [r3, #16]
 801e30c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e314:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e318:	4a9a      	ldr	r2, [pc, #616]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e31a:	430b      	orrs	r3, r1
 801e31c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e326:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e32a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e32c:	2300      	movs	r3, #0
 801e32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e330:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e334:	460b      	mov	r3, r1
 801e336:	4313      	orrs	r3, r2
 801e338:	d009      	beq.n	801e34e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e33a:	4b92      	ldr	r3, [pc, #584]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e33e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e348:	4a8e      	ldr	r2, [pc, #568]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e34a:	430b      	orrs	r3, r1
 801e34c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e356:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e35a:	643b      	str	r3, [r7, #64]	@ 0x40
 801e35c:	2300      	movs	r3, #0
 801e35e:	647b      	str	r3, [r7, #68]	@ 0x44
 801e360:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e364:	460b      	mov	r3, r1
 801e366:	4313      	orrs	r3, r2
 801e368:	d00e      	beq.n	801e388 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e36a:	4b86      	ldr	r3, [pc, #536]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e36c:	691b      	ldr	r3, [r3, #16]
 801e36e:	4a85      	ldr	r2, [pc, #532]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e370:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e374:	6113      	str	r3, [r2, #16]
 801e376:	4b83      	ldr	r3, [pc, #524]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e378:	6919      	ldr	r1, [r3, #16]
 801e37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e37e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e382:	4a80      	ldr	r2, [pc, #512]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e384:	430b      	orrs	r3, r1
 801e386:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e390:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e394:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e396:	2300      	movs	r3, #0
 801e398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e39a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e39e:	460b      	mov	r3, r1
 801e3a0:	4313      	orrs	r3, r2
 801e3a2:	d009      	beq.n	801e3b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e3a4:	4b77      	ldr	r3, [pc, #476]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e3ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e3b2:	4a74      	ldr	r2, [pc, #464]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3b4:	430b      	orrs	r3, r1
 801e3b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e3c4:	633b      	str	r3, [r7, #48]	@ 0x30
 801e3c6:	2300      	movs	r3, #0
 801e3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 801e3ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e3ce:	460b      	mov	r3, r1
 801e3d0:	4313      	orrs	r3, r2
 801e3d2:	d00a      	beq.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e3d4:	4b6b      	ldr	r3, [pc, #428]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e3d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e3e4:	4a67      	ldr	r2, [pc, #412]	@ (801e584 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e3e6:	430b      	orrs	r3, r1
 801e3e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e3f2:	2100      	movs	r1, #0
 801e3f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e3f6:	f003 0301 	and.w	r3, r3, #1
 801e3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e3fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e400:	460b      	mov	r3, r1
 801e402:	4313      	orrs	r3, r2
 801e404:	d011      	beq.n	801e42a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e40a:	3308      	adds	r3, #8
 801e40c:	2100      	movs	r1, #0
 801e40e:	4618      	mov	r0, r3
 801e410:	f000 fb78 	bl	801eb04 <RCCEx_PLL2_Config>
 801e414:	4603      	mov	r3, r0
 801e416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d003      	beq.n	801e42a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e432:	2100      	movs	r1, #0
 801e434:	6239      	str	r1, [r7, #32]
 801e436:	f003 0302 	and.w	r3, r3, #2
 801e43a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e43c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e440:	460b      	mov	r3, r1
 801e442:	4313      	orrs	r3, r2
 801e444:	d011      	beq.n	801e46a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e44a:	3308      	adds	r3, #8
 801e44c:	2101      	movs	r1, #1
 801e44e:	4618      	mov	r0, r3
 801e450:	f000 fb58 	bl	801eb04 <RCCEx_PLL2_Config>
 801e454:	4603      	mov	r3, r0
 801e456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d003      	beq.n	801e46a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e472:	2100      	movs	r1, #0
 801e474:	61b9      	str	r1, [r7, #24]
 801e476:	f003 0304 	and.w	r3, r3, #4
 801e47a:	61fb      	str	r3, [r7, #28]
 801e47c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e480:	460b      	mov	r3, r1
 801e482:	4313      	orrs	r3, r2
 801e484:	d011      	beq.n	801e4aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e48a:	3308      	adds	r3, #8
 801e48c:	2102      	movs	r1, #2
 801e48e:	4618      	mov	r0, r3
 801e490:	f000 fb38 	bl	801eb04 <RCCEx_PLL2_Config>
 801e494:	4603      	mov	r3, r0
 801e496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e49a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d003      	beq.n	801e4aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4b2:	2100      	movs	r1, #0
 801e4b4:	6139      	str	r1, [r7, #16]
 801e4b6:	f003 0308 	and.w	r3, r3, #8
 801e4ba:	617b      	str	r3, [r7, #20]
 801e4bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e4c0:	460b      	mov	r3, r1
 801e4c2:	4313      	orrs	r3, r2
 801e4c4:	d011      	beq.n	801e4ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e4c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ca:	3328      	adds	r3, #40	@ 0x28
 801e4cc:	2100      	movs	r1, #0
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f000 fbca 	bl	801ec68 <RCCEx_PLL3_Config>
 801e4d4:	4603      	mov	r3, r0
 801e4d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e4da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d003      	beq.n	801e4ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	60b9      	str	r1, [r7, #8]
 801e4f6:	f003 0310 	and.w	r3, r3, #16
 801e4fa:	60fb      	str	r3, [r7, #12]
 801e4fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e500:	460b      	mov	r3, r1
 801e502:	4313      	orrs	r3, r2
 801e504:	d011      	beq.n	801e52a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e50a:	3328      	adds	r3, #40	@ 0x28
 801e50c:	2101      	movs	r1, #1
 801e50e:	4618      	mov	r0, r3
 801e510:	f000 fbaa 	bl	801ec68 <RCCEx_PLL3_Config>
 801e514:	4603      	mov	r3, r0
 801e516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d003      	beq.n	801e52a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e532:	2100      	movs	r1, #0
 801e534:	6039      	str	r1, [r7, #0]
 801e536:	f003 0320 	and.w	r3, r3, #32
 801e53a:	607b      	str	r3, [r7, #4]
 801e53c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e540:	460b      	mov	r3, r1
 801e542:	4313      	orrs	r3, r2
 801e544:	d011      	beq.n	801e56a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e54a:	3328      	adds	r3, #40	@ 0x28
 801e54c:	2102      	movs	r1, #2
 801e54e:	4618      	mov	r0, r3
 801e550:	f000 fb8a 	bl	801ec68 <RCCEx_PLL3_Config>
 801e554:	4603      	mov	r3, r0
 801e556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d003      	beq.n	801e56a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e56a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e56e:	2b00      	cmp	r3, #0
 801e570:	d101      	bne.n	801e576 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e572:	2300      	movs	r3, #0
 801e574:	e000      	b.n	801e578 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e576:	2301      	movs	r3, #1
}
 801e578:	4618      	mov	r0, r3
 801e57a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e57e:	46bd      	mov	sp, r7
 801e580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e584:	58024400 	.word	0x58024400

0801e588 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e588:	b580      	push	{r7, lr}
 801e58a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e58c:	f7fe fd96 	bl	801d0bc <HAL_RCC_GetHCLKFreq>
 801e590:	4602      	mov	r2, r0
 801e592:	4b06      	ldr	r3, [pc, #24]	@ (801e5ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e594:	6a1b      	ldr	r3, [r3, #32]
 801e596:	091b      	lsrs	r3, r3, #4
 801e598:	f003 0307 	and.w	r3, r3, #7
 801e59c:	4904      	ldr	r1, [pc, #16]	@ (801e5b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e59e:	5ccb      	ldrb	r3, [r1, r3]
 801e5a0:	f003 031f 	and.w	r3, r3, #31
 801e5a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	bd80      	pop	{r7, pc}
 801e5ac:	58024400 	.word	0x58024400
 801e5b0:	08026fec 	.word	0x08026fec

0801e5b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e5b4:	b480      	push	{r7}
 801e5b6:	b089      	sub	sp, #36	@ 0x24
 801e5b8:	af00      	add	r7, sp, #0
 801e5ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e5bc:	4ba1      	ldr	r3, [pc, #644]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e5c0:	f003 0303 	and.w	r3, r3, #3
 801e5c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e5c6:	4b9f      	ldr	r3, [pc, #636]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e5ca:	0b1b      	lsrs	r3, r3, #12
 801e5cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e5d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e5d2:	4b9c      	ldr	r3, [pc, #624]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e5d6:	091b      	lsrs	r3, r3, #4
 801e5d8:	f003 0301 	and.w	r3, r3, #1
 801e5dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e5de:	4b99      	ldr	r3, [pc, #612]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e5e2:	08db      	lsrs	r3, r3, #3
 801e5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e5e8:	693a      	ldr	r2, [r7, #16]
 801e5ea:	fb02 f303 	mul.w	r3, r2, r3
 801e5ee:	ee07 3a90 	vmov	s15, r3
 801e5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e5fa:	697b      	ldr	r3, [r7, #20]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	f000 8111 	beq.w	801e824 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e602:	69bb      	ldr	r3, [r7, #24]
 801e604:	2b02      	cmp	r3, #2
 801e606:	f000 8083 	beq.w	801e710 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e60a:	69bb      	ldr	r3, [r7, #24]
 801e60c:	2b02      	cmp	r3, #2
 801e60e:	f200 80a1 	bhi.w	801e754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e612:	69bb      	ldr	r3, [r7, #24]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d003      	beq.n	801e620 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e618:	69bb      	ldr	r3, [r7, #24]
 801e61a:	2b01      	cmp	r3, #1
 801e61c:	d056      	beq.n	801e6cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e61e:	e099      	b.n	801e754 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e620:	4b88      	ldr	r3, [pc, #544]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f003 0320 	and.w	r3, r3, #32
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d02d      	beq.n	801e688 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e62c:	4b85      	ldr	r3, [pc, #532]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	08db      	lsrs	r3, r3, #3
 801e632:	f003 0303 	and.w	r3, r3, #3
 801e636:	4a84      	ldr	r2, [pc, #528]	@ (801e848 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e638:	fa22 f303 	lsr.w	r3, r2, r3
 801e63c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e63e:	68bb      	ldr	r3, [r7, #8]
 801e640:	ee07 3a90 	vmov	s15, r3
 801e644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e648:	697b      	ldr	r3, [r7, #20]
 801e64a:	ee07 3a90 	vmov	s15, r3
 801e64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e656:	4b7b      	ldr	r3, [pc, #492]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e65e:	ee07 3a90 	vmov	s15, r3
 801e662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e666:	ed97 6a03 	vldr	s12, [r7, #12]
 801e66a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e84c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e686:	e087      	b.n	801e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	ee07 3a90 	vmov	s15, r3
 801e68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e692:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e850 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e69a:	4b6a      	ldr	r3, [pc, #424]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e6a2:	ee07 3a90 	vmov	s15, r3
 801e6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 801e6ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e84c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e6ca:	e065      	b.n	801e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e6cc:	697b      	ldr	r3, [r7, #20]
 801e6ce:	ee07 3a90 	vmov	s15, r3
 801e6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e6d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e6de:	4b59      	ldr	r3, [pc, #356]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e6e6:	ee07 3a90 	vmov	s15, r3
 801e6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 801e6f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e84c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e706:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e70e:	e043      	b.n	801e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e710:	697b      	ldr	r3, [r7, #20]
 801e712:	ee07 3a90 	vmov	s15, r3
 801e716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e71a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801e858 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e722:	4b48      	ldr	r3, [pc, #288]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e72a:	ee07 3a90 	vmov	s15, r3
 801e72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e732:	ed97 6a03 	vldr	s12, [r7, #12]
 801e736:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e84c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e752:	e021      	b.n	801e798 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e754:	697b      	ldr	r3, [r7, #20]
 801e756:	ee07 3a90 	vmov	s15, r3
 801e75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e75e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e854 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e766:	4b37      	ldr	r3, [pc, #220]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e76e:	ee07 3a90 	vmov	s15, r3
 801e772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e776:	ed97 6a03 	vldr	s12, [r7, #12]
 801e77a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e84c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e796:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e798:	4b2a      	ldr	r3, [pc, #168]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e79a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e79c:	0a5b      	lsrs	r3, r3, #9
 801e79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e7a2:	ee07 3a90 	vmov	s15, r3
 801e7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e7ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e7b2:	edd7 6a07 	vldr	s13, [r7, #28]
 801e7b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e7be:	ee17 2a90 	vmov	r2, s15
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e7c6:	4b1f      	ldr	r3, [pc, #124]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e7ca:	0c1b      	lsrs	r3, r3, #16
 801e7cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e7d0:	ee07 3a90 	vmov	s15, r3
 801e7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e7d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e7dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e7e0:	edd7 6a07 	vldr	s13, [r7, #28]
 801e7e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e7e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e7ec:	ee17 2a90 	vmov	r2, s15
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e7f4:	4b13      	ldr	r3, [pc, #76]	@ (801e844 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e7f8:	0e1b      	lsrs	r3, r3, #24
 801e7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e7fe:	ee07 3a90 	vmov	s15, r3
 801e802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e80a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e80e:	edd7 6a07 	vldr	s13, [r7, #28]
 801e812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e81a:	ee17 2a90 	vmov	r2, s15
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e822:	e008      	b.n	801e836 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e824:	687b      	ldr	r3, [r7, #4]
 801e826:	2200      	movs	r2, #0
 801e828:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	2200      	movs	r2, #0
 801e82e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	2200      	movs	r2, #0
 801e834:	609a      	str	r2, [r3, #8]
}
 801e836:	bf00      	nop
 801e838:	3724      	adds	r7, #36	@ 0x24
 801e83a:	46bd      	mov	sp, r7
 801e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e840:	4770      	bx	lr
 801e842:	bf00      	nop
 801e844:	58024400 	.word	0x58024400
 801e848:	03d09000 	.word	0x03d09000
 801e84c:	46000000 	.word	0x46000000
 801e850:	4c742400 	.word	0x4c742400
 801e854:	4a742400 	.word	0x4a742400
 801e858:	4bbebc20 	.word	0x4bbebc20

0801e85c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e85c:	b480      	push	{r7}
 801e85e:	b089      	sub	sp, #36	@ 0x24
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e864:	4ba1      	ldr	r3, [pc, #644]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e868:	f003 0303 	and.w	r3, r3, #3
 801e86c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e86e:	4b9f      	ldr	r3, [pc, #636]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e872:	0d1b      	lsrs	r3, r3, #20
 801e874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e878:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e87a:	4b9c      	ldr	r3, [pc, #624]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e87e:	0a1b      	lsrs	r3, r3, #8
 801e880:	f003 0301 	and.w	r3, r3, #1
 801e884:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e886:	4b99      	ldr	r3, [pc, #612]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e88a:	08db      	lsrs	r3, r3, #3
 801e88c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e890:	693a      	ldr	r2, [r7, #16]
 801e892:	fb02 f303 	mul.w	r3, r2, r3
 801e896:	ee07 3a90 	vmov	s15, r3
 801e89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e89e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e8a2:	697b      	ldr	r3, [r7, #20]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	f000 8111 	beq.w	801eacc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e8aa:	69bb      	ldr	r3, [r7, #24]
 801e8ac:	2b02      	cmp	r3, #2
 801e8ae:	f000 8083 	beq.w	801e9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e8b2:	69bb      	ldr	r3, [r7, #24]
 801e8b4:	2b02      	cmp	r3, #2
 801e8b6:	f200 80a1 	bhi.w	801e9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e8ba:	69bb      	ldr	r3, [r7, #24]
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d003      	beq.n	801e8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e8c0:	69bb      	ldr	r3, [r7, #24]
 801e8c2:	2b01      	cmp	r3, #1
 801e8c4:	d056      	beq.n	801e974 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e8c6:	e099      	b.n	801e9fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e8c8:	4b88      	ldr	r3, [pc, #544]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	f003 0320 	and.w	r3, r3, #32
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d02d      	beq.n	801e930 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e8d4:	4b85      	ldr	r3, [pc, #532]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e8d6:	681b      	ldr	r3, [r3, #0]
 801e8d8:	08db      	lsrs	r3, r3, #3
 801e8da:	f003 0303 	and.w	r3, r3, #3
 801e8de:	4a84      	ldr	r2, [pc, #528]	@ (801eaf0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e8e0:	fa22 f303 	lsr.w	r3, r2, r3
 801e8e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e8e6:	68bb      	ldr	r3, [r7, #8]
 801e8e8:	ee07 3a90 	vmov	s15, r3
 801e8ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e8f0:	697b      	ldr	r3, [r7, #20]
 801e8f2:	ee07 3a90 	vmov	s15, r3
 801e8f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e8fe:	4b7b      	ldr	r3, [pc, #492]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e906:	ee07 3a90 	vmov	s15, r3
 801e90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e90e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e912:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801eaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e926:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e92a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e92e:	e087      	b.n	801ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	ee07 3a90 	vmov	s15, r3
 801e936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e93a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801eaf8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801e93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e942:	4b6a      	ldr	r3, [pc, #424]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e94a:	ee07 3a90 	vmov	s15, r3
 801e94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e952:	ed97 6a03 	vldr	s12, [r7, #12]
 801e956:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801eaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e96e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e972:	e065      	b.n	801ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e974:	697b      	ldr	r3, [r7, #20]
 801e976:	ee07 3a90 	vmov	s15, r3
 801e97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e97e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801eafc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e986:	4b59      	ldr	r3, [pc, #356]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e98e:	ee07 3a90 	vmov	s15, r3
 801e992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e996:	ed97 6a03 	vldr	s12, [r7, #12]
 801e99a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801eaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e9b6:	e043      	b.n	801ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e9b8:	697b      	ldr	r3, [r7, #20]
 801e9ba:	ee07 3a90 	vmov	s15, r3
 801e9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801eb00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801e9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e9ca:	4b48      	ldr	r3, [pc, #288]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e9d2:	ee07 3a90 	vmov	s15, r3
 801e9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e9da:	ed97 6a03 	vldr	s12, [r7, #12]
 801e9de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801eaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e9fa:	e021      	b.n	801ea40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e9fc:	697b      	ldr	r3, [r7, #20]
 801e9fe:	ee07 3a90 	vmov	s15, r3
 801ea02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eafc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ea0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ea0e:	4b37      	ldr	r3, [pc, #220]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ea12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ea16:	ee07 3a90 	vmov	s15, r3
 801ea1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ea1e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ea22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801eaf4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ea26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ea2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ea2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ea32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ea36:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ea3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ea3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801ea40:	4b2a      	ldr	r3, [pc, #168]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ea44:	0a5b      	lsrs	r3, r3, #9
 801ea46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea4a:	ee07 3a90 	vmov	s15, r3
 801ea4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ea56:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea5a:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea66:	ee17 2a90 	vmov	r2, s15
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801ea6e:	4b1f      	ldr	r3, [pc, #124]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ea72:	0c1b      	lsrs	r3, r3, #16
 801ea74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ea78:	ee07 3a90 	vmov	s15, r3
 801ea7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ea80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ea84:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ea88:	edd7 6a07 	vldr	s13, [r7, #28]
 801ea8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ea90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ea94:	ee17 2a90 	vmov	r2, s15
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801ea9c:	4b13      	ldr	r3, [pc, #76]	@ (801eaec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ea9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eaa0:	0e1b      	lsrs	r3, r3, #24
 801eaa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801eaa6:	ee07 3a90 	vmov	s15, r3
 801eaaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eaae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801eab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801eab6:	edd7 6a07 	vldr	s13, [r7, #28]
 801eaba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eabe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eac2:	ee17 2a90 	vmov	r2, s15
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801eaca:	e008      	b.n	801eade <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	2200      	movs	r2, #0
 801ead0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	2200      	movs	r2, #0
 801ead6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	2200      	movs	r2, #0
 801eadc:	609a      	str	r2, [r3, #8]
}
 801eade:	bf00      	nop
 801eae0:	3724      	adds	r7, #36	@ 0x24
 801eae2:	46bd      	mov	sp, r7
 801eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eae8:	4770      	bx	lr
 801eaea:	bf00      	nop
 801eaec:	58024400 	.word	0x58024400
 801eaf0:	03d09000 	.word	0x03d09000
 801eaf4:	46000000 	.word	0x46000000
 801eaf8:	4c742400 	.word	0x4c742400
 801eafc:	4a742400 	.word	0x4a742400
 801eb00:	4bbebc20 	.word	0x4bbebc20

0801eb04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801eb04:	b580      	push	{r7, lr}
 801eb06:	b084      	sub	sp, #16
 801eb08:	af00      	add	r7, sp, #0
 801eb0a:	6078      	str	r0, [r7, #4]
 801eb0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801eb0e:	2300      	movs	r3, #0
 801eb10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801eb12:	4b53      	ldr	r3, [pc, #332]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb16:	f003 0303 	and.w	r3, r3, #3
 801eb1a:	2b03      	cmp	r3, #3
 801eb1c:	d101      	bne.n	801eb22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801eb1e:	2301      	movs	r3, #1
 801eb20:	e099      	b.n	801ec56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801eb22:	4b4f      	ldr	r3, [pc, #316]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	4a4e      	ldr	r2, [pc, #312]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801eb2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801eb2e:	f7fa ff23 	bl	8019978 <HAL_GetTick>
 801eb32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801eb34:	e008      	b.n	801eb48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801eb36:	f7fa ff1f 	bl	8019978 <HAL_GetTick>
 801eb3a:	4602      	mov	r2, r0
 801eb3c:	68bb      	ldr	r3, [r7, #8]
 801eb3e:	1ad3      	subs	r3, r2, r3
 801eb40:	2b02      	cmp	r3, #2
 801eb42:	d901      	bls.n	801eb48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801eb44:	2303      	movs	r3, #3
 801eb46:	e086      	b.n	801ec56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801eb48:	4b45      	ldr	r3, [pc, #276]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb4a:	681b      	ldr	r3, [r3, #0]
 801eb4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801eb50:	2b00      	cmp	r3, #0
 801eb52:	d1f0      	bne.n	801eb36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801eb54:	4b42      	ldr	r3, [pc, #264]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	031b      	lsls	r3, r3, #12
 801eb62:	493f      	ldr	r1, [pc, #252]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb64:	4313      	orrs	r3, r2
 801eb66:	628b      	str	r3, [r1, #40]	@ 0x28
 801eb68:	687b      	ldr	r3, [r7, #4]
 801eb6a:	685b      	ldr	r3, [r3, #4]
 801eb6c:	3b01      	subs	r3, #1
 801eb6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	689b      	ldr	r3, [r3, #8]
 801eb76:	3b01      	subs	r3, #1
 801eb78:	025b      	lsls	r3, r3, #9
 801eb7a:	b29b      	uxth	r3, r3
 801eb7c:	431a      	orrs	r2, r3
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	68db      	ldr	r3, [r3, #12]
 801eb82:	3b01      	subs	r3, #1
 801eb84:	041b      	lsls	r3, r3, #16
 801eb86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801eb8a:	431a      	orrs	r2, r3
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	691b      	ldr	r3, [r3, #16]
 801eb90:	3b01      	subs	r3, #1
 801eb92:	061b      	lsls	r3, r3, #24
 801eb94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801eb98:	4931      	ldr	r1, [pc, #196]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eb9a:	4313      	orrs	r3, r2
 801eb9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801eb9e:	4b30      	ldr	r3, [pc, #192]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801eba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eba2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	695b      	ldr	r3, [r3, #20]
 801ebaa:	492d      	ldr	r1, [pc, #180]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebac:	4313      	orrs	r3, r2
 801ebae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801ebb0:	4b2b      	ldr	r3, [pc, #172]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebb4:	f023 0220 	bic.w	r2, r3, #32
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	699b      	ldr	r3, [r3, #24]
 801ebbc:	4928      	ldr	r1, [pc, #160]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebbe:	4313      	orrs	r3, r2
 801ebc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801ebc2:	4b27      	ldr	r3, [pc, #156]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebc6:	4a26      	ldr	r2, [pc, #152]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebc8:	f023 0310 	bic.w	r3, r3, #16
 801ebcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801ebce:	4b24      	ldr	r3, [pc, #144]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ebd2:	4b24      	ldr	r3, [pc, #144]	@ (801ec64 <RCCEx_PLL2_Config+0x160>)
 801ebd4:	4013      	ands	r3, r2
 801ebd6:	687a      	ldr	r2, [r7, #4]
 801ebd8:	69d2      	ldr	r2, [r2, #28]
 801ebda:	00d2      	lsls	r2, r2, #3
 801ebdc:	4920      	ldr	r1, [pc, #128]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebde:	4313      	orrs	r3, r2
 801ebe0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801ebe2:	4b1f      	ldr	r3, [pc, #124]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebe6:	4a1e      	ldr	r2, [pc, #120]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebe8:	f043 0310 	orr.w	r3, r3, #16
 801ebec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ebee:	683b      	ldr	r3, [r7, #0]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d106      	bne.n	801ec02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801ebf4:	4b1a      	ldr	r3, [pc, #104]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebf8:	4a19      	ldr	r2, [pc, #100]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ebfa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801ebfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec00:	e00f      	b.n	801ec22 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ec02:	683b      	ldr	r3, [r7, #0]
 801ec04:	2b01      	cmp	r3, #1
 801ec06:	d106      	bne.n	801ec16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801ec08:	4b15      	ldr	r3, [pc, #84]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec0c:	4a14      	ldr	r2, [pc, #80]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ec12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ec14:	e005      	b.n	801ec22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801ec16:	4b12      	ldr	r3, [pc, #72]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ec1a:	4a11      	ldr	r2, [pc, #68]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801ec20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801ec22:	4b0f      	ldr	r3, [pc, #60]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec24:	681b      	ldr	r3, [r3, #0]
 801ec26:	4a0e      	ldr	r2, [pc, #56]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801ec2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ec2e:	f7fa fea3 	bl	8019978 <HAL_GetTick>
 801ec32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801ec34:	e008      	b.n	801ec48 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801ec36:	f7fa fe9f 	bl	8019978 <HAL_GetTick>
 801ec3a:	4602      	mov	r2, r0
 801ec3c:	68bb      	ldr	r3, [r7, #8]
 801ec3e:	1ad3      	subs	r3, r2, r3
 801ec40:	2b02      	cmp	r3, #2
 801ec42:	d901      	bls.n	801ec48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801ec44:	2303      	movs	r3, #3
 801ec46:	e006      	b.n	801ec56 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801ec48:	4b05      	ldr	r3, [pc, #20]	@ (801ec60 <RCCEx_PLL2_Config+0x15c>)
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d0f0      	beq.n	801ec36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801ec54:	7bfb      	ldrb	r3, [r7, #15]
}
 801ec56:	4618      	mov	r0, r3
 801ec58:	3710      	adds	r7, #16
 801ec5a:	46bd      	mov	sp, r7
 801ec5c:	bd80      	pop	{r7, pc}
 801ec5e:	bf00      	nop
 801ec60:	58024400 	.word	0x58024400
 801ec64:	ffff0007 	.word	0xffff0007

0801ec68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801ec68:	b580      	push	{r7, lr}
 801ec6a:	b084      	sub	sp, #16
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	6078      	str	r0, [r7, #4]
 801ec70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801ec72:	2300      	movs	r3, #0
 801ec74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801ec76:	4b53      	ldr	r3, [pc, #332]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ec78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec7a:	f003 0303 	and.w	r3, r3, #3
 801ec7e:	2b03      	cmp	r3, #3
 801ec80:	d101      	bne.n	801ec86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801ec82:	2301      	movs	r3, #1
 801ec84:	e099      	b.n	801edba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801ec86:	4b4f      	ldr	r3, [pc, #316]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ec88:	681b      	ldr	r3, [r3, #0]
 801ec8a:	4a4e      	ldr	r2, [pc, #312]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ec8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ec90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ec92:	f7fa fe71 	bl	8019978 <HAL_GetTick>
 801ec96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ec98:	e008      	b.n	801ecac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ec9a:	f7fa fe6d 	bl	8019978 <HAL_GetTick>
 801ec9e:	4602      	mov	r2, r0
 801eca0:	68bb      	ldr	r3, [r7, #8]
 801eca2:	1ad3      	subs	r3, r2, r3
 801eca4:	2b02      	cmp	r3, #2
 801eca6:	d901      	bls.n	801ecac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801eca8:	2303      	movs	r3, #3
 801ecaa:	e086      	b.n	801edba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ecac:	4b45      	ldr	r3, [pc, #276]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ecb4:	2b00      	cmp	r3, #0
 801ecb6:	d1f0      	bne.n	801ec9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ecb8:	4b42      	ldr	r3, [pc, #264]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ecba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecbc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ecc0:	687b      	ldr	r3, [r7, #4]
 801ecc2:	681b      	ldr	r3, [r3, #0]
 801ecc4:	051b      	lsls	r3, r3, #20
 801ecc6:	493f      	ldr	r1, [pc, #252]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ecc8:	4313      	orrs	r3, r2
 801ecca:	628b      	str	r3, [r1, #40]	@ 0x28
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	685b      	ldr	r3, [r3, #4]
 801ecd0:	3b01      	subs	r3, #1
 801ecd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	689b      	ldr	r3, [r3, #8]
 801ecda:	3b01      	subs	r3, #1
 801ecdc:	025b      	lsls	r3, r3, #9
 801ecde:	b29b      	uxth	r3, r3
 801ece0:	431a      	orrs	r2, r3
 801ece2:	687b      	ldr	r3, [r7, #4]
 801ece4:	68db      	ldr	r3, [r3, #12]
 801ece6:	3b01      	subs	r3, #1
 801ece8:	041b      	lsls	r3, r3, #16
 801ecea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801ecee:	431a      	orrs	r2, r3
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	691b      	ldr	r3, [r3, #16]
 801ecf4:	3b01      	subs	r3, #1
 801ecf6:	061b      	lsls	r3, r3, #24
 801ecf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801ecfc:	4931      	ldr	r1, [pc, #196]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ecfe:	4313      	orrs	r3, r2
 801ed00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801ed02:	4b30      	ldr	r3, [pc, #192]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	695b      	ldr	r3, [r3, #20]
 801ed0e:	492d      	ldr	r1, [pc, #180]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed10:	4313      	orrs	r3, r2
 801ed12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801ed14:	4b2b      	ldr	r3, [pc, #172]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	699b      	ldr	r3, [r3, #24]
 801ed20:	4928      	ldr	r1, [pc, #160]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed22:	4313      	orrs	r3, r2
 801ed24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801ed26:	4b27      	ldr	r3, [pc, #156]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed2a:	4a26      	ldr	r2, [pc, #152]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ed30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801ed32:	4b24      	ldr	r3, [pc, #144]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801ed36:	4b24      	ldr	r3, [pc, #144]	@ (801edc8 <RCCEx_PLL3_Config+0x160>)
 801ed38:	4013      	ands	r3, r2
 801ed3a:	687a      	ldr	r2, [r7, #4]
 801ed3c:	69d2      	ldr	r2, [r2, #28]
 801ed3e:	00d2      	lsls	r2, r2, #3
 801ed40:	4920      	ldr	r1, [pc, #128]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed42:	4313      	orrs	r3, r2
 801ed44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801ed46:	4b1f      	ldr	r3, [pc, #124]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed4a:	4a1e      	ldr	r2, [pc, #120]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ed50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801ed52:	683b      	ldr	r3, [r7, #0]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d106      	bne.n	801ed66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801ed58:	4b1a      	ldr	r3, [pc, #104]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed5c:	4a19      	ldr	r2, [pc, #100]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801ed62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ed64:	e00f      	b.n	801ed86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	2b01      	cmp	r3, #1
 801ed6a:	d106      	bne.n	801ed7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801ed6c:	4b15      	ldr	r3, [pc, #84]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed70:	4a14      	ldr	r2, [pc, #80]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801ed76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801ed78:	e005      	b.n	801ed86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801ed7a:	4b12      	ldr	r3, [pc, #72]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed7e:	4a11      	ldr	r2, [pc, #68]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ed84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801ed86:	4b0f      	ldr	r3, [pc, #60]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	4a0e      	ldr	r2, [pc, #56]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801ed8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ed90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ed92:	f7fa fdf1 	bl	8019978 <HAL_GetTick>
 801ed96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801ed98:	e008      	b.n	801edac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ed9a:	f7fa fded 	bl	8019978 <HAL_GetTick>
 801ed9e:	4602      	mov	r2, r0
 801eda0:	68bb      	ldr	r3, [r7, #8]
 801eda2:	1ad3      	subs	r3, r2, r3
 801eda4:	2b02      	cmp	r3, #2
 801eda6:	d901      	bls.n	801edac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801eda8:	2303      	movs	r3, #3
 801edaa:	e006      	b.n	801edba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801edac:	4b05      	ldr	r3, [pc, #20]	@ (801edc4 <RCCEx_PLL3_Config+0x15c>)
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d0f0      	beq.n	801ed9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801edb8:	7bfb      	ldrb	r3, [r7, #15]
}
 801edba:	4618      	mov	r0, r3
 801edbc:	3710      	adds	r7, #16
 801edbe:	46bd      	mov	sp, r7
 801edc0:	bd80      	pop	{r7, pc}
 801edc2:	bf00      	nop
 801edc4:	58024400 	.word	0x58024400
 801edc8:	ffff0007 	.word	0xffff0007

0801edcc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801edcc:	b580      	push	{r7, lr}
 801edce:	b084      	sub	sp, #16
 801edd0:	af00      	add	r7, sp, #0
 801edd2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d101      	bne.n	801edde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801edda:	2301      	movs	r3, #1
 801eddc:	e10f      	b.n	801effe <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	2200      	movs	r2, #0
 801ede2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	4a87      	ldr	r2, [pc, #540]	@ (801f008 <HAL_SPI_Init+0x23c>)
 801edea:	4293      	cmp	r3, r2
 801edec:	d00f      	beq.n	801ee0e <HAL_SPI_Init+0x42>
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	681b      	ldr	r3, [r3, #0]
 801edf2:	4a86      	ldr	r2, [pc, #536]	@ (801f00c <HAL_SPI_Init+0x240>)
 801edf4:	4293      	cmp	r3, r2
 801edf6:	d00a      	beq.n	801ee0e <HAL_SPI_Init+0x42>
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	4a84      	ldr	r2, [pc, #528]	@ (801f010 <HAL_SPI_Init+0x244>)
 801edfe:	4293      	cmp	r3, r2
 801ee00:	d005      	beq.n	801ee0e <HAL_SPI_Init+0x42>
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	68db      	ldr	r3, [r3, #12]
 801ee06:	2b0f      	cmp	r3, #15
 801ee08:	d901      	bls.n	801ee0e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801ee0a:	2301      	movs	r3, #1
 801ee0c:	e0f7      	b.n	801effe <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801ee0e:	6878      	ldr	r0, [r7, #4]
 801ee10:	f000 fbba 	bl	801f588 <SPI_GetPacketSize>
 801ee14:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	4a7b      	ldr	r2, [pc, #492]	@ (801f008 <HAL_SPI_Init+0x23c>)
 801ee1c:	4293      	cmp	r3, r2
 801ee1e:	d00c      	beq.n	801ee3a <HAL_SPI_Init+0x6e>
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	4a79      	ldr	r2, [pc, #484]	@ (801f00c <HAL_SPI_Init+0x240>)
 801ee26:	4293      	cmp	r3, r2
 801ee28:	d007      	beq.n	801ee3a <HAL_SPI_Init+0x6e>
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	4a78      	ldr	r2, [pc, #480]	@ (801f010 <HAL_SPI_Init+0x244>)
 801ee30:	4293      	cmp	r3, r2
 801ee32:	d002      	beq.n	801ee3a <HAL_SPI_Init+0x6e>
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	2b08      	cmp	r3, #8
 801ee38:	d811      	bhi.n	801ee5e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801ee3e:	4a72      	ldr	r2, [pc, #456]	@ (801f008 <HAL_SPI_Init+0x23c>)
 801ee40:	4293      	cmp	r3, r2
 801ee42:	d009      	beq.n	801ee58 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	4a70      	ldr	r2, [pc, #448]	@ (801f00c <HAL_SPI_Init+0x240>)
 801ee4a:	4293      	cmp	r3, r2
 801ee4c:	d004      	beq.n	801ee58 <HAL_SPI_Init+0x8c>
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	4a6f      	ldr	r2, [pc, #444]	@ (801f010 <HAL_SPI_Init+0x244>)
 801ee54:	4293      	cmp	r3, r2
 801ee56:	d104      	bne.n	801ee62 <HAL_SPI_Init+0x96>
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	2b10      	cmp	r3, #16
 801ee5c:	d901      	bls.n	801ee62 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801ee5e:	2301      	movs	r3, #1
 801ee60:	e0cd      	b.n	801effe <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ee68:	b2db      	uxtb	r3, r3
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d106      	bne.n	801ee7c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	2200      	movs	r2, #0
 801ee72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801ee76:	6878      	ldr	r0, [r7, #4]
 801ee78:	f7e2 ffea 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2202      	movs	r2, #2
 801ee80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	681a      	ldr	r2, [r3, #0]
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	f022 0201 	bic.w	r2, r2, #1
 801ee92:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	689b      	ldr	r3, [r3, #8]
 801ee9a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801ee9e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	699b      	ldr	r3, [r3, #24]
 801eea4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801eea8:	d119      	bne.n	801eede <HAL_SPI_Init+0x112>
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	685b      	ldr	r3, [r3, #4]
 801eeae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801eeb2:	d103      	bne.n	801eebc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d008      	beq.n	801eece <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801eec0:	2b00      	cmp	r3, #0
 801eec2:	d10c      	bne.n	801eede <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801eec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eecc:	d107      	bne.n	801eede <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	681b      	ldr	r3, [r3, #0]
 801eed2:	681a      	ldr	r2, [r3, #0]
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801eedc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	685b      	ldr	r3, [r3, #4]
 801eee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801eee6:	2b00      	cmp	r3, #0
 801eee8:	d00f      	beq.n	801ef0a <HAL_SPI_Init+0x13e>
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	68db      	ldr	r3, [r3, #12]
 801eeee:	2b06      	cmp	r3, #6
 801eef0:	d90b      	bls.n	801ef0a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	430a      	orrs	r2, r1
 801ef06:	601a      	str	r2, [r3, #0]
 801ef08:	e007      	b.n	801ef1a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	681a      	ldr	r2, [r3, #0]
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ef18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ef1a:	687b      	ldr	r3, [r7, #4]
 801ef1c:	69da      	ldr	r2, [r3, #28]
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef22:	431a      	orrs	r2, r3
 801ef24:	68bb      	ldr	r3, [r7, #8]
 801ef26:	431a      	orrs	r2, r3
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ef2c:	ea42 0103 	orr.w	r1, r2, r3
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	68da      	ldr	r2, [r3, #12]
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	430a      	orrs	r2, r1
 801ef3a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ef44:	431a      	orrs	r2, r3
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ef4a:	431a      	orrs	r2, r3
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	699b      	ldr	r3, [r3, #24]
 801ef50:	431a      	orrs	r2, r3
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	691b      	ldr	r3, [r3, #16]
 801ef56:	431a      	orrs	r2, r3
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	695b      	ldr	r3, [r3, #20]
 801ef5c:	431a      	orrs	r2, r3
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	6a1b      	ldr	r3, [r3, #32]
 801ef62:	431a      	orrs	r2, r3
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	685b      	ldr	r3, [r3, #4]
 801ef68:	431a      	orrs	r2, r3
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ef6e:	431a      	orrs	r2, r3
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	689b      	ldr	r3, [r3, #8]
 801ef74:	431a      	orrs	r2, r3
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ef7a:	ea42 0103 	orr.w	r1, r2, r3
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	430a      	orrs	r2, r1
 801ef88:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	685b      	ldr	r3, [r3, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d113      	bne.n	801efba <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	689b      	ldr	r3, [r3, #8]
 801ef98:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801efa4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	681b      	ldr	r3, [r3, #0]
 801efaa:	689b      	ldr	r3, [r3, #8]
 801efac:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801efb8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801efc0:	687b      	ldr	r3, [r7, #4]
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	f022 0201 	bic.w	r2, r2, #1
 801efc8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d00a      	beq.n	801efec <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	68db      	ldr	r3, [r3, #12]
 801efdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801efe4:	687b      	ldr	r3, [r7, #4]
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	430a      	orrs	r2, r1
 801efea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	2200      	movs	r2, #0
 801eff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	2201      	movs	r2, #1
 801eff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801effc:	2300      	movs	r3, #0
}
 801effe:	4618      	mov	r0, r3
 801f000:	3710      	adds	r7, #16
 801f002:	46bd      	mov	sp, r7
 801f004:	bd80      	pop	{r7, pc}
 801f006:	bf00      	nop
 801f008:	40013000 	.word	0x40013000
 801f00c:	40003800 	.word	0x40003800
 801f010:	40003c00 	.word	0x40003c00

0801f014 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801f014:	b580      	push	{r7, lr}
 801f016:	b08a      	sub	sp, #40	@ 0x28
 801f018:	af00      	add	r7, sp, #0
 801f01a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	691b      	ldr	r3, [r3, #16]
 801f022:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	695b      	ldr	r3, [r3, #20]
 801f02a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801f02c:	6a3a      	ldr	r2, [r7, #32]
 801f02e:	69fb      	ldr	r3, [r7, #28]
 801f030:	4013      	ands	r3, r2
 801f032:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	689b      	ldr	r3, [r3, #8]
 801f03a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801f03c:	2300      	movs	r3, #0
 801f03e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f046:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	3330      	adds	r3, #48	@ 0x30
 801f04e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801f050:	69fb      	ldr	r3, [r7, #28]
 801f052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f056:	2b00      	cmp	r3, #0
 801f058:	d010      	beq.n	801f07c <HAL_SPI_IRQHandler+0x68>
 801f05a:	6a3b      	ldr	r3, [r7, #32]
 801f05c:	f003 0308 	and.w	r3, r3, #8
 801f060:	2b00      	cmp	r3, #0
 801f062:	d00b      	beq.n	801f07c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	681b      	ldr	r3, [r3, #0]
 801f068:	699a      	ldr	r2, [r3, #24]
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f072:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801f074:	6878      	ldr	r0, [r7, #4]
 801f076:	f000 f9c3 	bl	801f400 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801f07a:	e192      	b.n	801f3a2 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f07c:	69bb      	ldr	r3, [r7, #24]
 801f07e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f082:	2b00      	cmp	r3, #0
 801f084:	d113      	bne.n	801f0ae <HAL_SPI_IRQHandler+0x9a>
 801f086:	69bb      	ldr	r3, [r7, #24]
 801f088:	f003 0320 	and.w	r3, r3, #32
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d10e      	bne.n	801f0ae <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801f090:	69bb      	ldr	r3, [r7, #24]
 801f092:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f096:	2b00      	cmp	r3, #0
 801f098:	d009      	beq.n	801f0ae <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f09e:	6878      	ldr	r0, [r7, #4]
 801f0a0:	4798      	blx	r3
    hspi->RxISR(hspi);
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0a6:	6878      	ldr	r0, [r7, #4]
 801f0a8:	4798      	blx	r3
    handled = 1UL;
 801f0aa:	2301      	movs	r3, #1
 801f0ac:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f0ae:	69bb      	ldr	r3, [r7, #24]
 801f0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	d10f      	bne.n	801f0d8 <HAL_SPI_IRQHandler+0xc4>
 801f0b8:	69bb      	ldr	r3, [r7, #24]
 801f0ba:	f003 0301 	and.w	r3, r3, #1
 801f0be:	2b00      	cmp	r3, #0
 801f0c0:	d00a      	beq.n	801f0d8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f0c2:	69bb      	ldr	r3, [r7, #24]
 801f0c4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d105      	bne.n	801f0d8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f0d0:	6878      	ldr	r0, [r7, #4]
 801f0d2:	4798      	blx	r3
    handled = 1UL;
 801f0d4:	2301      	movs	r3, #1
 801f0d6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f0d8:	69bb      	ldr	r3, [r7, #24]
 801f0da:	f003 0320 	and.w	r3, r3, #32
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d10f      	bne.n	801f102 <HAL_SPI_IRQHandler+0xee>
 801f0e2:	69bb      	ldr	r3, [r7, #24]
 801f0e4:	f003 0302 	and.w	r3, r3, #2
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d00a      	beq.n	801f102 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f0ec:	69bb      	ldr	r3, [r7, #24]
 801f0ee:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	d105      	bne.n	801f102 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f0fa:	6878      	ldr	r0, [r7, #4]
 801f0fc:	4798      	blx	r3
    handled = 1UL;
 801f0fe:	2301      	movs	r3, #1
 801f100:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f104:	2b00      	cmp	r3, #0
 801f106:	f040 8147 	bne.w	801f398 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f10a:	69bb      	ldr	r3, [r7, #24]
 801f10c:	f003 0308 	and.w	r3, r3, #8
 801f110:	2b00      	cmp	r3, #0
 801f112:	f000 808b 	beq.w	801f22c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	699a      	ldr	r2, [r3, #24]
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	f042 0208 	orr.w	r2, r2, #8
 801f124:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	699a      	ldr	r2, [r3, #24]
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	f042 0210 	orr.w	r2, r2, #16
 801f134:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	699a      	ldr	r2, [r3, #24]
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f144:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	691a      	ldr	r2, [r3, #16]
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	f022 0208 	bic.w	r2, r2, #8
 801f154:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	689b      	ldr	r3, [r3, #8]
 801f15c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f160:	2b00      	cmp	r3, #0
 801f162:	d13d      	bne.n	801f1e0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f164:	e036      	b.n	801f1d4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	68db      	ldr	r3, [r3, #12]
 801f16a:	2b0f      	cmp	r3, #15
 801f16c:	d90b      	bls.n	801f186 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	681a      	ldr	r2, [r3, #0]
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f176:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f178:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f17e:	1d1a      	adds	r2, r3, #4
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	665a      	str	r2, [r3, #100]	@ 0x64
 801f184:	e01d      	b.n	801f1c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	68db      	ldr	r3, [r3, #12]
 801f18a:	2b07      	cmp	r3, #7
 801f18c:	d90b      	bls.n	801f1a6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f192:	68fa      	ldr	r2, [r7, #12]
 801f194:	8812      	ldrh	r2, [r2, #0]
 801f196:	b292      	uxth	r2, r2
 801f198:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f19e:	1c9a      	adds	r2, r3, #2
 801f1a0:	687b      	ldr	r3, [r7, #4]
 801f1a2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f1a4:	e00d      	b.n	801f1c2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	681b      	ldr	r3, [r3, #0]
 801f1aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f1b2:	7812      	ldrb	r2, [r2, #0]
 801f1b4:	b2d2      	uxtb	r2, r2
 801f1b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f1bc:	1c5a      	adds	r2, r3, #1
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	3b01      	subs	r3, #1
 801f1cc:	b29a      	uxth	r2, r3
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f1da:	b29b      	uxth	r3, r3
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d1c2      	bne.n	801f166 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f1e0:	6878      	ldr	r0, [r7, #4]
 801f1e2:	f000 f931 	bl	801f448 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	2201      	movs	r2, #1
 801f1ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d003      	beq.n	801f200 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f1f8:	6878      	ldr	r0, [r7, #4]
 801f1fa:	f000 f8f7 	bl	801f3ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f1fe:	e0d0      	b.n	801f3a2 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f200:	7cfb      	ldrb	r3, [r7, #19]
 801f202:	2b05      	cmp	r3, #5
 801f204:	d103      	bne.n	801f20e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f206:	6878      	ldr	r0, [r7, #4]
 801f208:	f000 f8e6 	bl	801f3d8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f20c:	e0c6      	b.n	801f39c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f20e:	7cfb      	ldrb	r3, [r7, #19]
 801f210:	2b04      	cmp	r3, #4
 801f212:	d103      	bne.n	801f21c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f214:	6878      	ldr	r0, [r7, #4]
 801f216:	f000 f8d5 	bl	801f3c4 <HAL_SPI_RxCpltCallback>
    return;
 801f21a:	e0bf      	b.n	801f39c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f21c:	7cfb      	ldrb	r3, [r7, #19]
 801f21e:	2b03      	cmp	r3, #3
 801f220:	f040 80bc 	bne.w	801f39c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f224:	6878      	ldr	r0, [r7, #4]
 801f226:	f000 f8c3 	bl	801f3b0 <HAL_SPI_TxCpltCallback>
    return;
 801f22a:	e0b7      	b.n	801f39c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f22c:	69bb      	ldr	r3, [r7, #24]
 801f22e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f232:	2b00      	cmp	r3, #0
 801f234:	f000 80b5 	beq.w	801f3a2 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f238:	69bb      	ldr	r3, [r7, #24]
 801f23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f23e:	2b00      	cmp	r3, #0
 801f240:	d00f      	beq.n	801f262 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f248:	f043 0204 	orr.w	r2, r3, #4
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	699a      	ldr	r2, [r3, #24]
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f260:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801f262:	69bb      	ldr	r3, [r7, #24]
 801f264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d00f      	beq.n	801f28c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f272:	f043 0201 	orr.w	r2, r3, #1
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	699a      	ldr	r2, [r3, #24]
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	681b      	ldr	r3, [r3, #0]
 801f286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f28a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801f28c:	69bb      	ldr	r3, [r7, #24]
 801f28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f292:	2b00      	cmp	r3, #0
 801f294:	d00f      	beq.n	801f2b6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f296:	687b      	ldr	r3, [r7, #4]
 801f298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f29c:	f043 0208 	orr.w	r2, r3, #8
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	699a      	ldr	r2, [r3, #24]
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f2b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801f2b6:	69bb      	ldr	r3, [r7, #24]
 801f2b8:	f003 0320 	and.w	r3, r3, #32
 801f2bc:	2b00      	cmp	r3, #0
 801f2be:	d00f      	beq.n	801f2e0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f2c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	699a      	ldr	r2, [r3, #24]
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	681b      	ldr	r3, [r3, #0]
 801f2da:	f042 0220 	orr.w	r2, r2, #32
 801f2de:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f2e0:	687b      	ldr	r3, [r7, #4]
 801f2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d05a      	beq.n	801f3a0 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	681a      	ldr	r2, [r3, #0]
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	f022 0201 	bic.w	r2, r2, #1
 801f2f8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	6919      	ldr	r1, [r3, #16]
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	681a      	ldr	r2, [r3, #0]
 801f304:	4b28      	ldr	r3, [pc, #160]	@ (801f3a8 <HAL_SPI_IRQHandler+0x394>)
 801f306:	400b      	ands	r3, r1
 801f308:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f30a:	697b      	ldr	r3, [r7, #20]
 801f30c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f310:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801f314:	d138      	bne.n	801f388 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f316:	687b      	ldr	r3, [r7, #4]
 801f318:	681b      	ldr	r3, [r3, #0]
 801f31a:	689a      	ldr	r2, [r3, #8]
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f324:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d013      	beq.n	801f356 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801f32e:	687b      	ldr	r3, [r7, #4]
 801f330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f332:	4a1e      	ldr	r2, [pc, #120]	@ (801f3ac <HAL_SPI_IRQHandler+0x398>)
 801f334:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f33a:	4618      	mov	r0, r3
 801f33c:	f7fb f850 	bl	801a3e0 <HAL_DMA_Abort_IT>
 801f340:	4603      	mov	r3, r0
 801f342:	2b00      	cmp	r3, #0
 801f344:	d007      	beq.n	801f356 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f34c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d020      	beq.n	801f3a0 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f362:	4a12      	ldr	r2, [pc, #72]	@ (801f3ac <HAL_SPI_IRQHandler+0x398>)
 801f364:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f36a:	4618      	mov	r0, r3
 801f36c:	f7fb f838 	bl	801a3e0 <HAL_DMA_Abort_IT>
 801f370:	4603      	mov	r3, r0
 801f372:	2b00      	cmp	r3, #0
 801f374:	d014      	beq.n	801f3a0 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f37c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f386:	e00b      	b.n	801f3a0 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	2201      	movs	r2, #1
 801f38c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801f390:	6878      	ldr	r0, [r7, #4]
 801f392:	f000 f82b 	bl	801f3ec <HAL_SPI_ErrorCallback>
    return;
 801f396:	e003      	b.n	801f3a0 <HAL_SPI_IRQHandler+0x38c>
    return;
 801f398:	bf00      	nop
 801f39a:	e002      	b.n	801f3a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f39c:	bf00      	nop
 801f39e:	e000      	b.n	801f3a2 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f3a0:	bf00      	nop
  }
}
 801f3a2:	3728      	adds	r7, #40	@ 0x28
 801f3a4:	46bd      	mov	sp, r7
 801f3a6:	bd80      	pop	{r7, pc}
 801f3a8:	fffffc94 	.word	0xfffffc94
 801f3ac:	0801f415 	.word	0x0801f415

0801f3b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f3b0:	b480      	push	{r7}
 801f3b2:	b083      	sub	sp, #12
 801f3b4:	af00      	add	r7, sp, #0
 801f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801f3b8:	bf00      	nop
 801f3ba:	370c      	adds	r7, #12
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c2:	4770      	bx	lr

0801f3c4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b083      	sub	sp, #12
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801f3cc:	bf00      	nop
 801f3ce:	370c      	adds	r7, #12
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d6:	4770      	bx	lr

0801f3d8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f3d8:	b480      	push	{r7}
 801f3da:	b083      	sub	sp, #12
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801f3e0:	bf00      	nop
 801f3e2:	370c      	adds	r7, #12
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ea:	4770      	bx	lr

0801f3ec <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f3ec:	b480      	push	{r7}
 801f3ee:	b083      	sub	sp, #12
 801f3f0:	af00      	add	r7, sp, #0
 801f3f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801f3f4:	bf00      	nop
 801f3f6:	370c      	adds	r7, #12
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fe:	4770      	bx	lr

0801f400 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f400:	b480      	push	{r7}
 801f402:	b083      	sub	sp, #12
 801f404:	af00      	add	r7, sp, #0
 801f406:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801f408:	bf00      	nop
 801f40a:	370c      	adds	r7, #12
 801f40c:	46bd      	mov	sp, r7
 801f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f412:	4770      	bx	lr

0801f414 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f414:	b580      	push	{r7, lr}
 801f416:	b084      	sub	sp, #16
 801f418:	af00      	add	r7, sp, #0
 801f41a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f420:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801f422:	68fb      	ldr	r3, [r7, #12]
 801f424:	2200      	movs	r2, #0
 801f426:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	2200      	movs	r2, #0
 801f42e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801f432:	68fb      	ldr	r3, [r7, #12]
 801f434:	2201      	movs	r2, #1
 801f436:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f43a:	68f8      	ldr	r0, [r7, #12]
 801f43c:	f7ff ffd6 	bl	801f3ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f440:	bf00      	nop
 801f442:	3710      	adds	r7, #16
 801f444:	46bd      	mov	sp, r7
 801f446:	bd80      	pop	{r7, pc}

0801f448 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801f448:	b480      	push	{r7}
 801f44a:	b085      	sub	sp, #20
 801f44c:	af00      	add	r7, sp, #0
 801f44e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801f450:	687b      	ldr	r3, [r7, #4]
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	695b      	ldr	r3, [r3, #20]
 801f456:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	699a      	ldr	r2, [r3, #24]
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	f042 0208 	orr.w	r2, r2, #8
 801f466:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	699a      	ldr	r2, [r3, #24]
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	f042 0210 	orr.w	r2, r2, #16
 801f476:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	681a      	ldr	r2, [r3, #0]
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	681b      	ldr	r3, [r3, #0]
 801f482:	f022 0201 	bic.w	r2, r2, #1
 801f486:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	6919      	ldr	r1, [r3, #16]
 801f48e:	687b      	ldr	r3, [r7, #4]
 801f490:	681a      	ldr	r2, [r3, #0]
 801f492:	4b3c      	ldr	r3, [pc, #240]	@ (801f584 <SPI_CloseTransfer+0x13c>)
 801f494:	400b      	ands	r3, r1
 801f496:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	689a      	ldr	r2, [r3, #8]
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f4a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f4ae:	b2db      	uxtb	r3, r3
 801f4b0:	2b04      	cmp	r3, #4
 801f4b2:	d014      	beq.n	801f4de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	f003 0320 	and.w	r3, r3, #32
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	d00f      	beq.n	801f4de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f4c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f4ce:	687b      	ldr	r3, [r7, #4]
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	699a      	ldr	r2, [r3, #24]
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	f042 0220 	orr.w	r2, r2, #32
 801f4dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f4e4:	b2db      	uxtb	r3, r3
 801f4e6:	2b03      	cmp	r3, #3
 801f4e8:	d014      	beq.n	801f514 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d00f      	beq.n	801f514 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f4fa:	f043 0204 	orr.w	r2, r3, #4
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	699a      	ldr	r2, [r3, #24]
 801f50a:	687b      	ldr	r3, [r7, #4]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f512:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f51a:	2b00      	cmp	r3, #0
 801f51c:	d00f      	beq.n	801f53e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f524:	f043 0201 	orr.w	r2, r3, #1
 801f528:	687b      	ldr	r3, [r7, #4]
 801f52a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	699a      	ldr	r2, [r3, #24]
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f53c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801f53e:	68fb      	ldr	r3, [r7, #12]
 801f540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f544:	2b00      	cmp	r3, #0
 801f546:	d00f      	beq.n	801f568 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f54e:	f043 0208 	orr.w	r2, r3, #8
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	699a      	ldr	r2, [r3, #24]
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f566:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	2200      	movs	r2, #0
 801f56c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	2200      	movs	r2, #0
 801f574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801f578:	bf00      	nop
 801f57a:	3714      	adds	r7, #20
 801f57c:	46bd      	mov	sp, r7
 801f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f582:	4770      	bx	lr
 801f584:	fffffc90 	.word	0xfffffc90

0801f588 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f588:	b480      	push	{r7}
 801f58a:	b085      	sub	sp, #20
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f594:	095b      	lsrs	r3, r3, #5
 801f596:	3301      	adds	r3, #1
 801f598:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	68db      	ldr	r3, [r3, #12]
 801f59e:	3301      	adds	r3, #1
 801f5a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f5a2:	68bb      	ldr	r3, [r7, #8]
 801f5a4:	3307      	adds	r3, #7
 801f5a6:	08db      	lsrs	r3, r3, #3
 801f5a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f5aa:	68bb      	ldr	r3, [r7, #8]
 801f5ac:	68fa      	ldr	r2, [r7, #12]
 801f5ae:	fb02 f303 	mul.w	r3, r2, r3
}
 801f5b2:	4618      	mov	r0, r3
 801f5b4:	3714      	adds	r7, #20
 801f5b6:	46bd      	mov	sp, r7
 801f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5bc:	4770      	bx	lr

0801f5be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f5be:	b580      	push	{r7, lr}
 801f5c0:	b082      	sub	sp, #8
 801f5c2:	af00      	add	r7, sp, #0
 801f5c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d101      	bne.n	801f5d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	e049      	b.n	801f664 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f5d6:	b2db      	uxtb	r3, r3
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d106      	bne.n	801f5ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	2200      	movs	r2, #0
 801f5e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f5e4:	6878      	ldr	r0, [r7, #4]
 801f5e6:	f7e2 fdc5 	bl	8002174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	2202      	movs	r2, #2
 801f5ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	681a      	ldr	r2, [r3, #0]
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	3304      	adds	r3, #4
 801f5fa:	4619      	mov	r1, r3
 801f5fc:	4610      	mov	r0, r2
 801f5fe:	f000 fb1b 	bl	801fc38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	2201      	movs	r2, #1
 801f606:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	2201      	movs	r2, #1
 801f60e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	2201      	movs	r2, #1
 801f616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	2201      	movs	r2, #1
 801f61e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f622:	687b      	ldr	r3, [r7, #4]
 801f624:	2201      	movs	r2, #1
 801f626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	2201      	movs	r2, #1
 801f62e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	2201      	movs	r2, #1
 801f636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	2201      	movs	r2, #1
 801f63e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f642:	687b      	ldr	r3, [r7, #4]
 801f644:	2201      	movs	r2, #1
 801f646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	2201      	movs	r2, #1
 801f64e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	2201      	movs	r2, #1
 801f656:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	2201      	movs	r2, #1
 801f65e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f662:	2300      	movs	r3, #0
}
 801f664:	4618      	mov	r0, r3
 801f666:	3708      	adds	r7, #8
 801f668:	46bd      	mov	sp, r7
 801f66a:	bd80      	pop	{r7, pc}

0801f66c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f66c:	b480      	push	{r7}
 801f66e:	b085      	sub	sp, #20
 801f670:	af00      	add	r7, sp, #0
 801f672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f674:	687b      	ldr	r3, [r7, #4]
 801f676:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f67a:	b2db      	uxtb	r3, r3
 801f67c:	2b01      	cmp	r3, #1
 801f67e:	d001      	beq.n	801f684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f680:	2301      	movs	r3, #1
 801f682:	e054      	b.n	801f72e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f684:	687b      	ldr	r3, [r7, #4]
 801f686:	2202      	movs	r2, #2
 801f688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	68da      	ldr	r2, [r3, #12]
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	f042 0201 	orr.w	r2, r2, #1
 801f69a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	4a26      	ldr	r2, [pc, #152]	@ (801f73c <HAL_TIM_Base_Start_IT+0xd0>)
 801f6a2:	4293      	cmp	r3, r2
 801f6a4:	d022      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f6ae:	d01d      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	681b      	ldr	r3, [r3, #0]
 801f6b4:	4a22      	ldr	r2, [pc, #136]	@ (801f740 <HAL_TIM_Base_Start_IT+0xd4>)
 801f6b6:	4293      	cmp	r3, r2
 801f6b8:	d018      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	4a21      	ldr	r2, [pc, #132]	@ (801f744 <HAL_TIM_Base_Start_IT+0xd8>)
 801f6c0:	4293      	cmp	r3, r2
 801f6c2:	d013      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	4a1f      	ldr	r2, [pc, #124]	@ (801f748 <HAL_TIM_Base_Start_IT+0xdc>)
 801f6ca:	4293      	cmp	r3, r2
 801f6cc:	d00e      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	4a1e      	ldr	r2, [pc, #120]	@ (801f74c <HAL_TIM_Base_Start_IT+0xe0>)
 801f6d4:	4293      	cmp	r3, r2
 801f6d6:	d009      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	4a1c      	ldr	r2, [pc, #112]	@ (801f750 <HAL_TIM_Base_Start_IT+0xe4>)
 801f6de:	4293      	cmp	r3, r2
 801f6e0:	d004      	beq.n	801f6ec <HAL_TIM_Base_Start_IT+0x80>
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	681b      	ldr	r3, [r3, #0]
 801f6e6:	4a1b      	ldr	r2, [pc, #108]	@ (801f754 <HAL_TIM_Base_Start_IT+0xe8>)
 801f6e8:	4293      	cmp	r3, r2
 801f6ea:	d115      	bne.n	801f718 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	689a      	ldr	r2, [r3, #8]
 801f6f2:	4b19      	ldr	r3, [pc, #100]	@ (801f758 <HAL_TIM_Base_Start_IT+0xec>)
 801f6f4:	4013      	ands	r3, r2
 801f6f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	2b06      	cmp	r3, #6
 801f6fc:	d015      	beq.n	801f72a <HAL_TIM_Base_Start_IT+0xbe>
 801f6fe:	68fb      	ldr	r3, [r7, #12]
 801f700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f704:	d011      	beq.n	801f72a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	681a      	ldr	r2, [r3, #0]
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	681b      	ldr	r3, [r3, #0]
 801f710:	f042 0201 	orr.w	r2, r2, #1
 801f714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f716:	e008      	b.n	801f72a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	681a      	ldr	r2, [r3, #0]
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	f042 0201 	orr.w	r2, r2, #1
 801f726:	601a      	str	r2, [r3, #0]
 801f728:	e000      	b.n	801f72c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f72a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f72c:	2300      	movs	r3, #0
}
 801f72e:	4618      	mov	r0, r3
 801f730:	3714      	adds	r7, #20
 801f732:	46bd      	mov	sp, r7
 801f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f738:	4770      	bx	lr
 801f73a:	bf00      	nop
 801f73c:	40010000 	.word	0x40010000
 801f740:	40000400 	.word	0x40000400
 801f744:	40000800 	.word	0x40000800
 801f748:	40000c00 	.word	0x40000c00
 801f74c:	40010400 	.word	0x40010400
 801f750:	40001800 	.word	0x40001800
 801f754:	40014000 	.word	0x40014000
 801f758:	00010007 	.word	0x00010007

0801f75c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801f75c:	b580      	push	{r7, lr}
 801f75e:	b082      	sub	sp, #8
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d101      	bne.n	801f76e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801f76a:	2301      	movs	r3, #1
 801f76c:	e049      	b.n	801f802 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f774:	b2db      	uxtb	r3, r3
 801f776:	2b00      	cmp	r3, #0
 801f778:	d106      	bne.n	801f788 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	2200      	movs	r2, #0
 801f77e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f000 f841 	bl	801f80a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	2202      	movs	r2, #2
 801f78c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	681a      	ldr	r2, [r3, #0]
 801f794:	687b      	ldr	r3, [r7, #4]
 801f796:	3304      	adds	r3, #4
 801f798:	4619      	mov	r1, r3
 801f79a:	4610      	mov	r0, r2
 801f79c:	f000 fa4c 	bl	801fc38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	2201      	movs	r2, #1
 801f7a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	2201      	movs	r2, #1
 801f7ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f7b0:	687b      	ldr	r3, [r7, #4]
 801f7b2:	2201      	movs	r2, #1
 801f7b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	2201      	movs	r2, #1
 801f7bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	2201      	movs	r2, #1
 801f7c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	2201      	movs	r2, #1
 801f7cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	2201      	movs	r2, #1
 801f7d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	2201      	movs	r2, #1
 801f7dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	2201      	movs	r2, #1
 801f7e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	2201      	movs	r2, #1
 801f7ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	2201      	movs	r2, #1
 801f7f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	2201      	movs	r2, #1
 801f7fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f800:	2300      	movs	r3, #0
}
 801f802:	4618      	mov	r0, r3
 801f804:	3708      	adds	r7, #8
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}

0801f80a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801f80a:	b480      	push	{r7}
 801f80c:	b083      	sub	sp, #12
 801f80e:	af00      	add	r7, sp, #0
 801f810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801f812:	bf00      	nop
 801f814:	370c      	adds	r7, #12
 801f816:	46bd      	mov	sp, r7
 801f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f81c:	4770      	bx	lr
	...

0801f820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f820:	b580      	push	{r7, lr}
 801f822:	b086      	sub	sp, #24
 801f824:	af00      	add	r7, sp, #0
 801f826:	60f8      	str	r0, [r7, #12]
 801f828:	60b9      	str	r1, [r7, #8]
 801f82a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f82c:	2300      	movs	r3, #0
 801f82e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f830:	68fb      	ldr	r3, [r7, #12]
 801f832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f836:	2b01      	cmp	r3, #1
 801f838:	d101      	bne.n	801f83e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f83a:	2302      	movs	r3, #2
 801f83c:	e0ff      	b.n	801fa3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f83e:	68fb      	ldr	r3, [r7, #12]
 801f840:	2201      	movs	r2, #1
 801f842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	2b14      	cmp	r3, #20
 801f84a:	f200 80f0 	bhi.w	801fa2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f84e:	a201      	add	r2, pc, #4	@ (adr r2, 801f854 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f854:	0801f8a9 	.word	0x0801f8a9
 801f858:	0801fa2f 	.word	0x0801fa2f
 801f85c:	0801fa2f 	.word	0x0801fa2f
 801f860:	0801fa2f 	.word	0x0801fa2f
 801f864:	0801f8e9 	.word	0x0801f8e9
 801f868:	0801fa2f 	.word	0x0801fa2f
 801f86c:	0801fa2f 	.word	0x0801fa2f
 801f870:	0801fa2f 	.word	0x0801fa2f
 801f874:	0801f92b 	.word	0x0801f92b
 801f878:	0801fa2f 	.word	0x0801fa2f
 801f87c:	0801fa2f 	.word	0x0801fa2f
 801f880:	0801fa2f 	.word	0x0801fa2f
 801f884:	0801f96b 	.word	0x0801f96b
 801f888:	0801fa2f 	.word	0x0801fa2f
 801f88c:	0801fa2f 	.word	0x0801fa2f
 801f890:	0801fa2f 	.word	0x0801fa2f
 801f894:	0801f9ad 	.word	0x0801f9ad
 801f898:	0801fa2f 	.word	0x0801fa2f
 801f89c:	0801fa2f 	.word	0x0801fa2f
 801f8a0:	0801fa2f 	.word	0x0801fa2f
 801f8a4:	0801f9ed 	.word	0x0801f9ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	68b9      	ldr	r1, [r7, #8]
 801f8ae:	4618      	mov	r0, r3
 801f8b0:	f000 fa68 	bl	801fd84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	681b      	ldr	r3, [r3, #0]
 801f8b8:	699a      	ldr	r2, [r3, #24]
 801f8ba:	68fb      	ldr	r3, [r7, #12]
 801f8bc:	681b      	ldr	r3, [r3, #0]
 801f8be:	f042 0208 	orr.w	r2, r2, #8
 801f8c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f8c4:	68fb      	ldr	r3, [r7, #12]
 801f8c6:	681b      	ldr	r3, [r3, #0]
 801f8c8:	699a      	ldr	r2, [r3, #24]
 801f8ca:	68fb      	ldr	r3, [r7, #12]
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	f022 0204 	bic.w	r2, r2, #4
 801f8d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f8d4:	68fb      	ldr	r3, [r7, #12]
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	6999      	ldr	r1, [r3, #24]
 801f8da:	68bb      	ldr	r3, [r7, #8]
 801f8dc:	691a      	ldr	r2, [r3, #16]
 801f8de:	68fb      	ldr	r3, [r7, #12]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	430a      	orrs	r2, r1
 801f8e4:	619a      	str	r2, [r3, #24]
      break;
 801f8e6:	e0a5      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f8e8:	68fb      	ldr	r3, [r7, #12]
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	68b9      	ldr	r1, [r7, #8]
 801f8ee:	4618      	mov	r0, r3
 801f8f0:	f000 fad8 	bl	801fea4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f8f4:	68fb      	ldr	r3, [r7, #12]
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	699a      	ldr	r2, [r3, #24]
 801f8fa:	68fb      	ldr	r3, [r7, #12]
 801f8fc:	681b      	ldr	r3, [r3, #0]
 801f8fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f904:	68fb      	ldr	r3, [r7, #12]
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	699a      	ldr	r2, [r3, #24]
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	681b      	ldr	r3, [r3, #0]
 801f90e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f914:	68fb      	ldr	r3, [r7, #12]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	6999      	ldr	r1, [r3, #24]
 801f91a:	68bb      	ldr	r3, [r7, #8]
 801f91c:	691b      	ldr	r3, [r3, #16]
 801f91e:	021a      	lsls	r2, r3, #8
 801f920:	68fb      	ldr	r3, [r7, #12]
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	430a      	orrs	r2, r1
 801f926:	619a      	str	r2, [r3, #24]
      break;
 801f928:	e084      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f92a:	68fb      	ldr	r3, [r7, #12]
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	68b9      	ldr	r1, [r7, #8]
 801f930:	4618      	mov	r0, r3
 801f932:	f000 fb41 	bl	801ffb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f936:	68fb      	ldr	r3, [r7, #12]
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	69da      	ldr	r2, [r3, #28]
 801f93c:	68fb      	ldr	r3, [r7, #12]
 801f93e:	681b      	ldr	r3, [r3, #0]
 801f940:	f042 0208 	orr.w	r2, r2, #8
 801f944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	69da      	ldr	r2, [r3, #28]
 801f94c:	68fb      	ldr	r3, [r7, #12]
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	f022 0204 	bic.w	r2, r2, #4
 801f954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f956:	68fb      	ldr	r3, [r7, #12]
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	69d9      	ldr	r1, [r3, #28]
 801f95c:	68bb      	ldr	r3, [r7, #8]
 801f95e:	691a      	ldr	r2, [r3, #16]
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	430a      	orrs	r2, r1
 801f966:	61da      	str	r2, [r3, #28]
      break;
 801f968:	e064      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f96a:	68fb      	ldr	r3, [r7, #12]
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	68b9      	ldr	r1, [r7, #8]
 801f970:	4618      	mov	r0, r3
 801f972:	f000 fba9 	bl	80200c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f976:	68fb      	ldr	r3, [r7, #12]
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	69da      	ldr	r2, [r3, #28]
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f986:	68fb      	ldr	r3, [r7, #12]
 801f988:	681b      	ldr	r3, [r3, #0]
 801f98a:	69da      	ldr	r2, [r3, #28]
 801f98c:	68fb      	ldr	r3, [r7, #12]
 801f98e:	681b      	ldr	r3, [r3, #0]
 801f990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801f994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f996:	68fb      	ldr	r3, [r7, #12]
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	69d9      	ldr	r1, [r3, #28]
 801f99c:	68bb      	ldr	r3, [r7, #8]
 801f99e:	691b      	ldr	r3, [r3, #16]
 801f9a0:	021a      	lsls	r2, r3, #8
 801f9a2:	68fb      	ldr	r3, [r7, #12]
 801f9a4:	681b      	ldr	r3, [r3, #0]
 801f9a6:	430a      	orrs	r2, r1
 801f9a8:	61da      	str	r2, [r3, #28]
      break;
 801f9aa:	e043      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f9ac:	68fb      	ldr	r3, [r7, #12]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	68b9      	ldr	r1, [r7, #8]
 801f9b2:	4618      	mov	r0, r3
 801f9b4:	f000 fbf2 	bl	802019c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f9b8:	68fb      	ldr	r3, [r7, #12]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	f042 0208 	orr.w	r2, r2, #8
 801f9c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f9c8:	68fb      	ldr	r3, [r7, #12]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f9ce:	68fb      	ldr	r3, [r7, #12]
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	f022 0204 	bic.w	r2, r2, #4
 801f9d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f9d8:	68fb      	ldr	r3, [r7, #12]
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801f9de:	68bb      	ldr	r3, [r7, #8]
 801f9e0:	691a      	ldr	r2, [r3, #16]
 801f9e2:	68fb      	ldr	r3, [r7, #12]
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	430a      	orrs	r2, r1
 801f9e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801f9ea:	e023      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f9ec:	68fb      	ldr	r3, [r7, #12]
 801f9ee:	681b      	ldr	r3, [r3, #0]
 801f9f0:	68b9      	ldr	r1, [r7, #8]
 801f9f2:	4618      	mov	r0, r3
 801f9f4:	f000 fc36 	bl	8020264 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fa06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801fa08:	68fb      	ldr	r3, [r7, #12]
 801fa0a:	681b      	ldr	r3, [r3, #0]
 801fa0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fa0e:	68fb      	ldr	r3, [r7, #12]
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fa16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801fa18:	68fb      	ldr	r3, [r7, #12]
 801fa1a:	681b      	ldr	r3, [r3, #0]
 801fa1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801fa1e:	68bb      	ldr	r3, [r7, #8]
 801fa20:	691b      	ldr	r3, [r3, #16]
 801fa22:	021a      	lsls	r2, r3, #8
 801fa24:	68fb      	ldr	r3, [r7, #12]
 801fa26:	681b      	ldr	r3, [r3, #0]
 801fa28:	430a      	orrs	r2, r1
 801fa2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801fa2c:	e002      	b.n	801fa34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801fa2e:	2301      	movs	r3, #1
 801fa30:	75fb      	strb	r3, [r7, #23]
      break;
 801fa32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801fa34:	68fb      	ldr	r3, [r7, #12]
 801fa36:	2200      	movs	r2, #0
 801fa38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fa3c:	7dfb      	ldrb	r3, [r7, #23]
}
 801fa3e:	4618      	mov	r0, r3
 801fa40:	3718      	adds	r7, #24
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}
 801fa46:	bf00      	nop

0801fa48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b084      	sub	sp, #16
 801fa4c:	af00      	add	r7, sp, #0
 801fa4e:	6078      	str	r0, [r7, #4]
 801fa50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fa52:	2300      	movs	r3, #0
 801fa54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fa5c:	2b01      	cmp	r3, #1
 801fa5e:	d101      	bne.n	801fa64 <HAL_TIM_ConfigClockSource+0x1c>
 801fa60:	2302      	movs	r3, #2
 801fa62:	e0dc      	b.n	801fc1e <HAL_TIM_ConfigClockSource+0x1d6>
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	2201      	movs	r2, #1
 801fa68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	2202      	movs	r2, #2
 801fa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	689b      	ldr	r3, [r3, #8]
 801fa7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801fa7c:	68ba      	ldr	r2, [r7, #8]
 801fa7e:	4b6a      	ldr	r3, [pc, #424]	@ (801fc28 <HAL_TIM_ConfigClockSource+0x1e0>)
 801fa80:	4013      	ands	r3, r2
 801fa82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801fa84:	68bb      	ldr	r3, [r7, #8]
 801fa86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801fa8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	681b      	ldr	r3, [r3, #0]
 801fa90:	68ba      	ldr	r2, [r7, #8]
 801fa92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	4a64      	ldr	r2, [pc, #400]	@ (801fc2c <HAL_TIM_ConfigClockSource+0x1e4>)
 801fa9a:	4293      	cmp	r3, r2
 801fa9c:	f000 80a9 	beq.w	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801faa0:	4a62      	ldr	r2, [pc, #392]	@ (801fc2c <HAL_TIM_ConfigClockSource+0x1e4>)
 801faa2:	4293      	cmp	r3, r2
 801faa4:	f200 80ae 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801faa8:	4a61      	ldr	r2, [pc, #388]	@ (801fc30 <HAL_TIM_ConfigClockSource+0x1e8>)
 801faaa:	4293      	cmp	r3, r2
 801faac:	f000 80a1 	beq.w	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fab0:	4a5f      	ldr	r2, [pc, #380]	@ (801fc30 <HAL_TIM_ConfigClockSource+0x1e8>)
 801fab2:	4293      	cmp	r3, r2
 801fab4:	f200 80a6 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fab8:	4a5e      	ldr	r2, [pc, #376]	@ (801fc34 <HAL_TIM_ConfigClockSource+0x1ec>)
 801faba:	4293      	cmp	r3, r2
 801fabc:	f000 8099 	beq.w	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fac0:	4a5c      	ldr	r2, [pc, #368]	@ (801fc34 <HAL_TIM_ConfigClockSource+0x1ec>)
 801fac2:	4293      	cmp	r3, r2
 801fac4:	f200 809e 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fac8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801facc:	f000 8091 	beq.w	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fad0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801fad4:	f200 8096 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fad8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fadc:	f000 8089 	beq.w	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fae4:	f200 808e 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801faec:	d03e      	beq.n	801fb6c <HAL_TIM_ConfigClockSource+0x124>
 801faee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801faf2:	f200 8087 	bhi.w	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801faf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fafa:	f000 8086 	beq.w	801fc0a <HAL_TIM_ConfigClockSource+0x1c2>
 801fafe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801fb02:	d87f      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb04:	2b70      	cmp	r3, #112	@ 0x70
 801fb06:	d01a      	beq.n	801fb3e <HAL_TIM_ConfigClockSource+0xf6>
 801fb08:	2b70      	cmp	r3, #112	@ 0x70
 801fb0a:	d87b      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb0c:	2b60      	cmp	r3, #96	@ 0x60
 801fb0e:	d050      	beq.n	801fbb2 <HAL_TIM_ConfigClockSource+0x16a>
 801fb10:	2b60      	cmp	r3, #96	@ 0x60
 801fb12:	d877      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb14:	2b50      	cmp	r3, #80	@ 0x50
 801fb16:	d03c      	beq.n	801fb92 <HAL_TIM_ConfigClockSource+0x14a>
 801fb18:	2b50      	cmp	r3, #80	@ 0x50
 801fb1a:	d873      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb1c:	2b40      	cmp	r3, #64	@ 0x40
 801fb1e:	d058      	beq.n	801fbd2 <HAL_TIM_ConfigClockSource+0x18a>
 801fb20:	2b40      	cmp	r3, #64	@ 0x40
 801fb22:	d86f      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb24:	2b30      	cmp	r3, #48	@ 0x30
 801fb26:	d064      	beq.n	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb28:	2b30      	cmp	r3, #48	@ 0x30
 801fb2a:	d86b      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb2c:	2b20      	cmp	r3, #32
 801fb2e:	d060      	beq.n	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb30:	2b20      	cmp	r3, #32
 801fb32:	d867      	bhi.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d05c      	beq.n	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb38:	2b10      	cmp	r3, #16
 801fb3a:	d05a      	beq.n	801fbf2 <HAL_TIM_ConfigClockSource+0x1aa>
 801fb3c:	e062      	b.n	801fc04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fb3e:	687b      	ldr	r3, [r7, #4]
 801fb40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fb42:	683b      	ldr	r3, [r7, #0]
 801fb44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fb46:	683b      	ldr	r3, [r7, #0]
 801fb48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fb4a:	683b      	ldr	r3, [r7, #0]
 801fb4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fb4e:	f000 fc6d 	bl	802042c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	689b      	ldr	r3, [r3, #8]
 801fb58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801fb5a:	68bb      	ldr	r3, [r7, #8]
 801fb5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801fb60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	681b      	ldr	r3, [r3, #0]
 801fb66:	68ba      	ldr	r2, [r7, #8]
 801fb68:	609a      	str	r2, [r3, #8]
      break;
 801fb6a:	e04f      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801fb70:	683b      	ldr	r3, [r7, #0]
 801fb72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801fb74:	683b      	ldr	r3, [r7, #0]
 801fb76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801fb78:	683b      	ldr	r3, [r7, #0]
 801fb7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801fb7c:	f000 fc56 	bl	802042c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801fb80:	687b      	ldr	r3, [r7, #4]
 801fb82:	681b      	ldr	r3, [r3, #0]
 801fb84:	689a      	ldr	r2, [r3, #8]
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801fb8e:	609a      	str	r2, [r3, #8]
      break;
 801fb90:	e03c      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fb96:	683b      	ldr	r3, [r7, #0]
 801fb98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fb9a:	683b      	ldr	r3, [r7, #0]
 801fb9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fb9e:	461a      	mov	r2, r3
 801fba0:	f000 fbc6 	bl	8020330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	2150      	movs	r1, #80	@ 0x50
 801fbaa:	4618      	mov	r0, r3
 801fbac:	f000 fc20 	bl	80203f0 <TIM_ITRx_SetConfig>
      break;
 801fbb0:	e02c      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fbba:	683b      	ldr	r3, [r7, #0]
 801fbbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801fbbe:	461a      	mov	r2, r3
 801fbc0:	f000 fbe5 	bl	802038e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	681b      	ldr	r3, [r3, #0]
 801fbc8:	2160      	movs	r1, #96	@ 0x60
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f000 fc10 	bl	80203f0 <TIM_ITRx_SetConfig>
      break;
 801fbd0:	e01c      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801fbd6:	683b      	ldr	r3, [r7, #0]
 801fbd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801fbde:	461a      	mov	r2, r3
 801fbe0:	f000 fba6 	bl	8020330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	2140      	movs	r1, #64	@ 0x40
 801fbea:	4618      	mov	r0, r3
 801fbec:	f000 fc00 	bl	80203f0 <TIM_ITRx_SetConfig>
      break;
 801fbf0:	e00c      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	681a      	ldr	r2, [r3, #0]
 801fbf6:	683b      	ldr	r3, [r7, #0]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	4619      	mov	r1, r3
 801fbfc:	4610      	mov	r0, r2
 801fbfe:	f000 fbf7 	bl	80203f0 <TIM_ITRx_SetConfig>
      break;
 801fc02:	e003      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801fc04:	2301      	movs	r3, #1
 801fc06:	73fb      	strb	r3, [r7, #15]
      break;
 801fc08:	e000      	b.n	801fc0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801fc0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801fc0c:	687b      	ldr	r3, [r7, #4]
 801fc0e:	2201      	movs	r2, #1
 801fc10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801fc14:	687b      	ldr	r3, [r7, #4]
 801fc16:	2200      	movs	r2, #0
 801fc18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801fc1c:	7bfb      	ldrb	r3, [r7, #15]
}
 801fc1e:	4618      	mov	r0, r3
 801fc20:	3710      	adds	r7, #16
 801fc22:	46bd      	mov	sp, r7
 801fc24:	bd80      	pop	{r7, pc}
 801fc26:	bf00      	nop
 801fc28:	ffceff88 	.word	0xffceff88
 801fc2c:	00100040 	.word	0x00100040
 801fc30:	00100030 	.word	0x00100030
 801fc34:	00100020 	.word	0x00100020

0801fc38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801fc38:	b480      	push	{r7}
 801fc3a:	b085      	sub	sp, #20
 801fc3c:	af00      	add	r7, sp, #0
 801fc3e:	6078      	str	r0, [r7, #4]
 801fc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	4a46      	ldr	r2, [pc, #280]	@ (801fd64 <TIM_Base_SetConfig+0x12c>)
 801fc4c:	4293      	cmp	r3, r2
 801fc4e:	d013      	beq.n	801fc78 <TIM_Base_SetConfig+0x40>
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fc56:	d00f      	beq.n	801fc78 <TIM_Base_SetConfig+0x40>
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	4a43      	ldr	r2, [pc, #268]	@ (801fd68 <TIM_Base_SetConfig+0x130>)
 801fc5c:	4293      	cmp	r3, r2
 801fc5e:	d00b      	beq.n	801fc78 <TIM_Base_SetConfig+0x40>
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	4a42      	ldr	r2, [pc, #264]	@ (801fd6c <TIM_Base_SetConfig+0x134>)
 801fc64:	4293      	cmp	r3, r2
 801fc66:	d007      	beq.n	801fc78 <TIM_Base_SetConfig+0x40>
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	4a41      	ldr	r2, [pc, #260]	@ (801fd70 <TIM_Base_SetConfig+0x138>)
 801fc6c:	4293      	cmp	r3, r2
 801fc6e:	d003      	beq.n	801fc78 <TIM_Base_SetConfig+0x40>
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	4a40      	ldr	r2, [pc, #256]	@ (801fd74 <TIM_Base_SetConfig+0x13c>)
 801fc74:	4293      	cmp	r3, r2
 801fc76:	d108      	bne.n	801fc8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fc78:	68fb      	ldr	r3, [r7, #12]
 801fc7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801fc7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fc80:	683b      	ldr	r3, [r7, #0]
 801fc82:	685b      	ldr	r3, [r3, #4]
 801fc84:	68fa      	ldr	r2, [r7, #12]
 801fc86:	4313      	orrs	r3, r2
 801fc88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	4a35      	ldr	r2, [pc, #212]	@ (801fd64 <TIM_Base_SetConfig+0x12c>)
 801fc8e:	4293      	cmp	r3, r2
 801fc90:	d01f      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fc92:	687b      	ldr	r3, [r7, #4]
 801fc94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fc98:	d01b      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	4a32      	ldr	r2, [pc, #200]	@ (801fd68 <TIM_Base_SetConfig+0x130>)
 801fc9e:	4293      	cmp	r3, r2
 801fca0:	d017      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	4a31      	ldr	r2, [pc, #196]	@ (801fd6c <TIM_Base_SetConfig+0x134>)
 801fca6:	4293      	cmp	r3, r2
 801fca8:	d013      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	4a30      	ldr	r2, [pc, #192]	@ (801fd70 <TIM_Base_SetConfig+0x138>)
 801fcae:	4293      	cmp	r3, r2
 801fcb0:	d00f      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	4a2f      	ldr	r2, [pc, #188]	@ (801fd74 <TIM_Base_SetConfig+0x13c>)
 801fcb6:	4293      	cmp	r3, r2
 801fcb8:	d00b      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	4a2e      	ldr	r2, [pc, #184]	@ (801fd78 <TIM_Base_SetConfig+0x140>)
 801fcbe:	4293      	cmp	r3, r2
 801fcc0:	d007      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fcc2:	687b      	ldr	r3, [r7, #4]
 801fcc4:	4a2d      	ldr	r2, [pc, #180]	@ (801fd7c <TIM_Base_SetConfig+0x144>)
 801fcc6:	4293      	cmp	r3, r2
 801fcc8:	d003      	beq.n	801fcd2 <TIM_Base_SetConfig+0x9a>
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	4a2c      	ldr	r2, [pc, #176]	@ (801fd80 <TIM_Base_SetConfig+0x148>)
 801fcce:	4293      	cmp	r3, r2
 801fcd0:	d108      	bne.n	801fce4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fcd2:	68fb      	ldr	r3, [r7, #12]
 801fcd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801fcd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fcda:	683b      	ldr	r3, [r7, #0]
 801fcdc:	68db      	ldr	r3, [r3, #12]
 801fcde:	68fa      	ldr	r2, [r7, #12]
 801fce0:	4313      	orrs	r3, r2
 801fce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fce4:	68fb      	ldr	r3, [r7, #12]
 801fce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801fcea:	683b      	ldr	r3, [r7, #0]
 801fcec:	695b      	ldr	r3, [r3, #20]
 801fcee:	4313      	orrs	r3, r2
 801fcf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fcf2:	687b      	ldr	r3, [r7, #4]
 801fcf4:	68fa      	ldr	r2, [r7, #12]
 801fcf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801fcf8:	683b      	ldr	r3, [r7, #0]
 801fcfa:	689a      	ldr	r2, [r3, #8]
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801fd00:	683b      	ldr	r3, [r7, #0]
 801fd02:	681a      	ldr	r2, [r3, #0]
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	4a16      	ldr	r2, [pc, #88]	@ (801fd64 <TIM_Base_SetConfig+0x12c>)
 801fd0c:	4293      	cmp	r3, r2
 801fd0e:	d00f      	beq.n	801fd30 <TIM_Base_SetConfig+0xf8>
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	4a18      	ldr	r2, [pc, #96]	@ (801fd74 <TIM_Base_SetConfig+0x13c>)
 801fd14:	4293      	cmp	r3, r2
 801fd16:	d00b      	beq.n	801fd30 <TIM_Base_SetConfig+0xf8>
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	4a17      	ldr	r2, [pc, #92]	@ (801fd78 <TIM_Base_SetConfig+0x140>)
 801fd1c:	4293      	cmp	r3, r2
 801fd1e:	d007      	beq.n	801fd30 <TIM_Base_SetConfig+0xf8>
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	4a16      	ldr	r2, [pc, #88]	@ (801fd7c <TIM_Base_SetConfig+0x144>)
 801fd24:	4293      	cmp	r3, r2
 801fd26:	d003      	beq.n	801fd30 <TIM_Base_SetConfig+0xf8>
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	4a15      	ldr	r2, [pc, #84]	@ (801fd80 <TIM_Base_SetConfig+0x148>)
 801fd2c:	4293      	cmp	r3, r2
 801fd2e:	d103      	bne.n	801fd38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fd30:	683b      	ldr	r3, [r7, #0]
 801fd32:	691a      	ldr	r2, [r3, #16]
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	2201      	movs	r2, #1
 801fd3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	691b      	ldr	r3, [r3, #16]
 801fd42:	f003 0301 	and.w	r3, r3, #1
 801fd46:	2b01      	cmp	r3, #1
 801fd48:	d105      	bne.n	801fd56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	691b      	ldr	r3, [r3, #16]
 801fd4e:	f023 0201 	bic.w	r2, r3, #1
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	611a      	str	r2, [r3, #16]
  }
}
 801fd56:	bf00      	nop
 801fd58:	3714      	adds	r7, #20
 801fd5a:	46bd      	mov	sp, r7
 801fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd60:	4770      	bx	lr
 801fd62:	bf00      	nop
 801fd64:	40010000 	.word	0x40010000
 801fd68:	40000400 	.word	0x40000400
 801fd6c:	40000800 	.word	0x40000800
 801fd70:	40000c00 	.word	0x40000c00
 801fd74:	40010400 	.word	0x40010400
 801fd78:	40014000 	.word	0x40014000
 801fd7c:	40014400 	.word	0x40014400
 801fd80:	40014800 	.word	0x40014800

0801fd84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fd84:	b480      	push	{r7}
 801fd86:	b087      	sub	sp, #28
 801fd88:	af00      	add	r7, sp, #0
 801fd8a:	6078      	str	r0, [r7, #4]
 801fd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	6a1b      	ldr	r3, [r3, #32]
 801fd92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	6a1b      	ldr	r3, [r3, #32]
 801fd98:	f023 0201 	bic.w	r2, r3, #1
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	685b      	ldr	r3, [r3, #4]
 801fda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	699b      	ldr	r3, [r3, #24]
 801fdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fdac:	68fa      	ldr	r2, [r7, #12]
 801fdae:	4b37      	ldr	r3, [pc, #220]	@ (801fe8c <TIM_OC1_SetConfig+0x108>)
 801fdb0:	4013      	ands	r3, r2
 801fdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801fdb4:	68fb      	ldr	r3, [r7, #12]
 801fdb6:	f023 0303 	bic.w	r3, r3, #3
 801fdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fdbc:	683b      	ldr	r3, [r7, #0]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	68fa      	ldr	r2, [r7, #12]
 801fdc2:	4313      	orrs	r3, r2
 801fdc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fdc6:	697b      	ldr	r3, [r7, #20]
 801fdc8:	f023 0302 	bic.w	r3, r3, #2
 801fdcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fdce:	683b      	ldr	r3, [r7, #0]
 801fdd0:	689b      	ldr	r3, [r3, #8]
 801fdd2:	697a      	ldr	r2, [r7, #20]
 801fdd4:	4313      	orrs	r3, r2
 801fdd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	4a2d      	ldr	r2, [pc, #180]	@ (801fe90 <TIM_OC1_SetConfig+0x10c>)
 801fddc:	4293      	cmp	r3, r2
 801fdde:	d00f      	beq.n	801fe00 <TIM_OC1_SetConfig+0x7c>
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	4a2c      	ldr	r2, [pc, #176]	@ (801fe94 <TIM_OC1_SetConfig+0x110>)
 801fde4:	4293      	cmp	r3, r2
 801fde6:	d00b      	beq.n	801fe00 <TIM_OC1_SetConfig+0x7c>
 801fde8:	687b      	ldr	r3, [r7, #4]
 801fdea:	4a2b      	ldr	r2, [pc, #172]	@ (801fe98 <TIM_OC1_SetConfig+0x114>)
 801fdec:	4293      	cmp	r3, r2
 801fdee:	d007      	beq.n	801fe00 <TIM_OC1_SetConfig+0x7c>
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	4a2a      	ldr	r2, [pc, #168]	@ (801fe9c <TIM_OC1_SetConfig+0x118>)
 801fdf4:	4293      	cmp	r3, r2
 801fdf6:	d003      	beq.n	801fe00 <TIM_OC1_SetConfig+0x7c>
 801fdf8:	687b      	ldr	r3, [r7, #4]
 801fdfa:	4a29      	ldr	r2, [pc, #164]	@ (801fea0 <TIM_OC1_SetConfig+0x11c>)
 801fdfc:	4293      	cmp	r3, r2
 801fdfe:	d10c      	bne.n	801fe1a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fe00:	697b      	ldr	r3, [r7, #20]
 801fe02:	f023 0308 	bic.w	r3, r3, #8
 801fe06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fe08:	683b      	ldr	r3, [r7, #0]
 801fe0a:	68db      	ldr	r3, [r3, #12]
 801fe0c:	697a      	ldr	r2, [r7, #20]
 801fe0e:	4313      	orrs	r3, r2
 801fe10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fe12:	697b      	ldr	r3, [r7, #20]
 801fe14:	f023 0304 	bic.w	r3, r3, #4
 801fe18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe1a:	687b      	ldr	r3, [r7, #4]
 801fe1c:	4a1c      	ldr	r2, [pc, #112]	@ (801fe90 <TIM_OC1_SetConfig+0x10c>)
 801fe1e:	4293      	cmp	r3, r2
 801fe20:	d00f      	beq.n	801fe42 <TIM_OC1_SetConfig+0xbe>
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	4a1b      	ldr	r2, [pc, #108]	@ (801fe94 <TIM_OC1_SetConfig+0x110>)
 801fe26:	4293      	cmp	r3, r2
 801fe28:	d00b      	beq.n	801fe42 <TIM_OC1_SetConfig+0xbe>
 801fe2a:	687b      	ldr	r3, [r7, #4]
 801fe2c:	4a1a      	ldr	r2, [pc, #104]	@ (801fe98 <TIM_OC1_SetConfig+0x114>)
 801fe2e:	4293      	cmp	r3, r2
 801fe30:	d007      	beq.n	801fe42 <TIM_OC1_SetConfig+0xbe>
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	4a19      	ldr	r2, [pc, #100]	@ (801fe9c <TIM_OC1_SetConfig+0x118>)
 801fe36:	4293      	cmp	r3, r2
 801fe38:	d003      	beq.n	801fe42 <TIM_OC1_SetConfig+0xbe>
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	4a18      	ldr	r2, [pc, #96]	@ (801fea0 <TIM_OC1_SetConfig+0x11c>)
 801fe3e:	4293      	cmp	r3, r2
 801fe40:	d111      	bne.n	801fe66 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fe42:	693b      	ldr	r3, [r7, #16]
 801fe44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801fe48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fe4a:	693b      	ldr	r3, [r7, #16]
 801fe4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801fe50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fe52:	683b      	ldr	r3, [r7, #0]
 801fe54:	695b      	ldr	r3, [r3, #20]
 801fe56:	693a      	ldr	r2, [r7, #16]
 801fe58:	4313      	orrs	r3, r2
 801fe5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fe5c:	683b      	ldr	r3, [r7, #0]
 801fe5e:	699b      	ldr	r3, [r3, #24]
 801fe60:	693a      	ldr	r2, [r7, #16]
 801fe62:	4313      	orrs	r3, r2
 801fe64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe66:	687b      	ldr	r3, [r7, #4]
 801fe68:	693a      	ldr	r2, [r7, #16]
 801fe6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	68fa      	ldr	r2, [r7, #12]
 801fe70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801fe72:	683b      	ldr	r3, [r7, #0]
 801fe74:	685a      	ldr	r2, [r3, #4]
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	697a      	ldr	r2, [r7, #20]
 801fe7e:	621a      	str	r2, [r3, #32]
}
 801fe80:	bf00      	nop
 801fe82:	371c      	adds	r7, #28
 801fe84:	46bd      	mov	sp, r7
 801fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe8a:	4770      	bx	lr
 801fe8c:	fffeff8f 	.word	0xfffeff8f
 801fe90:	40010000 	.word	0x40010000
 801fe94:	40010400 	.word	0x40010400
 801fe98:	40014000 	.word	0x40014000
 801fe9c:	40014400 	.word	0x40014400
 801fea0:	40014800 	.word	0x40014800

0801fea4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fea4:	b480      	push	{r7}
 801fea6:	b087      	sub	sp, #28
 801fea8:	af00      	add	r7, sp, #0
 801feaa:	6078      	str	r0, [r7, #4]
 801feac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	6a1b      	ldr	r3, [r3, #32]
 801feb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	6a1b      	ldr	r3, [r3, #32]
 801feb8:	f023 0210 	bic.w	r2, r3, #16
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	685b      	ldr	r3, [r3, #4]
 801fec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	699b      	ldr	r3, [r3, #24]
 801feca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fecc:	68fa      	ldr	r2, [r7, #12]
 801fece:	4b34      	ldr	r3, [pc, #208]	@ (801ffa0 <TIM_OC2_SetConfig+0xfc>)
 801fed0:	4013      	ands	r3, r2
 801fed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fed4:	68fb      	ldr	r3, [r7, #12]
 801fed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801feda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fedc:	683b      	ldr	r3, [r7, #0]
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	021b      	lsls	r3, r3, #8
 801fee2:	68fa      	ldr	r2, [r7, #12]
 801fee4:	4313      	orrs	r3, r2
 801fee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fee8:	697b      	ldr	r3, [r7, #20]
 801feea:	f023 0320 	bic.w	r3, r3, #32
 801feee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fef0:	683b      	ldr	r3, [r7, #0]
 801fef2:	689b      	ldr	r3, [r3, #8]
 801fef4:	011b      	lsls	r3, r3, #4
 801fef6:	697a      	ldr	r2, [r7, #20]
 801fef8:	4313      	orrs	r3, r2
 801fefa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	4a29      	ldr	r2, [pc, #164]	@ (801ffa4 <TIM_OC2_SetConfig+0x100>)
 801ff00:	4293      	cmp	r3, r2
 801ff02:	d003      	beq.n	801ff0c <TIM_OC2_SetConfig+0x68>
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	4a28      	ldr	r2, [pc, #160]	@ (801ffa8 <TIM_OC2_SetConfig+0x104>)
 801ff08:	4293      	cmp	r3, r2
 801ff0a:	d10d      	bne.n	801ff28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ff0c:	697b      	ldr	r3, [r7, #20]
 801ff0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ff12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ff14:	683b      	ldr	r3, [r7, #0]
 801ff16:	68db      	ldr	r3, [r3, #12]
 801ff18:	011b      	lsls	r3, r3, #4
 801ff1a:	697a      	ldr	r2, [r7, #20]
 801ff1c:	4313      	orrs	r3, r2
 801ff1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ff20:	697b      	ldr	r3, [r7, #20]
 801ff22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801ff26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	4a1e      	ldr	r2, [pc, #120]	@ (801ffa4 <TIM_OC2_SetConfig+0x100>)
 801ff2c:	4293      	cmp	r3, r2
 801ff2e:	d00f      	beq.n	801ff50 <TIM_OC2_SetConfig+0xac>
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	4a1d      	ldr	r2, [pc, #116]	@ (801ffa8 <TIM_OC2_SetConfig+0x104>)
 801ff34:	4293      	cmp	r3, r2
 801ff36:	d00b      	beq.n	801ff50 <TIM_OC2_SetConfig+0xac>
 801ff38:	687b      	ldr	r3, [r7, #4]
 801ff3a:	4a1c      	ldr	r2, [pc, #112]	@ (801ffac <TIM_OC2_SetConfig+0x108>)
 801ff3c:	4293      	cmp	r3, r2
 801ff3e:	d007      	beq.n	801ff50 <TIM_OC2_SetConfig+0xac>
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	4a1b      	ldr	r2, [pc, #108]	@ (801ffb0 <TIM_OC2_SetConfig+0x10c>)
 801ff44:	4293      	cmp	r3, r2
 801ff46:	d003      	beq.n	801ff50 <TIM_OC2_SetConfig+0xac>
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	4a1a      	ldr	r2, [pc, #104]	@ (801ffb4 <TIM_OC2_SetConfig+0x110>)
 801ff4c:	4293      	cmp	r3, r2
 801ff4e:	d113      	bne.n	801ff78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ff50:	693b      	ldr	r3, [r7, #16]
 801ff52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801ff56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ff58:	693b      	ldr	r3, [r7, #16]
 801ff5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801ff5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ff60:	683b      	ldr	r3, [r7, #0]
 801ff62:	695b      	ldr	r3, [r3, #20]
 801ff64:	009b      	lsls	r3, r3, #2
 801ff66:	693a      	ldr	r2, [r7, #16]
 801ff68:	4313      	orrs	r3, r2
 801ff6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	699b      	ldr	r3, [r3, #24]
 801ff70:	009b      	lsls	r3, r3, #2
 801ff72:	693a      	ldr	r2, [r7, #16]
 801ff74:	4313      	orrs	r3, r2
 801ff76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ff78:	687b      	ldr	r3, [r7, #4]
 801ff7a:	693a      	ldr	r2, [r7, #16]
 801ff7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	68fa      	ldr	r2, [r7, #12]
 801ff82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ff84:	683b      	ldr	r3, [r7, #0]
 801ff86:	685a      	ldr	r2, [r3, #4]
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	697a      	ldr	r2, [r7, #20]
 801ff90:	621a      	str	r2, [r3, #32]
}
 801ff92:	bf00      	nop
 801ff94:	371c      	adds	r7, #28
 801ff96:	46bd      	mov	sp, r7
 801ff98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff9c:	4770      	bx	lr
 801ff9e:	bf00      	nop
 801ffa0:	feff8fff 	.word	0xfeff8fff
 801ffa4:	40010000 	.word	0x40010000
 801ffa8:	40010400 	.word	0x40010400
 801ffac:	40014000 	.word	0x40014000
 801ffb0:	40014400 	.word	0x40014400
 801ffb4:	40014800 	.word	0x40014800

0801ffb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801ffb8:	b480      	push	{r7}
 801ffba:	b087      	sub	sp, #28
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
 801ffc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	6a1b      	ldr	r3, [r3, #32]
 801ffc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	6a1b      	ldr	r3, [r3, #32]
 801ffcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	685b      	ldr	r3, [r3, #4]
 801ffd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	69db      	ldr	r3, [r3, #28]
 801ffde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ffe0:	68fa      	ldr	r2, [r7, #12]
 801ffe2:	4b33      	ldr	r3, [pc, #204]	@ (80200b0 <TIM_OC3_SetConfig+0xf8>)
 801ffe4:	4013      	ands	r3, r2
 801ffe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	f023 0303 	bic.w	r3, r3, #3
 801ffee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fff0:	683b      	ldr	r3, [r7, #0]
 801fff2:	681b      	ldr	r3, [r3, #0]
 801fff4:	68fa      	ldr	r2, [r7, #12]
 801fff6:	4313      	orrs	r3, r2
 801fff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fffa:	697b      	ldr	r3, [r7, #20]
 801fffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020002:	683b      	ldr	r3, [r7, #0]
 8020004:	689b      	ldr	r3, [r3, #8]
 8020006:	021b      	lsls	r3, r3, #8
 8020008:	697a      	ldr	r2, [r7, #20]
 802000a:	4313      	orrs	r3, r2
 802000c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	4a28      	ldr	r2, [pc, #160]	@ (80200b4 <TIM_OC3_SetConfig+0xfc>)
 8020012:	4293      	cmp	r3, r2
 8020014:	d003      	beq.n	802001e <TIM_OC3_SetConfig+0x66>
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	4a27      	ldr	r2, [pc, #156]	@ (80200b8 <TIM_OC3_SetConfig+0x100>)
 802001a:	4293      	cmp	r3, r2
 802001c:	d10d      	bne.n	802003a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802001e:	697b      	ldr	r3, [r7, #20]
 8020020:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020026:	683b      	ldr	r3, [r7, #0]
 8020028:	68db      	ldr	r3, [r3, #12]
 802002a:	021b      	lsls	r3, r3, #8
 802002c:	697a      	ldr	r2, [r7, #20]
 802002e:	4313      	orrs	r3, r2
 8020030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020032:	697b      	ldr	r3, [r7, #20]
 8020034:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	4a1d      	ldr	r2, [pc, #116]	@ (80200b4 <TIM_OC3_SetConfig+0xfc>)
 802003e:	4293      	cmp	r3, r2
 8020040:	d00f      	beq.n	8020062 <TIM_OC3_SetConfig+0xaa>
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	4a1c      	ldr	r2, [pc, #112]	@ (80200b8 <TIM_OC3_SetConfig+0x100>)
 8020046:	4293      	cmp	r3, r2
 8020048:	d00b      	beq.n	8020062 <TIM_OC3_SetConfig+0xaa>
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	4a1b      	ldr	r2, [pc, #108]	@ (80200bc <TIM_OC3_SetConfig+0x104>)
 802004e:	4293      	cmp	r3, r2
 8020050:	d007      	beq.n	8020062 <TIM_OC3_SetConfig+0xaa>
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	4a1a      	ldr	r2, [pc, #104]	@ (80200c0 <TIM_OC3_SetConfig+0x108>)
 8020056:	4293      	cmp	r3, r2
 8020058:	d003      	beq.n	8020062 <TIM_OC3_SetConfig+0xaa>
 802005a:	687b      	ldr	r3, [r7, #4]
 802005c:	4a19      	ldr	r2, [pc, #100]	@ (80200c4 <TIM_OC3_SetConfig+0x10c>)
 802005e:	4293      	cmp	r3, r2
 8020060:	d113      	bne.n	802008a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020062:	693b      	ldr	r3, [r7, #16]
 8020064:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802006a:	693b      	ldr	r3, [r7, #16]
 802006c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020072:	683b      	ldr	r3, [r7, #0]
 8020074:	695b      	ldr	r3, [r3, #20]
 8020076:	011b      	lsls	r3, r3, #4
 8020078:	693a      	ldr	r2, [r7, #16]
 802007a:	4313      	orrs	r3, r2
 802007c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802007e:	683b      	ldr	r3, [r7, #0]
 8020080:	699b      	ldr	r3, [r3, #24]
 8020082:	011b      	lsls	r3, r3, #4
 8020084:	693a      	ldr	r2, [r7, #16]
 8020086:	4313      	orrs	r3, r2
 8020088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	693a      	ldr	r2, [r7, #16]
 802008e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	68fa      	ldr	r2, [r7, #12]
 8020094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020096:	683b      	ldr	r3, [r7, #0]
 8020098:	685a      	ldr	r2, [r3, #4]
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	697a      	ldr	r2, [r7, #20]
 80200a2:	621a      	str	r2, [r3, #32]
}
 80200a4:	bf00      	nop
 80200a6:	371c      	adds	r7, #28
 80200a8:	46bd      	mov	sp, r7
 80200aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ae:	4770      	bx	lr
 80200b0:	fffeff8f 	.word	0xfffeff8f
 80200b4:	40010000 	.word	0x40010000
 80200b8:	40010400 	.word	0x40010400
 80200bc:	40014000 	.word	0x40014000
 80200c0:	40014400 	.word	0x40014400
 80200c4:	40014800 	.word	0x40014800

080200c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80200c8:	b480      	push	{r7}
 80200ca:	b087      	sub	sp, #28
 80200cc:	af00      	add	r7, sp, #0
 80200ce:	6078      	str	r0, [r7, #4]
 80200d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	6a1b      	ldr	r3, [r3, #32]
 80200d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	6a1b      	ldr	r3, [r3, #32]
 80200dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80200e4:	687b      	ldr	r3, [r7, #4]
 80200e6:	685b      	ldr	r3, [r3, #4]
 80200e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	69db      	ldr	r3, [r3, #28]
 80200ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80200f0:	68fa      	ldr	r2, [r7, #12]
 80200f2:	4b24      	ldr	r3, [pc, #144]	@ (8020184 <TIM_OC4_SetConfig+0xbc>)
 80200f4:	4013      	ands	r3, r2
 80200f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80200f8:	68fb      	ldr	r3, [r7, #12]
 80200fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80200fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020100:	683b      	ldr	r3, [r7, #0]
 8020102:	681b      	ldr	r3, [r3, #0]
 8020104:	021b      	lsls	r3, r3, #8
 8020106:	68fa      	ldr	r2, [r7, #12]
 8020108:	4313      	orrs	r3, r2
 802010a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802010c:	693b      	ldr	r3, [r7, #16]
 802010e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020114:	683b      	ldr	r3, [r7, #0]
 8020116:	689b      	ldr	r3, [r3, #8]
 8020118:	031b      	lsls	r3, r3, #12
 802011a:	693a      	ldr	r2, [r7, #16]
 802011c:	4313      	orrs	r3, r2
 802011e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	4a19      	ldr	r2, [pc, #100]	@ (8020188 <TIM_OC4_SetConfig+0xc0>)
 8020124:	4293      	cmp	r3, r2
 8020126:	d00f      	beq.n	8020148 <TIM_OC4_SetConfig+0x80>
 8020128:	687b      	ldr	r3, [r7, #4]
 802012a:	4a18      	ldr	r2, [pc, #96]	@ (802018c <TIM_OC4_SetConfig+0xc4>)
 802012c:	4293      	cmp	r3, r2
 802012e:	d00b      	beq.n	8020148 <TIM_OC4_SetConfig+0x80>
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	4a17      	ldr	r2, [pc, #92]	@ (8020190 <TIM_OC4_SetConfig+0xc8>)
 8020134:	4293      	cmp	r3, r2
 8020136:	d007      	beq.n	8020148 <TIM_OC4_SetConfig+0x80>
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	4a16      	ldr	r2, [pc, #88]	@ (8020194 <TIM_OC4_SetConfig+0xcc>)
 802013c:	4293      	cmp	r3, r2
 802013e:	d003      	beq.n	8020148 <TIM_OC4_SetConfig+0x80>
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	4a15      	ldr	r2, [pc, #84]	@ (8020198 <TIM_OC4_SetConfig+0xd0>)
 8020144:	4293      	cmp	r3, r2
 8020146:	d109      	bne.n	802015c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020148:	697b      	ldr	r3, [r7, #20]
 802014a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802014e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020150:	683b      	ldr	r3, [r7, #0]
 8020152:	695b      	ldr	r3, [r3, #20]
 8020154:	019b      	lsls	r3, r3, #6
 8020156:	697a      	ldr	r2, [r7, #20]
 8020158:	4313      	orrs	r3, r2
 802015a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	697a      	ldr	r2, [r7, #20]
 8020160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	68fa      	ldr	r2, [r7, #12]
 8020166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020168:	683b      	ldr	r3, [r7, #0]
 802016a:	685a      	ldr	r2, [r3, #4]
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	693a      	ldr	r2, [r7, #16]
 8020174:	621a      	str	r2, [r3, #32]
}
 8020176:	bf00      	nop
 8020178:	371c      	adds	r7, #28
 802017a:	46bd      	mov	sp, r7
 802017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020180:	4770      	bx	lr
 8020182:	bf00      	nop
 8020184:	feff8fff 	.word	0xfeff8fff
 8020188:	40010000 	.word	0x40010000
 802018c:	40010400 	.word	0x40010400
 8020190:	40014000 	.word	0x40014000
 8020194:	40014400 	.word	0x40014400
 8020198:	40014800 	.word	0x40014800

0802019c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 802019c:	b480      	push	{r7}
 802019e:	b087      	sub	sp, #28
 80201a0:	af00      	add	r7, sp, #0
 80201a2:	6078      	str	r0, [r7, #4]
 80201a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	6a1b      	ldr	r3, [r3, #32]
 80201aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80201ac:	687b      	ldr	r3, [r7, #4]
 80201ae:	6a1b      	ldr	r3, [r3, #32]
 80201b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	685b      	ldr	r3, [r3, #4]
 80201bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80201c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80201c4:	68fa      	ldr	r2, [r7, #12]
 80201c6:	4b21      	ldr	r3, [pc, #132]	@ (802024c <TIM_OC5_SetConfig+0xb0>)
 80201c8:	4013      	ands	r3, r2
 80201ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80201cc:	683b      	ldr	r3, [r7, #0]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	68fa      	ldr	r2, [r7, #12]
 80201d2:	4313      	orrs	r3, r2
 80201d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80201d6:	693b      	ldr	r3, [r7, #16]
 80201d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80201dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80201de:	683b      	ldr	r3, [r7, #0]
 80201e0:	689b      	ldr	r3, [r3, #8]
 80201e2:	041b      	lsls	r3, r3, #16
 80201e4:	693a      	ldr	r2, [r7, #16]
 80201e6:	4313      	orrs	r3, r2
 80201e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	4a18      	ldr	r2, [pc, #96]	@ (8020250 <TIM_OC5_SetConfig+0xb4>)
 80201ee:	4293      	cmp	r3, r2
 80201f0:	d00f      	beq.n	8020212 <TIM_OC5_SetConfig+0x76>
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	4a17      	ldr	r2, [pc, #92]	@ (8020254 <TIM_OC5_SetConfig+0xb8>)
 80201f6:	4293      	cmp	r3, r2
 80201f8:	d00b      	beq.n	8020212 <TIM_OC5_SetConfig+0x76>
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	4a16      	ldr	r2, [pc, #88]	@ (8020258 <TIM_OC5_SetConfig+0xbc>)
 80201fe:	4293      	cmp	r3, r2
 8020200:	d007      	beq.n	8020212 <TIM_OC5_SetConfig+0x76>
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	4a15      	ldr	r2, [pc, #84]	@ (802025c <TIM_OC5_SetConfig+0xc0>)
 8020206:	4293      	cmp	r3, r2
 8020208:	d003      	beq.n	8020212 <TIM_OC5_SetConfig+0x76>
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	4a14      	ldr	r2, [pc, #80]	@ (8020260 <TIM_OC5_SetConfig+0xc4>)
 802020e:	4293      	cmp	r3, r2
 8020210:	d109      	bne.n	8020226 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020212:	697b      	ldr	r3, [r7, #20]
 8020214:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020218:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802021a:	683b      	ldr	r3, [r7, #0]
 802021c:	695b      	ldr	r3, [r3, #20]
 802021e:	021b      	lsls	r3, r3, #8
 8020220:	697a      	ldr	r2, [r7, #20]
 8020222:	4313      	orrs	r3, r2
 8020224:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	697a      	ldr	r2, [r7, #20]
 802022a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	68fa      	ldr	r2, [r7, #12]
 8020230:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020232:	683b      	ldr	r3, [r7, #0]
 8020234:	685a      	ldr	r2, [r3, #4]
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	693a      	ldr	r2, [r7, #16]
 802023e:	621a      	str	r2, [r3, #32]
}
 8020240:	bf00      	nop
 8020242:	371c      	adds	r7, #28
 8020244:	46bd      	mov	sp, r7
 8020246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802024a:	4770      	bx	lr
 802024c:	fffeff8f 	.word	0xfffeff8f
 8020250:	40010000 	.word	0x40010000
 8020254:	40010400 	.word	0x40010400
 8020258:	40014000 	.word	0x40014000
 802025c:	40014400 	.word	0x40014400
 8020260:	40014800 	.word	0x40014800

08020264 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020264:	b480      	push	{r7}
 8020266:	b087      	sub	sp, #28
 8020268:	af00      	add	r7, sp, #0
 802026a:	6078      	str	r0, [r7, #4]
 802026c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	6a1b      	ldr	r3, [r3, #32]
 8020272:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	6a1b      	ldr	r3, [r3, #32]
 8020278:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	685b      	ldr	r3, [r3, #4]
 8020284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802028a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 802028c:	68fa      	ldr	r2, [r7, #12]
 802028e:	4b22      	ldr	r3, [pc, #136]	@ (8020318 <TIM_OC6_SetConfig+0xb4>)
 8020290:	4013      	ands	r3, r2
 8020292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020294:	683b      	ldr	r3, [r7, #0]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	021b      	lsls	r3, r3, #8
 802029a:	68fa      	ldr	r2, [r7, #12]
 802029c:	4313      	orrs	r3, r2
 802029e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80202a0:	693b      	ldr	r3, [r7, #16]
 80202a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80202a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80202a8:	683b      	ldr	r3, [r7, #0]
 80202aa:	689b      	ldr	r3, [r3, #8]
 80202ac:	051b      	lsls	r3, r3, #20
 80202ae:	693a      	ldr	r2, [r7, #16]
 80202b0:	4313      	orrs	r3, r2
 80202b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80202b4:	687b      	ldr	r3, [r7, #4]
 80202b6:	4a19      	ldr	r2, [pc, #100]	@ (802031c <TIM_OC6_SetConfig+0xb8>)
 80202b8:	4293      	cmp	r3, r2
 80202ba:	d00f      	beq.n	80202dc <TIM_OC6_SetConfig+0x78>
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	4a18      	ldr	r2, [pc, #96]	@ (8020320 <TIM_OC6_SetConfig+0xbc>)
 80202c0:	4293      	cmp	r3, r2
 80202c2:	d00b      	beq.n	80202dc <TIM_OC6_SetConfig+0x78>
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	4a17      	ldr	r2, [pc, #92]	@ (8020324 <TIM_OC6_SetConfig+0xc0>)
 80202c8:	4293      	cmp	r3, r2
 80202ca:	d007      	beq.n	80202dc <TIM_OC6_SetConfig+0x78>
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	4a16      	ldr	r2, [pc, #88]	@ (8020328 <TIM_OC6_SetConfig+0xc4>)
 80202d0:	4293      	cmp	r3, r2
 80202d2:	d003      	beq.n	80202dc <TIM_OC6_SetConfig+0x78>
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	4a15      	ldr	r2, [pc, #84]	@ (802032c <TIM_OC6_SetConfig+0xc8>)
 80202d8:	4293      	cmp	r3, r2
 80202da:	d109      	bne.n	80202f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80202dc:	697b      	ldr	r3, [r7, #20]
 80202de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80202e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	695b      	ldr	r3, [r3, #20]
 80202e8:	029b      	lsls	r3, r3, #10
 80202ea:	697a      	ldr	r2, [r7, #20]
 80202ec:	4313      	orrs	r3, r2
 80202ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	697a      	ldr	r2, [r7, #20]
 80202f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	68fa      	ldr	r2, [r7, #12]
 80202fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	685a      	ldr	r2, [r3, #4]
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	693a      	ldr	r2, [r7, #16]
 8020308:	621a      	str	r2, [r3, #32]
}
 802030a:	bf00      	nop
 802030c:	371c      	adds	r7, #28
 802030e:	46bd      	mov	sp, r7
 8020310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020314:	4770      	bx	lr
 8020316:	bf00      	nop
 8020318:	feff8fff 	.word	0xfeff8fff
 802031c:	40010000 	.word	0x40010000
 8020320:	40010400 	.word	0x40010400
 8020324:	40014000 	.word	0x40014000
 8020328:	40014400 	.word	0x40014400
 802032c:	40014800 	.word	0x40014800

08020330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020330:	b480      	push	{r7}
 8020332:	b087      	sub	sp, #28
 8020334:	af00      	add	r7, sp, #0
 8020336:	60f8      	str	r0, [r7, #12]
 8020338:	60b9      	str	r1, [r7, #8]
 802033a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	6a1b      	ldr	r3, [r3, #32]
 8020340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020342:	68fb      	ldr	r3, [r7, #12]
 8020344:	6a1b      	ldr	r3, [r3, #32]
 8020346:	f023 0201 	bic.w	r2, r3, #1
 802034a:	68fb      	ldr	r3, [r7, #12]
 802034c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	699b      	ldr	r3, [r3, #24]
 8020352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020354:	693b      	ldr	r3, [r7, #16]
 8020356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 802035a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	011b      	lsls	r3, r3, #4
 8020360:	693a      	ldr	r2, [r7, #16]
 8020362:	4313      	orrs	r3, r2
 8020364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020366:	697b      	ldr	r3, [r7, #20]
 8020368:	f023 030a 	bic.w	r3, r3, #10
 802036c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802036e:	697a      	ldr	r2, [r7, #20]
 8020370:	68bb      	ldr	r3, [r7, #8]
 8020372:	4313      	orrs	r3, r2
 8020374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020376:	68fb      	ldr	r3, [r7, #12]
 8020378:	693a      	ldr	r2, [r7, #16]
 802037a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802037c:	68fb      	ldr	r3, [r7, #12]
 802037e:	697a      	ldr	r2, [r7, #20]
 8020380:	621a      	str	r2, [r3, #32]
}
 8020382:	bf00      	nop
 8020384:	371c      	adds	r7, #28
 8020386:	46bd      	mov	sp, r7
 8020388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038c:	4770      	bx	lr

0802038e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802038e:	b480      	push	{r7}
 8020390:	b087      	sub	sp, #28
 8020392:	af00      	add	r7, sp, #0
 8020394:	60f8      	str	r0, [r7, #12]
 8020396:	60b9      	str	r1, [r7, #8]
 8020398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 802039a:	68fb      	ldr	r3, [r7, #12]
 802039c:	6a1b      	ldr	r3, [r3, #32]
 802039e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80203a0:	68fb      	ldr	r3, [r7, #12]
 80203a2:	6a1b      	ldr	r3, [r3, #32]
 80203a4:	f023 0210 	bic.w	r2, r3, #16
 80203a8:	68fb      	ldr	r3, [r7, #12]
 80203aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	699b      	ldr	r3, [r3, #24]
 80203b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80203b2:	693b      	ldr	r3, [r7, #16]
 80203b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80203b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	031b      	lsls	r3, r3, #12
 80203be:	693a      	ldr	r2, [r7, #16]
 80203c0:	4313      	orrs	r3, r2
 80203c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80203c4:	697b      	ldr	r3, [r7, #20]
 80203c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80203ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80203cc:	68bb      	ldr	r3, [r7, #8]
 80203ce:	011b      	lsls	r3, r3, #4
 80203d0:	697a      	ldr	r2, [r7, #20]
 80203d2:	4313      	orrs	r3, r2
 80203d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80203d6:	68fb      	ldr	r3, [r7, #12]
 80203d8:	693a      	ldr	r2, [r7, #16]
 80203da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80203dc:	68fb      	ldr	r3, [r7, #12]
 80203de:	697a      	ldr	r2, [r7, #20]
 80203e0:	621a      	str	r2, [r3, #32]
}
 80203e2:	bf00      	nop
 80203e4:	371c      	adds	r7, #28
 80203e6:	46bd      	mov	sp, r7
 80203e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ec:	4770      	bx	lr
	...

080203f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80203f0:	b480      	push	{r7}
 80203f2:	b085      	sub	sp, #20
 80203f4:	af00      	add	r7, sp, #0
 80203f6:	6078      	str	r0, [r7, #4]
 80203f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80203fa:	687b      	ldr	r3, [r7, #4]
 80203fc:	689b      	ldr	r3, [r3, #8]
 80203fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020400:	68fa      	ldr	r2, [r7, #12]
 8020402:	4b09      	ldr	r3, [pc, #36]	@ (8020428 <TIM_ITRx_SetConfig+0x38>)
 8020404:	4013      	ands	r3, r2
 8020406:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020408:	683a      	ldr	r2, [r7, #0]
 802040a:	68fb      	ldr	r3, [r7, #12]
 802040c:	4313      	orrs	r3, r2
 802040e:	f043 0307 	orr.w	r3, r3, #7
 8020412:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	68fa      	ldr	r2, [r7, #12]
 8020418:	609a      	str	r2, [r3, #8]
}
 802041a:	bf00      	nop
 802041c:	3714      	adds	r7, #20
 802041e:	46bd      	mov	sp, r7
 8020420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020424:	4770      	bx	lr
 8020426:	bf00      	nop
 8020428:	ffcfff8f 	.word	0xffcfff8f

0802042c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802042c:	b480      	push	{r7}
 802042e:	b087      	sub	sp, #28
 8020430:	af00      	add	r7, sp, #0
 8020432:	60f8      	str	r0, [r7, #12]
 8020434:	60b9      	str	r1, [r7, #8]
 8020436:	607a      	str	r2, [r7, #4]
 8020438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	689b      	ldr	r3, [r3, #8]
 802043e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020440:	697b      	ldr	r3, [r7, #20]
 8020442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020448:	683b      	ldr	r3, [r7, #0]
 802044a:	021a      	lsls	r2, r3, #8
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	431a      	orrs	r2, r3
 8020450:	68bb      	ldr	r3, [r7, #8]
 8020452:	4313      	orrs	r3, r2
 8020454:	697a      	ldr	r2, [r7, #20]
 8020456:	4313      	orrs	r3, r2
 8020458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802045a:	68fb      	ldr	r3, [r7, #12]
 802045c:	697a      	ldr	r2, [r7, #20]
 802045e:	609a      	str	r2, [r3, #8]
}
 8020460:	bf00      	nop
 8020462:	371c      	adds	r7, #28
 8020464:	46bd      	mov	sp, r7
 8020466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802046a:	4770      	bx	lr

0802046c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802046c:	b480      	push	{r7}
 802046e:	b085      	sub	sp, #20
 8020470:	af00      	add	r7, sp, #0
 8020472:	6078      	str	r0, [r7, #4]
 8020474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 802047c:	2b01      	cmp	r3, #1
 802047e:	d101      	bne.n	8020484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020480:	2302      	movs	r3, #2
 8020482:	e06d      	b.n	8020560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8020484:	687b      	ldr	r3, [r7, #4]
 8020486:	2201      	movs	r2, #1
 8020488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	2202      	movs	r2, #2
 8020490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	685b      	ldr	r3, [r3, #4]
 802049a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	681b      	ldr	r3, [r3, #0]
 80204a0:	689b      	ldr	r3, [r3, #8]
 80204a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	4a30      	ldr	r2, [pc, #192]	@ (802056c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80204aa:	4293      	cmp	r3, r2
 80204ac:	d004      	beq.n	80204b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	4a2f      	ldr	r2, [pc, #188]	@ (8020570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80204b4:	4293      	cmp	r3, r2
 80204b6:	d108      	bne.n	80204ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80204b8:	68fb      	ldr	r3, [r7, #12]
 80204ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80204be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80204c0:	683b      	ldr	r3, [r7, #0]
 80204c2:	685b      	ldr	r3, [r3, #4]
 80204c4:	68fa      	ldr	r2, [r7, #12]
 80204c6:	4313      	orrs	r3, r2
 80204c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80204ca:	68fb      	ldr	r3, [r7, #12]
 80204cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80204d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80204d2:	683b      	ldr	r3, [r7, #0]
 80204d4:	681b      	ldr	r3, [r3, #0]
 80204d6:	68fa      	ldr	r2, [r7, #12]
 80204d8:	4313      	orrs	r3, r2
 80204da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	68fa      	ldr	r2, [r7, #12]
 80204e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	4a20      	ldr	r2, [pc, #128]	@ (802056c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80204ea:	4293      	cmp	r3, r2
 80204ec:	d022      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80204f6:	d01d      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80204f8:	687b      	ldr	r3, [r7, #4]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	4a1d      	ldr	r2, [pc, #116]	@ (8020574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80204fe:	4293      	cmp	r3, r2
 8020500:	d018      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	4a1c      	ldr	r2, [pc, #112]	@ (8020578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020508:	4293      	cmp	r3, r2
 802050a:	d013      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	681b      	ldr	r3, [r3, #0]
 8020510:	4a1a      	ldr	r2, [pc, #104]	@ (802057c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020512:	4293      	cmp	r3, r2
 8020514:	d00e      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020516:	687b      	ldr	r3, [r7, #4]
 8020518:	681b      	ldr	r3, [r3, #0]
 802051a:	4a15      	ldr	r2, [pc, #84]	@ (8020570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 802051c:	4293      	cmp	r3, r2
 802051e:	d009      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	4a16      	ldr	r2, [pc, #88]	@ (8020580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020526:	4293      	cmp	r3, r2
 8020528:	d004      	beq.n	8020534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	681b      	ldr	r3, [r3, #0]
 802052e:	4a15      	ldr	r2, [pc, #84]	@ (8020584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020530:	4293      	cmp	r3, r2
 8020532:	d10c      	bne.n	802054e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020534:	68bb      	ldr	r3, [r7, #8]
 8020536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802053a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802053c:	683b      	ldr	r3, [r7, #0]
 802053e:	689b      	ldr	r3, [r3, #8]
 8020540:	68ba      	ldr	r2, [r7, #8]
 8020542:	4313      	orrs	r3, r2
 8020544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020546:	687b      	ldr	r3, [r7, #4]
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	68ba      	ldr	r2, [r7, #8]
 802054c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	2201      	movs	r2, #1
 8020552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	2200      	movs	r2, #0
 802055a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802055e:	2300      	movs	r3, #0
}
 8020560:	4618      	mov	r0, r3
 8020562:	3714      	adds	r7, #20
 8020564:	46bd      	mov	sp, r7
 8020566:	f85d 7b04 	ldr.w	r7, [sp], #4
 802056a:	4770      	bx	lr
 802056c:	40010000 	.word	0x40010000
 8020570:	40010400 	.word	0x40010400
 8020574:	40000400 	.word	0x40000400
 8020578:	40000800 	.word	0x40000800
 802057c:	40000c00 	.word	0x40000c00
 8020580:	40001800 	.word	0x40001800
 8020584:	40014000 	.word	0x40014000

08020588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020588:	b580      	push	{r7, lr}
 802058a:	b082      	sub	sp, #8
 802058c:	af00      	add	r7, sp, #0
 802058e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	2b00      	cmp	r3, #0
 8020594:	d101      	bne.n	802059a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020596:	2301      	movs	r3, #1
 8020598:	e042      	b.n	8020620 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d106      	bne.n	80205b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	2200      	movs	r2, #0
 80205a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80205ac:	6878      	ldr	r0, [r7, #4]
 80205ae:	f7e1 ff4b 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	2224      	movs	r2, #36	@ 0x24
 80205b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	681b      	ldr	r3, [r3, #0]
 80205be:	681a      	ldr	r2, [r3, #0]
 80205c0:	687b      	ldr	r3, [r7, #4]
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	f022 0201 	bic.w	r2, r2, #1
 80205c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d002      	beq.n	80205d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80205d2:	6878      	ldr	r0, [r7, #4]
 80205d4:	f000 fd90 	bl	80210f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80205d8:	6878      	ldr	r0, [r7, #4]
 80205da:	f000 f825 	bl	8020628 <UART_SetConfig>
 80205de:	4603      	mov	r3, r0
 80205e0:	2b01      	cmp	r3, #1
 80205e2:	d101      	bne.n	80205e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80205e4:	2301      	movs	r3, #1
 80205e6:	e01b      	b.n	8020620 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80205e8:	687b      	ldr	r3, [r7, #4]
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	685a      	ldr	r2, [r3, #4]
 80205ee:	687b      	ldr	r3, [r7, #4]
 80205f0:	681b      	ldr	r3, [r3, #0]
 80205f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80205f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	689a      	ldr	r2, [r3, #8]
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	681a      	ldr	r2, [r3, #0]
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	f042 0201 	orr.w	r2, r2, #1
 8020616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020618:	6878      	ldr	r0, [r7, #4]
 802061a:	f000 fe0f 	bl	802123c <UART_CheckIdleState>
 802061e:	4603      	mov	r3, r0
}
 8020620:	4618      	mov	r0, r3
 8020622:	3708      	adds	r7, #8
 8020624:	46bd      	mov	sp, r7
 8020626:	bd80      	pop	{r7, pc}

08020628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802062c:	b092      	sub	sp, #72	@ 0x48
 802062e:	af00      	add	r7, sp, #0
 8020630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020632:	2300      	movs	r3, #0
 8020634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020638:	697b      	ldr	r3, [r7, #20]
 802063a:	689a      	ldr	r2, [r3, #8]
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	691b      	ldr	r3, [r3, #16]
 8020640:	431a      	orrs	r2, r3
 8020642:	697b      	ldr	r3, [r7, #20]
 8020644:	695b      	ldr	r3, [r3, #20]
 8020646:	431a      	orrs	r2, r3
 8020648:	697b      	ldr	r3, [r7, #20]
 802064a:	69db      	ldr	r3, [r3, #28]
 802064c:	4313      	orrs	r3, r2
 802064e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020650:	697b      	ldr	r3, [r7, #20]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	681a      	ldr	r2, [r3, #0]
 8020656:	4bbe      	ldr	r3, [pc, #760]	@ (8020950 <UART_SetConfig+0x328>)
 8020658:	4013      	ands	r3, r2
 802065a:	697a      	ldr	r2, [r7, #20]
 802065c:	6812      	ldr	r2, [r2, #0]
 802065e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020660:	430b      	orrs	r3, r1
 8020662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020664:	697b      	ldr	r3, [r7, #20]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	685b      	ldr	r3, [r3, #4]
 802066a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802066e:	697b      	ldr	r3, [r7, #20]
 8020670:	68da      	ldr	r2, [r3, #12]
 8020672:	697b      	ldr	r3, [r7, #20]
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	430a      	orrs	r2, r1
 8020678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802067a:	697b      	ldr	r3, [r7, #20]
 802067c:	699b      	ldr	r3, [r3, #24]
 802067e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020680:	697b      	ldr	r3, [r7, #20]
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	4ab3      	ldr	r2, [pc, #716]	@ (8020954 <UART_SetConfig+0x32c>)
 8020686:	4293      	cmp	r3, r2
 8020688:	d004      	beq.n	8020694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	6a1b      	ldr	r3, [r3, #32]
 802068e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020690:	4313      	orrs	r3, r2
 8020692:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020694:	697b      	ldr	r3, [r7, #20]
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	689a      	ldr	r2, [r3, #8]
 802069a:	4baf      	ldr	r3, [pc, #700]	@ (8020958 <UART_SetConfig+0x330>)
 802069c:	4013      	ands	r3, r2
 802069e:	697a      	ldr	r2, [r7, #20]
 80206a0:	6812      	ldr	r2, [r2, #0]
 80206a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80206a4:	430b      	orrs	r3, r1
 80206a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80206a8:	697b      	ldr	r3, [r7, #20]
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80206ae:	f023 010f 	bic.w	r1, r3, #15
 80206b2:	697b      	ldr	r3, [r7, #20]
 80206b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80206b6:	697b      	ldr	r3, [r7, #20]
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	430a      	orrs	r2, r1
 80206bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80206be:	697b      	ldr	r3, [r7, #20]
 80206c0:	681b      	ldr	r3, [r3, #0]
 80206c2:	4aa6      	ldr	r2, [pc, #664]	@ (802095c <UART_SetConfig+0x334>)
 80206c4:	4293      	cmp	r3, r2
 80206c6:	d177      	bne.n	80207b8 <UART_SetConfig+0x190>
 80206c8:	4ba5      	ldr	r3, [pc, #660]	@ (8020960 <UART_SetConfig+0x338>)
 80206ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80206cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80206d0:	2b28      	cmp	r3, #40	@ 0x28
 80206d2:	d86d      	bhi.n	80207b0 <UART_SetConfig+0x188>
 80206d4:	a201      	add	r2, pc, #4	@ (adr r2, 80206dc <UART_SetConfig+0xb4>)
 80206d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80206da:	bf00      	nop
 80206dc:	08020781 	.word	0x08020781
 80206e0:	080207b1 	.word	0x080207b1
 80206e4:	080207b1 	.word	0x080207b1
 80206e8:	080207b1 	.word	0x080207b1
 80206ec:	080207b1 	.word	0x080207b1
 80206f0:	080207b1 	.word	0x080207b1
 80206f4:	080207b1 	.word	0x080207b1
 80206f8:	080207b1 	.word	0x080207b1
 80206fc:	08020789 	.word	0x08020789
 8020700:	080207b1 	.word	0x080207b1
 8020704:	080207b1 	.word	0x080207b1
 8020708:	080207b1 	.word	0x080207b1
 802070c:	080207b1 	.word	0x080207b1
 8020710:	080207b1 	.word	0x080207b1
 8020714:	080207b1 	.word	0x080207b1
 8020718:	080207b1 	.word	0x080207b1
 802071c:	08020791 	.word	0x08020791
 8020720:	080207b1 	.word	0x080207b1
 8020724:	080207b1 	.word	0x080207b1
 8020728:	080207b1 	.word	0x080207b1
 802072c:	080207b1 	.word	0x080207b1
 8020730:	080207b1 	.word	0x080207b1
 8020734:	080207b1 	.word	0x080207b1
 8020738:	080207b1 	.word	0x080207b1
 802073c:	08020799 	.word	0x08020799
 8020740:	080207b1 	.word	0x080207b1
 8020744:	080207b1 	.word	0x080207b1
 8020748:	080207b1 	.word	0x080207b1
 802074c:	080207b1 	.word	0x080207b1
 8020750:	080207b1 	.word	0x080207b1
 8020754:	080207b1 	.word	0x080207b1
 8020758:	080207b1 	.word	0x080207b1
 802075c:	080207a1 	.word	0x080207a1
 8020760:	080207b1 	.word	0x080207b1
 8020764:	080207b1 	.word	0x080207b1
 8020768:	080207b1 	.word	0x080207b1
 802076c:	080207b1 	.word	0x080207b1
 8020770:	080207b1 	.word	0x080207b1
 8020774:	080207b1 	.word	0x080207b1
 8020778:	080207b1 	.word	0x080207b1
 802077c:	080207a9 	.word	0x080207a9
 8020780:	2301      	movs	r3, #1
 8020782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020786:	e222      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020788:	2304      	movs	r3, #4
 802078a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802078e:	e21e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020790:	2308      	movs	r3, #8
 8020792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020796:	e21a      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020798:	2310      	movs	r3, #16
 802079a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802079e:	e216      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207a0:	2320      	movs	r3, #32
 80207a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207a6:	e212      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207a8:	2340      	movs	r3, #64	@ 0x40
 80207aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207ae:	e20e      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207b0:	2380      	movs	r3, #128	@ 0x80
 80207b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207b6:	e20a      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207b8:	697b      	ldr	r3, [r7, #20]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	4a69      	ldr	r2, [pc, #420]	@ (8020964 <UART_SetConfig+0x33c>)
 80207be:	4293      	cmp	r3, r2
 80207c0:	d130      	bne.n	8020824 <UART_SetConfig+0x1fc>
 80207c2:	4b67      	ldr	r3, [pc, #412]	@ (8020960 <UART_SetConfig+0x338>)
 80207c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207c6:	f003 0307 	and.w	r3, r3, #7
 80207ca:	2b05      	cmp	r3, #5
 80207cc:	d826      	bhi.n	802081c <UART_SetConfig+0x1f4>
 80207ce:	a201      	add	r2, pc, #4	@ (adr r2, 80207d4 <UART_SetConfig+0x1ac>)
 80207d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80207d4:	080207ed 	.word	0x080207ed
 80207d8:	080207f5 	.word	0x080207f5
 80207dc:	080207fd 	.word	0x080207fd
 80207e0:	08020805 	.word	0x08020805
 80207e4:	0802080d 	.word	0x0802080d
 80207e8:	08020815 	.word	0x08020815
 80207ec:	2300      	movs	r3, #0
 80207ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207f2:	e1ec      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207f4:	2304      	movs	r3, #4
 80207f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80207fa:	e1e8      	b.n	8020bce <UART_SetConfig+0x5a6>
 80207fc:	2308      	movs	r3, #8
 80207fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020802:	e1e4      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020804:	2310      	movs	r3, #16
 8020806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802080a:	e1e0      	b.n	8020bce <UART_SetConfig+0x5a6>
 802080c:	2320      	movs	r3, #32
 802080e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020812:	e1dc      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020814:	2340      	movs	r3, #64	@ 0x40
 8020816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802081a:	e1d8      	b.n	8020bce <UART_SetConfig+0x5a6>
 802081c:	2380      	movs	r3, #128	@ 0x80
 802081e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020822:	e1d4      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020824:	697b      	ldr	r3, [r7, #20]
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	4a4f      	ldr	r2, [pc, #316]	@ (8020968 <UART_SetConfig+0x340>)
 802082a:	4293      	cmp	r3, r2
 802082c:	d130      	bne.n	8020890 <UART_SetConfig+0x268>
 802082e:	4b4c      	ldr	r3, [pc, #304]	@ (8020960 <UART_SetConfig+0x338>)
 8020830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020832:	f003 0307 	and.w	r3, r3, #7
 8020836:	2b05      	cmp	r3, #5
 8020838:	d826      	bhi.n	8020888 <UART_SetConfig+0x260>
 802083a:	a201      	add	r2, pc, #4	@ (adr r2, 8020840 <UART_SetConfig+0x218>)
 802083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020840:	08020859 	.word	0x08020859
 8020844:	08020861 	.word	0x08020861
 8020848:	08020869 	.word	0x08020869
 802084c:	08020871 	.word	0x08020871
 8020850:	08020879 	.word	0x08020879
 8020854:	08020881 	.word	0x08020881
 8020858:	2300      	movs	r3, #0
 802085a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802085e:	e1b6      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020860:	2304      	movs	r3, #4
 8020862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020866:	e1b2      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020868:	2308      	movs	r3, #8
 802086a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802086e:	e1ae      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020870:	2310      	movs	r3, #16
 8020872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020876:	e1aa      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020878:	2320      	movs	r3, #32
 802087a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802087e:	e1a6      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020880:	2340      	movs	r3, #64	@ 0x40
 8020882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020886:	e1a2      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020888:	2380      	movs	r3, #128	@ 0x80
 802088a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802088e:	e19e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020890:	697b      	ldr	r3, [r7, #20]
 8020892:	681b      	ldr	r3, [r3, #0]
 8020894:	4a35      	ldr	r2, [pc, #212]	@ (802096c <UART_SetConfig+0x344>)
 8020896:	4293      	cmp	r3, r2
 8020898:	d130      	bne.n	80208fc <UART_SetConfig+0x2d4>
 802089a:	4b31      	ldr	r3, [pc, #196]	@ (8020960 <UART_SetConfig+0x338>)
 802089c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802089e:	f003 0307 	and.w	r3, r3, #7
 80208a2:	2b05      	cmp	r3, #5
 80208a4:	d826      	bhi.n	80208f4 <UART_SetConfig+0x2cc>
 80208a6:	a201      	add	r2, pc, #4	@ (adr r2, 80208ac <UART_SetConfig+0x284>)
 80208a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80208ac:	080208c5 	.word	0x080208c5
 80208b0:	080208cd 	.word	0x080208cd
 80208b4:	080208d5 	.word	0x080208d5
 80208b8:	080208dd 	.word	0x080208dd
 80208bc:	080208e5 	.word	0x080208e5
 80208c0:	080208ed 	.word	0x080208ed
 80208c4:	2300      	movs	r3, #0
 80208c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208ca:	e180      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208cc:	2304      	movs	r3, #4
 80208ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208d2:	e17c      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208d4:	2308      	movs	r3, #8
 80208d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208da:	e178      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208dc:	2310      	movs	r3, #16
 80208de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208e2:	e174      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208e4:	2320      	movs	r3, #32
 80208e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208ea:	e170      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208ec:	2340      	movs	r3, #64	@ 0x40
 80208ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208f2:	e16c      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208f4:	2380      	movs	r3, #128	@ 0x80
 80208f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80208fa:	e168      	b.n	8020bce <UART_SetConfig+0x5a6>
 80208fc:	697b      	ldr	r3, [r7, #20]
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	4a1b      	ldr	r2, [pc, #108]	@ (8020970 <UART_SetConfig+0x348>)
 8020902:	4293      	cmp	r3, r2
 8020904:	d142      	bne.n	802098c <UART_SetConfig+0x364>
 8020906:	4b16      	ldr	r3, [pc, #88]	@ (8020960 <UART_SetConfig+0x338>)
 8020908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802090a:	f003 0307 	and.w	r3, r3, #7
 802090e:	2b05      	cmp	r3, #5
 8020910:	d838      	bhi.n	8020984 <UART_SetConfig+0x35c>
 8020912:	a201      	add	r2, pc, #4	@ (adr r2, 8020918 <UART_SetConfig+0x2f0>)
 8020914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020918:	08020931 	.word	0x08020931
 802091c:	08020939 	.word	0x08020939
 8020920:	08020941 	.word	0x08020941
 8020924:	08020949 	.word	0x08020949
 8020928:	08020975 	.word	0x08020975
 802092c:	0802097d 	.word	0x0802097d
 8020930:	2300      	movs	r3, #0
 8020932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020936:	e14a      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020938:	2304      	movs	r3, #4
 802093a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802093e:	e146      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020940:	2308      	movs	r3, #8
 8020942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020946:	e142      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020948:	2310      	movs	r3, #16
 802094a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802094e:	e13e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020950:	cfff69f3 	.word	0xcfff69f3
 8020954:	58000c00 	.word	0x58000c00
 8020958:	11fff4ff 	.word	0x11fff4ff
 802095c:	40011000 	.word	0x40011000
 8020960:	58024400 	.word	0x58024400
 8020964:	40004400 	.word	0x40004400
 8020968:	40004800 	.word	0x40004800
 802096c:	40004c00 	.word	0x40004c00
 8020970:	40005000 	.word	0x40005000
 8020974:	2320      	movs	r3, #32
 8020976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802097a:	e128      	b.n	8020bce <UART_SetConfig+0x5a6>
 802097c:	2340      	movs	r3, #64	@ 0x40
 802097e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020982:	e124      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020984:	2380      	movs	r3, #128	@ 0x80
 8020986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802098a:	e120      	b.n	8020bce <UART_SetConfig+0x5a6>
 802098c:	697b      	ldr	r3, [r7, #20]
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	4acb      	ldr	r2, [pc, #812]	@ (8020cc0 <UART_SetConfig+0x698>)
 8020992:	4293      	cmp	r3, r2
 8020994:	d176      	bne.n	8020a84 <UART_SetConfig+0x45c>
 8020996:	4bcb      	ldr	r3, [pc, #812]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802099a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802099e:	2b28      	cmp	r3, #40	@ 0x28
 80209a0:	d86c      	bhi.n	8020a7c <UART_SetConfig+0x454>
 80209a2:	a201      	add	r2, pc, #4	@ (adr r2, 80209a8 <UART_SetConfig+0x380>)
 80209a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209a8:	08020a4d 	.word	0x08020a4d
 80209ac:	08020a7d 	.word	0x08020a7d
 80209b0:	08020a7d 	.word	0x08020a7d
 80209b4:	08020a7d 	.word	0x08020a7d
 80209b8:	08020a7d 	.word	0x08020a7d
 80209bc:	08020a7d 	.word	0x08020a7d
 80209c0:	08020a7d 	.word	0x08020a7d
 80209c4:	08020a7d 	.word	0x08020a7d
 80209c8:	08020a55 	.word	0x08020a55
 80209cc:	08020a7d 	.word	0x08020a7d
 80209d0:	08020a7d 	.word	0x08020a7d
 80209d4:	08020a7d 	.word	0x08020a7d
 80209d8:	08020a7d 	.word	0x08020a7d
 80209dc:	08020a7d 	.word	0x08020a7d
 80209e0:	08020a7d 	.word	0x08020a7d
 80209e4:	08020a7d 	.word	0x08020a7d
 80209e8:	08020a5d 	.word	0x08020a5d
 80209ec:	08020a7d 	.word	0x08020a7d
 80209f0:	08020a7d 	.word	0x08020a7d
 80209f4:	08020a7d 	.word	0x08020a7d
 80209f8:	08020a7d 	.word	0x08020a7d
 80209fc:	08020a7d 	.word	0x08020a7d
 8020a00:	08020a7d 	.word	0x08020a7d
 8020a04:	08020a7d 	.word	0x08020a7d
 8020a08:	08020a65 	.word	0x08020a65
 8020a0c:	08020a7d 	.word	0x08020a7d
 8020a10:	08020a7d 	.word	0x08020a7d
 8020a14:	08020a7d 	.word	0x08020a7d
 8020a18:	08020a7d 	.word	0x08020a7d
 8020a1c:	08020a7d 	.word	0x08020a7d
 8020a20:	08020a7d 	.word	0x08020a7d
 8020a24:	08020a7d 	.word	0x08020a7d
 8020a28:	08020a6d 	.word	0x08020a6d
 8020a2c:	08020a7d 	.word	0x08020a7d
 8020a30:	08020a7d 	.word	0x08020a7d
 8020a34:	08020a7d 	.word	0x08020a7d
 8020a38:	08020a7d 	.word	0x08020a7d
 8020a3c:	08020a7d 	.word	0x08020a7d
 8020a40:	08020a7d 	.word	0x08020a7d
 8020a44:	08020a7d 	.word	0x08020a7d
 8020a48:	08020a75 	.word	0x08020a75
 8020a4c:	2301      	movs	r3, #1
 8020a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a52:	e0bc      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a54:	2304      	movs	r3, #4
 8020a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a5a:	e0b8      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a5c:	2308      	movs	r3, #8
 8020a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a62:	e0b4      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a64:	2310      	movs	r3, #16
 8020a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a6a:	e0b0      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a6c:	2320      	movs	r3, #32
 8020a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a72:	e0ac      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a74:	2340      	movs	r3, #64	@ 0x40
 8020a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a7a:	e0a8      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a7c:	2380      	movs	r3, #128	@ 0x80
 8020a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020a82:	e0a4      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020a84:	697b      	ldr	r3, [r7, #20]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	4a8f      	ldr	r2, [pc, #572]	@ (8020cc8 <UART_SetConfig+0x6a0>)
 8020a8a:	4293      	cmp	r3, r2
 8020a8c:	d130      	bne.n	8020af0 <UART_SetConfig+0x4c8>
 8020a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020a92:	f003 0307 	and.w	r3, r3, #7
 8020a96:	2b05      	cmp	r3, #5
 8020a98:	d826      	bhi.n	8020ae8 <UART_SetConfig+0x4c0>
 8020a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8020aa0 <UART_SetConfig+0x478>)
 8020a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020aa0:	08020ab9 	.word	0x08020ab9
 8020aa4:	08020ac1 	.word	0x08020ac1
 8020aa8:	08020ac9 	.word	0x08020ac9
 8020aac:	08020ad1 	.word	0x08020ad1
 8020ab0:	08020ad9 	.word	0x08020ad9
 8020ab4:	08020ae1 	.word	0x08020ae1
 8020ab8:	2300      	movs	r3, #0
 8020aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020abe:	e086      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ac0:	2304      	movs	r3, #4
 8020ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ac6:	e082      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ac8:	2308      	movs	r3, #8
 8020aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ace:	e07e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ad0:	2310      	movs	r3, #16
 8020ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ad6:	e07a      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ad8:	2320      	movs	r3, #32
 8020ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ade:	e076      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ae0:	2340      	movs	r3, #64	@ 0x40
 8020ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ae6:	e072      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ae8:	2380      	movs	r3, #128	@ 0x80
 8020aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020aee:	e06e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020af0:	697b      	ldr	r3, [r7, #20]
 8020af2:	681b      	ldr	r3, [r3, #0]
 8020af4:	4a75      	ldr	r2, [pc, #468]	@ (8020ccc <UART_SetConfig+0x6a4>)
 8020af6:	4293      	cmp	r3, r2
 8020af8:	d130      	bne.n	8020b5c <UART_SetConfig+0x534>
 8020afa:	4b72      	ldr	r3, [pc, #456]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020afe:	f003 0307 	and.w	r3, r3, #7
 8020b02:	2b05      	cmp	r3, #5
 8020b04:	d826      	bhi.n	8020b54 <UART_SetConfig+0x52c>
 8020b06:	a201      	add	r2, pc, #4	@ (adr r2, 8020b0c <UART_SetConfig+0x4e4>)
 8020b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b0c:	08020b25 	.word	0x08020b25
 8020b10:	08020b2d 	.word	0x08020b2d
 8020b14:	08020b35 	.word	0x08020b35
 8020b18:	08020b3d 	.word	0x08020b3d
 8020b1c:	08020b45 	.word	0x08020b45
 8020b20:	08020b4d 	.word	0x08020b4d
 8020b24:	2300      	movs	r3, #0
 8020b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b2a:	e050      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b2c:	2304      	movs	r3, #4
 8020b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b32:	e04c      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b34:	2308      	movs	r3, #8
 8020b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b3a:	e048      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b3c:	2310      	movs	r3, #16
 8020b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b42:	e044      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b44:	2320      	movs	r3, #32
 8020b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b4a:	e040      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b4c:	2340      	movs	r3, #64	@ 0x40
 8020b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b52:	e03c      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b54:	2380      	movs	r3, #128	@ 0x80
 8020b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b5a:	e038      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b5c:	697b      	ldr	r3, [r7, #20]
 8020b5e:	681b      	ldr	r3, [r3, #0]
 8020b60:	4a5b      	ldr	r2, [pc, #364]	@ (8020cd0 <UART_SetConfig+0x6a8>)
 8020b62:	4293      	cmp	r3, r2
 8020b64:	d130      	bne.n	8020bc8 <UART_SetConfig+0x5a0>
 8020b66:	4b57      	ldr	r3, [pc, #348]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020b6a:	f003 0307 	and.w	r3, r3, #7
 8020b6e:	2b05      	cmp	r3, #5
 8020b70:	d826      	bhi.n	8020bc0 <UART_SetConfig+0x598>
 8020b72:	a201      	add	r2, pc, #4	@ (adr r2, 8020b78 <UART_SetConfig+0x550>)
 8020b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020b78:	08020b91 	.word	0x08020b91
 8020b7c:	08020b99 	.word	0x08020b99
 8020b80:	08020ba1 	.word	0x08020ba1
 8020b84:	08020ba9 	.word	0x08020ba9
 8020b88:	08020bb1 	.word	0x08020bb1
 8020b8c:	08020bb9 	.word	0x08020bb9
 8020b90:	2302      	movs	r3, #2
 8020b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b96:	e01a      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020b98:	2304      	movs	r3, #4
 8020b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020b9e:	e016      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ba0:	2308      	movs	r3, #8
 8020ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ba6:	e012      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020ba8:	2310      	movs	r3, #16
 8020baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bae:	e00e      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020bb0:	2320      	movs	r3, #32
 8020bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bb6:	e00a      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020bb8:	2340      	movs	r3, #64	@ 0x40
 8020bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bbe:	e006      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020bc0:	2380      	movs	r3, #128	@ 0x80
 8020bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020bc6:	e002      	b.n	8020bce <UART_SetConfig+0x5a6>
 8020bc8:	2380      	movs	r3, #128	@ 0x80
 8020bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8020cd0 <UART_SetConfig+0x6a8>)
 8020bd4:	4293      	cmp	r3, r2
 8020bd6:	f040 80f8 	bne.w	8020dca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020bda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020bde:	2b20      	cmp	r3, #32
 8020be0:	dc46      	bgt.n	8020c70 <UART_SetConfig+0x648>
 8020be2:	2b02      	cmp	r3, #2
 8020be4:	f2c0 8082 	blt.w	8020cec <UART_SetConfig+0x6c4>
 8020be8:	3b02      	subs	r3, #2
 8020bea:	2b1e      	cmp	r3, #30
 8020bec:	d87e      	bhi.n	8020cec <UART_SetConfig+0x6c4>
 8020bee:	a201      	add	r2, pc, #4	@ (adr r2, 8020bf4 <UART_SetConfig+0x5cc>)
 8020bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020bf4:	08020c77 	.word	0x08020c77
 8020bf8:	08020ced 	.word	0x08020ced
 8020bfc:	08020c7f 	.word	0x08020c7f
 8020c00:	08020ced 	.word	0x08020ced
 8020c04:	08020ced 	.word	0x08020ced
 8020c08:	08020ced 	.word	0x08020ced
 8020c0c:	08020c8f 	.word	0x08020c8f
 8020c10:	08020ced 	.word	0x08020ced
 8020c14:	08020ced 	.word	0x08020ced
 8020c18:	08020ced 	.word	0x08020ced
 8020c1c:	08020ced 	.word	0x08020ced
 8020c20:	08020ced 	.word	0x08020ced
 8020c24:	08020ced 	.word	0x08020ced
 8020c28:	08020ced 	.word	0x08020ced
 8020c2c:	08020c9f 	.word	0x08020c9f
 8020c30:	08020ced 	.word	0x08020ced
 8020c34:	08020ced 	.word	0x08020ced
 8020c38:	08020ced 	.word	0x08020ced
 8020c3c:	08020ced 	.word	0x08020ced
 8020c40:	08020ced 	.word	0x08020ced
 8020c44:	08020ced 	.word	0x08020ced
 8020c48:	08020ced 	.word	0x08020ced
 8020c4c:	08020ced 	.word	0x08020ced
 8020c50:	08020ced 	.word	0x08020ced
 8020c54:	08020ced 	.word	0x08020ced
 8020c58:	08020ced 	.word	0x08020ced
 8020c5c:	08020ced 	.word	0x08020ced
 8020c60:	08020ced 	.word	0x08020ced
 8020c64:	08020ced 	.word	0x08020ced
 8020c68:	08020ced 	.word	0x08020ced
 8020c6c:	08020cdf 	.word	0x08020cdf
 8020c70:	2b40      	cmp	r3, #64	@ 0x40
 8020c72:	d037      	beq.n	8020ce4 <UART_SetConfig+0x6bc>
 8020c74:	e03a      	b.n	8020cec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8020c76:	f7fd fc87 	bl	801e588 <HAL_RCCEx_GetD3PCLK1Freq>
 8020c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020c7c:	e03c      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020c82:	4618      	mov	r0, r3
 8020c84:	f7fd fc96 	bl	801e5b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020c8c:	e034      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020c8e:	f107 0318 	add.w	r3, r7, #24
 8020c92:	4618      	mov	r0, r3
 8020c94:	f7fd fde2 	bl	801e85c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020c98:	69fb      	ldr	r3, [r7, #28]
 8020c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020c9c:	e02c      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020c9e:	4b09      	ldr	r3, [pc, #36]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	f003 0320 	and.w	r3, r3, #32
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d016      	beq.n	8020cd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020caa:	4b06      	ldr	r3, [pc, #24]	@ (8020cc4 <UART_SetConfig+0x69c>)
 8020cac:	681b      	ldr	r3, [r3, #0]
 8020cae:	08db      	lsrs	r3, r3, #3
 8020cb0:	f003 0303 	and.w	r3, r3, #3
 8020cb4:	4a07      	ldr	r2, [pc, #28]	@ (8020cd4 <UART_SetConfig+0x6ac>)
 8020cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8020cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020cbc:	e01c      	b.n	8020cf8 <UART_SetConfig+0x6d0>
 8020cbe:	bf00      	nop
 8020cc0:	40011400 	.word	0x40011400
 8020cc4:	58024400 	.word	0x58024400
 8020cc8:	40007800 	.word	0x40007800
 8020ccc:	40007c00 	.word	0x40007c00
 8020cd0:	58000c00 	.word	0x58000c00
 8020cd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8020cd8:	4b9d      	ldr	r3, [pc, #628]	@ (8020f50 <UART_SetConfig+0x928>)
 8020cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020cdc:	e00c      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020cde:	4b9d      	ldr	r3, [pc, #628]	@ (8020f54 <UART_SetConfig+0x92c>)
 8020ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ce2:	e009      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020cea:	e005      	b.n	8020cf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8020cec:	2300      	movs	r3, #0
 8020cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020cf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8020cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	f000 81de 	beq.w	80210bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8020d00:	697b      	ldr	r3, [r7, #20]
 8020d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020d04:	4a94      	ldr	r2, [pc, #592]	@ (8020f58 <UART_SetConfig+0x930>)
 8020d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020d0a:	461a      	mov	r2, r3
 8020d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8020d12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020d14:	697b      	ldr	r3, [r7, #20]
 8020d16:	685a      	ldr	r2, [r3, #4]
 8020d18:	4613      	mov	r3, r2
 8020d1a:	005b      	lsls	r3, r3, #1
 8020d1c:	4413      	add	r3, r2
 8020d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020d20:	429a      	cmp	r2, r3
 8020d22:	d305      	bcc.n	8020d30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8020d24:	697b      	ldr	r3, [r7, #20]
 8020d26:	685b      	ldr	r3, [r3, #4]
 8020d28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020d2c:	429a      	cmp	r2, r3
 8020d2e:	d903      	bls.n	8020d38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020d30:	2301      	movs	r3, #1
 8020d32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020d36:	e1c1      	b.n	80210bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020d3a:	2200      	movs	r2, #0
 8020d3c:	60bb      	str	r3, [r7, #8]
 8020d3e:	60fa      	str	r2, [r7, #12]
 8020d40:	697b      	ldr	r3, [r7, #20]
 8020d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020d44:	4a84      	ldr	r2, [pc, #528]	@ (8020f58 <UART_SetConfig+0x930>)
 8020d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020d4a:	b29b      	uxth	r3, r3
 8020d4c:	2200      	movs	r2, #0
 8020d4e:	603b      	str	r3, [r7, #0]
 8020d50:	607a      	str	r2, [r7, #4]
 8020d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020d5a:	f7df fb29 	bl	80003b0 <__aeabi_uldivmod>
 8020d5e:	4602      	mov	r2, r0
 8020d60:	460b      	mov	r3, r1
 8020d62:	4610      	mov	r0, r2
 8020d64:	4619      	mov	r1, r3
 8020d66:	f04f 0200 	mov.w	r2, #0
 8020d6a:	f04f 0300 	mov.w	r3, #0
 8020d6e:	020b      	lsls	r3, r1, #8
 8020d70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8020d74:	0202      	lsls	r2, r0, #8
 8020d76:	6979      	ldr	r1, [r7, #20]
 8020d78:	6849      	ldr	r1, [r1, #4]
 8020d7a:	0849      	lsrs	r1, r1, #1
 8020d7c:	2000      	movs	r0, #0
 8020d7e:	460c      	mov	r4, r1
 8020d80:	4605      	mov	r5, r0
 8020d82:	eb12 0804 	adds.w	r8, r2, r4
 8020d86:	eb43 0905 	adc.w	r9, r3, r5
 8020d8a:	697b      	ldr	r3, [r7, #20]
 8020d8c:	685b      	ldr	r3, [r3, #4]
 8020d8e:	2200      	movs	r2, #0
 8020d90:	469a      	mov	sl, r3
 8020d92:	4693      	mov	fp, r2
 8020d94:	4652      	mov	r2, sl
 8020d96:	465b      	mov	r3, fp
 8020d98:	4640      	mov	r0, r8
 8020d9a:	4649      	mov	r1, r9
 8020d9c:	f7df fb08 	bl	80003b0 <__aeabi_uldivmod>
 8020da0:	4602      	mov	r2, r0
 8020da2:	460b      	mov	r3, r1
 8020da4:	4613      	mov	r3, r2
 8020da6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020daa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020dae:	d308      	bcc.n	8020dc2 <UART_SetConfig+0x79a>
 8020db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020db6:	d204      	bcs.n	8020dc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8020db8:	697b      	ldr	r3, [r7, #20]
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8020dbe:	60da      	str	r2, [r3, #12]
 8020dc0:	e17c      	b.n	80210bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020dc8:	e178      	b.n	80210bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020dca:	697b      	ldr	r3, [r7, #20]
 8020dcc:	69db      	ldr	r3, [r3, #28]
 8020dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020dd2:	f040 80c5 	bne.w	8020f60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8020dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020dda:	2b20      	cmp	r3, #32
 8020ddc:	dc48      	bgt.n	8020e70 <UART_SetConfig+0x848>
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	db7b      	blt.n	8020eda <UART_SetConfig+0x8b2>
 8020de2:	2b20      	cmp	r3, #32
 8020de4:	d879      	bhi.n	8020eda <UART_SetConfig+0x8b2>
 8020de6:	a201      	add	r2, pc, #4	@ (adr r2, 8020dec <UART_SetConfig+0x7c4>)
 8020de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020dec:	08020e77 	.word	0x08020e77
 8020df0:	08020e7f 	.word	0x08020e7f
 8020df4:	08020edb 	.word	0x08020edb
 8020df8:	08020edb 	.word	0x08020edb
 8020dfc:	08020e87 	.word	0x08020e87
 8020e00:	08020edb 	.word	0x08020edb
 8020e04:	08020edb 	.word	0x08020edb
 8020e08:	08020edb 	.word	0x08020edb
 8020e0c:	08020e97 	.word	0x08020e97
 8020e10:	08020edb 	.word	0x08020edb
 8020e14:	08020edb 	.word	0x08020edb
 8020e18:	08020edb 	.word	0x08020edb
 8020e1c:	08020edb 	.word	0x08020edb
 8020e20:	08020edb 	.word	0x08020edb
 8020e24:	08020edb 	.word	0x08020edb
 8020e28:	08020edb 	.word	0x08020edb
 8020e2c:	08020ea7 	.word	0x08020ea7
 8020e30:	08020edb 	.word	0x08020edb
 8020e34:	08020edb 	.word	0x08020edb
 8020e38:	08020edb 	.word	0x08020edb
 8020e3c:	08020edb 	.word	0x08020edb
 8020e40:	08020edb 	.word	0x08020edb
 8020e44:	08020edb 	.word	0x08020edb
 8020e48:	08020edb 	.word	0x08020edb
 8020e4c:	08020edb 	.word	0x08020edb
 8020e50:	08020edb 	.word	0x08020edb
 8020e54:	08020edb 	.word	0x08020edb
 8020e58:	08020edb 	.word	0x08020edb
 8020e5c:	08020edb 	.word	0x08020edb
 8020e60:	08020edb 	.word	0x08020edb
 8020e64:	08020edb 	.word	0x08020edb
 8020e68:	08020edb 	.word	0x08020edb
 8020e6c:	08020ecd 	.word	0x08020ecd
 8020e70:	2b40      	cmp	r3, #64	@ 0x40
 8020e72:	d02e      	beq.n	8020ed2 <UART_SetConfig+0x8aa>
 8020e74:	e031      	b.n	8020eda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020e76:	f7fc f951 	bl	801d11c <HAL_RCC_GetPCLK1Freq>
 8020e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020e7c:	e033      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020e7e:	f7fc f963 	bl	801d148 <HAL_RCC_GetPCLK2Freq>
 8020e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020e84:	e02f      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020e8a:	4618      	mov	r0, r3
 8020e8c:	f7fd fb92 	bl	801e5b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020e94:	e027      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8020e96:	f107 0318 	add.w	r3, r7, #24
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	f7fd fcde 	bl	801e85c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020ea0:	69fb      	ldr	r3, [r7, #28]
 8020ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ea4:	e01f      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8020ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8020f5c <UART_SetConfig+0x934>)
 8020ea8:	681b      	ldr	r3, [r3, #0]
 8020eaa:	f003 0320 	and.w	r3, r3, #32
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d009      	beq.n	8020ec6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8020f5c <UART_SetConfig+0x934>)
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	08db      	lsrs	r3, r3, #3
 8020eb8:	f003 0303 	and.w	r3, r3, #3
 8020ebc:	4a24      	ldr	r2, [pc, #144]	@ (8020f50 <UART_SetConfig+0x928>)
 8020ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8020ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020ec4:	e00f      	b.n	8020ee6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8020ec6:	4b22      	ldr	r3, [pc, #136]	@ (8020f50 <UART_SetConfig+0x928>)
 8020ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020eca:	e00c      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020ecc:	4b21      	ldr	r3, [pc, #132]	@ (8020f54 <UART_SetConfig+0x92c>)
 8020ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ed0:	e009      	b.n	8020ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020ed8:	e005      	b.n	8020ee6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8020eda:	2300      	movs	r3, #0
 8020edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020ede:	2301      	movs	r3, #1
 8020ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8020ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	f000 80e7 	beq.w	80210bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020eee:	697b      	ldr	r3, [r7, #20]
 8020ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020ef2:	4a19      	ldr	r2, [pc, #100]	@ (8020f58 <UART_SetConfig+0x930>)
 8020ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020ef8:	461a      	mov	r2, r3
 8020efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8020f00:	005a      	lsls	r2, r3, #1
 8020f02:	697b      	ldr	r3, [r7, #20]
 8020f04:	685b      	ldr	r3, [r3, #4]
 8020f06:	085b      	lsrs	r3, r3, #1
 8020f08:	441a      	add	r2, r3
 8020f0a:	697b      	ldr	r3, [r7, #20]
 8020f0c:	685b      	ldr	r3, [r3, #4]
 8020f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020f12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f16:	2b0f      	cmp	r3, #15
 8020f18:	d916      	bls.n	8020f48 <UART_SetConfig+0x920>
 8020f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020f20:	d212      	bcs.n	8020f48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8020f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f24:	b29b      	uxth	r3, r3
 8020f26:	f023 030f 	bic.w	r3, r3, #15
 8020f2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020f2e:	085b      	lsrs	r3, r3, #1
 8020f30:	b29b      	uxth	r3, r3
 8020f32:	f003 0307 	and.w	r3, r3, #7
 8020f36:	b29a      	uxth	r2, r3
 8020f38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020f3a:	4313      	orrs	r3, r2
 8020f3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020f3e:	697b      	ldr	r3, [r7, #20]
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8020f44:	60da      	str	r2, [r3, #12]
 8020f46:	e0b9      	b.n	80210bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020f48:	2301      	movs	r3, #1
 8020f4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020f4e:	e0b5      	b.n	80210bc <UART_SetConfig+0xa94>
 8020f50:	03d09000 	.word	0x03d09000
 8020f54:	003d0900 	.word	0x003d0900
 8020f58:	08027130 	.word	0x08027130
 8020f5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020f60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8020f64:	2b20      	cmp	r3, #32
 8020f66:	dc49      	bgt.n	8020ffc <UART_SetConfig+0x9d4>
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	db7c      	blt.n	8021066 <UART_SetConfig+0xa3e>
 8020f6c:	2b20      	cmp	r3, #32
 8020f6e:	d87a      	bhi.n	8021066 <UART_SetConfig+0xa3e>
 8020f70:	a201      	add	r2, pc, #4	@ (adr r2, 8020f78 <UART_SetConfig+0x950>)
 8020f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f76:	bf00      	nop
 8020f78:	08021003 	.word	0x08021003
 8020f7c:	0802100b 	.word	0x0802100b
 8020f80:	08021067 	.word	0x08021067
 8020f84:	08021067 	.word	0x08021067
 8020f88:	08021013 	.word	0x08021013
 8020f8c:	08021067 	.word	0x08021067
 8020f90:	08021067 	.word	0x08021067
 8020f94:	08021067 	.word	0x08021067
 8020f98:	08021023 	.word	0x08021023
 8020f9c:	08021067 	.word	0x08021067
 8020fa0:	08021067 	.word	0x08021067
 8020fa4:	08021067 	.word	0x08021067
 8020fa8:	08021067 	.word	0x08021067
 8020fac:	08021067 	.word	0x08021067
 8020fb0:	08021067 	.word	0x08021067
 8020fb4:	08021067 	.word	0x08021067
 8020fb8:	08021033 	.word	0x08021033
 8020fbc:	08021067 	.word	0x08021067
 8020fc0:	08021067 	.word	0x08021067
 8020fc4:	08021067 	.word	0x08021067
 8020fc8:	08021067 	.word	0x08021067
 8020fcc:	08021067 	.word	0x08021067
 8020fd0:	08021067 	.word	0x08021067
 8020fd4:	08021067 	.word	0x08021067
 8020fd8:	08021067 	.word	0x08021067
 8020fdc:	08021067 	.word	0x08021067
 8020fe0:	08021067 	.word	0x08021067
 8020fe4:	08021067 	.word	0x08021067
 8020fe8:	08021067 	.word	0x08021067
 8020fec:	08021067 	.word	0x08021067
 8020ff0:	08021067 	.word	0x08021067
 8020ff4:	08021067 	.word	0x08021067
 8020ff8:	08021059 	.word	0x08021059
 8020ffc:	2b40      	cmp	r3, #64	@ 0x40
 8020ffe:	d02e      	beq.n	802105e <UART_SetConfig+0xa36>
 8021000:	e031      	b.n	8021066 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021002:	f7fc f88b 	bl	801d11c <HAL_RCC_GetPCLK1Freq>
 8021006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021008:	e033      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802100a:	f7fc f89d 	bl	801d148 <HAL_RCC_GetPCLK2Freq>
 802100e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021010:	e02f      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021016:	4618      	mov	r0, r3
 8021018:	f7fd facc 	bl	801e5b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802101c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802101e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021020:	e027      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021022:	f107 0318 	add.w	r3, r7, #24
 8021026:	4618      	mov	r0, r3
 8021028:	f7fd fc18 	bl	801e85c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802102c:	69fb      	ldr	r3, [r7, #28]
 802102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021030:	e01f      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021032:	4b2d      	ldr	r3, [pc, #180]	@ (80210e8 <UART_SetConfig+0xac0>)
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	f003 0320 	and.w	r3, r3, #32
 802103a:	2b00      	cmp	r3, #0
 802103c:	d009      	beq.n	8021052 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802103e:	4b2a      	ldr	r3, [pc, #168]	@ (80210e8 <UART_SetConfig+0xac0>)
 8021040:	681b      	ldr	r3, [r3, #0]
 8021042:	08db      	lsrs	r3, r3, #3
 8021044:	f003 0303 	and.w	r3, r3, #3
 8021048:	4a28      	ldr	r2, [pc, #160]	@ (80210ec <UART_SetConfig+0xac4>)
 802104a:	fa22 f303 	lsr.w	r3, r2, r3
 802104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021050:	e00f      	b.n	8021072 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021052:	4b26      	ldr	r3, [pc, #152]	@ (80210ec <UART_SetConfig+0xac4>)
 8021054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021056:	e00c      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021058:	4b25      	ldr	r3, [pc, #148]	@ (80210f0 <UART_SetConfig+0xac8>)
 802105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802105c:	e009      	b.n	8021072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802105e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021064:	e005      	b.n	8021072 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021066:	2300      	movs	r3, #0
 8021068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802106a:	2301      	movs	r3, #1
 802106c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021070:	bf00      	nop
    }

    if (pclk != 0U)
 8021072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021074:	2b00      	cmp	r3, #0
 8021076:	d021      	beq.n	80210bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021078:	697b      	ldr	r3, [r7, #20]
 802107a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802107c:	4a1d      	ldr	r2, [pc, #116]	@ (80210f4 <UART_SetConfig+0xacc>)
 802107e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021082:	461a      	mov	r2, r3
 8021084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021086:	fbb3 f2f2 	udiv	r2, r3, r2
 802108a:	697b      	ldr	r3, [r7, #20]
 802108c:	685b      	ldr	r3, [r3, #4]
 802108e:	085b      	lsrs	r3, r3, #1
 8021090:	441a      	add	r2, r3
 8021092:	697b      	ldr	r3, [r7, #20]
 8021094:	685b      	ldr	r3, [r3, #4]
 8021096:	fbb2 f3f3 	udiv	r3, r2, r3
 802109a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802109c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802109e:	2b0f      	cmp	r3, #15
 80210a0:	d909      	bls.n	80210b6 <UART_SetConfig+0xa8e>
 80210a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80210a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80210a8:	d205      	bcs.n	80210b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80210aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80210ac:	b29a      	uxth	r2, r3
 80210ae:	697b      	ldr	r3, [r7, #20]
 80210b0:	681b      	ldr	r3, [r3, #0]
 80210b2:	60da      	str	r2, [r3, #12]
 80210b4:	e002      	b.n	80210bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80210b6:	2301      	movs	r3, #1
 80210b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80210bc:	697b      	ldr	r3, [r7, #20]
 80210be:	2201      	movs	r2, #1
 80210c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80210c4:	697b      	ldr	r3, [r7, #20]
 80210c6:	2201      	movs	r2, #1
 80210c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80210cc:	697b      	ldr	r3, [r7, #20]
 80210ce:	2200      	movs	r2, #0
 80210d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80210d2:	697b      	ldr	r3, [r7, #20]
 80210d4:	2200      	movs	r2, #0
 80210d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80210d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80210dc:	4618      	mov	r0, r3
 80210de:	3748      	adds	r7, #72	@ 0x48
 80210e0:	46bd      	mov	sp, r7
 80210e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80210e6:	bf00      	nop
 80210e8:	58024400 	.word	0x58024400
 80210ec:	03d09000 	.word	0x03d09000
 80210f0:	003d0900 	.word	0x003d0900
 80210f4:	08027130 	.word	0x08027130

080210f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80210f8:	b480      	push	{r7}
 80210fa:	b083      	sub	sp, #12
 80210fc:	af00      	add	r7, sp, #0
 80210fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021104:	f003 0308 	and.w	r3, r3, #8
 8021108:	2b00      	cmp	r3, #0
 802110a:	d00a      	beq.n	8021122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	685b      	ldr	r3, [r3, #4]
 8021112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	430a      	orrs	r2, r1
 8021120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021126:	f003 0301 	and.w	r3, r3, #1
 802112a:	2b00      	cmp	r3, #0
 802112c:	d00a      	beq.n	8021144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802112e:	687b      	ldr	r3, [r7, #4]
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	685b      	ldr	r3, [r3, #4]
 8021134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	430a      	orrs	r2, r1
 8021142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021148:	f003 0302 	and.w	r3, r3, #2
 802114c:	2b00      	cmp	r3, #0
 802114e:	d00a      	beq.n	8021166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	681b      	ldr	r3, [r3, #0]
 8021154:	685b      	ldr	r3, [r3, #4]
 8021156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 802115a:	687b      	ldr	r3, [r7, #4]
 802115c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	681b      	ldr	r3, [r3, #0]
 8021162:	430a      	orrs	r2, r1
 8021164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802116a:	f003 0304 	and.w	r3, r3, #4
 802116e:	2b00      	cmp	r3, #0
 8021170:	d00a      	beq.n	8021188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021172:	687b      	ldr	r3, [r7, #4]
 8021174:	681b      	ldr	r3, [r3, #0]
 8021176:	685b      	ldr	r3, [r3, #4]
 8021178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	430a      	orrs	r2, r1
 8021186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802118c:	f003 0310 	and.w	r3, r3, #16
 8021190:	2b00      	cmp	r3, #0
 8021192:	d00a      	beq.n	80211aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	689b      	ldr	r3, [r3, #8]
 802119a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	681b      	ldr	r3, [r3, #0]
 80211a6:	430a      	orrs	r2, r1
 80211a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80211ae:	f003 0320 	and.w	r3, r3, #32
 80211b2:	2b00      	cmp	r3, #0
 80211b4:	d00a      	beq.n	80211cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	689b      	ldr	r3, [r3, #8]
 80211bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	681b      	ldr	r3, [r3, #0]
 80211c8:	430a      	orrs	r2, r1
 80211ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80211cc:	687b      	ldr	r3, [r7, #4]
 80211ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80211d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d01a      	beq.n	802120e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80211d8:	687b      	ldr	r3, [r7, #4]
 80211da:	681b      	ldr	r3, [r3, #0]
 80211dc:	685b      	ldr	r3, [r3, #4]
 80211de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80211e6:	687b      	ldr	r3, [r7, #4]
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	430a      	orrs	r2, r1
 80211ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80211ee:	687b      	ldr	r3, [r7, #4]
 80211f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80211f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80211f6:	d10a      	bne.n	802120e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021202:	687b      	ldr	r3, [r7, #4]
 8021204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	430a      	orrs	r2, r1
 802120c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802120e:	687b      	ldr	r3, [r7, #4]
 8021210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021216:	2b00      	cmp	r3, #0
 8021218:	d00a      	beq.n	8021230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	685b      	ldr	r3, [r3, #4]
 8021220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	681b      	ldr	r3, [r3, #0]
 802122c:	430a      	orrs	r2, r1
 802122e:	605a      	str	r2, [r3, #4]
  }
}
 8021230:	bf00      	nop
 8021232:	370c      	adds	r7, #12
 8021234:	46bd      	mov	sp, r7
 8021236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802123a:	4770      	bx	lr

0802123c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802123c:	b580      	push	{r7, lr}
 802123e:	b098      	sub	sp, #96	@ 0x60
 8021240:	af02      	add	r7, sp, #8
 8021242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	2200      	movs	r2, #0
 8021248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802124c:	f7f8 fb94 	bl	8019978 <HAL_GetTick>
 8021250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8021252:	687b      	ldr	r3, [r7, #4]
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	f003 0308 	and.w	r3, r3, #8
 802125c:	2b08      	cmp	r3, #8
 802125e:	d12f      	bne.n	80212c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8021260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021264:	9300      	str	r3, [sp, #0]
 8021266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021268:	2200      	movs	r2, #0
 802126a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802126e:	6878      	ldr	r0, [r7, #4]
 8021270:	f000 f88e 	bl	8021390 <UART_WaitOnFlagUntilTimeout>
 8021274:	4603      	mov	r3, r0
 8021276:	2b00      	cmp	r3, #0
 8021278:	d022      	beq.n	80212c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	681b      	ldr	r3, [r3, #0]
 802127e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021282:	e853 3f00 	ldrex	r3, [r3]
 8021286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8021288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802128a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802128e:	653b      	str	r3, [r7, #80]	@ 0x50
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	461a      	mov	r2, r3
 8021296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021298:	647b      	str	r3, [r7, #68]	@ 0x44
 802129a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802129c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802129e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80212a0:	e841 2300 	strex	r3, r2, [r1]
 80212a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80212a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	d1e6      	bne.n	802127a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	2220      	movs	r2, #32
 80212b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	2200      	movs	r2, #0
 80212b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80212bc:	2303      	movs	r3, #3
 80212be:	e063      	b.n	8021388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	681b      	ldr	r3, [r3, #0]
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	f003 0304 	and.w	r3, r3, #4
 80212ca:	2b04      	cmp	r3, #4
 80212cc:	d149      	bne.n	8021362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80212ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80212d2:	9300      	str	r3, [sp, #0]
 80212d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80212d6:	2200      	movs	r2, #0
 80212d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80212dc:	6878      	ldr	r0, [r7, #4]
 80212de:	f000 f857 	bl	8021390 <UART_WaitOnFlagUntilTimeout>
 80212e2:	4603      	mov	r3, r0
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d03c      	beq.n	8021362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80212ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80212f0:	e853 3f00 	ldrex	r3, [r3]
 80212f4:	623b      	str	r3, [r7, #32]
   return(result);
 80212f6:	6a3b      	ldr	r3, [r7, #32]
 80212f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80212fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	461a      	mov	r2, r3
 8021304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021306:	633b      	str	r3, [r7, #48]	@ 0x30
 8021308:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802130a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802130c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802130e:	e841 2300 	strex	r3, r2, [r1]
 8021312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021316:	2b00      	cmp	r3, #0
 8021318:	d1e6      	bne.n	80212e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	3308      	adds	r3, #8
 8021320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021322:	693b      	ldr	r3, [r7, #16]
 8021324:	e853 3f00 	ldrex	r3, [r3]
 8021328:	60fb      	str	r3, [r7, #12]
   return(result);
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	f023 0301 	bic.w	r3, r3, #1
 8021330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	681b      	ldr	r3, [r3, #0]
 8021336:	3308      	adds	r3, #8
 8021338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802133a:	61fa      	str	r2, [r7, #28]
 802133c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802133e:	69b9      	ldr	r1, [r7, #24]
 8021340:	69fa      	ldr	r2, [r7, #28]
 8021342:	e841 2300 	strex	r3, r2, [r1]
 8021346:	617b      	str	r3, [r7, #20]
   return(result);
 8021348:	697b      	ldr	r3, [r7, #20]
 802134a:	2b00      	cmp	r3, #0
 802134c:	d1e5      	bne.n	802131a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	2220      	movs	r2, #32
 8021352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	2200      	movs	r2, #0
 802135a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802135e:	2303      	movs	r3, #3
 8021360:	e012      	b.n	8021388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	2220      	movs	r2, #32
 8021366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 802136a:	687b      	ldr	r3, [r7, #4]
 802136c:	2220      	movs	r2, #32
 802136e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	2200      	movs	r2, #0
 8021376:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	2200      	movs	r2, #0
 802137c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	2200      	movs	r2, #0
 8021382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021386:	2300      	movs	r3, #0
}
 8021388:	4618      	mov	r0, r3
 802138a:	3758      	adds	r7, #88	@ 0x58
 802138c:	46bd      	mov	sp, r7
 802138e:	bd80      	pop	{r7, pc}

08021390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8021390:	b580      	push	{r7, lr}
 8021392:	b084      	sub	sp, #16
 8021394:	af00      	add	r7, sp, #0
 8021396:	60f8      	str	r0, [r7, #12]
 8021398:	60b9      	str	r1, [r7, #8]
 802139a:	603b      	str	r3, [r7, #0]
 802139c:	4613      	mov	r3, r2
 802139e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80213a0:	e04f      	b.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80213a2:	69bb      	ldr	r3, [r7, #24]
 80213a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80213a8:	d04b      	beq.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80213aa:	f7f8 fae5 	bl	8019978 <HAL_GetTick>
 80213ae:	4602      	mov	r2, r0
 80213b0:	683b      	ldr	r3, [r7, #0]
 80213b2:	1ad3      	subs	r3, r2, r3
 80213b4:	69ba      	ldr	r2, [r7, #24]
 80213b6:	429a      	cmp	r2, r3
 80213b8:	d302      	bcc.n	80213c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80213ba:	69bb      	ldr	r3, [r7, #24]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	d101      	bne.n	80213c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80213c0:	2303      	movs	r3, #3
 80213c2:	e04e      	b.n	8021462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80213c4:	68fb      	ldr	r3, [r7, #12]
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	681b      	ldr	r3, [r3, #0]
 80213ca:	f003 0304 	and.w	r3, r3, #4
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d037      	beq.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80213d2:	68bb      	ldr	r3, [r7, #8]
 80213d4:	2b80      	cmp	r3, #128	@ 0x80
 80213d6:	d034      	beq.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80213d8:	68bb      	ldr	r3, [r7, #8]
 80213da:	2b40      	cmp	r3, #64	@ 0x40
 80213dc:	d031      	beq.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80213de:	68fb      	ldr	r3, [r7, #12]
 80213e0:	681b      	ldr	r3, [r3, #0]
 80213e2:	69db      	ldr	r3, [r3, #28]
 80213e4:	f003 0308 	and.w	r3, r3, #8
 80213e8:	2b08      	cmp	r3, #8
 80213ea:	d110      	bne.n	802140e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80213ec:	68fb      	ldr	r3, [r7, #12]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	2208      	movs	r2, #8
 80213f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80213f4:	68f8      	ldr	r0, [r7, #12]
 80213f6:	f000 f839 	bl	802146c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80213fa:	68fb      	ldr	r3, [r7, #12]
 80213fc:	2208      	movs	r2, #8
 80213fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021402:	68fb      	ldr	r3, [r7, #12]
 8021404:	2200      	movs	r2, #0
 8021406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802140a:	2301      	movs	r3, #1
 802140c:	e029      	b.n	8021462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802140e:	68fb      	ldr	r3, [r7, #12]
 8021410:	681b      	ldr	r3, [r3, #0]
 8021412:	69db      	ldr	r3, [r3, #28]
 8021414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802141c:	d111      	bne.n	8021442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802141e:	68fb      	ldr	r3, [r7, #12]
 8021420:	681b      	ldr	r3, [r3, #0]
 8021422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021428:	68f8      	ldr	r0, [r7, #12]
 802142a:	f000 f81f 	bl	802146c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802142e:	68fb      	ldr	r3, [r7, #12]
 8021430:	2220      	movs	r2, #32
 8021432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021436:	68fb      	ldr	r3, [r7, #12]
 8021438:	2200      	movs	r2, #0
 802143a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802143e:	2303      	movs	r3, #3
 8021440:	e00f      	b.n	8021462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021442:	68fb      	ldr	r3, [r7, #12]
 8021444:	681b      	ldr	r3, [r3, #0]
 8021446:	69da      	ldr	r2, [r3, #28]
 8021448:	68bb      	ldr	r3, [r7, #8]
 802144a:	4013      	ands	r3, r2
 802144c:	68ba      	ldr	r2, [r7, #8]
 802144e:	429a      	cmp	r2, r3
 8021450:	bf0c      	ite	eq
 8021452:	2301      	moveq	r3, #1
 8021454:	2300      	movne	r3, #0
 8021456:	b2db      	uxtb	r3, r3
 8021458:	461a      	mov	r2, r3
 802145a:	79fb      	ldrb	r3, [r7, #7]
 802145c:	429a      	cmp	r2, r3
 802145e:	d0a0      	beq.n	80213a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8021460:	2300      	movs	r3, #0
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
	...

0802146c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802146c:	b480      	push	{r7}
 802146e:	b095      	sub	sp, #84	@ 0x54
 8021470:	af00      	add	r7, sp, #0
 8021472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021474:	687b      	ldr	r3, [r7, #4]
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802147c:	e853 3f00 	ldrex	r3, [r3]
 8021480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8021482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8021484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8021488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	461a      	mov	r2, r3
 8021490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021492:	643b      	str	r3, [r7, #64]	@ 0x40
 8021494:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802149a:	e841 2300 	strex	r3, r2, [r1]
 802149e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80214a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80214a2:	2b00      	cmp	r3, #0
 80214a4:	d1e6      	bne.n	8021474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	681b      	ldr	r3, [r3, #0]
 80214aa:	3308      	adds	r3, #8
 80214ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214ae:	6a3b      	ldr	r3, [r7, #32]
 80214b0:	e853 3f00 	ldrex	r3, [r3]
 80214b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80214b6:	69fa      	ldr	r2, [r7, #28]
 80214b8:	4b1e      	ldr	r3, [pc, #120]	@ (8021534 <UART_EndRxTransfer+0xc8>)
 80214ba:	4013      	ands	r3, r2
 80214bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	3308      	adds	r3, #8
 80214c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80214c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80214c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80214ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80214cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80214ce:	e841 2300 	strex	r3, r2, [r1]
 80214d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80214d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d1e5      	bne.n	80214a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80214da:	687b      	ldr	r3, [r7, #4]
 80214dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80214de:	2b01      	cmp	r3, #1
 80214e0:	d118      	bne.n	8021514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80214e8:	68fb      	ldr	r3, [r7, #12]
 80214ea:	e853 3f00 	ldrex	r3, [r3]
 80214ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80214f0:	68bb      	ldr	r3, [r7, #8]
 80214f2:	f023 0310 	bic.w	r3, r3, #16
 80214f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	681b      	ldr	r3, [r3, #0]
 80214fc:	461a      	mov	r2, r3
 80214fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021500:	61bb      	str	r3, [r7, #24]
 8021502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021504:	6979      	ldr	r1, [r7, #20]
 8021506:	69ba      	ldr	r2, [r7, #24]
 8021508:	e841 2300 	strex	r3, r2, [r1]
 802150c:	613b      	str	r3, [r7, #16]
   return(result);
 802150e:	693b      	ldr	r3, [r7, #16]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d1e6      	bne.n	80214e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	2220      	movs	r2, #32
 8021518:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	2200      	movs	r2, #0
 8021520:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	2200      	movs	r2, #0
 8021526:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021528:	bf00      	nop
 802152a:	3754      	adds	r7, #84	@ 0x54
 802152c:	46bd      	mov	sp, r7
 802152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021532:	4770      	bx	lr
 8021534:	effffffe 	.word	0xeffffffe

08021538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021538:	b480      	push	{r7}
 802153a:	b085      	sub	sp, #20
 802153c:	af00      	add	r7, sp, #0
 802153e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021540:	687b      	ldr	r3, [r7, #4]
 8021542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021546:	2b01      	cmp	r3, #1
 8021548:	d101      	bne.n	802154e <HAL_UARTEx_DisableFifoMode+0x16>
 802154a:	2302      	movs	r3, #2
 802154c:	e027      	b.n	802159e <HAL_UARTEx_DisableFifoMode+0x66>
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	2201      	movs	r2, #1
 8021552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	2224      	movs	r2, #36	@ 0x24
 802155a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	681b      	ldr	r3, [r3, #0]
 8021562:	681b      	ldr	r3, [r3, #0]
 8021564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	681b      	ldr	r3, [r3, #0]
 802156a:	681a      	ldr	r2, [r3, #0]
 802156c:	687b      	ldr	r3, [r7, #4]
 802156e:	681b      	ldr	r3, [r3, #0]
 8021570:	f022 0201 	bic.w	r2, r2, #1
 8021574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021576:	68fb      	ldr	r3, [r7, #12]
 8021578:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 802157c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	2200      	movs	r2, #0
 8021582:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	68fa      	ldr	r2, [r7, #12]
 802158a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	2220      	movs	r2, #32
 8021590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021594:	687b      	ldr	r3, [r7, #4]
 8021596:	2200      	movs	r2, #0
 8021598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802159c:	2300      	movs	r3, #0
}
 802159e:	4618      	mov	r0, r3
 80215a0:	3714      	adds	r7, #20
 80215a2:	46bd      	mov	sp, r7
 80215a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215a8:	4770      	bx	lr

080215aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80215aa:	b580      	push	{r7, lr}
 80215ac:	b084      	sub	sp, #16
 80215ae:	af00      	add	r7, sp, #0
 80215b0:	6078      	str	r0, [r7, #4]
 80215b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80215ba:	2b01      	cmp	r3, #1
 80215bc:	d101      	bne.n	80215c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80215be:	2302      	movs	r3, #2
 80215c0:	e02d      	b.n	802161e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	2201      	movs	r2, #1
 80215c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	2224      	movs	r2, #36	@ 0x24
 80215ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	681b      	ldr	r3, [r3, #0]
 80215d6:	681b      	ldr	r3, [r3, #0]
 80215d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	681b      	ldr	r3, [r3, #0]
 80215de:	681a      	ldr	r2, [r3, #0]
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	f022 0201 	bic.w	r2, r2, #1
 80215e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	689b      	ldr	r3, [r3, #8]
 80215f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	683a      	ldr	r2, [r7, #0]
 80215fa:	430a      	orrs	r2, r1
 80215fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80215fe:	6878      	ldr	r0, [r7, #4]
 8021600:	f000 f850 	bl	80216a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	681b      	ldr	r3, [r3, #0]
 8021608:	68fa      	ldr	r2, [r7, #12]
 802160a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	2220      	movs	r2, #32
 8021610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	2200      	movs	r2, #0
 8021618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802161c:	2300      	movs	r3, #0
}
 802161e:	4618      	mov	r0, r3
 8021620:	3710      	adds	r7, #16
 8021622:	46bd      	mov	sp, r7
 8021624:	bd80      	pop	{r7, pc}

08021626 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021626:	b580      	push	{r7, lr}
 8021628:	b084      	sub	sp, #16
 802162a:	af00      	add	r7, sp, #0
 802162c:	6078      	str	r0, [r7, #4]
 802162e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021630:	687b      	ldr	r3, [r7, #4]
 8021632:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021636:	2b01      	cmp	r3, #1
 8021638:	d101      	bne.n	802163e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802163a:	2302      	movs	r3, #2
 802163c:	e02d      	b.n	802169a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	2201      	movs	r2, #1
 8021642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	2224      	movs	r2, #36	@ 0x24
 802164a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	681b      	ldr	r3, [r3, #0]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021656:	687b      	ldr	r3, [r7, #4]
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	681a      	ldr	r2, [r3, #0]
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	f022 0201 	bic.w	r2, r2, #1
 8021664:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	689b      	ldr	r3, [r3, #8]
 802166c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	681b      	ldr	r3, [r3, #0]
 8021674:	683a      	ldr	r2, [r7, #0]
 8021676:	430a      	orrs	r2, r1
 8021678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802167a:	6878      	ldr	r0, [r7, #4]
 802167c:	f000 f812 	bl	80216a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	68fa      	ldr	r2, [r7, #12]
 8021686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	2220      	movs	r2, #32
 802168c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	2200      	movs	r2, #0
 8021694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021698:	2300      	movs	r3, #0
}
 802169a:	4618      	mov	r0, r3
 802169c:	3710      	adds	r7, #16
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}
	...

080216a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80216a4:	b480      	push	{r7}
 80216a6:	b085      	sub	sp, #20
 80216a8:	af00      	add	r7, sp, #0
 80216aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d108      	bne.n	80216c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80216b4:	687b      	ldr	r3, [r7, #4]
 80216b6:	2201      	movs	r2, #1
 80216b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	2201      	movs	r2, #1
 80216c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80216c4:	e031      	b.n	802172a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80216c6:	2310      	movs	r3, #16
 80216c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80216ca:	2310      	movs	r3, #16
 80216cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	681b      	ldr	r3, [r3, #0]
 80216d2:	689b      	ldr	r3, [r3, #8]
 80216d4:	0e5b      	lsrs	r3, r3, #25
 80216d6:	b2db      	uxtb	r3, r3
 80216d8:	f003 0307 	and.w	r3, r3, #7
 80216dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	681b      	ldr	r3, [r3, #0]
 80216e2:	689b      	ldr	r3, [r3, #8]
 80216e4:	0f5b      	lsrs	r3, r3, #29
 80216e6:	b2db      	uxtb	r3, r3
 80216e8:	f003 0307 	and.w	r3, r3, #7
 80216ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80216ee:	7bbb      	ldrb	r3, [r7, #14]
 80216f0:	7b3a      	ldrb	r2, [r7, #12]
 80216f2:	4911      	ldr	r1, [pc, #68]	@ (8021738 <UARTEx_SetNbDataToProcess+0x94>)
 80216f4:	5c8a      	ldrb	r2, [r1, r2]
 80216f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80216fa:	7b3a      	ldrb	r2, [r7, #12]
 80216fc:	490f      	ldr	r1, [pc, #60]	@ (802173c <UARTEx_SetNbDataToProcess+0x98>)
 80216fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021700:	fb93 f3f2 	sdiv	r3, r3, r2
 8021704:	b29a      	uxth	r2, r3
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802170c:	7bfb      	ldrb	r3, [r7, #15]
 802170e:	7b7a      	ldrb	r2, [r7, #13]
 8021710:	4909      	ldr	r1, [pc, #36]	@ (8021738 <UARTEx_SetNbDataToProcess+0x94>)
 8021712:	5c8a      	ldrb	r2, [r1, r2]
 8021714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021718:	7b7a      	ldrb	r2, [r7, #13]
 802171a:	4908      	ldr	r1, [pc, #32]	@ (802173c <UARTEx_SetNbDataToProcess+0x98>)
 802171c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 802171e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021722:	b29a      	uxth	r2, r3
 8021724:	687b      	ldr	r3, [r7, #4]
 8021726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802172a:	bf00      	nop
 802172c:	3714      	adds	r7, #20
 802172e:	46bd      	mov	sp, r7
 8021730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021734:	4770      	bx	lr
 8021736:	bf00      	nop
 8021738:	08027148 	.word	0x08027148
 802173c:	08027150 	.word	0x08027150

08021740 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021740:	b580      	push	{r7, lr}
 8021742:	b082      	sub	sp, #8
 8021744:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021746:	4b15      	ldr	r3, [pc, #84]	@ (802179c <prvInitialiseLogging+0x5c>)
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	2b00      	cmp	r3, #0
 802174c:	d120      	bne.n	8021790 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802174e:	f7e3 f9df 	bl	8004b10 <xTaskGetSchedulerState>
 8021752:	4603      	mov	r3, r0
 8021754:	2b02      	cmp	r3, #2
 8021756:	d11b      	bne.n	8021790 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021758:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 802175c:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802175e:	6878      	ldr	r0, [r7, #4]
 8021760:	f7e4 fb38 	bl	8005dd4 <pvPortMalloc>
 8021764:	4603      	mov	r3, r0
 8021766:	4a0e      	ldr	r2, [pc, #56]	@ (80217a0 <prvInitialiseLogging+0x60>)
 8021768:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 802176a:	4b0d      	ldr	r3, [pc, #52]	@ (80217a0 <prvInitialiseLogging+0x60>)
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	2b00      	cmp	r3, #0
 8021770:	d00e      	beq.n	8021790 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8021772:	4b0b      	ldr	r3, [pc, #44]	@ (80217a0 <prvInitialiseLogging+0x60>)
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	687a      	ldr	r2, [r7, #4]
 8021778:	2100      	movs	r1, #0
 802177a:	4618      	mov	r0, r3
 802177c:	f000 fc35 	bl	8021fea <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021780:	4b07      	ldr	r3, [pc, #28]	@ (80217a0 <prvInitialiseLogging+0x60>)
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8021788:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 802178a:	4b04      	ldr	r3, [pc, #16]	@ (802179c <prvInitialiseLogging+0x5c>)
 802178c:	2201      	movs	r2, #1
 802178e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8021790:	4b02      	ldr	r3, [pc, #8]	@ (802179c <prvInitialiseLogging+0x5c>)
 8021792:	681b      	ldr	r3, [r3, #0]
}
 8021794:	4618      	mov	r0, r3
 8021796:	3708      	adds	r7, #8
 8021798:	46bd      	mov	sp, r7
 802179a:	bd80      	pop	{r7, pc}
 802179c:	200024a0 	.word	0x200024a0
 80217a0:	20002490 	.word	0x20002490

080217a4 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 80217a4:	b580      	push	{r7, lr}
 80217a6:	b086      	sub	sp, #24
 80217a8:	af02      	add	r7, sp, #8
 80217aa:	6078      	str	r0, [r7, #4]
 80217ac:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80217ae:	2300      	movs	r3, #0
 80217b0:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80217b2:	4b24      	ldr	r3, [pc, #144]	@ (8021844 <prvGetMessageFromStreamBuffer+0xa0>)
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d03f      	beq.n	802183a <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80217ba:	4b22      	ldr	r3, [pc, #136]	@ (8021844 <prvGetMessageFromStreamBuffer+0xa0>)
 80217bc:	681b      	ldr	r3, [r3, #0]
 80217be:	4618      	mov	r0, r3
 80217c0:	f7ee fe19 	bl	80103f6 <uxStreamBufferGetSize>
 80217c4:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80217c6:	68fb      	ldr	r3, [r7, #12]
 80217c8:	2b04      	cmp	r3, #4
 80217ca:	d936      	bls.n	802183a <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80217cc:	f7e2 fb82 	bl	8003ed4 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80217d0:	4b1c      	ldr	r3, [pc, #112]	@ (8021844 <prvGetMessageFromStreamBuffer+0xa0>)
 80217d2:	6818      	ldr	r0, [r3, #0]
 80217d4:	f107 0208 	add.w	r2, r7, #8
 80217d8:	2300      	movs	r3, #0
 80217da:	9300      	str	r3, [sp, #0]
 80217dc:	2304      	movs	r3, #4
 80217de:	2100      	movs	r1, #0
 80217e0:	f7ee ff27 	bl	8010632 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	683a      	ldr	r2, [r7, #0]
 80217e8:	429a      	cmp	r2, r3
 80217ea:	d216      	bcs.n	802181a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 80217ec:	4b15      	ldr	r3, [pc, #84]	@ (8021844 <prvGetMessageFromStreamBuffer+0xa0>)
 80217ee:	6818      	ldr	r0, [r3, #0]
 80217f0:	68bb      	ldr	r3, [r7, #8]
 80217f2:	2200      	movs	r2, #0
 80217f4:	9200      	str	r2, [sp, #0]
 80217f6:	4a14      	ldr	r2, [pc, #80]	@ (8021848 <prvGetMessageFromStreamBuffer+0xa4>)
 80217f8:	2100      	movs	r1, #0
 80217fa:	f7ee ff1a 	bl	8010632 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 80217fe:	683a      	ldr	r2, [r7, #0]
 8021800:	4911      	ldr	r1, [pc, #68]	@ (8021848 <prvGetMessageFromStreamBuffer+0xa4>)
 8021802:	6878      	ldr	r0, [r7, #4]
 8021804:	f000 fae4 	bl	8021dd0 <memcpy>
					xMessageLength = xBufferLength;
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 802180c:	683b      	ldr	r3, [r7, #0]
 802180e:	3b01      	subs	r3, #1
 8021810:	687a      	ldr	r2, [r7, #4]
 8021812:	4413      	add	r3, r2
 8021814:	2200      	movs	r2, #0
 8021816:	701a      	strb	r2, [r3, #0]
 8021818:	e00d      	b.n	8021836 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 802181a:	4b0a      	ldr	r3, [pc, #40]	@ (8021844 <prvGetMessageFromStreamBuffer+0xa0>)
 802181c:	6818      	ldr	r0, [r3, #0]
 802181e:	68bb      	ldr	r3, [r7, #8]
 8021820:	2200      	movs	r2, #0
 8021822:	9200      	str	r2, [sp, #0]
 8021824:	687a      	ldr	r2, [r7, #4]
 8021826:	2100      	movs	r1, #0
 8021828:	f7ee ff03 	bl	8010632 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 802182c:	68bb      	ldr	r3, [r7, #8]
 802182e:	687a      	ldr	r2, [r7, #4]
 8021830:	4413      	add	r3, r2
 8021832:	2200      	movs	r2, #0
 8021834:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021836:	f7e2 fb5b 	bl	8003ef0 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 802183a:	68bb      	ldr	r3, [r7, #8]
}
 802183c:	4618      	mov	r0, r3
 802183e:	3710      	adds	r7, #16
 8021840:	46bd      	mov	sp, r7
 8021842:	bd80      	pop	{r7, pc}
 8021844:	20002490 	.word	0x20002490
 8021848:	200023c8 	.word	0x200023c8

0802184c <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b08e      	sub	sp, #56	@ 0x38
 8021850:	af04      	add	r7, sp, #16
 8021852:	6078      	str	r0, [r7, #4]
 8021854:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8021856:	4b49      	ldr	r3, [pc, #292]	@ (802197c <prvBufferFormattedString+0x130>)
 8021858:	681b      	ldr	r3, [r3, #0]
 802185a:	2b00      	cmp	r3, #0
 802185c:	d104      	bne.n	8021868 <prvBufferFormattedString+0x1c>
 802185e:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8021862:	4847      	ldr	r0, [pc, #284]	@ (8021980 <prvBufferFormattedString+0x134>)
 8021864:	f7df ff70 	bl	8001748 <vAssertCalled>

	vTaskSuspendAll();
 8021868:	f7e2 fb34 	bl	8003ed4 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 802186c:	f000 fa2a 	bl	8021cc4 <ullGetHighResolutionTime>
 8021870:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8021874:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021878:	4a42      	ldr	r2, [pc, #264]	@ (8021984 <prvBufferFormattedString+0x138>)
 802187a:	f04f 0300 	mov.w	r3, #0
 802187e:	f7de fd97 	bl	80003b0 <__aeabi_uldivmod>
 8021882:	4602      	mov	r2, r0
 8021884:	460b      	mov	r3, r1
 8021886:	4613      	mov	r3, r2
 8021888:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802188a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802188e:	4a3d      	ldr	r2, [pc, #244]	@ (8021984 <prvBufferFormattedString+0x138>)
 8021890:	f04f 0300 	mov.w	r3, #0
 8021894:	f7de fd8c 	bl	80003b0 <__aeabi_uldivmod>
 8021898:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 802189c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80218a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80218a4:	f04f 0300 	mov.w	r3, #0
 80218a8:	f7de fd82 	bl	80003b0 <__aeabi_uldivmod>
 80218ac:	4602      	mov	r2, r0
 80218ae:	460b      	mov	r3, r1
 80218b0:	4613      	mov	r3, r2
 80218b2:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80218b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80218b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80218bc:	f04f 0300 	mov.w	r3, #0
 80218c0:	f7de fd76 	bl	80003b0 <__aeabi_uldivmod>
 80218c4:	4613      	mov	r3, r2
 80218c6:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80218c8:	2000      	movs	r0, #0
 80218ca:	f7e2 fc25 	bl	8004118 <pcTaskGetName>
 80218ce:	4603      	mov	r3, r0
 80218d0:	9302      	str	r3, [sp, #8]
 80218d2:	697b      	ldr	r3, [r7, #20]
 80218d4:	9301      	str	r3, [sp, #4]
 80218d6:	69bb      	ldr	r3, [r7, #24]
 80218d8:	9300      	str	r3, [sp, #0]
 80218da:	69fb      	ldr	r3, [r7, #28]
 80218dc:	4a2a      	ldr	r2, [pc, #168]	@ (8021988 <prvBufferFormattedString+0x13c>)
 80218de:	21c8      	movs	r1, #200	@ 0xc8
 80218e0:	482a      	ldr	r0, [pc, #168]	@ (802198c <prvBufferFormattedString+0x140>)
 80218e2:	f001 f885 	bl	80229f0 <snprintf>
 80218e6:	4603      	mov	r3, r0
 80218e8:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80218ea:	68fb      	ldr	r3, [r7, #12]
 80218ec:	4a27      	ldr	r2, [pc, #156]	@ (802198c <prvBufferFormattedString+0x140>)
 80218ee:	1898      	adds	r0, r3, r2
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80218f6:	683b      	ldr	r3, [r7, #0]
 80218f8:	687a      	ldr	r2, [r7, #4]
 80218fa:	f001 f85d 	bl	80229b8 <vsnprintf>
 80218fe:	4603      	mov	r3, r0
 8021900:	461a      	mov	r2, r3
 8021902:	68fb      	ldr	r3, [r7, #12]
 8021904:	4413      	add	r3, r2
 8021906:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8021908:	4b1c      	ldr	r3, [pc, #112]	@ (802197c <prvBufferFormattedString+0x130>)
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	4618      	mov	r0, r3
 802190e:	f7ee fd50 	bl	80103b2 <uxStreamBufferGetSpace>
 8021912:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	3304      	adds	r3, #4
 8021918:	693a      	ldr	r2, [r7, #16]
 802191a:	429a      	cmp	r2, r3
 802191c:	d90e      	bls.n	802193c <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 802191e:	4b17      	ldr	r3, [pc, #92]	@ (802197c <prvBufferFormattedString+0x130>)
 8021920:	6818      	ldr	r0, [r3, #0]
 8021922:	f107 020c 	add.w	r2, r7, #12
 8021926:	2304      	movs	r3, #4
 8021928:	2100      	movs	r1, #0
 802192a:	f7ee fe02 	bl	8010532 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 802192e:	4b13      	ldr	r3, [pc, #76]	@ (802197c <prvBufferFormattedString+0x130>)
 8021930:	6818      	ldr	r0, [r3, #0]
 8021932:	68fb      	ldr	r3, [r7, #12]
 8021934:	4a15      	ldr	r2, [pc, #84]	@ (802198c <prvBufferFormattedString+0x140>)
 8021936:	2100      	movs	r1, #0
 8021938:	f7ee fdfb 	bl	8010532 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 802193c:	f7e2 fad8 	bl	8003ef0 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8021940:	4b13      	ldr	r3, [pc, #76]	@ (8021990 <prvBufferFormattedString+0x144>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d10a      	bne.n	802195e <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	4619      	mov	r1, r3
 802194c:	480f      	ldr	r0, [pc, #60]	@ (802198c <prvBufferFormattedString+0x140>)
 802194e:	f000 f85b 	bl	8021a08 <vUDPLoggingHook>
		uxSkipCount++;
 8021952:	4b10      	ldr	r3, [pc, #64]	@ (8021994 <prvBufferFormattedString+0x148>)
 8021954:	681b      	ldr	r3, [r3, #0]
 8021956:	3301      	adds	r3, #1
 8021958:	4a0e      	ldr	r2, [pc, #56]	@ (8021994 <prvBufferFormattedString+0x148>)
 802195a:	6013      	str	r3, [r2, #0]
 802195c:	e008      	b.n	8021970 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802195e:	4b0c      	ldr	r3, [pc, #48]	@ (8021990 <prvBufferFormattedString+0x144>)
 8021960:	6818      	ldr	r0, [r3, #0]
 8021962:	2300      	movs	r3, #0
 8021964:	9300      	str	r3, [sp, #0]
 8021966:	2302      	movs	r3, #2
 8021968:	2200      	movs	r2, #0
 802196a:	2100      	movs	r1, #0
 802196c:	f7e3 fc16 	bl	800519c <xTaskGenericNotify>
	}

	return xLength;
 8021970:	68fb      	ldr	r3, [r7, #12]
}
 8021972:	4618      	mov	r0, r3
 8021974:	3728      	adds	r7, #40	@ 0x28
 8021976:	46bd      	mov	sp, r7
 8021978:	bd80      	pop	{r7, pc}
 802197a:	bf00      	nop
 802197c:	20002490 	.word	0x20002490
 8021980:	08026f3c 	.word	0x08026f3c
 8021984:	000f4240 	.word	0x000f4240
 8021988:	08026f64 	.word	0x08026f64
 802198c:	200023c8 	.word	0x200023c8
 8021990:	20002494 	.word	0x20002494
 8021994:	20002498 	.word	0x20002498

08021998 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8021998:	b40f      	push	{r0, r1, r2, r3}
 802199a:	b580      	push	{r7, lr}
 802199c:	b082      	sub	sp, #8
 802199e:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 80219a0:	f7ff fece 	bl	8021740 <prvInitialiseLogging>
 80219a4:	4603      	mov	r3, r0
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	d008      	beq.n	80219bc <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 80219aa:	f107 0314 	add.w	r3, r7, #20
 80219ae:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80219b0:	6839      	ldr	r1, [r7, #0]
 80219b2:	6938      	ldr	r0, [r7, #16]
 80219b4:	f7ff ff4a 	bl	802184c <prvBufferFormattedString>
 80219b8:	6078      	str	r0, [r7, #4]
 80219ba:	e001      	b.n	80219c0 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80219bc:	2300      	movs	r3, #0
 80219be:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80219c0:	687b      	ldr	r3, [r7, #4]
}
 80219c2:	4618      	mov	r0, r3
 80219c4:	3708      	adds	r7, #8
 80219c6:	46bd      	mov	sp, r7
 80219c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80219cc:	b004      	add	sp, #16
 80219ce:	4770      	bx	lr

080219d0 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80219d0:	b580      	push	{r7, lr}
 80219d2:	b082      	sub	sp, #8
 80219d4:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 80219d6:	4b08      	ldr	r3, [pc, #32]	@ (80219f8 <vUDPLoggingTaskCreate+0x28>)
 80219d8:	9301      	str	r3, [sp, #4]
 80219da:	2302      	movs	r3, #2
 80219dc:	9300      	str	r3, [sp, #0]
 80219de:	2300      	movs	r3, #0
 80219e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80219e4:	4905      	ldr	r1, [pc, #20]	@ (80219fc <vUDPLoggingTaskCreate+0x2c>)
 80219e6:	4806      	ldr	r0, [pc, #24]	@ (8021a00 <vUDPLoggingTaskCreate+0x30>)
 80219e8:	f7e2 f87c 	bl	8003ae4 <xTaskCreate>
 80219ec:	4603      	mov	r3, r0
 80219ee:	4a05      	ldr	r2, [pc, #20]	@ (8021a04 <vUDPLoggingTaskCreate+0x34>)
 80219f0:	6013      	str	r3, [r2, #0]
}
 80219f2:	bf00      	nop
 80219f4:	46bd      	mov	sp, r7
 80219f6:	bd80      	pop	{r7, pc}
 80219f8:	20002494 	.word	0x20002494
 80219fc:	08026f7c 	.word	0x08026f7c
 8021a00:	08021a21 	.word	0x08021a21
 8021a04:	2000249c 	.word	0x2000249c

08021a08 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b083      	sub	sp, #12
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	6078      	str	r0, [r7, #4]
 8021a10:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8021a12:	bf00      	nop
 8021a14:	370c      	adds	r7, #12
 8021a16:	46bd      	mov	sp, r7
 8021a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a1c:	4770      	bx	lr
	...

08021a20 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8021a20:	b580      	push	{r7, lr}
 8021a22:	b098      	sub	sp, #96	@ 0x60
 8021a24:	af02      	add	r7, sp, #8
 8021a26:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8021a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021a2c:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021a2e:	2000      	movs	r0, #0
 8021a30:	f7eb fa92 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8021a34:	6538      	str	r0, [r7, #80]	@ 0x50
 8021a36:	e01c      	b.n	8021a72 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8021a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a3a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021a3e:	f003 0310 	and.w	r3, r3, #16
 8021a42:	b2db      	uxtb	r3, r3
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d00f      	beq.n	8021a68 <prvLoggingTask+0x48>
 8021a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a4a:	2b00      	cmp	r3, #0
 8021a4c:	d009      	beq.n	8021a62 <prvLoggingTask+0x42>
 8021a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a50:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021a54:	f003 0304 	and.w	r3, r3, #4
 8021a58:	b2db      	uxtb	r3, r3
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	d101      	bne.n	8021a62 <prvLoggingTask+0x42>
 8021a5e:	2301      	movs	r3, #1
 8021a60:	e000      	b.n	8021a64 <prvLoggingTask+0x44>
 8021a62:	2300      	movs	r3, #0
 8021a64:	2b00      	cmp	r3, #0
 8021a66:	d108      	bne.n	8021a7a <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8021a68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021a6a:	2000      	movs	r0, #0
 8021a6c:	f7eb fa96 	bl	800cf9c <FreeRTOS_NextEndPoint>
 8021a70:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8021a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d1df      	bne.n	8021a38 <prvLoggingTask+0x18>
 8021a78:	e000      	b.n	8021a7c <prvLoggingTask+0x5c>
				{
					break;
 8021a7a:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8021a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	d000      	beq.n	8021a84 <prvLoggingTask+0x64>
			{
				break;
 8021a82:	e004      	b.n	8021a8e <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8021a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8021a88:	f7e2 f96c 	bl	8003d64 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021a8c:	e7cf      	b.n	8021a2e <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8021a8e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8021a90:	f7e2 f968 	bl	8003d64 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8021a94:	2211      	movs	r2, #17
 8021a96:	2102      	movs	r1, #2
 8021a98:	2002      	movs	r0, #2
 8021a9a:	f7eb ffd9 	bl	800da50 <FreeRTOS_socket>
 8021a9e:	4603      	mov	r3, r0
 8021aa0:	4a4c      	ldr	r2, [pc, #304]	@ (8021bd4 <prvLoggingTask+0x1b4>)
 8021aa2:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8021aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8021bd4 <prvLoggingTask+0x1b4>)
 8021aa6:	681b      	ldr	r3, [r3, #0]
 8021aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021aac:	d0ef      	beq.n	8021a8e <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 8021aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ab0:	2b00      	cmp	r3, #0
 8021ab2:	d104      	bne.n	8021abe <prvLoggingTask+0x9e>
 8021ab4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8021ab8:	4847      	ldr	r0, [pc, #284]	@ (8021bd8 <prvLoggingTask+0x1b8>)
 8021aba:	f7df fe45 	bl	8001748 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 8021abe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ac0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8021ac4:	2b00      	cmp	r3, #0
 8021ac6:	d104      	bne.n	8021ad2 <prvLoggingTask+0xb2>
 8021ac8:	f240 11df 	movw	r1, #479	@ 0x1df
 8021acc:	4842      	ldr	r0, [pc, #264]	@ (8021bd8 <prvLoggingTask+0x1b8>)
 8021ace:	f7df fe3b 	bl	8001748 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8021ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ad4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8021ad8:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8021ada:	f246 2309 	movw	r3, #25097	@ 0x6209
 8021ade:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8021ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8021ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8021bd4 <prvLoggingTask+0x1b4>)
 8021ae8:	681b      	ldr	r3, [r3, #0]
 8021aea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8021aee:	2218      	movs	r2, #24
 8021af0:	4618      	mov	r0, r3
 8021af2:	f7ec f99d 	bl	800de30 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8021af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8021af8:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8021afa:	4b36      	ldr	r3, [pc, #216]	@ (8021bd4 <prvLoggingTask+0x1b4>)
 8021afc:	6818      	ldr	r0, [r3, #0]
 8021afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021b02:	2204      	movs	r2, #4
 8021b04:	9200      	str	r2, [sp, #0]
 8021b06:	2201      	movs	r2, #1
 8021b08:	2100      	movs	r1, #0
 8021b0a:	f7ec ff5b 	bl	800e9c4 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021b10:	2101      	movs	r1, #1
 8021b12:	2000      	movs	r0, #0
 8021b14:	f7e3 fa36 	bl	8004f84 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8021b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021b1a:	691b      	ldr	r3, [r3, #16]
 8021b1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8021b1e:	4798      	blx	r3
 8021b20:	4603      	mov	r3, r0
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d0f3      	beq.n	8021b0e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021b26:	2300      	movs	r3, #0
 8021b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8021b2a:	e04c      	b.n	8021bc6 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8021b2c:	21c8      	movs	r1, #200	@ 0xc8
 8021b2e:	482b      	ldr	r0, [pc, #172]	@ (8021bdc <prvLoggingTask+0x1bc>)
 8021b30:	f7ff fe38 	bl	80217a4 <prvGetMessageFromStreamBuffer>
 8021b34:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8021b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	d048      	beq.n	8021bce <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021b3c:	2000      	movs	r0, #0
 8021b3e:	f7eb fa0b 	bl	800cf58 <FreeRTOS_FirstEndPoint>
 8021b42:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8021b44:	e02a      	b.n	8021b9c <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8021b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d022      	beq.n	8021b92 <prvLoggingTask+0x172>
 8021b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021b4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021b52:	f003 0304 	and.w	r3, r3, #4
 8021b56:	b2db      	uxtb	r3, r3
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d11a      	bne.n	8021b92 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8021b5c:	2318      	movs	r3, #24
 8021b5e:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8021b60:	2302      	movs	r3, #2
 8021b62:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8021b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021b66:	681a      	ldr	r2, [r3, #0]
 8021b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021b6a:	685b      	ldr	r3, [r3, #4]
 8021b6c:	43db      	mvns	r3, r3
 8021b6e:	4313      	orrs	r3, r2
 8021b70:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8021b72:	f246 3309 	movw	r3, #25353	@ 0x6309
 8021b76:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8021b78:	4b16      	ldr	r3, [pc, #88]	@ (8021bd4 <prvLoggingTask+0x1b4>)
 8021b7a:	6818      	ldr	r0, [r3, #0]
 8021b7c:	2318      	movs	r3, #24
 8021b7e:	9301      	str	r3, [sp, #4]
 8021b80:	f107 030c 	add.w	r3, r7, #12
 8021b84:	9300      	str	r3, [sp, #0]
 8021b86:	2300      	movs	r3, #0
 8021b88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8021b8a:	4914      	ldr	r1, [pc, #80]	@ (8021bdc <prvLoggingTask+0x1bc>)
 8021b8c:	f7ec f8e0 	bl	800dd50 <FreeRTOS_sendto>
							}
							break;
 8021b90:	e007      	b.n	8021ba2 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8021b92:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8021b94:	2000      	movs	r0, #0
 8021b96:	f7eb fa01 	bl	800cf9c <FreeRTOS_NextEndPoint>
 8021b9a:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8021b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021b9e:	2b00      	cmp	r3, #0
 8021ba0:	d1d1      	bne.n	8021b46 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8021ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8021be0 <prvLoggingTask+0x1c0>)
 8021ba4:	681b      	ldr	r3, [r3, #0]
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d005      	beq.n	8021bb6 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8021baa:	4b0d      	ldr	r3, [pc, #52]	@ (8021be0 <prvLoggingTask+0x1c0>)
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	3b01      	subs	r3, #1
 8021bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8021be0 <prvLoggingTask+0x1c0>)
 8021bb2:	6013      	str	r3, [r2, #0]
 8021bb4:	e004      	b.n	8021bc0 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8021bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8021bb8:	4619      	mov	r1, r3
 8021bba:	4808      	ldr	r0, [pc, #32]	@ (8021bdc <prvLoggingTask+0x1bc>)
 8021bbc:	f7ff ff24 	bl	8021a08 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8021bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021bc2:	3301      	adds	r3, #1
 8021bc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8021bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021bc8:	2b13      	cmp	r3, #19
 8021bca:	ddaf      	ble.n	8021b2c <prvLoggingTask+0x10c>
 8021bcc:	e79f      	b.n	8021b0e <prvLoggingTask+0xee>
					break;
 8021bce:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8021bd0:	e79d      	b.n	8021b0e <prvLoggingTask+0xee>
 8021bd2:	bf00      	nop
 8021bd4:	20000028 	.word	0x20000028
 8021bd8:	08026f3c 	.word	0x08026f3c
 8021bdc:	200024a4 	.word	0x200024a4
 8021be0:	20002498 	.word	0x20002498

08021be4 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8021be4:	b480      	push	{r7}
 8021be6:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8021be8:	4b0c      	ldr	r3, [pc, #48]	@ (8021c1c <TIM2_IRQHandler+0x38>)
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	691b      	ldr	r3, [r3, #16]
 8021bee:	4a0c      	ldr	r2, [pc, #48]	@ (8021c20 <TIM2_IRQHandler+0x3c>)
 8021bf0:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8021bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8021c20 <TIM2_IRQHandler+0x3c>)
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	f003 0301 	and.w	r3, r3, #1
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	d009      	beq.n	8021c12 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8021bfe:	4b07      	ldr	r3, [pc, #28]	@ (8021c1c <TIM2_IRQHandler+0x38>)
 8021c00:	681b      	ldr	r3, [r3, #0]
 8021c02:	f06f 0201 	mvn.w	r2, #1
 8021c06:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8021c08:	4b06      	ldr	r3, [pc, #24]	@ (8021c24 <TIM2_IRQHandler+0x40>)
 8021c0a:	681b      	ldr	r3, [r3, #0]
 8021c0c:	3301      	adds	r3, #1
 8021c0e:	4a05      	ldr	r2, [pc, #20]	@ (8021c24 <TIM2_IRQHandler+0x40>)
 8021c10:	6013      	str	r3, [r2, #0]
	}
}
 8021c12:	bf00      	nop
 8021c14:	46bd      	mov	sp, r7
 8021c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c1a:	4770      	bx	lr
 8021c1c:	200003cc 	.word	0x200003cc
 8021c20:	20002570 	.word	0x20002570
 8021c24:	2000256c 	.word	0x2000256c

08021c28 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8021c28:	b580      	push	{r7, lr}
 8021c2a:	b082      	sub	sp, #8
 8021c2c:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8021c2e:	4b20      	ldr	r3, [pc, #128]	@ (8021cb0 <vStartHighResolutionTimer+0x88>)
 8021c30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021c34:	4a1e      	ldr	r2, [pc, #120]	@ (8021cb0 <vStartHighResolutionTimer+0x88>)
 8021c36:	f043 0301 	orr.w	r3, r3, #1
 8021c3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8021c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8021cb0 <vStartHighResolutionTimer+0x88>)
 8021c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8021c44:	f003 0301 	and.w	r3, r3, #1
 8021c48:	607b      	str	r3, [r7, #4]
 8021c4a:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8021c4c:	4b19      	ldr	r3, [pc, #100]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8021c52:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8021c54:	23c8      	movs	r3, #200	@ 0xc8
 8021c56:	3b01      	subs	r3, #1
 8021c58:	4a16      	ldr	r2, [pc, #88]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c5a:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8021c5c:	4b15      	ldr	r3, [pc, #84]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c5e:	2200      	movs	r2, #0
 8021c60:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8021c62:	4b15      	ldr	r3, [pc, #84]	@ (8021cb8 <vStartHighResolutionTimer+0x90>)
 8021c64:	3b01      	subs	r3, #1
 8021c66:	4a13      	ldr	r2, [pc, #76]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c68:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8021c6a:	4b12      	ldr	r3, [pc, #72]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c6c:	2200      	movs	r2, #0
 8021c6e:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8021c70:	4b10      	ldr	r3, [pc, #64]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c72:	2200      	movs	r2, #0
 8021c74:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021c76:	4b0f      	ldr	r3, [pc, #60]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c78:	2201      	movs	r2, #1
 8021c7a:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	2105      	movs	r1, #5
 8021c80:	201c      	movs	r0, #28
 8021c82:	f7f7 ffa4 	bl	8019bce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8021c86:	201c      	movs	r0, #28
 8021c88:	f7f7 ffbb 	bl	8019c02 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8021c8c:	4809      	ldr	r0, [pc, #36]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c8e:	f7fd fc96 	bl	801f5be <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8021c92:	4808      	ldr	r0, [pc, #32]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c94:	f7fd fcea 	bl	801f66c <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8021c98:	4b06      	ldr	r3, [pc, #24]	@ (8021cb4 <vStartHighResolutionTimer+0x8c>)
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	691b      	ldr	r3, [r3, #16]
 8021c9e:	4a07      	ldr	r2, [pc, #28]	@ (8021cbc <vStartHighResolutionTimer+0x94>)
 8021ca0:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8021ca2:	4b07      	ldr	r3, [pc, #28]	@ (8021cc0 <vStartHighResolutionTimer+0x98>)
 8021ca4:	2200      	movs	r2, #0
 8021ca6:	601a      	str	r2, [r3, #0]
}
 8021ca8:	bf00      	nop
 8021caa:	3708      	adds	r7, #8
 8021cac:	46bd      	mov	sp, r7
 8021cae:	bd80      	pop	{r7, pc}
 8021cb0:	58024400 	.word	0x58024400
 8021cb4:	200003cc 	.word	0x200003cc
 8021cb8:	00989680 	.word	0x00989680
 8021cbc:	20002570 	.word	0x20002570
 8021cc0:	2000256c 	.word	0x2000256c

08021cc4 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8021cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8021cc8:	b08e      	sub	sp, #56	@ 0x38
 8021cca:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8021ccc:	493d      	ldr	r1, [pc, #244]	@ (8021dc4 <ullGetHighResolutionTime+0x100>)
 8021cce:	6809      	ldr	r1, [r1, #0]
 8021cd0:	2900      	cmp	r1, #0
 8021cd2:	d132      	bne.n	8021d3a <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8021cd4:	f7e2 fa10 	bl	80040f8 <xTaskGetTickCount>
 8021cd8:	4603      	mov	r3, r0
 8021cda:	2200      	movs	r2, #0
 8021cdc:	469a      	mov	sl, r3
 8021cde:	4693      	mov	fp, r2
 8021ce0:	4652      	mov	r2, sl
 8021ce2:	465b      	mov	r3, fp
 8021ce4:	f04f 0000 	mov.w	r0, #0
 8021ce8:	f04f 0100 	mov.w	r1, #0
 8021cec:	0159      	lsls	r1, r3, #5
 8021cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8021cf2:	0150      	lsls	r0, r2, #5
 8021cf4:	4602      	mov	r2, r0
 8021cf6:	460b      	mov	r3, r1
 8021cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8021cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8021d00:	f04f 0200 	mov.w	r2, #0
 8021d04:	f04f 0300 	mov.w	r3, #0
 8021d08:	00ab      	lsls	r3, r5, #2
 8021d0a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8021d0e:	00a2      	lsls	r2, r4, #2
 8021d10:	4614      	mov	r4, r2
 8021d12:	461d      	mov	r5, r3
 8021d14:	eb14 080a 	adds.w	r8, r4, sl
 8021d18:	eb45 090b 	adc.w	r9, r5, fp
 8021d1c:	f04f 0200 	mov.w	r2, #0
 8021d20:	f04f 0300 	mov.w	r3, #0
 8021d24:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021d28:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021d2c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021d30:	4690      	mov	r8, r2
 8021d32:	4699      	mov	r9, r3
 8021d34:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8021d38:	e03c      	b.n	8021db4 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021d3a:	4922      	ldr	r1, [pc, #136]	@ (8021dc4 <ullGetHighResolutionTime+0x100>)
 8021d3c:	6809      	ldr	r1, [r1, #0]
 8021d3e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021d40:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8021d42:	4921      	ldr	r1, [pc, #132]	@ (8021dc8 <ullGetHighResolutionTime+0x104>)
 8021d44:	6809      	ldr	r1, [r1, #0]
 8021d46:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8021d48:	491e      	ldr	r1, [pc, #120]	@ (8021dc4 <ullGetHighResolutionTime+0x100>)
 8021d4a:	6809      	ldr	r1, [r1, #0]
 8021d4c:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021d4e:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8021d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8021d54:	4288      	cmp	r0, r1
 8021d56:	d200      	bcs.n	8021d5a <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021d58:	e7ef      	b.n	8021d3a <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8021d5a:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8021d5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021d5e:	2000      	movs	r0, #0
 8021d60:	61b9      	str	r1, [r7, #24]
 8021d62:	61f8      	str	r0, [r7, #28]
 8021d64:	4819      	ldr	r0, [pc, #100]	@ (8021dcc <ullGetHighResolutionTime+0x108>)
 8021d66:	2100      	movs	r1, #0
 8021d68:	6138      	str	r0, [r7, #16]
 8021d6a:	6179      	str	r1, [r7, #20]
 8021d6c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8021d70:	4649      	mov	r1, r9
 8021d72:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8021d76:	4650      	mov	r0, sl
 8021d78:	fb00 f001 	mul.w	r0, r0, r1
 8021d7c:	4659      	mov	r1, fp
 8021d7e:	4644      	mov	r4, r8
 8021d80:	fb04 f101 	mul.w	r1, r4, r1
 8021d84:	4401      	add	r1, r0
 8021d86:	4640      	mov	r0, r8
 8021d88:	4654      	mov	r4, sl
 8021d8a:	fba0 2304 	umull	r2, r3, r0, r4
 8021d8e:	4419      	add	r1, r3
 8021d90:	460b      	mov	r3, r1
 8021d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021d94:	2000      	movs	r0, #0
 8021d96:	60b9      	str	r1, [r7, #8]
 8021d98:	60f8      	str	r0, [r7, #12]
 8021d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021d9e:	4621      	mov	r1, r4
 8021da0:	1851      	adds	r1, r2, r1
 8021da2:	6039      	str	r1, [r7, #0]
 8021da4:	4629      	mov	r1, r5
 8021da6:	eb43 0101 	adc.w	r1, r3, r1
 8021daa:	6079      	str	r1, [r7, #4]
 8021dac:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021db0:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8021db4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8021db8:	4610      	mov	r0, r2
 8021dba:	4619      	mov	r1, r3
 8021dbc:	3738      	adds	r7, #56	@ 0x38
 8021dbe:	46bd      	mov	sp, r7
 8021dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021dc4:	200003cc 	.word	0x200003cc
 8021dc8:	2000256c 	.word	0x2000256c
 8021dcc:	00989680 	.word	0x00989680

08021dd0 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8021dd0:	b480      	push	{r7}
 8021dd2:	b08d      	sub	sp, #52	@ 0x34
 8021dd4:	af00      	add	r7, sp, #0
 8021dd6:	60f8      	str	r0, [r7, #12]
 8021dd8:	60b9      	str	r1, [r7, #8]
 8021dda:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021ddc:	68fb      	ldr	r3, [r7, #12]
 8021dde:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8021de0:	68bb      	ldr	r3, [r7, #8]
 8021de2:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8021de4:	697a      	ldr	r2, [r7, #20]
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	4413      	add	r3, r2
 8021dea:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8021dec:	69ba      	ldr	r2, [r7, #24]
 8021dee:	697b      	ldr	r3, [r7, #20]
 8021df0:	4053      	eors	r3, r2
 8021df2:	f003 0303 	and.w	r3, r3, #3
 8021df6:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8021df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dfa:	f003 0301 	and.w	r3, r3, #1
 8021dfe:	2b00      	cmp	r3, #0
 8021e00:	f040 80a1 	bne.w	8021f46 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8021e04:	697b      	ldr	r3, [r7, #20]
 8021e06:	f003 0301 	and.w	r3, r3, #1
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d00b      	beq.n	8021e26 <memcpy+0x56>
 8021e0e:	697a      	ldr	r2, [r7, #20]
 8021e10:	693b      	ldr	r3, [r7, #16]
 8021e12:	429a      	cmp	r2, r3
 8021e14:	d207      	bcs.n	8021e26 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8021e16:	697a      	ldr	r2, [r7, #20]
 8021e18:	1c53      	adds	r3, r2, #1
 8021e1a:	617b      	str	r3, [r7, #20]
 8021e1c:	69bb      	ldr	r3, [r7, #24]
 8021e1e:	1c59      	adds	r1, r3, #1
 8021e20:	61b9      	str	r1, [r7, #24]
 8021e22:	7812      	ldrb	r2, [r2, #0]
 8021e24:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8021e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e28:	f003 0302 	and.w	r3, r3, #2
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d01f      	beq.n	8021e70 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8021e30:	693b      	ldr	r3, [r7, #16]
 8021e32:	f003 0301 	and.w	r3, r3, #1
 8021e36:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8021e38:	693b      	ldr	r3, [r7, #16]
 8021e3a:	f023 0301 	bic.w	r3, r3, #1
 8021e3e:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021e40:	e00a      	b.n	8021e58 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021e42:	697a      	ldr	r2, [r7, #20]
 8021e44:	1c93      	adds	r3, r2, #2
 8021e46:	617b      	str	r3, [r7, #20]
 8021e48:	69bb      	ldr	r3, [r7, #24]
 8021e4a:	1c99      	adds	r1, r3, #2
 8021e4c:	61b9      	str	r1, [r7, #24]
 8021e4e:	8812      	ldrh	r2, [r2, #0]
 8021e50:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	3b02      	subs	r3, #2
 8021e56:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021e58:	697a      	ldr	r2, [r7, #20]
 8021e5a:	693b      	ldr	r3, [r7, #16]
 8021e5c:	429a      	cmp	r2, r3
 8021e5e:	d202      	bcs.n	8021e66 <memcpy+0x96>
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d1ed      	bne.n	8021e42 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021e66:	693a      	ldr	r2, [r7, #16]
 8021e68:	69fb      	ldr	r3, [r7, #28]
 8021e6a:	4313      	orrs	r3, r2
 8021e6c:	613b      	str	r3, [r7, #16]
 8021e6e:	e0ae      	b.n	8021fce <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8021e70:	697b      	ldr	r3, [r7, #20]
 8021e72:	f003 0302 	and.w	r3, r3, #2
 8021e76:	2b00      	cmp	r3, #0
 8021e78:	d00c      	beq.n	8021e94 <memcpy+0xc4>
 8021e7a:	697a      	ldr	r2, [r7, #20]
 8021e7c:	693b      	ldr	r3, [r7, #16]
 8021e7e:	3b01      	subs	r3, #1
 8021e80:	429a      	cmp	r2, r3
 8021e82:	d207      	bcs.n	8021e94 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8021e84:	697a      	ldr	r2, [r7, #20]
 8021e86:	1c93      	adds	r3, r2, #2
 8021e88:	617b      	str	r3, [r7, #20]
 8021e8a:	69bb      	ldr	r3, [r7, #24]
 8021e8c:	1c99      	adds	r1, r3, #2
 8021e8e:	61b9      	str	r1, [r7, #24]
 8021e90:	8812      	ldrh	r2, [r2, #0]
 8021e92:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8021e94:	693b      	ldr	r3, [r7, #16]
 8021e96:	f003 0303 	and.w	r3, r3, #3
 8021e9a:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8021e9c:	693b      	ldr	r3, [r7, #16]
 8021e9e:	f023 0303 	bic.w	r3, r3, #3
 8021ea2:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8021ea4:	693a      	ldr	r2, [r7, #16]
 8021ea6:	697b      	ldr	r3, [r7, #20]
 8021ea8:	1ad3      	subs	r3, r2, r3
 8021eaa:	109b      	asrs	r3, r3, #2
 8021eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021eae:	e02f      	b.n	8021f10 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8021eb0:	697a      	ldr	r2, [r7, #20]
 8021eb2:	69bb      	ldr	r3, [r7, #24]
 8021eb4:	6812      	ldr	r2, [r2, #0]
 8021eb6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8021eb8:	697a      	ldr	r2, [r7, #20]
 8021eba:	69bb      	ldr	r3, [r7, #24]
 8021ebc:	3304      	adds	r3, #4
 8021ebe:	6852      	ldr	r2, [r2, #4]
 8021ec0:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8021ec2:	697a      	ldr	r2, [r7, #20]
 8021ec4:	69bb      	ldr	r3, [r7, #24]
 8021ec6:	3308      	adds	r3, #8
 8021ec8:	6892      	ldr	r2, [r2, #8]
 8021eca:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8021ecc:	697a      	ldr	r2, [r7, #20]
 8021ece:	69bb      	ldr	r3, [r7, #24]
 8021ed0:	330c      	adds	r3, #12
 8021ed2:	68d2      	ldr	r2, [r2, #12]
 8021ed4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8021ed6:	697a      	ldr	r2, [r7, #20]
 8021ed8:	69bb      	ldr	r3, [r7, #24]
 8021eda:	3310      	adds	r3, #16
 8021edc:	6912      	ldr	r2, [r2, #16]
 8021ede:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8021ee0:	697a      	ldr	r2, [r7, #20]
 8021ee2:	69bb      	ldr	r3, [r7, #24]
 8021ee4:	3314      	adds	r3, #20
 8021ee6:	6952      	ldr	r2, [r2, #20]
 8021ee8:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8021eea:	697a      	ldr	r2, [r7, #20]
 8021eec:	69bb      	ldr	r3, [r7, #24]
 8021eee:	3318      	adds	r3, #24
 8021ef0:	6992      	ldr	r2, [r2, #24]
 8021ef2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8021ef4:	697a      	ldr	r2, [r7, #20]
 8021ef6:	69bb      	ldr	r3, [r7, #24]
 8021ef8:	331c      	adds	r3, #28
 8021efa:	69d2      	ldr	r2, [r2, #28]
 8021efc:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8021efe:	69bb      	ldr	r3, [r7, #24]
 8021f00:	3320      	adds	r3, #32
 8021f02:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8021f04:	697b      	ldr	r3, [r7, #20]
 8021f06:	3320      	adds	r3, #32
 8021f08:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8021f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f0c:	3b08      	subs	r3, #8
 8021f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021f12:	2b08      	cmp	r3, #8
 8021f14:	dccc      	bgt.n	8021eb0 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021f16:	e00a      	b.n	8021f2e <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8021f18:	697a      	ldr	r2, [r7, #20]
 8021f1a:	1d13      	adds	r3, r2, #4
 8021f1c:	617b      	str	r3, [r7, #20]
 8021f1e:	69bb      	ldr	r3, [r7, #24]
 8021f20:	1d19      	adds	r1, r3, #4
 8021f22:	61b9      	str	r1, [r7, #24]
 8021f24:	6812      	ldr	r2, [r2, #0]
 8021f26:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8021f28:	687b      	ldr	r3, [r7, #4]
 8021f2a:	3b04      	subs	r3, #4
 8021f2c:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021f2e:	697a      	ldr	r2, [r7, #20]
 8021f30:	693b      	ldr	r3, [r7, #16]
 8021f32:	429a      	cmp	r2, r3
 8021f34:	d202      	bcs.n	8021f3c <memcpy+0x16c>
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d1ed      	bne.n	8021f18 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021f3c:	693a      	ldr	r2, [r7, #16]
 8021f3e:	6a3b      	ldr	r3, [r7, #32]
 8021f40:	4313      	orrs	r3, r2
 8021f42:	613b      	str	r3, [r7, #16]
 8021f44:	e043      	b.n	8021fce <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8021f46:	693a      	ldr	r2, [r7, #16]
 8021f48:	697b      	ldr	r3, [r7, #20]
 8021f4a:	1ad3      	subs	r3, r2, r3
 8021f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021f4e:	e02f      	b.n	8021fb0 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8021f50:	697a      	ldr	r2, [r7, #20]
 8021f52:	69bb      	ldr	r3, [r7, #24]
 8021f54:	7812      	ldrb	r2, [r2, #0]
 8021f56:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8021f58:	697a      	ldr	r2, [r7, #20]
 8021f5a:	69bb      	ldr	r3, [r7, #24]
 8021f5c:	3301      	adds	r3, #1
 8021f5e:	7852      	ldrb	r2, [r2, #1]
 8021f60:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8021f62:	697a      	ldr	r2, [r7, #20]
 8021f64:	69bb      	ldr	r3, [r7, #24]
 8021f66:	3302      	adds	r3, #2
 8021f68:	7892      	ldrb	r2, [r2, #2]
 8021f6a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8021f6c:	697a      	ldr	r2, [r7, #20]
 8021f6e:	69bb      	ldr	r3, [r7, #24]
 8021f70:	3303      	adds	r3, #3
 8021f72:	78d2      	ldrb	r2, [r2, #3]
 8021f74:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8021f76:	697a      	ldr	r2, [r7, #20]
 8021f78:	69bb      	ldr	r3, [r7, #24]
 8021f7a:	3304      	adds	r3, #4
 8021f7c:	7912      	ldrb	r2, [r2, #4]
 8021f7e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8021f80:	697a      	ldr	r2, [r7, #20]
 8021f82:	69bb      	ldr	r3, [r7, #24]
 8021f84:	3305      	adds	r3, #5
 8021f86:	7952      	ldrb	r2, [r2, #5]
 8021f88:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8021f8a:	697a      	ldr	r2, [r7, #20]
 8021f8c:	69bb      	ldr	r3, [r7, #24]
 8021f8e:	3306      	adds	r3, #6
 8021f90:	7992      	ldrb	r2, [r2, #6]
 8021f92:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8021f94:	697a      	ldr	r2, [r7, #20]
 8021f96:	69bb      	ldr	r3, [r7, #24]
 8021f98:	3307      	adds	r3, #7
 8021f9a:	79d2      	ldrb	r2, [r2, #7]
 8021f9c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8021f9e:	69bb      	ldr	r3, [r7, #24]
 8021fa0:	3308      	adds	r3, #8
 8021fa2:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8021fa4:	697b      	ldr	r3, [r7, #20]
 8021fa6:	3308      	adds	r3, #8
 8021fa8:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fac:	3b08      	subs	r3, #8
 8021fae:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021fb2:	2b08      	cmp	r3, #8
 8021fb4:	dccc      	bgt.n	8021f50 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021fb6:	e00a      	b.n	8021fce <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8021fb8:	697a      	ldr	r2, [r7, #20]
 8021fba:	1c53      	adds	r3, r2, #1
 8021fbc:	617b      	str	r3, [r7, #20]
 8021fbe:	69bb      	ldr	r3, [r7, #24]
 8021fc0:	1c59      	adds	r1, r3, #1
 8021fc2:	61b9      	str	r1, [r7, #24]
 8021fc4:	7812      	ldrb	r2, [r2, #0]
 8021fc6:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8021fc8:	687b      	ldr	r3, [r7, #4]
 8021fca:	3b01      	subs	r3, #1
 8021fcc:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8021fce:	697a      	ldr	r2, [r7, #20]
 8021fd0:	693b      	ldr	r3, [r7, #16]
 8021fd2:	429a      	cmp	r2, r3
 8021fd4:	d202      	bcs.n	8021fdc <memcpy+0x20c>
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d1ed      	bne.n	8021fb8 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8021fdc:	68fb      	ldr	r3, [r7, #12]
}
 8021fde:	4618      	mov	r0, r3
 8021fe0:	3734      	adds	r7, #52	@ 0x34
 8021fe2:	46bd      	mov	sp, r7
 8021fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe8:	4770      	bx	lr

08021fea <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8021fea:	b480      	push	{r7}
 8021fec:	b08b      	sub	sp, #44	@ 0x2c
 8021fee:	af00      	add	r7, sp, #0
 8021ff0:	60f8      	str	r0, [r7, #12]
 8021ff2:	60b9      	str	r1, [r7, #8]
 8021ff4:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8021ff6:	68fb      	ldr	r3, [r7, #12]
 8021ff8:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8021ffa:	697a      	ldr	r2, [r7, #20]
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	4413      	add	r3, r2
 8022000:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	2b07      	cmp	r3, #7
 8022006:	d97b      	bls.n	8022100 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022008:	68bb      	ldr	r3, [r7, #8]
 802200a:	b2db      	uxtb	r3, r3
 802200c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 802200e:	69fb      	ldr	r3, [r7, #28]
 8022010:	021a      	lsls	r2, r3, #8
 8022012:	69fb      	ldr	r3, [r7, #28]
 8022014:	041b      	lsls	r3, r3, #16
 8022016:	431a      	orrs	r2, r3
 8022018:	69fb      	ldr	r3, [r7, #28]
 802201a:	061b      	lsls	r3, r3, #24
 802201c:	4313      	orrs	r3, r2
 802201e:	69fa      	ldr	r2, [r7, #28]
 8022020:	4313      	orrs	r3, r2
 8022022:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022024:	697b      	ldr	r3, [r7, #20]
 8022026:	f003 0303 	and.w	r3, r3, #3
 802202a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 802202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802202e:	2b00      	cmp	r3, #0
 8022030:	d010      	beq.n	8022054 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022034:	f1c3 0304 	rsb	r3, r3, #4
 8022038:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 802203a:	e006      	b.n	802204a <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 802203c:	697b      	ldr	r3, [r7, #20]
 802203e:	68ba      	ldr	r2, [r7, #8]
 8022040:	b2d2      	uxtb	r2, r2
 8022042:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022044:	697b      	ldr	r3, [r7, #20]
 8022046:	3301      	adds	r3, #1
 8022048:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 802204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802204c:	1e5a      	subs	r2, r3, #1
 802204e:	627a      	str	r2, [r7, #36]	@ 0x24
 8022050:	2b00      	cmp	r3, #0
 8022052:	d1f3      	bne.n	802203c <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022054:	693b      	ldr	r3, [r7, #16]
 8022056:	f003 0303 	and.w	r3, r3, #3
 802205a:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 802205c:	693b      	ldr	r3, [r7, #16]
 802205e:	f023 0303 	bic.w	r3, r3, #3
 8022062:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022064:	693a      	ldr	r2, [r7, #16]
 8022066:	697b      	ldr	r3, [r7, #20]
 8022068:	1ad3      	subs	r3, r2, r3
 802206a:	109b      	asrs	r3, r3, #2
 802206c:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802206e:	e024      	b.n	80220ba <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022070:	697b      	ldr	r3, [r7, #20]
 8022072:	69fa      	ldr	r2, [r7, #28]
 8022074:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022076:	697b      	ldr	r3, [r7, #20]
 8022078:	3304      	adds	r3, #4
 802207a:	69fa      	ldr	r2, [r7, #28]
 802207c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 802207e:	697b      	ldr	r3, [r7, #20]
 8022080:	3308      	adds	r3, #8
 8022082:	69fa      	ldr	r2, [r7, #28]
 8022084:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022086:	697b      	ldr	r3, [r7, #20]
 8022088:	330c      	adds	r3, #12
 802208a:	69fa      	ldr	r2, [r7, #28]
 802208c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 802208e:	697b      	ldr	r3, [r7, #20]
 8022090:	3310      	adds	r3, #16
 8022092:	69fa      	ldr	r2, [r7, #28]
 8022094:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022096:	697b      	ldr	r3, [r7, #20]
 8022098:	3314      	adds	r3, #20
 802209a:	69fa      	ldr	r2, [r7, #28]
 802209c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 802209e:	697b      	ldr	r3, [r7, #20]
 80220a0:	3318      	adds	r3, #24
 80220a2:	69fa      	ldr	r2, [r7, #28]
 80220a4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 80220a6:	697b      	ldr	r3, [r7, #20]
 80220a8:	331c      	adds	r3, #28
 80220aa:	69fa      	ldr	r2, [r7, #28]
 80220ac:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 80220ae:	697b      	ldr	r3, [r7, #20]
 80220b0:	3320      	adds	r3, #32
 80220b2:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 80220b4:	6a3b      	ldr	r3, [r7, #32]
 80220b6:	3b08      	subs	r3, #8
 80220b8:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 80220ba:	6a3b      	ldr	r3, [r7, #32]
 80220bc:	2b08      	cmp	r3, #8
 80220be:	dcd7      	bgt.n	8022070 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 80220c0:	e008      	b.n	80220d4 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 80220c2:	697b      	ldr	r3, [r7, #20]
 80220c4:	69fa      	ldr	r2, [r7, #28]
 80220c6:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 80220c8:	697b      	ldr	r3, [r7, #20]
 80220ca:	3304      	adds	r3, #4
 80220cc:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 80220ce:	687b      	ldr	r3, [r7, #4]
 80220d0:	3304      	adds	r3, #4
 80220d2:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 80220d4:	697a      	ldr	r2, [r7, #20]
 80220d6:	693b      	ldr	r3, [r7, #16]
 80220d8:	429a      	cmp	r2, r3
 80220da:	d202      	bcs.n	80220e2 <memset+0xf8>
 80220dc:	687b      	ldr	r3, [r7, #4]
 80220de:	2b00      	cmp	r3, #0
 80220e0:	d1ef      	bne.n	80220c2 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 80220e2:	693a      	ldr	r2, [r7, #16]
 80220e4:	69bb      	ldr	r3, [r7, #24]
 80220e6:	4313      	orrs	r3, r2
 80220e8:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 80220ea:	e009      	b.n	8022100 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 80220ec:	697b      	ldr	r3, [r7, #20]
 80220ee:	68ba      	ldr	r2, [r7, #8]
 80220f0:	b2d2      	uxtb	r2, r2
 80220f2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 80220f4:	697b      	ldr	r3, [r7, #20]
 80220f6:	3301      	adds	r3, #1
 80220f8:	617b      	str	r3, [r7, #20]
			ulBytes++;
 80220fa:	687b      	ldr	r3, [r7, #4]
 80220fc:	3301      	adds	r3, #1
 80220fe:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022100:	697a      	ldr	r2, [r7, #20]
 8022102:	693b      	ldr	r3, [r7, #16]
 8022104:	429a      	cmp	r2, r3
 8022106:	d202      	bcs.n	802210e <memset+0x124>
 8022108:	687b      	ldr	r3, [r7, #4]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d1ee      	bne.n	80220ec <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802210e:	68fb      	ldr	r3, [r7, #12]
}
 8022110:	4618      	mov	r0, r3
 8022112:	372c      	adds	r7, #44	@ 0x2c
 8022114:	46bd      	mov	sp, r7
 8022116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802211a:	4770      	bx	lr

0802211c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802211c:	b480      	push	{r7}
 802211e:	b083      	sub	sp, #12
 8022120:	af00      	add	r7, sp, #0
 8022122:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022124:	2303      	movs	r3, #3
}
 8022126:	4618      	mov	r0, r3
 8022128:	370c      	adds	r7, #12
 802212a:	46bd      	mov	sp, r7
 802212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022130:	4770      	bx	lr

08022132 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022132:	b480      	push	{r7}
 8022134:	b083      	sub	sp, #12
 8022136:	af00      	add	r7, sp, #0
 8022138:	4603      	mov	r3, r0
 802213a:	6039      	str	r1, [r7, #0]
 802213c:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 802213e:	bf00      	nop
 8022140:	370c      	adds	r7, #12
 8022142:	46bd      	mov	sp, r7
 8022144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022148:	4770      	bx	lr

0802214a <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 802214a:	b580      	push	{r7, lr}
 802214c:	b084      	sub	sp, #16
 802214e:	af00      	add	r7, sp, #0
 8022150:	60f8      	str	r0, [r7, #12]
 8022152:	60b9      	str	r1, [r7, #8]
 8022154:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	68ba      	ldr	r2, [r7, #8]
 802215a:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 802215c:	68fb      	ldr	r3, [r7, #12]
 802215e:	68ba      	ldr	r2, [r7, #8]
 8022160:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022162:	687b      	ldr	r3, [r7, #4]
 8022164:	1e5a      	subs	r2, r3, #1
 8022166:	68fb      	ldr	r3, [r7, #12]
 8022168:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 802216a:	68fb      	ldr	r3, [r7, #12]
 802216c:	2200      	movs	r2, #0
 802216e:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022170:	68fb      	ldr	r3, [r7, #12]
 8022172:	3310      	adds	r3, #16
 8022174:	2210      	movs	r2, #16
 8022176:	2100      	movs	r1, #0
 8022178:	4618      	mov	r0, r3
 802217a:	f7ff ff36 	bl	8021fea <memset>
}
 802217e:	bf00      	nop
 8022180:	3710      	adds	r7, #16
 8022182:	46bd      	mov	sp, r7
 8022184:	bd80      	pop	{r7, pc}

08022186 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022186:	b580      	push	{r7, lr}
 8022188:	b082      	sub	sp, #8
 802218a:	af00      	add	r7, sp, #0
 802218c:	6078      	str	r0, [r7, #4]
 802218e:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	681b      	ldr	r3, [r3, #0]
 8022194:	2b00      	cmp	r3, #0
 8022196:	d10d      	bne.n	80221b4 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022198:	683b      	ldr	r3, [r7, #0]
 802219a:	b2db      	uxtb	r3, r3
 802219c:	2214      	movs	r2, #20
 802219e:	4611      	mov	r1, r2
 80221a0:	4618      	mov	r0, r3
 80221a2:	f7ff ffc6 	bl	8022132 <vOutputChar>
		apStr->curLen++;
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	68db      	ldr	r3, [r3, #12]
 80221aa:	1c5a      	adds	r2, r3, #1
 80221ac:	687b      	ldr	r3, [r7, #4]
 80221ae:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80221b0:	2301      	movs	r3, #1
 80221b2:	e022      	b.n	80221fa <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	681a      	ldr	r2, [r3, #0]
 80221b8:	687b      	ldr	r3, [r7, #4]
 80221ba:	689b      	ldr	r3, [r3, #8]
 80221bc:	429a      	cmp	r2, r3
 80221be:	d20e      	bcs.n	80221de <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	1c59      	adds	r1, r3, #1
 80221c6:	687a      	ldr	r2, [r7, #4]
 80221c8:	6011      	str	r1, [r2, #0]
 80221ca:	683a      	ldr	r2, [r7, #0]
 80221cc:	b2d2      	uxtb	r2, r2
 80221ce:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 80221d0:	687b      	ldr	r3, [r7, #4]
 80221d2:	68db      	ldr	r3, [r3, #12]
 80221d4:	1c5a      	adds	r2, r3, #1
 80221d6:	687b      	ldr	r3, [r7, #4]
 80221d8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80221da:	2301      	movs	r3, #1
 80221dc:	e00d      	b.n	80221fa <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	681a      	ldr	r2, [r3, #0]
 80221e2:	687b      	ldr	r3, [r7, #4]
 80221e4:	689b      	ldr	r3, [r3, #8]
 80221e6:	429a      	cmp	r2, r3
 80221e8:	d106      	bne.n	80221f8 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	681b      	ldr	r3, [r3, #0]
 80221ee:	1c59      	adds	r1, r3, #1
 80221f0:	687a      	ldr	r2, [r7, #4]
 80221f2:	6011      	str	r1, [r2, #0]
 80221f4:	2200      	movs	r2, #0
 80221f6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80221f8:	2300      	movs	r3, #0
}
 80221fa:	4618      	mov	r0, r3
 80221fc:	3708      	adds	r7, #8
 80221fe:	46bd      	mov	sp, r7
 8022200:	bd80      	pop	{r7, pc}

08022202 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022202:	b580      	push	{r7, lr}
 8022204:	b082      	sub	sp, #8
 8022206:	af00      	add	r7, sp, #0
 8022208:	6078      	str	r0, [r7, #4]
 802220a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802220c:	687b      	ldr	r3, [r7, #4]
 802220e:	681b      	ldr	r3, [r3, #0]
 8022210:	2b00      	cmp	r3, #0
 8022212:	d112      	bne.n	802223a <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022214:	683b      	ldr	r3, [r7, #0]
 8022216:	b2db      	uxtb	r3, r3
 8022218:	2214      	movs	r2, #20
 802221a:	4611      	mov	r1, r2
 802221c:	4618      	mov	r0, r3
 802221e:	f7ff ff88 	bl	8022132 <vOutputChar>
		if( c == 0 )
 8022222:	683b      	ldr	r3, [r7, #0]
 8022224:	2b00      	cmp	r3, #0
 8022226:	d101      	bne.n	802222c <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022228:	2300      	movs	r3, #0
 802222a:	e02e      	b.n	802228a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	68db      	ldr	r3, [r3, #12]
 8022230:	1c5a      	adds	r2, r3, #1
 8022232:	687b      	ldr	r3, [r7, #4]
 8022234:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022236:	2301      	movs	r3, #1
 8022238:	e027      	b.n	802228a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	681a      	ldr	r2, [r3, #0]
 802223e:	687b      	ldr	r3, [r7, #4]
 8022240:	689b      	ldr	r3, [r3, #8]
 8022242:	429a      	cmp	r2, r3
 8022244:	d213      	bcs.n	802226e <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	1c59      	adds	r1, r3, #1
 802224c:	687a      	ldr	r2, [r7, #4]
 802224e:	6011      	str	r1, [r2, #0]
 8022250:	683a      	ldr	r2, [r7, #0]
 8022252:	b2d2      	uxtb	r2, r2
 8022254:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8022256:	683b      	ldr	r3, [r7, #0]
 8022258:	2b00      	cmp	r3, #0
 802225a:	d101      	bne.n	8022260 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 802225c:	2300      	movs	r3, #0
 802225e:	e014      	b.n	802228a <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022260:	687b      	ldr	r3, [r7, #4]
 8022262:	68db      	ldr	r3, [r3, #12]
 8022264:	1c5a      	adds	r2, r3, #1
 8022266:	687b      	ldr	r3, [r7, #4]
 8022268:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802226a:	2301      	movs	r3, #1
 802226c:	e00d      	b.n	802228a <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	681a      	ldr	r2, [r3, #0]
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	689b      	ldr	r3, [r3, #8]
 8022276:	429a      	cmp	r2, r3
 8022278:	d106      	bne.n	8022288 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	1c59      	adds	r1, r3, #1
 8022280:	687a      	ldr	r2, [r7, #4]
 8022282:	6011      	str	r1, [r2, #0]
 8022284:	2200      	movs	r2, #0
 8022286:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022288:	2300      	movs	r3, #0
}
 802228a:	4618      	mov	r0, r3
 802228c:	3708      	adds	r7, #8
 802228e:	46bd      	mov	sp, r7
 8022290:	bd80      	pop	{r7, pc}
	...

08022294 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8022294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022296:	b085      	sub	sp, #20
 8022298:	af00      	add	r7, sp, #0
 802229a:	6078      	str	r0, [r7, #4]
 802229c:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 802229e:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 80222a0:	683b      	ldr	r3, [r7, #0]
 80222a2:	4618      	mov	r0, r3
 80222a4:	f7ff ff3a 	bl	802211c <xApplicationMemoryPermissions>
 80222a8:	4603      	mov	r3, r0
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d101      	bne.n	80222b2 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 80222ae:	4b4c      	ldr	r3, [pc, #304]	@ (80223e0 <prints+0x14c>)
 80222b0:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	695b      	ldr	r3, [r3, #20]
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	dd1b      	ble.n	80222f2 <prints+0x5e>
	{
		register int count = 0;
 80222ba:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80222bc:	683d      	ldr	r5, [r7, #0]
 80222be:	e001      	b.n	80222c4 <prints+0x30>
		{
			++count;
 80222c0:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80222c2:	3501      	adds	r5, #1
 80222c4:	782b      	ldrb	r3, [r5, #0]
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d1fa      	bne.n	80222c0 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80222ca:	687b      	ldr	r3, [r7, #4]
 80222cc:	695b      	ldr	r3, [r3, #20]
 80222ce:	429c      	cmp	r4, r3
 80222d0:	db03      	blt.n	80222da <prints+0x46>
		{
			apBuf->flags.width = 0;
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	2200      	movs	r2, #0
 80222d6:	615a      	str	r2, [r3, #20]
 80222d8:	e004      	b.n	80222e4 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 80222da:	687b      	ldr	r3, [r7, #4]
 80222dc:	695b      	ldr	r3, [r3, #20]
 80222de:	1b1a      	subs	r2, r3, r4
 80222e0:	687b      	ldr	r3, [r7, #4]
 80222e2:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	7f1b      	ldrb	r3, [r3, #28]
 80222e8:	f003 0302 	and.w	r3, r3, #2
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d000      	beq.n	80222f2 <prints+0x5e>
		{
			padchar = '0';
 80222f0:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 80222f2:	687b      	ldr	r3, [r7, #4]
 80222f4:	7f1b      	ldrb	r3, [r3, #28]
 80222f6:	f003 0301 	and.w	r3, r3, #1
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d112      	bne.n	8022324 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80222fe:	e00d      	b.n	802231c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022300:	4631      	mov	r1, r6
 8022302:	6878      	ldr	r0, [r7, #4]
 8022304:	f7ff ff3f 	bl	8022186 <strbuf_printchar>
 8022308:	4603      	mov	r3, r0
 802230a:	2b00      	cmp	r3, #0
 802230c:	d101      	bne.n	8022312 <prints+0x7e>
			{
				return pdFALSE;
 802230e:	2300      	movs	r3, #0
 8022310:	e062      	b.n	80223d8 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	695b      	ldr	r3, [r3, #20]
 8022316:	1e5a      	subs	r2, r3, #1
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	615a      	str	r2, [r3, #20]
 802231c:	687b      	ldr	r3, [r7, #4]
 802231e:	695b      	ldr	r3, [r3, #20]
 8022320:	2b00      	cmp	r3, #0
 8022322:	dced      	bgt.n	8022300 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	7f9b      	ldrb	r3, [r3, #30]
 8022328:	f003 0302 	and.w	r3, r3, #2
 802232c:	b2db      	uxtb	r3, r3
 802232e:	2b00      	cmp	r3, #0
 8022330:	d036      	beq.n	80223a0 <prints+0x10c>
 8022332:	687b      	ldr	r3, [r7, #4]
 8022334:	7f1b      	ldrb	r3, [r3, #28]
 8022336:	2b01      	cmp	r3, #1
 8022338:	d132      	bne.n	80223a0 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 802233a:	6838      	ldr	r0, [r7, #0]
 802233c:	f7dd ffda 	bl	80002f4 <strlen>
 8022340:	4603      	mov	r3, r0
 8022342:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	699b      	ldr	r3, [r3, #24]
 8022348:	68ba      	ldr	r2, [r7, #8]
 802234a:	429a      	cmp	r2, r3
 802234c:	da28      	bge.n	80223a0 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802234e:	687b      	ldr	r3, [r7, #4]
 8022350:	699a      	ldr	r2, [r3, #24]
 8022352:	68bb      	ldr	r3, [r7, #8]
 8022354:	1ad3      	subs	r3, r2, r3
 8022356:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8022358:	e00b      	b.n	8022372 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 802235a:	2130      	movs	r1, #48	@ 0x30
 802235c:	6878      	ldr	r0, [r7, #4]
 802235e:	f7ff ff12 	bl	8022186 <strbuf_printchar>
 8022362:	4603      	mov	r3, r0
 8022364:	2b00      	cmp	r3, #0
 8022366:	d101      	bne.n	802236c <prints+0xd8>
				{
					return pdFALSE;
 8022368:	2300      	movs	r3, #0
 802236a:	e035      	b.n	80223d8 <prints+0x144>
			for( ; i; i-- )
 802236c:	68fb      	ldr	r3, [r7, #12]
 802236e:	3b01      	subs	r3, #1
 8022370:	60fb      	str	r3, [r7, #12]
 8022372:	68fb      	ldr	r3, [r7, #12]
 8022374:	2b00      	cmp	r3, #0
 8022376:	d1f0      	bne.n	802235a <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022378:	e012      	b.n	80223a0 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 802237a:	683b      	ldr	r3, [r7, #0]
 802237c:	781b      	ldrb	r3, [r3, #0]
 802237e:	4619      	mov	r1, r3
 8022380:	6878      	ldr	r0, [r7, #4]
 8022382:	f7ff ff00 	bl	8022186 <strbuf_printchar>
 8022386:	4603      	mov	r3, r0
 8022388:	2b00      	cmp	r3, #0
 802238a:	d101      	bne.n	8022390 <prints+0xfc>
		{
			return pdFALSE;
 802238c:	2300      	movs	r3, #0
 802238e:	e023      	b.n	80223d8 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8022390:	683b      	ldr	r3, [r7, #0]
 8022392:	3301      	adds	r3, #1
 8022394:	603b      	str	r3, [r7, #0]
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	699b      	ldr	r3, [r3, #24]
 802239a:	1e5a      	subs	r2, r3, #1
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	619a      	str	r2, [r3, #24]
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	699b      	ldr	r3, [r3, #24]
 80223a4:	2b00      	cmp	r3, #0
 80223a6:	d012      	beq.n	80223ce <prints+0x13a>
 80223a8:	683b      	ldr	r3, [r7, #0]
 80223aa:	781b      	ldrb	r3, [r3, #0]
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d1e4      	bne.n	802237a <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80223b0:	e00d      	b.n	80223ce <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 80223b2:	4631      	mov	r1, r6
 80223b4:	6878      	ldr	r0, [r7, #4]
 80223b6:	f7ff fee6 	bl	8022186 <strbuf_printchar>
 80223ba:	4603      	mov	r3, r0
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d101      	bne.n	80223c4 <prints+0x130>
		{
			return pdFALSE;
 80223c0:	2300      	movs	r3, #0
 80223c2:	e009      	b.n	80223d8 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80223c4:	687b      	ldr	r3, [r7, #4]
 80223c6:	695b      	ldr	r3, [r3, #20]
 80223c8:	1e5a      	subs	r2, r3, #1
 80223ca:	687b      	ldr	r3, [r7, #4]
 80223cc:	615a      	str	r2, [r3, #20]
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	695b      	ldr	r3, [r3, #20]
 80223d2:	2b00      	cmp	r3, #0
 80223d4:	dced      	bgt.n	80223b2 <prints+0x11e>
		}
	}

	return pdTRUE;
 80223d6:	2301      	movs	r3, #1
}
 80223d8:	4618      	mov	r0, r3
 80223da:	3714      	adds	r7, #20
 80223dc:	46bd      	mov	sp, r7
 80223de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223e0:	08026f84 	.word	0x08026f84

080223e4 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 80223e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80223e8:	b087      	sub	sp, #28
 80223ea:	af00      	add	r7, sp, #0
 80223ec:	6078      	str	r0, [r7, #4]
 80223ee:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 80223f0:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 80223f4:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	691b      	ldr	r3, [r3, #16]
 80223fa:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80223fc:	687a      	ldr	r2, [r7, #4]
 80223fe:	7f93      	ldrb	r3, [r2, #30]
 8022400:	f043 0302 	orr.w	r3, r3, #2
 8022404:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022406:	683b      	ldr	r3, [r7, #0]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d10b      	bne.n	8022424 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802240c:	2330      	movs	r3, #48	@ 0x30
 802240e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022410:	2300      	movs	r3, #0
 8022412:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022414:	f107 030c 	add.w	r3, r7, #12
 8022418:	4619      	mov	r1, r3
 802241a:	6878      	ldr	r0, [r7, #4]
 802241c:	f7ff ff3a 	bl	8022294 <prints>
 8022420:	4603      	mov	r3, r0
 8022422:	e067      	b.n	80224f4 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	7f9b      	ldrb	r3, [r3, #30]
 8022428:	f003 0301 	and.w	r3, r3, #1
 802242c:	b2db      	uxtb	r3, r3
 802242e:	2b00      	cmp	r3, #0
 8022430:	d009      	beq.n	8022446 <printi+0x62>
 8022432:	2e0a      	cmp	r6, #10
 8022434:	d107      	bne.n	8022446 <printi+0x62>
 8022436:	683b      	ldr	r3, [r7, #0]
 8022438:	2b00      	cmp	r3, #0
 802243a:	da04      	bge.n	8022446 <printi+0x62>
	{
		neg = 1;
 802243c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8022440:	683b      	ldr	r3, [r7, #0]
 8022442:	425b      	negs	r3, r3
 8022444:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8022446:	f107 040c 	add.w	r4, r7, #12
 802244a:	340b      	adds	r4, #11

	*s = '\0';
 802244c:	2300      	movs	r3, #0
 802244e:	7023      	strb	r3, [r4, #0]
	switch( base )
 8022450:	2e10      	cmp	r6, #16
 8022452:	d017      	beq.n	8022484 <printi+0xa0>
 8022454:	2e10      	cmp	r6, #16
 8022456:	d829      	bhi.n	80224ac <printi+0xc8>
 8022458:	2e08      	cmp	r6, #8
 802245a:	d024      	beq.n	80224a6 <printi+0xc2>
 802245c:	2e0a      	cmp	r6, #10
 802245e:	d022      	beq.n	80224a6 <printi+0xc2>
 8022460:	e024      	b.n	80224ac <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8022462:	462b      	mov	r3, r5
 8022464:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8022468:	f1b8 0f09 	cmp.w	r8, #9
 802246c:	dd03      	ble.n	8022476 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	7f5b      	ldrb	r3, [r3, #29]
 8022472:	3b3a      	subs	r3, #58	@ 0x3a
 8022474:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8022476:	fa5f f388 	uxtb.w	r3, r8
 802247a:	3c01      	subs	r4, #1
 802247c:	3330      	adds	r3, #48	@ 0x30
 802247e:	b2db      	uxtb	r3, r3
 8022480:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8022482:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8022484:	2d00      	cmp	r5, #0
 8022486:	d1ec      	bne.n	8022462 <printi+0x7e>
		}
		break;
 8022488:	e010      	b.n	80224ac <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 802248a:	fbb5 f3f6 	udiv	r3, r5, r6
 802248e:	fb06 f303 	mul.w	r3, r6, r3
 8022492:	1aeb      	subs	r3, r5, r3
 8022494:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8022496:	fa5f f388 	uxtb.w	r3, r8
 802249a:	3c01      	subs	r4, #1
 802249c:	3330      	adds	r3, #48	@ 0x30
 802249e:	b2db      	uxtb	r3, r3
 80224a0:	7023      	strb	r3, [r4, #0]
			u /= base;
 80224a2:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 80224a6:	2d00      	cmp	r5, #0
 80224a8:	d1ef      	bne.n	802248a <printi+0xa6>
		}
		break;
 80224aa:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80224ac:	f1b9 0f00 	cmp.w	r9, #0
 80224b0:	d01b      	beq.n	80224ea <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	695b      	ldr	r3, [r3, #20]
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d014      	beq.n	80224e4 <printi+0x100>
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	7f1b      	ldrb	r3, [r3, #28]
 80224be:	f003 0302 	and.w	r3, r3, #2
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	d00e      	beq.n	80224e4 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80224c6:	212d      	movs	r1, #45	@ 0x2d
 80224c8:	6878      	ldr	r0, [r7, #4]
 80224ca:	f7ff fe5c 	bl	8022186 <strbuf_printchar>
 80224ce:	4603      	mov	r3, r0
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d101      	bne.n	80224d8 <printi+0xf4>
			{
				return pdFALSE;
 80224d4:	2300      	movs	r3, #0
 80224d6:	e00d      	b.n	80224f4 <printi+0x110>
			}
			--apBuf->flags.width;
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	695b      	ldr	r3, [r3, #20]
 80224dc:	1e5a      	subs	r2, r3, #1
 80224de:	687b      	ldr	r3, [r7, #4]
 80224e0:	615a      	str	r2, [r3, #20]
 80224e2:	e002      	b.n	80224ea <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80224e4:	3c01      	subs	r4, #1
 80224e6:	232d      	movs	r3, #45	@ 0x2d
 80224e8:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80224ea:	4621      	mov	r1, r4
 80224ec:	6878      	ldr	r0, [r7, #4]
 80224ee:	f7ff fed1 	bl	8022294 <prints>
 80224f2:	4603      	mov	r3, r0
}
 80224f4:	4618      	mov	r0, r3
 80224f6:	371c      	adds	r7, #28
 80224f8:	46bd      	mov	sp, r7
 80224fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022500 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022500:	b590      	push	{r4, r7, lr}
 8022502:	b089      	sub	sp, #36	@ 0x24
 8022504:	af02      	add	r7, sp, #8
 8022506:	6078      	str	r0, [r7, #4]
 8022508:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 802250a:	683b      	ldr	r3, [r7, #0]
 802250c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 802250e:	683b      	ldr	r3, [r7, #0]
 8022510:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022512:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022514:	683b      	ldr	r3, [r7, #0]
 8022516:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022518:	b2db      	uxtb	r3, r3
 802251a:	683a      	ldr	r2, [r7, #0]
 802251c:	b2d2      	uxtb	r2, r2
 802251e:	f107 0008 	add.w	r0, r7, #8
 8022522:	9201      	str	r2, [sp, #4]
 8022524:	9300      	str	r3, [sp, #0]
 8022526:	4623      	mov	r3, r4
 8022528:	460a      	mov	r2, r1
 802252a:	4909      	ldr	r1, [pc, #36]	@ (8022550 <printIp+0x50>)
 802252c:	f000 fa81 	bl	8022a32 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022530:	687a      	ldr	r2, [r7, #4]
 8022532:	7f93      	ldrb	r3, [r2, #30]
 8022534:	f043 0302 	orr.w	r3, r3, #2
 8022538:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 802253a:	f107 0308 	add.w	r3, r7, #8
 802253e:	4619      	mov	r1, r3
 8022540:	6878      	ldr	r0, [r7, #4]
 8022542:	f7ff fea7 	bl	8022294 <prints>

	return pdTRUE;
 8022546:	2301      	movs	r3, #1
}
 8022548:	4618      	mov	r0, r3
 802254a:	371c      	adds	r7, #28
 802254c:	46bd      	mov	sp, r7
 802254e:	bd90      	pop	{r4, r7, pc}
 8022550:	08026f8c 	.word	0x08026f8c

08022554 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8022554:	b480      	push	{r7}
 8022556:	b083      	sub	sp, #12
 8022558:	af00      	add	r7, sp, #0
 802255a:	4603      	mov	r3, r0
 802255c:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802255e:	4a0b      	ldr	r2, [pc, #44]	@ (802258c <usNetToHost+0x38>)
 8022560:	4b0b      	ldr	r3, [pc, #44]	@ (8022590 <usNetToHost+0x3c>)
 8022562:	429a      	cmp	r2, r3
 8022564:	d101      	bne.n	802256a <usNetToHost+0x16>
	{
		return usValue;
 8022566:	88fb      	ldrh	r3, [r7, #6]
 8022568:	e009      	b.n	802257e <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 802256a:	88fb      	ldrh	r3, [r7, #6]
 802256c:	021b      	lsls	r3, r3, #8
 802256e:	b21a      	sxth	r2, r3
 8022570:	88fb      	ldrh	r3, [r7, #6]
 8022572:	0a1b      	lsrs	r3, r3, #8
 8022574:	b29b      	uxth	r3, r3
 8022576:	b21b      	sxth	r3, r3
 8022578:	4313      	orrs	r3, r2
 802257a:	b21b      	sxth	r3, r3
 802257c:	b29b      	uxth	r3, r3
	}
}
 802257e:	4618      	mov	r0, r3
 8022580:	370c      	adds	r7, #12
 8022582:	46bd      	mov	sp, r7
 8022584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022588:	4770      	bx	lr
 802258a:	bf00      	nop
 802258c:	03020100 	.word	0x03020100
 8022590:	00010203 	.word	0x00010203

08022594 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8022594:	b580      	push	{r7, lr}
 8022596:	b088      	sub	sp, #32
 8022598:	af00      	add	r7, sp, #0
 802259a:	6078      	str	r0, [r7, #4]
 802259c:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 802259e:	f04f 33ff 	mov.w	r3, #4294967295
 80225a2:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 80225a4:	2300      	movs	r3, #0
 80225a6:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 80225a8:	2300      	movs	r3, #0
 80225aa:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80225ac:	2300      	movs	r3, #0
 80225ae:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80225b0:	2300      	movs	r3, #0
 80225b2:	61fb      	str	r3, [r7, #28]
 80225b4:	e026      	b.n	8022604 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80225b6:	69fb      	ldr	r3, [r7, #28]
 80225b8:	005b      	lsls	r3, r3, #1
 80225ba:	683a      	ldr	r2, [r7, #0]
 80225bc:	4413      	add	r3, r2
 80225be:	881b      	ldrh	r3, [r3, #0]
 80225c0:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80225c2:	897b      	ldrh	r3, [r7, #10]
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d107      	bne.n	80225d8 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80225c8:	68fb      	ldr	r3, [r7, #12]
 80225ca:	2b00      	cmp	r3, #0
 80225cc:	d101      	bne.n	80225d2 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80225ce:	69fb      	ldr	r3, [r7, #28]
 80225d0:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80225d2:	68fb      	ldr	r3, [r7, #12]
 80225d4:	3301      	adds	r3, #1
 80225d6:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80225d8:	897b      	ldrh	r3, [r7, #10]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	d102      	bne.n	80225e4 <printIPv6+0x50>
 80225de:	69fb      	ldr	r3, [r7, #28]
 80225e0:	2b07      	cmp	r3, #7
 80225e2:	d10c      	bne.n	80225fe <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	2b01      	cmp	r3, #1
 80225e8:	dd07      	ble.n	80225fa <printIPv6+0x66>
 80225ea:	697a      	ldr	r2, [r7, #20]
 80225ec:	68fb      	ldr	r3, [r7, #12]
 80225ee:	429a      	cmp	r2, r3
 80225f0:	da03      	bge.n	80225fa <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80225f2:	68fb      	ldr	r3, [r7, #12]
 80225f4:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80225f6:	693b      	ldr	r3, [r7, #16]
 80225f8:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80225fa:	2300      	movs	r3, #0
 80225fc:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80225fe:	69fb      	ldr	r3, [r7, #28]
 8022600:	3301      	adds	r3, #1
 8022602:	61fb      	str	r3, [r7, #28]
 8022604:	69fb      	ldr	r3, [r7, #28]
 8022606:	2b07      	cmp	r3, #7
 8022608:	ddd5      	ble.n	80225b6 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	2210      	movs	r2, #16
 802260e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2261      	movs	r2, #97	@ 0x61
 8022614:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022616:	2300      	movs	r3, #0
 8022618:	61fb      	str	r3, [r7, #28]
 802261a:	e02b      	b.n	8022674 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 802261c:	69fa      	ldr	r2, [r7, #28]
 802261e:	69bb      	ldr	r3, [r7, #24]
 8022620:	429a      	cmp	r2, r3
 8022622:	d110      	bne.n	8022646 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022624:	697b      	ldr	r3, [r7, #20]
 8022626:	3b01      	subs	r3, #1
 8022628:	69fa      	ldr	r2, [r7, #28]
 802262a:	4413      	add	r3, r2
 802262c:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 802262e:	213a      	movs	r1, #58	@ 0x3a
 8022630:	6878      	ldr	r0, [r7, #4]
 8022632:	f7ff fda8 	bl	8022186 <strbuf_printchar>
			if( iIndex == 7 )
 8022636:	69fb      	ldr	r3, [r7, #28]
 8022638:	2b07      	cmp	r3, #7
 802263a:	d118      	bne.n	802266e <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 802263c:	213a      	movs	r1, #58	@ 0x3a
 802263e:	6878      	ldr	r0, [r7, #4]
 8022640:	f7ff fda1 	bl	8022186 <strbuf_printchar>
 8022644:	e013      	b.n	802266e <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022646:	69fb      	ldr	r3, [r7, #28]
 8022648:	2b00      	cmp	r3, #0
 802264a:	dd03      	ble.n	8022654 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 802264c:	213a      	movs	r1, #58	@ 0x3a
 802264e:	6878      	ldr	r0, [r7, #4]
 8022650:	f7ff fd99 	bl	8022186 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8022654:	69fb      	ldr	r3, [r7, #28]
 8022656:	005b      	lsls	r3, r3, #1
 8022658:	683a      	ldr	r2, [r7, #0]
 802265a:	4413      	add	r3, r2
 802265c:	881b      	ldrh	r3, [r3, #0]
 802265e:	4618      	mov	r0, r3
 8022660:	f7ff ff78 	bl	8022554 <usNetToHost>
 8022664:	4603      	mov	r3, r0
 8022666:	4619      	mov	r1, r3
 8022668:	6878      	ldr	r0, [r7, #4]
 802266a:	f7ff febb 	bl	80223e4 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802266e:	69fb      	ldr	r3, [r7, #28]
 8022670:	3301      	adds	r3, #1
 8022672:	61fb      	str	r3, [r7, #28]
 8022674:	69fb      	ldr	r3, [r7, #28]
 8022676:	2b07      	cmp	r3, #7
 8022678:	ddd0      	ble.n	802261c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 802267a:	2301      	movs	r3, #1
}
 802267c:	4618      	mov	r0, r3
 802267e:	3720      	adds	r7, #32
 8022680:	46bd      	mov	sp, r7
 8022682:	bd80      	pop	{r7, pc}

08022684 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8022684:	b590      	push	{r4, r7, lr}
 8022686:	b087      	sub	sp, #28
 8022688:	af00      	add	r7, sp, #0
 802268a:	60f8      	str	r0, [r7, #12]
 802268c:	60b9      	str	r1, [r7, #8]
 802268e:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8022690:	68bb      	ldr	r3, [r7, #8]
 8022692:	1c5a      	adds	r2, r3, #1
 8022694:	60ba      	str	r2, [r7, #8]
 8022696:	781b      	ldrb	r3, [r3, #0]
 8022698:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 802269a:	697b      	ldr	r3, [r7, #20]
 802269c:	2b25      	cmp	r3, #37	@ 0x25
 802269e:	d00f      	beq.n	80226c0 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 80226a0:	6979      	ldr	r1, [r7, #20]
 80226a2:	68f8      	ldr	r0, [r7, #12]
 80226a4:	f7ff fdad 	bl	8022202 <strbuf_printchar_inline>
 80226a8:	4603      	mov	r3, r0
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	f000 817e 	beq.w	80229ac <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80226b0:	68bb      	ldr	r3, [r7, #8]
 80226b2:	1c5a      	adds	r2, r3, #1
 80226b4:	60ba      	str	r2, [r7, #8]
 80226b6:	781b      	ldrb	r3, [r3, #0]
 80226b8:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80226ba:	697b      	ldr	r3, [r7, #20]
 80226bc:	2b25      	cmp	r3, #37	@ 0x25
 80226be:	d1ef      	bne.n	80226a0 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80226c0:	68bb      	ldr	r3, [r7, #8]
 80226c2:	1c5a      	adds	r2, r3, #1
 80226c4:	60ba      	str	r2, [r7, #8]
 80226c6:	781b      	ldrb	r3, [r3, #0]
 80226c8:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80226ca:	697b      	ldr	r3, [r7, #20]
 80226cc:	2b00      	cmp	r3, #0
 80226ce:	f000 8165 	beq.w	802299c <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80226d2:	697b      	ldr	r3, [r7, #20]
 80226d4:	2b25      	cmp	r3, #37	@ 0x25
 80226d6:	d108      	bne.n	80226ea <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80226d8:	6979      	ldr	r1, [r7, #20]
 80226da:	68f8      	ldr	r0, [r7, #12]
 80226dc:	f7ff fd53 	bl	8022186 <strbuf_printchar>
 80226e0:	4603      	mov	r3, r0
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	f040 814e 	bne.w	8022984 <tiny_print+0x300>
			{
				return;
 80226e8:	e161      	b.n	80229ae <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80226ea:	68fb      	ldr	r3, [r7, #12]
 80226ec:	3310      	adds	r3, #16
 80226ee:	2210      	movs	r2, #16
 80226f0:	2100      	movs	r1, #0
 80226f2:	4618      	mov	r0, r3
 80226f4:	f7ff fc79 	bl	8021fea <memset>

		if( ch == '-' )
 80226f8:	697b      	ldr	r3, [r7, #20]
 80226fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80226fc:	d114      	bne.n	8022728 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80226fe:	68bb      	ldr	r3, [r7, #8]
 8022700:	1c5a      	adds	r2, r3, #1
 8022702:	60ba      	str	r2, [r7, #8]
 8022704:	781b      	ldrb	r3, [r3, #0]
 8022706:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022708:	68fb      	ldr	r3, [r7, #12]
 802270a:	2201      	movs	r2, #1
 802270c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 802270e:	e00b      	b.n	8022728 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022710:	68bb      	ldr	r3, [r7, #8]
 8022712:	1c5a      	adds	r2, r3, #1
 8022714:	60ba      	str	r2, [r7, #8]
 8022716:	781b      	ldrb	r3, [r3, #0]
 8022718:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802271a:	68fb      	ldr	r3, [r7, #12]
 802271c:	7f1b      	ldrb	r3, [r3, #28]
 802271e:	f043 0302 	orr.w	r3, r3, #2
 8022722:	b2da      	uxtb	r2, r3
 8022724:	68fb      	ldr	r3, [r7, #12]
 8022726:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022728:	697b      	ldr	r3, [r7, #20]
 802272a:	2b30      	cmp	r3, #48	@ 0x30
 802272c:	d0f0      	beq.n	8022710 <tiny_print+0x8c>
		}
		if( ch == '*' )
 802272e:	697b      	ldr	r3, [r7, #20]
 8022730:	2b2a      	cmp	r3, #42	@ 0x2a
 8022732:	d120      	bne.n	8022776 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022734:	68bb      	ldr	r3, [r7, #8]
 8022736:	1c5a      	adds	r2, r3, #1
 8022738:	60ba      	str	r2, [r7, #8]
 802273a:	781b      	ldrb	r3, [r3, #0]
 802273c:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	1d1a      	adds	r2, r3, #4
 8022742:	607a      	str	r2, [r7, #4]
 8022744:	681a      	ldr	r2, [r3, #0]
 8022746:	68fb      	ldr	r3, [r7, #12]
 8022748:	615a      	str	r2, [r3, #20]
 802274a:	e01a      	b.n	8022782 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 802274c:	68fb      	ldr	r3, [r7, #12]
 802274e:	695a      	ldr	r2, [r3, #20]
 8022750:	4613      	mov	r3, r2
 8022752:	009b      	lsls	r3, r3, #2
 8022754:	4413      	add	r3, r2
 8022756:	005b      	lsls	r3, r3, #1
 8022758:	461a      	mov	r2, r3
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	695a      	ldr	r2, [r3, #20]
 8022762:	697b      	ldr	r3, [r7, #20]
 8022764:	3b30      	subs	r3, #48	@ 0x30
 8022766:	441a      	add	r2, r3
 8022768:	68fb      	ldr	r3, [r7, #12]
 802276a:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 802276c:	68bb      	ldr	r3, [r7, #8]
 802276e:	1c5a      	adds	r2, r3, #1
 8022770:	60ba      	str	r2, [r7, #8]
 8022772:	781b      	ldrb	r3, [r3, #0]
 8022774:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8022776:	697b      	ldr	r3, [r7, #20]
 8022778:	2b2f      	cmp	r3, #47	@ 0x2f
 802277a:	dd02      	ble.n	8022782 <tiny_print+0xfe>
 802277c:	697b      	ldr	r3, [r7, #20]
 802277e:	2b39      	cmp	r3, #57	@ 0x39
 8022780:	dde4      	ble.n	802274c <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8022782:	697b      	ldr	r3, [r7, #20]
 8022784:	2b2e      	cmp	r3, #46	@ 0x2e
 8022786:	d12e      	bne.n	80227e6 <tiny_print+0x162>
		{
			ch = *( format++ );
 8022788:	68bb      	ldr	r3, [r7, #8]
 802278a:	1c5a      	adds	r2, r3, #1
 802278c:	60ba      	str	r2, [r7, #8]
 802278e:	781b      	ldrb	r3, [r3, #0]
 8022790:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8022792:	697b      	ldr	r3, [r7, #20]
 8022794:	2b2a      	cmp	r3, #42	@ 0x2a
 8022796:	d120      	bne.n	80227da <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	1d1a      	adds	r2, r3, #4
 802279c:	607a      	str	r2, [r7, #4]
 802279e:	681a      	ldr	r2, [r3, #0]
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 80227a4:	68bb      	ldr	r3, [r7, #8]
 80227a6:	1c5a      	adds	r2, r3, #1
 80227a8:	60ba      	str	r2, [r7, #8]
 80227aa:	781b      	ldrb	r3, [r3, #0]
 80227ac:	617b      	str	r3, [r7, #20]
 80227ae:	e01a      	b.n	80227e6 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80227b0:	68fb      	ldr	r3, [r7, #12]
 80227b2:	699a      	ldr	r2, [r3, #24]
 80227b4:	4613      	mov	r3, r2
 80227b6:	009b      	lsls	r3, r3, #2
 80227b8:	4413      	add	r3, r2
 80227ba:	005b      	lsls	r3, r3, #1
 80227bc:	461a      	mov	r2, r3
 80227be:	68fb      	ldr	r3, [r7, #12]
 80227c0:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80227c2:	68fb      	ldr	r3, [r7, #12]
 80227c4:	699a      	ldr	r2, [r3, #24]
 80227c6:	697b      	ldr	r3, [r7, #20]
 80227c8:	3b30      	subs	r3, #48	@ 0x30
 80227ca:	441a      	add	r2, r3
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80227d0:	68bb      	ldr	r3, [r7, #8]
 80227d2:	1c5a      	adds	r2, r3, #1
 80227d4:	60ba      	str	r2, [r7, #8]
 80227d6:	781b      	ldrb	r3, [r3, #0]
 80227d8:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 80227da:	697b      	ldr	r3, [r7, #20]
 80227dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80227de:	dd02      	ble.n	80227e6 <tiny_print+0x162>
 80227e0:	697b      	ldr	r3, [r7, #20]
 80227e2:	2b39      	cmp	r3, #57	@ 0x39
 80227e4:	dde4      	ble.n	80227b0 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 80227e6:	68fb      	ldr	r3, [r7, #12]
 80227e8:	699b      	ldr	r3, [r3, #24]
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d104      	bne.n	80227f8 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 80227ee:	68fb      	ldr	r3, [r7, #12]
 80227f0:	699b      	ldr	r3, [r3, #24]
 80227f2:	1e5a      	subs	r2, r3, #1
 80227f4:	68fb      	ldr	r3, [r7, #12]
 80227f6:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 80227f8:	697b      	ldr	r3, [r7, #20]
 80227fa:	2b70      	cmp	r3, #112	@ 0x70
 80227fc:	d118      	bne.n	8022830 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 80227fe:	68bb      	ldr	r3, [r7, #8]
 8022800:	781b      	ldrb	r3, [r3, #0]
 8022802:	2b69      	cmp	r3, #105	@ 0x69
 8022804:	d114      	bne.n	8022830 <tiny_print+0x1ac>
 8022806:	68bb      	ldr	r3, [r7, #8]
 8022808:	3301      	adds	r3, #1
 802280a:	781b      	ldrb	r3, [r3, #0]
 802280c:	2b70      	cmp	r3, #112	@ 0x70
 802280e:	d10f      	bne.n	8022830 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022810:	68bb      	ldr	r3, [r7, #8]
 8022812:	3302      	adds	r3, #2
 8022814:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	1d1a      	adds	r2, r3, #4
 802281a:	607a      	str	r2, [r7, #4]
 802281c:	681b      	ldr	r3, [r3, #0]
 802281e:	4619      	mov	r1, r3
 8022820:	68f8      	ldr	r0, [r7, #12]
 8022822:	f7ff feb7 	bl	8022594 <printIPv6>
 8022826:	4603      	mov	r3, r0
 8022828:	2b00      	cmp	r3, #0
 802282a:	f040 80ad 	bne.w	8022988 <tiny_print+0x304>
				{
					break;
 802282e:	e0b8      	b.n	80229a2 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022830:	697b      	ldr	r3, [r7, #20]
 8022832:	2b73      	cmp	r3, #115	@ 0x73
 8022834:	d112      	bne.n	802285c <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022836:	687b      	ldr	r3, [r7, #4]
 8022838:	1d1a      	adds	r2, r3, #4
 802283a:	607a      	str	r2, [r7, #4]
 802283c:	681b      	ldr	r3, [r3, #0]
 802283e:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022840:	2c00      	cmp	r4, #0
 8022842:	d001      	beq.n	8022848 <tiny_print+0x1c4>
 8022844:	4623      	mov	r3, r4
 8022846:	e000      	b.n	802284a <tiny_print+0x1c6>
 8022848:	4b5a      	ldr	r3, [pc, #360]	@ (80229b4 <tiny_print+0x330>)
 802284a:	4619      	mov	r1, r3
 802284c:	68f8      	ldr	r0, [r7, #12]
 802284e:	f7ff fd21 	bl	8022294 <prints>
 8022852:	4603      	mov	r3, r0
 8022854:	2b00      	cmp	r3, #0
 8022856:	f040 8099 	bne.w	802298c <tiny_print+0x308>
			{
				break;
 802285a:	e0a2      	b.n	80229a2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 802285c:	697b      	ldr	r3, [r7, #20]
 802285e:	2b63      	cmp	r3, #99	@ 0x63
 8022860:	d10f      	bne.n	8022882 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	1d1a      	adds	r2, r3, #4
 8022866:	607a      	str	r2, [r7, #4]
 8022868:	681b      	ldr	r3, [r3, #0]
 802286a:	b2db      	uxtb	r3, r3
 802286c:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802286e:	7c3b      	ldrb	r3, [r7, #16]
 8022870:	4619      	mov	r1, r3
 8022872:	68f8      	ldr	r0, [r7, #12]
 8022874:	f7ff fc87 	bl	8022186 <strbuf_printchar>
 8022878:	4603      	mov	r3, r0
 802287a:	2b00      	cmp	r3, #0
 802287c:	f040 8088 	bne.w	8022990 <tiny_print+0x30c>
			{
				return;
 8022880:	e095      	b.n	80229ae <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8022882:	697b      	ldr	r3, [r7, #20]
 8022884:	2b6c      	cmp	r3, #108	@ 0x6c
 8022886:	d109      	bne.n	802289c <tiny_print+0x218>
		{
			ch = *( format++ );
 8022888:	68bb      	ldr	r3, [r7, #8]
 802288a:	1c5a      	adds	r2, r3, #1
 802288c:	60ba      	str	r2, [r7, #8]
 802288e:	781b      	ldrb	r3, [r3, #0]
 8022890:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8022892:	68fa      	ldr	r2, [r7, #12]
 8022894:	7f93      	ldrb	r3, [r2, #30]
 8022896:	f043 0304 	orr.w	r3, r3, #4
 802289a:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 802289c:	697b      	ldr	r3, [r7, #20]
 802289e:	2b4c      	cmp	r3, #76	@ 0x4c
 80228a0:	d109      	bne.n	80228b6 <tiny_print+0x232>
		{
			ch = *( format++ );
 80228a2:	68bb      	ldr	r3, [r7, #8]
 80228a4:	1c5a      	adds	r2, r3, #1
 80228a6:	60ba      	str	r2, [r7, #8]
 80228a8:	781b      	ldrb	r3, [r3, #0]
 80228aa:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80228ac:	68fa      	ldr	r2, [r7, #12]
 80228ae:	7f93      	ldrb	r3, [r2, #30]
 80228b0:	f043 0308 	orr.w	r3, r3, #8
 80228b4:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80228b6:	68fb      	ldr	r3, [r7, #12]
 80228b8:	220a      	movs	r2, #10
 80228ba:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80228bc:	68fb      	ldr	r3, [r7, #12]
 80228be:	2261      	movs	r2, #97	@ 0x61
 80228c0:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80228c2:	697b      	ldr	r3, [r7, #20]
 80228c4:	2b64      	cmp	r3, #100	@ 0x64
 80228c6:	d002      	beq.n	80228ce <tiny_print+0x24a>
 80228c8:	697b      	ldr	r3, [r7, #20]
 80228ca:	2b75      	cmp	r3, #117	@ 0x75
 80228cc:	d116      	bne.n	80228fc <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80228ce:	697b      	ldr	r3, [r7, #20]
 80228d0:	2b64      	cmp	r3, #100	@ 0x64
 80228d2:	bf0c      	ite	eq
 80228d4:	2301      	moveq	r3, #1
 80228d6:	2300      	movne	r3, #0
 80228d8:	b2d9      	uxtb	r1, r3
 80228da:	68fa      	ldr	r2, [r7, #12]
 80228dc:	7f93      	ldrb	r3, [r2, #30]
 80228de:	f361 0300 	bfi	r3, r1, #0, #1
 80228e2:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80228e4:	687b      	ldr	r3, [r7, #4]
 80228e6:	1d1a      	adds	r2, r3, #4
 80228e8:	607a      	str	r2, [r7, #4]
 80228ea:	681b      	ldr	r3, [r3, #0]
 80228ec:	4619      	mov	r1, r3
 80228ee:	68f8      	ldr	r0, [r7, #12]
 80228f0:	f7ff fd78 	bl	80223e4 <printi>
 80228f4:	4603      	mov	r3, r0
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d14c      	bne.n	8022994 <tiny_print+0x310>
			{
				break;
 80228fa:	e052      	b.n	80229a2 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80228fc:	68fb      	ldr	r3, [r7, #12]
 80228fe:	2210      	movs	r2, #16
 8022900:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8022902:	697b      	ldr	r3, [r7, #20]
 8022904:	2b78      	cmp	r3, #120	@ 0x78
 8022906:	d117      	bne.n	8022938 <tiny_print+0x2b4>
 8022908:	68bb      	ldr	r3, [r7, #8]
 802290a:	781b      	ldrb	r3, [r3, #0]
 802290c:	2b69      	cmp	r3, #105	@ 0x69
 802290e:	d113      	bne.n	8022938 <tiny_print+0x2b4>
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	3301      	adds	r3, #1
 8022914:	781b      	ldrb	r3, [r3, #0]
 8022916:	2b70      	cmp	r3, #112	@ 0x70
 8022918:	d10e      	bne.n	8022938 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 802291a:	68bb      	ldr	r3, [r7, #8]
 802291c:	3302      	adds	r3, #2
 802291e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	1d1a      	adds	r2, r3, #4
 8022924:	607a      	str	r2, [r7, #4]
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	4619      	mov	r1, r3
 802292a:	68f8      	ldr	r0, [r7, #12]
 802292c:	f7ff fde8 	bl	8022500 <printIp>
 8022930:	4603      	mov	r3, r0
 8022932:	2b00      	cmp	r3, #0
 8022934:	d130      	bne.n	8022998 <tiny_print+0x314>
			{
				break;
 8022936:	e034      	b.n	80229a2 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8022938:	697b      	ldr	r3, [r7, #20]
 802293a:	2b78      	cmp	r3, #120	@ 0x78
 802293c:	d009      	beq.n	8022952 <tiny_print+0x2ce>
 802293e:	697b      	ldr	r3, [r7, #20]
 8022940:	2b58      	cmp	r3, #88	@ 0x58
 8022942:	d006      	beq.n	8022952 <tiny_print+0x2ce>
 8022944:	697b      	ldr	r3, [r7, #20]
 8022946:	2b70      	cmp	r3, #112	@ 0x70
 8022948:	d003      	beq.n	8022952 <tiny_print+0x2ce>
 802294a:	697b      	ldr	r3, [r7, #20]
 802294c:	2b6f      	cmp	r3, #111	@ 0x6f
 802294e:	f47f ae9f 	bne.w	8022690 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8022952:	697b      	ldr	r3, [r7, #20]
 8022954:	2b58      	cmp	r3, #88	@ 0x58
 8022956:	d103      	bne.n	8022960 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8022958:	68fb      	ldr	r3, [r7, #12]
 802295a:	2241      	movs	r2, #65	@ 0x41
 802295c:	775a      	strb	r2, [r3, #29]
 802295e:	e005      	b.n	802296c <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8022960:	697b      	ldr	r3, [r7, #20]
 8022962:	2b6f      	cmp	r3, #111	@ 0x6f
 8022964:	d102      	bne.n	802296c <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8022966:	68fb      	ldr	r3, [r7, #12]
 8022968:	2208      	movs	r2, #8
 802296a:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	1d1a      	adds	r2, r3, #4
 8022970:	607a      	str	r2, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	4619      	mov	r1, r3
 8022976:	68f8      	ldr	r0, [r7, #12]
 8022978:	f7ff fd34 	bl	80223e4 <printi>
 802297c:	4603      	mov	r3, r0
 802297e:	2b00      	cmp	r3, #0
 8022980:	d00e      	beq.n	80229a0 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8022982:	e00a      	b.n	802299a <tiny_print+0x316>
			continue;
 8022984:	bf00      	nop
 8022986:	e683      	b.n	8022690 <tiny_print+0xc>
				continue;
 8022988:	bf00      	nop
 802298a:	e681      	b.n	8022690 <tiny_print+0xc>
			continue;
 802298c:	bf00      	nop
 802298e:	e67f      	b.n	8022690 <tiny_print+0xc>
			continue;
 8022990:	bf00      	nop
 8022992:	e67d      	b.n	8022690 <tiny_print+0xc>
			continue;
 8022994:	bf00      	nop
 8022996:	e67b      	b.n	8022690 <tiny_print+0xc>
			continue;
 8022998:	bf00      	nop
	{
 802299a:	e679      	b.n	8022690 <tiny_print+0xc>
			break;
 802299c:	bf00      	nop
 802299e:	e000      	b.n	80229a2 <tiny_print+0x31e>
				break;
 80229a0:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 80229a2:	2100      	movs	r1, #0
 80229a4:	68f8      	ldr	r0, [r7, #12]
 80229a6:	f7ff fbee 	bl	8022186 <strbuf_printchar>
 80229aa:	e000      	b.n	80229ae <tiny_print+0x32a>
					return;
 80229ac:	bf00      	nop
}
 80229ae:	371c      	adds	r7, #28
 80229b0:	46bd      	mov	sp, r7
 80229b2:	bd90      	pop	{r4, r7, pc}
 80229b4:	08026f98 	.word	0x08026f98

080229b8 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80229b8:	b580      	push	{r7, lr}
 80229ba:	b08c      	sub	sp, #48	@ 0x30
 80229bc:	af00      	add	r7, sp, #0
 80229be:	60f8      	str	r0, [r7, #12]
 80229c0:	60b9      	str	r1, [r7, #8]
 80229c2:	607a      	str	r2, [r7, #4]
 80229c4:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80229c6:	68fa      	ldr	r2, [r7, #12]
 80229c8:	68bb      	ldr	r3, [r7, #8]
 80229ca:	441a      	add	r2, r3
 80229cc:	f107 0310 	add.w	r3, r7, #16
 80229d0:	68f9      	ldr	r1, [r7, #12]
 80229d2:	4618      	mov	r0, r3
 80229d4:	f7ff fbb9 	bl	802214a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80229d8:	f107 0310 	add.w	r3, r7, #16
 80229dc:	683a      	ldr	r2, [r7, #0]
 80229de:	6879      	ldr	r1, [r7, #4]
 80229e0:	4618      	mov	r0, r3
 80229e2:	f7ff fe4f 	bl	8022684 <tiny_print>

	return strBuf.curLen;
 80229e6:	69fb      	ldr	r3, [r7, #28]
}
 80229e8:	4618      	mov	r0, r3
 80229ea:	3730      	adds	r7, #48	@ 0x30
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}

080229f0 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80229f0:	b40c      	push	{r2, r3}
 80229f2:	b580      	push	{r7, lr}
 80229f4:	b08c      	sub	sp, #48	@ 0x30
 80229f6:	af00      	add	r7, sp, #0
 80229f8:	6078      	str	r0, [r7, #4]
 80229fa:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80229fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8022a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022a02:	687a      	ldr	r2, [r7, #4]
 8022a04:	683b      	ldr	r3, [r7, #0]
 8022a06:	441a      	add	r2, r3
 8022a08:	f107 030c 	add.w	r3, r7, #12
 8022a0c:	6879      	ldr	r1, [r7, #4]
 8022a0e:	4618      	mov	r0, r3
 8022a10:	f7ff fb9b 	bl	802214a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022a14:	f107 030c 	add.w	r3, r7, #12
 8022a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022a1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8022a1c:	4618      	mov	r0, r3
 8022a1e:	f7ff fe31 	bl	8022684 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022a22:	69bb      	ldr	r3, [r7, #24]
}
 8022a24:	4618      	mov	r0, r3
 8022a26:	3730      	adds	r7, #48	@ 0x30
 8022a28:	46bd      	mov	sp, r7
 8022a2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022a2e:	b002      	add	sp, #8
 8022a30:	4770      	bx	lr

08022a32 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8022a32:	b40e      	push	{r1, r2, r3}
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b08d      	sub	sp, #52	@ 0x34
 8022a38:	af00      	add	r7, sp, #0
 8022a3a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8022a3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8022a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8022a48:	f107 030c 	add.w	r3, r7, #12
 8022a4c:	6879      	ldr	r1, [r7, #4]
 8022a4e:	4618      	mov	r0, r3
 8022a50:	f7ff fb7b 	bl	802214a <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022a54:	f107 030c 	add.w	r3, r7, #12
 8022a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022a5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022a5c:	4618      	mov	r0, r3
 8022a5e:	f7ff fe11 	bl	8022684 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022a62:	69bb      	ldr	r3, [r7, #24]
}
 8022a64:	4618      	mov	r0, r3
 8022a66:	3734      	adds	r7, #52	@ 0x34
 8022a68:	46bd      	mov	sp, r7
 8022a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022a6e:	b003      	add	sp, #12
 8022a70:	4770      	bx	lr
	...

08022a74 <rand>:
 8022a74:	4b16      	ldr	r3, [pc, #88]	@ (8022ad0 <rand+0x5c>)
 8022a76:	b510      	push	{r4, lr}
 8022a78:	681c      	ldr	r4, [r3, #0]
 8022a7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022a7c:	b9b3      	cbnz	r3, 8022aac <rand+0x38>
 8022a7e:	2018      	movs	r0, #24
 8022a80:	f000 fa70 	bl	8022f64 <malloc>
 8022a84:	4602      	mov	r2, r0
 8022a86:	6320      	str	r0, [r4, #48]	@ 0x30
 8022a88:	b920      	cbnz	r0, 8022a94 <rand+0x20>
 8022a8a:	4b12      	ldr	r3, [pc, #72]	@ (8022ad4 <rand+0x60>)
 8022a8c:	4812      	ldr	r0, [pc, #72]	@ (8022ad8 <rand+0x64>)
 8022a8e:	2152      	movs	r1, #82	@ 0x52
 8022a90:	f000 fa00 	bl	8022e94 <__assert_func>
 8022a94:	4911      	ldr	r1, [pc, #68]	@ (8022adc <rand+0x68>)
 8022a96:	4b12      	ldr	r3, [pc, #72]	@ (8022ae0 <rand+0x6c>)
 8022a98:	e9c0 1300 	strd	r1, r3, [r0]
 8022a9c:	4b11      	ldr	r3, [pc, #68]	@ (8022ae4 <rand+0x70>)
 8022a9e:	6083      	str	r3, [r0, #8]
 8022aa0:	230b      	movs	r3, #11
 8022aa2:	8183      	strh	r3, [r0, #12]
 8022aa4:	2100      	movs	r1, #0
 8022aa6:	2001      	movs	r0, #1
 8022aa8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022aac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8022aae:	480e      	ldr	r0, [pc, #56]	@ (8022ae8 <rand+0x74>)
 8022ab0:	690b      	ldr	r3, [r1, #16]
 8022ab2:	694c      	ldr	r4, [r1, #20]
 8022ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8022aec <rand+0x78>)
 8022ab6:	4358      	muls	r0, r3
 8022ab8:	fb02 0004 	mla	r0, r2, r4, r0
 8022abc:	fba3 3202 	umull	r3, r2, r3, r2
 8022ac0:	3301      	adds	r3, #1
 8022ac2:	eb40 0002 	adc.w	r0, r0, r2
 8022ac6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022aca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8022ace:	bd10      	pop	{r4, pc}
 8022ad0:	20000038 	.word	0x20000038
 8022ad4:	08027158 	.word	0x08027158
 8022ad8:	0802716f 	.word	0x0802716f
 8022adc:	abcd330e 	.word	0xabcd330e
 8022ae0:	e66d1234 	.word	0xe66d1234
 8022ae4:	0005deec 	.word	0x0005deec
 8022ae8:	5851f42d 	.word	0x5851f42d
 8022aec:	4c957f2d 	.word	0x4c957f2d

08022af0 <std>:
 8022af0:	2300      	movs	r3, #0
 8022af2:	b510      	push	{r4, lr}
 8022af4:	4604      	mov	r4, r0
 8022af6:	e9c0 3300 	strd	r3, r3, [r0]
 8022afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022afe:	6083      	str	r3, [r0, #8]
 8022b00:	8181      	strh	r1, [r0, #12]
 8022b02:	6643      	str	r3, [r0, #100]	@ 0x64
 8022b04:	81c2      	strh	r2, [r0, #14]
 8022b06:	6183      	str	r3, [r0, #24]
 8022b08:	4619      	mov	r1, r3
 8022b0a:	2208      	movs	r2, #8
 8022b0c:	305c      	adds	r0, #92	@ 0x5c
 8022b0e:	f7ff fa6c 	bl	8021fea <memset>
 8022b12:	4b0d      	ldr	r3, [pc, #52]	@ (8022b48 <std+0x58>)
 8022b14:	6263      	str	r3, [r4, #36]	@ 0x24
 8022b16:	4b0d      	ldr	r3, [pc, #52]	@ (8022b4c <std+0x5c>)
 8022b18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8022b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8022b50 <std+0x60>)
 8022b1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8022b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8022b54 <std+0x64>)
 8022b20:	6323      	str	r3, [r4, #48]	@ 0x30
 8022b22:	4b0d      	ldr	r3, [pc, #52]	@ (8022b58 <std+0x68>)
 8022b24:	6224      	str	r4, [r4, #32]
 8022b26:	429c      	cmp	r4, r3
 8022b28:	d006      	beq.n	8022b38 <std+0x48>
 8022b2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8022b2e:	4294      	cmp	r4, r2
 8022b30:	d002      	beq.n	8022b38 <std+0x48>
 8022b32:	33d0      	adds	r3, #208	@ 0xd0
 8022b34:	429c      	cmp	r4, r3
 8022b36:	d105      	bne.n	8022b44 <std+0x54>
 8022b38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b40:	f000 b9a4 	b.w	8022e8c <__retarget_lock_init_recursive>
 8022b44:	bd10      	pop	{r4, pc}
 8022b46:	bf00      	nop
 8022b48:	08022c75 	.word	0x08022c75
 8022b4c:	08022c97 	.word	0x08022c97
 8022b50:	08022ccf 	.word	0x08022ccf
 8022b54:	08022cf3 	.word	0x08022cf3
 8022b58:	20002574 	.word	0x20002574

08022b5c <stdio_exit_handler>:
 8022b5c:	4a02      	ldr	r2, [pc, #8]	@ (8022b68 <stdio_exit_handler+0xc>)
 8022b5e:	4903      	ldr	r1, [pc, #12]	@ (8022b6c <stdio_exit_handler+0x10>)
 8022b60:	4803      	ldr	r0, [pc, #12]	@ (8022b70 <stdio_exit_handler+0x14>)
 8022b62:	f000 b869 	b.w	8022c38 <_fwalk_sglue>
 8022b66:	bf00      	nop
 8022b68:	2000002c 	.word	0x2000002c
 8022b6c:	080231d9 	.word	0x080231d9
 8022b70:	2000003c 	.word	0x2000003c

08022b74 <cleanup_stdio>:
 8022b74:	6841      	ldr	r1, [r0, #4]
 8022b76:	4b0c      	ldr	r3, [pc, #48]	@ (8022ba8 <cleanup_stdio+0x34>)
 8022b78:	4299      	cmp	r1, r3
 8022b7a:	b510      	push	{r4, lr}
 8022b7c:	4604      	mov	r4, r0
 8022b7e:	d001      	beq.n	8022b84 <cleanup_stdio+0x10>
 8022b80:	f000 fb2a 	bl	80231d8 <_fflush_r>
 8022b84:	68a1      	ldr	r1, [r4, #8]
 8022b86:	4b09      	ldr	r3, [pc, #36]	@ (8022bac <cleanup_stdio+0x38>)
 8022b88:	4299      	cmp	r1, r3
 8022b8a:	d002      	beq.n	8022b92 <cleanup_stdio+0x1e>
 8022b8c:	4620      	mov	r0, r4
 8022b8e:	f000 fb23 	bl	80231d8 <_fflush_r>
 8022b92:	68e1      	ldr	r1, [r4, #12]
 8022b94:	4b06      	ldr	r3, [pc, #24]	@ (8022bb0 <cleanup_stdio+0x3c>)
 8022b96:	4299      	cmp	r1, r3
 8022b98:	d004      	beq.n	8022ba4 <cleanup_stdio+0x30>
 8022b9a:	4620      	mov	r0, r4
 8022b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ba0:	f000 bb1a 	b.w	80231d8 <_fflush_r>
 8022ba4:	bd10      	pop	{r4, pc}
 8022ba6:	bf00      	nop
 8022ba8:	20002574 	.word	0x20002574
 8022bac:	200025dc 	.word	0x200025dc
 8022bb0:	20002644 	.word	0x20002644

08022bb4 <global_stdio_init.part.0>:
 8022bb4:	b510      	push	{r4, lr}
 8022bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8022be4 <global_stdio_init.part.0+0x30>)
 8022bb8:	4c0b      	ldr	r4, [pc, #44]	@ (8022be8 <global_stdio_init.part.0+0x34>)
 8022bba:	4a0c      	ldr	r2, [pc, #48]	@ (8022bec <global_stdio_init.part.0+0x38>)
 8022bbc:	601a      	str	r2, [r3, #0]
 8022bbe:	4620      	mov	r0, r4
 8022bc0:	2200      	movs	r2, #0
 8022bc2:	2104      	movs	r1, #4
 8022bc4:	f7ff ff94 	bl	8022af0 <std>
 8022bc8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022bcc:	2201      	movs	r2, #1
 8022bce:	2109      	movs	r1, #9
 8022bd0:	f7ff ff8e 	bl	8022af0 <std>
 8022bd4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8022bd8:	2202      	movs	r2, #2
 8022bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bde:	2112      	movs	r1, #18
 8022be0:	f7ff bf86 	b.w	8022af0 <std>
 8022be4:	200026ac 	.word	0x200026ac
 8022be8:	20002574 	.word	0x20002574
 8022bec:	08022b5d 	.word	0x08022b5d

08022bf0 <__sfp_lock_acquire>:
 8022bf0:	4801      	ldr	r0, [pc, #4]	@ (8022bf8 <__sfp_lock_acquire+0x8>)
 8022bf2:	f000 b94c 	b.w	8022e8e <__retarget_lock_acquire_recursive>
 8022bf6:	bf00      	nop
 8022bf8:	200026b5 	.word	0x200026b5

08022bfc <__sfp_lock_release>:
 8022bfc:	4801      	ldr	r0, [pc, #4]	@ (8022c04 <__sfp_lock_release+0x8>)
 8022bfe:	f000 b947 	b.w	8022e90 <__retarget_lock_release_recursive>
 8022c02:	bf00      	nop
 8022c04:	200026b5 	.word	0x200026b5

08022c08 <__sinit>:
 8022c08:	b510      	push	{r4, lr}
 8022c0a:	4604      	mov	r4, r0
 8022c0c:	f7ff fff0 	bl	8022bf0 <__sfp_lock_acquire>
 8022c10:	6a23      	ldr	r3, [r4, #32]
 8022c12:	b11b      	cbz	r3, 8022c1c <__sinit+0x14>
 8022c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c18:	f7ff bff0 	b.w	8022bfc <__sfp_lock_release>
 8022c1c:	4b04      	ldr	r3, [pc, #16]	@ (8022c30 <__sinit+0x28>)
 8022c1e:	6223      	str	r3, [r4, #32]
 8022c20:	4b04      	ldr	r3, [pc, #16]	@ (8022c34 <__sinit+0x2c>)
 8022c22:	681b      	ldr	r3, [r3, #0]
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	d1f5      	bne.n	8022c14 <__sinit+0xc>
 8022c28:	f7ff ffc4 	bl	8022bb4 <global_stdio_init.part.0>
 8022c2c:	e7f2      	b.n	8022c14 <__sinit+0xc>
 8022c2e:	bf00      	nop
 8022c30:	08022b75 	.word	0x08022b75
 8022c34:	200026ac 	.word	0x200026ac

08022c38 <_fwalk_sglue>:
 8022c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c3c:	4607      	mov	r7, r0
 8022c3e:	4688      	mov	r8, r1
 8022c40:	4614      	mov	r4, r2
 8022c42:	2600      	movs	r6, #0
 8022c44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022c48:	f1b9 0901 	subs.w	r9, r9, #1
 8022c4c:	d505      	bpl.n	8022c5a <_fwalk_sglue+0x22>
 8022c4e:	6824      	ldr	r4, [r4, #0]
 8022c50:	2c00      	cmp	r4, #0
 8022c52:	d1f7      	bne.n	8022c44 <_fwalk_sglue+0xc>
 8022c54:	4630      	mov	r0, r6
 8022c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022c5a:	89ab      	ldrh	r3, [r5, #12]
 8022c5c:	2b01      	cmp	r3, #1
 8022c5e:	d907      	bls.n	8022c70 <_fwalk_sglue+0x38>
 8022c60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022c64:	3301      	adds	r3, #1
 8022c66:	d003      	beq.n	8022c70 <_fwalk_sglue+0x38>
 8022c68:	4629      	mov	r1, r5
 8022c6a:	4638      	mov	r0, r7
 8022c6c:	47c0      	blx	r8
 8022c6e:	4306      	orrs	r6, r0
 8022c70:	3568      	adds	r5, #104	@ 0x68
 8022c72:	e7e9      	b.n	8022c48 <_fwalk_sglue+0x10>

08022c74 <__sread>:
 8022c74:	b510      	push	{r4, lr}
 8022c76:	460c      	mov	r4, r1
 8022c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c7c:	f000 f8b8 	bl	8022df0 <_read_r>
 8022c80:	2800      	cmp	r0, #0
 8022c82:	bfab      	itete	ge
 8022c84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022c86:	89a3      	ldrhlt	r3, [r4, #12]
 8022c88:	181b      	addge	r3, r3, r0
 8022c8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022c8e:	bfac      	ite	ge
 8022c90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022c92:	81a3      	strhlt	r3, [r4, #12]
 8022c94:	bd10      	pop	{r4, pc}

08022c96 <__swrite>:
 8022c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022c9a:	461f      	mov	r7, r3
 8022c9c:	898b      	ldrh	r3, [r1, #12]
 8022c9e:	05db      	lsls	r3, r3, #23
 8022ca0:	4605      	mov	r5, r0
 8022ca2:	460c      	mov	r4, r1
 8022ca4:	4616      	mov	r6, r2
 8022ca6:	d505      	bpl.n	8022cb4 <__swrite+0x1e>
 8022ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cac:	2302      	movs	r3, #2
 8022cae:	2200      	movs	r2, #0
 8022cb0:	f000 f88c 	bl	8022dcc <_lseek_r>
 8022cb4:	89a3      	ldrh	r3, [r4, #12]
 8022cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022cbe:	81a3      	strh	r3, [r4, #12]
 8022cc0:	4632      	mov	r2, r6
 8022cc2:	463b      	mov	r3, r7
 8022cc4:	4628      	mov	r0, r5
 8022cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022cca:	f000 b8a3 	b.w	8022e14 <_write_r>

08022cce <__sseek>:
 8022cce:	b510      	push	{r4, lr}
 8022cd0:	460c      	mov	r4, r1
 8022cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cd6:	f000 f879 	bl	8022dcc <_lseek_r>
 8022cda:	1c43      	adds	r3, r0, #1
 8022cdc:	89a3      	ldrh	r3, [r4, #12]
 8022cde:	bf15      	itete	ne
 8022ce0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022ce2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022ce6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022cea:	81a3      	strheq	r3, [r4, #12]
 8022cec:	bf18      	it	ne
 8022cee:	81a3      	strhne	r3, [r4, #12]
 8022cf0:	bd10      	pop	{r4, pc}

08022cf2 <__sclose>:
 8022cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cf6:	f000 b859 	b.w	8022dac <_close_r>

08022cfa <memcmp>:
 8022cfa:	b510      	push	{r4, lr}
 8022cfc:	3901      	subs	r1, #1
 8022cfe:	4402      	add	r2, r0
 8022d00:	4290      	cmp	r0, r2
 8022d02:	d101      	bne.n	8022d08 <memcmp+0xe>
 8022d04:	2000      	movs	r0, #0
 8022d06:	e005      	b.n	8022d14 <memcmp+0x1a>
 8022d08:	7803      	ldrb	r3, [r0, #0]
 8022d0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022d0e:	42a3      	cmp	r3, r4
 8022d10:	d001      	beq.n	8022d16 <memcmp+0x1c>
 8022d12:	1b18      	subs	r0, r3, r4
 8022d14:	bd10      	pop	{r4, pc}
 8022d16:	3001      	adds	r0, #1
 8022d18:	e7f2      	b.n	8022d00 <memcmp+0x6>

08022d1a <memmove>:
 8022d1a:	4288      	cmp	r0, r1
 8022d1c:	b510      	push	{r4, lr}
 8022d1e:	eb01 0402 	add.w	r4, r1, r2
 8022d22:	d902      	bls.n	8022d2a <memmove+0x10>
 8022d24:	4284      	cmp	r4, r0
 8022d26:	4623      	mov	r3, r4
 8022d28:	d807      	bhi.n	8022d3a <memmove+0x20>
 8022d2a:	1e43      	subs	r3, r0, #1
 8022d2c:	42a1      	cmp	r1, r4
 8022d2e:	d008      	beq.n	8022d42 <memmove+0x28>
 8022d30:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d34:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022d38:	e7f8      	b.n	8022d2c <memmove+0x12>
 8022d3a:	4402      	add	r2, r0
 8022d3c:	4601      	mov	r1, r0
 8022d3e:	428a      	cmp	r2, r1
 8022d40:	d100      	bne.n	8022d44 <memmove+0x2a>
 8022d42:	bd10      	pop	{r4, pc}
 8022d44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022d48:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022d4c:	e7f7      	b.n	8022d3e <memmove+0x24>
	...

08022d50 <strcasecmp>:
 8022d50:	b530      	push	{r4, r5, lr}
 8022d52:	4d0b      	ldr	r5, [pc, #44]	@ (8022d80 <strcasecmp+0x30>)
 8022d54:	4604      	mov	r4, r0
 8022d56:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022d5a:	5cea      	ldrb	r2, [r5, r3]
 8022d5c:	f002 0203 	and.w	r2, r2, #3
 8022d60:	2a01      	cmp	r2, #1
 8022d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022d66:	5ca8      	ldrb	r0, [r5, r2]
 8022d68:	f000 0003 	and.w	r0, r0, #3
 8022d6c:	bf08      	it	eq
 8022d6e:	3320      	addeq	r3, #32
 8022d70:	2801      	cmp	r0, #1
 8022d72:	bf08      	it	eq
 8022d74:	3220      	addeq	r2, #32
 8022d76:	1a98      	subs	r0, r3, r2
 8022d78:	d101      	bne.n	8022d7e <strcasecmp+0x2e>
 8022d7a:	2a00      	cmp	r2, #0
 8022d7c:	d1eb      	bne.n	8022d56 <strcasecmp+0x6>
 8022d7e:	bd30      	pop	{r4, r5, pc}
 8022d80:	08027204 	.word	0x08027204

08022d84 <strncpy>:
 8022d84:	b510      	push	{r4, lr}
 8022d86:	3901      	subs	r1, #1
 8022d88:	4603      	mov	r3, r0
 8022d8a:	b132      	cbz	r2, 8022d9a <strncpy+0x16>
 8022d8c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022d90:	f803 4b01 	strb.w	r4, [r3], #1
 8022d94:	3a01      	subs	r2, #1
 8022d96:	2c00      	cmp	r4, #0
 8022d98:	d1f7      	bne.n	8022d8a <strncpy+0x6>
 8022d9a:	441a      	add	r2, r3
 8022d9c:	2100      	movs	r1, #0
 8022d9e:	4293      	cmp	r3, r2
 8022da0:	d100      	bne.n	8022da4 <strncpy+0x20>
 8022da2:	bd10      	pop	{r4, pc}
 8022da4:	f803 1b01 	strb.w	r1, [r3], #1
 8022da8:	e7f9      	b.n	8022d9e <strncpy+0x1a>
	...

08022dac <_close_r>:
 8022dac:	b538      	push	{r3, r4, r5, lr}
 8022dae:	4d06      	ldr	r5, [pc, #24]	@ (8022dc8 <_close_r+0x1c>)
 8022db0:	2300      	movs	r3, #0
 8022db2:	4604      	mov	r4, r0
 8022db4:	4608      	mov	r0, r1
 8022db6:	602b      	str	r3, [r5, #0]
 8022db8:	f7df fcb8 	bl	800272c <_close>
 8022dbc:	1c43      	adds	r3, r0, #1
 8022dbe:	d102      	bne.n	8022dc6 <_close_r+0x1a>
 8022dc0:	682b      	ldr	r3, [r5, #0]
 8022dc2:	b103      	cbz	r3, 8022dc6 <_close_r+0x1a>
 8022dc4:	6023      	str	r3, [r4, #0]
 8022dc6:	bd38      	pop	{r3, r4, r5, pc}
 8022dc8:	200026b0 	.word	0x200026b0

08022dcc <_lseek_r>:
 8022dcc:	b538      	push	{r3, r4, r5, lr}
 8022dce:	4d07      	ldr	r5, [pc, #28]	@ (8022dec <_lseek_r+0x20>)
 8022dd0:	4604      	mov	r4, r0
 8022dd2:	4608      	mov	r0, r1
 8022dd4:	4611      	mov	r1, r2
 8022dd6:	2200      	movs	r2, #0
 8022dd8:	602a      	str	r2, [r5, #0]
 8022dda:	461a      	mov	r2, r3
 8022ddc:	f7df fccd 	bl	800277a <_lseek>
 8022de0:	1c43      	adds	r3, r0, #1
 8022de2:	d102      	bne.n	8022dea <_lseek_r+0x1e>
 8022de4:	682b      	ldr	r3, [r5, #0]
 8022de6:	b103      	cbz	r3, 8022dea <_lseek_r+0x1e>
 8022de8:	6023      	str	r3, [r4, #0]
 8022dea:	bd38      	pop	{r3, r4, r5, pc}
 8022dec:	200026b0 	.word	0x200026b0

08022df0 <_read_r>:
 8022df0:	b538      	push	{r3, r4, r5, lr}
 8022df2:	4d07      	ldr	r5, [pc, #28]	@ (8022e10 <_read_r+0x20>)
 8022df4:	4604      	mov	r4, r0
 8022df6:	4608      	mov	r0, r1
 8022df8:	4611      	mov	r1, r2
 8022dfa:	2200      	movs	r2, #0
 8022dfc:	602a      	str	r2, [r5, #0]
 8022dfe:	461a      	mov	r2, r3
 8022e00:	f7df fc5b 	bl	80026ba <_read>
 8022e04:	1c43      	adds	r3, r0, #1
 8022e06:	d102      	bne.n	8022e0e <_read_r+0x1e>
 8022e08:	682b      	ldr	r3, [r5, #0]
 8022e0a:	b103      	cbz	r3, 8022e0e <_read_r+0x1e>
 8022e0c:	6023      	str	r3, [r4, #0]
 8022e0e:	bd38      	pop	{r3, r4, r5, pc}
 8022e10:	200026b0 	.word	0x200026b0

08022e14 <_write_r>:
 8022e14:	b538      	push	{r3, r4, r5, lr}
 8022e16:	4d07      	ldr	r5, [pc, #28]	@ (8022e34 <_write_r+0x20>)
 8022e18:	4604      	mov	r4, r0
 8022e1a:	4608      	mov	r0, r1
 8022e1c:	4611      	mov	r1, r2
 8022e1e:	2200      	movs	r2, #0
 8022e20:	602a      	str	r2, [r5, #0]
 8022e22:	461a      	mov	r2, r3
 8022e24:	f7df fc66 	bl	80026f4 <_write>
 8022e28:	1c43      	adds	r3, r0, #1
 8022e2a:	d102      	bne.n	8022e32 <_write_r+0x1e>
 8022e2c:	682b      	ldr	r3, [r5, #0]
 8022e2e:	b103      	cbz	r3, 8022e32 <_write_r+0x1e>
 8022e30:	6023      	str	r3, [r4, #0]
 8022e32:	bd38      	pop	{r3, r4, r5, pc}
 8022e34:	200026b0 	.word	0x200026b0

08022e38 <__errno>:
 8022e38:	4b01      	ldr	r3, [pc, #4]	@ (8022e40 <__errno+0x8>)
 8022e3a:	6818      	ldr	r0, [r3, #0]
 8022e3c:	4770      	bx	lr
 8022e3e:	bf00      	nop
 8022e40:	20000038 	.word	0x20000038

08022e44 <__libc_init_array>:
 8022e44:	b570      	push	{r4, r5, r6, lr}
 8022e46:	4d0d      	ldr	r5, [pc, #52]	@ (8022e7c <__libc_init_array+0x38>)
 8022e48:	4c0d      	ldr	r4, [pc, #52]	@ (8022e80 <__libc_init_array+0x3c>)
 8022e4a:	1b64      	subs	r4, r4, r5
 8022e4c:	10a4      	asrs	r4, r4, #2
 8022e4e:	2600      	movs	r6, #0
 8022e50:	42a6      	cmp	r6, r4
 8022e52:	d109      	bne.n	8022e68 <__libc_init_array+0x24>
 8022e54:	4d0b      	ldr	r5, [pc, #44]	@ (8022e84 <__libc_init_array+0x40>)
 8022e56:	4c0c      	ldr	r4, [pc, #48]	@ (8022e88 <__libc_init_array+0x44>)
 8022e58:	f000 fe3a 	bl	8023ad0 <_init>
 8022e5c:	1b64      	subs	r4, r4, r5
 8022e5e:	10a4      	asrs	r4, r4, #2
 8022e60:	2600      	movs	r6, #0
 8022e62:	42a6      	cmp	r6, r4
 8022e64:	d105      	bne.n	8022e72 <__libc_init_array+0x2e>
 8022e66:	bd70      	pop	{r4, r5, r6, pc}
 8022e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8022e6c:	4798      	blx	r3
 8022e6e:	3601      	adds	r6, #1
 8022e70:	e7ee      	b.n	8022e50 <__libc_init_array+0xc>
 8022e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8022e76:	4798      	blx	r3
 8022e78:	3601      	adds	r6, #1
 8022e7a:	e7f2      	b.n	8022e62 <__libc_init_array+0x1e>
 8022e7c:	08027340 	.word	0x08027340
 8022e80:	08027340 	.word	0x08027340
 8022e84:	08027340 	.word	0x08027340
 8022e88:	08027344 	.word	0x08027344

08022e8c <__retarget_lock_init_recursive>:
 8022e8c:	4770      	bx	lr

08022e8e <__retarget_lock_acquire_recursive>:
 8022e8e:	4770      	bx	lr

08022e90 <__retarget_lock_release_recursive>:
 8022e90:	4770      	bx	lr
	...

08022e94 <__assert_func>:
 8022e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022e96:	4614      	mov	r4, r2
 8022e98:	461a      	mov	r2, r3
 8022e9a:	4b09      	ldr	r3, [pc, #36]	@ (8022ec0 <__assert_func+0x2c>)
 8022e9c:	681b      	ldr	r3, [r3, #0]
 8022e9e:	4605      	mov	r5, r0
 8022ea0:	68d8      	ldr	r0, [r3, #12]
 8022ea2:	b954      	cbnz	r4, 8022eba <__assert_func+0x26>
 8022ea4:	4b07      	ldr	r3, [pc, #28]	@ (8022ec4 <__assert_func+0x30>)
 8022ea6:	461c      	mov	r4, r3
 8022ea8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022eac:	9100      	str	r1, [sp, #0]
 8022eae:	462b      	mov	r3, r5
 8022eb0:	4905      	ldr	r1, [pc, #20]	@ (8022ec8 <__assert_func+0x34>)
 8022eb2:	f000 f9b9 	bl	8023228 <fiprintf>
 8022eb6:	f000 f9d9 	bl	802326c <abort>
 8022eba:	4b04      	ldr	r3, [pc, #16]	@ (8022ecc <__assert_func+0x38>)
 8022ebc:	e7f4      	b.n	8022ea8 <__assert_func+0x14>
 8022ebe:	bf00      	nop
 8022ec0:	20000038 	.word	0x20000038
 8022ec4:	08027202 	.word	0x08027202
 8022ec8:	080271d4 	.word	0x080271d4
 8022ecc:	080271c7 	.word	0x080271c7

08022ed0 <_free_r>:
 8022ed0:	b538      	push	{r3, r4, r5, lr}
 8022ed2:	4605      	mov	r5, r0
 8022ed4:	2900      	cmp	r1, #0
 8022ed6:	d041      	beq.n	8022f5c <_free_r+0x8c>
 8022ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022edc:	1f0c      	subs	r4, r1, #4
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	bfb8      	it	lt
 8022ee2:	18e4      	addlt	r4, r4, r3
 8022ee4:	f000 f8e8 	bl	80230b8 <__malloc_lock>
 8022ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8022f60 <_free_r+0x90>)
 8022eea:	6813      	ldr	r3, [r2, #0]
 8022eec:	b933      	cbnz	r3, 8022efc <_free_r+0x2c>
 8022eee:	6063      	str	r3, [r4, #4]
 8022ef0:	6014      	str	r4, [r2, #0]
 8022ef2:	4628      	mov	r0, r5
 8022ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022ef8:	f000 b8e4 	b.w	80230c4 <__malloc_unlock>
 8022efc:	42a3      	cmp	r3, r4
 8022efe:	d908      	bls.n	8022f12 <_free_r+0x42>
 8022f00:	6820      	ldr	r0, [r4, #0]
 8022f02:	1821      	adds	r1, r4, r0
 8022f04:	428b      	cmp	r3, r1
 8022f06:	bf01      	itttt	eq
 8022f08:	6819      	ldreq	r1, [r3, #0]
 8022f0a:	685b      	ldreq	r3, [r3, #4]
 8022f0c:	1809      	addeq	r1, r1, r0
 8022f0e:	6021      	streq	r1, [r4, #0]
 8022f10:	e7ed      	b.n	8022eee <_free_r+0x1e>
 8022f12:	461a      	mov	r2, r3
 8022f14:	685b      	ldr	r3, [r3, #4]
 8022f16:	b10b      	cbz	r3, 8022f1c <_free_r+0x4c>
 8022f18:	42a3      	cmp	r3, r4
 8022f1a:	d9fa      	bls.n	8022f12 <_free_r+0x42>
 8022f1c:	6811      	ldr	r1, [r2, #0]
 8022f1e:	1850      	adds	r0, r2, r1
 8022f20:	42a0      	cmp	r0, r4
 8022f22:	d10b      	bne.n	8022f3c <_free_r+0x6c>
 8022f24:	6820      	ldr	r0, [r4, #0]
 8022f26:	4401      	add	r1, r0
 8022f28:	1850      	adds	r0, r2, r1
 8022f2a:	4283      	cmp	r3, r0
 8022f2c:	6011      	str	r1, [r2, #0]
 8022f2e:	d1e0      	bne.n	8022ef2 <_free_r+0x22>
 8022f30:	6818      	ldr	r0, [r3, #0]
 8022f32:	685b      	ldr	r3, [r3, #4]
 8022f34:	6053      	str	r3, [r2, #4]
 8022f36:	4408      	add	r0, r1
 8022f38:	6010      	str	r0, [r2, #0]
 8022f3a:	e7da      	b.n	8022ef2 <_free_r+0x22>
 8022f3c:	d902      	bls.n	8022f44 <_free_r+0x74>
 8022f3e:	230c      	movs	r3, #12
 8022f40:	602b      	str	r3, [r5, #0]
 8022f42:	e7d6      	b.n	8022ef2 <_free_r+0x22>
 8022f44:	6820      	ldr	r0, [r4, #0]
 8022f46:	1821      	adds	r1, r4, r0
 8022f48:	428b      	cmp	r3, r1
 8022f4a:	bf04      	itt	eq
 8022f4c:	6819      	ldreq	r1, [r3, #0]
 8022f4e:	685b      	ldreq	r3, [r3, #4]
 8022f50:	6063      	str	r3, [r4, #4]
 8022f52:	bf04      	itt	eq
 8022f54:	1809      	addeq	r1, r1, r0
 8022f56:	6021      	streq	r1, [r4, #0]
 8022f58:	6054      	str	r4, [r2, #4]
 8022f5a:	e7ca      	b.n	8022ef2 <_free_r+0x22>
 8022f5c:	bd38      	pop	{r3, r4, r5, pc}
 8022f5e:	bf00      	nop
 8022f60:	200026bc 	.word	0x200026bc

08022f64 <malloc>:
 8022f64:	4b02      	ldr	r3, [pc, #8]	@ (8022f70 <malloc+0xc>)
 8022f66:	4601      	mov	r1, r0
 8022f68:	6818      	ldr	r0, [r3, #0]
 8022f6a:	f000 b825 	b.w	8022fb8 <_malloc_r>
 8022f6e:	bf00      	nop
 8022f70:	20000038 	.word	0x20000038

08022f74 <sbrk_aligned>:
 8022f74:	b570      	push	{r4, r5, r6, lr}
 8022f76:	4e0f      	ldr	r6, [pc, #60]	@ (8022fb4 <sbrk_aligned+0x40>)
 8022f78:	460c      	mov	r4, r1
 8022f7a:	6831      	ldr	r1, [r6, #0]
 8022f7c:	4605      	mov	r5, r0
 8022f7e:	b911      	cbnz	r1, 8022f86 <sbrk_aligned+0x12>
 8022f80:	f000 f964 	bl	802324c <_sbrk_r>
 8022f84:	6030      	str	r0, [r6, #0]
 8022f86:	4621      	mov	r1, r4
 8022f88:	4628      	mov	r0, r5
 8022f8a:	f000 f95f 	bl	802324c <_sbrk_r>
 8022f8e:	1c43      	adds	r3, r0, #1
 8022f90:	d103      	bne.n	8022f9a <sbrk_aligned+0x26>
 8022f92:	f04f 34ff 	mov.w	r4, #4294967295
 8022f96:	4620      	mov	r0, r4
 8022f98:	bd70      	pop	{r4, r5, r6, pc}
 8022f9a:	1cc4      	adds	r4, r0, #3
 8022f9c:	f024 0403 	bic.w	r4, r4, #3
 8022fa0:	42a0      	cmp	r0, r4
 8022fa2:	d0f8      	beq.n	8022f96 <sbrk_aligned+0x22>
 8022fa4:	1a21      	subs	r1, r4, r0
 8022fa6:	4628      	mov	r0, r5
 8022fa8:	f000 f950 	bl	802324c <_sbrk_r>
 8022fac:	3001      	adds	r0, #1
 8022fae:	d1f2      	bne.n	8022f96 <sbrk_aligned+0x22>
 8022fb0:	e7ef      	b.n	8022f92 <sbrk_aligned+0x1e>
 8022fb2:	bf00      	nop
 8022fb4:	200026b8 	.word	0x200026b8

08022fb8 <_malloc_r>:
 8022fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022fbc:	1ccd      	adds	r5, r1, #3
 8022fbe:	f025 0503 	bic.w	r5, r5, #3
 8022fc2:	3508      	adds	r5, #8
 8022fc4:	2d0c      	cmp	r5, #12
 8022fc6:	bf38      	it	cc
 8022fc8:	250c      	movcc	r5, #12
 8022fca:	2d00      	cmp	r5, #0
 8022fcc:	4606      	mov	r6, r0
 8022fce:	db01      	blt.n	8022fd4 <_malloc_r+0x1c>
 8022fd0:	42a9      	cmp	r1, r5
 8022fd2:	d904      	bls.n	8022fde <_malloc_r+0x26>
 8022fd4:	230c      	movs	r3, #12
 8022fd6:	6033      	str	r3, [r6, #0]
 8022fd8:	2000      	movs	r0, #0
 8022fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80230b4 <_malloc_r+0xfc>
 8022fe2:	f000 f869 	bl	80230b8 <__malloc_lock>
 8022fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8022fea:	461c      	mov	r4, r3
 8022fec:	bb44      	cbnz	r4, 8023040 <_malloc_r+0x88>
 8022fee:	4629      	mov	r1, r5
 8022ff0:	4630      	mov	r0, r6
 8022ff2:	f7ff ffbf 	bl	8022f74 <sbrk_aligned>
 8022ff6:	1c43      	adds	r3, r0, #1
 8022ff8:	4604      	mov	r4, r0
 8022ffa:	d158      	bne.n	80230ae <_malloc_r+0xf6>
 8022ffc:	f8d8 4000 	ldr.w	r4, [r8]
 8023000:	4627      	mov	r7, r4
 8023002:	2f00      	cmp	r7, #0
 8023004:	d143      	bne.n	802308e <_malloc_r+0xd6>
 8023006:	2c00      	cmp	r4, #0
 8023008:	d04b      	beq.n	80230a2 <_malloc_r+0xea>
 802300a:	6823      	ldr	r3, [r4, #0]
 802300c:	4639      	mov	r1, r7
 802300e:	4630      	mov	r0, r6
 8023010:	eb04 0903 	add.w	r9, r4, r3
 8023014:	f000 f91a 	bl	802324c <_sbrk_r>
 8023018:	4581      	cmp	r9, r0
 802301a:	d142      	bne.n	80230a2 <_malloc_r+0xea>
 802301c:	6821      	ldr	r1, [r4, #0]
 802301e:	1a6d      	subs	r5, r5, r1
 8023020:	4629      	mov	r1, r5
 8023022:	4630      	mov	r0, r6
 8023024:	f7ff ffa6 	bl	8022f74 <sbrk_aligned>
 8023028:	3001      	adds	r0, #1
 802302a:	d03a      	beq.n	80230a2 <_malloc_r+0xea>
 802302c:	6823      	ldr	r3, [r4, #0]
 802302e:	442b      	add	r3, r5
 8023030:	6023      	str	r3, [r4, #0]
 8023032:	f8d8 3000 	ldr.w	r3, [r8]
 8023036:	685a      	ldr	r2, [r3, #4]
 8023038:	bb62      	cbnz	r2, 8023094 <_malloc_r+0xdc>
 802303a:	f8c8 7000 	str.w	r7, [r8]
 802303e:	e00f      	b.n	8023060 <_malloc_r+0xa8>
 8023040:	6822      	ldr	r2, [r4, #0]
 8023042:	1b52      	subs	r2, r2, r5
 8023044:	d420      	bmi.n	8023088 <_malloc_r+0xd0>
 8023046:	2a0b      	cmp	r2, #11
 8023048:	d917      	bls.n	802307a <_malloc_r+0xc2>
 802304a:	1961      	adds	r1, r4, r5
 802304c:	42a3      	cmp	r3, r4
 802304e:	6025      	str	r5, [r4, #0]
 8023050:	bf18      	it	ne
 8023052:	6059      	strne	r1, [r3, #4]
 8023054:	6863      	ldr	r3, [r4, #4]
 8023056:	bf08      	it	eq
 8023058:	f8c8 1000 	streq.w	r1, [r8]
 802305c:	5162      	str	r2, [r4, r5]
 802305e:	604b      	str	r3, [r1, #4]
 8023060:	4630      	mov	r0, r6
 8023062:	f000 f82f 	bl	80230c4 <__malloc_unlock>
 8023066:	f104 000b 	add.w	r0, r4, #11
 802306a:	1d23      	adds	r3, r4, #4
 802306c:	f020 0007 	bic.w	r0, r0, #7
 8023070:	1ac2      	subs	r2, r0, r3
 8023072:	bf1c      	itt	ne
 8023074:	1a1b      	subne	r3, r3, r0
 8023076:	50a3      	strne	r3, [r4, r2]
 8023078:	e7af      	b.n	8022fda <_malloc_r+0x22>
 802307a:	6862      	ldr	r2, [r4, #4]
 802307c:	42a3      	cmp	r3, r4
 802307e:	bf0c      	ite	eq
 8023080:	f8c8 2000 	streq.w	r2, [r8]
 8023084:	605a      	strne	r2, [r3, #4]
 8023086:	e7eb      	b.n	8023060 <_malloc_r+0xa8>
 8023088:	4623      	mov	r3, r4
 802308a:	6864      	ldr	r4, [r4, #4]
 802308c:	e7ae      	b.n	8022fec <_malloc_r+0x34>
 802308e:	463c      	mov	r4, r7
 8023090:	687f      	ldr	r7, [r7, #4]
 8023092:	e7b6      	b.n	8023002 <_malloc_r+0x4a>
 8023094:	461a      	mov	r2, r3
 8023096:	685b      	ldr	r3, [r3, #4]
 8023098:	42a3      	cmp	r3, r4
 802309a:	d1fb      	bne.n	8023094 <_malloc_r+0xdc>
 802309c:	2300      	movs	r3, #0
 802309e:	6053      	str	r3, [r2, #4]
 80230a0:	e7de      	b.n	8023060 <_malloc_r+0xa8>
 80230a2:	230c      	movs	r3, #12
 80230a4:	6033      	str	r3, [r6, #0]
 80230a6:	4630      	mov	r0, r6
 80230a8:	f000 f80c 	bl	80230c4 <__malloc_unlock>
 80230ac:	e794      	b.n	8022fd8 <_malloc_r+0x20>
 80230ae:	6005      	str	r5, [r0, #0]
 80230b0:	e7d6      	b.n	8023060 <_malloc_r+0xa8>
 80230b2:	bf00      	nop
 80230b4:	200026bc 	.word	0x200026bc

080230b8 <__malloc_lock>:
 80230b8:	4801      	ldr	r0, [pc, #4]	@ (80230c0 <__malloc_lock+0x8>)
 80230ba:	f7ff bee8 	b.w	8022e8e <__retarget_lock_acquire_recursive>
 80230be:	bf00      	nop
 80230c0:	200026b4 	.word	0x200026b4

080230c4 <__malloc_unlock>:
 80230c4:	4801      	ldr	r0, [pc, #4]	@ (80230cc <__malloc_unlock+0x8>)
 80230c6:	f7ff bee3 	b.w	8022e90 <__retarget_lock_release_recursive>
 80230ca:	bf00      	nop
 80230cc:	200026b4 	.word	0x200026b4

080230d0 <__sflush_r>:
 80230d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80230d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80230d8:	0716      	lsls	r6, r2, #28
 80230da:	4605      	mov	r5, r0
 80230dc:	460c      	mov	r4, r1
 80230de:	d454      	bmi.n	802318a <__sflush_r+0xba>
 80230e0:	684b      	ldr	r3, [r1, #4]
 80230e2:	2b00      	cmp	r3, #0
 80230e4:	dc02      	bgt.n	80230ec <__sflush_r+0x1c>
 80230e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	dd48      	ble.n	802317e <__sflush_r+0xae>
 80230ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80230ee:	2e00      	cmp	r6, #0
 80230f0:	d045      	beq.n	802317e <__sflush_r+0xae>
 80230f2:	2300      	movs	r3, #0
 80230f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80230f8:	682f      	ldr	r7, [r5, #0]
 80230fa:	6a21      	ldr	r1, [r4, #32]
 80230fc:	602b      	str	r3, [r5, #0]
 80230fe:	d030      	beq.n	8023162 <__sflush_r+0x92>
 8023100:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023102:	89a3      	ldrh	r3, [r4, #12]
 8023104:	0759      	lsls	r1, r3, #29
 8023106:	d505      	bpl.n	8023114 <__sflush_r+0x44>
 8023108:	6863      	ldr	r3, [r4, #4]
 802310a:	1ad2      	subs	r2, r2, r3
 802310c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802310e:	b10b      	cbz	r3, 8023114 <__sflush_r+0x44>
 8023110:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023112:	1ad2      	subs	r2, r2, r3
 8023114:	2300      	movs	r3, #0
 8023116:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023118:	6a21      	ldr	r1, [r4, #32]
 802311a:	4628      	mov	r0, r5
 802311c:	47b0      	blx	r6
 802311e:	1c43      	adds	r3, r0, #1
 8023120:	89a3      	ldrh	r3, [r4, #12]
 8023122:	d106      	bne.n	8023132 <__sflush_r+0x62>
 8023124:	6829      	ldr	r1, [r5, #0]
 8023126:	291d      	cmp	r1, #29
 8023128:	d82b      	bhi.n	8023182 <__sflush_r+0xb2>
 802312a:	4a2a      	ldr	r2, [pc, #168]	@ (80231d4 <__sflush_r+0x104>)
 802312c:	410a      	asrs	r2, r1
 802312e:	07d6      	lsls	r6, r2, #31
 8023130:	d427      	bmi.n	8023182 <__sflush_r+0xb2>
 8023132:	2200      	movs	r2, #0
 8023134:	6062      	str	r2, [r4, #4]
 8023136:	04d9      	lsls	r1, r3, #19
 8023138:	6922      	ldr	r2, [r4, #16]
 802313a:	6022      	str	r2, [r4, #0]
 802313c:	d504      	bpl.n	8023148 <__sflush_r+0x78>
 802313e:	1c42      	adds	r2, r0, #1
 8023140:	d101      	bne.n	8023146 <__sflush_r+0x76>
 8023142:	682b      	ldr	r3, [r5, #0]
 8023144:	b903      	cbnz	r3, 8023148 <__sflush_r+0x78>
 8023146:	6560      	str	r0, [r4, #84]	@ 0x54
 8023148:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802314a:	602f      	str	r7, [r5, #0]
 802314c:	b1b9      	cbz	r1, 802317e <__sflush_r+0xae>
 802314e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023152:	4299      	cmp	r1, r3
 8023154:	d002      	beq.n	802315c <__sflush_r+0x8c>
 8023156:	4628      	mov	r0, r5
 8023158:	f7ff feba 	bl	8022ed0 <_free_r>
 802315c:	2300      	movs	r3, #0
 802315e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023160:	e00d      	b.n	802317e <__sflush_r+0xae>
 8023162:	2301      	movs	r3, #1
 8023164:	4628      	mov	r0, r5
 8023166:	47b0      	blx	r6
 8023168:	4602      	mov	r2, r0
 802316a:	1c50      	adds	r0, r2, #1
 802316c:	d1c9      	bne.n	8023102 <__sflush_r+0x32>
 802316e:	682b      	ldr	r3, [r5, #0]
 8023170:	2b00      	cmp	r3, #0
 8023172:	d0c6      	beq.n	8023102 <__sflush_r+0x32>
 8023174:	2b1d      	cmp	r3, #29
 8023176:	d001      	beq.n	802317c <__sflush_r+0xac>
 8023178:	2b16      	cmp	r3, #22
 802317a:	d11e      	bne.n	80231ba <__sflush_r+0xea>
 802317c:	602f      	str	r7, [r5, #0]
 802317e:	2000      	movs	r0, #0
 8023180:	e022      	b.n	80231c8 <__sflush_r+0xf8>
 8023182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023186:	b21b      	sxth	r3, r3
 8023188:	e01b      	b.n	80231c2 <__sflush_r+0xf2>
 802318a:	690f      	ldr	r7, [r1, #16]
 802318c:	2f00      	cmp	r7, #0
 802318e:	d0f6      	beq.n	802317e <__sflush_r+0xae>
 8023190:	0793      	lsls	r3, r2, #30
 8023192:	680e      	ldr	r6, [r1, #0]
 8023194:	bf08      	it	eq
 8023196:	694b      	ldreq	r3, [r1, #20]
 8023198:	600f      	str	r7, [r1, #0]
 802319a:	bf18      	it	ne
 802319c:	2300      	movne	r3, #0
 802319e:	eba6 0807 	sub.w	r8, r6, r7
 80231a2:	608b      	str	r3, [r1, #8]
 80231a4:	f1b8 0f00 	cmp.w	r8, #0
 80231a8:	dde9      	ble.n	802317e <__sflush_r+0xae>
 80231aa:	6a21      	ldr	r1, [r4, #32]
 80231ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80231ae:	4643      	mov	r3, r8
 80231b0:	463a      	mov	r2, r7
 80231b2:	4628      	mov	r0, r5
 80231b4:	47b0      	blx	r6
 80231b6:	2800      	cmp	r0, #0
 80231b8:	dc08      	bgt.n	80231cc <__sflush_r+0xfc>
 80231ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80231c2:	81a3      	strh	r3, [r4, #12]
 80231c4:	f04f 30ff 	mov.w	r0, #4294967295
 80231c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80231cc:	4407      	add	r7, r0
 80231ce:	eba8 0800 	sub.w	r8, r8, r0
 80231d2:	e7e7      	b.n	80231a4 <__sflush_r+0xd4>
 80231d4:	dfbffffe 	.word	0xdfbffffe

080231d8 <_fflush_r>:
 80231d8:	b538      	push	{r3, r4, r5, lr}
 80231da:	690b      	ldr	r3, [r1, #16]
 80231dc:	4605      	mov	r5, r0
 80231de:	460c      	mov	r4, r1
 80231e0:	b913      	cbnz	r3, 80231e8 <_fflush_r+0x10>
 80231e2:	2500      	movs	r5, #0
 80231e4:	4628      	mov	r0, r5
 80231e6:	bd38      	pop	{r3, r4, r5, pc}
 80231e8:	b118      	cbz	r0, 80231f2 <_fflush_r+0x1a>
 80231ea:	6a03      	ldr	r3, [r0, #32]
 80231ec:	b90b      	cbnz	r3, 80231f2 <_fflush_r+0x1a>
 80231ee:	f7ff fd0b 	bl	8022c08 <__sinit>
 80231f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231f6:	2b00      	cmp	r3, #0
 80231f8:	d0f3      	beq.n	80231e2 <_fflush_r+0xa>
 80231fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80231fc:	07d0      	lsls	r0, r2, #31
 80231fe:	d404      	bmi.n	802320a <_fflush_r+0x32>
 8023200:	0599      	lsls	r1, r3, #22
 8023202:	d402      	bmi.n	802320a <_fflush_r+0x32>
 8023204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023206:	f7ff fe42 	bl	8022e8e <__retarget_lock_acquire_recursive>
 802320a:	4628      	mov	r0, r5
 802320c:	4621      	mov	r1, r4
 802320e:	f7ff ff5f 	bl	80230d0 <__sflush_r>
 8023212:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023214:	07da      	lsls	r2, r3, #31
 8023216:	4605      	mov	r5, r0
 8023218:	d4e4      	bmi.n	80231e4 <_fflush_r+0xc>
 802321a:	89a3      	ldrh	r3, [r4, #12]
 802321c:	059b      	lsls	r3, r3, #22
 802321e:	d4e1      	bmi.n	80231e4 <_fflush_r+0xc>
 8023220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023222:	f7ff fe35 	bl	8022e90 <__retarget_lock_release_recursive>
 8023226:	e7dd      	b.n	80231e4 <_fflush_r+0xc>

08023228 <fiprintf>:
 8023228:	b40e      	push	{r1, r2, r3}
 802322a:	b503      	push	{r0, r1, lr}
 802322c:	4601      	mov	r1, r0
 802322e:	ab03      	add	r3, sp, #12
 8023230:	4805      	ldr	r0, [pc, #20]	@ (8023248 <fiprintf+0x20>)
 8023232:	f853 2b04 	ldr.w	r2, [r3], #4
 8023236:	6800      	ldr	r0, [r0, #0]
 8023238:	9301      	str	r3, [sp, #4]
 802323a:	f000 f847 	bl	80232cc <_vfiprintf_r>
 802323e:	b002      	add	sp, #8
 8023240:	f85d eb04 	ldr.w	lr, [sp], #4
 8023244:	b003      	add	sp, #12
 8023246:	4770      	bx	lr
 8023248:	20000038 	.word	0x20000038

0802324c <_sbrk_r>:
 802324c:	b538      	push	{r3, r4, r5, lr}
 802324e:	4d06      	ldr	r5, [pc, #24]	@ (8023268 <_sbrk_r+0x1c>)
 8023250:	2300      	movs	r3, #0
 8023252:	4604      	mov	r4, r0
 8023254:	4608      	mov	r0, r1
 8023256:	602b      	str	r3, [r5, #0]
 8023258:	f7df fa9c 	bl	8002794 <_sbrk>
 802325c:	1c43      	adds	r3, r0, #1
 802325e:	d102      	bne.n	8023266 <_sbrk_r+0x1a>
 8023260:	682b      	ldr	r3, [r5, #0]
 8023262:	b103      	cbz	r3, 8023266 <_sbrk_r+0x1a>
 8023264:	6023      	str	r3, [r4, #0]
 8023266:	bd38      	pop	{r3, r4, r5, pc}
 8023268:	200026b0 	.word	0x200026b0

0802326c <abort>:
 802326c:	b508      	push	{r3, lr}
 802326e:	2006      	movs	r0, #6
 8023270:	f000 fb8e 	bl	8023990 <raise>
 8023274:	2001      	movs	r0, #1
 8023276:	f7df fa15 	bl	80026a4 <_exit>

0802327a <__sfputc_r>:
 802327a:	6893      	ldr	r3, [r2, #8]
 802327c:	3b01      	subs	r3, #1
 802327e:	2b00      	cmp	r3, #0
 8023280:	b410      	push	{r4}
 8023282:	6093      	str	r3, [r2, #8]
 8023284:	da08      	bge.n	8023298 <__sfputc_r+0x1e>
 8023286:	6994      	ldr	r4, [r2, #24]
 8023288:	42a3      	cmp	r3, r4
 802328a:	db01      	blt.n	8023290 <__sfputc_r+0x16>
 802328c:	290a      	cmp	r1, #10
 802328e:	d103      	bne.n	8023298 <__sfputc_r+0x1e>
 8023290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023294:	f000 bac0 	b.w	8023818 <__swbuf_r>
 8023298:	6813      	ldr	r3, [r2, #0]
 802329a:	1c58      	adds	r0, r3, #1
 802329c:	6010      	str	r0, [r2, #0]
 802329e:	7019      	strb	r1, [r3, #0]
 80232a0:	4608      	mov	r0, r1
 80232a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80232a6:	4770      	bx	lr

080232a8 <__sfputs_r>:
 80232a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232aa:	4606      	mov	r6, r0
 80232ac:	460f      	mov	r7, r1
 80232ae:	4614      	mov	r4, r2
 80232b0:	18d5      	adds	r5, r2, r3
 80232b2:	42ac      	cmp	r4, r5
 80232b4:	d101      	bne.n	80232ba <__sfputs_r+0x12>
 80232b6:	2000      	movs	r0, #0
 80232b8:	e007      	b.n	80232ca <__sfputs_r+0x22>
 80232ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232be:	463a      	mov	r2, r7
 80232c0:	4630      	mov	r0, r6
 80232c2:	f7ff ffda 	bl	802327a <__sfputc_r>
 80232c6:	1c43      	adds	r3, r0, #1
 80232c8:	d1f3      	bne.n	80232b2 <__sfputs_r+0xa>
 80232ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080232cc <_vfiprintf_r>:
 80232cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232d0:	460d      	mov	r5, r1
 80232d2:	b09d      	sub	sp, #116	@ 0x74
 80232d4:	4614      	mov	r4, r2
 80232d6:	4698      	mov	r8, r3
 80232d8:	4606      	mov	r6, r0
 80232da:	b118      	cbz	r0, 80232e4 <_vfiprintf_r+0x18>
 80232dc:	6a03      	ldr	r3, [r0, #32]
 80232de:	b90b      	cbnz	r3, 80232e4 <_vfiprintf_r+0x18>
 80232e0:	f7ff fc92 	bl	8022c08 <__sinit>
 80232e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80232e6:	07d9      	lsls	r1, r3, #31
 80232e8:	d405      	bmi.n	80232f6 <_vfiprintf_r+0x2a>
 80232ea:	89ab      	ldrh	r3, [r5, #12]
 80232ec:	059a      	lsls	r2, r3, #22
 80232ee:	d402      	bmi.n	80232f6 <_vfiprintf_r+0x2a>
 80232f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80232f2:	f7ff fdcc 	bl	8022e8e <__retarget_lock_acquire_recursive>
 80232f6:	89ab      	ldrh	r3, [r5, #12]
 80232f8:	071b      	lsls	r3, r3, #28
 80232fa:	d501      	bpl.n	8023300 <_vfiprintf_r+0x34>
 80232fc:	692b      	ldr	r3, [r5, #16]
 80232fe:	b99b      	cbnz	r3, 8023328 <_vfiprintf_r+0x5c>
 8023300:	4629      	mov	r1, r5
 8023302:	4630      	mov	r0, r6
 8023304:	f000 fac6 	bl	8023894 <__swsetup_r>
 8023308:	b170      	cbz	r0, 8023328 <_vfiprintf_r+0x5c>
 802330a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802330c:	07dc      	lsls	r4, r3, #31
 802330e:	d504      	bpl.n	802331a <_vfiprintf_r+0x4e>
 8023310:	f04f 30ff 	mov.w	r0, #4294967295
 8023314:	b01d      	add	sp, #116	@ 0x74
 8023316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802331a:	89ab      	ldrh	r3, [r5, #12]
 802331c:	0598      	lsls	r0, r3, #22
 802331e:	d4f7      	bmi.n	8023310 <_vfiprintf_r+0x44>
 8023320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023322:	f7ff fdb5 	bl	8022e90 <__retarget_lock_release_recursive>
 8023326:	e7f3      	b.n	8023310 <_vfiprintf_r+0x44>
 8023328:	2300      	movs	r3, #0
 802332a:	9309      	str	r3, [sp, #36]	@ 0x24
 802332c:	2320      	movs	r3, #32
 802332e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023332:	f8cd 800c 	str.w	r8, [sp, #12]
 8023336:	2330      	movs	r3, #48	@ 0x30
 8023338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80234e8 <_vfiprintf_r+0x21c>
 802333c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023340:	f04f 0901 	mov.w	r9, #1
 8023344:	4623      	mov	r3, r4
 8023346:	469a      	mov	sl, r3
 8023348:	f813 2b01 	ldrb.w	r2, [r3], #1
 802334c:	b10a      	cbz	r2, 8023352 <_vfiprintf_r+0x86>
 802334e:	2a25      	cmp	r2, #37	@ 0x25
 8023350:	d1f9      	bne.n	8023346 <_vfiprintf_r+0x7a>
 8023352:	ebba 0b04 	subs.w	fp, sl, r4
 8023356:	d00b      	beq.n	8023370 <_vfiprintf_r+0xa4>
 8023358:	465b      	mov	r3, fp
 802335a:	4622      	mov	r2, r4
 802335c:	4629      	mov	r1, r5
 802335e:	4630      	mov	r0, r6
 8023360:	f7ff ffa2 	bl	80232a8 <__sfputs_r>
 8023364:	3001      	adds	r0, #1
 8023366:	f000 80a7 	beq.w	80234b8 <_vfiprintf_r+0x1ec>
 802336a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802336c:	445a      	add	r2, fp
 802336e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023370:	f89a 3000 	ldrb.w	r3, [sl]
 8023374:	2b00      	cmp	r3, #0
 8023376:	f000 809f 	beq.w	80234b8 <_vfiprintf_r+0x1ec>
 802337a:	2300      	movs	r3, #0
 802337c:	f04f 32ff 	mov.w	r2, #4294967295
 8023380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023384:	f10a 0a01 	add.w	sl, sl, #1
 8023388:	9304      	str	r3, [sp, #16]
 802338a:	9307      	str	r3, [sp, #28]
 802338c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023390:	931a      	str	r3, [sp, #104]	@ 0x68
 8023392:	4654      	mov	r4, sl
 8023394:	2205      	movs	r2, #5
 8023396:	f814 1b01 	ldrb.w	r1, [r4], #1
 802339a:	4853      	ldr	r0, [pc, #332]	@ (80234e8 <_vfiprintf_r+0x21c>)
 802339c:	f7dc ffb8 	bl	8000310 <memchr>
 80233a0:	9a04      	ldr	r2, [sp, #16]
 80233a2:	b9d8      	cbnz	r0, 80233dc <_vfiprintf_r+0x110>
 80233a4:	06d1      	lsls	r1, r2, #27
 80233a6:	bf44      	itt	mi
 80233a8:	2320      	movmi	r3, #32
 80233aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233ae:	0713      	lsls	r3, r2, #28
 80233b0:	bf44      	itt	mi
 80233b2:	232b      	movmi	r3, #43	@ 0x2b
 80233b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80233b8:	f89a 3000 	ldrb.w	r3, [sl]
 80233bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80233be:	d015      	beq.n	80233ec <_vfiprintf_r+0x120>
 80233c0:	9a07      	ldr	r2, [sp, #28]
 80233c2:	4654      	mov	r4, sl
 80233c4:	2000      	movs	r0, #0
 80233c6:	f04f 0c0a 	mov.w	ip, #10
 80233ca:	4621      	mov	r1, r4
 80233cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233d0:	3b30      	subs	r3, #48	@ 0x30
 80233d2:	2b09      	cmp	r3, #9
 80233d4:	d94b      	bls.n	802346e <_vfiprintf_r+0x1a2>
 80233d6:	b1b0      	cbz	r0, 8023406 <_vfiprintf_r+0x13a>
 80233d8:	9207      	str	r2, [sp, #28]
 80233da:	e014      	b.n	8023406 <_vfiprintf_r+0x13a>
 80233dc:	eba0 0308 	sub.w	r3, r0, r8
 80233e0:	fa09 f303 	lsl.w	r3, r9, r3
 80233e4:	4313      	orrs	r3, r2
 80233e6:	9304      	str	r3, [sp, #16]
 80233e8:	46a2      	mov	sl, r4
 80233ea:	e7d2      	b.n	8023392 <_vfiprintf_r+0xc6>
 80233ec:	9b03      	ldr	r3, [sp, #12]
 80233ee:	1d19      	adds	r1, r3, #4
 80233f0:	681b      	ldr	r3, [r3, #0]
 80233f2:	9103      	str	r1, [sp, #12]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	bfbb      	ittet	lt
 80233f8:	425b      	neglt	r3, r3
 80233fa:	f042 0202 	orrlt.w	r2, r2, #2
 80233fe:	9307      	strge	r3, [sp, #28]
 8023400:	9307      	strlt	r3, [sp, #28]
 8023402:	bfb8      	it	lt
 8023404:	9204      	strlt	r2, [sp, #16]
 8023406:	7823      	ldrb	r3, [r4, #0]
 8023408:	2b2e      	cmp	r3, #46	@ 0x2e
 802340a:	d10a      	bne.n	8023422 <_vfiprintf_r+0x156>
 802340c:	7863      	ldrb	r3, [r4, #1]
 802340e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023410:	d132      	bne.n	8023478 <_vfiprintf_r+0x1ac>
 8023412:	9b03      	ldr	r3, [sp, #12]
 8023414:	1d1a      	adds	r2, r3, #4
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	9203      	str	r2, [sp, #12]
 802341a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802341e:	3402      	adds	r4, #2
 8023420:	9305      	str	r3, [sp, #20]
 8023422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80234f8 <_vfiprintf_r+0x22c>
 8023426:	7821      	ldrb	r1, [r4, #0]
 8023428:	2203      	movs	r2, #3
 802342a:	4650      	mov	r0, sl
 802342c:	f7dc ff70 	bl	8000310 <memchr>
 8023430:	b138      	cbz	r0, 8023442 <_vfiprintf_r+0x176>
 8023432:	9b04      	ldr	r3, [sp, #16]
 8023434:	eba0 000a 	sub.w	r0, r0, sl
 8023438:	2240      	movs	r2, #64	@ 0x40
 802343a:	4082      	lsls	r2, r0
 802343c:	4313      	orrs	r3, r2
 802343e:	3401      	adds	r4, #1
 8023440:	9304      	str	r3, [sp, #16]
 8023442:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023446:	4829      	ldr	r0, [pc, #164]	@ (80234ec <_vfiprintf_r+0x220>)
 8023448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802344c:	2206      	movs	r2, #6
 802344e:	f7dc ff5f 	bl	8000310 <memchr>
 8023452:	2800      	cmp	r0, #0
 8023454:	d03f      	beq.n	80234d6 <_vfiprintf_r+0x20a>
 8023456:	4b26      	ldr	r3, [pc, #152]	@ (80234f0 <_vfiprintf_r+0x224>)
 8023458:	bb1b      	cbnz	r3, 80234a2 <_vfiprintf_r+0x1d6>
 802345a:	9b03      	ldr	r3, [sp, #12]
 802345c:	3307      	adds	r3, #7
 802345e:	f023 0307 	bic.w	r3, r3, #7
 8023462:	3308      	adds	r3, #8
 8023464:	9303      	str	r3, [sp, #12]
 8023466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023468:	443b      	add	r3, r7
 802346a:	9309      	str	r3, [sp, #36]	@ 0x24
 802346c:	e76a      	b.n	8023344 <_vfiprintf_r+0x78>
 802346e:	fb0c 3202 	mla	r2, ip, r2, r3
 8023472:	460c      	mov	r4, r1
 8023474:	2001      	movs	r0, #1
 8023476:	e7a8      	b.n	80233ca <_vfiprintf_r+0xfe>
 8023478:	2300      	movs	r3, #0
 802347a:	3401      	adds	r4, #1
 802347c:	9305      	str	r3, [sp, #20]
 802347e:	4619      	mov	r1, r3
 8023480:	f04f 0c0a 	mov.w	ip, #10
 8023484:	4620      	mov	r0, r4
 8023486:	f810 2b01 	ldrb.w	r2, [r0], #1
 802348a:	3a30      	subs	r2, #48	@ 0x30
 802348c:	2a09      	cmp	r2, #9
 802348e:	d903      	bls.n	8023498 <_vfiprintf_r+0x1cc>
 8023490:	2b00      	cmp	r3, #0
 8023492:	d0c6      	beq.n	8023422 <_vfiprintf_r+0x156>
 8023494:	9105      	str	r1, [sp, #20]
 8023496:	e7c4      	b.n	8023422 <_vfiprintf_r+0x156>
 8023498:	fb0c 2101 	mla	r1, ip, r1, r2
 802349c:	4604      	mov	r4, r0
 802349e:	2301      	movs	r3, #1
 80234a0:	e7f0      	b.n	8023484 <_vfiprintf_r+0x1b8>
 80234a2:	ab03      	add	r3, sp, #12
 80234a4:	9300      	str	r3, [sp, #0]
 80234a6:	462a      	mov	r2, r5
 80234a8:	4b12      	ldr	r3, [pc, #72]	@ (80234f4 <_vfiprintf_r+0x228>)
 80234aa:	a904      	add	r1, sp, #16
 80234ac:	4630      	mov	r0, r6
 80234ae:	f3af 8000 	nop.w
 80234b2:	4607      	mov	r7, r0
 80234b4:	1c78      	adds	r0, r7, #1
 80234b6:	d1d6      	bne.n	8023466 <_vfiprintf_r+0x19a>
 80234b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80234ba:	07d9      	lsls	r1, r3, #31
 80234bc:	d405      	bmi.n	80234ca <_vfiprintf_r+0x1fe>
 80234be:	89ab      	ldrh	r3, [r5, #12]
 80234c0:	059a      	lsls	r2, r3, #22
 80234c2:	d402      	bmi.n	80234ca <_vfiprintf_r+0x1fe>
 80234c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80234c6:	f7ff fce3 	bl	8022e90 <__retarget_lock_release_recursive>
 80234ca:	89ab      	ldrh	r3, [r5, #12]
 80234cc:	065b      	lsls	r3, r3, #25
 80234ce:	f53f af1f 	bmi.w	8023310 <_vfiprintf_r+0x44>
 80234d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80234d4:	e71e      	b.n	8023314 <_vfiprintf_r+0x48>
 80234d6:	ab03      	add	r3, sp, #12
 80234d8:	9300      	str	r3, [sp, #0]
 80234da:	462a      	mov	r2, r5
 80234dc:	4b05      	ldr	r3, [pc, #20]	@ (80234f4 <_vfiprintf_r+0x228>)
 80234de:	a904      	add	r1, sp, #16
 80234e0:	4630      	mov	r0, r6
 80234e2:	f000 f879 	bl	80235d8 <_printf_i>
 80234e6:	e7e4      	b.n	80234b2 <_vfiprintf_r+0x1e6>
 80234e8:	08027304 	.word	0x08027304
 80234ec:	0802730e 	.word	0x0802730e
 80234f0:	00000000 	.word	0x00000000
 80234f4:	080232a9 	.word	0x080232a9
 80234f8:	0802730a 	.word	0x0802730a

080234fc <_printf_common>:
 80234fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023500:	4616      	mov	r6, r2
 8023502:	4698      	mov	r8, r3
 8023504:	688a      	ldr	r2, [r1, #8]
 8023506:	690b      	ldr	r3, [r1, #16]
 8023508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802350c:	4293      	cmp	r3, r2
 802350e:	bfb8      	it	lt
 8023510:	4613      	movlt	r3, r2
 8023512:	6033      	str	r3, [r6, #0]
 8023514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023518:	4607      	mov	r7, r0
 802351a:	460c      	mov	r4, r1
 802351c:	b10a      	cbz	r2, 8023522 <_printf_common+0x26>
 802351e:	3301      	adds	r3, #1
 8023520:	6033      	str	r3, [r6, #0]
 8023522:	6823      	ldr	r3, [r4, #0]
 8023524:	0699      	lsls	r1, r3, #26
 8023526:	bf42      	ittt	mi
 8023528:	6833      	ldrmi	r3, [r6, #0]
 802352a:	3302      	addmi	r3, #2
 802352c:	6033      	strmi	r3, [r6, #0]
 802352e:	6825      	ldr	r5, [r4, #0]
 8023530:	f015 0506 	ands.w	r5, r5, #6
 8023534:	d106      	bne.n	8023544 <_printf_common+0x48>
 8023536:	f104 0a19 	add.w	sl, r4, #25
 802353a:	68e3      	ldr	r3, [r4, #12]
 802353c:	6832      	ldr	r2, [r6, #0]
 802353e:	1a9b      	subs	r3, r3, r2
 8023540:	42ab      	cmp	r3, r5
 8023542:	dc26      	bgt.n	8023592 <_printf_common+0x96>
 8023544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023548:	6822      	ldr	r2, [r4, #0]
 802354a:	3b00      	subs	r3, #0
 802354c:	bf18      	it	ne
 802354e:	2301      	movne	r3, #1
 8023550:	0692      	lsls	r2, r2, #26
 8023552:	d42b      	bmi.n	80235ac <_printf_common+0xb0>
 8023554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023558:	4641      	mov	r1, r8
 802355a:	4638      	mov	r0, r7
 802355c:	47c8      	blx	r9
 802355e:	3001      	adds	r0, #1
 8023560:	d01e      	beq.n	80235a0 <_printf_common+0xa4>
 8023562:	6823      	ldr	r3, [r4, #0]
 8023564:	6922      	ldr	r2, [r4, #16]
 8023566:	f003 0306 	and.w	r3, r3, #6
 802356a:	2b04      	cmp	r3, #4
 802356c:	bf02      	ittt	eq
 802356e:	68e5      	ldreq	r5, [r4, #12]
 8023570:	6833      	ldreq	r3, [r6, #0]
 8023572:	1aed      	subeq	r5, r5, r3
 8023574:	68a3      	ldr	r3, [r4, #8]
 8023576:	bf0c      	ite	eq
 8023578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802357c:	2500      	movne	r5, #0
 802357e:	4293      	cmp	r3, r2
 8023580:	bfc4      	itt	gt
 8023582:	1a9b      	subgt	r3, r3, r2
 8023584:	18ed      	addgt	r5, r5, r3
 8023586:	2600      	movs	r6, #0
 8023588:	341a      	adds	r4, #26
 802358a:	42b5      	cmp	r5, r6
 802358c:	d11a      	bne.n	80235c4 <_printf_common+0xc8>
 802358e:	2000      	movs	r0, #0
 8023590:	e008      	b.n	80235a4 <_printf_common+0xa8>
 8023592:	2301      	movs	r3, #1
 8023594:	4652      	mov	r2, sl
 8023596:	4641      	mov	r1, r8
 8023598:	4638      	mov	r0, r7
 802359a:	47c8      	blx	r9
 802359c:	3001      	adds	r0, #1
 802359e:	d103      	bne.n	80235a8 <_printf_common+0xac>
 80235a0:	f04f 30ff 	mov.w	r0, #4294967295
 80235a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235a8:	3501      	adds	r5, #1
 80235aa:	e7c6      	b.n	802353a <_printf_common+0x3e>
 80235ac:	18e1      	adds	r1, r4, r3
 80235ae:	1c5a      	adds	r2, r3, #1
 80235b0:	2030      	movs	r0, #48	@ 0x30
 80235b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80235b6:	4422      	add	r2, r4
 80235b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80235bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80235c0:	3302      	adds	r3, #2
 80235c2:	e7c7      	b.n	8023554 <_printf_common+0x58>
 80235c4:	2301      	movs	r3, #1
 80235c6:	4622      	mov	r2, r4
 80235c8:	4641      	mov	r1, r8
 80235ca:	4638      	mov	r0, r7
 80235cc:	47c8      	blx	r9
 80235ce:	3001      	adds	r0, #1
 80235d0:	d0e6      	beq.n	80235a0 <_printf_common+0xa4>
 80235d2:	3601      	adds	r6, #1
 80235d4:	e7d9      	b.n	802358a <_printf_common+0x8e>
	...

080235d8 <_printf_i>:
 80235d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80235dc:	7e0f      	ldrb	r7, [r1, #24]
 80235de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80235e0:	2f78      	cmp	r7, #120	@ 0x78
 80235e2:	4691      	mov	r9, r2
 80235e4:	4680      	mov	r8, r0
 80235e6:	460c      	mov	r4, r1
 80235e8:	469a      	mov	sl, r3
 80235ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80235ee:	d807      	bhi.n	8023600 <_printf_i+0x28>
 80235f0:	2f62      	cmp	r7, #98	@ 0x62
 80235f2:	d80a      	bhi.n	802360a <_printf_i+0x32>
 80235f4:	2f00      	cmp	r7, #0
 80235f6:	f000 80d2 	beq.w	802379e <_printf_i+0x1c6>
 80235fa:	2f58      	cmp	r7, #88	@ 0x58
 80235fc:	f000 80b9 	beq.w	8023772 <_printf_i+0x19a>
 8023600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023608:	e03a      	b.n	8023680 <_printf_i+0xa8>
 802360a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802360e:	2b15      	cmp	r3, #21
 8023610:	d8f6      	bhi.n	8023600 <_printf_i+0x28>
 8023612:	a101      	add	r1, pc, #4	@ (adr r1, 8023618 <_printf_i+0x40>)
 8023614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023618:	08023671 	.word	0x08023671
 802361c:	08023685 	.word	0x08023685
 8023620:	08023601 	.word	0x08023601
 8023624:	08023601 	.word	0x08023601
 8023628:	08023601 	.word	0x08023601
 802362c:	08023601 	.word	0x08023601
 8023630:	08023685 	.word	0x08023685
 8023634:	08023601 	.word	0x08023601
 8023638:	08023601 	.word	0x08023601
 802363c:	08023601 	.word	0x08023601
 8023640:	08023601 	.word	0x08023601
 8023644:	08023785 	.word	0x08023785
 8023648:	080236af 	.word	0x080236af
 802364c:	0802373f 	.word	0x0802373f
 8023650:	08023601 	.word	0x08023601
 8023654:	08023601 	.word	0x08023601
 8023658:	080237a7 	.word	0x080237a7
 802365c:	08023601 	.word	0x08023601
 8023660:	080236af 	.word	0x080236af
 8023664:	08023601 	.word	0x08023601
 8023668:	08023601 	.word	0x08023601
 802366c:	08023747 	.word	0x08023747
 8023670:	6833      	ldr	r3, [r6, #0]
 8023672:	1d1a      	adds	r2, r3, #4
 8023674:	681b      	ldr	r3, [r3, #0]
 8023676:	6032      	str	r2, [r6, #0]
 8023678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802367c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023680:	2301      	movs	r3, #1
 8023682:	e09d      	b.n	80237c0 <_printf_i+0x1e8>
 8023684:	6833      	ldr	r3, [r6, #0]
 8023686:	6820      	ldr	r0, [r4, #0]
 8023688:	1d19      	adds	r1, r3, #4
 802368a:	6031      	str	r1, [r6, #0]
 802368c:	0606      	lsls	r6, r0, #24
 802368e:	d501      	bpl.n	8023694 <_printf_i+0xbc>
 8023690:	681d      	ldr	r5, [r3, #0]
 8023692:	e003      	b.n	802369c <_printf_i+0xc4>
 8023694:	0645      	lsls	r5, r0, #25
 8023696:	d5fb      	bpl.n	8023690 <_printf_i+0xb8>
 8023698:	f9b3 5000 	ldrsh.w	r5, [r3]
 802369c:	2d00      	cmp	r5, #0
 802369e:	da03      	bge.n	80236a8 <_printf_i+0xd0>
 80236a0:	232d      	movs	r3, #45	@ 0x2d
 80236a2:	426d      	negs	r5, r5
 80236a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80236a8:	4859      	ldr	r0, [pc, #356]	@ (8023810 <_printf_i+0x238>)
 80236aa:	230a      	movs	r3, #10
 80236ac:	e011      	b.n	80236d2 <_printf_i+0xfa>
 80236ae:	6821      	ldr	r1, [r4, #0]
 80236b0:	6833      	ldr	r3, [r6, #0]
 80236b2:	0608      	lsls	r0, r1, #24
 80236b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80236b8:	d402      	bmi.n	80236c0 <_printf_i+0xe8>
 80236ba:	0649      	lsls	r1, r1, #25
 80236bc:	bf48      	it	mi
 80236be:	b2ad      	uxthmi	r5, r5
 80236c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80236c2:	4853      	ldr	r0, [pc, #332]	@ (8023810 <_printf_i+0x238>)
 80236c4:	6033      	str	r3, [r6, #0]
 80236c6:	bf14      	ite	ne
 80236c8:	230a      	movne	r3, #10
 80236ca:	2308      	moveq	r3, #8
 80236cc:	2100      	movs	r1, #0
 80236ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80236d2:	6866      	ldr	r6, [r4, #4]
 80236d4:	60a6      	str	r6, [r4, #8]
 80236d6:	2e00      	cmp	r6, #0
 80236d8:	bfa2      	ittt	ge
 80236da:	6821      	ldrge	r1, [r4, #0]
 80236dc:	f021 0104 	bicge.w	r1, r1, #4
 80236e0:	6021      	strge	r1, [r4, #0]
 80236e2:	b90d      	cbnz	r5, 80236e8 <_printf_i+0x110>
 80236e4:	2e00      	cmp	r6, #0
 80236e6:	d04b      	beq.n	8023780 <_printf_i+0x1a8>
 80236e8:	4616      	mov	r6, r2
 80236ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80236ee:	fb03 5711 	mls	r7, r3, r1, r5
 80236f2:	5dc7      	ldrb	r7, [r0, r7]
 80236f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80236f8:	462f      	mov	r7, r5
 80236fa:	42bb      	cmp	r3, r7
 80236fc:	460d      	mov	r5, r1
 80236fe:	d9f4      	bls.n	80236ea <_printf_i+0x112>
 8023700:	2b08      	cmp	r3, #8
 8023702:	d10b      	bne.n	802371c <_printf_i+0x144>
 8023704:	6823      	ldr	r3, [r4, #0]
 8023706:	07df      	lsls	r7, r3, #31
 8023708:	d508      	bpl.n	802371c <_printf_i+0x144>
 802370a:	6923      	ldr	r3, [r4, #16]
 802370c:	6861      	ldr	r1, [r4, #4]
 802370e:	4299      	cmp	r1, r3
 8023710:	bfde      	ittt	le
 8023712:	2330      	movle	r3, #48	@ 0x30
 8023714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023718:	f106 36ff 	addle.w	r6, r6, #4294967295
 802371c:	1b92      	subs	r2, r2, r6
 802371e:	6122      	str	r2, [r4, #16]
 8023720:	f8cd a000 	str.w	sl, [sp]
 8023724:	464b      	mov	r3, r9
 8023726:	aa03      	add	r2, sp, #12
 8023728:	4621      	mov	r1, r4
 802372a:	4640      	mov	r0, r8
 802372c:	f7ff fee6 	bl	80234fc <_printf_common>
 8023730:	3001      	adds	r0, #1
 8023732:	d14a      	bne.n	80237ca <_printf_i+0x1f2>
 8023734:	f04f 30ff 	mov.w	r0, #4294967295
 8023738:	b004      	add	sp, #16
 802373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802373e:	6823      	ldr	r3, [r4, #0]
 8023740:	f043 0320 	orr.w	r3, r3, #32
 8023744:	6023      	str	r3, [r4, #0]
 8023746:	4833      	ldr	r0, [pc, #204]	@ (8023814 <_printf_i+0x23c>)
 8023748:	2778      	movs	r7, #120	@ 0x78
 802374a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802374e:	6823      	ldr	r3, [r4, #0]
 8023750:	6831      	ldr	r1, [r6, #0]
 8023752:	061f      	lsls	r7, r3, #24
 8023754:	f851 5b04 	ldr.w	r5, [r1], #4
 8023758:	d402      	bmi.n	8023760 <_printf_i+0x188>
 802375a:	065f      	lsls	r7, r3, #25
 802375c:	bf48      	it	mi
 802375e:	b2ad      	uxthmi	r5, r5
 8023760:	6031      	str	r1, [r6, #0]
 8023762:	07d9      	lsls	r1, r3, #31
 8023764:	bf44      	itt	mi
 8023766:	f043 0320 	orrmi.w	r3, r3, #32
 802376a:	6023      	strmi	r3, [r4, #0]
 802376c:	b11d      	cbz	r5, 8023776 <_printf_i+0x19e>
 802376e:	2310      	movs	r3, #16
 8023770:	e7ac      	b.n	80236cc <_printf_i+0xf4>
 8023772:	4827      	ldr	r0, [pc, #156]	@ (8023810 <_printf_i+0x238>)
 8023774:	e7e9      	b.n	802374a <_printf_i+0x172>
 8023776:	6823      	ldr	r3, [r4, #0]
 8023778:	f023 0320 	bic.w	r3, r3, #32
 802377c:	6023      	str	r3, [r4, #0]
 802377e:	e7f6      	b.n	802376e <_printf_i+0x196>
 8023780:	4616      	mov	r6, r2
 8023782:	e7bd      	b.n	8023700 <_printf_i+0x128>
 8023784:	6833      	ldr	r3, [r6, #0]
 8023786:	6825      	ldr	r5, [r4, #0]
 8023788:	6961      	ldr	r1, [r4, #20]
 802378a:	1d18      	adds	r0, r3, #4
 802378c:	6030      	str	r0, [r6, #0]
 802378e:	062e      	lsls	r6, r5, #24
 8023790:	681b      	ldr	r3, [r3, #0]
 8023792:	d501      	bpl.n	8023798 <_printf_i+0x1c0>
 8023794:	6019      	str	r1, [r3, #0]
 8023796:	e002      	b.n	802379e <_printf_i+0x1c6>
 8023798:	0668      	lsls	r0, r5, #25
 802379a:	d5fb      	bpl.n	8023794 <_printf_i+0x1bc>
 802379c:	8019      	strh	r1, [r3, #0]
 802379e:	2300      	movs	r3, #0
 80237a0:	6123      	str	r3, [r4, #16]
 80237a2:	4616      	mov	r6, r2
 80237a4:	e7bc      	b.n	8023720 <_printf_i+0x148>
 80237a6:	6833      	ldr	r3, [r6, #0]
 80237a8:	1d1a      	adds	r2, r3, #4
 80237aa:	6032      	str	r2, [r6, #0]
 80237ac:	681e      	ldr	r6, [r3, #0]
 80237ae:	6862      	ldr	r2, [r4, #4]
 80237b0:	2100      	movs	r1, #0
 80237b2:	4630      	mov	r0, r6
 80237b4:	f7dc fdac 	bl	8000310 <memchr>
 80237b8:	b108      	cbz	r0, 80237be <_printf_i+0x1e6>
 80237ba:	1b80      	subs	r0, r0, r6
 80237bc:	6060      	str	r0, [r4, #4]
 80237be:	6863      	ldr	r3, [r4, #4]
 80237c0:	6123      	str	r3, [r4, #16]
 80237c2:	2300      	movs	r3, #0
 80237c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80237c8:	e7aa      	b.n	8023720 <_printf_i+0x148>
 80237ca:	6923      	ldr	r3, [r4, #16]
 80237cc:	4632      	mov	r2, r6
 80237ce:	4649      	mov	r1, r9
 80237d0:	4640      	mov	r0, r8
 80237d2:	47d0      	blx	sl
 80237d4:	3001      	adds	r0, #1
 80237d6:	d0ad      	beq.n	8023734 <_printf_i+0x15c>
 80237d8:	6823      	ldr	r3, [r4, #0]
 80237da:	079b      	lsls	r3, r3, #30
 80237dc:	d413      	bmi.n	8023806 <_printf_i+0x22e>
 80237de:	68e0      	ldr	r0, [r4, #12]
 80237e0:	9b03      	ldr	r3, [sp, #12]
 80237e2:	4298      	cmp	r0, r3
 80237e4:	bfb8      	it	lt
 80237e6:	4618      	movlt	r0, r3
 80237e8:	e7a6      	b.n	8023738 <_printf_i+0x160>
 80237ea:	2301      	movs	r3, #1
 80237ec:	4632      	mov	r2, r6
 80237ee:	4649      	mov	r1, r9
 80237f0:	4640      	mov	r0, r8
 80237f2:	47d0      	blx	sl
 80237f4:	3001      	adds	r0, #1
 80237f6:	d09d      	beq.n	8023734 <_printf_i+0x15c>
 80237f8:	3501      	adds	r5, #1
 80237fa:	68e3      	ldr	r3, [r4, #12]
 80237fc:	9903      	ldr	r1, [sp, #12]
 80237fe:	1a5b      	subs	r3, r3, r1
 8023800:	42ab      	cmp	r3, r5
 8023802:	dcf2      	bgt.n	80237ea <_printf_i+0x212>
 8023804:	e7eb      	b.n	80237de <_printf_i+0x206>
 8023806:	2500      	movs	r5, #0
 8023808:	f104 0619 	add.w	r6, r4, #25
 802380c:	e7f5      	b.n	80237fa <_printf_i+0x222>
 802380e:	bf00      	nop
 8023810:	08027315 	.word	0x08027315
 8023814:	08027326 	.word	0x08027326

08023818 <__swbuf_r>:
 8023818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802381a:	460e      	mov	r6, r1
 802381c:	4614      	mov	r4, r2
 802381e:	4605      	mov	r5, r0
 8023820:	b118      	cbz	r0, 802382a <__swbuf_r+0x12>
 8023822:	6a03      	ldr	r3, [r0, #32]
 8023824:	b90b      	cbnz	r3, 802382a <__swbuf_r+0x12>
 8023826:	f7ff f9ef 	bl	8022c08 <__sinit>
 802382a:	69a3      	ldr	r3, [r4, #24]
 802382c:	60a3      	str	r3, [r4, #8]
 802382e:	89a3      	ldrh	r3, [r4, #12]
 8023830:	071a      	lsls	r2, r3, #28
 8023832:	d501      	bpl.n	8023838 <__swbuf_r+0x20>
 8023834:	6923      	ldr	r3, [r4, #16]
 8023836:	b943      	cbnz	r3, 802384a <__swbuf_r+0x32>
 8023838:	4621      	mov	r1, r4
 802383a:	4628      	mov	r0, r5
 802383c:	f000 f82a 	bl	8023894 <__swsetup_r>
 8023840:	b118      	cbz	r0, 802384a <__swbuf_r+0x32>
 8023842:	f04f 37ff 	mov.w	r7, #4294967295
 8023846:	4638      	mov	r0, r7
 8023848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802384a:	6823      	ldr	r3, [r4, #0]
 802384c:	6922      	ldr	r2, [r4, #16]
 802384e:	1a98      	subs	r0, r3, r2
 8023850:	6963      	ldr	r3, [r4, #20]
 8023852:	b2f6      	uxtb	r6, r6
 8023854:	4283      	cmp	r3, r0
 8023856:	4637      	mov	r7, r6
 8023858:	dc05      	bgt.n	8023866 <__swbuf_r+0x4e>
 802385a:	4621      	mov	r1, r4
 802385c:	4628      	mov	r0, r5
 802385e:	f7ff fcbb 	bl	80231d8 <_fflush_r>
 8023862:	2800      	cmp	r0, #0
 8023864:	d1ed      	bne.n	8023842 <__swbuf_r+0x2a>
 8023866:	68a3      	ldr	r3, [r4, #8]
 8023868:	3b01      	subs	r3, #1
 802386a:	60a3      	str	r3, [r4, #8]
 802386c:	6823      	ldr	r3, [r4, #0]
 802386e:	1c5a      	adds	r2, r3, #1
 8023870:	6022      	str	r2, [r4, #0]
 8023872:	701e      	strb	r6, [r3, #0]
 8023874:	6962      	ldr	r2, [r4, #20]
 8023876:	1c43      	adds	r3, r0, #1
 8023878:	429a      	cmp	r2, r3
 802387a:	d004      	beq.n	8023886 <__swbuf_r+0x6e>
 802387c:	89a3      	ldrh	r3, [r4, #12]
 802387e:	07db      	lsls	r3, r3, #31
 8023880:	d5e1      	bpl.n	8023846 <__swbuf_r+0x2e>
 8023882:	2e0a      	cmp	r6, #10
 8023884:	d1df      	bne.n	8023846 <__swbuf_r+0x2e>
 8023886:	4621      	mov	r1, r4
 8023888:	4628      	mov	r0, r5
 802388a:	f7ff fca5 	bl	80231d8 <_fflush_r>
 802388e:	2800      	cmp	r0, #0
 8023890:	d0d9      	beq.n	8023846 <__swbuf_r+0x2e>
 8023892:	e7d6      	b.n	8023842 <__swbuf_r+0x2a>

08023894 <__swsetup_r>:
 8023894:	b538      	push	{r3, r4, r5, lr}
 8023896:	4b29      	ldr	r3, [pc, #164]	@ (802393c <__swsetup_r+0xa8>)
 8023898:	4605      	mov	r5, r0
 802389a:	6818      	ldr	r0, [r3, #0]
 802389c:	460c      	mov	r4, r1
 802389e:	b118      	cbz	r0, 80238a8 <__swsetup_r+0x14>
 80238a0:	6a03      	ldr	r3, [r0, #32]
 80238a2:	b90b      	cbnz	r3, 80238a8 <__swsetup_r+0x14>
 80238a4:	f7ff f9b0 	bl	8022c08 <__sinit>
 80238a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80238ac:	0719      	lsls	r1, r3, #28
 80238ae:	d422      	bmi.n	80238f6 <__swsetup_r+0x62>
 80238b0:	06da      	lsls	r2, r3, #27
 80238b2:	d407      	bmi.n	80238c4 <__swsetup_r+0x30>
 80238b4:	2209      	movs	r2, #9
 80238b6:	602a      	str	r2, [r5, #0]
 80238b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80238bc:	81a3      	strh	r3, [r4, #12]
 80238be:	f04f 30ff 	mov.w	r0, #4294967295
 80238c2:	e033      	b.n	802392c <__swsetup_r+0x98>
 80238c4:	0758      	lsls	r0, r3, #29
 80238c6:	d512      	bpl.n	80238ee <__swsetup_r+0x5a>
 80238c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80238ca:	b141      	cbz	r1, 80238de <__swsetup_r+0x4a>
 80238cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80238d0:	4299      	cmp	r1, r3
 80238d2:	d002      	beq.n	80238da <__swsetup_r+0x46>
 80238d4:	4628      	mov	r0, r5
 80238d6:	f7ff fafb 	bl	8022ed0 <_free_r>
 80238da:	2300      	movs	r3, #0
 80238dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80238de:	89a3      	ldrh	r3, [r4, #12]
 80238e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80238e4:	81a3      	strh	r3, [r4, #12]
 80238e6:	2300      	movs	r3, #0
 80238e8:	6063      	str	r3, [r4, #4]
 80238ea:	6923      	ldr	r3, [r4, #16]
 80238ec:	6023      	str	r3, [r4, #0]
 80238ee:	89a3      	ldrh	r3, [r4, #12]
 80238f0:	f043 0308 	orr.w	r3, r3, #8
 80238f4:	81a3      	strh	r3, [r4, #12]
 80238f6:	6923      	ldr	r3, [r4, #16]
 80238f8:	b94b      	cbnz	r3, 802390e <__swsetup_r+0x7a>
 80238fa:	89a3      	ldrh	r3, [r4, #12]
 80238fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023904:	d003      	beq.n	802390e <__swsetup_r+0x7a>
 8023906:	4621      	mov	r1, r4
 8023908:	4628      	mov	r0, r5
 802390a:	f000 f883 	bl	8023a14 <__smakebuf_r>
 802390e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023912:	f013 0201 	ands.w	r2, r3, #1
 8023916:	d00a      	beq.n	802392e <__swsetup_r+0x9a>
 8023918:	2200      	movs	r2, #0
 802391a:	60a2      	str	r2, [r4, #8]
 802391c:	6962      	ldr	r2, [r4, #20]
 802391e:	4252      	negs	r2, r2
 8023920:	61a2      	str	r2, [r4, #24]
 8023922:	6922      	ldr	r2, [r4, #16]
 8023924:	b942      	cbnz	r2, 8023938 <__swsetup_r+0xa4>
 8023926:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802392a:	d1c5      	bne.n	80238b8 <__swsetup_r+0x24>
 802392c:	bd38      	pop	{r3, r4, r5, pc}
 802392e:	0799      	lsls	r1, r3, #30
 8023930:	bf58      	it	pl
 8023932:	6962      	ldrpl	r2, [r4, #20]
 8023934:	60a2      	str	r2, [r4, #8]
 8023936:	e7f4      	b.n	8023922 <__swsetup_r+0x8e>
 8023938:	2000      	movs	r0, #0
 802393a:	e7f7      	b.n	802392c <__swsetup_r+0x98>
 802393c:	20000038 	.word	0x20000038

08023940 <_raise_r>:
 8023940:	291f      	cmp	r1, #31
 8023942:	b538      	push	{r3, r4, r5, lr}
 8023944:	4605      	mov	r5, r0
 8023946:	460c      	mov	r4, r1
 8023948:	d904      	bls.n	8023954 <_raise_r+0x14>
 802394a:	2316      	movs	r3, #22
 802394c:	6003      	str	r3, [r0, #0]
 802394e:	f04f 30ff 	mov.w	r0, #4294967295
 8023952:	bd38      	pop	{r3, r4, r5, pc}
 8023954:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023956:	b112      	cbz	r2, 802395e <_raise_r+0x1e>
 8023958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802395c:	b94b      	cbnz	r3, 8023972 <_raise_r+0x32>
 802395e:	4628      	mov	r0, r5
 8023960:	f000 f830 	bl	80239c4 <_getpid_r>
 8023964:	4622      	mov	r2, r4
 8023966:	4601      	mov	r1, r0
 8023968:	4628      	mov	r0, r5
 802396a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802396e:	f000 b817 	b.w	80239a0 <_kill_r>
 8023972:	2b01      	cmp	r3, #1
 8023974:	d00a      	beq.n	802398c <_raise_r+0x4c>
 8023976:	1c59      	adds	r1, r3, #1
 8023978:	d103      	bne.n	8023982 <_raise_r+0x42>
 802397a:	2316      	movs	r3, #22
 802397c:	6003      	str	r3, [r0, #0]
 802397e:	2001      	movs	r0, #1
 8023980:	e7e7      	b.n	8023952 <_raise_r+0x12>
 8023982:	2100      	movs	r1, #0
 8023984:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023988:	4620      	mov	r0, r4
 802398a:	4798      	blx	r3
 802398c:	2000      	movs	r0, #0
 802398e:	e7e0      	b.n	8023952 <_raise_r+0x12>

08023990 <raise>:
 8023990:	4b02      	ldr	r3, [pc, #8]	@ (802399c <raise+0xc>)
 8023992:	4601      	mov	r1, r0
 8023994:	6818      	ldr	r0, [r3, #0]
 8023996:	f7ff bfd3 	b.w	8023940 <_raise_r>
 802399a:	bf00      	nop
 802399c:	20000038 	.word	0x20000038

080239a0 <_kill_r>:
 80239a0:	b538      	push	{r3, r4, r5, lr}
 80239a2:	4d07      	ldr	r5, [pc, #28]	@ (80239c0 <_kill_r+0x20>)
 80239a4:	2300      	movs	r3, #0
 80239a6:	4604      	mov	r4, r0
 80239a8:	4608      	mov	r0, r1
 80239aa:	4611      	mov	r1, r2
 80239ac:	602b      	str	r3, [r5, #0]
 80239ae:	f7de fe69 	bl	8002684 <_kill>
 80239b2:	1c43      	adds	r3, r0, #1
 80239b4:	d102      	bne.n	80239bc <_kill_r+0x1c>
 80239b6:	682b      	ldr	r3, [r5, #0]
 80239b8:	b103      	cbz	r3, 80239bc <_kill_r+0x1c>
 80239ba:	6023      	str	r3, [r4, #0]
 80239bc:	bd38      	pop	{r3, r4, r5, pc}
 80239be:	bf00      	nop
 80239c0:	200026b0 	.word	0x200026b0

080239c4 <_getpid_r>:
 80239c4:	f7de be56 	b.w	8002674 <_getpid>

080239c8 <__swhatbuf_r>:
 80239c8:	b570      	push	{r4, r5, r6, lr}
 80239ca:	460c      	mov	r4, r1
 80239cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239d0:	2900      	cmp	r1, #0
 80239d2:	b096      	sub	sp, #88	@ 0x58
 80239d4:	4615      	mov	r5, r2
 80239d6:	461e      	mov	r6, r3
 80239d8:	da0d      	bge.n	80239f6 <__swhatbuf_r+0x2e>
 80239da:	89a3      	ldrh	r3, [r4, #12]
 80239dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80239e0:	f04f 0100 	mov.w	r1, #0
 80239e4:	bf14      	ite	ne
 80239e6:	2340      	movne	r3, #64	@ 0x40
 80239e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80239ec:	2000      	movs	r0, #0
 80239ee:	6031      	str	r1, [r6, #0]
 80239f0:	602b      	str	r3, [r5, #0]
 80239f2:	b016      	add	sp, #88	@ 0x58
 80239f4:	bd70      	pop	{r4, r5, r6, pc}
 80239f6:	466a      	mov	r2, sp
 80239f8:	f000 f848 	bl	8023a8c <_fstat_r>
 80239fc:	2800      	cmp	r0, #0
 80239fe:	dbec      	blt.n	80239da <__swhatbuf_r+0x12>
 8023a00:	9901      	ldr	r1, [sp, #4]
 8023a02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023a06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023a0a:	4259      	negs	r1, r3
 8023a0c:	4159      	adcs	r1, r3
 8023a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023a12:	e7eb      	b.n	80239ec <__swhatbuf_r+0x24>

08023a14 <__smakebuf_r>:
 8023a14:	898b      	ldrh	r3, [r1, #12]
 8023a16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023a18:	079d      	lsls	r5, r3, #30
 8023a1a:	4606      	mov	r6, r0
 8023a1c:	460c      	mov	r4, r1
 8023a1e:	d507      	bpl.n	8023a30 <__smakebuf_r+0x1c>
 8023a20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023a24:	6023      	str	r3, [r4, #0]
 8023a26:	6123      	str	r3, [r4, #16]
 8023a28:	2301      	movs	r3, #1
 8023a2a:	6163      	str	r3, [r4, #20]
 8023a2c:	b003      	add	sp, #12
 8023a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a30:	ab01      	add	r3, sp, #4
 8023a32:	466a      	mov	r2, sp
 8023a34:	f7ff ffc8 	bl	80239c8 <__swhatbuf_r>
 8023a38:	9f00      	ldr	r7, [sp, #0]
 8023a3a:	4605      	mov	r5, r0
 8023a3c:	4639      	mov	r1, r7
 8023a3e:	4630      	mov	r0, r6
 8023a40:	f7ff faba 	bl	8022fb8 <_malloc_r>
 8023a44:	b948      	cbnz	r0, 8023a5a <__smakebuf_r+0x46>
 8023a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023a4a:	059a      	lsls	r2, r3, #22
 8023a4c:	d4ee      	bmi.n	8023a2c <__smakebuf_r+0x18>
 8023a4e:	f023 0303 	bic.w	r3, r3, #3
 8023a52:	f043 0302 	orr.w	r3, r3, #2
 8023a56:	81a3      	strh	r3, [r4, #12]
 8023a58:	e7e2      	b.n	8023a20 <__smakebuf_r+0xc>
 8023a5a:	89a3      	ldrh	r3, [r4, #12]
 8023a5c:	6020      	str	r0, [r4, #0]
 8023a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023a62:	81a3      	strh	r3, [r4, #12]
 8023a64:	9b01      	ldr	r3, [sp, #4]
 8023a66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023a6a:	b15b      	cbz	r3, 8023a84 <__smakebuf_r+0x70>
 8023a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a70:	4630      	mov	r0, r6
 8023a72:	f000 f81d 	bl	8023ab0 <_isatty_r>
 8023a76:	b128      	cbz	r0, 8023a84 <__smakebuf_r+0x70>
 8023a78:	89a3      	ldrh	r3, [r4, #12]
 8023a7a:	f023 0303 	bic.w	r3, r3, #3
 8023a7e:	f043 0301 	orr.w	r3, r3, #1
 8023a82:	81a3      	strh	r3, [r4, #12]
 8023a84:	89a3      	ldrh	r3, [r4, #12]
 8023a86:	431d      	orrs	r5, r3
 8023a88:	81a5      	strh	r5, [r4, #12]
 8023a8a:	e7cf      	b.n	8023a2c <__smakebuf_r+0x18>

08023a8c <_fstat_r>:
 8023a8c:	b538      	push	{r3, r4, r5, lr}
 8023a8e:	4d07      	ldr	r5, [pc, #28]	@ (8023aac <_fstat_r+0x20>)
 8023a90:	2300      	movs	r3, #0
 8023a92:	4604      	mov	r4, r0
 8023a94:	4608      	mov	r0, r1
 8023a96:	4611      	mov	r1, r2
 8023a98:	602b      	str	r3, [r5, #0]
 8023a9a:	f7de fe53 	bl	8002744 <_fstat>
 8023a9e:	1c43      	adds	r3, r0, #1
 8023aa0:	d102      	bne.n	8023aa8 <_fstat_r+0x1c>
 8023aa2:	682b      	ldr	r3, [r5, #0]
 8023aa4:	b103      	cbz	r3, 8023aa8 <_fstat_r+0x1c>
 8023aa6:	6023      	str	r3, [r4, #0]
 8023aa8:	bd38      	pop	{r3, r4, r5, pc}
 8023aaa:	bf00      	nop
 8023aac:	200026b0 	.word	0x200026b0

08023ab0 <_isatty_r>:
 8023ab0:	b538      	push	{r3, r4, r5, lr}
 8023ab2:	4d06      	ldr	r5, [pc, #24]	@ (8023acc <_isatty_r+0x1c>)
 8023ab4:	2300      	movs	r3, #0
 8023ab6:	4604      	mov	r4, r0
 8023ab8:	4608      	mov	r0, r1
 8023aba:	602b      	str	r3, [r5, #0]
 8023abc:	f7de fe52 	bl	8002764 <_isatty>
 8023ac0:	1c43      	adds	r3, r0, #1
 8023ac2:	d102      	bne.n	8023aca <_isatty_r+0x1a>
 8023ac4:	682b      	ldr	r3, [r5, #0]
 8023ac6:	b103      	cbz	r3, 8023aca <_isatty_r+0x1a>
 8023ac8:	6023      	str	r3, [r4, #0]
 8023aca:	bd38      	pop	{r3, r4, r5, pc}
 8023acc:	200026b0 	.word	0x200026b0

08023ad0 <_init>:
 8023ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ad2:	bf00      	nop
 8023ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ad6:	bc08      	pop	{r3}
 8023ad8:	469e      	mov	lr, r3
 8023ada:	4770      	bx	lr

08023adc <_fini>:
 8023adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023ade:	bf00      	nop
 8023ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023ae2:	bc08      	pop	{r3}
 8023ae4:	469e      	mov	lr, r3
 8023ae6:	4770      	bx	lr
